import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if len(unvisited_nodes) == 1:
        return unvisited_nodes[0]

    # Calculate probabilities for each unvisited node
    probabilities = []
    total_weight = 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            # Higher probability for destination, decaying with remaining nodes
            weight = 1.0 / (len(unvisited_nodes) ** 0.5)
        else:
            # Probability inversely proportional to distance
            weight = 1.0 / (distance_matrix[current_node][node] + 1e-6)

        probabilities.append(weight)
        total_weight += weight

    # Normalize probabilities
    probabilities = [w / total_weight for w in probabilities]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
