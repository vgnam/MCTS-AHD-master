def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if len(unvisited_nodes) == 1:
        return unvisited_nodes[0]

    # Calculate probability for destination node
    dest_prob = 0.5 * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix) - 1))

    # Randomly decide to prioritize destination or closest node
    if destination_node in unvisited_nodes and np.random.rand() < dest_prob:
        return destination_node
    else:
        min_distance = float('inf')
        next_node = None
        for node in unvisited_nodes:
            if distance_matrix[current_node][node] < min_distance:
                min_distance = distance_matrix[current_node][node]
                next_node = node
        return next_node
