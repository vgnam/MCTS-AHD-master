def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        if len(unvisited_nodes) == 1:
            return destination_node
        else:
            # Calculate a weighted score combining distance to current node and distance to destination
            weighted_scores = {}
            for node in unvisited_nodes:
                if node == destination_node:
                    weighted_scores[node] = 0  # Highest priority for destination when few nodes remain
                else:
                    dist_to_current = distance_matrix[current_node][node]
                    dist_to_dest = distance_matrix[node][destination_node]
                    weighted_scores[node] = dist_to_current + 0.5 * dist_to_dest  # Balance between immediate and future steps

            # Select the node with the minimum weighted score
            next_node = min(weighted_scores, key=weighted_scores.get)
            return next_node
    else:
        # Fall back to nearest neighbor if destination is already visited
        min_distance = float('inf')
        next_node = None
        for node in unvisited_nodes:
            if distance_matrix[current_node][node] < min_distance:
                min_distance = distance_matrix[current_node][node]
                next_node = node
        return next_node
