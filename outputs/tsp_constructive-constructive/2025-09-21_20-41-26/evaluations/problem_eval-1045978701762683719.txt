def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_nodes = len(unvisited_nodes) + 1  # Include current node
    destination_weight = (len(unvisited_nodes) / total_nodes) ** 2  # Quadratic decay

    if destination_node in unvisited_nodes and len(unvisited_nodes) > 1:
        min_distance = distance_matrix[current_node][destination_node]
        next_node = destination_node
    else:
        min_distance = float('inf')
        next_node = None
        for node in unvisited_nodes:
            distance = distance_matrix[current_node][node]
            if node == destination_node:
                distance *= (1 - destination_weight)  # Reduce distance penalty
            if distance < min_distance:
                min_distance = distance
                next_node = node
    return next_node
