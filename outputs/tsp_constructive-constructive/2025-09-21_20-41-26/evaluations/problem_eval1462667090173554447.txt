def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes and len(unvisited_nodes) > 1:
        return destination_node

    max_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance = distance_matrix[current_node][node]
        if distance == 0:
            continue

        # Calculate centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)

        # Weighted score: balance between immediate distance and centrality
        weight = 0.7  # Higher weight for immediate distance, lower for centrality
        score = (1 - weight) * (1 / distance) + weight * (1 / centrality)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
