def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_distance(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = sum(distance_matrix[node][n] for n in unvisited_nodes - {node}) / len(unvisited_nodes) if unvisited_nodes - {node} else 0
        weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        return weight * local_dist + (1 - weight) * global_dist

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=weighted_distance)

    return next_node
