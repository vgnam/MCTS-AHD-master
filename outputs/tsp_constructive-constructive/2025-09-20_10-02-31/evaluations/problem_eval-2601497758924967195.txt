def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def min_max_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return max(distance_matrix[node][n] for n in remaining_nodes)

    def sigmoid_weight(x):
        return 1 / (1 + math.exp(-x))

    remaining = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    weight = sigmoid_weight((total_nodes - remaining) / total_nodes * 10 - 5)

    if random.random() < weight:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=min_max_distance)

    return next_node
