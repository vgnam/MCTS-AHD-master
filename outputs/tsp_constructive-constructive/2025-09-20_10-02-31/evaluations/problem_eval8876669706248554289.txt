def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 1 else 0

    def min_max_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return max(distance_matrix[node][n] for n in remaining_nodes)

    local_weight = remaining_ratio
    global_weight = 1 - remaining_ratio

    local_score = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    global_score = min(unvisited_nodes, key=min_max_distance)

    local_cost = distance_matrix[current_node][local_score]
    global_cost = min_max_distance(global_score)

    combined_cost = local_weight * local_cost + global_weight * global_cost

    if len(unvisited_nodes) % 2 == 1:
        next_node = local_score if combined_cost <= local_cost else global_score
    else:
        next_node = global_score if combined_cost <= global_cost else local_score

    return next_node
