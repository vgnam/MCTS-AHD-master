def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def sum_remaining_distances(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes) if unvisited_nodes else 0

    threshold = len(unvisited_nodes) / (len(unvisited_nodes) + distance_matrix[current_node][destination_node])

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        if random.random() < threshold:
            next_node = min(unvisited_nodes, key=sum_remaining_distances)
        else:
            next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
