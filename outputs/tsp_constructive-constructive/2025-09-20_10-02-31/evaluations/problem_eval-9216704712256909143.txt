def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_score(node):
        local_cost = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            global_cost = 0
        else:
            global_cost = max(distance_matrix[node][n] for n in remaining_nodes)
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 0.5 + 0.5 * remaining_ratio
        return (1 - weight) * local_cost + weight * global_cost

    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
