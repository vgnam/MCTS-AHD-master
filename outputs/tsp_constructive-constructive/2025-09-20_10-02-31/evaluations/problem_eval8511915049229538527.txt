def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def avg_remaining_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

    threshold = 0.3 if len(unvisited_nodes) % 2 == 1 else 0.7

    local_candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    global_candidates = sorted(unvisited_nodes, key=avg_remaining_distance)

    local_score = distance_matrix[current_node][local_candidates[0]]
    global_score = avg_remaining_distance(global_candidates[0])

    if global_score == 0:
        return local_candidates[0]

    weight = threshold * (local_score / global_score) if (local_score / global_score) > 1 else (1 - threshold) * (global_score / local_score)

    if weight > threshold:
        return global_candidates[0]
    else:
        return next_node
