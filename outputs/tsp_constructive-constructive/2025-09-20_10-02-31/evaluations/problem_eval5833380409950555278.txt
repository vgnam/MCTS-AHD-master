def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def sum_distances(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes - {node})

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        weights = [1 / (sum_distances(node) + 1e-6) for node in unvisited_nodes]
        total_weight = sum(weights)
        probabilities = [w / total_weight for w in weights]
        next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]

    return next_node
