def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def avg_max_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        avg_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        max_dist = max(distance_matrix[node][n] for n in remaining_nodes)
        return 0.3 * avg_dist + 0.7 * max_dist

    remaining_count = len(unvisited_nodes)
    balance_factor = 0.5 + (remaining_count / (remaining_count + 1)) * 0.5

    if remaining_count % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=avg_max_distance)

    return next_node
