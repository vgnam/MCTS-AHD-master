def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def sum_of_distances(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return sum(distance_matrix[node][n] for n in remaining_nodes)

    def penalty_based_selection(node):
        base_score = sum_of_distances(node)
        penalty = 0.2 * distance_matrix[current_node][node] if len(unvisited_nodes) > 2 else 0
        return base_score + penalty

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=penalty_based_selection)

    return next_node
