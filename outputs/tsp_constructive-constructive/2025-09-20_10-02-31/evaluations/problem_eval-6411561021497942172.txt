def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def sum_distances(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return sum(distance_matrix[node][n] for n in remaining_nodes)

    def average_distance():
        total = 0
        count = 0
        for u in unvisited_nodes:
            for v in unvisited_nodes:
                if u != v:
                    total += distance_matrix[u][v]
                    count += 1
        return total / count if count > 0 else 0

    current_avg_distance = average_distance()
    selection_probability = min(0.7, max(0.3, len(unvisited_nodes) / (2 * len(distance_matrix))))

    if len(unvisited_nodes) % 2 == 1 or random.random() < selection_probability:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=sum_distances)

    return next_node
