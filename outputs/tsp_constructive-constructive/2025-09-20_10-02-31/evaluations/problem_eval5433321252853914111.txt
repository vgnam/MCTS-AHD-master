def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def sum_distances(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes - {node})

    def weighted_criteria(node):
        local = distance_matrix[current_node][node]
        global_ = sum_distances(node)
        weight = 0.5 + (0.5 * len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
        return (1 - weight) * local + weight * global_

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=weighted_criteria)

    return next_node
