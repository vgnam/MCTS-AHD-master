def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def dynamic_weight(ratio):
        return 1 / (1 + math.exp(-10 * (ratio - 0.5)))

    def lookahead_score(node, k=2):
        remaining = unvisited_nodes - {node}
        if not remaining:
            return distance_matrix[current_node][node]
        if k == 1:
            return min(distance_matrix[node][n] for n in remaining)
        else:
            return sum(distance_matrix[node][n] for n in remaining) / len(remaining)

    ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    weight = dynamic_weight(ratio)

    if random.random() < weight:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=lambda node: lookahead_score(node))

    return next_node
