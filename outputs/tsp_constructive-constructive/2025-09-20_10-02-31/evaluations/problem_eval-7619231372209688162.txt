def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def min_max_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return max(distance_matrix[node][n] for n in remaining_nodes)

    def weighted_score(node):
        local_score = distance_matrix[current_node][node]
        global_score = min_max_distance(node)
        avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        weight = 0.5 + 0.5 * (1 - min(local_score, global_score) / avg_distance)
        return weight * local_score + (1 - weight) * global_score

    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
