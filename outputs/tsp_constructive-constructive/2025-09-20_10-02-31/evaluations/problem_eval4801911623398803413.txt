def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def avg_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

    weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    local_score = lambda node: distance_matrix[current_node][node]
    global_score = avg_distance

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: (1 - weight) * local_score(node) + weight * global_score(node))
    else:
        next_node = min(unvisited_nodes, key=lambda node: (weight) * local_score(node) + (1 - weight) * global_score(node))

    return next_node
