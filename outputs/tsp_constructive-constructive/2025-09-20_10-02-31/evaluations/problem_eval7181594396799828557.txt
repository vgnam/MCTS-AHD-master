def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def min_max_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return max(distance_matrix[node][n] for n in remaining_nodes)

    exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))
    weighted_local = exploration_factor * min(distance_matrix[current_node][n] for n in unvisited_nodes)
    weighted_global = (1 - exploration_factor) * min(min_max_distance(n) for n in unvisited_nodes)

    if weighted_local <= weighted_global:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=min_max_distance)

    return next_node
