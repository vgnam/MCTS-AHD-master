def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def avg_max_distance(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        avg_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        return avg_dist

    threshold = len(unvisited_nodes) / (1 + sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))

    if len(unvisited_nodes) % 2 == 1:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        if len(unvisited_nodes) > threshold:
            next_node = min(unvisited_nodes, key=avg_max_distance)
        else:
            next_node = max(unvisited_nodes, key=avg_max_distance)

    return next_node
