import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def compute_weight(node):
        distance = distance_matrix[current_node][node]
        if distance == 0:
            return float('inf')
        regret = max(distance_matrix[node][n] for n in unvisited_nodes - {node}) if (unvisited_nodes - {node}) else 0
        return (1 / distance**2) * (1 + regret)

    weights = [compute_weight(node) for node in unvisited_nodes]
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    if len(unvisited_nodes) % 2 == 1:
        next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    else:
        next_node = max(unvisited_nodes, key=lambda node: (1 / distance_matrix[current_node][node]**2) * (1 + max(distance_matrix[node][n] for n in unvisited_nodes - {node})))

    return next_node
