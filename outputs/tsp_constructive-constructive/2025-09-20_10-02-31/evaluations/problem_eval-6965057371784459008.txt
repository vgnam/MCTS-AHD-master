def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def avg_distance_to_remaining(node):
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[current_node][node]
        return sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

    weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1) if len(unvisited_nodes) > 1 else 1.0

    if weight > 0.5:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=avg_distance_to_remaining)

    return next_node
