[
     {
          "algorithm": "The algorithm selects the next node by prioritizing unvisited nodes closest to the current node, with no explicit prioritization for nodes closer to the destination. The function uses a distance matrix to evaluate distances and returns the closest unvisited node, defaulting to the destination if no unvisited nodes remain. The design prioritizes local proximity over global path optimization.",
          "thought": "The algorithm selects the next node to visit by choosing the unvisited node closest to the current node, prioritizing nodes that are closer to the destination to guide the path toward the end.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm alternates between selecting the nearest unvisited node (prioritizing local optimization when an odd number of nodes remain) and the node that balances immediate distance and future minimum distance (prioritizing global optimization when an even number of nodes remain). The alternation is controlled by the parity of remaining unvisited nodes, ensuring a balance between short-term and long-term path efficiency.",
          "thought": "The new algorithm alternates between selecting the nearest unvisited node (prioritizing local optimization) and the node that minimizes the sum of immediate distance and the minimum future distance to remaining nodes (prioritizing global optimization), balancing trade-offs between immediate proximity and long-term path efficiency. The alternation is controlled by the parity of remaining unvisited nodes (odd/even).",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def evaluate_node(node):\n        immediate_cost = distance_matrix[current_node][node]\n        if len(unvisited_nodes) == 1:\n            return immediate_cost + distance_matrix[node][destination_node]\n        remaining_nodes = unvisited_nodes - {node}\n        lookahead_cost = min(distance_matrix[node][n] for n in remaining_nodes)\n        return immediate_cost + lookahead_cost\n\n    if len(unvisited_nodes) % 2 == 1:\n        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    else:\n        next_node = min(unvisited_nodes, key=evaluate_node)\n\n    return next_node",
          "objective": 7.67393,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor selection with a lookahead mechanism, prioritizing immediate distance to the next node while also considering the minimum future distance from that node to remaining unvisited nodes. It balances short-term and long-term path costs by evaluating each candidate node's immediate cost and the best possible future cost from it, then selecting the node that minimizes the sum of these two values. The function uses the `distance_matrix` to compute costs and the `unvisited_nodes` set to determine the remaining path options.",
          "thought": "This algorithm uses a hybrid approach that combines nearest neighbor selection with a lookahead mechanism that evaluates the impact of each candidate node on the remaining path, selecting the node that minimizes the total path length while considering both immediate and future distances.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def evaluate_node(node):\n        immediate_cost = distance_matrix[current_node][node]\n        if len(unvisited_nodes) == 1:\n            return immediate_cost + distance_matrix[node][destination_node]\n\n        remaining_nodes = unvisited_nodes - {node}\n        lookahead_cost = min(distance_matrix[node][n] for n in remaining_nodes)\n        return immediate_cost + lookahead_cost\n\n    next_node = min(unvisited_nodes, key=evaluate_node)\n    return next_node",
          "objective": 8.38246,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines probabilistic selection with regret-based prioritization, favoring closer nodes (weighted by inverse squared distance) while penalizing long-term suboptimal choices (via regret). Closer nodes have higher selection probabilities, but regret ensures long-term efficiency by discouraging nodes with high future costs. The code dynamically computes weights for unvisited nodes, normalizes them into probabilities, and randomly selects the next node based on these weighted choices.",
          "thought": "The new algorithm combines a probabilistic selection with a regret-based approach, where nodes are chosen with a probability proportional to their inverse squared distance, introducing randomness while favoring closer nodes, and includes a regret term that penalizes long-term suboptimal choices to balance exploration and exploitation.",
          "code": "import random\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def compute_weight(node):\n        distance = distance_matrix[current_node][node]\n        if distance == 0:\n            return float('inf')\n        regret = max(distance_matrix[node][n] for n in unvisited_nodes - {node}) if (unvisited_nodes - {node}) else 0\n        return (1 / distance**2) * (1 + regret)\n\n    weights = [compute_weight(node) for node in unvisited_nodes]\n    total_weight = sum(weights)\n    probabilities = [w / total_weight for w in weights]\n\n    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]\n    return next_node",
          "objective": 13.13473,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm alternates between selecting the nearest unvisited node (prioritizing local optimization) and the node that minimizes the maximum distance to remaining unvisited nodes (prioritizing global optimization), balancing trade-offs between immediate proximity and long-term path efficiency. The alternation is controlled by the parity of remaining unvisited nodes (odd/even), with `min_max_distance` being the critical function for global optimization.",
          "thought": "The new algorithm alternates between selecting the closest unvisited node and the node that minimizes the maximum distance to remaining unvisited nodes, aiming to balance local and global optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def min_max_distance(node):\n        remaining_nodes = unvisited_nodes - {node}\n        if not remaining_nodes:\n            return distance_matrix[current_node][node]\n        return max(distance_matrix[node][n] for n in remaining_nodes)\n\n    if len(unvisited_nodes) % 2 == 1:\n        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    else:\n        next_node = min(unvisited_nodes, key=min_max_distance)\n\n    return next_node",
          "objective": 16.70467,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm alternates between selecting the nearest unvisited node (prioritizing local optimization) and the node that minimizes the sum of distances to all remaining unvisited nodes (prioritizing global optimization), controlled by the parity of remaining nodes. The `min_sum_distance` function computes the sum of distances from a node to all unvisited nodes, while the parity check (odd/even) determines whether to prioritize nearest-neighbor (local) or sum-minimizing (global) selection. The algorithm dynamically balances these two objectives, favoring global optimization when the number of unvisited nodes is even.",
          "thought": "The new algorithm alternates between selecting the nearest unvisited node (local optimization) and the node that minimizes the sum of distances to all remaining unvisited nodes (global optimization), controlled by the parity of remaining nodes, with a novel `min_sum_distance` function for global optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def min_sum_distance(node):\n        remaining_nodes = unvisited_nodes - {node}\n        if not remaining_nodes:\n            return distance_matrix[current_node][node]\n        return sum(distance_matrix[node][n] for n in remaining_nodes)\n\n    if len(unvisited_nodes) % 2 == 1:\n        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    else:\n        next_node = min(unvisited_nodes, key=min_sum_distance)\n\n    return next_node",
          "objective": 19.46105,
          "other_inf": null
     }
]