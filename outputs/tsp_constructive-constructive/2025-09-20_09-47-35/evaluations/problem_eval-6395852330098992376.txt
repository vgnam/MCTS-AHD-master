def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate savings for each unvisited node
    savings = {node: distance_matrix[current_node][nearest_neighbor] + distance_matrix[nearest_neighbor][destination_node] - distance_matrix[current_node][node] - distance_matrix[node][destination_node] for node in unvisited_nodes}

    # Select the node with the highest savings
    next_node = max(savings, key=savings.get)

    return next_node
