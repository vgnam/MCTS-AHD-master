def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate savings for each unvisited node
    savings = {node: distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node] for node in unvisited_nodes}

    # Weight the savings by the inverse of the distance to the destination
    weighted_savings = {node: savings[node] / distance_matrix[node][destination_node] for node in unvisited_nodes}

    # Select the node with the maximum weighted savings
    next_node = max(weighted_savings, key=weighted_savings.get)

    return next_node
