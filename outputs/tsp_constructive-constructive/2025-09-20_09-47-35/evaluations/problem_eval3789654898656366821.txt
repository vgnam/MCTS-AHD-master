def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        # Calculate a score based on a combination of distance to the current node
        # and distance to the destination node. This encourages returning to the start
        # without only focusing on local optimization.
        score = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        
        if score < best_score:
            best_score = score
            best_node = node

    return next_node
