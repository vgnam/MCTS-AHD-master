def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        # Calculate a score based on a combination of factors.
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        # Heuristic to encourage path efficiency, penalizing large angle changes
        try:
            vector_current_to_node = (node - current_node)
            vector_node_to_destination = (destination_node - node)
            dot_product = vector_current_to_node * vector_node_to_destination
            magnitudes = abs(vector_current_to_node) * abs(vector_node_to_destination)
            if magnitudes != 0:
                angle_score = dot_product / magnitudes # Cosine of the angle. Values near 1 represent good angles.
            else:
                 angle_score = -1 # if nodes are in the same position, badly penalize the selection.

            score = distance_to_node + distance_to_destination - angle_score * 0.5 # Higher angle scores are better

        except:
            score = distance_to_node + distance_to_destination
        if score < best_score:
            best_score = score
            best_node = node

    return next_node
