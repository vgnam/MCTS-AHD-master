def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    if min_distance == max_distance:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    probabilities = []
    for d in distances:
        if d == min_distance:
            prob = 0.7
        else:
            prob = 0.3 * (1 - (d - min_distance) / (max_distance - min_distance))
        probabilities.append(prob)

    probabilities = [p / sum(probabilities) for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
