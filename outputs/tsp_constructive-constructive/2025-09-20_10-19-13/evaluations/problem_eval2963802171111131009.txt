def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weights for each node
    def node_weight(node):
        immediate_distance = distance_matrix[current_node][node]
        future_gain = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        return immediate_distance + 0.3 * future_gain  # Weighted sum

    next_node = min(unvisited_nodes, key=node_weight)
    return next_node
