def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost_estimate = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        return immediate_cost + 0.3 * future_cost_estimate

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
