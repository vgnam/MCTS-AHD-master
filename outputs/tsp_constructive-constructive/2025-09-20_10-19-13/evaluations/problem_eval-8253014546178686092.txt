def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, historical_penalties=None, alpha=0.7):
    if not unvisited_nodes:
        return destination_node

    if historical_penalties is None:
        historical_penalties = {node: 0 for node in unvisited_nodes}

    def weighted_distance(node):
        base_distance = distance_matrix[current_node][node]
        penalty = historical_penalties.get(node, 0)
        return alpha * base_distance + (1 - alpha) * penalty

    next_node = min(unvisited_nodes, key=lambda node: weighted_distance(node))
    return next_node
