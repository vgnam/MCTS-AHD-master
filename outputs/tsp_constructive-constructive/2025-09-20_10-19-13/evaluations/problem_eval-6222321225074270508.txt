def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_weighted_cost(node):
        immediate_cost = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            future_cost = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            return immediate_cost + 0.3 * future_cost
        return immediate_cost

    next_node = min(unvisited_nodes, key=calculate_weighted_cost)
    return next_node
