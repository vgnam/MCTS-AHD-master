defaulting to the destination node if no unvisited nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight based on remaining unvisited nodes
    weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    # Calculate weighted score for each node
    def node_score(node):
        distance = distance_matrix[current_node][node]
        # Simulated priority (e.g., based on node index for demonstration)
        priority = node / (len(unvisited_nodes) + 1)
        return weight_factor * distance + (1 - weight_factor) * priority

    next_node = min(unvisited_nodes, key=lambda node: node_score(node))
    return next_node
