def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    weights = [1 / (dist + 1e-6) if dist > 0 else 1.0 for dist in distances]

    if sum(weights) > 0:
        normalized_weights = [w / sum(weights) for w in weights]
        next_node = np.random.choice(unvisited_nodes, p=normalized_weights)
    else:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
