importance (e.g., node degree or centrality), introducing a novel cost function to select the next node as a weighted combination of distance and node significance, with a fallback to the destination when no unvisited nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_weight(node):
        distance = distance_matrix[current_node][node]
        node_degree = sum(1 for neighbor in distance_matrix[node] if neighbor != 0)  # Simplified importance metric
        return distance * (1 / (1 + node_degree))  # Prioritize closer nodes with lower degrees

    next_node = min(unvisited_nodes, key=node_weight)
    return next_node
