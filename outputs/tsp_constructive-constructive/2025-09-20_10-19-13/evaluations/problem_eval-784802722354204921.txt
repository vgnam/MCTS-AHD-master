import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, exploration_rate=0.2):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    weighted_distances = [(dist - min_distance + 1) ** -1 for dist in distances]

    if random.random() < exploration_rate:
        total_weight = sum(weighted_distances)
        probabilities = [w / total_weight for w in weighted_distances]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
