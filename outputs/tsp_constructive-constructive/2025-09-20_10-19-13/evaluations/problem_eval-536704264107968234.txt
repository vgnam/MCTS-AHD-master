def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weights for each unvisited node
    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        # Weighted score: 70% distance to node, 30% distance to destination
        return 0.7 * distance_to_node + 0.3 * distance_to_destination

    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
