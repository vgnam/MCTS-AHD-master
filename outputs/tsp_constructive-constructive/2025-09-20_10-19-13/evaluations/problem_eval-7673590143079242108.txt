def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    if min_distance == max_distance:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        normalized_distances = [(max_distance - d) / (max_distance - min_distance) for d in distances]
        total_weight = sum(normalized_distances)
        probabilities = [w / total_weight for w in normalized_distances]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
