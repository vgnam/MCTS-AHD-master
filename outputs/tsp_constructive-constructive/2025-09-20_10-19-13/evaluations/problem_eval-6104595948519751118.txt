def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate a weighted score for each candidate node
    def node_score(node):
        distance = distance_matrix[current_node][node]
        # Dynamic weight based on remaining unvisited nodes
        weight = 1 / (1 + len(unvisited_nodes))
        # Combine distance and exploration heuristic
        return distance * (1 - weight) + weight * (1 / (1 + distance))

    next_node = min(unvisited_nodes, key=lambda node: node_score(node))
    return next_node
