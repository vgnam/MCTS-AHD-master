def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)
    if min_distance == max_distance:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    probabilities = [(max_distance - d) / sum(max_distance - d for d in distances) for d in distances]
    next_node = choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
