def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_distance = distance_matrix[current_node][node]
        remaining_unvisited = unvisited_nodes - {node}
        if remaining_unvisited:
            lookahead_avg = sum(distance_matrix[node][other] for other in remaining_unvisited) / len(remaining_unvisited)
        else:
            lookahead_avg = distance_matrix[node][destination_node]
        return immediate_distance + 0.3 * lookahead_avg

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
