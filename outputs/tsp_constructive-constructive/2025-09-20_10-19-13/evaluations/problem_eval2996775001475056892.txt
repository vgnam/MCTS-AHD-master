def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) <= 2:
        return destination_node if destination_node in unvisited_nodes else min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    bias_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    weighted_distances = {
        node: distance_matrix[current_node][node] * (1 - bias_factor) +
              distance_matrix[node][destination_node] * bias_factor
        for node in unvisited_nodes
    }
    next_node = min(weighted_distances, key=weighted_distances.get)
    return next_node
