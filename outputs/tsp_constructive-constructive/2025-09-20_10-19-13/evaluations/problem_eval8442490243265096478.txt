def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=0.5, iteration=0):
    if not unvisited_nodes:
        return destination_node

    # Calculate probabilities based on inverse distance and temperature
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Normalize distances to [0, 1] and apply temperature scaling
    normalized = [(max_dist - d) / (max_dist - min_dist + 1e-10) for d in distances]
    probabilities = [np.exp(n / (temperature + 1e-10)) for n in normalized]

    # Adjust probabilities with iteration-based temperature decay
    temp_decay = max(0.1, temperature * (0.99 ** iteration))
    probabilities = [p ** (1.0 / temp_decay) for p in probabilities]

    # Normalize probabilities to sum to 1
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    # Select next node probabilistically
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
