defaulting to the destination node if no unvisited nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Sort unvisited nodes by distance to current_node
    sorted_nodes = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Probabilistically choose between the nearest and second-nearest node
    if len(sorted_nodes) > 1 and random.random() < 0.3:  # 30% chance to pick the second-nearest
        next_node = sorted_nodes[1]
    else:
        next_node = sorted_nodes[0]

    return next_node
