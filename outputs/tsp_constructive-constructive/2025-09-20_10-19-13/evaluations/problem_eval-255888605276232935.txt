importance) or a fallback to the destination node, using a heuristic that balances distance and node priority, with parameters for tuning the balance.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    # Example heuristic: combine distance and node priority (e.g., inverse distance scaled by node importance)
    node_priority = {node: 1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes}
    next_node = max(unvisited_nodes, key=lambda node: node_priority[node])
    return next_node
