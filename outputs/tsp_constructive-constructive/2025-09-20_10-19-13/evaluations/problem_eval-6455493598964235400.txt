importance or historical visitation frequency) to balance exploration and exploitation, while still defaulting to the destination node if no unvisited nodes remain.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def heuristic(node):
        distance = distance_matrix[current_node][node]
        importance = 1 / (1 + distance)  # Example heuristic: inverse distance
        return distance * importance
    next_node = min(unvisited_nodes, key=lambda node: heuristic(node))
    return next_node
