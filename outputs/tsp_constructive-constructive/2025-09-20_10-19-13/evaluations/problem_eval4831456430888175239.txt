def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, iteration=0):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    # Normalize distances and apply softmax with temperature
    normalized = [(min_distance - d) / (max_distance - min_distance + 1e-10) for d in distances]
    exp_values = [math.exp(n / (temperature + 1e-10)) for n in normalized]
    probabilities = [e / sum(exp_values) for e in exp_values]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
