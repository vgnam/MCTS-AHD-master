def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weight based on unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    weight_factor = 1 - (remaining_nodes / (remaining_nodes + 1)) * (distance_matrix[current_node][destination_node] / max_distance)

    # Weighted nearest neighbor selection
    next_node = min(unvisited_nodes,
                   key=lambda node: weight_factor * distance_matrix[current_node][node] +
                                   (1 - weight_factor) * distance_matrix[node][destination_node])
    return next_node
