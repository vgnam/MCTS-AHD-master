def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment: balance distance and heuristic (e.g., node degree)
    def heuristic_value(node):
        # Example heuristic: inverse of distance to encourage exploration
        return 1.0 / distance_matrix[current_node][node]

    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] * heuristic_value(node))
    return next_node
