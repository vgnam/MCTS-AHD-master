def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate the nearest neighbor
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    nearest_distance = distance_matrix[current_node][nearest_node]

    # Calculate exploration probability (decays as more nodes are visited)
    total_nodes = len(unvisited_nodes) + 1  # +1 to include current node
    exploration_prob = max(0.1, 0.5 / (1 + (total_nodes / 10)))

    # With exploration_prob chance, choose a random node (excluding nearest neighbor)
    if len(unvisited_nodes) > 1 and random.random() < exploration_prob:
        candidates = [node for node in unvisited_nodes if node != nearest_node]
        next_node = random.choice(candidates)
    else:
        next_node = nearest_node

    return next_node
