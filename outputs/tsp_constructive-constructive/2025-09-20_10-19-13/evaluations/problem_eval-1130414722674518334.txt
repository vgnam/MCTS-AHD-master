def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weights for each candidate node
    def weighted_distance(node):
        dist_to_neighbor = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]
        return dist_to_neighbor + 0.3 * dist_to_dest  # Weighted combination

    next_node = min(unvisited_nodes, key=weighted_distance)
    return next_node
