importance, where importance is derived from node degrees in the graph (higher degree nodes are prioritized to reduce revisits).}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        distance = distance_matrix[current_node][node]
        importance = sum(1 for neighbor in distance_matrix[node] if neighbor != node)
        return distance * (1 / (1 + importance))

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
