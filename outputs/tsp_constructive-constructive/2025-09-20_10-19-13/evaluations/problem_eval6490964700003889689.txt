def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, iteration=0):
    if not unvisited_nodes:
        return destination_node

    # Calculate distances to unvisited nodes
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]

    # Adjust temperature based on iteration (optional)
    temp = max(0.1, temperature - iteration * 0.01)

    # Compute selection probabilities using softmax
    exp_distances = [math.exp(-d / temp) for d in distances]
    sum_exp = sum(exp_distances)
    probabilities = [e / sum_exp for e in exp_distances]

    # Select next node probabilistically
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
