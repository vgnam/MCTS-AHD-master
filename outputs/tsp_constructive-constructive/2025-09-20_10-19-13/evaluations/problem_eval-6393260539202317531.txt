importance, where importance is derived from node degrees in the graph (higher degree suggests more connections), and the next node is selected based on a weighted score combining distance and importance.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        distance = distance_matrix[current_node][node]
        node_degree = sum(1 for neighbor in distance_matrix[node] if neighbor != float('inf'))
        return distance * (1 / (1 + node_degree))  # Weight by inverse degree to balance distance and importance

    next_node = min(unvisited_nodes, key=lambda node: calculate_score(node))
    return next_node
