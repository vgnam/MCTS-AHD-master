{
     "algorithm": "The algorithm prioritizes minimizing detour penalties by balancing the immediate distance to the next node with the ratio of that node's distance to the destination versus the direct distance from the current node to the destination. It assigns higher priority to nodes that reduce detours (penalizing nodes where the path to the destination is significantly longer than the direct route) while still considering immediate distance, with a small weight (0.5) on the penalty term. The code iterates through unvisited nodes, computes a score combining distance and detour penalty, and selects the node with the lowest score.",
     "thought": "The new algorithm prioritizes minimizing the detour penalty by emphasizing the ratio of the candidate node's distance to the destination versus the direct distance, with a stronger penalty for detours, and balances this with a smaller weight on immediate distance.",
     "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    next_node = None\n    best_score = float('inf')\n\n    for node in unvisited_nodes:\n        distance_to_node = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        if distance_to_destination == 0:\n            score = distance_to_node\n        else:\n            normalization_factor = distance_matrix[current_node][destination_node] / distance_to_destination\n            penalty = distance_to_node + 0.5 * (normalization_factor - 1) * distance_to_destination\n            score = penalty\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
     "objective": 6.5107,
     "other_inf": null
}