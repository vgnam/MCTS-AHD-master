def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        # Immediate distance component
        immediate_distance = distance_matrix[current_node][node]

        # Predictive future impact component
        if remaining_nodes > 1:
            # Calculate average distance to remaining nodes
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            avg_future_distance = 0

        # Centrality measure (normalized by total nodes)
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Exploration factor (inverse of remaining nodes)
        exploration_factor = 1.0 / (remaining_nodes + 1)

        # Dynamic weighting
        distance_weight = 0.6 + 0.4 * (remaining_nodes / (remaining_nodes + 2))
        future_weight = 0.4 * (1 - (remaining_nodes / (remaining_nodes + 2)))
        centrality_weight = 0.2 * exploration_factor

        # Composite score
        score = (distance_weight * immediate_distance +
                 future_weight * avg_future_distance -
                 centrality_weight * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
