def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_value = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on proximity and future potential
        proximity_weight = 0.5 * (1 + len(unvisited_nodes) / (len(unvisited_nodes) + 2))
        future_weight = 1 - proximity_weight

        # Penalize revisiting nodes (if applicable) and reward nodes closer to destination
        penalty = 0.2 if node == destination_node else 0
        bonus = 0.3 / (1 + distance_to_destination) if node != destination_node else 0

        value = (proximity_weight * distance_to_node) + (future_weight * distance_to_destination) - penalty + bonus

        if value < best_value:
            best_value = value
            next_node = node

    return next_node
