def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_value = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        estimated_cost = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other nodes
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality = total_distance / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjusts based on remaining nodes and centrality
        dynamic_weight = 1.0 / (1.0 + remaining_nodes)
        centrality_weight = 0.5 * (1.0 - dynamic_weight)  # Centrality influence increases as dynamic_weight decreases

        total_cost = (1 - dynamic_weight - centrality_weight) * distance_to_node + dynamic_weight * estimated_cost + centrality_weight * centrality

        if total_cost < best_value:
            best_value = total_cost
            next_node = node

    return next_node
