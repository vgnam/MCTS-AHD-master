def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    current_to_dest = distance_matrix[current_node][destination_node]

    # Calculate average distance between nodes to normalize the weight factor
    total_distance = 0
    count = 0
    for i in range(len(distance_matrix)):
        for j in range(len(distance_matrix)):
            if i != j:
                total_distance += distance_matrix[i][j]
                count += 1
    avg_distance = total_distance / count if count > 0 else 1

    # Compute dynamic weight factor
    if avg_distance > 0:
        weight_factor = current_to_dest / avg_distance
    else:
        weight_factor = 0.5  # Default weight if average distance is zero

    # Normalize weight factor to a value between 0.2 and 0.8
    dynamic_weight = 0.2 + 0.6 * (1 - min(1, max(0, weight_factor)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = dynamic_weight * distance_to_node + (1 - dynamic_weight) * distance_to_dest

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
