def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        estimated_total_distance = distance_to_node + distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight_local = 0.8 if remaining_nodes > total_nodes / 2 else 0.6
        weight_global = 1 - weight_local

        # Penalty for less frequently visited nodes (simplified exploration)
        visit_frequency = 1 / (1 + sum(1 for n in unvisited_nodes if n == node))
        penalty = 0.1 * (1 - visit_frequency)

        score = (weight_local * distance_to_node + weight_global * estimated_total_distance) * (1 + penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
