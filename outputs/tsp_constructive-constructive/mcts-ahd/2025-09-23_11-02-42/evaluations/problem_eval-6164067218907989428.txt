def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            centrality = sum(1 for d in distance_matrix[node] if d < distance_to_node)
            avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
            normalization_factor = distance_matrix[current_node][destination_node] / distance_to_destination
            penalty = (centrality / avg_distance) * (remaining_nodes / (remaining_nodes + 2))
            detour_penalty = distance_to_node + 0.5 * (normalization_factor - 1) * distance_to_destination
            weight = remaining_nodes / (remaining_nodes + 1)
            score = weight * detour_penalty + (1 - weight) * distance_to_node * (1 + penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
