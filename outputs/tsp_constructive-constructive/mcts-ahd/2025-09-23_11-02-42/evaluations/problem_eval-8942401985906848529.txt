def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Immediate distance factor
        immediate_score = 1 / (distance_to_node + 1e-6)

        # Exploration bonus: average distance to other unvisited nodes
        exploration_bonus = 0.0
        if remaining_nodes > 1:
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node]
            exploration_bonus /= (remaining_nodes - 1)

        # Connectivity penalty: average distance to other unvisited nodes
        connectivity_penalty = 0.0
        if remaining_nodes > 1:
            for other_node in unvisited_nodes:
                if other_node != node:
                    connectivity_penalty += distance_matrix[node][other_node]
            connectivity_penalty /= (remaining_nodes - 1)

        # Dynamic weights: prioritize exploration and connectivity early, immediate distance later
        weight_immediate = 0.3 if remaining_nodes > total_nodes // 2 else 0.7
        weight_exploration = 0.5 if remaining_nodes > total_nodes // 2 else 0.2
        weight_connectivity = 0.2 if remaining_nodes > total_nodes // 2 else 0.1

        # Score combines immediate distance, exploration bonus, and connectivity penalty
        score = (weight_immediate * immediate_score +
                 weight_exploration * exploration_bonus -
                 weight_connectivity * connectivity_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
