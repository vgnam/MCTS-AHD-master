def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        direct_distance = distance_matrix[current_node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            efficiency = direct_distance / distance_to_destination
            density_penalty = 0.3 * (len(unvisited_nodes) / len(distance_matrix))
            adjusted_efficiency = efficiency * (1 - density_penalty)
            score = distance_to_node + (1 / adjusted_efficiency) * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
