def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    novelty_weights = {node: 1.0 / (1 + sum(1 for n in unvisited_nodes if n == node)) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            dynamic_weight = 1 + (distance_to_destination / (distance_matrix[current_node][destination_node] + 1e-6))
            directionality_factor = (distance_matrix[current_node][destination_node] - (distance_to_node + distance_to_destination)) ** 2
            novelty_bonus = novelty_weights[node]
            score = (distance_to_node * distance_to_destination * dynamic_weight) * (1 - novelty_bonus) + directionality_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
