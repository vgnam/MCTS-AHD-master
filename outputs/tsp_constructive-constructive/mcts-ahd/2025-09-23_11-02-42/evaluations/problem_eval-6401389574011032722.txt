def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Immediate distance factor
        immediate_score = 1 / (distance_to_node + 1e-6)

        # Lookahead factor: evaluate detour impact
        lookahead_score = 0
        if remaining_nodes > 1:
            for next_node_candidate in unvisited_nodes:
                if next_node_candidate != node:
                    detour = (distance_matrix[current_node][node] +
                              distance_matrix[node][next_node_candidate] +
                              distance_matrix[next_node_candidate][destination_node])
                    direct = (distance_matrix[current_node][next_node_candidate] +
                              distance_matrix[next_node_candidate][destination_node])
                    lookahead_score += (direct - detour) / (direct + 1e-6)

        # Path potential: evaluate node's contribution to overall tour efficiency
        path_potential = 0
        if remaining_nodes > 2:
            for next_node_candidate in unvisited_nodes:
                if next_node_candidate != node:
                    path_potential += (distance_matrix[node][next_node_candidate] -
                                       distance_matrix[current_node][next_node_candidate]) / (distance_matrix[current_node][next_node_candidate] + 1e-6)

        # Dynamic weights with probabilistic adjustment
        weight_immediate = 0.6 + 0.2 * (remaining_nodes / total_nodes)
        weight_lookahead = 0.4 - 0.2 * (remaining_nodes / total_nodes)
        weight_potential = 0.2 * (1 - remaining_nodes / total_nodes)

        # Combined score with probabilistic element
        score = (weight_immediate * immediate_score +
                 weight_lookahead * lookahead_score +
                 weight_potential * path_potential)

        # Add small randomness to avoid local optima
        score += 0.1 * (remaining_nodes / total_nodes) * (2 * random.random() - 1)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
