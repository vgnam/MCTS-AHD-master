def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / total_nodes

        # Dynamic weights based on remaining nodes
        weight_immediate = 0.5 - 0.1 * (remaining_nodes / total_nodes)
        weight_destination = 0.3 + 0.2 * (remaining_nodes / total_nodes)
        weight_centrality = 0.2 + 0.1 * (remaining_nodes / total_nodes)

        # Penalty for nodes too close to current node
        penalty = 0.1 * distance_to_node if distance_to_node < 0.1 * sum(distance_matrix[current_node]) / total_nodes else 0

        score = (weight_immediate * distance_to_node +
                 weight_destination * distance_to_destination +
                 weight_centrality * centrality) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
