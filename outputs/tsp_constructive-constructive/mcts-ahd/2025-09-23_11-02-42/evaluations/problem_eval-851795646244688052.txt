importance factor that prioritizes nodes with higher connectivity or centrality in the graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance to unvisited nodes
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        avg_distances.append(avg_dist)

    avg_distance_to_unvisited = sum(avg_distances) / len(avg_distances) if avg_distances else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes and path progress
        weight_short_term = 0.5 + 0.2 * (1 - remaining_nodes / len(distance_matrix))
        weight_long_term = 1.0 - weight_short_term

        # Node importance factor (higher for nodes with more connections)
        node_degree = sum(1 for d in distance_matrix[node] if d > 0 and d < float('inf'))
        importance_factor = node_degree / (len(distance_matrix) - 1)

        # Heuristic score combining all factors
        score = (weight_short_term * distance_to_node +
                 weight_long_term * distance_to_destination +
                 0.2 * avg_distance_to_unvisited -
                 0.1 * distance_to_node * importance_factor)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
