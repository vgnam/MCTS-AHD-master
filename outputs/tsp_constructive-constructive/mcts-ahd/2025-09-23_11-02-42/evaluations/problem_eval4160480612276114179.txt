def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    alpha = 0.6  # Weight for distance to current node
    beta = 0.4   # Weight for estimated distance to destination
    penalty = 1.1 # Penalty factor for detours

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        estimated_total_distance = distance_to_node + distance_to_destination

        direct_distance = distance_matrix[current_node][destination_node]
        detour = distance_to_node + distance_to_destination - direct_distance
        detour_penalty = detour / (1.0 + direct_distance)

        dynamic_weight = 0.5 if detour <= direct_distance * 0.1 else 0.2
        score = alpha * distance_to_node + beta * estimated_total_distance + dynamic_weight * detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
