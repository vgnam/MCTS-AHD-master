def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    direct_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            detour_ratio = (distance_to_node + distance_to_destination) / direct_distance
            detour_weight = (detour_ratio ** 2) * (1 + remaining_nodes / 10)
            centrality_weight = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            exploration_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))

            score = (distance_to_node * (1 - exploration_weight) +
                     detour_weight * exploration_weight +
                     centrality_weight * exploration_weight * 2)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
