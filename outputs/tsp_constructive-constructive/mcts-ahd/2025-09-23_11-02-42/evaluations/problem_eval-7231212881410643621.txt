def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            dynamic_penalty_weight = 1.0 / (remaining_nodes ** 0.5)
            detour_penalty = dynamic_penalty_weight * (1.0 - detour_ratio) * direct_distance

            connectivity_bonus = 0.0
            for other_node in range(len(distance_matrix)):
                if other_node != node:
                    connectivity_bonus += distance_matrix[node][other_node]
            connectivity_bonus /= (len(distance_matrix) - 1)

            score = distance_to_node + detour_penalty - 0.4 * connectivity_bonus

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
