def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_value = float('inf')
    dynamic_weight = 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Adjust weight based on remaining nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        estimated_cost = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])  # Average distance to all other nodes

        # Combine distance, estimated cost, and centrality with dynamic weight
        total_cost = (dynamic_weight * distance_to_node) + ((1 - dynamic_weight) * estimated_cost) + (0.2 * centrality)

        if total_cost < best_value:
            best_value = total_cost
            next_node = node

    return next_node
