def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            detour_factor = (distance_to_node + distance_to_destination) / distance_matrix[current_node][destination_node]
            centrality = sum(1 / (d + 1e-6) for d in distance_matrix[node]) / len(distance_matrix[node])
            dynamic_weight = (remaining_nodes / (remaining_nodes + 1)) ** 2
            penalty = (detour_factor - 1) * centrality * dynamic_weight
            score = distance_to_node + penalty * (remaining_nodes ** 0.5)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
