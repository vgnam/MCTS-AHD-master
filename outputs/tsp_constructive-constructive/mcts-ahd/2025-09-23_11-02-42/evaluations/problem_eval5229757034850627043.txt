def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            adaptive_detour_weight = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * detour_ratio
            detour_penalty = (1.0 - detour_ratio) * direct_distance * adaptive_detour_weight

            exploration_incentive = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
            exploration_incentive /= (remaining_nodes - 1) if remaining_nodes > 1 else 1

            node_centrality = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
            centrality_weight = 0.2 * (1.0 + (remaining_nodes / (remaining_nodes + 1)))

            score = (distance_to_node + 0.4 * detour_penalty) - 0.3 * exploration_incentive + centrality_weight * node_centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
