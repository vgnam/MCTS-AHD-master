def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Probabilistic lookahead: Evaluate detour risk with probabilistic weighting
        lookahead_score = 0
        if remaining_nodes > 1:
            for next_node_candidate in unvisited_nodes:
                if next_node_candidate != node:
                    detour = (distance_matrix[current_node][node] +
                             distance_matrix[node][next_node_candidate] +
                             distance_matrix[next_node_candidate][destination_node])
                    direct = (distance_matrix[current_node][next_node_candidate] +
                             distance_matrix[next_node_candidate][destination_node])
                    detour_risk = (detour - direct) / (detour + 1e-6)
                    lookahead_score += detour_risk * (1 / (distance_to_node + 1e-6))

        # Dynamic weights with probabilistic adjustment
        weight_immediate = max(0.1, 0.5 * (remaining_nodes / total_nodes))
        weight_lookahead = 1 - weight_immediate

        # Add stochastic element to explore alternatives
        random_factor = 0.1 * (1 - (remaining_nodes / total_nodes))
        score = (weight_immediate * (1 / (distance_to_node + 1e-6)) +
                 weight_lookahead * lookahead_score +
                 random_factor * np.random.rand())

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
