def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            centrality = sum(1 for d in distance_matrix[node] if d < distance_to_node)
            avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
            attractiveness = (1 / (centrality + 1)) * (1 + (remaining_nodes / (remaining_nodes + 1)))
            random_factor = random.uniform(0.8, 1.2)  # Introduces randomness to escape local optima
            score = distance_to_node * (1 / attractiveness) * random_factor
            total_score += score

    if total_score == 0:
        return unvisited_nodes[0]  # Fallback if all scores are zero

    probabilities = [score / total_score for score in scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
