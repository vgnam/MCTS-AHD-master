def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    alpha = 0.7  # Base weight for distance to current node
    beta = 0.3   # Base weight for estimated distance to destination
    penalty = 1.1 # Penalty factor for revisiting nodes
    total_nodes = len(unvisited_nodes) + 1  # Total nodes including current
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes  # Fraction of nodes visited

    # Dynamically adjust weights based on progress
    alpha = alpha * (1 - progress)  # Reduce alpha as progress increases
    beta = beta * progress          # Increase beta as progress increases

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        estimated_total_distance = distance_to_node + distance_matrix[node][destination_node]
        score = alpha * distance_to_node + beta * estimated_total_distance

        # Apply penalty if the node was recently visited
        if node in unvisited_nodes:
            score *= penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
