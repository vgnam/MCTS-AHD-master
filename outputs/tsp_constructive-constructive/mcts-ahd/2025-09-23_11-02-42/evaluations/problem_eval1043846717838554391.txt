def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            dynamic_weight = 1 + (distance_to_destination / (distance_matrix[current_node][destination_node] + 1e-6))
            product = distance_to_node * distance_to_destination * dynamic_weight
            direct_distance = distance_matrix[current_node][destination_node]
            detour_penalty = (distance_to_node + distance_to_destination - direct_distance) / (1.0 + direct_distance)
            angle_penalty = (direct_distance - (distance_to_node + distance_to_destination)) ** 2
            score = product + 0.5 * detour_penalty + 0.2 * angle_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
