importance" factor that weights scores by the node's centrality in the remaining graph, while also incorporating a memory term that tracks historically visited nodes to avoid revisiting recently explored regions.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Precompute node importance (average distance to all unvisited nodes)
    node_importance = {}
    for node in unvisited_nodes:
        importance = sum(distance_matrix[node][other] for other in unvisited_nodes) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)
        node_importance[node] = importance

    # Track historically visited nodes (simplified memory)
    visited_memory = {node: 1.0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / distance_to_destination
            product = distance_to_node * distance_to_destination
            exploration_bonus = 1.0 / (1.0 + remaining_nodes * (1.0 + detour_ratio))

            # Novel components
            importance_weight = 1.0 / (1.0 + node_importance[node])
            memory_penalty = visited_memory[node]

            score = (product + 0.5 * (detour_ratio - 1) * direct_distance) * importance_weight - exploration_bonus * memory_penalty

        if score < best_score:
            best_score = score
            next_node = node

    # Update memory (simplified: penalize selected node more)
    if next_node is not None:
        visited_memory[next_node] *= 1.5

    return next_node
