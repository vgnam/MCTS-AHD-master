def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = -distance_to_node
        else:
            exploration_factor = (1.0 - remaining_nodes / total_nodes) ** 1.5
            centrality_penalty = sum(distance_matrix[node]) / total_nodes
            connectivity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

            score = -distance_to_node + exploration_factor * connectivity_bonus - 0.4 * centrality_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
