def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    direct_distance = distance_matrix[current_node][destination_node]
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            detour_penalty = (distance_to_node + distance_to_destination - direct_distance) ** 2
            node_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < direct_distance * 0.7) / remaining_nodes
            exploration_factor = 1 / (1 + math.exp(-(remaining_nodes - total_nodes/2) / (total_nodes/4)))
            centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            historical_penalty = 1 + (0.1 * (total_nodes - remaining_nodes) / total_nodes)

            score = (distance_to_node * (1 - exploration_factor) +
                     detour_penalty * (1 - exploration_factor) * historical_penalty +
                     centrality_score * exploration_factor * node_density)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
