def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / total_nodes

        # Dynamic weights based on remaining nodes
        weight_immediate = 0.5 if remaining_nodes > total_nodes // 2 else 0.3
        weight_destination = 0.3 if remaining_nodes > total_nodes // 2 else 0.5
        weight_centrality = 0.2 if remaining_nodes > total_nodes // 2 else 0.2

        # Score combines dynamic weights and normalized factors
        score = (weight_immediate * (1 / (distance_to_node + 1e-6)) +
                 weight_destination * (1 / (distance_to_destination + 1e-6)) +
                 weight_centrality * centrality)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
