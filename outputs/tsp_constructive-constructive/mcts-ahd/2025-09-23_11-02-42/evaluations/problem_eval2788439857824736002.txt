def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    scores = []

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / distance_to_destination
            centrality_penalty = sum(distance_matrix[node]) / len(distance_matrix[node])
            dynamic_penalty = (1 - detour_ratio) ** 2 * centrality_penalty * (remaining_nodes / (remaining_nodes + 1))
            score = distance_to_node + dynamic_penalty

        scores.append(score)

    if not scores:
        return None

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]

    if sum(normalized_scores) > 0:
        next_node = unvisited_nodes[np.random.choice(len(unvisited_nodes), p=normalized_scores / sum(normalized_scores))]
    else:
        next_node = unvisited_nodes[np.argmin(scores)]

    return next_node
