def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_factor = (distance_to_node + distance_to_destination) / direct_distance
            adaptive_detour = detour_factor * (1.0 - (remaining_nodes / len(unvisited_nodes + [current_node])))

            exploration_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    potential_detour = distance_matrix[node][other_node] + distance_matrix[other_node][destination_node] - distance_matrix[node][destination_node]
                    exploration_bonus += max(0, potential_detour)
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1)

            proximity_penalty = 0.0
            for visited_node in [n for n in range(len(distance_matrix)) if n not in unvisited_nodes and n != current_node]:
                proximity_penalty += distance_matrix[node][visited_node]
            if len(unvisited_nodes) > 1:
                proximity_penalty /= (len(unvisited_nodes) - 1)

            score = distance_to_node + adaptive_detour * direct_distance - 0.2 * exploration_bonus + 0.1 * proximity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
