def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('inf')
        else:
            connectivity = sum(1 for d in distance_matrix[node] if d < distance_to_node)
            avg_connectivity = sum(sum(1 for d in row if d < row[node]) for row in distance_matrix) / len(distance_matrix)
            attractiveness = (connectivity / (avg_connectivity + 1e-6)) * (remaining_nodes / (remaining_nodes + 1))
            sigmoid_input = (distance_to_destination - distance_to_node) / (distance_to_node + 1e-6)
            sigmoid = 1 / (1 + math.exp(-sigmoid_input))
            score = (1 - sigmoid) * (1 - attractiveness)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
