def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            # Estimate remaining tour length after visiting node
            min_remaining = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            estimated_remaining = min_remaining + distance_to_destination

            # Centrality penalty based on average distance to all nodes
            centrality = sum(distance_matrix[node]) / total_nodes
            centrality_penalty = centrality * (remaining_nodes / total_nodes)

            # Combine immediate distance and estimated remaining path
            score = distance_to_node * estimated_remaining + 0.5 * centrality_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
