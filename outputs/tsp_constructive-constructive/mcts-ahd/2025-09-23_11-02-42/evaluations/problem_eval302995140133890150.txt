def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = -distance_to_node - distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            detour_penalty = (1.0 - detour_ratio) * direct_distance

            exploration_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node]
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1)

            progress_factor = (total_nodes - remaining_nodes) / total_nodes
            detour_weight = 0.6 - 0.4 * progress_factor
            exploration_weight = 0.2 + 0.4 * (1 - progress_factor)
            score = -distance_to_node - detour_weight * detour_penalty + exploration_weight * exploration_bonus - 0.1 * progress_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
