def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    if remaining_nodes == 0:
        return destination_node

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes) / (total_nodes - 1)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = -distance_to_node - distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            base_detour_penalty = (1.0 - detour_ratio) * direct_distance

            # Adaptive detour penalty based on node centrality
            node_centrality = centrality[node]
            max_centrality = max(centrality.values()) if centrality else 1.0
            centrality_factor = 0.5 if max_centrality == 0 else node_centrality / max_centrality
            detour_penalty = base_detour_penalty * (1.0 - 0.5 * centrality_factor)

            # Centrality-weighted exploration bonus
            exploration_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node] * (1.0 - centrality[other_node] / max_centrality)
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1)

            progress_factor = (total_nodes - remaining_nodes) / total_nodes
            exploration_weight = 0.2 + 0.5 * (1 - progress_factor)
            score = -distance_to_node - 0.6 * detour_penalty + exploration_weight * exploration_bonus - 0.3 * progress_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
