def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = 1.0 / (distance_to_node + distance_to_destination)
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            detour_bonus = detour_ratio * (1.0 - (remaining_nodes / total_nodes))

            connectivity_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    connectivity_bonus += 1.0 / distance_matrix[node][other_node]
            connectivity_bonus /= (remaining_nodes - 1) if remaining_nodes > 1 else 1.0

            progress_factor = (total_nodes - remaining_nodes) / total_nodes
            adaptive_weight = 0.3 + 0.7 * progress_factor

            score = (0.6 - 0.4 * progress_factor) * distance_to_node + \
                    adaptive_weight * detour_bonus + \
                    0.5 * connectivity_bonus - \
                    0.2 * (distance_to_destination / direct_distance)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
