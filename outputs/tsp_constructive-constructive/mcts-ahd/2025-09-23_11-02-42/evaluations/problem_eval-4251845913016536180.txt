def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            ratio = distance_to_node
        else:
            ratio = distance_to_node / distance_to_destination

        direct_distance = distance_matrix[current_node][destination_node]
        detour = distance_to_node + distance_to_destination - direct_distance
        detour_penalty = detour / (1.0 + direct_distance)

        # Dynamic weight for detour penalty based on node's position
        dynamic_weight = 0.5 if detour <= direct_distance * 0.1 else 0.2

        score = ratio + dynamic_weight * detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
