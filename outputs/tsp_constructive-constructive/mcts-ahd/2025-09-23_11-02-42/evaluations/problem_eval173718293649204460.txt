importance.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_destination - distance_to_node
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_penalty = direct_distance - (distance_to_node + distance_to_destination)

            exploration_bonus = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1)

            node_centrality = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
            dynamic_exploration_factor = 1.0 + (remaining_nodes / (remaining_nodes + 1)) * exploration_bonus

            score = (-0.5 * distance_to_node + 0.3 * detour_penalty) * dynamic_exploration_factor + 0.4 * exploration_bonus + 0.6 * node_centrality

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
