importance (measured by connectivity and distance centrality) and remaining path length, while incorporating a probabilistic element to escape local optima.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            connectivity = sum(1 for d in distance_matrix[node] if d > 0 and d < distance_to_node)
            distance_centrality = sum(distance_matrix[node]) / total_nodes
            path_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2
            penalty = (connectivity / (distance_centrality + 1)) * path_factor
            score = distance_to_node * (1 + penalty) + (distance_to_destination * 0.3)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
