def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Immediate distance factor
        immediate_score = 1 / (distance_to_node + 1e-6)

        # Detour penalty (from No.1)
        direct_distance = distance_matrix[current_node][destination_node]
        detour_penalty = (direct_distance / distance_to_destination - 1) * distance_to_destination

        # Exploration bonus (from No.1)
        exploration_bonus = 0.0
        if remaining_nodes > 1:
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node]
            exploration_bonus /= (remaining_nodes - 1)

        # Dynamic weights: prioritize exploration and detour penalties early, immediate distance later
        weight_immediate = 0.3 if remaining_nodes > total_nodes // 2 else 0.7
        weight_detour = 0.5 if remaining_nodes > total_nodes // 2 else 0.2
        weight_exploration = 0.2 if remaining_nodes > total_nodes // 2 else 0.1

        # Score combines immediate distance, detour penalty, and exploration bonus
        score = (weight_immediate * immediate_score -
                 weight_detour * detour_penalty +
                 weight_exploration * exploration_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
