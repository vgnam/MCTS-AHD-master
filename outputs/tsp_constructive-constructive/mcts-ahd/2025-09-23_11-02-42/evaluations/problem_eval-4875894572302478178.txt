def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            dynamic_penalty = (1.0 - detour_ratio) * direct_distance * (remaining_nodes / len(distance_matrix))

            exploration_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node]
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1)

            connectivity_prob = sum(1 for other_node in unvisited_nodes if distance_matrix[node][other_node] < direct_distance * 1.2) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
            exploration_bonus *= connectivity_prob

            score = distance_to_node + 0.6 * dynamic_penalty - 0.5 * exploration_bonus

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
