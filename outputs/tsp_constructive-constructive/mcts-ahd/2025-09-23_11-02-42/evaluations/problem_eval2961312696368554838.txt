def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance to unvisited nodes for exploration heuristic
    avg_distance_to_unvisited = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes and path progress
        weight_short_term = 0.7 * (1 - remaining_nodes / len(distance_matrix)) + 0.3 * (remaining_nodes / len(distance_matrix))
        weight_long_term = 1.0 - weight_short_term

        # Exploration term to balance exploitation and exploration
        exploration_term = 0.2 * (distance_to_node - avg_distance_to_unvisited)

        # Non-linear penalty with decaying factor
        penalty = 0.1 * (0.5 ** (len(unvisited_nodes) - remaining_nodes + 1)) if node in unvisited_nodes and distance_matrix[current_node][node] == 0 else 0

        score = (weight_short_term * distance_to_node +
                 weight_long_term * distance_to_destination +
                 exploration_term +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
