def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_penalty = 0.6 * (1.0 - (direct_distance / (distance_to_node + distance_to_destination))) * (direct_distance ** 1.2)

            connectivity_reward = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    connectivity_reward += distance_matrix[node][other_node] ** 0.8
            if remaining_nodes > 1:
                connectivity_reward /= (remaining_nodes - 1) ** 1.1

            path_length_factor = 1.0 / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
            score = distance_to_node + detour_penalty - 0.4 * connectivity_reward * path_length_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
