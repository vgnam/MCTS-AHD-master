def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # Include current node

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / (distance_to_node + distance_to_destination)
            detour_risk = (1.0 - detour_ratio) * (distance_to_node ** 0.5)  # Non-linear detour risk

            # Dynamic exploration bonus based on node centrality
            exploration_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node] ** 0.5  # Square root scaling
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1) ** 1.5  # Non-linear density adjustment

            # Logarithmic scaling for efficiency
            score = distance_to_node + 1.2 * detour_risk - 0.2 * exploration_bonus
            if remaining_nodes > 0:
                score *= (1.0 + math.log(total_nodes / remaining_nodes))  # Logarithmic adjustment

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
