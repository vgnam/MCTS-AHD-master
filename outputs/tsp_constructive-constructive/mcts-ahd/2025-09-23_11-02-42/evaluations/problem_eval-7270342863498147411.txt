import math
    import random

    scores = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / distance_to_destination
            centrality_penalty = sum(distance_matrix[node]) / len(distance_matrix[node])
            future_impact = (1 - detour_ratio) * math.log(remaining_nodes + 1) / centrality_penalty
            score = distance_to_node + (1 / (1 + math.exp(-future_impact)))

        scores.append((node, score))

    if not scores:
        return None

    max_score = max(score for node, score in scores)
    probabilities = [math.exp(score - max_score) for node, score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in scores], weights=normalized_probs, k=1)[0]
    return next_node
