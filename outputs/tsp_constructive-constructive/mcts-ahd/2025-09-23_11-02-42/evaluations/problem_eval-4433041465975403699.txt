def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1  # +1 for the current node
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    temperature = 1.0 - progress_ratio  # Decreases as progress increases

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_ratio = direct_distance / distance_to_destination
            dynamic_penalty = distance_to_node + (1.0 - progress_ratio) * (detour_ratio - 1) * direct_distance
            exploration_bonus = (1.0 - progress_ratio) * (1.0 / (1.0 + remaining_nodes))
            score = dynamic_penalty - exploration_bonus

        # Apply probabilistic selection with temperature
        if temperature > 0.0:
            score = score * (1.0 + temperature * (random.random() - 0.5))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
