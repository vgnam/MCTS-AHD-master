def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Stage 1: Identify potential hub nodes
    hub_scores = {}
    for node in unvisited_nodes:
        # Calculate average distance to other unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        hub_scores[node] = avg_distance

    # Stage 2: Evaluate trade-off between distance and detour
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_factor = (distance_to_node + distance_to_destination - direct_distance) / direct_distance

            # Dynamic weights: prioritize hubs early, balance later
            exploration_weight = remaining_nodes / (remaining_nodes + 2)
            hub_weight = 1.0 - exploration_weight

            score = (1 - hub_weight) * distance_to_node + hub_weight * hub_scores[node]
            score += detour_factor * exploration_weight

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
