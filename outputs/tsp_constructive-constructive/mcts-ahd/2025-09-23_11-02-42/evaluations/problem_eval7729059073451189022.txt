def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour = distance_to_node + distance_to_destination - direct_distance
            detour_penalty = detour / (1.0 + direct_distance)

            dynamic_weight = 0.5 if detour <= direct_distance * 0.1 else 0.2

            exploration_bonus = 0.0
            for other_node in unvisited_nodes:
                if other_node != node:
                    exploration_bonus += distance_matrix[node][other_node]
            if remaining_nodes > 1:
                exploration_bonus /= (remaining_nodes - 1)

            score = distance_to_node + dynamic_weight * detour_penalty - 0.1 * exploration_bonus

            if remaining_nodes / total_nodes < 0.5:
                score *= 0.8

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
