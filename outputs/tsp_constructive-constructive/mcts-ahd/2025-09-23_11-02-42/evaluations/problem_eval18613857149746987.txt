def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_value = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Exponential decay weight based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        decay_factor = 0.5 ** (1 / (remaining_nodes + 1))
        weight = decay_factor * distance_to_node + (1 - decay_factor) * distance_to_destination

        # Penalty for revisiting nodes to avoid cycles
        if node == current_node:
            weight += 1000  # Large penalty to discourage revisiting

        if weight < best_value:
            best_value = weight
            next_node = node

    return next_node
