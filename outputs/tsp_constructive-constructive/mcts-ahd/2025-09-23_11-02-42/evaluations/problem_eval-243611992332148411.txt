import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Calculate temperature for probabilistic selection (decreases as tour progresses)
    temperature = max(0.1, 1.0 - 0.1 * (10 - remaining_nodes))

    # Calculate centrality for each node (average distance to all unvisited nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = np.mean([distance_matrix[node][n] for n in unvisited_nodes if n != node])
        centrality[node] = avg_distance

    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_node + distance_to_destination
        else:
            direct_distance = distance_matrix[current_node][destination_node]
            detour_factor = (distance_to_node + distance_to_destination - direct_distance) / (1.0 + direct_distance)
            weight = 0.5 * (1.0 - np.tanh(centrality[node]))  # Higher weight for less central nodes
            score = (1 - weight) * distance_to_node + weight * detour_factor

        scores.append((node, score))

    # Apply probabilistic selection based on temperature
    nodes, scores = zip(*scores)
    probabilities = np.exp(-np.array(scores) / temperature)
    probabilities /= probabilities.sum()
    next_node = np.random.choice(nodes, p=probabilities)

    return next_node
