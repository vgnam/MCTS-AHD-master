def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    direct_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            detour_penalty = (distance_to_node + distance_to_destination - direct_distance) ** 2
            exploration_factor = 0.5 + 0.5 * (len(unvisited_nodes) / len(distance_matrix))
            score = distance_to_node + detour_penalty * (1 - exploration_factor)

        scores.append((node, score))

    if not scores:
        return destination_node

    nodes, scores = zip(*scores)
    exp_scores = [math.exp(-score / max(scores) * 10) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = np.random.choice(nodes, p=probs)

    return next_node
