def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    direct_distance = distance_matrix[current_node][destination_node]
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            base_detour = distance_to_node + distance_to_destination - direct_distance
            detour_penalty = base_detour ** 2 * (1 + 0.1 * (total_unvisited - remaining_nodes) / total_unvisited)

            centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            centrality_weight = 1 - (1 / (1 + math.exp(-5 * (remaining_nodes / total_unvisited - 0.5))))

            exploration_factor = (remaining_nodes / total_unvisited) ** 2
            score = distance_to_node + detour_penalty * (1 - exploration_factor) + centrality_score * centrality_weight * exploration_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
