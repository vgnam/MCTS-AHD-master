def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on the number of remaining unvisited nodes
        weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)

        # Combine product-based and weighted approaches
        product = distance_to_node * distance_to_destination
        weighted_sum = weight * distance_to_node + (1 - weight) * distance_to_destination
        score = product * weighted_sum

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
