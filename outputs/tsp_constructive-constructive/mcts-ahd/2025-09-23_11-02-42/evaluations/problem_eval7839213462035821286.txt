importance, combining immediate distance with long-term detour history and node centrality, while using a decaying exploration factor to balance short-term gains with long-term path optimization.
}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    direct_distance = distance_matrix[current_node][destination_node]

    detour_history = {}
    for node in unvisited_nodes:
        detour_history[node] = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = distance_to_node
        else:
            detour_penalty = (distance_to_node + distance_to_destination - direct_distance) ** 2
            detour_history[node] = detour_history.get(node, 0) + detour_penalty

            centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            exploration_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2

            historical_detour_weight = 0.3 * (1 - exploration_factor)
            score = (distance_to_node + detour_penalty * (1 - historical_detour_weight) +
                     centrality_score * exploration_factor +
                     detour_history[node] * historical_detour_weight)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
