def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead: Evaluate the impact of choosing this node on future detours
        lookahead_score = 0
        if remaining_nodes > 1:
            for next_node_candidate in unvisited_nodes:
                if next_node_candidate != node:
                    detour = (distance_matrix[current_node][node] +
                              distance_matrix[node][next_node_candidate] +
                              distance_matrix[next_node_candidate][destination_node])
                    direct = (distance_matrix[current_node][next_node_candidate] +
                              distance_matrix[next_node_candidate][destination_node])
                    lookahead_score += (direct - detour) / (direct + 1e-6)

        # Dynamic weights: More emphasis on lookahead early, more on immediate distance later
        weight_immediate = 0.5 if remaining_nodes > total_nodes // 2 else 0.2
        weight_lookahead = 0.5 if remaining_nodes > total_nodes // 2 else 0.8

        # Exploration factor: Encourages diversity early, efficiency later
        exploration_factor = 1.0 if remaining_nodes > total_nodes // 2 else 0.1

        # Score combines immediate distance, lookahead, exploration, and normalized factors
        score = (weight_immediate * (1 / (distance_to_node + 1e-6)) +
                 weight_lookahead * lookahead_score +
                 exploration_factor * (1 / (remaining_nodes + 1e-6)))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
