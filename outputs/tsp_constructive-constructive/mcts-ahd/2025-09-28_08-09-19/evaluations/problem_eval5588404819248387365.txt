def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) == 1:
            score = distance_to_current + distance_to_destination
        else:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            predicted_path_cost = 0.6 * distance_to_current + 0.4 * avg_neighbor_distance

            weight_factor = 0.4 + 0.6 * (1 - visited_ratio)
            score = weight_factor * predicted_path_cost + (1 - weight_factor) * distance_to_destination

            if avg_neighbor_distance > 1.5 * distance_to_current:
                score *= 1.1

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
