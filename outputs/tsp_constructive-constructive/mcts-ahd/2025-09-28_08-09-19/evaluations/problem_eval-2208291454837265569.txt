def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.7
    temperature = 1.0 / (1.0 + 0.5 * exploration_factor)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        popularity = 1.0 / (1.0 + node_centrality)
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.4 + 0.3 * exploration_factor
        lookahead_weight = 0.3 * (1.0 - exploration_factor)
        popularity_weight = 0.2 * exploration_factor
        penalty_weight = 0.5 * (1.0 - lookahead_weight)

        penalty = penalty_weight * (distance_to_destination + 0.5 * node_centrality)
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) + popularity_weight * popularity - penalty
        scores.append((node, score))

    if temperature > 0:
        exp_scores = [math.exp(-score / temperature) for _, score in scores]
        total = sum(exp_scores)
        probabilities = [exp_score / total for exp_score in exp_scores]
        next_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
