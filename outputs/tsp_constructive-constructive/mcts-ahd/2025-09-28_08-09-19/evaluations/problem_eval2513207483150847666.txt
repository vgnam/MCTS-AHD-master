def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Fixed lookahead depth of 2
        lookahead_depth = 2
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Fixed weights (40% immediate, 60% lookahead)
        score = 0.4 * immediate_distance + 0.6 * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
