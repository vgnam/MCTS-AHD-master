def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * 0.7
    temperature = 1.0 / (remaining_nodes + 1)

    candidates = []
    scores = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_prob = 1.0 - exploration_factor

        if remaining_nodes > 1:
            remaining_after = unvisited_nodes - {node}
            next_candidate = min(remaining_after, key=lambda x: distance_matrix[node][x])
            lookahead_distance = distance_matrix[node][next_candidate]
            score = (1 - lookahead_prob) * immediate_distance + lookahead_prob * lookahead_distance
        else:
            score = immediate_distance

        candidates.append(node)
        scores.append(score)

    if temperature > 0:
        exp_scores = [math.exp(-s / temperature) for s in scores]
        total = sum(exp_scores)
        probs = [e / total for e in exp_scores]
        next_node = random.choices(candidates, weights=probs, k=1)[0]
    else:
        next_node = candidates[scores.index(min(scores))]

    return next_node
