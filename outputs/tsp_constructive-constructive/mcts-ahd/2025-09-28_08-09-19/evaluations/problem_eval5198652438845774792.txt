def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        if remaining_nodes <= 2:
            weight_current = 0.8
            weight_destination = 0.2
        else:
            weight_current = 0.5
            weight_destination = 0.5

        # Penalize nodes that are too far from current node
        if distance_to_current > 2 * distance_matrix[current_node][destination_node]:
            penalty = 1.5
        else:
            penalty = 1.0

        weighted_score = (weight_current * distance_to_current + weight_destination * distance_to_destination) * penalty

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
