def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Fixed lookahead depth of 2
        lookahead_depth = 2
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Calculate average distance to remaining nodes (global connectivity)
        if len(unvisited_nodes) > 1:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        else:
            avg_distance = 0

        # Dynamic weight based on visited ratio
        weight_factor = 0.5 + 0.5 * (1 - visited_ratio)

        # Combine immediate distance, lookahead distance, and global connectivity
        score = (weight_factor * immediate_distance +
                 (1 - weight_factor) * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) -
                 avg_distance)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
