def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (remaining_nodes + 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            predicted_path_cost = distance_to_current + 0.3 * avg_future_distance + 0.7 * distance_to_destination

            local_weight = 0.6 - 0.3 * (remaining_nodes / (remaining_nodes + 1))
            score = local_weight * distance_to_current + (1 - local_weight) * predicted_path_cost

        scores.append((node, score))

    # Normalize scores and apply temperature-based softmax selection
    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-10)) for node, score in scores]

    probabilities = [math.exp(-s / temperature) for _, s in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]

    return next_node
