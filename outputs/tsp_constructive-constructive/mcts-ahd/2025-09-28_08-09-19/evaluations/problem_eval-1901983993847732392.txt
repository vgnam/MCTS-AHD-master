def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = min(1.0, 0.5 + (remaining_nodes / (remaining_nodes + 1)) * 0.5)
    destination_bias = 1.0 - exploration_factor

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.4 * exploration_factor
        future_weight = 0.3 * exploration_factor
        destination_weight = 0.3 * destination_bias

        exploration_pressure = 0.2 * (1.0 - exploration_factor) * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0
        destination_pressure = 0.5 * destination_bias * (distance_to_destination / (1.0 + distance_to_current))

        score = immediate_weight * distance_to_current + future_weight * avg_future_distance - exploration_pressure + destination_weight * distance_to_destination - destination_pressure
        scores.append((node, score))

    if scores:
        scores.sort(key=lambda x: x[1])
        selected = scores[0][0]
        if len(scores) > 1 and random.random() < 0.2 * exploration_factor:
            selected = random.choice(scores[1:])[0]
        return selected
    return next_node
