def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 to include current node
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_factor = visited_ratio ** 2  # Non-linear adjustment for better balance

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalize nodes too close to destination early
        early_penalty = 1.0 if (len(unvisited_nodes) > total_nodes / 2 and distance_to_destination < 2 * distance_matrix[current_node][destination_node]) else 1.0

        weighted_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination * early_penalty

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
