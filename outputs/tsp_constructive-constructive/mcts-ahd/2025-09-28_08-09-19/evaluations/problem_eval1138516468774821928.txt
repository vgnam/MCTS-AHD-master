def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.6

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = float('inf')
        else:
            ratio = (distance_to_current * (distance_to_destination ** decay_factor)) / (distance_to_current + distance_to_destination)

            if remaining_nodes == 1:
                score = ratio
            else:
                centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0
                connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * distance_to_current) / remaining_nodes

                weight_factor = 0.4 + 0.6 * (remaining_nodes / (remaining_nodes + 3))
                ratio_weight = 0.5 * weight_factor
                centrality_weight = 0.3 * (1 - weight_factor)
                connectivity_weight = 0.2 * (1 - weight_factor)

                penalty_weight = 0.3 * (1.0 - connectivity_weight)
                penalty = penalty_weight * (distance_to_destination / (1.0 + distance_to_current)) if distance_to_current > 0 else 0

                score = (ratio_weight * ratio + centrality_weight * centrality + connectivity_weight * connectivity) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
