def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    dynamic_depth = min(3, max(1, remaining_count // 2))  # Dynamic lookahead depth

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(dynamic_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Weighted scoring with dynamic depth normalization
        immediate_weight = 0.4
        lookahead_weight = 0.6
        penalty = 0.1 if node in unvisited_nodes else 0  # Penalty for revisiting
        score = (immediate_weight * immediate_distance +
                 lookahead_weight * (lookahead_distance / dynamic_depth) +
                 penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
