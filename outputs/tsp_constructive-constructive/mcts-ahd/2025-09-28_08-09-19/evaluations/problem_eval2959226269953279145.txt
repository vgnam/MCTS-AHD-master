importance.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.6

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        lookahead_depth = min(2, remaining_count // 3) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            node_centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            node_centrality = 0

        immediate_weight = 0.65 + 0.1 * exploration_factor
        lookahead_weight = 0.2 * (1.0 - exploration_factor)
        centrality_weight = 0.15 * exploration_factor
        penalty_weight = 0.3 * (1.0 - lookahead_weight)

        penalty = penalty_weight * (distance_to_destination + 0.2 * node_centrality)

        if lookahead_depth > 0:
            current = node
            lookahead_distance = 0
            temp_remaining = remaining_nodes.copy()
            for _ in range(lookahead_depth):
                if not temp_remaining:
                    break
                next_candidate = min(temp_remaining, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                temp_remaining -= {next_candidate}
            lookahead_score = lookahead_distance / lookahead_depth
        else:
            lookahead_score = 0

        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_score + centrality_weight * (1.0 / (1.0 + node_centrality)) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
