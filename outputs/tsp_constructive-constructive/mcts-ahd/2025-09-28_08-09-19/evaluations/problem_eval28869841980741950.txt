def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Dynamic lookahead depth based on remaining nodes (up to 4 or one-third of remaining count)
        lookahead_depth = min(4, remaining_count // 3) if remaining_count > 3 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            # Limited-depth lookahead (3 steps ahead)
            current = node
            for _ in range(min(3, lookahead_depth)):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Weighted score: 70% immediate, 30% lookahead
        score = 0.7 * immediate_distance + 0.3 * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
