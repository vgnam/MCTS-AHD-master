def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]

        if not remaining_nodes:
            avg_future_distance = 0
        else:
            avg_future_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

        dynamic_weight = 0.5 if len(remaining_nodes) > 1 else 0.8
        normalized_score = (1 - (distance_to_current / max(distance_matrix[current_node][n] for n in unvisited_nodes))) * dynamic_weight + \
                          (avg_future_distance / max(distance_matrix[node][n] for n in remaining_nodes if remaining_nodes)) * (1 - dynamic_weight)

        if normalized_score > best_score:
            best_score = normalized_score
            next_node = node

    return next_node
