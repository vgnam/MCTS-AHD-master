def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 2)) * 0.8

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(remaining_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
            predicted_path_cost = 0.6 * immediate_distance + 0.4 * avg_neighbor_distance
        else:
            predicted_path_cost = immediate_distance

        immediate_weight = 0.6 + 0.2 * exploration_factor
        path_weight = 0.3 * (1.0 - exploration_factor)
        destination_weight = 0.1

        score = immediate_weight * immediate_distance + path_weight * predicted_path_cost + destination_weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
