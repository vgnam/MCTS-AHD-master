def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes - 1)
            decay_factor = 1 / (1 + remaining_nodes)
            future_cost = centrality * (0.8 - 0.3 * decay_factor)

            local_weight = 0.7 - 0.2 * (remaining_nodes / (remaining_nodes + 1))
            score = local_weight * distance_to_current + (1 - local_weight) * (future_cost + 0.4 * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
