importance scoring by combining immediate distance, future connectivity, and destination proximity with adaptive penalties, using a reinforcement learning-inspired approach where node selection is influenced by both local and global factors, with a focus on balancing exploration and exploitation through decaying weights and novelty bonuses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + remaining_nodes)
    exploitation_factor = 1.0 - exploration_factor

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        destination_distance = distance_matrix[node][destination_node]

        immediate_weight = 0.4 * exploitation_factor
        connectivity_weight = 0.3 * exploration_factor
        destination_weight = 0.3 * (1.0 - exploration_factor)

        penalty_weight = 0.2 * (1.0 - exploitation_factor)
        penalty = penalty_weight * (destination_distance / (1.0 + future_connectivity)) if future_connectivity > 0 else 0

        novelty_bonus = 0.5 * (1.0 - exploitation_factor) * (1.0 / (1.0 + immediate_distance))

        max_distance = max(immediate_distance, destination_distance, 1.0)
        normalized_immediate = immediate_distance / max_distance
        normalized_connectivity = future_connectivity / max_distance if future_connectivity > 0 else 0

        decay_factor = 0.8 * (1.0 - exploitation_factor)
        score = (immediate_weight * (1.0 - normalized_immediate) +
                connectivity_weight * (normalized_connectivity ** decay_factor) -
                destination_weight * destination_distance -
                penalty +
                novelty_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
