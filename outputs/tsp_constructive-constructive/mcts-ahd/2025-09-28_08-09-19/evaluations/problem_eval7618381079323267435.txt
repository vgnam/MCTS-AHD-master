def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate node degrees (number of connections with unvisited nodes)
    node_degrees = {}
    for node in unvisited_nodes:
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0 and n != node)
        node_degrees[node] = degree

    # Calculate path entropy (diversity of distances)
    all_distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    entropy = sum(d * (1 - d / sum(all_distances)) for d in all_distances) if sum(all_distances) > 0 else 0

    # Dynamic weights based on node degree and entropy
    degree_weight = sum(node_degrees.values()) / len(node_degrees) if node_degrees else 1
    entropy_weight = min(1, entropy / (remaining_nodes * 2))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = 1 / (distance_to_current + distance_to_destination + 1e-6)
        else:
            # Probabilistic selection based on distance and degree
            prob_distance = 1 / (distance_to_current + 1e-6)
            prob_degree = node_degrees[node] / sum(node_degrees.values()) if sum(node_degrees.values()) > 0 else 1

            # Memory-based penalty for recent nodes
            memory_penalty = 0.1 if node in [current_node] else 0

            # Combine factors with dynamic weights
            score = (degree_weight * prob_degree + (1 - degree_weight) * prob_distance) * (1 - memory_penalty) * (1 + entropy_weight)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
