def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    node_scores = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, remaining_nodes)]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            exploration_weight = 0.5 * (1 - remaining_nodes / (remaining_nodes + 5))
            exploitation_weight = 1 - exploration_weight

            predicted_path_cost = exploration_weight * distance_to_current + exploitation_weight * avg_neighbor_distance

            penalty_factor = 1 + (len(unvisited_nodes) / (len(unvisited_nodes) + 10)) * (distance_to_current / max(distance_matrix[current_node]))
            adjusted_score = predicted_path_cost * penalty_factor + distance_to_destination

            node_scores.append((node, adjusted_score))

    if node_scores:
        node_scores.sort(key=lambda x: x[1])
        ranked_nodes = [node for node, score in node_scores]
        probabilities = [1.0 / (i + 1) for i in range(len(ranked_nodes))]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = np.random.choice(ranked_nodes, p=probabilities)

    return next_node
