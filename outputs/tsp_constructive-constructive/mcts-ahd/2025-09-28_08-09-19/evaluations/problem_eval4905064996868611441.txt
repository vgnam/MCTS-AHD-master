def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Calculate average distance to remaining unvisited nodes
            avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

            # Calculate connectivity score based on local density
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * avg_distance_to_unvisited and n != node)

            # Dynamic weight adjustment
            proximity_weight = 0.7 - 0.4 * (remaining_nodes / total_nodes)
            connectivity_weight = 0.3 + 0.4 * (remaining_nodes / total_nodes)
            destination_weight = 0.2 + 0.3 * (1 - remaining_nodes / total_nodes)

            # Exploration bonus to encourage diverse paths
            exploration_bonus = 0.1 * (1 - connectivity / (remaining_nodes - 1)) if remaining_nodes > 1 else 0

            # Calculate final score
            score = (proximity_weight * distance_to_current +
                     connectivity_weight * avg_distance_to_unvisited +
                     destination_weight * distance_to_destination -
                     exploration_bonus)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
