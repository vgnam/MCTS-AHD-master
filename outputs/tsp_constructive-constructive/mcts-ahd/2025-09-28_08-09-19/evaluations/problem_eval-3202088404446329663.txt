def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    lookahead_depth = min(4, max(1, remaining_count // 3))

    avg_total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_count

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            score = immediate_distance
        else:
            avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            connectivity_score = sum(1 / (1 + distance_matrix[node][n]) for n in remaining_nodes) / len(remaining_nodes)
            connectivity_factor = 1.0 + (connectivity_score * 0.5)

            deviation_penalty = abs(immediate_distance - avg_total_distance) * (1.0 + (remaining_count / len(unvisited_nodes)) * 0.3)

            weight = 0.4 * (immediate_distance - avg_remaining_distance) + 0.4 * (immediate_distance * connectivity_factor) + 0.2 * deviation_penalty

            score = weight

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
