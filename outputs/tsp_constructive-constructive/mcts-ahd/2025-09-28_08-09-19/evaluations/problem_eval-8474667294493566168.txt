def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    progress_ratio = (total_nodes - remaining_count) / total_nodes

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            neighbor_distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_neighbor_dist = sum(neighbor_distances) / len(neighbor_distances)
            centrality = sum(1 for d in neighbor_distances if d <= 1.3 * avg_neighbor_dist) / len(remaining_nodes)
            density_penalty = 1 + (0.5 * (max(neighbor_distances) - min(neighbor_distances)) / (avg_neighbor_dist + 1e-6))
        else:
            avg_neighbor_dist = 0
            centrality = 0
            density_penalty = 1

        lookahead_factor = min(3, max(1, remaining_count // 3))
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_factor] if remaining_nodes else []
        lookahead_penalty = sum(distance_matrix[node][n] for n in nearest_neighbors) / (len(nearest_neighbors) + 1e-6) if nearest_neighbors else 1

        dist_weight = 0.5 - 0.2 * progress_ratio
        centrality_weight = 0.3 * (1 - progress_ratio ** 2)
        penalty_weight = 0.2 * (1 - progress_ratio ** 1.5)

        base_score = dist_weight * immediate_dist + centrality_weight * (immediate_dist * (1 + centrality))
        penalty = 1 + penalty_weight * (lookahead_penalty / (immediate_dist + 1e-6)) * density_penalty
        total_score = base_score * penalty

        if total_score < best_score:
            best_score = total_score
            next_node = node

    return next_node
