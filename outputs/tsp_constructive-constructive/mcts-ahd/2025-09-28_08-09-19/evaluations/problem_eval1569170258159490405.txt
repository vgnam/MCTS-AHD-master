def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + remaining_nodes)
    exploitation_factor = 1.0 - exploration_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / len(future_distances) if future_distances else 0
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality penalty (higher for nodes with many nearby neighbors)
        centrality_penalty = 0
        if remaining_nodes > 1:
            neighbors = [n for n in unvisited_nodes if n != node]
            neighbor_distances = [distance_matrix[node][n] for n in neighbors]
            centrality_penalty = exploitation_factor * (sum(neighbor_distances) / len(neighbor_distances)) if neighbors else 0

        # Dynamic weights
        immediate_weight = 1.5 * exploration_factor
        future_weight = 1.0 + exploitation_factor
        penalty_weight = 0.5 * exploration_factor

        # Penalize nodes too close to destination in early stages
        proximity_penalty = penalty_weight * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0

        # Calculate total score
        score = immediate_weight * distance_to_current + future_weight * avg_future_distance + centrality_penalty - proximity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
