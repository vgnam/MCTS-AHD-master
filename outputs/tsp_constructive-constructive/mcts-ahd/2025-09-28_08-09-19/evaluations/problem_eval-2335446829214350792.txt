def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Adaptive lookahead depth based on remaining nodes
        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        for _ in range(lookahead_depth):
            if not remaining_nodes:
                break
            next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
            lookahead_distance += distance_matrix[node][next_candidate]
            remaining_nodes -= {next_candidate}

        # Penalize revisiting nodes to avoid cycles
        penalty = 0.2 if node in unvisited_nodes and distance_matrix[current_node][node] == 0 else 0
        score = 0.6 * immediate_distance + 0.4 * lookahead_distance - penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
