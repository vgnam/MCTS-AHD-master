def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 + (remaining_nodes / (remaining_nodes + 1)) * 0.5

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.8 * avg_distance_to_all)
        outlier_penalty = 1.0 if local_density < 0.5 * remaining_nodes else 1.0 + (local_density / remaining_nodes) * 0.5

        future_weight = 0.3 * (1.0 - weight)
        penalty_weight = 0.4 * (1.0 - future_weight)
        penalty = penalty_weight * (distance_matrix[node][destination_node] / (1.0 + avg_distance_to_all)) if avg_distance_to_all > 0 else 0

        score = (distance_to_current + avg_distance_to_all) * (1.0 + (remaining_nodes / (remaining_nodes + 1)) * 0.4) * outlier_penalty - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
