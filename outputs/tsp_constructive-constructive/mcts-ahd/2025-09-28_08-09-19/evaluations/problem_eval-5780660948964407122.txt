def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    remaining_nodes = len(unvisited_nodes)
    future_weight = 0.7 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.6
        penalty_weight = 0.4 * (1.0 - future_weight) * (1.0 - (remaining_nodes / (remaining_nodes + 1)))

        penalty = penalty_weight * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0

        score = immediate_weight * distance_to_current + future_weight * avg_future_distance - penalty
        scores.append((node, score))

    if scores:
        scores.sort(key=lambda x: x[1])
        top_nodes = scores[:max(1, len(scores) // 2)]
        next_node, _ = top_nodes[random.randint(0, len(top_nodes) - 1)]

    return next_node
