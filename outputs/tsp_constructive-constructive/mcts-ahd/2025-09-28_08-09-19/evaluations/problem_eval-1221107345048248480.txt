def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes if remaining_nodes > 0 else 0

            weight_factor = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 2))
            ratio_weight = 0.4 * weight_factor
            path_weight = 0.6 * (1 - weight_factor)

            if distance_to_destination == 0:
                ratio = float('inf')
            else:
                ratio = distance_to_current / distance_to_destination

            predicted_path_cost = 0.1 * distance_to_current + 0.3 * distance_to_destination + 0.6 * avg_future_distance
            penalty = 0.2 * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0

            score = ratio_weight * ratio + path_weight * predicted_path_cost - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
