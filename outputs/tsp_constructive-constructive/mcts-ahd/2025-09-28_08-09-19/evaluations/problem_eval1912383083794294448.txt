def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes are visited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead: Consider the next best step after the current node
        lookahead_score = 0
        if remaining_nodes > 1:
            lookahead_nodes = [n for n in unvisited_nodes if n != node]
            if lookahead_nodes:
                lookahead_node = min(lookahead_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
                lookahead_score = distance_matrix[node][lookahead_node] + distance_matrix[lookahead_node][destination_node]

        # Combine immediate, destination, and lookahead factors
        weighted_score = (1 - exploration_weight) * distance_to_current + exploration_weight * distance_to_destination
        weighted_score += 0.1 * lookahead_score  # Small weight for lookahead

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
