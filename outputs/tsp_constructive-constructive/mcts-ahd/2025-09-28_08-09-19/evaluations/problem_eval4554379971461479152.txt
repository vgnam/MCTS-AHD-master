def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    phase_factor = 1.0 - (remaining_count / total_nodes) ** 2

    # Calculate global centrality and average distance
    global_avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
    global_centrality = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes) / (len(unvisited_nodes) ** 2)

    # Memory-based bias (simplified)
    memory_bias = {node: 1.0 for node in unvisited_nodes}

    # Probabilistic selection parameters
    temp = 1.0 / (1 + phase_factor * 2)

    scores = []
    nodes = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        # Local centrality
        if remaining_nodes:
            local_avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            local_centrality = local_avg_distance
        else:
            local_avg_distance = 0
            local_centrality = 0

        # Connectivity measure
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * global_avg_distance)

        # Phase-based weights
        immediate_weight = 0.7 * phase_factor
        centrality_weight = 0.5 * (1 - phase_factor)
        connectivity_weight = 0.3 + 0.2 * phase_factor

        # Calculate score
        score = (immediate_weight * immediate_distance +
                 centrality_weight * (global_centrality - local_centrality) +
                 connectivity_weight * connectivity)
        score *= memory_bias[node]

        scores.append(score)
        nodes.append(node)

    # Probabilistic selection
    exp_scores = [math.exp(-s / temp) for s in scores]
    probs = [e / sum(exp_scores) for e in exp_scores]
    next_node = random.choices(nodes, weights=probs, k=1)[0]

    return next_node
