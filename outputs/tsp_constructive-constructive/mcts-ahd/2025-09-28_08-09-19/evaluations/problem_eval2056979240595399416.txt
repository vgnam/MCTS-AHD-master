def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Deeper lookahead (3 steps ahead)
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            for _ in range(2):  # 3-step lookahead
                if not next_candidates:
                    break
                next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
                lookahead_distance += distance_matrix[node][next_candidate]
                next_candidates.remove(next_candidate)

        score = 0.3 * immediate_distance + 0.7 * lookahead_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
