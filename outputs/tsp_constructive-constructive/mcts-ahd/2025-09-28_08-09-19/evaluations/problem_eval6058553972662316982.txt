def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    lookahead_depth = min(3, max(2, remaining_count // 2))

    avg_total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_count

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_remaining_distance)
        connectivity_factor = 1.0 + (connectivity / remaining_count) * 0.3

        deviation_penalty = abs(immediate_distance - avg_total_distance) * (1.0 + (remaining_count / len(unvisited_nodes)) * 0.5)

        novelty_factor = (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)) if remaining_nodes else 0

        weight = 0.5 * immediate_distance + 0.3 * deviation_penalty + 0.2 * novelty_factor - 0.1 * connectivity_factor

        score = weight

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
