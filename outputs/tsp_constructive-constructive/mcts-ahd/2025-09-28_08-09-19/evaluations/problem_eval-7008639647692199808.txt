def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, remaining_nodes)]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            weight_factor = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 2))
            immediate_weight = 0.6 * weight_factor
            neighbor_weight = 0.3 * (1 - weight_factor)
            future_weight = 0.1 * (1 - weight_factor)

            score = immediate_weight * distance_to_current + neighbor_weight * avg_neighbor_distance + future_weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
