importance' metric based on unvisited node density and a 'path momentum' factor to favor consistent direction, while the weights evolve with progress to balance short-term efficiency and long-term optimization.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        node_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 2 * distance_to_current) / len(unvisited_nodes) if unvisited_nodes else 0
        exploration_factor = (1 - progress) * (node_density * (1 / (1 + distance_to_current)))

        path_momentum = 1 / (1 + abs(distance_to_current - distance_to_destination))
        importance_factor = (1 + (1 - progress) * 0.5) * path_momentum

        immediate_weight = max(0.1, 0.6 - 0.4 * progress)
        future_weight = min(0.5, 0.2 + 0.3 * progress)
        proximity_weight = 0.5 * (1 - progress)

        score = (immediate_weight * (1 / (1 + distance_to_current)) +
                 future_weight * exploration_factor +
                 proximity_weight * (1 / (1 + distance_to_destination)) +
                 importance_factor)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
