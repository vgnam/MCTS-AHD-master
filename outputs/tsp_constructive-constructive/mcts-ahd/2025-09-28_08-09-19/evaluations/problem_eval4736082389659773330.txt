import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) ** 0.5
    exploitation_factor = 1.0 - exploration_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        normalized_centrality = centrality / (max(distance_to_current, distance_to_destination, 1.0) + 1e-6)

        exploration_bias = exploration_factor * (1.0 - normalized_centrality)
        exploitation_bias = exploitation_factor * (distance_to_current / (distance_to_destination + 1e-6))

        penalty = (distance_to_destination ** 2) / (centrality + 1e-6) if centrality > 0 else 0
        penalty *= (1.0 - math.exp(-remaining_nodes / 10.0))

        score = exploitation_bias - exploration_bias - penalty

        if score > best_score:
            best_score = score
            next_node = node

    if random.random() < exploration_factor and len(unvisited_nodes) > 1:
        candidates = [n for n in unvisited_nodes if n != next_node]
        next_node = random.choice(candidates)

    return next_node
