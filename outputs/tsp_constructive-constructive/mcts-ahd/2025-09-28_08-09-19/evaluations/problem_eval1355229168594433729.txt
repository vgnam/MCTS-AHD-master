def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)
    exploration_factor = min(1.0, max(0.1, 1.0 - (remaining_count / total_nodes) * 0.7))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            neighbor_distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(neighbor_distances) / len(neighbor_distances)
            node_centrality = avg_distance
            connectivity = sum(1 for d in neighbor_distances if d < 1.2 * avg_distance) / len(neighbor_distances)
            lookahead_depth = min(3, max(1, remaining_count // 3))
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth]
            lookahead_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity = 0
            lookahead_distance = 0

        immediate_weight = 0.5 + 0.3 * (1 - exploration_factor)
        lookahead_weight = 0.4 * exploration_factor
        centrality_weight = 0.7 * (1 - exploration_factor)
        penalty_weight = 0.5 * (1 - connectivity) * (1 - visited_ratio)

        distance_component = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance
        centrality_component = centrality_weight * node_centrality
        penalty_component = 1 + penalty_weight * (immediate_distance / (avg_distance + 1e-6))

        score = distance_component + centrality_component * penalty_component

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
