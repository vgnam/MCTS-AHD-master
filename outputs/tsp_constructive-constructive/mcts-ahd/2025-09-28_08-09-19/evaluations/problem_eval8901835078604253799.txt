def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to remaining nodes, excluding current node
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Dynamic weight factor based on remaining nodes and a penalty for revisiting nodes
        weight_factor = (remaining_nodes / total_nodes) ** 2
        revisit_penalty = 0.5 if node in unvisited_nodes else 0

        # Novel score calculation combining local and global factors
        local_factor = distance_to_current + revisit_penalty
        global_factor = (distance_to_current + distance_to_destination) / (1 + avg_distance_to_unvisited)

        score = (1 - weight_factor) * local_factor + weight_factor * global_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
