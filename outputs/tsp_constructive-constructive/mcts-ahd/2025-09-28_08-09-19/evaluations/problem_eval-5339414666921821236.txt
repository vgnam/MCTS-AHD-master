def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            centrality = 0
        else:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        max_distance = max(distance_to_current, centrality, 1.0)
        normalized_current = distance_to_current / max_distance
        normalized_centrality = centrality / max_distance

        score = (normalized_current * (1.0 - temperature)) + (normalized_centrality * temperature)
        scores.append((node, score))

    if not scores:
        return destination_node

    exp_scores = [math.exp(-score[1] / temperature) for score in scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [exp_score / sum_exp_scores for exp_score in exp_scores]

    next_node = random.choices([score[0] for score in scores], weights=probabilities, k=1)[0]

    return next_node
