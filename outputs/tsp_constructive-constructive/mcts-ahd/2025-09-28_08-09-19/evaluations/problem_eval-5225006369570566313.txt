def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes
    time_decay = 1 - (progress ** 2)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        centrality = avg_distance
        exploration_factor = (1 - progress) * (centrality / (1 + distance_to_current))

        immediate_weight = 0.3 - 0.1 * progress
        future_weight = 0.5 + 0.2 * progress
        proximity_weight = 0.2 * (1 - progress)

        proximity_penalty = 0.3 * (1 - progress) * (distance_to_destination / (1 + distance_to_current))

        score = (immediate_weight * (1 / (1 + distance_to_current)) +
                 future_weight * exploration_factor -
                 proximity_weight * proximity_penalty)

        if len(unvisited_nodes) > 1:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            weight_factor = 0.5 + 0.5 * (1 - progress)
            penalty = 1 + (avg_neighbor_distance / (distance_to_current + 1e-6)) * time_decay

            score = weight_factor * score + (1 - weight_factor) * avg_neighbor_distance
            score *= penalty

            if len(nearest_neighbors) >= 2:
                second_nearest = nearest_neighbors[1]
                score += 0.2 * distance_matrix[node][second_nearest]

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
