def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for candidate in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][candidate]
        centrality = sum(distance_matrix[candidate][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        local_density = sum(1 for n in unvisited_nodes if distance_matrix[candidate][n] < 0.75 * centrality)
        outlier_resistance = 1.0 + (local_density / (len(unvisited_nodes) + 1)) * 0.3

        connectivity_factor = 1.0 + (len(unvisited_nodes) / (len(unvisited_nodes) + 1)) * (1.0 + (local_density / (len(unvisited_nodes) + 1)) * 0.5)

        proximity_weight = 0.4
        centrality_weight = 0.3
        connectivity_weight = 0.3

        score = (proximity_weight * distance_to_current +
                centrality_weight * centrality +
                connectivity_weight * (distance_to_current * connectivity_factor)) * outlier_resistance

        if score > best_score:
            best_score = score
            next_node = candidate

    return next_node
