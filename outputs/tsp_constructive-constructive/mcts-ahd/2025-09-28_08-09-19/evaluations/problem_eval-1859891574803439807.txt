def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            node_centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0
            connectivity = 0
            node_centrality = 0

        diversity_factor = len({distance_matrix[node][n] for n in remaining_nodes}) / len(remaining_nodes) if remaining_nodes else 0
        potential_factor = (1.0 + (connectivity / (total_nodes - 1)) * (0.5 + 0.3 * visited_ratio)) * diversity_factor

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        potential_paths = []
        if remaining_nodes:
            for n1 in remaining_nodes:
                remaining_after_first = remaining_nodes - {n1}
                if remaining_after_first:
                    for n2 in remaining_after_first:
                        potential_paths.append((n1, n2, distance_matrix[node][n1] + distance_matrix[n1][n2]))
        avg_potential = sum(p[2] for p in potential_paths) / len(potential_paths) if potential_paths else 0

        immediate_weight = 0.5 - 0.2 * visited_ratio
        potential_weight = 0.3 + 0.2 * visited_ratio
        diversity_weight = 0.2 * (1 - visited_ratio)

        score = immediate_weight * immediate_distance + potential_weight * (avg_potential / (1 + diversity_factor))
        score += diversity_weight * (1 - diversity_factor) * node_centrality
        penalty = 1 + (0.4 * avg_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio)
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
