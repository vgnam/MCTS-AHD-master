def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    decay_factor = 0.6  # Reduces influence of current distance
    growth_factor = 1.3  # Emphasizes influence of destination distance
    normalization_factor = 1.0 / (len(unvisited_nodes) ** 0.5)  # Dynamic normalization

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = (distance_to_current ** decay_factor) + (distance_to_destination ** growth_factor)
        score *= normalization_factor  # Adjusts for tour progress

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
