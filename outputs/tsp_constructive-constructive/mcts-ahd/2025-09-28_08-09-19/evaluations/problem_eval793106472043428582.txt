def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    decay_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Dynamic decay

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting and penalty for revisits
        weighted_score = (0.6 * decay_factor + 0.4) * distance_to_current + \
                         (0.4 * decay_factor + 0.6) * distance_to_destination

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
