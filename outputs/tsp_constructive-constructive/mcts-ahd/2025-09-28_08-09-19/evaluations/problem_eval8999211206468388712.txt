def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * 0.5

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            lookahead_depth = min(5, remaining_nodes // 3) if remaining_nodes > 3 else 1
            lookahead_distance = 0
            temp_unvisited = unvisited_nodes - {node}
            current = node

            for _ in range(lookahead_depth):
                if not temp_unvisited:
                    break
                next_candidate = min(temp_unvisited, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                temp_unvisited -= {next_candidate}

            node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            popularity = 1.0 / (1.0 + 2 * node_centrality)

            immediate_weight = 0.5
            lookahead_weight = 0.3 * (1.0 - exploration_factor)
            popularity_weight = 0.2 * exploration_factor

            score = immediate_weight * distance_to_current + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) + popularity_weight * popularity + 0.2 * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
