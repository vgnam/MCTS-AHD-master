def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    time_decay = 1 - (visited_ratio ** 2)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_all)
        connectivity_weight = 1.0 + (1.0 - (remaining_nodes / total_nodes)) * (connectivity / (total_nodes - 1)) * 0.5

        nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        proximity_potential = distance_to_current + 0.7 * avg_distance_to_all
        connectivity_penalty = 1.0 - (connectivity / (total_nodes - 1)) * 0.3

        score = proximity_potential * connectivity_weight * connectivity_penalty
        score *= 1 + (avg_neighbor_distance / (distance_to_current + 1e-6)) * time_decay

        if len(nearest_neighbors) >= 2:
            second_nearest = nearest_neighbors[1]
            score += 0.2 * distance_matrix[node][second_nearest]

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
