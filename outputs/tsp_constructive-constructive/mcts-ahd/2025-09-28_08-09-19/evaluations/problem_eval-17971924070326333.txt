import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 1.0 - (remaining_count / total_nodes) * 0.9
    exploitation_factor = 1.0 - exploration_factor

    scores = []
    nodes = list(unvisited_nodes)

    for node in nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.1 * avg_distance)
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity = 0

        lookahead_depth = min(2, remaining_count // 3) if remaining_count > 1 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        distance_weight = exploitation_factor * 0.7 + exploration_factor * 0.3
        centrality_weight = 0.3 * exploitation_factor
        connectivity_bonus = connectivity / (len(remaining_nodes) + 1e-6)

        novelty_factor = math.exp(-0.1 * (sum(distance_matrix[node][n] for n in nodes) / len(nodes)))
        proximity_penalty = 1.0 + (0.5 * avg_neighbor_distance / (immediate_distance + 1e-6)) * exploration_factor

        score = (distance_weight * immediate_distance) - (centrality_weight * node_centrality) + (0.4 * connectivity_bonus) + (0.2 * novelty_factor)
        score *= proximity_penalty

        scores.append((node, score))

    if random.random() < exploration_factor * 0.5:
        selected = random.choice(nodes)
    else:
        selected = min(scores, key=lambda x: x[1])[0]

    return next_node
