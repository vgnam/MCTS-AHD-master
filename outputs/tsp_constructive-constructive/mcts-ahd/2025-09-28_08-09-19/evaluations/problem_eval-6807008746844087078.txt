def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)
    candidates = []
    weights = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        potential_reduction = distance_to_current - avg_distance
        total_cost = distance_to_current + (potential_reduction * temperature)

        candidates.append(node)
        weights.append(1.0 / total_cost if total_cost != 0 else float('inf'))

    if not candidates:
        return destination_node

    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    next_node = np.random.choice(candidates, p=normalized_weights)

    return next_node
