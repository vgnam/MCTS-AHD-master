def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    decay_factor = 0.7
    remaining_ratio = len(unvisited_nodes) / (len(distance_matrix) - 1)
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        dynamic_weight = 1.0 - remaining_ratio
        weighted_destination = distance_to_destination * (1 + dynamic_weight)

        penalty = max(0, (distance_to_current - 2 * current_to_dest) * (1 + dynamic_weight))

        score = distance_to_current * (weighted_destination ** decay_factor) + penalty
        scores.append((node, score))

    if not scores:
        return destination_node

    min_score = min(score[1] for score in scores)
    max_score = max(score[1] for score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score)) for node, score in scores]

    total_weight = sum(weight for _, weight in normalized_scores)
    rand_val = random.random() * total_weight
    cumulative_weight = 0.0

    for node, weight in normalized_scores:
        cumulative_weight += weight
        if rand_val <= cumulative_weight:
            return node

    return next_node
