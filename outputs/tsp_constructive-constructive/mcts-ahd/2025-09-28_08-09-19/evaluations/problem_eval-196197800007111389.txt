def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_future_distance = sum(future_distances) / (remaining_nodes - 1)
            variance_future_distance = sum((d - avg_future_distance) ** 2 for d in future_distances) / (remaining_nodes - 1)
            risk_factor = variance_future_distance / (avg_future_distance + 1e-6)

            predicted_path_cost = distance_to_current + 0.6 * avg_future_distance + 0.4 * distance_to_destination

            if distance_to_destination == 0:
                ratio = float('inf')
            else:
                ratio = distance_to_current / distance_to_destination

            dynamic_weight = 0.4 + 0.6 * (remaining_nodes / (remaining_nodes + 2))
            exploration_weight = 0.3 * (1 - risk_factor)

            score = (1 - dynamic_weight - exploration_weight) * ratio + dynamic_weight * predicted_path_cost + exploration_weight * risk_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
