def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.6
    decay_factor = 0.6 + 0.2 * exploration_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        penalty_weight = 0.5 * (1.0 - exploration_factor)
        penalty = penalty_weight * (distance_to_destination + 0.5 * node_centrality)
        score = distance_to_current * (distance_to_destination ** decay_factor) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
