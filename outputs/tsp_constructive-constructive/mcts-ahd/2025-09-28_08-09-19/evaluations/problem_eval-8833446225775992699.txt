def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_progress = 1.0 - (remaining_count / total_nodes) ** 2

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Dynamic connectivity analysis
        connectivity_radius = 1.0 + (remaining_count / total_nodes) * 0.5
        connectivity_count = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < connectivity_radius * immediate_distance)
        connectivity_density = connectivity_count / (total_nodes - 1)

        # Adaptive penalty system
        penalty_factor = 1.0 + (0.5 * connectivity_density * exploration_progress)
        penalty = immediate_distance * penalty_factor

        # Global centrality metric
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality_score = avg_remaining_distance * (1.0 + 0.3 * connectivity_density)
        else:
            centrality_score = 0

        # Weighted composite score
        distance_weight = 0.5 + 0.4 * exploration_progress
        centrality_weight = 0.4 * (1.0 - exploration_progress)

        score = distance_weight * penalty + centrality_weight * centrality_score

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
