def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    node_centrality = {}

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            connectivity_factor = 1.0 + (connectivity / remaining_count) * 0.4

            lookahead_depth = min(4, remaining_count // 3) if remaining_count > 3 else 1
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            node_centrality[node] = connectivity / len(remaining_nodes)

            immediate_weight = 0.6 * (1 - (remaining_count / total_nodes) * 0.4)
            connectivity_weight = 0.5 * (1 - (remaining_count / total_nodes) * 0.2)

            score = immediate_weight * (immediate_distance - avg_distance) + connectivity_weight * (immediate_distance * connectivity_factor)
            penalty = 1 + (0.4 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - (remaining_count / total_nodes))
            score *= penalty * (1 - node_centrality[node] * 0.5)
        else:
            score = immediate_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
