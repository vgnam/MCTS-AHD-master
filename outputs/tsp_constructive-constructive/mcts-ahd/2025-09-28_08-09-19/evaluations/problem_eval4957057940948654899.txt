def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            avg_future_distance = 0
        else:
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)

        if distance_to_destination == 0:
            ratio = float('inf')
        else:
            ratio = distance_to_current / distance_to_destination

        dynamic_weight = 0.4 * (1 - 0.1 * (10 - min(remaining_nodes, 10)))
        penalty = 0.5 * distance_to_current if distance_to_current > 1.5 * avg_future_distance else 0

        score = ratio + dynamic_weight * (distance_to_current + avg_future_distance) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
