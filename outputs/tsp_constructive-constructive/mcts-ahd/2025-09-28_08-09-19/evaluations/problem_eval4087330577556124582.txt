def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Adaptive lookahead depth based on remaining nodes
        lookahead_depth = min(2, remaining_nodes_count // 3 + 1)
        lookahead_distance = 0

        if remaining_nodes_count > 1:
            # Multi-step lookahead with dynamic depth
            temp_unvisited = unvisited_nodes - {node}
            current = node
            for _ in range(lookahead_depth):
                if not temp_unvisited:
                    break
                next_candidate = min(temp_unvisited, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                temp_unvisited -= {next_candidate}

        # Dynamic weighting factor based on remaining path length
        weighting_factor = 0.5 * (1 - 0.2 * (remaining_nodes_count / len(distance_matrix)))
        score = immediate_distance + weighting_factor * lookahead_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
