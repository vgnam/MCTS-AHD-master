def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.5 * (1.0 - (remaining_nodes / (remaining_nodes + 1)))
    centrality_weight = 0.3 * (1.0 + exploration_factor)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        normalized_centrality = 1.0 / (1.0 + centrality)

        immediate_weight = 0.4
        future_weight = 0.3 * (1.0 - exploration_factor)
        penalty_weight = 0.3 * (1.0 + exploration_factor)

        penalty = penalty_weight * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0

        max_distance = max(distance_to_current, distance_to_destination, 1.0)
        normalized_current = distance_to_current / max_distance
        normalized_future = avg_future_distance / max_distance if avg_future_distance > 0 else 0

        sigmoid = 1.0 / (1.0 + math.exp(-5.0 * (normalized_future - 0.5)))
        decayed_future = normalized_future * (1.0 - sigmoid)

        score = (immediate_weight * normalized_current + future_weight * decayed_future + centrality_weight * normalized_centrality) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
