def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    dynamic_weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Adapts based on remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic scoring with exponential decay and logarithmic scaling
        current_score = (distance_to_current ** 0.5) * dynamic_weight
        dest_score = math.log(distance_to_destination + 1) * (1 - dynamic_weight)
        score = current_score + dest_score

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
