def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    exploration_ratio = len(unvisited_nodes) / total_nodes
    exploitation_weight = 1 - exploration_ratio

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        base_score = distance_to_current - avg_distance

        if len(unvisited_nodes) > 1:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            novelty_score = (avg_neighbor_distance / (distance_to_current + 1e-6)) ** (1 - exploitation_weight)
            base_score *= novelty_score

            if len(nearest_neighbors) >= 2:
                second_nearest = nearest_neighbors[1]
                base_score += 0.3 * distance_matrix[node][second_nearest]

        exploration_bias = exploration_ratio * 0.5
        exploitation_bias = exploitation_weight * 0.5
        final_score = base_score * (1 + exploration_bias - exploitation_bias)

        if final_score < min_score:
            min_score = final_score
            next_node = node

    return next_node
