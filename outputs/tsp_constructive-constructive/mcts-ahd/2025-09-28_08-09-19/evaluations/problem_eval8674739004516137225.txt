def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    # Dynamic weight adjustment based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    immediate_weight = 0.7 + 0.1 * remaining_ratio  # Increases as tour progresses
    lookahead_weight = 0.3 - 0.1 * remaining_ratio  # Decreases as tour progresses

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Limited-depth lookahead (2 steps ahead)
        remaining_nodes = unvisited_nodes - {node}
        lookahead_distance = 0
        if remaining_nodes:
            next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
            lookahead_distance = distance_matrix[node][next_candidate]

        # Global connectivity: average distance to nearby nodes
        nearby_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(unvisited_nodes))]
        avg_nearby_distance = sum(distance_matrix[node][n] for n in nearby_nodes) / len(nearby_nodes) if nearby_nodes else 0

        # Dynamic weight balance
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance + avg_nearby_distance)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
