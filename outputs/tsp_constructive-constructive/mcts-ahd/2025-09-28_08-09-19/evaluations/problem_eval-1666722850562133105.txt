def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = max(0.1, 1.0 - (remaining_nodes / (remaining_nodes + 1)))
    exploitation_weight = 1.0 - exploration_weight

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        destination_distance = distance_matrix[node][destination_node]

        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        score = (exploration_weight * (1.0 / (1.0 + immediate_distance)) +
                 exploitation_weight * (future_potential / (1.0 + destination_distance)) -
                 0.2 * centrality_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
