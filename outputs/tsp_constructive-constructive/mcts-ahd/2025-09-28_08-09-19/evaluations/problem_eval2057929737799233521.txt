def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        else:
            avg_distance = 0
            connectivity = 0

        centrality_score = (connectivity / remaining_count) if remaining_count > 0 else 0
        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.5 - 0.2 * visited_ratio
        centrality_weight = 0.3 + 0.2 * (1 - visited_ratio)
        connectivity_weight = 0.2 * (1 - visited_ratio)

        base_score = (immediate_weight * immediate_distance +
                      centrality_weight * (1 / (centrality_score + 1e-6)) +
                      connectivity_weight * (1 / (avg_neighbor_distance + 1e-6)))

        exploration_bonus = (0.5 * (1 - visited_ratio) * (connectivity / (remaining_count + 1e-6)))
        final_score = base_score * (1 - exploration_bonus)

        candidates.append((node, final_score))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        return candidates[0][0]
    else:
        return next_node
