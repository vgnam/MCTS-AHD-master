def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate node degrees (connectivity)
    node_degrees = {node: sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * distance_matrix[current_node][node]) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Adaptive weights based on node degrees and remaining nodes
            degree_weight = node_degrees[node] / (remaining_nodes - 1) if remaining_nodes > 1 else 0
            distance_weight = 1.0 / (1.0 + distance_to_current)  # Inverse distance preference
            learning_rate = 0.1 + 0.9 * (1.0 - remaining_nodes / total_nodes)  # Higher learning rate when few nodes left

            # Dynamic weight adjustment
            immediate_weight = 0.5 * (1.0 - learning_rate) + 0.3 * degree_weight
            distance_weight = 0.4 * (1.0 - learning_rate) + 0.2 * distance_weight
            connectivity_weight = 0.1 * learning_rate

            # Reinforcement learning-inspired bias
            bias = 0.5 * (degree_weight + distance_weight) * learning_rate

            score = (immediate_weight * distance_to_current +
                     distance_weight * distance_to_destination +
                     connectivity_weight * (1.0 - degree_weight)) - bias

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
