def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)

    # Track recent distances to compute rolling average
    recent_distances = []
    if hasattr(distance_matrix, 'recent_distances'):
        recent_distances = distance_matrix.recent_distances
    else:
        distance_matrix.recent_distances = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Get top 5 nearest neighbors (or all if fewer than 5)
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(5, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            # Compute variance of neighbor distances
            neighbor_distances = [distance_matrix[node][n] for n in nearest_neighbors]
            variance = sum((d - avg_neighbor_distance) ** 2 for d in neighbor_distances) / len(neighbor_distances) if neighbor_distances else 0

            # Compute rolling average of recent distances (last 3 steps)
            if recent_distances:
                rolling_avg = sum(recent_distances[-3:]) / min(3, len(recent_distances))
            else:
                rolling_avg = distance_to_current

            # Dynamic weighting based on exploration phase
            proximity_weight = 0.7 - 0.5 * visited_ratio
            cost_weight = 1 - proximity_weight

            # Combine factors with connectivity penalty
            predicted_path_cost = proximity_weight * distance_to_current + cost_weight * avg_neighbor_distance
            connectivity_penalty = 1 + 0.3 * (variance / (avg_neighbor_distance + 1e-6))

            score = predicted_path_cost * connectivity_penalty + 0.3 * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    # Update recent distances
    if next_node is not None:
        distance_matrix.recent_distances.append(distance_matrix[current_node][next_node])

    return next_node
