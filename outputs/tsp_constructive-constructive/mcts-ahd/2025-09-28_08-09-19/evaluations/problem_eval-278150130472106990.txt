def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Fixed threshold for connectivity
    connectivity_threshold = 1.2 * (sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        # Global connectivity: nodes with many unvisited neighbors within threshold
        global_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= connectivity_threshold)

        # Average distance to remaining nodes (excluding current)
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_remaining_distance = sum(remaining_distances) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Proximity weight: moderate emphasis
        proximity_weight = 1.0 + (1.0 / (distance_to_current + 1e-6)) * 0.5

        # Efficiency penalty: stronger for nodes increasing average distance
        efficiency_penalty = 1.0 - 0.5 * (avg_remaining_distance / (distance_to_current + 1e-6))

        # Combined score: prioritizes global connectivity, balances proximity, penalizes efficiency
        score = global_connectivity * proximity_weight * efficiency_penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
