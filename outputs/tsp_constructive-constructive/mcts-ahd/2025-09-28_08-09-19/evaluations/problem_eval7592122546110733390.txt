def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0
    temperature = max(1.0, len(unvisited_nodes) ** 0.5)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        dynamic_weight = 1 / (len(unvisited_nodes) ** 0.5)
        score = (1 - dynamic_weight) * distance_to_current + dynamic_weight * avg_distance
        probability_score = math.exp(-score / temperature)
        scores.append((node, probability_score))
        total_score += probability_score

    if total_score == 0:
        return random.choice(unvisited_nodes)

    normalized_scores = [(node, score / total_score) for node, score in scores]
    r = random.random()
    cumulative_prob = 0.0

    for node, prob in normalized_scores:
        cumulative_prob += prob
        if r <= cumulative_prob:
            return node

    return next_node
