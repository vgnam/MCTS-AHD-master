def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_count / (remaining_count + 1)) * 0.9)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
        else:
            node_centrality = 0

        immediate_weight = 0.6 + 0.3 * temperature
        centrality_weight = 0.4 * (1.0 - temperature)

        score = (immediate_weight * immediate_distance +
                 centrality_weight * node_centrality +
                 (1 - immediate_weight - centrality_weight) * distance_to_destination)
        scores.append((node, score))

    if not scores:
        return destination_node

    nodes, scores = zip(*scores)
    exp_scores = [math.exp(s / temperature) for s in scores]
    total = sum(exp_scores)
    probabilities = [s / total for s in exp_scores]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
