def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    path_length = total_nodes - remaining_count

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            density_penalty = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 0.8 * avg_distance)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * avg_distance)
        else:
            avg_distance = 0
            density_penalty = 0
            connectivity = 0

        lookahead_depth = min(2, remaining_count // 3) if remaining_count > 1 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        distance_weight = 0.6 - 0.2 * (path_length / total_nodes)
        density_weight = 0.2 * (1 - (path_length / total_nodes))
        connectivity_weight = 0.2 + 0.1 * (path_length / total_nodes)

        score = distance_weight * immediate_distance + density_weight * density_penalty + connectivity_weight * connectivity
        penalty = 1 + (0.5 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - (path_length / total_nodes))
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
