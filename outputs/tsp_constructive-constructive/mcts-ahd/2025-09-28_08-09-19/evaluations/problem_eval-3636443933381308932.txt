def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    scores = []
    nodes = list(unvisited_nodes)

    for node in nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity = 0

        lookahead_depth = min(4, max(1, int(remaining_count * (0.4 + 0.6 * visited_ratio))))
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.5 - 0.2 * visited_ratio
        centrality_weight = 0.3 * (1.0 - visited_ratio)
        connectivity_weight = 0.2 * (1.0 - visited_ratio)

        score = (immediate_weight * immediate_distance +
                 centrality_weight * node_centrality +
                 connectivity_weight * (connectivity * avg_neighbor_distance))
        scores.append(score)

    if not scores:
        return destination_node

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]

    total_weight = sum(normalized_scores)
    selection_prob = [w / total_weight for w in normalized_scores]
    next_node = nodes[np.random.choice(len(nodes), p=selection_prob)]

    return next_node
