def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.5
    dynamic_weight = 1.0 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        probability = (1 / (distance_to_current + 1e-6)) * (avg_distance + 1e-6)
        weighted_score = (base_weight * probability) + ((1 - base_weight) * dynamic_weight * avg_distance)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
