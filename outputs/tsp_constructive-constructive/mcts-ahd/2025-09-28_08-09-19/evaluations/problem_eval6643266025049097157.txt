def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in range(total_nodes)) / (total_nodes - 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = -(distance_to_current + distance_to_destination)
        else:
            # Dynamic adjustment factor based on path progress
            progress_factor = 1 - (remaining_nodes / (remaining_nodes + 1)) ** 2
            local_weight = 0.8 * (1 - progress_factor) + 0.2

            # Calculate probabilistic score component
            prob_factor = (centrality[node] / max(centrality.values())) if centrality[node] > 0 else 0.5

            # Combined score with non-linear weight
            score = (local_weight * distance_to_current +
                    (1 - local_weight) * (0.6 * distance_to_destination + 0.4 * centrality[node])) * (1 - prob_factor)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
