def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    progress_factor = 1.0 - (remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node degree and connectivity pressure
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        connectivity_pressure = (degree ** 2) / (total_nodes ** 2) * 0.9

        # Dynamic weights with stronger emphasis on centrality and proximity penalty
        immediate_weight = 0.5 * (1.0 - progress_factor)
        centrality_weight = 0.4 + progress_factor * connectivity_pressure
        proximity_penalty = 1.2 * progress_factor * (1.0 / (1.0 + distance_to_destination))

        # Calculate total score with novel connectivity pressure
        score = (-distance_to_current * immediate_weight) + (connectivity_pressure * centrality_weight) - proximity_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
