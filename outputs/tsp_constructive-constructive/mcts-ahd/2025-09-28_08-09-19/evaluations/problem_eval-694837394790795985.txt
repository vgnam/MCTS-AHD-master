def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic centrality bonus: reward nodes with high average distance to other unvisited nodes
        centrality_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        # Fixed weighting scheme: prioritize immediate distance and destination proximity
        score = (0.6 * (1.0 / (1.0 + immediate_distance)) +
                 0.3 * (1.0 / (1.0 + destination_distance)) +
                 0.1 * centrality_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
