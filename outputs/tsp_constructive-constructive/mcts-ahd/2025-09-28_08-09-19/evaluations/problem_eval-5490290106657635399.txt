def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    weight_factor = 1.0 / (1.0 + remaining_nodes ** 2)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            ratio = float('inf')
        else:
            ratio = distance_to_current / distance_to_destination

        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_all)
        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.3

        weighted_score = (0.6 * (1 - weight_factor) * ratio) + (0.4 * weight_factor * avg_distance_to_all)
        score = weighted_score * connectivity_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
