def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    visited_nodes = total_nodes - remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance_to_all = sum(distances_to_unvisited) / len(unvisited_nodes) if unvisited_nodes else 0
        variance = sum((d - avg_distance_to_all) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes) if unvisited_nodes else 0

        variance_penalty = 1.0 + (variance / (avg_distance_to_all + 1e-6)) * 0.3
        max_reduction = max(distance_matrix[node][n] for n in unvisited_nodes) if unvisited_nodes else 0
        heuristic_weight = 1.0 + (visited_nodes / total_nodes) * (1.0 + (max_reduction / (avg_distance_to_all + 1e-6)) * 0.2)

        score = (distance_to_current + avg_distance_to_all) * heuristic_weight * variance_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
