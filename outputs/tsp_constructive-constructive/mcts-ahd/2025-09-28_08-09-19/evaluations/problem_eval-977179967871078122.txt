def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_pressure = (remaining_count ** 1.5) / (remaining_count + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        lookahead_depth = min(4, max(1, remaining_count // 3)) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x] * (1 + exploration_pressure/2))
                lookahead_distance += distance_matrix[current][next_candidate] * (1 + exploration_pressure/3)
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        popularity = 1.0 / (1.0 + 1.5 * node_centrality)
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.4 + 0.2 * (1 - exploration_pressure)
        lookahead_weight = 0.3 * (1 - exploration_pressure) + 0.2 * exploration_pressure
        popularity_weight = 0.2 + 0.1 * exploration_pressure
        penalty_weight = 0.3 * (1 + exploration_pressure)

        ideal_path_deviation = abs(distance_matrix[current_node][node] - (distance_matrix[current_node][destination_node] / (remaining_count + 1)))
        penalty = penalty_weight * (distance_to_destination + 0.4 * node_centrality + 0.3 * ideal_path_deviation)

        score = (immediate_weight * immediate_distance +
                 lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) +
                 popularity_weight * popularity) - penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
