def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) == 1:
            score = distance_to_current + distance_to_destination
        else:
            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[node][x] if x != node else float('inf'))
            nearest_distance = distance_matrix[node][nearest_node]
            lookahead_score = nearest_distance + distance_matrix[nearest_node][destination_node]

            revisit_penalty = 0.5 if node in [current_node] else 0.0

            immediate_weight = 0.6
            lookahead_weight = 0.4

            score = immediate_weight * distance_to_current + lookahead_weight * lookahead_score + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
