def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate betweenness centrality for each unvisited node
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < max(distance_matrix[node]) * 0.7)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = -distance_to_current - distance_to_destination
        else:
            # Local path cost
            local_cost = 0.6 * distance_to_current + 0.4 * distance_to_destination

            # Global path cost based on centrality
            global_cost = centrality[node] * (remaining_nodes / (remaining_nodes + 2))

            # Dynamic weight adjustment
            weight_factor = 0.4 + 0.6 * (1 - remaining_nodes / len(unvisited_nodes))

            # Boltzmann probability
            temperature = 1.0 / (1 + remaining_nodes)
            score = (weight_factor * local_cost + (1 - weight_factor) * global_cost) * (1 + temperature * (0.5 - random.random()))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
