def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 0.5 + (remaining_count / total_nodes) * 0.3

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            proximity_threshold = 1.5 * avg_distance
        else:
            avg_distance = 0
            node_centrality = 0
            proximity_threshold = 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < proximity_threshold)
        connectivity_factor = 1.0 + (connectivity / (remaining_count + 1)) * 0.5

        immediate_weight = 0.5 * (1 - exploration_factor)
        lookahead_weight = 0.4 * (1 + exploration_factor)
        penalty_weight = 0.1 * (1 - (remaining_count / total_nodes))

        score = immediate_weight * immediate_distance + lookahead_weight * (immediate_distance * connectivity_factor)
        penalty = 1 + (0.5 * (connectivity / (remaining_count + 1))) * (1 - (remaining_count / total_nodes))
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
