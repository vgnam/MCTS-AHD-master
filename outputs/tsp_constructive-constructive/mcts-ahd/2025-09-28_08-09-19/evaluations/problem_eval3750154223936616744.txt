def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Extended-depth lookahead (3 steps ahead)
        remaining_nodes = unvisited_nodes - {node}
        lookahead_distance = 0
        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
            if len(remaining_nodes - {next_candidate}) > 0:
                second_candidate = min(remaining_nodes - {next_candidate}, key=lambda x: distance_matrix[next_candidate][x])
                lookahead_distance = distance_matrix[node][next_candidate] + distance_matrix[next_candidate][second_candidate]

        # Global connectivity: average distance to nearby nodes
        nearby_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(unvisited_nodes))]
        avg_nearby_distance = sum(distance_matrix[node][n] for n in nearby_nodes) / len(nearby_nodes) if nearby_nodes else 0

        # Penalize isolated nodes
        isolation_penalty = 1.0 if len(nearby_nodes) < 2 else 0.0

        # Balance immediate distance (60%) and global connectivity (40%)
        score = 0.6 * immediate_distance + 0.4 * (lookahead_distance + avg_nearby_distance) + isolation_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
