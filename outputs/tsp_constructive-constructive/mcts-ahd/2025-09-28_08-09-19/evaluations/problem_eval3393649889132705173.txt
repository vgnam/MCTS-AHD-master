def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))
    weight_immediate = 1.0 - progress_factor
    weight_centrality = progress_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        centrality_score = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        max_distance = max(distance_to_current, avg_distance, centrality_score, 1.0)
        normalized_current = distance_to_current / max_distance
        normalized_avg = avg_distance / max_distance
        normalized_centrality = centrality_score / max_distance

        score = (weight_immediate * normalized_current) + (weight_centrality * normalized_centrality * normalized_avg)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
