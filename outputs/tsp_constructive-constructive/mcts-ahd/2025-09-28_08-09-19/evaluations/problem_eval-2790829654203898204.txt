def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    current_path_efficiency = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    # Calculate node centrality as average distance to all other unvisited nodes
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0

    # Calculate reinforcement factor based on historical performance
    reinforcement_factor = 0.3 + 0.7 * (1.0 - (remaining_nodes / total_nodes))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = centrality[node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic selection probability
        selection_prob = (1.0 / (1.0 + immediate_distance)) * (1.0 / (1.0 + destination_distance)) * (1.0 - (centrality[node] / max(centrality.values()) if centrality else 1.0))

        # Adaptive efficiency factor
        efficiency_factor = 0.4 + 0.6 * (1.0 - (current_path_efficiency / (sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m) / (len(unvisited_nodes) * (len(unvisited_nodes) - 1)) if len(unvisited_nodes) > 1 else 1)))

        # Complexity-aware factor
        complexity_factor = (remaining_nodes / total_nodes) ** 0.5 * (1.0 - (centrality[node] / max(centrality.values()) if centrality else 1.0))

        # Combined score with reinforcement
        score = (efficiency_factor * selection_prob) + (1.0 - efficiency_factor) * (future_potential * complexity_factor) * reinforcement_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
