def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            predicted_path_cost = distance_to_current + 0.6 * avg_future_distance + 0.4 * distance_to_destination

            if distance_to_destination == 0:
                ratio = float('inf')
            else:
                ratio = distance_to_current / distance_to_destination

            diversity_penalty = 1.0 / (1.0 + distance_to_current)
            local_weight = 0.3 + 0.7 * (remaining_nodes / total_nodes)
            score = local_weight * ratio + (1 - local_weight) * predicted_path_cost + diversity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
