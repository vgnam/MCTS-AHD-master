def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    immediate_weight = 0.6 * (1 - progress * progress)
    future_weight = 0.3 * (progress * progress)
    significance_weight = 0.1 + 0.2 * progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        avg_neighbor_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        node_significance = (1 / (1 + distance_to_current)) * (1 / (1 + avg_neighbor_distance)) * (1 / (1 + distance_to_destination))

        immediate_score = immediate_weight * distance_to_current
        future_score = future_weight * avg_neighbor_distance
        significance_score = significance_weight * node_significance

        total_score = immediate_score + future_score + significance_score

        if total_score < best_score:
            best_score = total_score
            next_node = node

    return next_node
