def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    # Historical deviation tracking
    historical_distances = [distance_matrix[current_node][n] for n in unvisited_nodes if n in unvisited_nodes]
    avg_historical = sum(historical_distances) / len(historical_distances) if historical_distances else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        # Dynamic deviation penalty
        deviation_penalty = 1.0 + (immediate_distance / (avg_historical + 1e-6) - 1.0) * 0.5

        # Connectivity and symmetry scoring
        avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
        connectivity_bonus = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.1 * avg_distance) / remaining_count
        symmetry_penalty = 1.0 + (max(distance_matrix[node][n] for n in remaining_nodes) - min(distance_matrix[node][n] for n in remaining_nodes)) / (avg_distance + 1e-6)

        # Dynamic weight adjustment
        connectivity_weight = 0.3 + (0.5 * (remaining_count / total_nodes))
        symmetry_weight = 0.2 + (0.3 * (remaining_count / total_nodes))

        # Combined score
        score = (immediate_distance * deviation_penalty) + (1.0 - connectivity_bonus) * connectivity_weight + symmetry_penalty * symmetry_weight

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
