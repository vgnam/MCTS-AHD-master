def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    visited_ratio = 1 - (remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        if remaining_nodes > 1:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, remaining_nodes)]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            connectivity_weight = 1.0 + (1.0 - visited_ratio) * (0.5 / (total_nodes - 1)) * sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_unvisited)

            weight_factor = 0.5 + 0.5 * (1 - visited_ratio)
            score = weight_factor * (distance_to_current - avg_distance_to_unvisited) + (1 - weight_factor) * avg_neighbor_distance

            if avg_neighbor_distance > 1.5 * distance_to_current:
                score *= 1.1

            score *= connectivity_weight
        else:
            score = distance_to_current

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
