def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_count = len(unvisited_nodes)
    lookahead_depth = min(5, max(2, remaining_count // 2))

    # Calculate centrality and diversity metrics
    centrality_scores = {}
    diversity_scores = {}
    for node in unvisited_nodes:
        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * sum(distance_matrix[node][m] for m in unvisited_nodes) / remaining_count)
        centrality_scores[node] = centrality
        diversity_scores[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_count

    # Normalize scores
    max_centrality = max(centrality_scores.values()) if centrality_scores else 1
    max_diversity = max(diversity_scores.values()) if diversity_scores else 1

    # Calculate historical performance weights
    history_weight = 0.3 if remaining_count > len(unvisited_nodes) // 2 else 0.1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        # Centrality factor (normalized)
        normalized_centrality = centrality_scores[node] / max_centrality if max_centrality else 0

        # Diversity factor (normalized)
        normalized_diversity = diversity_scores[node] / max_diversity if max_diversity else 0

        # Path quality factor
        avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
        path_quality = 1.0 / (1.0 + avg_remaining_distance)

        # Adaptive weights
        distance_weight = 0.4 + 0.2 * (remaining_count / len(unvisited_nodes))
        centrality_weight = 0.3 + 0.1 * (remaining_count / len(unvisited_nodes))
        diversity_weight = 0.2 + 0.1 * (remaining_count / len(unvisited_nodes))

        # Composite score
        score = (distance_weight * (1.0 / (1.0 + immediate_distance)) +
                 centrality_weight * normalized_centrality +
                 diversity_weight * normalized_diversity +
                 history_weight * path_quality)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
