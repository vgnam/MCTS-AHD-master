def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight based on remaining nodes (quadratic scaling)
        remaining_nodes = len(unvisited_nodes)
        dynamic_weight = 0.1 * (1 - 0.05 * (remaining_nodes ** 2))

        # Quadratic penalty for excessively long distances
        penalty = 0.3 * (distance_to_current ** 2) if distance_to_current > 1.5 * avg_distance else 0

        score = (0.6 * distance_to_current) + (dynamic_weight * avg_distance) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
