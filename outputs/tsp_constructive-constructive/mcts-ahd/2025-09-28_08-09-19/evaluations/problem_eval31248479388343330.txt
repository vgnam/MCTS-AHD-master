def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1.0 - (remaining_nodes / total_nodes)

    # Initialize node probabilities
    node_probs = {node: 0.0 for node in unvisited_nodes}

    # Calculate base scores
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        destination_distance = distance_matrix[node][destination_node]

        # Adaptive weight calculation
        immediate_weight = 0.6 * (1.0 / (1.0 + immediate_distance))
        future_weight = 0.4 * (1.0 / (1.0 + future_potential))
        dest_weight = 0.2 * (1.0 / (1.0 + destination_distance))

        node_probs[node] = immediate_weight + future_weight + dest_weight

    # Normalize probabilities
    total_prob = sum(node_probs.values())
    if total_prob > 0:
        node_probs = {node: prob / total_prob for node, prob in node_probs.items()}

    # Temperature-based probabilistic selection
    if temperature > 0:
        # Apply softmax with temperature
        exp_probs = {node: math.exp(prob / temperature) for node, prob in node_probs.items()}
        sum_exp = sum(exp_probs.values())
        node_probs = {node: exp_prob / sum_exp for node, exp_prob in exp_probs.items()}

    # Select node based on probabilities
    nodes = list(node_probs.keys())
    probs = list(node_probs.values())
    next_node = random.choices(nodes, weights=probs, k=1)[0]

    return next_node
