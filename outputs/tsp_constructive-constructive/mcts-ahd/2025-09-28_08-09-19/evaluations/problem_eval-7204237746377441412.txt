def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic centrality adjustment based on remaining nodes
    exploration_weight = 1.0 / (1.0 + math.exp(-(remaining_nodes - 5)))
    exploitation_weight = 1.0 - exploration_weight

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Proximity variance: measures how spread out the node's connections are
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        proximity_variance = np.var(distances_to_unvisited) if len(distances_to_unvisited) > 1 else 0

        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        destination_distance = distance_matrix[node][destination_node]

        # Adaptive centrality penalty considering both immediate and future centrality
        immediate_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        future_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_penalty = (0.6 * immediate_centrality + 0.4 * future_centrality) * (1.0 / (1.0 + proximity_variance))

        # Sigmoid-weighted scoring system
        score = (exploration_weight * (1.0 / (1.0 + immediate_distance)) +
                 exploitation_weight * (future_potential / (1.0 + destination_distance)) -
                 0.3 * centrality_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
