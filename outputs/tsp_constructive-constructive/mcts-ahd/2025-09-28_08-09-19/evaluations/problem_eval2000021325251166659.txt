def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    time_decay = 1.0 / (1.0 + remaining_nodes ** 1.5)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        local_avg = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        global_avg = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * local_avg) / max(1, len(unvisited_nodes))

        novelty_score = 1.0
        if len(unvisited_nodes) > 2:
            unique_connections = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 1.3 * global_avg)
            novelty_score = 1.0 + (unique_connections / len(unvisited_nodes)) * 0.4

        weighted_distance = (0.6 * (1 - time_decay) * distance_to_current) + (0.4 * time_decay * local_avg)
        score = weighted_distance * (0.7 + 0.3 * connectivity_score) * novelty_score

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
