def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    # Phase-based weight adjustment
    phase = min(2, max(0, (total_nodes - remaining_count) // (total_nodes // 3)))
    if phase == 0:  # Early phase: prioritize immediate distance
        immediate_weight = 0.8
        lookahead_weight = 0.1
        centrality_weight = 0.1
    elif phase == 1:  # Mid phase: balanced approach
        immediate_weight = 0.5
        lookahead_weight = 0.3
        centrality_weight = 0.2
    else:  # Late phase: focus on connectivity
        immediate_weight = 0.3
        lookahead_weight = 0.2
        centrality_weight = 0.5

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Adaptive lookahead depth based on phase
        lookahead_depth = min(3, remaining_count // 2) if phase == 0 else min(2, remaining_count // 3)
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            # Connectivity-aware centrality metric
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_density = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance) / len(remaining_nodes)
            node_centrality = avg_distance * (1 - node_density)
        else:
            avg_distance = 0
            node_centrality = 0

        # Phase-sensitive connectivity factor
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance) if avg_distance > 0 else 0
        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * (0.2 + 0.1 * phase)

        # Novel phase-based weight adjustment
        weight = 1.0 + (remaining_count / total_nodes) * connectivity_factor * (1 + 0.1 * phase)

        # Score calculation with phase-sensitive terms
        score = (immediate_weight * immediate_distance +
                 lookahead_weight * (immediate_distance - avg_distance) -
                 centrality_weight * node_centrality)
        score *= weight

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
