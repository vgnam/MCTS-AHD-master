def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    progress_factor = remaining_count / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = max(1, remaining_count // 4)
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_nodes
        else:
            avg_distance = 0
            node_centrality = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.3 * avg_distance)
        connectivity_weight = 0.5 + 0.2 * progress_factor

        immediate_weight = 0.7
        lookahead_weight = 0.3 * progress_factor
        centrality_weight = 0.6 * progress_factor

        score = immediate_weight * immediate_distance + lookahead_weight * (immediate_distance - avg_distance) - centrality_weight * node_centrality
        score *= (1.0 + connectivity_weight * connectivity / remaining_count)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
