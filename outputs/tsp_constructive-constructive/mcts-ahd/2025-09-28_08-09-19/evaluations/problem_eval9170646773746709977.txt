def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    distance_weight = max(0.4, 0.8 - 0.04 * remaining_nodes)
    detour_weight = min(0.6, 0.4 + 0.04 * remaining_nodes)
    accessibility_weight = 0.2 if remaining_nodes > 1 else 0.4

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        detour_penalty = distance_to_current + distance_to_destination - distance_matrix[current_node][destination_node]

        future_accessibility = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        local_clustering = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        score = (distance_weight * distance_to_current) + (detour_weight * detour_penalty) + (accessibility_weight * future_accessibility) - (0.1 * local_clustering)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
