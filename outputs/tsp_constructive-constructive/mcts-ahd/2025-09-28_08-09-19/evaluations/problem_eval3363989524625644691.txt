def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
            lookahead_distance = distance_matrix[node][next_candidate]

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        popularity = 1.0 / (1.0 + node_centrality)

        immediate_weight = 0.5 + 0.2 * exploration_factor
        lookahead_weight = 0.3 * (1.0 - exploration_factor)
        popularity_weight = 0.2 * exploration_factor

        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance + popularity_weight * popularity

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
