def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_possible_nodes = remaining_nodes + 1
    exploration_factor = 0.5 ** (1 / (remaining_nodes + 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        local_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes if remaining_nodes > 1 else 0
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (distance_matrix[node][destination_node] + 1)

        probabilistic_weight = exploration_factor * (1 / (distance_to_current + 1)) + (1 - exploration_factor) * future_potential
        score = (1 - exploration_factor) * distance_to_current + exploration_factor * local_connectivity + probabilistic_weight

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
