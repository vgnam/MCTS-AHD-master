def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = 0.7 * distance_to_current + 0.3 * distance_to_destination
        else:
            avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * avg_distance_to_unvisited)
            connectivity_weight = 1.0 + (remaining_nodes / total_nodes) * (connectivity / (total_nodes - 1)) * 0.7

            predicted_path_cost = 0.5 * distance_to_current + 0.5 * avg_distance_to_unvisited
            weight_factor = 0.6 + 0.4 * (remaining_nodes / (remaining_nodes + 1))

            score = weight_factor * predicted_path_cost * connectivity_weight + (1 - weight_factor) * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
