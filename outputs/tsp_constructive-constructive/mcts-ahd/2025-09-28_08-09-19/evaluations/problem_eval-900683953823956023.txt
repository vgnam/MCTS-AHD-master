def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)
    exploration_weight = 0.8 * temperature
    exploitation_weight = 0.2 + 0.6 * (1 - temperature)

    scores = []
    total_centrality = sum(sum(distance_matrix[node]) for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        future_potential = (0.6 * avg_future_distance + 0.4 * node_centrality) / (1 + total_centrality)
        selection_pressure = exploitation_weight * distance_to_current + exploration_weight * future_potential
        penalty = 0.3 * (1 - temperature) * (distance_to_destination / (1 + avg_future_distance)) if avg_future_distance > 0 else 0

        score = selection_pressure - penalty
        scores.append((node, score))

    if not scores:
        return destination_node

    # Temperature-based probabilistic selection
    min_score = min(score[1] for score in scores)
    adjusted_scores = [(node, min_score - score) for node, score in scores]
    total = sum(score for _, score in adjusted_scores)
    rand_val = random.random() * total

    cumulative = 0
    for node, score in adjusted_scores:
        cumulative += score
        if rand_val <= cumulative:
            return node

    return next_node
