def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(1.0, 10.0 * (remaining_nodes / len(distance_matrix))) if len(distance_matrix) > 0 else 1.0

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = float('inf')
        else:
            distance_ratio = distance_to_current / distance_to_destination
            centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
            score = (distance_ratio ** (1.0 / temperature)) * (centrality ** (1.0 / (temperature + 1.0)))

        scores.append((node, score))

    if not scores:
        return destination_node

    min_score = min(score[1] for score in scores)
    max_score = max(score[1] for score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-10)) for node, score in scores]

    if temperature > 1.0:
        probabilities = [1.0 - (s / sum(s for _, s in normalized_scores)) for _, s in normalized_scores]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    else:
        next_node = min(normalized_scores, key=lambda x: x[1])[0]

    return next_node
