def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    # Calculate global centrality for all nodes
    node_centrality = {}
    for node in unvisited_nodes | {current_node}:
        node_centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes | {current_node} if n != node) / (total_nodes - 1)

    # Calculate path diversity factor
    diversity_factor = 1.0
    if len(unvisited_nodes) > 2:
        diversity = sum(abs(distance_matrix[current_node][n] - node_centrality[n]) for n in unvisited_nodes) / len(unvisited_nodes)
        diversity_factor = 1.0 + (diversity / (sum(node_centrality.values()) / total_nodes)) * 0.5

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        # Calculate path coherence metric
        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            coherence = sum(distance_matrix[node][n] / (distance_matrix[current_node][n] + 1e-6) for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0
            coherence = 0

        # Dynamic weight adjustment
        distance_weight = 0.5 - 0.2 * visited_ratio
        coherence_weight = 0.3 + 0.2 * (1 - visited_ratio)
        centrality_weight = 0.2 * (1 - visited_ratio ** 3)

        # Calculate score with novel components
        score = (distance_weight * immediate_distance +
                 coherence_weight * (1 - coherence) +
                 centrality_weight * node_centrality[node])

        # Dynamic penalty based on path progress
        penalty = 1 + (0.5 * (1 - visited_ratio) * (1 - coherence) * (1 + (remaining_count / total_nodes)))

        score *= penalty * diversity_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
