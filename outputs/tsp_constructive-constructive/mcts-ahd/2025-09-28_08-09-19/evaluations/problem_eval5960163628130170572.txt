importance" metric based on betweenness centrality and path diversity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 1.0 - (remaining_count / total_nodes) ** 2

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_importance = sum(1 / (1 + distance_matrix[node][n]) for n in remaining_nodes) / len(remaining_nodes)
            path_diversity = sum(abs(distance_matrix[node][n] - avg_neighbor_distance) for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_neighbor_distance = 0
            node_importance = 0
            path_diversity = 0

        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.3 * avg_neighbor_distance) / (total_nodes - 1)
        centrality_score = node_importance * (1 + connectivity_score * 0.7)

        dynamic_depth = min(3, max(1, int(remaining_count * 0.4)))
        lookahead_score = 0
        if remaining_nodes and dynamic_depth > 1:
            lookahead_nodes = list(remaining_nodes)[:dynamic_depth]
            lookahead_score = sum(distance_matrix[node][n] for n in lookahead_nodes) / dynamic_depth

        weight_factor = 1.0 + (remaining_count / total_nodes) * 0.6
        immediate_weight = 0.6 - 0.3 * exploration_factor
        lookahead_weight = 0.25 * (1.0 - exploration_factor)
        importance_weight = 0.45 * (1.0 - lookahead_weight)

        score = (immediate_weight * immediate_distance +
                lookahead_weight * lookahead_score -
                importance_weight * centrality_score) * weight_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
