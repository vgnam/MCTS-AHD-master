def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    time_decay = 1 - (visited_ratio ** 2)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Limited-depth lookahead (2 steps ahead)
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
            lookahead_distance = distance_matrix[node][next_candidate]

        # Penalize overly central nodes
        if len(unvisited_nodes) > 1:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
            penalty = 1 + (avg_neighbor_distance / (immediate_distance + 1e-6)) * time_decay
            lookahead_distance *= penalty

        score = 0.7 * immediate_distance + 0.3 * lookahead_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
