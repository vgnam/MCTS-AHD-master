def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    # Calculate node density and adaptive proximity threshold
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / remaining_nodes if remaining_nodes > 0 else 0
    variance = sum((d - avg_distance) ** 2 for d in distances) / remaining_nodes if remaining_nodes > 0 else 0
    std_dev = variance ** 0.5
    node_density = remaining_nodes / (avg_distance + 1e-6)
    proximity_threshold = avg_distance + (0.3 + 0.7 * (node_density / (node_density + 1))) * std_dev

    # Precompute local and global connectivity for all nodes
    connectivity_scores = {}
    for node in unvisited_nodes:
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= proximity_threshold)
        global_connectivity = sum(1 for n in range(len(distance_matrix)) if n not in unvisited_nodes and distance_matrix[node][n] <= proximity_threshold)
        connectivity_scores[node] = local_connectivity + 0.5 * global_connectivity

    # Calculate historical efficiency weights (simplified RL-like approach)
    efficiency_weights = {}
    for node in unvisited_nodes:
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_remaining_distance = sum(remaining_distances) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        efficiency_weights[node] = 1.0 + 0.4 * (avg_remaining_distance / (avg_distance + 1e-6))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        # Dynamic connectivity weight combining local and global factors
        connectivity_weight = 1.0 + (connectivity_scores[node] / (total_nodes - 1)) * (0.6 + 0.4 * (remaining_nodes / total_nodes))

        # Adaptive proximity score with density-aware penalty
        if distance_to_current <= proximity_threshold:
            proximity_score = distance_to_current * (1.0 - 0.2 * (node_density / (node_density + 5)))
        else:
            proximity_score = 1.3 * distance_to_current * (1.0 + 0.1 * (node_density / (node_density + 5)))

        # Efficiency penalty with reinforcement learning-inspired adjustment
        efficiency_penalty = efficiency_weights[node] * (1.0 + 0.25 * (remaining_nodes / total_nodes))

        # Combined score with dynamic weight balance
        score = (0.5 + 0.5 * (remaining_nodes / total_nodes)) * proximity_score + \
                (0.3 + 0.4 * (remaining_nodes / total_nodes)) * connectivity_weight + \
                (0.2 + 0.3 * (remaining_nodes / total_nodes)) * efficiency_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
