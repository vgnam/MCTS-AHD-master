def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    time_factor = 1.0 - (remaining_nodes / total_nodes) ** 2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node degree and similarity to destination
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        similarity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] == distance_matrix[destination_node][n] and n != node)

        # Novelty score: penalize nodes similar to destination, reward unique nodes
        novelty_score = (degree - similarity) / (degree + 1)

        # Dynamic weights based on time and novelty
        immediate_weight = (1.0 - time_factor) * (1.0 + novelty_score)
        centrality_weight = time_factor * (1.0 + degree / total_nodes)
        proximity_penalty = 0.5 * (1.0 - time_factor) * (distance_to_destination / (1.0 + degree))

        # Calculate total score
        score = immediate_weight * (1.0 / (1.0 + distance_to_current)) + centrality_weight * novelty_score - proximity_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
