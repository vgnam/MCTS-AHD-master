def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_ratio = len(unvisited_nodes) / (len(distance_matrix) - 1)
    decay_factor = 0.7

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        immediate_weight = 0.5 * (1 + remaining_ratio)
        future_weight = 0.4 * (1 - remaining_ratio)
        penalty_weight = 0.3 * (1 - future_weight)

        penalty = penalty_weight * (distance_to_destination / (1 + avg_future_distance)) if avg_future_distance > 0 else 0

        score = immediate_weight * distance_to_current + future_weight * avg_future_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
