def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 1.0 - (remaining_count / total_nodes) * 0.8

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(distances) / len(distances)
            node_centrality = avg_distance
            std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5
        else:
            avg_distance = 0
            node_centrality = 0
            std_dev = 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_factor = 1.0 + (connectivity / (remaining_count + 1e-6)) * 0.4

        distance_weight = 0.5 - 0.2 * exploration_factor
        centrality_weight = 0.3 * (1.0 - exploration_factor)
        penalty_weight = 0.2 * (1 - (remaining_count / total_nodes))

        score = (distance_weight * immediate_distance) + (centrality_weight * node_centrality) + (penalty_weight * std_dev)
        score *= (1 + 0.5 * (connectivity_factor - 1) * (1 - exploration_factor))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
