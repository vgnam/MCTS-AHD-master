importance as the number of unvisited nodes decreases, while balancing immediate distance with a more conservative approach to penalties.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            neighbor_distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(neighbor_distances) / len(neighbor_distances)
            variance = sum((d - avg_distance) ** 2 for d in neighbor_distances) / len(neighbor_distances)

            connectivity_factor = 1.0 + (1 / (1 + variance)) * 0.5
            immediate_weight = 0.3 * (remaining_count / total_nodes)
            connectivity_weight = 0.7 * (1 - (remaining_count / total_nodes))

            score = immediate_weight * immediate_distance + connectivity_weight * (immediate_distance * connectivity_factor)
            penalty = 1 + (0.5 * variance / (immediate_distance + 1e-6)) * (remaining_count / total_nodes)
            score *= penalty
        else:
            score = immediate_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
