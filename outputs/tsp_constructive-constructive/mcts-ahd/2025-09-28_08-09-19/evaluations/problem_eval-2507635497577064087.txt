def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    candidates = []
    remaining_count = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_count / len(distance_matrix)))  # Decaying temperature

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity_score = 1.0 / (1.0 + avg_distance)  # Higher for better connectivity
        else:
            connectivity_score = 1.0

        # Weighted score with temperature adjustment
        score = (0.6 * (immediate_distance - avg_distance) + 0.4 * connectivity_score) * (1.0 - temperature)

        candidates.append((node, score))

    # Probabilistic selection based on scores
    scores = [score for _, score in candidates]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in scores]  # Higher score = better

    if sum(normalized_scores) > 0:
        next_node = random.choices([node for node, _ in candidates], weights=normalized_scores, k=1)[0]
    else:
        next_node = random.choice(list(unvisited_nodes))

    return next_node
