def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # 3-step lookahead
        remaining_nodes = unvisited_nodes - {node}
        lookahead_distance = 0
        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            next_steps = []
            for _ in range(min(3, len(remaining_nodes))):
                if not next_candidates:
                    break
                next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
                next_steps.append(distance_matrix[node][next_candidate])
                next_candidates.remove(next_candidate)
            lookahead_distance = sum(next_steps) / len(next_steps) if next_steps else 0

        # Global connectivity: max distance to nearby nodes
        nearby_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(unvisited_nodes))]
        max_nearby_distance = max(distance_matrix[node][n] for n in nearby_nodes) if nearby_nodes else 0

        # Balance immediate (60%), lookahead (30%), connectivity (10%)
        score = 0.6 * immediate_distance + 0.3 * lookahead_distance + 0.1 * max_nearby_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
