def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_distance = sum(remaining_distances) / len(remaining_distances)
            variance = sum((d - avg_distance) ** 2 for d in remaining_distances) / len(remaining_distances)

        dynamic_weight = 1 / (1 + math.exp(len(unvisited_nodes) / 10))
        penalty = variance ** 0.5
        score = (1 - dynamic_weight) * distance_to_current + dynamic_weight * avg_distance + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
