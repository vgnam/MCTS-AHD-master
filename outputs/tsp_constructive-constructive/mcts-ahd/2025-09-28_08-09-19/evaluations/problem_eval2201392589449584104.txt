def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    exploration_pressure = (1.0 - (remaining_count / total_nodes)) ** 2
    connectivity_threshold = 1.0 + (0.3 * exploration_pressure)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            connectivity_density = sum(1 for n in remaining_nodes if distance_matrix[node][n] < connectivity_threshold * immediate_distance)
            node_centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            future_connectivity = connectivity_density / len(remaining_nodes)
        else:
            node_centrality = 0
            future_connectivity = 0

        distance_weight = 0.5 + 0.3 * exploration_pressure
        centrality_weight = 0.4 * (1.0 - exploration_pressure)
        connectivity_weight = 0.3 * (1.0 - exploration_pressure) ** 0.5

        score = (distance_weight * immediate_distance) + \
                (centrality_weight * node_centrality) - \
                (connectivity_weight * future_connectivity)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
