importance" metric derived from centrality and degree.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    # Calculate node degrees (number of nearby neighbors)
    node_degrees = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        node_degrees[node] = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.2 * avg_distance)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            node_centrality = avg_distance
        else:
            avg_distance = 0
            connectivity = 0
            node_centrality = 0

        # Adaptive weights based on node degree
        degree_factor = 1.0 + (node_degrees[node] / (total_nodes - 1)) * (0.5 - 0.3 * visited_ratio)
        immediate_weight = 0.5 - 0.2 * visited_ratio
        connectivity_weight = 0.4 * (1.0 - visited_ratio)
        importance_weight = 0.3 * (1.0 - visited_ratio)

        # Node importance: balance between centrality and degree
        node_importance = (node_centrality * 0.7 + node_degrees[node] * 0.3) / (1 + visited_ratio)

        score = (immediate_weight * immediate_distance +
                connectivity_weight * (connectivity * degree_factor) +
                importance_weight * node_importance)

        # Add probabilistic element to escape local optima
        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score and remaining_count > 3:
            if np.random.rand() < 0.2 * (1 - visited_ratio):
                next_node = node

    return next_node
