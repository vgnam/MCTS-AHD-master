def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    progress_factor = 1.0 - (remaining_nodes / total_nodes)
    momentum_factor = 0.5 * (1.0 + progress_factor)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node degree and density
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        density_factor = degree / (total_nodes - 1)

        # Calculate tour momentum (directional bias)
        if current_node != destination_node:
            direction_vector = distance_matrix[current_node][destination_node]
            node_vector = distance_matrix[current_node][node]
            momentum_bias = (node_vector / direction_vector) if direction_vector > 0 else 1.0
        else:
            momentum_bias = 1.0

        # Dynamic weights
        immediate_weight = 0.4 + 0.6 * (1.0 - progress_factor)
        centrality_weight = 0.3 + 0.7 * progress_factor
        momentum_weight = 0.3 * momentum_factor

        # Penalty for nodes too close to destination
        proximity_penalty = 0.5 * (distance_to_destination ** 2) / (1.0 + density_factor)

        # Calculate total score
        score = (immediate_weight * distance_to_current +
                centrality_weight * (1.0 - density_factor) +
                momentum_weight * (1.0 - momentum_bias) +
                proximity_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
