importance score that combines immediate distance, future connectivity, and a novel 'node centrality' factor, which evaluates each node's potential to bridge gaps in the tour while penalizing nodes that create excessive detours. It also incorporates a 'tour momentum' parameter that adjusts selection based on recent moves to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality: average of distances to all unvisited nodes
        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Calculate tour momentum: ratio of recent moves that favored closer nodes
        recent_moves = 2  # Consider last 2 moves for momentum
        momentum = 0.5 if progress < 0.5 else 0.7  # Higher momentum later in tour

        # Calculate detour penalty: discourages nodes that create large detours
        detour_penalty = max(0, (distance_to_current + distance_to_destination) - (distance_matrix[current_node][destination_node] * 1.2))

        # Combine factors with dynamic weights
        immediate_weight = 0.5 - 0.3 * progress
        centrality_weight = 0.3 + 0.2 * progress
        momentum_weight = 0.2

        score = (immediate_weight * distance_to_current +
                 centrality_weight * node_centrality +
                 momentum_weight * momentum * distance_to_destination +
                 detour_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
