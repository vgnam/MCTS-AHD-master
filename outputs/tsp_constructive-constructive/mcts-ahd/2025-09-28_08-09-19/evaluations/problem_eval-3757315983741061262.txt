def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    current_time = len(distance_matrix) - remaining_nodes

    # Calculate average immediate distances
    avg_immediate = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    # Calculate time-decay factor
    time_decay = 1.0 / (1.0 + (current_time / total_nodes) ** 2)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Future potential estimation
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            future_potential = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        else:
            future_potential = destination_distance

        # Dynamic weighting factors
        distance_weight = 0.4 + 0.6 * (1.0 - (immediate_distance / (avg_immediate + 1e-6)))
        future_weight = 0.3 + 0.7 * (1.0 - (future_potential / (avg_immediate + 1e-6)))
        complexity_weight = 0.3 * (remaining_nodes / total_nodes) ** 1.5

        # Probabilistic selection with time decay
        selection_prob = (distance_weight * (1.0 / (1.0 + immediate_distance)) +
                         future_weight * (1.0 / (1.0 + future_potential))) * time_decay

        # Combined score
        score = (distance_weight * immediate_distance +
                 future_weight * future_potential +
                 complexity_weight * (immediate_distance + destination_distance)) * selection_prob

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
