def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)
    exploration_factor = 1.0 - (remaining_count / total_nodes) * 0.8

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.5
            lookahead_depth = min(3, remaining_count // 3) if remaining_count > 3 else 1
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity_factor = 1.0
            avg_neighbor_distance = 0

        centrality_weight = 0.5 + 0.3 * (1 - exploration_factor)
        immediate_weight = 0.3 - 0.1 * centrality_weight
        lookahead_weight = 0.4 * exploration_factor
        penalty_weight = 0.5 * (1 - visited_ratio)

        score = centrality_weight * node_centrality + immediate_weight * immediate_distance + lookahead_weight * avg_neighbor_distance
        penalty = 1 - (0.5 * node_centrality / (immediate_distance + 1e-6)) * penalty_weight
        score *= penalty * connectivity_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
