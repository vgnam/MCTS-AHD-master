def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Limited-depth lookahead (2 steps ahead)
        remaining_nodes = unvisited_nodes - {node}
        lookahead_distance = 0
        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
            lookahead_distance = distance_matrix[node][next_candidate]

        # Global connectivity: average distance to all remaining unvisited nodes
        avg_global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Balance immediate distance (60%), lookahead (20%), and global connectivity (20%)
        score = 0.6 * immediate_distance + 0.2 * lookahead_distance + 0.2 * avg_global_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
