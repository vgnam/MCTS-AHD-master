def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Calculate node density in local neighborhood
            local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * distance_to_current) / remaining_nodes

            # Calculate angular dispersion (simplified)
            angles = []
            for n1 in unvisited_nodes:
                for n2 in unvisited_nodes:
                    if n1 != n2 and n1 != node and n2 != node:
                        vec1 = (distance_matrix[node][n1], 1)  # Simplified vector
                        vec2 = (distance_matrix[node][n2], 1)
                        dot_product = vec1[0]*vec2[0] + vec1[1]*vec2[1]
                        mag1 = (vec1[0]**2 + vec1[1]**2)**0.5
                        mag2 = (vec2[0]**2 + vec2[1]**2)**0.5
                        angle = dot_product / (mag1 * mag2) if mag1 * mag2 > 0 else 0
                        angles.append(angle)
            angular_dispersion = sum(angles) / len(angles) if angles else 0

            # Dynamic weights based on exploration-exploitation trade-off
            exploration_weight = 0.7 * (remaining_nodes / (remaining_nodes + 5))
            exploitation_weight = 0.3 * (1 - exploration_weight)

            # Reinforcement learning-inspired penalty
            penalty = 0.5 * (local_density * angular_dispersion) * (distance_to_destination / (1 + distance_to_current))

            score = (exploitation_weight * distance_to_current +
                    exploration_weight * (1 / (1 + distance_to_destination)) +
                    0.2 * (1 - local_density) +
                    0.1 * angular_dispersion) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
