def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    weight_factor = 1.0 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node degree (number of connections to unvisited nodes)
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        degree_factor = 1.0 + (degree / (total_nodes - 1)) * 0.5

        # Dynamic weights based on remaining nodes and degree
        immediate_weight = (1.0 - weight_factor) * (1.0 + degree_factor)
        centrality_weight = 0.5 + weight_factor * degree_factor
        penalty_weight = 0.3 * (1.0 - weight_factor)

        # Penalize nodes too close to destination
        penalty = penalty_weight * (distance_to_destination / (1.0 + degree_factor)) if degree > 0 else 0

        # Calculate total score
        score = immediate_weight * distance_to_current - centrality_weight * degree_factor + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
