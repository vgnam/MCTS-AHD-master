def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    phase_ratio = max(0.1, 1.0 - (remaining_count / total_nodes) * 0.8)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.3 * avg_distance)
            connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.4
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity_factor = 1.0

        lookahead_depth = min(4, remaining_count // 3) if remaining_count > 3 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        distance_weight = 0.6 * phase_ratio
        centrality_weight = 0.4 * (1.0 - phase_ratio)
        connectivity_weight = 0.3 * (1.0 - phase_ratio)
        penalty_weight = 0.2 * (1.0 - phase_ratio)

        base_score = distance_weight * immediate_distance + centrality_weight * node_centrality
        connectivity_score = connectivity_weight * (immediate_distance - avg_distance)
        penalty_score = penalty_weight * (1.0 + (0.3 * avg_neighbor_distance / (immediate_distance + 1e-6)))

        total_score = base_score + connectivity_score * penalty_score * connectivity_factor

        if total_score < min_score:
            min_score = total_score
            next_node = node

    if remaining_count > 2 and random.random() < 0.2 * phase_ratio:
        candidates = sorted(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])[:3]
        next_node = random.choice(candidates)

    return next_node
