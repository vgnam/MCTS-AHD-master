def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    exploration_factor = max(0.1, 0.5 * (1 - visited_ratio) ** 2)
    exploitation_factor = 1 - exploration_factor

    node_scores = []
    node_degrees = []
    min_distance = min(distance_matrix[current_node][n] for n in unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            degree = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * min_distance)
        else:
            avg_distance = 0
            connectivity = 0
            degree = 0

        node_degrees.append(degree)
        diversity_score = sum(abs(distance_matrix[node][n] - immediate_distance) for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        distance_score = (immediate_distance - min_distance) / (avg_distance + 1e-6)
        centrality_score = (degree / (remaining_count + 1e-6)) * (1 + 0.5 * (connectivity / remaining_count))

        score = exploitation_factor * (0.6 * distance_score + 0.4 * centrality_score) + exploration_factor * (0.3 * diversity_score + 0.7 * (degree / (remaining_count + 1e-6)))
        node_scores.append(score)

    if node_scores:
        avg_score = sum(node_scores) / len(node_scores)
        adjusted_scores = [s + exploration_factor * (d / (sum(node_degrees) + 1e-6)) for s, d in zip(node_scores, node_degrees)]
        next_node = list(unvisited_nodes)[adjusted_scores.index(min(adjusted_scores))]
    else:
        next_node = min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])

    return next_node
