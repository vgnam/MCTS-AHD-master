def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.7

    node_scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            sum_inv_distances = sum(1 / distance_matrix[node][n] for n in remaining_nodes if distance_matrix[node][n] > 0)
            harmonic_mean_centrality = len(remaining_nodes) / sum_inv_distances if sum_inv_distances > 0 else 0
        else:
            harmonic_mean_centrality = 0

        immediate_weight = 0.7 + 0.2 * exploration_factor
        centrality_weight = 0.3 * (1.0 - exploration_factor)

        score = immediate_weight * immediate_distance + centrality_weight * harmonic_mean_centrality + (1 - immediate_weight - centrality_weight) * distance_to_destination
        node_scores.append((node, score))
        total_score += score

    if total_score > 0:
        probabilities = [(node, score / total_score) for node, score in node_scores]
        next_node = random.choices([node for node, _ in probabilities], weights=[prob for _, prob in probabilities], k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])

    return next_node
