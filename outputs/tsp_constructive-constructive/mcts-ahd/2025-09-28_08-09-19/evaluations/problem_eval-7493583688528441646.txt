def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Initialize adaptive priority and momentum terms
    priority_weights = {node: 1.0 for node in unvisited_nodes}
    momentum = {node: 0.0 for node in unvisited_nodes}
    exploration_factor = 0.5 * (remaining_nodes / total_nodes) ** 2  # Quadratic decay

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        destination_distance = distance_matrix[node][destination_node]

        # Centrality measure (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes

        # Momentum-based reinforcement update
        momentum[node] = 0.9 * momentum[node] + 0.1 * (1.0 / (1.0 + immediate_distance))
        priority_weights[node] *= (1 - exploration_factor) * momentum[node] + exploration_factor * (1.0 / (1.0 + centrality))

        # Hybrid scoring with adaptive weights
        exploitation_score = priority_weights[node] * (1.0 / (1.0 + immediate_distance))
        exploration_score = (1.0 / (1.0 + future_potential)) * (remaining_nodes / total_nodes) * (1.0 / (1.0 + centrality))

        # Dynamic weight adjustment based on tour progress
        progress_weight = 0.5 + 0.5 * (1 - remaining_nodes / total_nodes)
        score = (progress_weight * exploitation_score) + ((1 - progress_weight) * exploration_score)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
