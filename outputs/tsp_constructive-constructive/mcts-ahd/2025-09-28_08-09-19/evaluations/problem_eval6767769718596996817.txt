def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    time_decay = 1 - (visited_ratio ** 2)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = min(3, len(unvisited_nodes) // 2) if len(unvisited_nodes) > 2 else 1
        remaining_nodes = unvisited_nodes - {node}
        lookahead_distance = 0

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        popularity = 1.0 / (1.0 + 2 * node_centrality)
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.4 + 0.4 * (1 - visited_ratio)
        lookahead_weight = 0.3 * (1.0 - time_decay)
        popularity_weight = 0.2 * time_decay
        penalty_weight = 0.3 * (1.0 - lookahead_weight)

        penalty = penalty_weight * (distance_to_destination + 0.3 * node_centrality)
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) + popularity_weight * popularity - penalty

        if len(unvisited_nodes) > 1:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
            penalty = 1 + (avg_neighbor_distance / (immediate_distance + 1e-6)) * time_decay
            score *= penalty

            if len(nearest_neighbors) >= 2:
                second_nearest = nearest_neighbors[1]
                score += 0.2 * distance_matrix[node][second_nearest]

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
