def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            lookahead_scores = []
            for next_candidate in unvisited_nodes:
                if next_candidate != node:
                    distance_to_next = distance_matrix[node][next_candidate]
                    distance_from_next = distance_matrix[next_candidate][destination_node]
                    lookahead_scores.append(distance_to_next + distance_from_next)

            avg_lookahead = sum(lookahead_scores) / len(lookahead_scores) if lookahead_scores else 0
            revisit_penalty = 1.0 if node in [current_node] else 0.0

            weight_factor = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 2))
            immediate_weight = 0.4 * weight_factor
            lookahead_weight = 0.6 * (1 - weight_factor)

            score = immediate_weight * distance_to_current + lookahead_weight * avg_lookahead + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
