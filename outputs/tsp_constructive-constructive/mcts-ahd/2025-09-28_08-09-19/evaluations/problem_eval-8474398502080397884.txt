def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

        node_centrality = avg_distance

        lookahead_depth = min(3, len(unvisited_nodes) // 2) if len(unvisited_nodes) > 2 else 1
        nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.5 + 0.4 * (1 - visited_ratio)
        centrality_weight = 0.2 + 0.3 * visited_ratio
        lookahead_weight = 0.3 * visited_ratio

        score = immediate_weight * immediate_distance + centrality_weight * node_centrality + lookahead_weight * avg_neighbor_distance

        if avg_neighbor_distance > 1.5 * immediate_distance:
            score *= 1.1

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
