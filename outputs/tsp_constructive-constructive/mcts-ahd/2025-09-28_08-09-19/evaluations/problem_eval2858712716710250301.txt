importance, with weights adjusted based on the remaining nodes' count and a temperature parameter that controls exploration-exploitation balance.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_count / (remaining_count + 1)) * 0.8)

    candidates = []
    weights = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            centrality = 0

        weight = (0.6 * immediate_distance + 0.3 * centrality + 0.1 * distance_to_destination)
        weight = weight ** (1.0 / temperature)
        candidates.append(node)
        weights.append(weight)

    weights = [1.0 / w for w in weights]
    total = sum(weights)
    normalized_weights = [w / total for w in weights]

    next_node = np.random.choice(candidates, p=normalized_weights)
    return next_node
