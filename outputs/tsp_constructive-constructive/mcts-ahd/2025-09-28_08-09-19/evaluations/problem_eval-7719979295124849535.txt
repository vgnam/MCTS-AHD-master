def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Centrality factor: average distance to other nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0

        # Dynamic weight factors
        exploration_weight = (remaining_nodes / total_nodes) ** 0.5
        exploitation_weight = 1.0 - exploration_weight

        # Combined score
        score = (exploitation_weight * (1.0 / (1.0 + immediate_distance))) + \
                (exploration_weight * (future_potential * (1.0 / (1.0 + centrality))))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
