def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 1.0 - (remaining_count / total_nodes) * 0.7
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity = 0

        lookahead_depth = min(4, remaining_count // 2) if remaining_count > 4 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.6 + 0.3 * exploration_factor
        centrality_weight = 0.9 * (1.0 - exploration_factor)
        connectivity_weight = 0.5 * (1 - visited_ratio)

        base_score = immediate_weight * immediate_distance - centrality_weight * node_centrality + connectivity_weight * connectivity
        penalty = 1 + (0.5 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio)

        dynamic_adjustment = 1 + (0.3 * (connectivity / (total_nodes - 1)) if (total_nodes - 1) > 0 else 0)
        final_score = base_score * penalty * dynamic_adjustment
        scores.append((node, final_score))

    if scores:
        min_score = min(score for _, score in scores)
        max_score = max(score for _, score in scores)
        normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]
        selection_probabilities = [1 - prob for node, prob in normalized_scores]
        selection_probabilities = [p / sum(selection_probabilities) for p in selection_probabilities]
        next_node = np.random.choice([node for node, _ in normalized_scores], p=selection_probabilities)
    else:
        next_node = min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])

    return next_node
