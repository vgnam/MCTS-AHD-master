def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
        else:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
            avg_distance = sum(distances_to_unvisited) / len(distances_to_unvisited)
            var_distance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(distances_to_unvisited)

        # Dynamic weight based on remaining nodes and variance
        remaining_nodes = len(unvisited_nodes)
        dynamic_weight = 0.3 * (1 - 0.05 * min(remaining_nodes, 15)) + 0.2 * (var_distance / (avg_distance + 1e-6))

        # Penalty for long distances and local search preview
        penalty = 0.3 * distance_to_current if distance_to_current > 1.5 * avg_distance else 0

        # Local search preview: estimate potential future cost
        if remaining_nodes > 2:
            future_cost = sum(sorted(distance_matrix[node][n] for n in unvisited_nodes if n != node)[:2]) / 2
        else:
            future_cost = 0

        score = distance_to_current + (dynamic_weight * avg_distance) + penalty + 0.4 * future_cost

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
