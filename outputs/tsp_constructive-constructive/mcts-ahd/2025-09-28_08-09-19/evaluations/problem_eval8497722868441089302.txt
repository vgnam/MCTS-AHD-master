def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 1:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] + distance_matrix[node][destination_node])

    avg_local_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
    avg_global_distance = sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        local_factor = -distance_to_current / avg_local_distance if avg_local_distance > 0 else 0
        global_factor = -distance_to_destination / avg_global_distance if avg_global_distance > 0 else 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.3 * avg_local_distance) / remaining_nodes
        path_potential = (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0
        path_potential_factor = -path_potential / avg_global_distance if avg_global_distance > 0 else 0

        weight_exploration = 0.5 * (remaining_nodes / (remaining_nodes + 2))
        weight_exploitation = 1 - weight_exploration

        score = (weight_exploitation * (0.4 * local_factor + 0.3 * global_factor) +
                 weight_exploration * (0.5 * connectivity + 0.2 * path_potential_factor))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
