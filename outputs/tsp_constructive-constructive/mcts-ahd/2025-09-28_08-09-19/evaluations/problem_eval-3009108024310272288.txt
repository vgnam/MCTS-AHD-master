def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.8

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        lookahead_depth = min(4, remaining_count // 3) if remaining_count > 3 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_density = len(unvisited_nodes) / sum(distance_matrix[node][n] for n in unvisited_nodes) if unvisited_nodes else 1
        centrality_score = 1.0 / (1.0 + node_density)
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.6 * (1 - exploration_factor)
        lookahead_weight = 0.3 * exploration_factor
        centrality_weight = 0.4 * (1 - exploration_factor)
        penalty_factor = 0.5 * exploration_factor

        penalty = penalty_factor * (distance_to_destination ** 1.2 + 0.8 * centrality_score)
        score = (immediate_weight * (1 / (1 + immediate_distance)) + lookahead_weight * (lookahead_distance / (lookahead_depth + 1)) + centrality_weight * centrality_score) * (1 - penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
