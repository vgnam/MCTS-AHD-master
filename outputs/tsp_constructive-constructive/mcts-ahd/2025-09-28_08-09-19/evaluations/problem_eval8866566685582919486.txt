def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_unvisited)
        connectivity_weight = 1.0 + (1.0 - (remaining_nodes / (remaining_nodes + 1))) * (connectivity / (remaining_nodes)) * 0.5

        lookahead_distance = 0
        remaining_nodes_after = unvisited_nodes - {node}
        if remaining_nodes_after:
            next_candidates = remaining_nodes_after.copy()
            next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
            lookahead_distance = distance_matrix[node][next_candidate]

        immediate_weight = 0.6 + 0.2 * exploration_factor
        lookahead_weight = 0.4 * (1.0 - exploration_factor) * connectivity_weight

        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
