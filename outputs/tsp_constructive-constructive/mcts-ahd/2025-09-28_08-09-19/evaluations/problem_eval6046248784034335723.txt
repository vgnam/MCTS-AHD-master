importance as the tour nears completion.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_to_destination * 1.2) / len(unvisited_nodes) if unvisited_nodes else 0

        immediate_weight = 0.5
        future_weight = 0.3 * (1 + 0.5 * progress)
        proximity_weight = 0.2 * progress

        score = (immediate_weight * distance_to_current +
                future_weight * future_potential -
                centrality * distance_to_destination +
                proximity_weight * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
