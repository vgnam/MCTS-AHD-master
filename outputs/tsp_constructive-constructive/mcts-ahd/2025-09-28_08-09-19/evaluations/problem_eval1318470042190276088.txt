def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Adaptive lookahead depth (max 3 steps, scales with remaining nodes)
        lookahead_depth = min(3, max(1, remaining_count // 3))
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Dynamic weights: immediate weight decreases with distance, lookahead weight increases
        immediate_weight = 0.5 / (1 + immediate_distance)
        lookahead_weight = 1 - immediate_weight

        # Novelty factor: penalizes frequently visited nodes in the current path
        novelty_factor = 1 / (1 + sum(1 for n in unvisited_nodes if n == node))

        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth) + novelty_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
