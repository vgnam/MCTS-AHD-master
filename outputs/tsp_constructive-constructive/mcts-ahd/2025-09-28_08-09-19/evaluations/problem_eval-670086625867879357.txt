importance based on remaining nodes, using a quadratic connectivity weight and penalizing nodes with high average distances to unvisited nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * avg_distance_to_unvisited)
        connectivity_weight = (1.0 - (remaining_nodes / total_nodes)) ** 2 * (connectivity / (total_nodes - 1)) * 0.8

        score = distance_to_current + (avg_distance_to_unvisited * connectivity_weight)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
