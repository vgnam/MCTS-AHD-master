def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining = len(unvisited_nodes)
    total = remaining + 1

    for node in unvisited_nodes:
        d_current = distance_matrix[current_node][node]
        d_dest = distance_matrix[node][destination_node]

        # Dynamic path coherence metric
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        coherence_factor = 1 - (coherence / (distance_matrix[current_node][destination_node] + 1))

        # Path momentum factor (rewards nodes in current direction)
        momentum = (d_current + d_dest) / (distance_matrix[current_node][destination_node] + 1)

        # Probabilistic selection components
        detour = max(0, (d_current + d_dest) - 1.2 * distance_matrix[current_node][destination_node])
        lookahead = sum(sorted(distance_matrix[node][n] for n in unvisited_nodes if n != node)[:2]) / 2 if len(unvisited_nodes) > 2 else 0

        # Dynamic weight adjustment
        weight = (remaining / total) ** 2
        score = (1 - weight) * d_current + weight * (0.7 * coherence_factor + 0.2 * momentum + 0.3 * lookahead - 0.1 * detour)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
