def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        lookahead_depth = min(3, total_nodes // 2) if total_nodes > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.5 - 0.3 * progress
        lookahead_weight = 0.3 + 0.2 * progress
        proximity_weight = 0.4 * (1 - progress)
        penalty_weight = 0.3 * progress

        penalty = penalty_weight * (distance_to_destination + 0.5 * node_centrality)
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) + proximity_weight * distance_to_destination - penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
