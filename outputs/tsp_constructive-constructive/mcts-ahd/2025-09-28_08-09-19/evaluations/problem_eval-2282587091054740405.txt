importance early in the tour.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    progress = 1.0 - (remaining_nodes / (remaining_nodes + 1))
    exploration_factor = 0.5 + 0.5 * progress

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / len(future_distances) if future_distances else 0

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        importance = 1.0 / (1.0 + node_centrality)

        potential_regret = max(future_distances) - avg_future_distance if future_distances else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.6 - 0.2 * progress
        future_weight = 0.2 + 0.2 * progress
        importance_weight = 0.3 * exploration_factor
        regret_weight = 0.4 * (1.0 - exploration_factor)

        score = (immediate_weight * immediate_distance +
                 future_weight * avg_future_distance +
                 importance_weight * importance -
                 regret_weight * potential_regret)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
