def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    decay_factor = 1.0 - (remaining_nodes / total_nodes) ** 2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_all)
        global_connectivity = sum(1 for n in range(len(distance_matrix)) if distance_matrix[node][n] < 1.5 * avg_distance_to_all)

        connectivity_score = (local_connectivity / (total_nodes - 1)) * 0.6 + (global_connectivity / (total_nodes - 1)) * 0.4
        proximity_score = distance_to_current + 0.5 * avg_distance_to_all * decay_factor

        disruption_penalty = 1.0 - (connectivity_score ** 2) * 0.4
        long_term_penalty = 1.0 - (remaining_nodes / total_nodes) * 0.3

        score = proximity_score * disruption_penalty * long_term_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
