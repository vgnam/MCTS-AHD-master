def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    # Calculate global centrality and hierarchical position
    global_centrality = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_count - 1) if remaining_count > 1 else 0
        global_centrality[node] = avg_distance

    # Calculate hierarchical position (simplified)
    hierarchical_position = {}
    for node in unvisited_nodes:
        hierarchical_position[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_count

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        # Calculate node connectivity and centrality
        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = global_centrality[node]
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity = 0

        # Adaptive weights and penalties
        immediate_weight = 0.5 - 0.15 * visited_ratio
        centrality_weight = 0.3 + 0.2 * visited_ratio
        connectivity_weight = 0.4 * (1.0 - visited_ratio)
        exploration_bias = 0.2 * (1 - hierarchical_position[node] / (sum(hierarchical_position.values()) + 1e-6))

        # Calculate score with novel components
        score = (immediate_weight * immediate_distance +
                 centrality_weight * node_centrality +
                 connectivity_weight * connectivity +
                 exploration_bias * (1 - visited_ratio))

        # Apply dynamic penalty based on node's potential impact
        potential_penalty = 1 + 0.4 * (connectivity / (remaining_count + 1e-6)) * (1 - visited_ratio)
        score *= potential_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
