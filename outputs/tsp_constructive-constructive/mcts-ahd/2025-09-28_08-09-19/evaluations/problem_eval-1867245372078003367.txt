def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 to include current node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    dynamic_decay = 0.5 + 0.4 * remaining_ratio  # Decay factor adjusts with remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = distance_to_current * (distance_to_destination ** dynamic_decay)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
