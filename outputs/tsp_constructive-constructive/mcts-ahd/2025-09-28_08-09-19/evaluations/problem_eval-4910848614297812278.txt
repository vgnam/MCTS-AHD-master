def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            avg_distance_to_all = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)

            centrality_factor = 0.5 * (1 - avg_distance_to_all / max(distance_matrix[node]))
            lookahead_factor = 0.3 + 0.7 * (1 - remaining_nodes / len(unvisited_nodes))

            score = (1 - lookahead_factor) * distance_to_current + \
                    lookahead_factor * (0.6 * avg_distance_to_unvisited + 0.4 * distance_to_destination) + \
                    centrality_factor * 0.2 * distance_to_current

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
