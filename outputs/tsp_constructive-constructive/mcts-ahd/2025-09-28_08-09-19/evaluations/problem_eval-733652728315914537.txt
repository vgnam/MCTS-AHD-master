def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            node_centrality = avg_distance
            lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
            global_avg_distance = sum(distance_matrix[i][j] for i in unvisited_nodes for j in unvisited_nodes if i != j) / (len(unvisited_nodes) * (len(unvisited_nodes) - 1)) if len(unvisited_nodes) > 1 else 0
        else:
            avg_distance = 0
            connectivity = 0
            node_centrality = 0
            avg_neighbor_distance = 0
            global_avg_distance = 0

        immediate_weight = 0.5 - 0.2 * visited_ratio
        centrality_weight = 0.3 * (0.5 + 0.3 * visited_ratio)
        penalty_weight = 0.2 * (0.5 + 0.4 * visited_ratio)

        score = immediate_weight * (immediate_distance - avg_distance) + centrality_weight * (immediate_distance * (1 + connectivity / (remaining_count + 1)))
        penalty = 1 + (0.5 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio) + 0.1 * (immediate_distance / (global_avg_distance + 1e-6)) * visited_ratio
        score *= penalty

        scores.append((node, score))

    if not scores:
        return destination_node

    nodes, raw_scores = zip(*scores)
    min_score, max_score = min(raw_scores), max(raw_scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in raw_scores]

    if sum(normalized_scores) > 0:
        probabilities = [s / sum(normalized_scores) for s in normalized_scores]
        next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
