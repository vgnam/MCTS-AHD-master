def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    # Adaptive weight factors based on stage of search
    stage_factor = remaining_nodes / total_nodes
    early_stage = stage_factor > 0.7
    mid_stage = 0.3 < stage_factor <= 0.7
    late_stage = stage_factor <= 0.3

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Calculate node centrality (inverse of average distance to other nodes)
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0

            # Calculate connectivity (number of nodes within 1.5x current distance)
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * distance_to_current) / remaining_nodes

            # Dynamic weights based on stage
            if early_stage:
                immediate_weight = 0.2
                centrality_weight = 0.6
                connectivity_weight = 0.2
            elif mid_stage:
                immediate_weight = 0.3
                centrality_weight = 0.4
                connectivity_weight = 0.3
            else:
                immediate_weight = 0.5
                centrality_weight = 0.2
                connectivity_weight = 0.3

            # Novel penalty function: scales with distance and remaining nodes
            penalty = (distance_to_destination ** 1.5) * (remaining_nodes / total_nodes) if distance_to_current > 0 else 0

            # Multi-stage scoring with adaptive weights
            score = (immediate_weight * (1 / (1 + distance_to_current)) +
                     centrality_weight * centrality +
                     connectivity_weight * connectivity) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
