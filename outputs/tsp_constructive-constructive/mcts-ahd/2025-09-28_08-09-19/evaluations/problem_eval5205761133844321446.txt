def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        connectivity_pressure = (1 - progress) * (centrality / (1 + distance_to_current)) ** 2

        immediate_gain = (1 / (1 + distance_to_current)) ** 1.5
        future_gain = connectivity_pressure * (0.7 + 0.3 * progress)
        proximity_cost = (distance_to_destination / (1 + distance_to_current)) * (0.5 * (1 - progress))

        score = (0.4 * immediate_gain + 0.5 * future_gain - 0.1 * proximity_cost)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
