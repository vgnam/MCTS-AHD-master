import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    candidates = []
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        penalty = 0

        # Dynamic lookahead depth based on remaining nodes (up to 4 or remaining count // 2)
        lookahead_depth = min(4, remaining_count // 2) if remaining_count > 3 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Penalty for revisiting nodes (if any)
        if lookahead_depth > 1 and node in remaining_nodes:
            penalty = 0.2 * immediate_distance

        # Weighted score: 50% immediate, 30% lookahead, 20% penalty
        score = 0.5 * immediate_distance + 0.3 * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) - 0.2 * penalty
        candidates.append((node, score))

    # Probabilistic selection: higher scores have lower probabilities
    if candidates:
        nodes, scores = zip(*candidates)
        min_score = min(scores)
        adjusted_scores = [min_score / s for s in scores]  # Inverse relationship
        total = sum(adjusted_scores)
        probabilities = [s / total for s in adjusted_scores]
        next_node = random.choices(nodes, weights=probabilities, k=1)[0]

    return next_node
