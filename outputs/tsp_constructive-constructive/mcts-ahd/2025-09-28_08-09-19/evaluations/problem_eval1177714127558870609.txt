def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * 0.7

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        popularity = 1.0 / (1.0 + node_centrality)

        immediate_weight = 0.5 + 0.2 * exploration_factor
        future_weight = 0.3 * (1.0 - exploration_factor)
        popularity_weight = 0.2 * exploration_factor

        penalty_weight = 0.4 * (1.0 - future_weight)
        penalty = penalty_weight * (distance_to_destination + 0.5 * node_centrality)

        score = immediate_weight * distance_to_current + future_weight * avg_future_distance + popularity_weight * popularity - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
