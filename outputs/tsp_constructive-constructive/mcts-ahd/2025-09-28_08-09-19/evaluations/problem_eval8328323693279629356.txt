def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Track selection frequency (simplified for this example)
    selection_frequency = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate exploration potential
        if unvisited_nodes:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            centrality = sum(distances_to_unvisited) / len(distances_to_unvisited) if distances_to_unvisited else 0
            exploration_factor = (1 - progress) * (centrality / (1 + distance_to_current))
        else:
            exploration_factor = 0

        # Calculate risk (distance variability)
        if len(unvisited_nodes) > 1:
            distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            risk = (max(distances) - min(distances)) / (sum(distances) / len(distances)) if distances else 0
        else:
            risk = 0

        # Dynamic weights
        immediate_weight = 0.5 - 0.3 * progress
        future_weight = 0.3 + 0.2 * progress
        proximity_weight = 0.4 * (1 - progress)
        novelty_weight = 0.2 * progress
        risk_weight = 0.1 * (1 - progress)

        # Novelty factor (lower frequency = higher novelty)
        novelty_factor = 1 / (1 + selection_frequency.get(node, 0))

        # Combined score
        score = (immediate_weight * (1 / (1 + distance_to_current)) +
                 future_weight * exploration_factor +
                 proximity_weight * (1 / (1 + distance_to_destination)) +
                 novelty_weight * novelty_factor -
                 risk_weight * risk)

        if score > best_score:
            best_score = score
            next_node = node

    # Update selection frequency (simplified)
    if next_node is not None:
        selection_frequency[next_node] = selection_frequency.get(next_node, 0) + 1

    return next_node
