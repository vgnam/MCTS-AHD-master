def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    historical_distances = [distance_matrix[current_node][n] for n in unvisited_nodes]
    avg_historical = sum(historical_distances) / len(historical_distances) if historical_distances else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        deviation_penalty = 1.0 + (immediate_distance / (avg_historical + 1e-6) - 1.0) * 0.5

        avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
        connectivity_bonus = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.1 * avg_distance) / remaining_count

        symmetry_penalty = 1.0
        if remaining_count > 1:
            symmetry_penalty = 1.0 + (max(distance_matrix[node][n] for n in remaining_nodes) - min(distance_matrix[node][n] for n in remaining_nodes)) / (avg_distance + 1e-6)

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.6 - 0.1 * visited_ratio
        centrality_weight = 0.3 * (1.0 - visited_ratio)
        penalty_weight = 0.2 * (1 - visited_ratio)

        score = immediate_weight * (immediate_distance * deviation_penalty) + centrality_weight * (avg_neighbor_distance) + penalty_weight * (1.0 - connectivity_bonus)
        score += symmetry_penalty * 0.1

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
