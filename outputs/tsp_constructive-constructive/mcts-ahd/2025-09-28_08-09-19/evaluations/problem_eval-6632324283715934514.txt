def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = - (distance_to_current + distance_to_destination)
        else:
            avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
            centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_distance_to_unvisited * 1.1)
            density_factor = (total_nodes - remaining_nodes) / total_nodes

            proximity_weight = 0.7 - 0.2 * density_factor
            connectivity_weight = 0.3 + 0.2 * density_factor

            proximity_score = - (proximity_weight * distance_to_current + (1 - proximity_weight) * distance_to_destination)
            connectivity_score = connectivity_weight * (centrality / (total_nodes - 1))

            score = proximity_score + connectivity_score

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
