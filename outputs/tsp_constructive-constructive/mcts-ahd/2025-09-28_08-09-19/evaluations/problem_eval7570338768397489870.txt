def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality = avg_distance
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * immediate_distance) / len(remaining_nodes)
        else:
            avg_distance = 0
            centrality = 0
            connectivity = 0

        immediate_weight = 0.6 + 0.3 * exploration_factor
        lookahead_weight = 0.4 * (1.0 - exploration_factor)
        centrality_weight = 0.3 * (1.0 - lookahead_weight)
        connectivity_weight = 0.2 * (1.0 - centrality_weight)

        score = (immediate_weight * immediate_distance +
                 lookahead_weight * (immediate_distance - avg_distance) +
                 centrality_weight * centrality +
                 connectivity_weight * connectivity)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
