def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.7 * remaining_nodes / (remaining_nodes + 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * distance_to_current) / remaining_nodes

            immediate_weight = 0.5 + 0.2 * exploration_factor
            connectivity_weight = 0.3 * (1.0 - exploration_factor)
            centrality_weight = 0.2 * exploration_factor

            penalty_weight = 0.4 * (1.0 - connectivity_weight)
            penalty = penalty_weight * (distance_to_destination + 0.5 * centrality)

            score = (immediate_weight * distance_to_current +
                     connectivity_weight * connectivity +
                     centrality_weight * centrality) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
