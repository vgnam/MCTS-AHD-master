def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) ** 2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        node_centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_future_distance) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_weight = 0.2 * exploration_factor

        distance_to_destination = distance_matrix[node][destination_node]
        penalty_weight = 0.3 * (1.0 - exploration_factor)
        penalty = penalty_weight * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0

        score = (0.5 * distance_to_current) + (0.3 * avg_future_distance) + (centrality_weight * node_centrality) - penalty

        if score < best_score:
            best_score = best_score
            next_node = node

    return next_node
