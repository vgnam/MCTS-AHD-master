def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        global_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 1.2 * avg_distance_to_all)
        outlier_reward = 1.0 if global_density > 0.6 * remaining_nodes else 1.0 - (global_density / remaining_nodes) * 0.5

        centrality_weight = 1.0 + (total_nodes / remaining_nodes) * (1.0 - (global_density / remaining_nodes) * 0.4)

        score = (distance_to_current - avg_distance_to_all) * centrality_weight * outlier_reward

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
