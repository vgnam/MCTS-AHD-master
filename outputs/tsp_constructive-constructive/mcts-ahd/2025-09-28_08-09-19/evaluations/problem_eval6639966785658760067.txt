def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    exploration_factor = 1.0 - (len(unvisited_nodes) / total_nodes) * 0.8

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
        else:
            avg_distance = 0
            node_centrality = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.4

        lookahead_depth = min(3, len(remaining_nodes) // 2) if len(remaining_nodes) > 2 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.5 + 0.4 * exploration_factor
        lookahead_weight = 0.5 * (1.0 - exploration_factor)
        centrality_weight = 0.6 * (1.0 - lookahead_weight)
        penalty_weight = 0.4 * (1 - visited_ratio)

        score = immediate_weight * immediate_distance + lookahead_weight * (immediate_distance - avg_distance) - centrality_weight * node_centrality
        penalty = 1 + (0.6 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio)
        score *= penalty * connectivity_factor

        scores.append((node, score))

    if not scores:
        return destination_node

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    total_score = sum(score for _, score in normalized_scores)
    selection_point = random.random() * total_score
    cumulative_score = 0.0

    for node, score in normalized_scores:
        cumulative_score += score
        if cumulative_score >= selection_point:
            return node

    return next_node
