def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Dynamic lookahead depth based on remaining nodes (max 3)
        lookahead_depth = min(3, total_unvisited)
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Penalty for revisiting nodes (20% weight)
        revisit_penalty = 0.2 * (1 / (lookahead_depth + 1)) if lookahead_depth > 0 else 0

        # Weighted score (30% immediate, 50% lookahead, 20% penalty)
        score = 0.3 * immediate_distance + 0.5 * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) - revisit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
