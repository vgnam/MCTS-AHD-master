def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_regret_weight = 0.7
    regret_decay = 0.9 ** remaining_nodes  # Decreases as more nodes are visited

    best_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes)
    best_destination_distance = min(distance_matrix[node][destination_node] for node in unvisited_nodes)

    next_node = None
    max_utility = -float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        distance_regret = distance_to_current - best_distance
        destination_regret = distance_to_destination - best_destination_distance

        regret_weight = base_regret_weight * regret_decay
        utility = (1 - regret_weight) * distance_regret + regret_weight * destination_regret

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
