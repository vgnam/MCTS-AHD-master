def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    penalty_strength = 1.5 * (1 - len(unvisited_nodes) / (len(distance_matrix) - 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Quadratic scaling for destination distance
        scaled_destination = distance_to_destination ** 2

        # Linear penalty for detours
        penalty = max(0, distance_to_current - 1.5 * distance_matrix[current_node][destination_node])

        score = distance_to_current + scaled_destination + penalty_strength * penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
