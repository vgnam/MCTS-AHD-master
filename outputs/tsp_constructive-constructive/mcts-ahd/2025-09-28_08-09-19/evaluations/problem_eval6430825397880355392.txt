def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        # Dynamic normalization factor based on remaining path length
        path_progress = (total_nodes - remaining_count) / total_nodes
        normalization_factor = 1.0 + 0.5 * (1 - path_progress)

        # Sigmoid-based weight for balancing immediate and long-term distances
        sigmoid_input = (immediate_distance - normalization_factor * sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)) if remaining_nodes else 0
        sigmoid_weight = 1 / (1 + math.exp(-sigmoid_input))

        # Connectivity penalty to avoid high-connectivity nodes early
        avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < avg_distance)
        connectivity_penalty = 1.0 - (connectivity / remaining_count) * 0.2

        # Variable lookahead depth scaling with sqrt of remaining nodes
        lookahead_depth = min(3, int(math.sqrt(remaining_count)))

        # Combined score with dynamic weights
        score = (0.7 * sigmoid_weight + 0.3 * connectivity_penalty) * (1 + 0.1 * lookahead_depth)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
