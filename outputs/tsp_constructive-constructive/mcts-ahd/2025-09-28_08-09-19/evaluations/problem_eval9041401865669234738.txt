def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.5
    exploration_bias = 0.7 if remaining_count > len(unvisited_nodes) * 0.7 else 0.3

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        lookahead_depth = min(4, max(1, remaining_count // 3))
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        popularity = 1.0 / (1.0 + 2 * node_centrality)
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.4 + 0.2 * exploration_bias
        lookahead_weight = 0.3 * (1.0 - exploration_factor) + 0.1 * exploration_bias
        popularity_weight = 0.2 * exploration_factor + 0.1 * (1.0 - exploration_bias)
        penalty_weight = 0.3 * (1.0 - lookahead_weight)

        penalty = penalty_weight * (distance_to_destination + 0.4 * node_centrality)
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) + popularity_weight * popularity - penalty

        candidates.append((node, score))

    if not candidates:
        return destination_node

    scores = [score for _, score in candidates]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score) if max_score != min_score else 0.5 for _, score in candidates]

    selected_index = np.random.choice(len(candidates), p=normalized_scores)
    return next_node
