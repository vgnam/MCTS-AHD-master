def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    lookahead_depth = min(3, remaining_count)  # Dynamic depth based on remaining nodes
    candidates = []
    scores = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Dynamic weight based on remaining nodes
        weight = 0.7 if remaining_count > 3 else 0.3
        penalty = 0.1 * (1 - len(remaining_nodes) / remaining_count)  # Exploration penalty
        score = weight * immediate_distance + (1 - weight) * (lookahead_distance / lookahead_depth) + penalty

        candidates.append(node)
        scores.append(score)

    # Probabilistic selection based on normalized scores
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-9) for s in scores]  # Invert to prefer lower scores
    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
