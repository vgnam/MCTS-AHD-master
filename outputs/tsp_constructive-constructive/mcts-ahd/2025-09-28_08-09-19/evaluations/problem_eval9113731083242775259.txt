def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0
            ratio_remaining = remaining_nodes / total_nodes
            immediate_weight = 0.3 + 0.7 * (1 - ratio_remaining)
            centrality_weight = 0.7 - 0.3 * ratio_remaining
            penalty_weight = 0.5 * ratio_remaining
            penalty = penalty_weight * (distance_to_destination / (distance_to_current + 1e-6))
            score = immediate_weight * distance_to_current + centrality_weight * centrality + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
