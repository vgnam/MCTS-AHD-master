def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic lookahead depth (1-3 steps) based on remaining nodes
    lookahead_depth = min(3, max(1, remaining_count // 3))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Adaptive weighting: more immediate focus when few nodes remain
        weight = 0.7 if remaining_count <= 2 else 0.5

        remaining_nodes = unvisited_nodes - {node}
        current = node

        for _ in range(lookahead_depth):
            if not remaining_nodes:
                break
            next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
            lookahead_distance += distance_matrix[current][next_candidate]
            current = next_candidate
            remaining_nodes -= {next_candidate}

        # Hybrid scoring: normalized distance + entropy-based uncertainty
        normalized_lookahead = lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0
        entropy_weight = 1 - (remaining_count / total_nodes)  # Higher entropy when more nodes remain
        score = (weight * immediate_distance +
                 (1 - weight) * normalized_lookahead * (1 + entropy_weight))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
