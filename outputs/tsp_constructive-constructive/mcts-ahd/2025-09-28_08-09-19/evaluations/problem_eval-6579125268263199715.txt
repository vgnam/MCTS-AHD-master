def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 1.0 - (remaining_count / total_nodes) ** 2
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
        node_centrality = avg_distance

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) ** 1.5

        local_search_penalty = 0
        if remaining_count > 2:
            local_search_penalty = min(distance_matrix[node][n] for n in remaining_nodes) * 0.3

        immediate_weight = 0.5 + 0.4 * exploration_factor
        avg_weight = 0.5 * (1.0 - exploration_factor)
        connectivity_weight = 0.7 * (1 - visited_ratio)
        penalty_weight = 0.2 * visited_ratio

        score = immediate_weight * immediate_distance + avg_weight * avg_distance
        score -= connectivity_weight * connectivity_factor * node_centrality
        score += penalty_weight * local_search_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
