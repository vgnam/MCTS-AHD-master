def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        anticipation_factor = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                anticipation_factor += (distance_matrix[node][neighbor] - distance_to_current) * (1 - progress)

        immediate_weight = 0.5 + 0.2 * progress
        anticipation_weight = 0.5 - 0.2 * progress
        proximity_penalty = 0.2 * progress * (distance_to_destination / (1 + distance_to_current))

        score = immediate_weight * distance_to_current + anticipation_weight * anticipation_factor + proximity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
