def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    progress = (total_nodes - remaining_nodes) / total_nodes
    exploration_weight = 0.7 * (1 - progress) + 0.3 * progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        local_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        global_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (distance_to_destination + 1)

        nearest_neighbor_score = 1 / (1 + distance_to_current)
        centrality_score = 1 / (1 + local_centrality)
        potential_score = global_potential

        combined_score = (1 - exploration_weight) * nearest_neighbor_score + exploration_weight * (0.6 * centrality_score + 0.4 * potential_score)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
