def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_weight = max(0.1, 1.0 - (remaining_nodes / (remaining_nodes + 1)))
    exploitation_weight = 1.0 - exploration_weight

    scores = []
    nodes = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic centrality penalty scaling with remaining nodes
        centrality_penalty = (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0) * (remaining_nodes / (remaining_nodes + 1))

        # Destination proximity bonus
        destination_bonus = 1.0 / (1.0 + destination_distance)

        # Normalized score calculation
        score = (exploration_weight * (1.0 / (1.0 + immediate_distance)) +
                 exploitation_weight * (future_potential * destination_bonus) -
                 0.3 * centrality_penalty)

        scores.append(score)
        nodes.append(node)

    # Probabilistic selection based on normalized scores
    if scores:
        max_score = max(scores)
        min_score = min(scores)
        normalized_scores = [(s - min_score) / (max_score - min_score + 1e-10) for s in scores]
        total = sum(normalized_scores)
        if total > 0:
            normalized_scores = [s / total for s in normalized_scores]
            next_node = random.choices(nodes, weights=normalized_scores, k=1)[0]
        else:
            next_node = random.choice(nodes)
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
