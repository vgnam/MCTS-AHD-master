import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 0.7 * (1 - progress)
    exploitation_weight = 0.3 + 0.4 * progress

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        path_history_penalty = 1 / (1 + sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node))

        exploration_score = (centrality / (1 + distance_to_current)) * exploration_weight
        exploitation_score = (1 / (1 + distance_to_current)) * exploitation_weight
        proximity_penalty = (distance_to_destination / (1 + distance_to_current)) * 0.5 * (1 - progress)

        score = (exploration_score + exploitation_score) - proximity_penalty - path_history_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
