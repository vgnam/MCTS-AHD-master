importance, while employing **hierarchical lookahead** and **adaptive weight normalization** to refine node selection dynamically.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    progress_factor = 1.0 - (remaining_count / total_nodes) ** 1.5

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_nodes
            max_distance = max(distance_matrix[node][n] for n in unvisited_nodes)
            min_distance = min(distance_matrix[node][n] for n in unvisited_nodes)
            distance_range = max_distance - min_distance if max_distance > min_distance else 1
            normalized_centrality = (node_centrality - min_distance) / distance_range
        else:
            avg_distance = 0
            normalized_centrality = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_weight = 0.3 + 0.7 * progress_factor

        lookahead_depth = max(1, remaining_count // 3)
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.5 - 0.15 * progress_factor
        lookahead_weight = 0.3 + 0.2 * progress_factor
        centrality_weight = 0.4 * (1.0 - progress_factor)

        distance_sensitivity = 1.0 - (immediate_distance / (sum(distance_matrix[current_node]) / total_nodes))
        score = immediate_weight * immediate_distance + lookahead_weight * (immediate_distance - avg_neighbor_distance) - centrality_weight * normalized_centrality
        score *= (1.0 + connectivity_weight * connectivity / (total_nodes - 1)) * (1.0 + distance_sensitivity)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
