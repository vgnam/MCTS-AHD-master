def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_ratio = float('inf')
    dynamic_weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Adjusts as unvisited nodes decrease
    decay_factor = 0.7 * (1 - dynamic_weight)  # Higher decay as fewer nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            ratio = float('inf')
        else:
            weighted_product = distance_to_current * (distance_to_destination ** decay_factor)
            sum_distances = distance_to_current + distance_to_destination
            ratio = weighted_product / (sum_distances * dynamic_weight)  # Normalized ratio

        if ratio < min_ratio:
            min_ratio = ratio
            next_node = node

    return next_node
