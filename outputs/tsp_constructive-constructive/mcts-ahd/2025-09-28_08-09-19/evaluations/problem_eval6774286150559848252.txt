def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in remaining_nodes)
        else:
            avg_distance = 0
            connectivity = 0
            centrality = 0

        influence = (centrality * connectivity) / (centrality + connectivity + 1e-6) if (centrality + connectivity) > 0 else 0

        lookahead_depth = min(5, remaining_count // 2) if remaining_count > 4 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        future_variability = sum(abs(distance_matrix[node][n] - avg_distance) for n in nearest_neighbors) / (len(nearest_neighbors) + 1e-6) if nearest_neighbors else 0

        immediate_weight = 0.4 + 0.2 * visited_ratio
        influence_weight = 0.4 * (1 - visited_ratio)
        penalty_weight = 0.2 * (1 - visited_ratio)

        score = immediate_weight * (immediate_distance - avg_distance) + influence_weight * (influence * immediate_distance)
        penalty = 1 + (0.3 * future_variability / (immediate_distance + 1e-6)) * (1 - visited_ratio)
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
