def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Dynamic lookahead depth based on remaining nodes
        remaining_nodes = unvisited_nodes - {node}
        lookahead_depth = min(2, len(remaining_nodes))  # Max depth of 2, but adjusts with remaining nodes

        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            for _ in range(lookahead_depth):
                if not next_candidates:
                    break
                next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
                lookahead_distance += distance_matrix[node][next_candidate]
                next_candidates.remove(next_candidate)

        # Dynamic weight based on remaining nodes (decreases as problem shrinks)
        weight = 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
        score = immediate_distance + weight * lookahead_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
