import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / len(distance_matrix)  # Decreases as nodes are visited
    scores = []
    nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic penalty based on node's position relative to current and destination
        penalty = max(0, distance_to_current - 1.5 * distance_matrix[current_node][destination_node])

        # Score combining distance to current, distance to destination, and penalty
        score = (distance_to_current + (1 - temperature) * distance_to_destination) + penalty
        scores.append(score)
        nodes.append(node)

    # Convert scores to probabilities using softmax with temperature
    min_score = min(scores)
    adjusted_scores = [score - min_score for score in scores]  # Avoid numerical instability
    exp_scores = [math.exp(-s / temperature) for s in adjusted_scores]
    sum_exp = sum(exp_scores)
    probabilities = [e / sum_exp for e in exp_scores]

    # Select node based on probabilities
    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
