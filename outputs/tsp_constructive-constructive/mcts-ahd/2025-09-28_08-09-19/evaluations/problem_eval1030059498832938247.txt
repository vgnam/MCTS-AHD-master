def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
            variance = 0
        else:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
            avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
            variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        # Dynamic weight using sigmoid function
        remaining_nodes = len(unvisited_nodes)
        dynamic_weight = 1 / (1 + math.exp(0.5 * (remaining_nodes - 5)))  # Shifts focus from local to global

        # Penalty based on distance variance
        penalty = 0.7 * variance if distance_to_current > 1.5 * avg_distance else 0

        score = distance_to_current + (dynamic_weight * avg_distance) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
