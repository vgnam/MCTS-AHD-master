def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.8 * avg_distance_to_all)
        density_variance = sum((distance_matrix[node][n] - avg_distance_to_all) ** 2 for n in unvisited_nodes) / len(unvisited_nodes)

        outlier_resistance = 1.0 if density_variance < 0.5 * avg_distance_to_all else 1.0 + (density_variance / avg_distance_to_all) * 0.3

        connectivity_score = (local_density / (1 + density_variance)) * (1.0 + (remaining_nodes / total_nodes) * 0.5)

        score = (distance_to_current + avg_distance_to_all) * connectivity_score * outlier_resistance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
