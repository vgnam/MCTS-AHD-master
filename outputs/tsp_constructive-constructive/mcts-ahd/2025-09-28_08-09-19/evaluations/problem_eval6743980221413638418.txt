def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        novelty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 1.5 * centrality) / len(unvisited_nodes) if unvisited_nodes else 0

        immediate_weight = 0.6 * (1 - progress)
        future_weight = 0.2 + 0.3 * (1 - progress)
        novelty_weight = 0.1 * progress

        harmonic_immediate = 2 / (1 / distance_to_current + 1 / (centrality + 1e-6))
        harmonic_future = 2 / (1 / distance_to_destination + 1 / (centrality + 1e-6))

        score = (immediate_weight * harmonic_immediate +
                 future_weight * harmonic_future +
                 novelty_weight * novelty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
