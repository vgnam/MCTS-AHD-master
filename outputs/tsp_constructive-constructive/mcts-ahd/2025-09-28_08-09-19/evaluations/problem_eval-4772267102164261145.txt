def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.3 * avg_distance)
            node_centrality = avg_distance
            lookahead_depth = min(3, remaining_count) if remaining_count > 2 else 1
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
            path_history_penalty = sum(distance_matrix[current_node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0
            connectivity = 0
            node_centrality = 0
            avg_neighbor_distance = 0
            path_history_penalty = 0

        connectivity_factor = 1.0 + (connectivity / (remaining_count + 1e-6)) * 0.5
        immediate_weight = 0.7 - 0.3 * visited_ratio
        centrality_weight = 0.2 * (0.5 + 0.3 * visited_ratio)
        penalty_weight = 0.3 * (0.4 + 0.2 * visited_ratio)

        score = immediate_weight * (immediate_distance - avg_distance) + centrality_weight * (node_centrality * connectivity_factor)
        penalty = 1 + (0.4 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio) + (0.2 * path_history_penalty / (immediate_distance + 1e-6)) * visited_ratio
        score *= penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
