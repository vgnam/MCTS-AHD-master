def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 5))  # Dynamic exploration adjustment

    for node in unvisited_nodes:
        # Immediate distance component
        distance_to_current = distance_matrix[current_node][node]

        # Future connectivity: node centrality (average distance to other unvisited nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Path diversity: average distance from current path to node
        path_diversity = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        # Sigmoid-based penalty for nodes near destination
        penalty = 1.0 / (1.0 + math.exp(-5 * (distance_matrix[node][destination_node] / (centrality + 1e-5))))

        # Dynamic weights
        immediate_weight = 0.5 + 0.3 * exploration_factor
        centrality_weight = 0.3 + 0.2 * exploration_factor
        diversity_weight = 0.2 * exploration_factor

        # Combined score
        score = (immediate_weight * distance_to_current +
                 centrality_weight * centrality +
                 diversity_weight * path_diversity) * (1.0 - penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
