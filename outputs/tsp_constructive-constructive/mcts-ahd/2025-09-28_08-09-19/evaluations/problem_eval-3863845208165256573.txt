def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        detour_penalty = immediate_distance + distance_to_destination - distance_matrix[current_node][destination_node]

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            future_accessibility = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            future_accessibility = 0

        score = (0.5 * immediate_distance) + (0.3 * detour_penalty) + (0.2 * future_accessibility)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
