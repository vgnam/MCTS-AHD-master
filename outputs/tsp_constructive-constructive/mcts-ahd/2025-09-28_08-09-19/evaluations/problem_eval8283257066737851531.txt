def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)

    # Calculate centroid of unvisited nodes
    centroid_x = sum(node % int(len(distance_matrix)**0.5) for node in unvisited_nodes) / remaining_count
    centroid_y = sum(node // int(len(distance_matrix)**0.5) for node in unvisited_nodes) / remaining_count

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Dynamic lookahead depth based on remaining nodes
        lookahead_depth = min(3, remaining_count // 2)
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            # Locality-aware lookahead: prioritize nodes closer to centroid
            local_remaining = {n for n in remaining_nodes if (n % int(len(distance_matrix)**0.5) - centroid_x)**2 +
                             (n // int(len(distance_matrix)**0.5) - centroid_y)**2 < 4}
            if local_remaining:
                avg_distance = sum(distance_matrix[node][n] for n in local_remaining) / len(local_remaining)
            else:
                avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0

        # Edge density calculation
        edge_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * avg_distance) / remaining_count

        # Dynamic weight adjustment based on path progress
        progress_factor = 1.0 - (remaining_count / len(unvisited_nodes + {current_node}))
        immediate_weight = 0.5 + 0.3 * progress_factor
        lookahead_weight = 0.3 - 0.1 * progress_factor
        density_weight = 0.2 + 0.1 * progress_factor

        score = (immediate_weight * immediate_distance +
                lookahead_weight * (immediate_distance - avg_distance) +
                density_weight * edge_density)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
