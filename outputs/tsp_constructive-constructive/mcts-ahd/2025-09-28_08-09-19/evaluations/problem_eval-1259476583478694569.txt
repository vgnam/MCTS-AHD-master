def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # Including current node

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = float('inf')
        else:
            # Calculate node degree (number of connections to unvisited nodes)
            degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
            degree_factor = 1.0 + (degree / (total_nodes - 1)) * 0.5  # Normalize by max possible degree

            # Dynamic weight based on remaining nodes and degree
            weight = 1.0 + (remaining_nodes / total_nodes) * (1.0 / (1.0 + degree_factor))

            # Novel scoring mechanism
            score = (distance_to_current * degree_factor) / (distance_to_destination * (1 + remaining_nodes / total_nodes))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
