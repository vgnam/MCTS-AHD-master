def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    decay_factor = 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Dynamic decay factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = distance_to_current * (distance_to_destination ** decay_factor)

        # Penalize revisiting nodes to avoid cycles
        if node in unvisited_nodes and node != destination_node:
            score *= 1.1  # Small penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
