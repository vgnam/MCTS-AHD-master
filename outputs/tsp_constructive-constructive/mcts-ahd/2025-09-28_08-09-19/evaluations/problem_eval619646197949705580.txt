def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * avg_distance)
            node_centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0
            connectivity = 0
            node_centrality = 0

        exploration_factor = (1 - visited_ratio) ** 2
        exploitation_factor = visited_ratio ** 1.5
        connectivity_weight = 0.5 * (0.7 + 0.3 * exploitation_factor)
        centrality_weight = 0.3 * (0.5 + 0.5 * exploration_factor)

        lookahead_depth = min(4, remaining_count // 3) if remaining_count > 3 else 1
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        path_potential = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        diversity_score = len(remaining_nodes) / (1 + sum(distance_matrix[node][n] for n in remaining_nodes) / (len(remaining_nodes) + 1e-6))

        score = (immediate_distance * (0.6 - 0.2 * exploitation_factor) +
                 connectivity_weight * (connectivity * (1 + 0.5 * exploitation_factor)) +
                 centrality_weight * (node_centrality * (1 - 0.5 * exploration_factor)))

        penalty = 1 + (0.4 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio)
        score *= penalty * (1 + 0.3 * diversity_score * exploration_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
