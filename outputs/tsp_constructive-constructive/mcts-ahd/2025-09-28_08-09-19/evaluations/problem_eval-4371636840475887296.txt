def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_decay = 0.7
    progress_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))  # Smooth progress tracking

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        # Non-linear distance transformation
        transformed_current = dist_current ** (1.0 + progress_factor)
        transformed_dest = dist_dest ** (1.0 + progress_factor)

        # Adaptive weight scaling
        weight_factor = (1.0 - progress_factor) * base_decay + progress_factor * (1.0 - base_decay)

        # Hybrid scoring function
        score = (transformed_current * weight_factor) + (transformed_dest * (1.0 - weight_factor))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
