def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)

    # Dynamic weighting based on remaining nodes (sigmoid function)
    weight = 1 / (1 + math.exp(-0.5 * (remaining_count - 5)))
    immediate_weight = weight
    lookahead_weight = 1 - weight

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            visited_in_lookahead = set()
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                # Penalize revisiting nodes in lookahead
                candidates = [(x, distance_matrix[current][x] + 100 if x in visited_in_lookahead else distance_matrix[current][x])
                             for x in remaining_nodes]
                next_candidate = min(candidates, key=lambda x: x[1])[0]
                lookahead_distance += distance_matrix[current][next_candidate]
                visited_in_lookahead.add(next_candidate)
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Dynamic score with penalty for high lookahead distances
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
