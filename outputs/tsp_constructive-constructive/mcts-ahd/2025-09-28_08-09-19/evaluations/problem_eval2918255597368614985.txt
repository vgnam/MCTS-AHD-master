def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            centrality = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * avg_distance)
        else:
            avg_distance = 0
            connectivity = 0
            centrality = 0

        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.3
        centrality_factor = 1.0 + (centrality / (total_nodes - 1)) * 0.5

        decay_factor = np.exp(-visited_ratio * 2)
        normalized_distance = immediate_distance / (avg_distance + 1e-6)

        score = (0.4 * normalized_distance) + (0.3 * (1 / (connectivity_factor + 1e-6))) + (0.3 * (1 / (centrality_factor + 1e-6)))
        score *= decay_factor

        scores.append((node, score))

    if not scores:
        return destination_node

    scores.sort(key=lambda x: x[1])
    probabilities = np.exp(-np.array([s[1] for s in scores]))
    probabilities /= probabilities.sum()
    next_node = np.random.choice([s[0] for s in scores], p=probabilities)

    return next_node
