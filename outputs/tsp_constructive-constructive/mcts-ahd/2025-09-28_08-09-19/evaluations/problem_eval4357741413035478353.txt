def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    lookahead_depth = min(4, remaining_count) if remaining_count > 3 else 1
    avg_total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_count

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
        node_centrality = avg_remaining_distance

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.1 * avg_remaining_distance)
        connectivity_bonus = 1.0 + (connectivity / remaining_count) * 0.5

        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        proximity_weight = 0.5 + 0.2 * visited_ratio
        connectivity_weight = 0.4 - 0.1 * visited_ratio
        centrality_penalty = 0.3 * (1.0 - visited_ratio)
        penalty_weight = 0.2 * visited_ratio

        score = proximity_weight * immediate_distance + connectivity_weight * (immediate_distance - avg_remaining_distance) + centrality_penalty * node_centrality
        penalty = 1 - (0.3 * avg_neighbor_distance / (immediate_distance + 1e-6)) * visited_ratio
        score *= penalty * connectivity_bonus

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
