def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # Assuming one node is visited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_matrix[node][destination_node]
        else:
            # Calculate node centrality (average distance to unvisited nodes)
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

            # Calculate connectivity (number of nearby nodes)
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * distance_to_current) / remaining_nodes

            # Dynamic weights based on remaining nodes
            weight_factor = 0.5 * (remaining_nodes / total_nodes)
            immediate_weight = 0.6 * (1 - weight_factor)
            centrality_weight = 0.2 * (1 - weight_factor)
            connectivity_weight = 0.2 * (1 - weight_factor)

            # Score combines weighted components
            score = (immediate_weight * distance_to_current +
                    centrality_weight * centrality +
                    connectivity_weight * connectivity)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
