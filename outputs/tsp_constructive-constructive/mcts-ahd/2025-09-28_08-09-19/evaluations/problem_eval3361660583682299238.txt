def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_phase = max(0.1, 0.7 * (remaining_count / total_nodes))

    density_threshold = 1.3 if remaining_count > 3 else 1.1
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            scores.append((node, immediate_distance))
            continue

        node_density = sum(1 for n in remaining_nodes if distance_matrix[node][n] < density_threshold * immediate_distance) / len(remaining_nodes)
        avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

        connectivity_score = 1.0 / (1.0 + node_density)
        centrality_score = avg_remaining_distance / max_distance

        normalized_distance = immediate_distance / max_distance
        distance_weight = 0.5 + 0.3 * exploration_phase
        connectivity_weight = 0.3 + 0.2 * (1 - exploration_phase)
        centrality_weight = 0.2 + 0.1 * (1 - exploration_phase)

        score = (distance_weight * normalized_distance +
                connectivity_weight * connectivity_score +
                centrality_weight * centrality_score)

        scores.append((node, score))

    scores.sort(key=lambda x: x[1])
    if scores:
        next_node = scores[0][0]

    return next_node
