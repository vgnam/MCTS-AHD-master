def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = min(0.3, (remaining_count / total_nodes) * 0.5)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
        else:
            avg_distance = 0
            node_centrality = 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.1 * avg_distance)
        connectivity_factor = 1.0 + (connectivity / (remaining_count + 1)) * 0.6

        immediate_weight = 0.6 - 0.1 * exploration_factor
        penalty_weight = 0.4 * (1 + exploration_factor)

        score = immediate_weight * immediate_distance + penalty_weight * (node_centrality * connectivity_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
