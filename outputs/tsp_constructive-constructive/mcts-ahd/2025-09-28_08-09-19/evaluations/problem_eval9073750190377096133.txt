def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        remaining_nodes_after = unvisited_nodes - {node}
        if remaining_nodes_after:
            next_candidates = remaining_nodes_after.copy()
            if len(next_candidates) >= 2:
                next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
                next_candidates.remove(next_candidate)
                second_candidate = min(next_candidates, key=lambda x: distance_matrix[next_candidate][x])
                lookahead_distance = distance_matrix[node][next_candidate] + distance_matrix[next_candidate][second_candidate]
            else:
                next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
                lookahead_distance = distance_matrix[node][next_candidate]

        immediate_weight = 0.7
        lookahead_weight = 0.3

        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
