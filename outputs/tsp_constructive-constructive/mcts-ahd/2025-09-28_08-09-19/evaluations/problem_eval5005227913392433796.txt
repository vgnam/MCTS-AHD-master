def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0
            weight_factor = 0.4 + 0.6 * (1.0 / (1.0 + math.exp(-0.5 * (remaining_nodes - 5))))
            immediate_weight = 0.5 * weight_factor
            centrality_weight = 0.5 * (1 - weight_factor)
            penalty_weight = 0.3 * (1.0 - centrality_weight)

            lookahead_penalty = 0.0
            if remaining_nodes > 2:
                closest_neighbor = min((distance_matrix[node][n], n) for n in unvisited_nodes if n != node)[1]
                lookahead_penalty = 0.1 * distance_matrix[closest_neighbor][destination_node] / (1.0 + distance_matrix[node][closest_neighbor])

            penalty = penalty_weight * (distance_to_destination / (1.0 + distance_to_current)) + lookahead_penalty
            score = (immediate_weight * distance_to_current + centrality_weight * centrality) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
