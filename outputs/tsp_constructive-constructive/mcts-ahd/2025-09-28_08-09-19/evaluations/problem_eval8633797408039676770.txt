def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = remaining_count / (remaining_count + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        lookahead_depth = 2
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_weight = 0.1 + 0.2 * exploration_factor

        immediate_weight = 0.3 + 0.3 * exploration_factor
        lookahead_weight = 0.2 + 0.3 * (1.0 - exploration_factor)
        centrality_penalty = centrality_weight * node_centrality

        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth) - centrality_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
