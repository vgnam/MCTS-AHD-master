def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.3 * remaining_nodes / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.5
        future_weight = 0.4
        exploration_weight = 0.1 + exploration_factor

        score = (immediate_weight * distance_to_current +
                 future_weight * avg_future_distance -
                 exploration_weight * distance_to_destination)

        scores.append((node, score))

    if not scores:
        return destination_node

    max_score = max(score[1] for score in scores)
    min_score = min(score[1] for score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-10)) for node, score in scores]

    total_prob = sum(math.exp(s) for _, s in normalized_scores)
    probabilities = [math.exp(s) / total_prob for _, s in normalized_scores]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]

    return next_node
