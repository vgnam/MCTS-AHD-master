importance" metric based on historical visitation patterns, a "path coherence" factor to maintain consistent direction, and a "hierarchical lookahead" mechanism that prioritizes both immediate and long-term connectivity, while dynamically adjusting weights to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_progress = 1.0 - (remaining_count / total_nodes) ** 1.5

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_importance = sum(1 / (distance_matrix[node][n] + 1e-6) for n in remaining_nodes) / len(remaining_nodes)
            path_coherence = (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) / (distance_matrix[current_node][destination_node] + 1e-6)
        else:
            avg_distance = 0
            node_importance = 0
            path_coherence = 1.0

        lookahead_depth = min(2, max(1, remaining_count // 3))
        nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth] if remaining_nodes else []
        avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

        immediate_weight = 0.7 - 0.2 * exploration_progress
        importance_weight = 0.3 + 0.3 * exploration_progress
        coherence_weight = 0.5 * (1.0 - exploration_progress)
        penalty_weight = 0.2 * (1.0 - exploration_progress)

        score = (immediate_weight * immediate_distance +
                importance_weight * (1.0 / (node_importance + 1e-6)) -
                coherence_weight * path_coherence)

        penalty = 1.0 + (0.3 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1.0 - exploration_progress)
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
