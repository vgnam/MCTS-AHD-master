def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes
    temperature = 1 - progress

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        exploration_factor = (temperature ** 2) * (centrality / (1 + distance_to_current))

        immediate_weight = 0.3 * (1 - temperature)
        future_weight = 0.5 * temperature
        proximity_weight = 0.2 * (1 - temperature)

        score = (immediate_weight * (1 / (1 + distance_to_current)) +
                 future_weight * exploration_factor -
                 proximity_weight * (distance_to_destination / (1 + distance_to_current)))

        scores.append((score, node))

    if temperature > 0.7:
        scores = [(s - temperature * 0.5, n) for s, n in scores]

    scores.sort(reverse=True, key=lambda x: x[0])
    selected = scores[0][1] if temperature == 0 else random.choices(
        [n for _, n in scores[:min(3, len(scores))]],
        weights=[s for s, _ in scores[:min(3, len(scores))]],
        k=1
    )[0]

    return next_node
