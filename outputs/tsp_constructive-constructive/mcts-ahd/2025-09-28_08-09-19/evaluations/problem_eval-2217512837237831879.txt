def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = - (distance_to_current + distance_to_destination)
        else:
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_factor = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * avg_future_distance) / remaining_nodes

            local_weight = 0.5 * (remaining_nodes / (remaining_nodes + 2))
            global_weight = 1 - local_weight

            path_closure_factor = 0.7 * (-distance_to_destination) + 0.3 * connectivity_factor

            score = (local_weight * (-distance_to_current) +
                     global_weight * (0.5 * (-avg_future_distance) + 0.5 * path_closure_factor))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
