def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_length = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Dynamic lookahead (3 steps ahead)
        remaining_nodes = unvisited_nodes - {node}
        lookahead_distance = 0
        if remaining_nodes:
            next_candidates = remaining_nodes.copy()
            for _ in range(3):  # 3-step lookahead
                if not next_candidates:
                    break
                next_candidate = min(next_candidates, key=lambda x: distance_matrix[node][x])
                lookahead_distance += distance_matrix[node][next_candidate]
                next_candidates.remove(next_candidate)

        # Dynamic connectivity: variance of nearby distances
        nearby_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(unvisited_nodes))]
        nearby_distances = [distance_matrix[node][n] for n in nearby_nodes]
        connectivity_metric = (sum((d - sum(nearby_distances)/len(nearby_distances))**2 for d in nearby_distances) / len(nearby_distances)) if nearby_nodes else 0

        # Dynamic weight based on remaining path length
        weight_immediate = 0.6 + 0.4 * (1 - remaining_length / (remaining_length + 1))
        weight_connectivity = 0.4 - 0.4 * (1 - remaining_length / (remaining_length + 1))

        # Score calculation
        score = weight_immediate * immediate_distance + weight_connectivity * (lookahead_distance + connectivity_metric)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
