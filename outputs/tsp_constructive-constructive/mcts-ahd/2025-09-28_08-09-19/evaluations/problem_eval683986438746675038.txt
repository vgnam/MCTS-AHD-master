def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.8 ** (remaining_nodes / (remaining_nodes + 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.6 * (1 - exploration_factor)
        future_weight = 0.4 * exploration_factor
        penalty_weight = 0.2 * exploration_factor

        reward = (distance_to_destination / (1 + distance_to_current)) * (1 - exploration_factor)
        penalty = penalty_weight * (distance_to_destination / (1 + avg_future_distance)) if avg_future_distance > 0 else 0
        memory_bonus = 0.3 * (distance_to_current / (1 + sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes))) if unvisited_nodes else 0

        score = immediate_weight * reward - future_weight * avg_future_distance - penalty + memory_bonus

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
