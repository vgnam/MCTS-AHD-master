def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    lookahead_depth = min(5, max(2, remaining_count // 2))
    exploration_rate = 0.2 * (1.0 - (remaining_count / len(unvisited_nodes)))

    avg_total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_count

    candidate_scores = []
    candidate_nodes = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_remaining_distance)
        connectivity_factor = 1.0 + (connectivity / remaining_count) * 0.6

        deviation_penalty = abs(immediate_distance - avg_total_distance) * (1.0 + (remaining_count / len(unvisited_nodes)) * 0.4)

        novelty_factor = (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)) if remaining_nodes else 0

        base_score = 0.35 * (immediate_distance - avg_remaining_distance) + 0.35 * (immediate_distance * connectivity_factor) + 0.2 * deviation_penalty - 0.1 * novelty_factor

        exploration_bonus = exploration_rate * (1.0 - (connectivity / remaining_count)) if connectivity > 0 else 0

        final_score = base_score - exploration_bonus

        candidate_nodes.append(node)
        candidate_scores.append(final_score)

    if not candidate_nodes:
        return destination_node

    min_score = min(candidate_scores)
    max_score = max(candidate_scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in candidate_scores]

    total_weight = sum(normalized_scores)
    selection_probabilities = [weight / total_weight for weight in normalized_scores]

    next_node = np.random.choice(candidate_nodes, p=selection_probabilities)

    return next_node
