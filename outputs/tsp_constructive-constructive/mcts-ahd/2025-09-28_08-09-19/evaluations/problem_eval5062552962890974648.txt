def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    time_decay = 1 - (visited_ratio ** 2)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            lookahead_scores = []
            for next_candidate in unvisited_nodes:
                if next_candidate != node:
                    distance_to_next = distance_matrix[node][next_candidate]
                    distance_from_next = distance_matrix[next_candidate][destination_node]
                    lookahead_scores.append(distance_to_next + distance_from_next)

            avg_lookahead = sum(lookahead_scores) / len(lookahead_scores) if lookahead_scores else 0
            revisit_penalty = 1.0 if node in [current_node] else 0.0

            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(4, len(unvisited_nodes))]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            weight_factor = 0.5 + 0.5 * (1 - visited_ratio)
            immediate_weight = 0.4 * weight_factor
            lookahead_weight = 0.6 * (1 - weight_factor)

            score = immediate_weight * distance_to_current + lookahead_weight * avg_lookahead + revisit_penalty
            penalty = 1 + (avg_neighbor_distance / (distance_to_current + 1e-6)) * time_decay
            score *= penalty

            if len(nearest_neighbors) >= 2:
                second_nearest = nearest_neighbors[1]
                score += 0.2 * distance_matrix[node][second_nearest]

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
