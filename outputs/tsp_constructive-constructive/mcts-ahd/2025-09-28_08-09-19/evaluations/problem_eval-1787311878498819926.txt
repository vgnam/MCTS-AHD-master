def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
            max_distance = 0
        else:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            max_distance = max(distance_matrix[node][n] for n in unvisited_nodes)

        # Dynamic weight that decreases more aggressively
        remaining_nodes = len(unvisited_nodes)
        dynamic_weight = 0.3 * (1 - 0.2 * (10 - min(remaining_nodes, 10)))

        # Penalty for excessively long distances
        penalty = 0.5 * distance_to_current if distance_to_current > 2 * avg_distance else 0

        # Score combines distance, weighted global optimization, and penalty
        score = distance_to_current + (dynamic_weight * (0.6 * avg_distance + 0.4 * max_distance)) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
