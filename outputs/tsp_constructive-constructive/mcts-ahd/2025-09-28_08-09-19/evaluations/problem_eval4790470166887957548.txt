def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Memory of recently visited nodes (last 3)
    recent_visits = []
    if hasattr(select_next_node, 'memory'):
        recent_visits = select_next_node.memory[-3:]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = -distance_to_current - distance_to_destination
        else:
            # Calculate node centrality (normalized by local density)
            local_nodes = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] < 2.0 * distance_to_current]
            local_density = len(local_nodes) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
            centrality = (1.0 / (sum(distance_matrix[node][n] for n in local_nodes) / len(local_nodes))) if local_nodes else 0

            # Calculate connectivity (normalized by local density)
            connectivity = local_density

            # Calculate exploration bonus (favors nodes with many unvisited neighbors)
            exploration_bonus = (len(local_nodes) / remaining_nodes) ** 2

            # Dynamic weights based on remaining nodes and local density
            weight_factor = 0.3 + 0.7 * (remaining_nodes / (remaining_nodes + 5)) * (1 - local_density)
            immediate_weight = 0.3 * weight_factor
            centrality_weight = 0.4 * (1 - weight_factor)
            connectivity_weight = 0.2 * (1 - weight_factor)
            exploration_weight = 0.1 * (1 - weight_factor)

            # Penalty for nodes too close to destination or recently visited
            penalty = 0
            if distance_to_destination < 1.2 * distance_to_current:
                penalty += 0.5 * (1.2 * distance_to_current - distance_to_destination)
            if node in recent_visits:
                penalty += 0.3 * distance_to_current

            # Score combines weighted components with exploration bonus and penalty
            score = (immediate_weight * (-distance_to_current) +
                     centrality_weight * centrality +
                     connectivity_weight * connectivity +
                     exploration_weight * exploration_bonus) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    # Update memory
    if not hasattr(select_next_node, 'memory'):
        select_next_node.memory = []
    if next_node is not None:
        select_next_node.memory.append(next_node)

    return next_node
