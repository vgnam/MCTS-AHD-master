def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if remaining_nodes == 1:
            avg_distance = 0
            penalty = 0
        else:
            distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_distance = sum(distances) / (remaining_nodes - 1)
            penalty = max(distances) - min(distances) if len(distances) > 1 else 0

        connectivity_weight = 1.0 + (1.0 - (remaining_nodes / total_nodes)) * (penalty / (avg_distance + 1e-6)) * 0.5

        score = distance_to_current + (avg_distance + penalty) * connectivity_weight

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
