def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.9 ** (10 - remaining_nodes))  # Dynamic temperature decay

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Node centrality (inverse of average distance to other nodes)
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0

            # Future connectivity (number of nearby nodes)
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * distance_to_current) / remaining_nodes

            # Local search: evaluate small sub-tours
            local_search_score = 0
            if remaining_nodes > 2:
                nearby_nodes = [n for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * distance_to_current and n != node]
                if len(nearby_nodes) >= 2:
                    sub_tour_length = distance_matrix[node][nearby_nodes[0]] + distance_matrix[nearby_nodes[0]][nearby_nodes[1]] + distance_matrix[nearby_nodes[1]][node]
                    local_search_score = 1.0 / sub_tour_length  # Higher for shorter sub-tours

            # Dynamic weights with temperature
            immediate_weight = 0.5 * temperature
            centrality_weight = 0.3 * (1 - temperature)
            connectivity_weight = 0.2 * (1 - temperature)

            # Adaptive penalty scales with remaining nodes and distance to destination
            penalty_factor = 1.0 - (remaining_nodes / (remaining_nodes + 5))
            penalty = penalty_factor * (distance_to_destination / (1.0 + distance_to_current)) if distance_to_current > 0 else 0

            # Score combines components with local search and adaptive penalty
            score = (immediate_weight * distance_to_current +
                     centrality_weight * centrality +
                     connectivity_weight * connectivity +
                     0.1 * local_search_score) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
