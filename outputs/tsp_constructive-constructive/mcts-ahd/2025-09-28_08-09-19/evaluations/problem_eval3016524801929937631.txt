def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1.0 - (remaining_nodes / total_nodes)  # Decreases as nodes are visited

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        if remaining_nodes == 1:
            global_connectivity = 0
        else:
            distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            global_connectivity = sum(distances) / (remaining_nodes - 1)

        # Combine distance and connectivity with temperature modulation
        score = (0.6 * distance_to_current) + (0.4 * global_connectivity)
        scores.append((node, score))

    # Boltzmann distribution selection
    exp_scores = [math.exp(-s[1] / (temperature + 1e-6)) for s in scores]
    total_exp = sum(exp_scores)
    probabilities = [e / total_exp for e in exp_scores]

    # Select node based on probability
    next_node = random.choices([s[0] for s in scores], weights=probabilities, k=1)[0]

    return next_node
