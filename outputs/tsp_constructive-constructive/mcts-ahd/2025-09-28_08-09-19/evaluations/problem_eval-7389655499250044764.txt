def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Dynamic lookahead depth based on remaining nodes
        lookahead_depth = min(4, remaining_count // 2) if remaining_count > 3 else 2
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Weighted score with dynamic lookahead contribution
        weight = 0.6 if remaining_count > 4 else 0.5
        score = weight * immediate_distance + (1 - weight) * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0)
        candidates.append((node, score))

    # Probabilistic selection: higher probability for lower scores
    if candidates:
        scores = [score for _, score in candidates]
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - score) / (max_score - min_score + 1e-10) for _, score in candidates]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]
        next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
        return next_node

    return next_node
