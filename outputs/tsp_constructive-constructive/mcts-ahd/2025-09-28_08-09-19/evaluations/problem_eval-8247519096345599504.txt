def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    # Calculate average and variance of distances from current node to unvisited nodes
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / remaining_nodes if remaining_nodes > 0 else 0
    variance = sum((d - avg_distance) ** 2 for d in distances) / remaining_nodes if remaining_nodes > 0 else 0
    std_dev = variance ** 0.5

    # Dynamic threshold for proximity
    proximity_threshold = avg_distance + 0.5 * std_dev

    # Decaying weight for local/global balance
    visited_ratio = 1 - (remaining_nodes / total_nodes)
    time_decay = 1 - (visited_ratio ** 0.5)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        # Calculate local connectivity: nodes within dynamic threshold
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= proximity_threshold)

        # Calculate average distance to remaining nodes (excluding current)
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_remaining_distance = sum(remaining_distances) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Adaptive connectivity weight: higher for nodes with better local connectivity
        connectivity_weight = 1.0 + (local_connectivity / (total_nodes - 1)) * 0.8

        # Proximity component: prioritize nodes within threshold
        proximity_score = distance_to_current if distance_to_current <= proximity_threshold else 1.5 * distance_to_current

        # Long-term efficiency penalty: discourage nodes that increase average remaining distance
        efficiency_penalty = 1.0 + 0.3 * (avg_remaining_distance / (avg_distance + 1e-6))

        # Local/global balance: favor local choices early, global later
        weight_factor = 0.4 + 0.6 * (1 - visited_ratio)

        # Penalize highly connected nodes with time decay
        penalty = 1 + (0.5 * avg_remaining_distance / (distance_to_current + 1e-6)) * time_decay

        # Combined score: balances proximity, connectivity, efficiency, and penalties
        score = (weight_factor * proximity_score + (1 - weight_factor) * (0.8 * avg_remaining_distance)) * connectivity_weight * efficiency_penalty * penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
