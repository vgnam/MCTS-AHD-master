def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = float('inf')
        else:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            weight = 1.0 + (remaining_nodes / (remaining_nodes + 1)) * (0.5 + 0.5 * (centrality / distance_to_current))
            score = (distance_to_current ** (1.0 / weight)) * (centrality ** weight) / (distance_to_destination ** (1.0 / weight))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
