def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Dynamic lookahead depth based on remaining nodes (up to 3 or half the remaining count)
        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0

        # Weighted score: 70% of (distance_to_current - avg_distance), 30% of immediate_distance
        score = 0.7 * (immediate_distance - avg_distance) + 0.3 * immediate_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
