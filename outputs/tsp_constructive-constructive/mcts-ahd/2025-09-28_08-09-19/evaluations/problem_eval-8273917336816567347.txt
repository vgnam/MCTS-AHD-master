def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    # Calculate average and variance of distances from current node
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / remaining_nodes if remaining_nodes > 0 else 0
    variance = sum((d - avg_distance) ** 2 for d in distances) / remaining_nodes if remaining_nodes > 0 else 0
    std_dev = variance ** 0.5

    # Dynamic threshold for proximity
    proximity_threshold = avg_distance + 0.5 * std_dev

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        # Local connectivity: nodes within dynamic threshold
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= proximity_threshold)

        # Average distance to remaining nodes (excluding current)
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_remaining_distance = sum(remaining_distances) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Dynamic connectivity weight: increases as remaining nodes decrease
        connectivity_weight = 1.0 + (1.0 - (remaining_nodes / total_nodes)) * (local_connectivity / (total_nodes - 1)) * 0.7

        # Proximity component: prioritize nodes within threshold
        proximity_score = distance_to_current if distance_to_current <= proximity_threshold else 1.3 * distance_to_current

        # Efficiency penalty: discourage nodes that increase average remaining distance
        efficiency_penalty = 1.0 + 0.4 * (avg_remaining_distance / (avg_distance + 1e-6))

        # Combined score: balances proximity, connectivity, and efficiency
        score = proximity_score * connectivity_weight * efficiency_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
