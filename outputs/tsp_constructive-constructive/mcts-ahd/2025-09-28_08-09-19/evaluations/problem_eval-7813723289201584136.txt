def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    progress_ratio = 1 - (remaining_count / total_nodes)
    exploration_factor = 1.0 - (progress_ratio ** 2) * 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(distances) / len(distances)
            variance = sum((d - avg_distance) ** 2 for d in distances) / len(distances)
            entropy = variance ** 0.5

            local_cluster = [n for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance]
            cluster_cohesion = len(local_cluster) / (total_nodes - 1)
        else:
            avg_distance = 0
            entropy = 0
            cluster_cohesion = 0

        immediate_weight = 0.5 + 0.4 * exploration_factor
        entropy_weight = 0.3 * (1 - exploration_factor)
        cohesion_weight = 0.7 * progress_ratio

        score = immediate_weight * immediate_distance + entropy_weight * entropy
        score -= cohesion_weight * cluster_cohesion

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
