def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    weight_factor = 1.0 - (1.0 / (1.0 + remaining_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node degree and dynamic centrality penalty
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        max_distance_to_unvisited = max(distance_matrix[node][n] for n in unvisited_nodes) if degree > 0 else 0
        centrality_penalty = (max_distance_to_unvisited / (total_nodes - 1)) * 0.5

        # Dynamic weights with new centrality and proximity factors
        immediate_weight = (1.0 - weight_factor) * 0.6
        centrality_weight = 0.4 + weight_factor * (degree / (total_nodes - 1))
        proximity_weight = 0.4 * (1.0 - weight_factor)

        # Penalize nodes near destination and those with high max distance to unvisited
        penalty = proximity_weight * (1.0 / (1.0 + distance_to_destination)) + centrality_penalty

        # Calculate total score with novel heuristic
        score = -distance_to_current * immediate_weight + (degree * centrality_weight) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
