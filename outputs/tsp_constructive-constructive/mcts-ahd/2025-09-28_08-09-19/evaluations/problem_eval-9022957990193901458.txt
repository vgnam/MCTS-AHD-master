def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - 0.1 * (10 - remaining_count))  # Decreasing temperature

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        # Logarithmic lookahead depth
        lookahead_depth = min(4, max(1, int(math.log2(remaining_count + 1)))) if remaining_count > 1 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Dynamic weight with exploration factor
        weight = 0.6 + 0.2 * temperature
        penalty = 1.0 + 0.1 * (remaining_count / len(unvisited_nodes))  # Penalty for revisiting
        score = weight * immediate_distance + (1 - weight) * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0)
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
