def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    candidates = []

    # Calculate centroid of remaining nodes
    centroid = sum(unvisited_nodes) / remaining_count if unvisited_nodes else 0
    centroid_distances = {node: abs(node - centroid) for node in unvisited_nodes}

    # Dynamic lookahead depth and weights
    lookahead_depth = min(4, remaining_count // 2) if remaining_count > 3 else 1
    weight = 0.5 + 0.2 * (1 - (remaining_count / len(distance_matrix)))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        # Calculate entropy-based adjustment
        entropy = sum(centroid_distances.values()) / len(centroid_distances) if centroid_distances else 0
        entropy_factor = 1 / (1 + entropy)

        # Combined score with probabilistic component
        score = (weight * immediate_distance +
                 (1 - weight) * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) *
                 entropy_factor)

        candidates.append((node, score))

    # Probabilistic selection based on scores
    scores = [1/score for score in [s for _, s in candidates]]
    probabilities = [s/sum(scores) for s in scores]
    next_node = random.choices([n for n, _ in candidates], weights=probabilities, k=1)[0]

    return next_node
