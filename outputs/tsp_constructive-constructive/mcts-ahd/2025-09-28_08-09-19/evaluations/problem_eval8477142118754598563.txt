def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_factor = 1.0 - (remaining_count / total_nodes) ** 2

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            diversity = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0
            node_centrality = 0
            diversity = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.4

        weight = 1.0 + (remaining_count / total_nodes) * connectivity_factor
        immediate_weight = 0.6 - 0.3 * exploration_factor
        centrality_weight = 0.4 * exploration_factor
        diversity_weight = 0.3 * (1.0 - exploration_factor)

        score = immediate_weight * immediate_distance - centrality_weight * node_centrality + diversity_weight * diversity
        score *= weight
        scores.append((node, score))

    if not scores:
        return next_node

    min_score = min(score[1] for score in scores)
    max_score = max(score[1] for score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-9)) for node, score in scores]

    if remaining_count > 5:
        candidates = [node for node, score in normalized_scores if score < 0.5]
        if candidates:
            next_node = random.choice(candidates)
        else:
            next_node = min(normalized_scores, key=lambda x: x[1])[0]
    else:
        next_node = min(normalized_scores, key=lambda x: x[1])[0]

    return next_node
