def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        lookahead_depth = min(3, remaining_nodes // 2) if remaining_nodes > 2 else 1
        remaining_after_node = unvisited_nodes - {node}

        if remaining_after_node:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_after_node) / len(remaining_after_node)
            node_centrality = avg_distance
        else:
            avg_distance = 0
            node_centrality = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * immediate_distance) / remaining_nodes

        exploration_factor = 1.0 - (remaining_nodes / total_nodes) * 0.7
        immediate_weight = 0.5 - 0.2 * exploration_factor
        centrality_weight = 0.2 * (1 - exploration_factor)
        connectivity_weight = 0.3 * (1 - exploration_factor)

        weight_factor = 0.5 + 0.5 * (remaining_nodes / total_nodes)
        penalty_weight = 0.4 * (1.0 - connectivity_weight)
        penalty = penalty_weight * (distance_to_destination / (1.0 + immediate_distance)) if immediate_distance > 0 else 0

        score = (immediate_weight * immediate_distance +
                 centrality_weight * (1.0 / (node_centrality + 1e-6)) +
                 connectivity_weight * connectivity) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
