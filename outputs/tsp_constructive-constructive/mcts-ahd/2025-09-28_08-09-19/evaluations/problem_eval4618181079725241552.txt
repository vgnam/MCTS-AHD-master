def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes

    # Calculate global average neighbor distance for normalization
    global_avg = 0
    if unvisited_nodes:
        all_distances = []
        for node in unvisited_nodes:
            neighbors = [n for n in unvisited_nodes if n != node]
            if neighbors:
                avg = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
                all_distances.append(avg)
        global_avg = sum(all_distances) / len(all_distances) if all_distances else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Local connectivity metric
        neighbors = [n for n in unvisited_nodes if n != node]
        if neighbors:
            sorted_neighbors = sorted(neighbors, key=lambda n: distance_matrix[node][n])
            top_neighbors = sorted_neighbors[:min(3, len(neighbors))]
            local_avg = sum(distance_matrix[node][n] for n in top_neighbors) / len(top_neighbors)
        else:
            local_avg = 0

        # Dynamic weighting based on remaining path length
        weight_factor = 0.7 * (1 - remaining_ratio) + 0.3 * remaining_ratio

        # Hybrid scoring function
        if len(unvisited_nodes) == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Normalize local_avg by global_avg to make it scale-invariant
            normalized_local = local_avg / global_avg if global_avg > 0 else 0
            score = (1 - weight_factor) * distance_to_current + weight_factor * (0.6 * distance_to_destination + 0.4 * normalized_local)

            # Penalty for nodes with disproportionately high neighbor distances
            if normalized_local > 1.5:
                score *= 1.1 + (normalized_local - 1.5) * 0.2

        # Add probabilistic component to balance exploration
        if next_node is None or (score > best_score and np.random.random() > 0.3):
            best_score = score
            next_node = node

    return next_node
