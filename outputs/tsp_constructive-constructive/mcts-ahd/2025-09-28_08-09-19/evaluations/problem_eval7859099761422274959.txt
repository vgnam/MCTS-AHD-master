def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_decay_factor = 0.7
    dynamic_weight = 1.0 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.4
        future_weight = 0.3 * (1.0 - dynamic_weight)
        destination_weight = 0.3

        max_distance = max(distance_to_current, distance_to_destination, 1.0)
        normalized_current = distance_to_current / max_distance
        normalized_future = avg_future_distance / max_distance if avg_future_distance > 0 else 0
        normalized_destination = distance_to_destination / max_distance

        decay_factor = base_decay_factor * (1.0 - dynamic_weight)
        penalty = destination_weight * (normalized_destination ** (1.0 - dynamic_weight))

        score = immediate_weight * normalized_current + future_weight * (normalized_future ** decay_factor) - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
