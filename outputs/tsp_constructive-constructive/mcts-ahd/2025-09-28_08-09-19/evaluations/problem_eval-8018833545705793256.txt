importance, favoring both immediate gains and strategic long-term benefits.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        progress_weight = 1.0 - (progress ** 0.5)
        centrality_weight = 0.3 + 0.4 * (1.0 - progress)
        immediate_weight = 0.6 * progress_weight
        future_weight = 0.3 * (1.0 - progress_weight)

        penalty = 0.2 * node_centrality * (1.0 - progress) if node != destination_node else 0
        score = (immediate_weight * immediate_distance +
                 future_weight * future_connectivity +
                 centrality_weight * node_centrality) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
