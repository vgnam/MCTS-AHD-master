def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / (remaining_count + 1)) * 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
        else:
            avg_distance = 0
            node_centrality = 0

        immediate_weight = 0.6 + 0.3 * exploration_factor
        lookahead_weight = 0.4 * (1.0 - exploration_factor)
        centrality_weight = 0.5 * (1.0 - lookahead_weight)

        score = immediate_weight * immediate_distance + lookahead_weight * (immediate_distance - avg_distance) - centrality_weight * node_centrality

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
