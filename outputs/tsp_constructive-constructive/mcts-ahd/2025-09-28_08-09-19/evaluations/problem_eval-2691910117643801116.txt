def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        else:
            avg_distance = 0
            node_centrality = 0
            connectivity = 0

        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.3
        centrality_weight = 0.7
        connectivity_weight = 0.3
        penalty_weight = 0.1 * (1 - visited_ratio)

        score = centrality_weight * node_centrality + connectivity_weight * (immediate_distance * connectivity_factor)
        penalty = 1 + (0.5 * (immediate_distance / (avg_distance + 1e-6))) * penalty_weight
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
