def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    temperature = 1.0 / len(unvisited_nodes) if unvisited_nodes else 1.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        if len(unvisited_nodes) == 1:
            avg_distance = 0
            penalty = 0
        else:
            distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            if not distances:
                avg_distance = 0
                penalty = 0
            else:
                sum_dist = sum(distances)
                count = len(distances)
                avg_distance = sum_dist / count
                penalty = (max(distances) - min(distances)) / (sum_dist / count) if count > 1 else 0

                # Harmonic mean for balancing
                if avg_distance > 0:
                    harmonic_avg = 2 * avg_distance * penalty / (avg_distance + penalty) if penalty > 0 else avg_distance
                else:
                    harmonic_avg = penalty if penalty > 0 else 0

                avg_distance = harmonic_avg

        # Temperature-adjusted score
        score = distance_to_current + (1 - temperature) * avg_distance + temperature * penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
