importance, adjusting the balance between near-term and long-term optimization based on the remaining unvisited nodes and the current path progress.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_decay_factor = 0.7
    dynamic_weight = 1.0 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Enhanced normalization considering both distances
        max_distance = max(distance_to_current, distance_to_destination, 1.0)
        normalized_current = distance_to_current / max_distance
        normalized_destination = distance_to_destination / max_distance

        # Combined dynamic decay factor
        decay_factor = base_decay_factor * (1.0 - dynamic_weight)
        score = normalized_current * (normalized_destination ** decay_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
