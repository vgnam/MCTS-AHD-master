def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes are visited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality as the average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)

        # Penalty for nodes that were previously skipped (simulated here for demonstration)
        penalty = 0.0
        if node in unvisited_nodes:  # In practice, this would track skipped nodes
            penalty = 0.1 * distance_to_current

        weighted_score = (1 - weight_factor) * distance_to_current + weight_factor * (distance_to_destination + centrality) + penalty

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
