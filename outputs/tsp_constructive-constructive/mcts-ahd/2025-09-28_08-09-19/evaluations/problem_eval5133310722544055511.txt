def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        variance = sum((distance_matrix[node][n] - centrality) ** 2 for n in unvisited_nodes) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0

        exploration_factor = (1 - progress) * (centrality / (1 + distance_to_current)) * (1 + variance)

        immediate_weight = 1 / (1 + math.exp(5 * (progress - 0.5)))
        future_weight = 1 - immediate_weight
        proximity_weight = 0.5 * (1 - progress)

        score = (immediate_weight * (1 / (1 + distance_to_current)) +
                 future_weight * exploration_factor -
                 proximity_weight * (distance_to_destination / (1 + distance_to_current)))

        scores.append((node, score))

    if not scores:
        return destination_node

    max_score = max(score for _, score in scores)
    min_score = min(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-9)) for node, score in scores]

    candidate_nodes = [node for node, score in normalized_scores if score > 0.3]
    if not candidate_nodes:
        candidate_nodes = [node for node, _ in normalized_scores]

    return next_node
