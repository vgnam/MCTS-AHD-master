def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    visited_ratio = 1 - (remaining_nodes / (remaining_nodes + 1))
    time_decay = 1 - (visited_ratio ** 2)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            # Calculate node centrality (inverse of average distance to other nodes)
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0

            # Calculate future connectivity (average distance to nearest neighbors)
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, remaining_nodes)]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            # Dynamic weights based on remaining nodes
            weight_factor = 0.5 + 0.5 * (1 - visited_ratio)
            immediate_weight = 0.4 * weight_factor
            centrality_weight = 0.4 * (1 - weight_factor)
            connectivity_weight = 0.2 * (1 - weight_factor)

            # Penalty for nodes too close to destination
            penalty_weight = 0.3 * (1.0 - connectivity_weight)
            penalty = penalty_weight * (distance_to_destination / (1.0 + distance_to_current)) if distance_to_current > 0 else 0

            # Score combines weighted components with penalty
            score = (immediate_weight * distance_to_current +
                     centrality_weight * centrality +
                     connectivity_weight * avg_neighbor_distance) - penalty

            # Refine score with time-decayed adjustments
            score *= 1 + (centrality / (distance_to_current + 1e-6)) * time_decay

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
