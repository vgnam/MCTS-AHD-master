def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            global_connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * sum(distance_matrix[node][k] for k in remaining_nodes) / len(remaining_nodes))
            local_neighborhood = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:max(2, remaining_count // 3)]
            neighborhood_score = sum(distance_matrix[node][n] for n in local_neighborhood) / len(local_neighborhood) if local_neighborhood else 0
            avg_global_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            global_connectivity = 0
            neighborhood_score = 0
            avg_global_distance = 0

        exploration_weight = 0.6 - 0.2 * visited_ratio
        exploitation_weight = 0.4 + 0.2 * visited_ratio
        penalty_factor = 1 + (0.5 * abs(neighborhood_score - avg_global_distance) / (immediate_distance + 1e-6)) * (1 - visited_ratio)

        score = (exploration_weight * immediate_distance + exploitation_weight * (global_connectivity / (remaining_count + 1))) * penalty_factor
        score += 0.3 * (neighborhood_score - avg_global_distance) * (1 - visited_ratio)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
