def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)
    temperature = 1.0 - visited_ratio * 0.8

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = avg_distance
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
        else:
            avg_distance = 0
            node_centrality = 0
            avg_neighbor_distance = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_bonus = 1.0 + (connectivity / (total_nodes - 1)) * 0.7

        penalty = 1 + (0.5 * avg_neighbor_distance / (immediate_distance + 1e-6)) * (1 - visited_ratio)

        score = immediate_distance * (0.8 - visited_ratio * 0.6) + avg_distance * (0.3 + visited_ratio * 0.4)
        score *= penalty * connectivity_bonus
        scores.append((node, score))

    if temperature > 0.1:
        probabilities = [math.exp(-score / temperature) for _, score in scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
