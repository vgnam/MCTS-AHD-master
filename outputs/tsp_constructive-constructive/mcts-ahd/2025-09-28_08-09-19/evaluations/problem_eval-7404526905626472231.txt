def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        potential_savings = sum(distance_matrix[n][destination_node] - distance_matrix[n][node] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        distance_weight = 1.0 - (remaining_nodes / total_nodes)
        savings_weight = 1.0 - distance_weight

        score = (distance_weight * distance_to_current) + (savings_weight * potential_savings)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
