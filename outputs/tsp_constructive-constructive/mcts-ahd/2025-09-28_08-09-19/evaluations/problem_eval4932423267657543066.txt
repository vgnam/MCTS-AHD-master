def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    lookahead_depth = min(4, max(1, remaining_count // 3))

    avg_total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_count
    proximity_threshold = 0.9 * avg_total_distance

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.1 * avg_remaining_distance)
        connectivity_factor = 1.0 + (connectivity / remaining_count) * 0.6

        deviation_penalty = abs(immediate_distance - avg_total_distance) * (1.0 + (remaining_count / total_nodes) * 0.4)

        proximity_bonus = 1.0 if immediate_distance < proximity_threshold else 0.7

        score = (0.3 * (1.0 / (1.0 + immediate_distance)) +
                 0.4 * connectivity_factor +
                 0.3 * (1.0 / (1.0 + deviation_penalty))) * proximity_bonus

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
