def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            lookahead_avg = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = lookahead_avg
        else:
            node_centrality = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_all)
        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.3

        weight = 1.0 + (remaining_count / total_nodes) * connectivity_factor
        lookahead_weight = 0.4 * (1.0 - (remaining_count / total_nodes))

        score = (immediate_distance + avg_distance_to_all) * weight + lookahead_weight * node_centrality

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
