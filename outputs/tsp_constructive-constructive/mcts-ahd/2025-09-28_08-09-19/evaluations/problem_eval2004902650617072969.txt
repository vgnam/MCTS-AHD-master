importance scoring with adaptive neighborhood exploration, using a hybrid of proximity-based selection and connectivity-aware penalties, where node importance is recalculated iteratively with diminishing returns to prevent early convergence, while introducing a novelty factor based on historical visit frequencies to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    exploration_decay = 1.0 - (remaining_count / total_nodes) ** 2

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            neighbor_distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(neighbor_distances) / len(remaining_nodes)
            std_dev = (sum((d - avg_distance) ** 2 for d in neighbor_distances) / len(remaining_nodes)) ** 0.5
            novelty_factor = 1.0 / (1.0 + min(neighbor_distances) / (avg_distance + 1e-6))
        else:
            avg_distance = 0
            std_dev = 0
            novelty_factor = 0

        connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < avg_distance + 0.5 * std_dev)
        connectivity_weight = 0.5 * (1.0 + exploration_decay)

        distance_term = (immediate_distance - avg_distance) * (1.0 - 0.3 * exploration_decay)
        connectivity_term = connectivity * connectivity_weight
        novelty_term = novelty_factor * (0.2 + 0.3 * exploration_decay)

        score = distance_term + connectivity_term - novelty_term
        penalty = (1.0 + 0.2 * (1.0 - exploration_decay)) * (1.0 + 0.1 * (connectivity / (remaining_count + 1)))
        score *= penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
