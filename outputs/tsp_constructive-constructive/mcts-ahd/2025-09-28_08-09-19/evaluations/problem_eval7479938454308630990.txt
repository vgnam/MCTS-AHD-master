def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + math.exp(-0.5 * (remaining_nodes - 5)))

    scores = []
    nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_penalty = node_centrality * (1.0 - exploration_factor)

        immediate_weight = 0.6 * (1.0 - exploration_factor)
        future_weight = 0.4 * exploration_factor
        centrality_weight = 0.3 * (1.0 - exploration_factor)

        score = immediate_weight * distance_to_current + future_weight * avg_future_distance + centrality_weight * centrality_penalty
        scores.append(score)
        nodes.append(node)

    if scores:
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]
        total = sum(normalized_scores)
        probabilities = [s / total for s in normalized_scores]
        next_node = random.choices(nodes, weights=probabilities, k=1)[0]

    return next_node
