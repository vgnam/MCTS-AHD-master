def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Calculate current path length
    current_path_length = sum(distance_matrix[current_node][destination_node] for _ in range(len(unvisited_nodes)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Future potential: weighted average of distances to remaining nodes
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Node centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)

        # Dynamic weights based on progress
        immediate_weight = 0.5 * (1 - progress)
        future_weight = 0.3 * (1 - progress)
        centrality_weight = 0.2 * progress

        # Path length penalty
        path_penalty = 0.2 * (current_path_length + distance_to_current) / (len(unvisited_nodes) + 1)

        score = (immediate_weight * distance_to_current +
                 future_weight * future_potential +
                 centrality_weight * centrality +
                 path_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
