def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    dynamic_weight = min(0.5, 0.2 + (0.3 * len(unvisited_nodes) / (len(unvisited_nodes) + 1)))  # Adjusts weight based on remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)  # Measures node's centrality in the unvisited set
        score = distance_to_current + (distance_to_destination * dynamic_weight) - (centrality_score * 0.1)  # Balances proximity, destination, and centrality

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
