def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        proximity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        historical_efficiency = (distance_to_current + distance_to_destination) / (1 + proximity_penalty)

        detour_risk = max(0, (distance_to_current + distance_to_destination) - (distance_matrix[current_node][destination_node] * 1.2))
        predictive_factor = sum(sorted(distance_matrix[node][n] for n in unvisited_nodes if n != node)[:2]) / 2 if len(unvisited_nodes) > 2 else 0

        weight_factor = (remaining_nodes / total_nodes) ** 2.5
        adaptive_weight = 1 - (0.5 * (remaining_nodes / total_nodes))

        score = (adaptive_weight * distance_to_current) + (weight_factor * (historical_efficiency - 0.5 * detour_risk + 0.3 * predictive_factor))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
