def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = distance_to_current + distance_to_destination
        else:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, remaining_nodes)]
            centrality_score = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0

            exploration_weight = 0.8 * (remaining_nodes / (remaining_nodes + 1)) + 0.2
            exploitation_weight = 1 - exploration_weight

            score = (exploration_weight * distance_to_current +
                     exploitation_weight * centrality_score +
                     0.1 * distance_to_destination)

        scores.append(score)

    probabilities = [1.0 / (1.0 + score) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = unvisited_nodes[np.random.choice(len(unvisited_nodes), p=normalized_probs)]

    return next_node
