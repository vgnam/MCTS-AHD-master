def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    progress = 1.0 - (remaining_count / total_nodes)

    # Determine current phase
    if progress < 0.3:
        phase = "distance_minimization"
    elif progress < 0.7:
        phase = "connectivity_optimization"
    else:
        phase = "centrality_maximization"

    # Calculate phase-specific weights
    if phase == "distance_minimization":
        immediate_weight = 0.9
        connectivity_weight = 0.1
        centrality_weight = 0.1
    elif phase == "connectivity_optimization":
        immediate_weight = 0.4
        connectivity_weight = 0.6
        centrality_weight = 0.3
    else:
        immediate_weight = 0.2
        connectivity_weight = 0.3
        centrality_weight = 0.8

    # Calculate node density
    avg_distance = sum(sum(row) for row in distance_matrix) / (len(distance_matrix) ** 2)
    node_density = sum(1 for i in range(len(distance_matrix)) for j in range(i+1, len(distance_matrix))
                      if distance_matrix[i][j] < 1.2 * avg_distance) / (len(distance_matrix) * (len(distance_matrix) - 1) / 2)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Phase potential calculation
        if phase == "distance_minimization":
            phase_potential = immediate_distance
        elif phase == "connectivity_optimization":
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.3 * avg_distance)
            phase_potential = -connectivity / remaining_count
        else:
            node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_nodes
            phase_potential = node_centrality

        # Dynamic weight adjustment
        dynamic_weight = 1.0 + (0.5 * progress if phase == "distance_minimization" else
                               0.8 * (1 - progress) if phase == "connectivity_optimization" else
                               0.3 * progress)

        score = (immediate_weight * immediate_distance +
                connectivity_weight * phase_potential +
                centrality_weight * phase_potential) * dynamic_weight

        # Adjust for node density
        if node_density > 0.7:
            score *= 0.95
        elif node_density < 0.3:
            score *= 1.05

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
