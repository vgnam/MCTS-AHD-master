def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)
    base_decay_factor = 0.7
    dynamic_weight = 1.0 / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        max_distance = max(distance_to_current, distance_to_destination, 1.0)
        normalized_current = distance_to_current / max_distance
        normalized_destination = distance_to_destination / max_distance

        decay_factor = base_decay_factor * (1.0 - dynamic_weight)
        score = (normalized_current ** (1.0 - decay_factor)) * (normalized_destination ** decay_factor)
        scores.append((node, score))

    # Calculate selection probabilities using softmax
    exp_scores = [math.exp(-s) for _, s in scores]
    total = sum(exp_scores)
    probabilities = [e / total for e in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([n for n, _ in scores], weights=probabilities, k=1)[0]

    return next_node
