def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    visited_ratio = 1 - (remaining_count / total_nodes)

    scores = []
    nodes = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
            node_centrality = avg_distance
            lookahead_depth = min(3, remaining_count // 2) if remaining_count > 2 else 1
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:lookahead_depth]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
        else:
            avg_distance = 0
            connectivity = 0
            node_centrality = 0
            avg_neighbor_distance = 0

        connectivity_factor = 1.0 + (connectivity / (remaining_count)) * 0.3
        immediate_weight = 0.5 - 0.1 * visited_ratio
        centrality_weight = 0.3 * (0.5 + 0.2 * visited_ratio)
        exploration_weight = 0.2 * (0.5 + 0.3 * visited_ratio)

        base_score = immediate_weight * immediate_distance + centrality_weight * node_centrality
        exploration_score = exploration_weight * avg_neighbor_distance
        total_score = base_score - exploration_score
        normalized_score = max(0, total_score)

        scores.append(normalized_score)
        nodes.append(node)

    if not scores:
        return unvisited_nodes.pop()

    min_score = min(scores)
    max_score = max(scores)
    score_range = max_score - min_score if max_score != min_score else 1

    decay_factor = 0.1 + 0.9 * visited_ratio
    adjusted_scores = [math.exp(-decay_factor * ((s - min_score) / score_range)) for s in scores]

    total_weight = sum(adjusted_scores)
    probabilities = [s / total_weight for s in adjusted_scores]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
