importance, adaptive distance sensitivity, and a novel "path coherence" factor to balance exploration, exploitation, and destination alignment, while using a non-linear scoring mechanism that emphasizes high-potential nodes early and refines selections as the tour progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Adaptive node importance (higher for nodes with high centrality and low distance)
        node_importance = (1 - progress) * (sum(1 / (1 + d) for d in distance_matrix[node].values()))

        # Adaptive distance sensitivity (more sensitive early, less sensitive later)
        distance_sensitivity = (0.5 + 0.5 * (1 - progress)) * (1 / (1 + distance_to_current))

        # Path coherence factor (penalizes nodes that disrupt smooth path progression)
        path_coherence = 0.3 * (1 - progress) * (abs(distance_to_current - distance_to_destination) / (1 + distance_to_current))

        # Dynamic weight adjustment based on progress
        importance_weight = 0.4 - 0.2 * progress
        distance_weight = 0.5 + 0.3 * progress
        coherence_weight = 0.1 * (1 - progress)

        # Non-linear scoring with progress-dependent exponent
        progress_exponent = 1 + 2 * progress
        score = ((importance_weight * node_importance ** progress_exponent) +
                 (distance_weight * distance_sensitivity ** progress_exponent) -
                 (coherence_weight * path_coherence ** progress_exponent))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
