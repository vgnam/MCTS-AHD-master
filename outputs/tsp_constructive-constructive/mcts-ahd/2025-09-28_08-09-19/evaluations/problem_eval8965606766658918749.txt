def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    progress_factor = 1.0 - (remaining_count / total_nodes) ** 1.5

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = max(1, remaining_count // 2)
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_nodes
            diversity_score = sum(abs(distance_matrix[node][n] - avg_distance) for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0
            node_centrality = 0
            diversity_score = 0

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance)
        connectivity_weight = 0.3 + 0.7 * progress_factor

        immediate_weight = 0.6 - 0.3 * progress_factor
        lookahead_weight = 0.4 * progress_factor
        diversity_weight = 0.5 * (1.0 - progress_factor)

        score = immediate_weight * (1.0 / (1.0 + immediate_distance)) + lookahead_weight * (diversity_score / (1.0 + avg_distance)) - diversity_weight * node_centrality
        score *= (1.0 + connectivity_weight * connectivity / (total_nodes - 1))

        if score > best_score:
            best_score = score
            next_node = node

    if remaining_count > 1 and np.random.random() < 0.1 * progress_factor:
        candidates = list(unvisited_nodes - {next_node})
        if candidates:
            next_node = np.random.choice(candidates)

    return next_node
