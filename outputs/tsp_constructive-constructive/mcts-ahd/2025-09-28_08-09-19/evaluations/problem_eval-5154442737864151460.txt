def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes == 1:
            score = 0.7 * distance_to_current + 0.3 * distance_to_destination
        else:
            lookahead_horizon = max(1, int(remaining_nodes ** 0.5))
            lookahead_scores = []
            for next_candidate in unvisited_nodes:
                if next_candidate != node:
                    path_length = distance_matrix[node][next_candidate]
                    for i in range(1, lookahead_horizon):
                        if len(unvisited_nodes) > i:
                            next_next = list(unvisited_nodes)[i]
                            path_length += distance_matrix[next_candidate][next_next]
                    lookahead_scores.append(path_length)

            avg_lookahead = sum(lookahead_scores) / len(lookahead_scores) if lookahead_scores else 0
            diversity_penalty = 1.0 - (1.0 / (1.0 + len(unvisited_nodes)))

            weight_factor = 0.4 + 0.6 * (remaining_nodes / (remaining_nodes + 3))
            immediate_weight = 0.3 * weight_factor
            lookahead_weight = 0.7 * (1 - weight_factor)

            score = immediate_weight * distance_to_current + lookahead_weight * avg_lookahead + diversity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
