def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        detour_penalty = max(0, (distance_to_current + distance_to_destination) - (distance_matrix[current_node][destination_node] * 1.2))
        continuity_factor = (distance_to_current + distance_to_destination) / (1 + avg_distance_to_unvisited + detour_penalty * 0.7)

        weight_factor = (remaining_nodes / total_nodes) ** 2
        lookahead_factor = sum(min(distance_matrix[node][n] for n in unvisited_nodes if n != node) for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        score = (1 - weight_factor) * distance_to_current * 0.8 + weight_factor * (continuity_factor - 0.3 * distance_to_destination + 0.3 * lookahead_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
