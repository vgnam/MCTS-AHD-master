def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.9 ** remaining_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        lookahead_depth = min(3, remaining_nodes // 2) if remaining_nodes > 2 else 1
        remaining_after_lookahead = unvisited_nodes - {node}

        if remaining_after_lookahead:
            avg_future_distance = sum(distance_matrix[node][n] for n in remaining_after_lookahead) / len(remaining_after_lookahead)
            node_centrality = avg_future_distance
        else:
            avg_future_distance = 0
            node_centrality = 0

        immediate_weight = 0.5 + 0.4 * exploration_factor
        future_weight = 0.4 * (1 - exploration_factor)
        centrality_weight = 0.5 * (1 - exploration_factor)

        score = immediate_weight * immediate_distance + future_weight * avg_future_distance - centrality_weight * node_centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
