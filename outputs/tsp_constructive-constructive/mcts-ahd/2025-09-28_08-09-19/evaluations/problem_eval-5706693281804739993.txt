def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    exploration_phase = remaining_count / (remaining_count + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = 0
        lookahead_depth = min(2, remaining_count // 3) if remaining_count > 1 else 1
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            current = node
            for _ in range(lookahead_depth):
                if not remaining_nodes:
                    break
                next_candidate = min(remaining_nodes, key=lambda x: distance_matrix[current][x])
                lookahead_distance += distance_matrix[current][next_candidate]
                current = next_candidate
                remaining_nodes -= {next_candidate}

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.6 - 0.3 * exploration_phase
        lookahead_weight = 0.2 + 0.3 * exploration_phase
        centrality_weight = 0.2 * exploration_phase
        penalty_weight = 0.5 * (1.0 - exploration_phase)

        penalty = penalty_weight * (distance_to_destination + 0.3 * node_centrality)
        score = immediate_weight * immediate_distance + lookahead_weight * (lookahead_distance / lookahead_depth if lookahead_depth > 0 else 0) - centrality_weight * node_centrality - penalty

        candidates.append((node, score))

    if not candidates:
        return destination_node

    scores = [score for _, score in candidates]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in scores]

    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]

    next_node = np.random.choice([node for node, _ in candidates], p=probabilities)

    return next_node
