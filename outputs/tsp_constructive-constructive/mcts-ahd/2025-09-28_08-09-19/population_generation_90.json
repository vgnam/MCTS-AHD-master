[
     {
          "algorithm": "The algorithm prioritizes selecting the next node by balancing local proximity (minimizing distance from the current node) and global connectivity (maximizing average distance to remaining unvisited nodes), using a score that combines these factors. It selects the node with the smallest score, which is calculated as `distance_to_current - avg_distance`, favoring closer nodes with higher average distances to unvisited nodes. The heuristic ensures a trade-off between immediate proximity and broader solution coverage.",
          "thought": "The new algorithm prioritizes nodes that are closer to the current position while also considering the global connectivity by favoring nodes with higher average distances to the remaining unvisited nodes, balancing local proximity with broader solution coverage.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n\n        if len(unvisited_nodes) == 1:\n            avg_distance = 0\n        else:\n            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)\n\n        score = distance_to_current - avg_distance\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.46367,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines dynamic weight adjustment with weighted score balancing, prioritizing closer nodes early by scaling weights inversely with the number of remaining nodes. It computes a score for each unvisited node based on the current distance to the node and the node's distance to the destination, using a power-weighted formula that balances proximity and strategic connections. The weight factor dynamically adjusts to favor proximity early and strategic connections later, with closer nodes receiving higher priority when few nodes remain.",
          "thought": "The new algorithm combines the dynamic weight adjustment from No.1 with the weighted score balancing from No.2, using a power-weighted score that prioritizes closer nodes early and strategic connections later, with the weight factor scaling inversely with remaining nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n    remaining_nodes = len(unvisited_nodes)\n    weight_factor = 1.0 / (1.0 + remaining_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        if distance_to_destination == 0:\n            score = float('inf')\n        else:\n            weight = 1.0 + (remaining_nodes / (remaining_nodes + 1)) * weight_factor\n            score = (distance_to_current ** weight) / (distance_to_destination ** (1.0 / weight))\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.6732,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance to the current node and long-term distance to the destination, using a dynamic weight factor that prioritizes the latter as the number of remaining unvisited nodes decreases. The weight adjusts the ratio-based selection, favoring closer nodes early and more strategic choices later, with the score calculated as `(distance_to_current ** weight) / (distance_to_destination ** (1.0 / weight))`. The weight increases as remaining nodes decrease, ensuring adaptive path optimization.",
          "thought": "The new algorithm modifies the ratio-based selection by incorporating a dynamic weight factor that balances immediate distance and long-term efficiency, using a novel equation that adjusts the ratio based on the number of remaining unvisited nodes, ensuring adaptive path optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n    remaining_nodes = len(unvisited_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        if distance_to_destination == 0:\n            score = float('inf')\n        else:\n            weight = 1.0 + (remaining_nodes / (remaining_nodes + 1)) * 0.5\n            score = (distance_to_current ** weight) / (distance_to_destination ** (1.0 / weight))\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.76774,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node to visit in TSP by balancing immediate distance from the current node, distance to the destination, and node centrality (degree), using a score that prioritizes central nodes early (higher degree_factor) and closer nodes later (lower weight). The scoring mechanism combines these factors to favor strategic early selections while optimizing for shorter paths as the tour progresses. The degree_factor adjusts weights based on node connectivity, while the weight dynamically shifts priority between immediate and long-term path considerations.",
          "thought": "The new algorithm introduces a dynamic weight adjustment based on node centrality and path history, using a novel scoring mechanism that combines immediate distance, destination distance, and node degree to prioritize strategic nodes early while favoring closer nodes later, with a score calculated as `(distance_to_current * degree_factor) / (distance_to_destination * (1 + remaining_nodes / total_nodes))`.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = remaining_nodes + 1  # Including current node\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        if distance_to_destination == 0:\n            score = float('inf')\n        else:\n            # Calculate node degree (number of connections to unvisited nodes)\n            degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)\n            degree_factor = 1.0 + (degree / (total_nodes - 1)) * 0.5  # Normalize by max possible degree\n\n            # Dynamic weight based on remaining nodes and degree\n            weight = 1.0 + (remaining_nodes / total_nodes) * (1.0 / (1.0 + degree_factor))\n\n            # Novel scoring mechanism\n            score = (distance_to_current * degree_factor) / (distance_to_destination * (1 + remaining_nodes / total_nodes))\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.86761,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes selecting the next node by minimizing the ratio of the distance from the current node to the candidate node divided by the distance from the candidate node to the destination. This ensures a balance between immediate proximity (lower numerator) and long-term efficiency (lower denominator), dynamically adjusting the path based on the remaining unvisited nodes. The code explicitly checks for and avoids division by zero when a node is the destination, ensuring robustness.",
          "thought": "The new algorithm prioritizes nodes that minimize the ratio of the distance to the current node divided by the distance to the destination, ensuring a balance between immediate proximity and long-term path efficiency while dynamically adjusting the selection based on the remaining unvisited nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_ratio = float('inf')\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        if distance_to_destination == 0:\n            ratio = float('inf')\n        else:\n            ratio = distance_to_current / distance_to_destination\n\n        if ratio < min_ratio:\n            min_ratio = ratio\n            next_node = node\n\n    return next_node",
          "objective": 6.89499,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance (60% weight) over future distances, with future distance importance dynamically decreasing as unvisited nodes decrease (weight = 0.7 / (1 + remaining_nodes)). It penalizes nodes close to the destination (40% of remaining weight) to encourage exploration, balancing short-term and long-term path optimization.",
          "thought": "The new algorithm prioritizes immediate distance with a fixed weight, balances future distance with a dynamic weight based on remaining nodes, and penalizes nodes close to the destination with a linear scaling factor to encourage exploration while avoiding premature convergence.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    best_score = float('inf')\n    remaining_nodes = len(unvisited_nodes)\n    future_weight = 0.7 / (1.0 + remaining_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        immediate_weight = 0.6\n        penalty_weight = 0.4 * (1.0 - future_weight)\n\n        penalty = penalty_weight * (distance_to_destination / (1.0 + avg_future_distance)) if avg_future_distance > 0 else 0\n\n        score = immediate_weight * distance_to_current + future_weight * avg_future_distance - penalty\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.92882,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines ratio-based selection (prioritizing nodes that minimize the ratio of current-to-destination distance) with connectivity scoring (favoring nodes with many nearby neighbors), dynamically balancing these factors using a weight factor that decreases as remaining nodes decrease. The weighted score (60% ratio, 40% average distance) is further multiplied by a connectivity factor (1.3x for highly connected nodes), making connectivity a multiplicative rather than additive factor. The algorithm prioritizes immediate distance savings while gradually shifting focus to long-term connectivity as the tour progresses.",
          "thought": "The new algorithm combines the ratio-based selection from No.1 with the weighted distance and connectivity scoring from No.2, using a dynamic weight factor that balances immediate and long-term distance considerations, while incorporating connectivity as a multiplicative factor.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = remaining_nodes + 1\n    weight_factor = 1.0 / (1.0 + remaining_nodes ** 2)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        if distance_to_destination == 0:\n            ratio = float('inf')\n        else:\n            ratio = distance_to_current / distance_to_destination\n\n        avg_distance_to_all = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0\n        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_distance_to_all)\n        connectivity_factor = 1.0 + (connectivity / (total_nodes - 1)) * 0.3\n\n        weighted_score = (0.6 * (1 - weight_factor) * ratio) + (0.4 * weight_factor * avg_distance_to_all)\n        score = weighted_score * connectivity_factor\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.93477,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node in the TSP path by balancing local proximity (distance from the current node) and global coverage (average distance to remaining nodes), using a dynamically adjusted weight that prioritizes global coverage early (when few nodes remain) and local proximity later (as the tour progresses). The score metric combines these factors, favoring nodes that minimize the weighted sum of distance to the current node and the average distance to unvisited nodes.",
          "thought": "This new algorithm modifies the original by incorporating a dynamic weight factor that adjusts based on the number of remaining unvisited nodes, scaling the average distance contribution to prioritize global coverage in early stages and local proximity in later stages, while still using a combined score metric to guide node selection.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n    total_unvisited = len(unvisited_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n\n        if total_unvisited == 1:\n            avg_distance = 0\n        else:\n            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)\n\n        weight = 1.0 / (1.0 + total_unvisited)  # Dynamic weight based on remaining nodes\n        score = (1 - weight) * distance_to_current - weight * avg_distance\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.95321,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node to visit by balancing proximity to the current node and strategic coverage, where the latter is measured by the node's normalized average distance to remaining unvisited nodes. The balance is dynamically adjusted through a density weight that reduces the influence of coverage as the number of remaining nodes decreases, prioritizing proximity in the final stages. The score combines these factors to choose the node with the lowest cost, ensuring both efficiency and adaptability to the problem's constraints.",
          "thought": "The new algorithm modifies the selection criterion by incorporating a weighted combination of distance to the current node and a normalized global connectivity measure, where the weights are dynamically adjusted based on the remaining unvisited nodes' density, favoring both proximity and strategic coverage in a more adaptive manner.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_score = float('inf')\n    total_unvisited = len(unvisited_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n\n        if total_unvisited == 1:\n            avg_distance = 0\n        else:\n            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)\n\n        # Normalize avg_distance by the maximum possible distance in the matrix\n        max_possible_distance = max(max(row) for row in distance_matrix)\n        normalized_avg = avg_distance / max_possible_distance if max_possible_distance != 0 else 0\n\n        # Adjust weights based on remaining nodes density\n        density_weight = 1 / (1 + total_unvisited)  # Higher density reduces weight of avg_distance\n        score = (1 - density_weight) * distance_to_current + density_weight * (1 - normalized_avg)\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.96076,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically adjusts its priority between immediate distance (70% weight) and global optimization (30% weight), with the weight shifting aggressively toward immediate distance early on (via `weight_factor = 1.0 / (1.0 + remaining_nodes ** 2)`). The balance between local and global factors is managed by the `total_score` calculation, where immediate distance dominates early due to the `1 - weight_factor` term.",
          "thought": "The new algorithm introduces a dynamic weight factor that prioritizes immediate distance more aggressively early on, then shifts toward global optimization by balancing the current node's distance with the average distance to unvisited nodes, but with a different weight adjustment formula to emphasize long-term planning.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    min_total_score = float('inf')\n    remaining_nodes = len(unvisited_nodes)\n    weight_factor = 1.0 / (1.0 + remaining_nodes ** 2)  # More aggressive decrease in weight\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0\n        total_score = (0.7 * (1 - weight_factor) * distance_to_current) + (0.3 * weight_factor * avg_distance_to_unvisited)  # Different weight balance\n\n        if total_score < min_total_score:\n            min_total_score = total_score\n            next_node = node\n\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     }
]