def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        min_distance = distance_matrix[current_node][destination_node]
        next_node = destination_node
    else:
        min_distance = float('inf')
        next_node = None
        min_max_subtour = float('inf')

        for node in unvisited_nodes:
            distance_to_node = distance_matrix[current_node][node]
            remaining_nodes = unvisited_nodes - {node}

            if not remaining_nodes:
                total_distance = distance_to_node + distance_matrix[node][destination_node]
                max_subtour = total_distance
            else:
                subtour_lengths = []
                visited = set()
                for n in remaining_nodes:
                    if n not in visited:
                        stack = [n]
                        visited.add(n)
                        current_subtour = 0
                        while stack:
                            current = stack.pop()
                            for neighbor in remaining_nodes:
                                if neighbor not in visited and distance_matrix[current][neighbor] > 0:
                                    visited.add(neighbor)
                                    stack.append(neighbor)
                                    current_subtour += distance_matrix[current][neighbor]
                        if current_subtour > 0:
                            subtour_lengths.append(current_subtour)

                if subtour_lengths:
                    max_subtour = max(subtour_lengths)
                else:
                    max_subtour = distance_to_node + distance_matrix[node][destination_node]

            if max_subtour < min_max_subtour or (max_subtour == min_max_subtour and distance_to_node < min_distance):
                min_max_subtour = max_subtour
                min_distance = distance_to_node
                next_node = node

    return next_node
