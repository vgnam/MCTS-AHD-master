{
     "algorithm": "The algorithm dynamically balances immediate distance, detour risk, and centrality to select the next node, adjusting weights based on progress (prioritizing detour minimization early) while penalizing high-centrality nodes (favoring peripheral nodes). It uses a heuristic combining current distance, a dynamic detour cost, average distance to unvisited nodes, and centrality factor (weighted lower), ensuring exploration and efficiency. The `dynamic_weight` and `centrality_factor` variables are key in balancing exploration and exploitation.",
     "thought": "The new algorithm combines dynamic weight adjustments based on progress and remaining nodes, detour cost consideration, and centrality balance to prioritize nodes that minimize immediate distance, detour risk, and centrality while encouraging exploration early.",
     "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    progress_factor = 1 - (remaining_nodes / len(distance_matrix))\n    dynamic_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1)) * (1 - progress_factor)\n    avg_distance_to_unvisited = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0\n    centrality = {node: sum(distance_matrix[node][j] for j in unvisited_nodes) / remaining_nodes for node in unvisited_nodes}\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        detour_cost = to_destination - distance_matrix[current_node][destination_node]\n        centrality_factor = 1 - (centrality[node] / max(centrality.values()))\n        return to_current + dynamic_weight * detour_cost + 0.2 * avg_distance_to_unvisited + 0.3 * centrality_factor\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
     "objective": 6.77965,
     "other_inf": null
}