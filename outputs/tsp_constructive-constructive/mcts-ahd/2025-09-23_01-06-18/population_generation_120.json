[
     {
          "algorithm": "The algorithm prioritizes visiting the destination node if it's unvisited, otherwise it selects the closest unvisited node to the current node based on the distance matrix. The destination node is given higher priority than other nodes, while the closest unvisited node is chosen when the destination is already visited. The function handles edge cases where no unvisited nodes remain by returning the destination node.",
          "thought": "The algorithm selects the next node to visit by choosing the unvisited node closest to the current node, prioritizing the destination node if it is among the unvisited nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances proximity to unvisited nodes and focus on the destination by adjusting a threshold based on the remaining distance to the destination and the number of unvisited nodes. It prioritizes the destination if it's close enough (below the threshold) or selects the next node based on a weighted combination of current distance and future distance to the destination, ensuring a trade-off between local and global optimization. The dynamic threshold (`dynamic_threshold`) and the weighted selection criterion (`key=lambda...`) are the critical design elements.",
          "thought": "This new algorithm introduces a dynamic threshold mechanism that adjusts based on the remaining distance to the destination and the number of unvisited nodes, prioritizing either the closest node or the destination based on a calculated threshold, ensuring a balance between proximity and destination focus.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    dynamic_threshold = max(1, (distance_matrix[current_node][destination_node] / (len(unvisited_nodes) + 1)) * 0.75)\n    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] <= dynamic_threshold:\n        return destination_node\n\n    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] * (1 + 0.1 * (distance_matrix[node][destination_node] / sum(distance_matrix[node]))))\n    return next_node",
          "objective": 7.00657,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines a weighted sum heuristic that prioritizes both the distance from the current node and the distance to the destination, with weights dynamically adjusted based on the number of remaining unvisited nodes. It balances local optimization (proximity to the current node) and global optimization (proximity to the destination) by scaling the weight between 0.5 and 1, favoring the destination when fewer nodes remain. The heuristic function multiplies the distance to the destination by the distance to the current node, ensuring both factors influence the selection.",
          "thought": "The new algorithm combines multiplicative prioritization of distances with a weighted sum heuristic, dynamically adjusting weights based on the remaining unvisited nodes' proximity to the destination, to balance local and global optimization while minimizing the objective value.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        weight = 0.5 + 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))\n        return weight * to_current + (1 - weight) * to_destination * to_current\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.02736,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node in TSP by balancing proximity to the current node, detour penalties (adjusted by node centrality and remaining nodes), and centrality factors, prioritizing nodes with lower detour costs and higher centrality (reduced penalties) to encourage exploration of less central nodes while adapting weights based on remaining nodes. The heuristic function combines these factors to evaluate node suitability, with detour_weight adjusting penalties inversely with remaining nodes and centrality_factor emphasizing less central nodes. The code structure integrates these components into a single selection criterion, dynamically adjusting priorities as the algorithm progresses.",
          "thought": "The new algorithm modifies the heuristic by incorporating dynamic detour penalties based on node centrality, where nodes with higher centrality (measured by average distance to all unvisited nodes) receive reduced detour penalties to encourage exploration of less central nodes, while maintaining a balance between local and global optimization through adaptive weights that increase as the number of remaining nodes decreases.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][i] for i in unvisited_nodes))\n    detour_weight = 0.1 + 0.7 * (remaining_nodes / (remaining_nodes + 1)) * proximity_factor\n\n    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes\n    centrality = {node: sum(distance_matrix[node][j] for j in unvisited_nodes) / remaining_nodes for node in unvisited_nodes}\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        detour_cost = to_destination - distance_matrix[current_node][destination_node]\n        centrality_factor = 1 - (centrality[node] / max(centrality.values()))\n        balance_factor = (avg_unvisited_distance - to_current) / avg_unvisited_distance\n        return to_current + detour_weight * detour_cost * balance_factor * centrality_factor\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.0957,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines a weighted sum heuristic with a dynamic progress factor to balance local (distance to current node) and global (distance to destination) optimization. It prioritizes nodes that minimize a weighted combination of these distances, adjusting weights based on remaining unvisited nodes and progress toward the destination. The heuristic dynamically shifts focus from local to global optimization as the algorithm progresses.",
          "thought": "The new algorithm combines the weighted sum heuristic from No.1 with the progress factor from No.2, dynamically adjusting weights based on the number of unvisited nodes and progress towards the destination, to balance local and global optimization while prioritizing nodes that reduce path length.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    current_to_dest = distance_matrix[current_node][destination_node]\n    progress_factor = 0.5 if current_to_dest == 0 else min(1.0, 0.5 * (current_to_dest / sum(distance_matrix[current_node][n] for n in unvisited_nodes)))\n\n    weight = 0.5 + 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        return weight * to_current + (1 - weight) * to_destination * (1 - progress_factor)\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.12651,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines **proximity-aware selection** with **detour weighting** to balance immediate distance, potential future detours, and global optimization. It prioritizes nodes closer to the current node while dynamically adjusting the detour weight based on remaining nodes and proximity to the destination, ensuring efficient path planning as unvisited nodes decrease. The heuristic function (`to_current + detour_weight * detour_cost * balance_factor`) ensures a trade-off between minimizing immediate distance and optimizing long-term path efficiency.",
          "thought": "This new algorithm combines the adaptive detour weighting from Algorithm 1 and 2 with a proximity-aware heuristic that balances immediate distance, detour costs, and global optimization by incorporating both the average unvisited distance and a dynamic proximity factor to ensure efficient path planning as the number of remaining nodes decreases.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][i] for i in unvisited_nodes))\n    detour_weight = 0.2 + 0.5 * (remaining_nodes / (remaining_nodes + 1)) * proximity_factor\n\n    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        detour_cost = to_destination - distance_matrix[current_node][destination_node]\n        balance_factor = (avg_unvisited_distance - to_current) / avg_unvisited_distance\n        return to_current + detour_weight * detour_cost * balance_factor\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.14907,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node in TSP by balancing local (distance to current node) and global (proximity to destination) factors, using a detour weight that adapts based on remaining nodes and current proximity to the destination. It prioritizes nodes closer to the current position while considering detour costs relative to the average distance to unvisited nodes, with higher weights given to global optimization as the number of remaining nodes decreases. The heuristic function combines these factors to guide the selection toward nodes that minimize immediate distance while maintaining overall path efficiency.",
          "thought": "The new algorithm modifies the provided heuristic by incorporating a dynamic detour weight that adapts based on both the number of remaining nodes and the current position's proximity to the destination, while also considering the average distance to unvisited nodes to balance local and global optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][i] for i in unvisited_nodes))\n    detour_weight = 0.1 + 0.7 * (remaining_nodes / (remaining_nodes + 1)) * proximity_factor\n\n    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        detour_cost = to_destination - distance_matrix[current_node][destination_node]\n        balance_factor = (avg_unvisited_distance - to_current) / avg_unvisited_distance\n        return to_current + detour_weight * detour_cost * balance_factor\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.20078,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines dynamic detour weighting with density-aware normalization and decay factors to prioritize nodes that minimize immediate distance while balancing local density and global detour costs. It adapts the weighting factor based on remaining nodes and proximity to the destination, with higher priority given to nodes closer to the current position and those with lower detour costs, while density and decay factors refine the selection process. The heuristic function integrates these factors multiplicatively, with the detour weight and balance factor dynamically adjusting based on remaining nodes and average distances.",
          "thought": "The new algorithm combines the dynamic detour weighting from No.2 with the density-aware normalization and decay factor from No.1, prioritizing nodes that minimize immediate distance while considering both local density and global detour costs, with the weighting factor adapting based on remaining nodes and current proximity to the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][i] for i in unvisited_nodes))\n    detour_weight = 0.1 + 0.7 * (remaining_nodes / (remaining_nodes + 1)) * proximity_factor\n\n    max_distance = max(max(row) for row in distance_matrix)\n    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node] / max_distance\n        to_destination = distance_matrix[node][destination_node] / max_distance\n        detour_cost = to_destination - (distance_matrix[current_node][destination_node] / max_distance)\n        balance_factor = (avg_unvisited_distance / max_distance - to_current) / (avg_unvisited_distance / max_distance)\n\n        decay_factor = 0.1 * (remaining_nodes / len(distance_matrix))\n        density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < max_distance * 0.3)\n        density_term = density / len(unvisited_nodes) if unvisited_nodes else 0\n\n        return to_current + detour_weight * detour_cost * balance_factor * (1 - decay_factor) * (1 + density_term)\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.26941,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances immediate proximity and long-term path optimization by adjusting a detour penalty based on variance in distances to the destination, prioritizing nodes that minimize detours while avoiding revisits, with proximity and detour costs weighted in the heuristic function. It emphasizes minimizing detours (via `detour_penalty`) while favoring closer nodes (via `proximity_factor`), with the heuristic combining these factors to select the next node. The penalty adapts to remaining nodes and distance variance, ensuring strategic detours are penalized less as the problem scales.",
          "thought": "The new algorithm modifies the original by introducing a dynamic detour penalty that adapts based on the variance of unvisited node distances to the destination, prioritizing nodes that balance immediate proximity with strategic long-term path optimization, while also incorporating a memory mechanism to avoid revisiting recently explored nodes unless necessary.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    base_distance = distance_matrix[current_node][destination_node]\n    distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]\n    variance_to_dest = sum((d - base_distance) ** 2 for d in distances_to_dest) / remaining_nodes if remaining_nodes > 1 else 0\n\n    proximity_factor = 1 - (base_distance / max(distance_matrix[current_node][i] for i in unvisited_nodes))\n    detour_penalty = 0.2 + 0.6 * (variance_to_dest / (base_distance + 1)) * (remaining_nodes / (remaining_nodes + 2))\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_dest = distance_matrix[node][destination_node]\n        detour_cost = to_dest - base_distance\n        return to_current + detour_penalty * detour_cost\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.30643,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances immediate proximity, detour potential, and path diversity by adjusting weights based on progress (progress_factor) and remaining nodes (detour_weight, path_diversity). It prioritizes direct paths early (lower detour_weight) but increasingly considers longer-term gains (higher detour_weight) as the tour progresses, while path_diversity encourages exploration of less direct routes. The heuristic function combines these factors to select the next node, favoring nodes that minimize immediate distance but also account for their potential to reduce future detours.",
          "thought": "The new algorithm integrates a dynamic detour weight that adapts to both the number of remaining nodes and the current path progress, incorporating a path diversity factor to encourage exploration of less direct paths while balancing immediate and long-term costs.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    progress_factor = 1 - (remaining_nodes / len(distance_matrix))\n    detour_weight = 0.2 + 0.6 * (remaining_nodes / (remaining_nodes + 1)) * (1 - progress_factor)\n\n    path_diversity = 0.3 * (len(distance_matrix) - remaining_nodes) / len(distance_matrix)\n\n    def heuristic(node):\n        to_current = distance_matrix[current_node][node]\n        to_destination = distance_matrix[node][destination_node]\n        detour_cost = to_destination - distance_matrix[current_node][destination_node]\n        diversity_cost = distance_matrix[current_node][node] - distance_matrix[current_node][destination_node]\n        return to_current + detour_weight * detour_cost + path_diversity * diversity_cost\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
          "objective": 7.30788,
          "other_inf": null
     }
]