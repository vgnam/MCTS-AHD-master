{
     "algorithm": "The algorithm dynamically balances local and global optimization by adjusting selection pressure and temperature based on progress, prioritizing local cost early and global potential later. It incorporates regret and diversity terms to avoid suboptimal choices, with regret weighted lower (0.1) and diversity penalized heavily (-0.3). The heuristic score is temperature-adjusted to refine selections as the problem progresses, ensuring a hybrid of greedy and global-aware node selection.",
     "thought": "This algorithm combines adaptive selection pressure, dynamic temperature scaling, regret-based global potential, diversity bonus, and progress-aware weighting to balance local and global optimization, while incorporating a hybrid heuristic that integrates local cost, global potential, regret, and diversity into a temperature-adjusted score to dynamically prioritize nodes based on problem progress.",
     "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    progress_factor = 1 - (remaining_nodes / total_nodes)\n    selection_pressure = 0.5 + 0.5 * progress_factor\n    temperature = 1.0 - 0.8 * progress_factor\n\n    def heuristic(node):\n        local_cost = distance_matrix[current_node][node]\n        global_potential = (distance_matrix[node][destination_node] +\n                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)\n        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0\n        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)\n        weighted_score = (selection_pressure * local_cost + (1 - selection_pressure) * global_potential + 0.1 * regret_term) * temperature - 0.3 * diversity_bonus\n        return weighted_score\n\n    next_node = min(unvisited_nodes, key=heuristic)\n    return next_node",
     "objective": 6.64995,
     "other_inf": null
}