def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    selection_pressure = 0.5 + 0.5 * progress
    temperature = 1.0 - 0.8 * progress

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret_weight = 0.3 + 0.7 * progress
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        weighted_score = (selection_pressure * immediate_cost + regret_weight * regret + 0.2 * detour_cost + 0.1 * hub_score) * temperature + 0.4 * diversity_penalty
        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(s - min_score) / (max_score - min_score + 1e-6) for s in scores]
    probabilities = [np.exp(-s / temperature) for s in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
