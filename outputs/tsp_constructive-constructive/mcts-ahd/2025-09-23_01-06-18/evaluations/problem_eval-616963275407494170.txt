def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.2 * (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        progress_weight = 1.5 - remaining_ratio

        # Adaptive regret scaling
        sorted_distances = sorted(distance_matrix[current_node][other] for other in unvisited_nodes)
        regret_term = sum(sorted_distances[:3]) / 3 if len(sorted_distances) >= 3 else sorted_distances[0]
        regret_weight = 0.7 * (1.0 - remaining_ratio)

        # Connectivity-aware diversity bonus
        local_connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * to_current)
        centrality = sum(1 for other in distance_matrix if distance_matrix[node][other] < 1.2 * min(distance_matrix[node]) + 1e-6)
        diversity_bonus = (sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)) * (1 + 0.3 * centrality / len(distance_matrix))

        # Predictive factor with path potential
        predictive_factor = sum(sorted(distance_matrix[node][other] for other in unvisited_nodes)[:2]) / 2
        connectivity_factor = 1 + (0.3 * local_connectivity / len(unvisited_nodes))

        # Adaptive proximity weighting
        local_factor = to_current * progress_weight * connectivity_factor * (1.0 + regret_weight * regret_term)
        global_factor = (to_destination + predictive_factor) * (1.0 - progress_weight * 0.8)

        return (local_factor + global_factor) - (diversity_bonus * 0.8)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
