def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 0.5 * (remaining_nodes / total_nodes) ** 2 + 0.5

    def calculate_potential(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - immediate_cost
        path_centrality = (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) if unvisited_nodes else 0
        revisit_penalty = 10 if node in unvisited_nodes else 0
        probabilistic_bias = random.uniform(0.8, 1.2)
        return (exploration_factor * immediate_cost +
                (1 - exploration_factor) * detour_potential +
                0.25 * path_centrality +
                revisit_penalty * probabilistic_bias)

    candidates = sorted(unvisited_nodes, key=calculate_potential)[:3]
    next_node = random.choice(candidates) if candidates else min(unvisited_nodes, key=calculate_potential)
    return next_node
