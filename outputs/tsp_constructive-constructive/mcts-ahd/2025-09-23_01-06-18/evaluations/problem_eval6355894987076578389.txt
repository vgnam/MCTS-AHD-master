def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_factor = 0.5 * (1 - progress_factor)
    regret_factor = (1 - progress_factor) * 0.8 + progress_factor * 0.3

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        regret = (local_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        destination_bias = 1 / (1 + distance_matrix[node][destination_node])
        weighted_score = (1 - exploration_factor) * (regret_factor * regret + (1 - regret_factor) * local_cost) + exploration_factor * destination_bias
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
