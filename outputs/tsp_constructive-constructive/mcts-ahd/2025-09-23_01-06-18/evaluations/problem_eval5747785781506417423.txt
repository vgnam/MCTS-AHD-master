def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    exploration_weight = 0.1 + 0.4 * progress

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        random_factor = exploration_weight * (sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6))
        return immediate_cost + 0.5 * global_potential + random_factor

    candidates = sorted(unvisited_nodes, key=heuristic)[:max(2, remaining_nodes // 2)]
    next_node = min(candidates, key=lambda node: distance_matrix[current_node][node] * (1 - exploration_weight) + exploration_weight * distance_matrix[node][destination_node])
    return next_node
