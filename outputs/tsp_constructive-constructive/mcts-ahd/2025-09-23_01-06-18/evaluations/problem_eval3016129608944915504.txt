def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    unvisited_count = len(unvisited_nodes)

    if destination_node in unvisited_nodes and unvisited_count <= total_nodes // 3:
        remaining_distance = distance_matrix[current_node][destination_node]
        proximity_bonus = 1.0 - (remaining_distance / max(distance_matrix[current_node][node] for node in unvisited_nodes))
        if proximity_bonus > 0.7:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        exploration_weight = 1.0 / (1.0 + math.exp(-0.5 * (unvisited_count - total_nodes/2)))
        exploitation_weight = 1.0 - exploration_weight

        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / unvisited_count
        distance_factor = to_current * exploitation_weight + predictive_factor * exploration_weight

        if destination_node in unvisited_nodes:
            proximity_factor = 1.0 - (distance_matrix[node][destination_node] / max(distance_matrix[node][n] for n in unvisited_nodes))
            distance_factor += proximity_factor * 0.5 * (1.0 - exploration_weight)

        return distance_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
