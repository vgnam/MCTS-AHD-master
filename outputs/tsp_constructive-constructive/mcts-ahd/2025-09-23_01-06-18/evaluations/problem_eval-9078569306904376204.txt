def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = 1 - progress_factor ** 2

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Multi-step regret term
        regret_term = 0
        for n in unvisited_nodes:
            if n != node:
                diff = distance_matrix[current_node][n] - distance_matrix[current_node][node]
                future_diff = distance_matrix[n][destination_node] - distance_matrix[node][destination_node]
                regret_term += max(0, diff + 0.3 * future_diff)

        # Dynamic exploration component
        exploration = temperature * regret_term / (len(unvisited_nodes) or 1)

        # Combined score with progress-weighted components
        score = (0.6 + 0.4 * progress_factor) * local_cost + (0.4 - 0.4 * progress_factor) * global_potential + exploration
        return score

    candidates = list(unvisited_nodes)
    if len(candidates) > 1:
        # Stochastic selection with temperature-based probability
        scores = [heuristic(node) for node in candidates]
        min_score = min(scores)
        max_score = max(scores)
        if max_score > min_score:
            normalized = [(max_score - s)/(max_score - min_score) for s in scores]
            probabilities = [n ** (1/temperature) for n in normalized]
            total = sum(probabilities)
            probabilities = [p/total for p in probabilities]
            next_node = random.choices(candidates, weights=probabilities, k=1)[0]
        else:
            next_node = min(candidates, key=lambda x: heuristic(x))
    else:
        next_node = candidates[0]

    return next_node
