def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    weight = 0.6 - 0.3 * progress

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        regret = to_current - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.15 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        weighted_score = (weight * to_current + (1 - weight) * regret + 0.3 * hub_score) + (1 - weight) * to_destination
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
