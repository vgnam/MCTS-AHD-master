def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.5 + (0.7 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        centrality = sum(distance_matrix[node][other] for other in distance_matrix) / len(distance_matrix)
        weight = 2.0 - remaining_ratio * (1.0 + 0.3 * (centrality / sum(sum(row) for row in distance_matrix) / len(distance_matrix)))
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        memory_penalty = 0.1 * (1.0 if node in path_memory else 0.0)
        return (to_current * weight + predictive_factor * (1.0 - weight) + 0.6 * regret_term) - 0.4 * diversity_bonus - memory_penalty

    path_memory = set()
    next_node = min(unvisited_nodes, key=heuristic)
    path_memory.add(next_node)
    return next_node
