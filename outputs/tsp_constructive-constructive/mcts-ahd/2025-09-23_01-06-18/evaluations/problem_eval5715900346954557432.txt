def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes_ratio = len(unvisited_nodes) / total_nodes
    if destination_node in unvisited_nodes and remaining_nodes_ratio < 0.3:
        return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        if remaining_nodes_ratio < 0.2:
            return to_destination
        else:
            density_weight = 1 - (remaining_nodes_ratio ** 2)
            return (to_current * (0.5 + density_weight * 0.2) +
                    to_destination * (0.5 - density_weight * 0.2))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
