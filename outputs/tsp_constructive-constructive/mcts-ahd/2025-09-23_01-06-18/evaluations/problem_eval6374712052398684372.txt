def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Dynamic weights based on progress and remaining nodes
    detour_weight = 0.1 + 0.7 * (remaining_nodes / (remaining_nodes + 1)) * (1 - progress_factor)
    centrality_weight = 0.4 * progress_factor

    # Calculate node centrality (inverse of average distance to all other nodes)
    def node_centrality(node):
        avg_distance = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        return 1 / (avg_distance + 1e-6)  # Avoid division by zero

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        centrality = node_centrality(node)
        return to_current + detour_weight * detour_cost - centrality_weight * centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
