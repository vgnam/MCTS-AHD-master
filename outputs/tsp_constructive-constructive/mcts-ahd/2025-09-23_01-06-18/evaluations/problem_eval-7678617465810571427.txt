def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_penalty = (distance_matrix[node][destination_node] - immediate_cost) * (1 - progress)
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)

        hub_score = 0
        if remaining_nodes > 1:
            avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.8 * avg_dist)

        centrality = sum(1 / (1 + distance_matrix[node][n]) for n in unvisited_nodes) if remaining_nodes > 0 else 0

        return (0.5 - 0.2 * progress) * immediate_cost + \
               (0.3 + 0.4 * progress) * regret + \
               0.1 * detour_penalty + \
               (0.2 + 0.3 * progress) * hub_score + \
               0.1 * centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
