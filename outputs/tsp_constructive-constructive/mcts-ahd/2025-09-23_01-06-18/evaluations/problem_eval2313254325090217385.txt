def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    exploration_factor = 0.5 + 0.3 * progress_ratio

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        detour_scaling = (1 - (remaining_nodes / total_nodes)) * progress_ratio
        adjusted_detour = detour_cost * detour_scaling
        return (1 - exploration_factor) * immediate_cost + exploration_factor * adjusted_detour

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
