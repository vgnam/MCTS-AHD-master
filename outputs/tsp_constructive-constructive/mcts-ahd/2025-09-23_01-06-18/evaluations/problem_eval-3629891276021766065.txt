def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    exploration_weight = 0.7 * (1 - progress)
    exploitation_weight = 0.3 + 0.7 * progress

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        path_quality = (immediate_cost + detour_cost) / (1 + 0.1 * hub_score)

        exploration_score = regret + 0.5 * diversity_bonus
        exploitation_score = immediate_cost + 0.3 * detour_cost + 0.2 * hub_score

        combined_score = exploration_weight * exploration_score + exploitation_weight * exploitation_score
        normalized_score = combined_score / (1 + 0.01 * path_quality)

        return normalized_score

    candidates = sorted(unvisited_nodes, key=heuristic)[:3]
    if len(candidates) > 1:
        probabilities = [1/(i+1)**2 for i in range(len(candidates))]
        probabilities = [p/sum(probabilities) for p in probabilities]
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
