def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    completion_factor = (1 - remaining_nodes / total_nodes) ** 2

    def heuristic(node):
        immediate_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        distance_weight = 1 - completion_factor
        bias_factor = completion_factor * 2

        weighted_distance = immediate_distance * distance_weight + global_distance * (1 - distance_weight)
        proximity_bias = immediate_distance * bias_factor

        return weighted_distance + proximity_bias

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
