def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_nodes_ratio = len(unvisited_nodes) / len(distance_matrix)
        if remaining_nodes_ratio < 0.3:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 - (remaining_nodes / len(distance_matrix))
    dynamic_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1)) * (1 - progress_factor)

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        if remaining_nodes <= 5:
            return to_current * 0.4 + dynamic_weight * detour_cost * 0.3 + to_destination * 0.3
        else:
            return to_current * 0.5 + dynamic_weight * detour_cost * 0.5

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
