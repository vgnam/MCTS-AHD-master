def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        if remaining_nodes > 1:
            weight_current = 0.8 - 0.1 * (remaining_nodes / len(unvisited_nodes))
            weight_detour = 0.2 + 0.1 * (remaining_nodes / len(unvisited_nodes))
        else:
            weight_current = 0.5
            weight_detour = 0.5

        # Add small random perturbation
        random_factor = 0.05 * (random.random() - 0.5)

        weighted_detour = (weight_current * to_current) + (weight_detour * detour_cost) + random_factor
        return weighted_detour

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
