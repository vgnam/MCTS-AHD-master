def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_phase = max(0.1, 1 - (remaining_nodes / total_nodes) ** 2)
    exploitation_phase = 1 - exploration_phase

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        path_potential = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        node_significance = (local_cost + global_potential) / (1 + path_potential)

        exploration_weight = 0.3 + 0.7 * exploration_phase
        exploitation_weight = 0.7 - 0.3 * exploitation_phase

        weighted_score = (exploration_weight * local_cost + exploitation_weight * global_potential) / (1 + 0.5 * path_potential)
        weighted_score += 0.2 * node_significance * (1 - exploration_phase)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
