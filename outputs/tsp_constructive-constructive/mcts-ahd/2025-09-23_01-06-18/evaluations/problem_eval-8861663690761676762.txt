import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    total_nodes = len(distance_matrix)
    unvisited_count = len(unvisited_nodes)
    exploration_factor = math.exp(-0.5 * (unvisited_count / total_nodes))
    dynamic_weight = 0.5 + 0.5 * (1 - remaining_distance / sum(distance_matrix[current_node]))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - remaining_distance
        centrality = sum(distance_matrix[node]) / total_nodes
        weighted_detour = dynamic_weight * to_current + (1 - dynamic_weight) * detour_cost
        exploration_bias = exploration_factor * centrality
        return weighted_detour + exploration_bias

    candidates = sorted(unvisited_nodes, key=heuristic)[:min(3, len(unvisited_nodes))]
    if random.random() < exploration_factor:
        return random.choice(candidates)
    else:
        return next_node
