def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)

        # Adaptive significance score
        local_score = to_current * (1.0 + 0.5 * (1.0 - remaining_ratio))
        global_score = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Path potential metric
        path_potential = sum(1.0 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes) / len(unvisited_nodes)

        # Connectivity-aware regret
        sorted_distances = sorted(distance_matrix[current_node][other] for other in unvisited_nodes)
        regret_term = (sorted_distances[1] - sorted_distances[0]) if len(sorted_distances) > 1 else 0.0
        connectivity_factor = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * to_current) / len(unvisited_nodes)

        # Dynamic weighting
        local_weight = 2.0 * (1.0 - remaining_ratio)
        global_weight = 1.0 - local_weight

        # Combined score
        return (local_weight * local_score + global_weight * global_score) * (1.0 - 0.3 * regret_term * (1.0 - connectivity_factor)) + 0.2 * path_potential

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
