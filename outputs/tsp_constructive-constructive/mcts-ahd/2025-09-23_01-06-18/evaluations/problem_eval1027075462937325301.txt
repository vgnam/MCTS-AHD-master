import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.7 - 0.5 * progress_factor
    temperature = 1.0 - 0.9 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        regret = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        promise = (0.6 * local_cost + 0.3 * global_distance + 0.1 * centrality) * (1 + 0.2 * regret)
        exploration_term = random.random() * exploration_weight
        return promise * temperature + exploration_term

    candidates = sorted(unvisited_nodes, key=heuristic)
    selection_prob = [math.exp(-i * 0.5) for i in range(len(candidates))]
    selection_prob = [p / sum(selection_prob) for p in selection_prob]
    next_node = random.choices(candidates, weights=selection_prob)[0]
    return next_node
