def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        if not unvisited_nodes:
            return destination_node
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        total_nodes = len(distance_matrix)
        density_ratio = remaining_nodes / total_nodes
        weight = 1.5 * (1.0 - density_ratio) + 0.5

        if not unvisited_nodes:
            return to_current

        max_regret = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)
        center_x = sum(node[0] for node in unvisited_nodes) / remaining_nodes
        center_y = sum(node[1] for node in unvisited_nodes) / remaining_nodes
        node_x, node_y = node
        centrality = (node_x - center_x)**2 + (node_y - center_y)**2

        proximity_pressure = (to_current * weight + to_destination * (1.0 - weight)) * (1.0 + 0.3 * max_regret)
        return proximity_pressure * (1.0 + 0.1 * centrality)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
