def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    direct_distance = distance_matrix[current_node][destination_node]

    # Phase 1: Filter candidates based on proximity and detour potential
    filtered_nodes = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - direct_distance

        # Proximity threshold (adaptive based on remaining nodes)
        proximity_threshold = 1.5 * (remaining_nodes / (remaining_nodes + 1))
        if distance_to_node <= proximity_threshold * direct_distance:
            filtered_nodes.append(node)

    if not filtered_nodes:
        filtered_nodes = unvisited_nodes.copy()

    # Phase 2: Dynamic cost calculation with adaptive weights
    def cost_function(node):
        distance_to_node = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - direct_distance

        # Dynamic weights
        proximity_weight = 0.7 + 0.3 * (remaining_nodes / (remaining_nodes + 1))
        detour_weight = 0.3 * (1 - (remaining_nodes / (remaining_nodes + 1)))

        return (proximity_weight * distance_to_node) + (detour_weight * detour_cost)

    next_node = min(filtered_nodes, key=cost_function)
    return next_node
