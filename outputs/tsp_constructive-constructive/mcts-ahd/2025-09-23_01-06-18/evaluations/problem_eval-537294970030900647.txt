def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Adaptive phase transitions
    if progress_factor < 0.3:  # Exploration phase
        selection_pressure = 0.3 + 0.4 * progress_factor
        temperature = 1.0 - 0.5 * progress_factor
        phase_weight = 0.7
    elif progress_factor < 0.7:  # Transition phase
        selection_pressure = 0.5 + 0.2 * (progress_factor - 0.3)
        temperature = 0.7 - 0.4 * (progress_factor - 0.3)
        phase_weight = 0.5
    else:  # Exploitation phase
        selection_pressure = 0.7 + 0.3 * (progress_factor - 0.7)
        temperature = 0.3 - 0.2 * (progress_factor - 0.7)
        phase_weight = 0.3

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)

        # Novel regret-aware diversity metric
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_term = sum(abs(distance_matrix[node][n] - distance_matrix[current_node][n]) for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        # Phase-specific scoring
        phase_score = (phase_weight * (selection_pressure * local_cost + (1 - selection_pressure) * global_potential) +
                      (1 - phase_weight) * (0.6 * regret_term - 0.4 * diversity_term))
        return phase_score * temperature

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
