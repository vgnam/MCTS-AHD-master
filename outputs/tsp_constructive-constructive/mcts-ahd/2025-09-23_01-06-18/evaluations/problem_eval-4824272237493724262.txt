def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.0:
            return destination_node

    def utility_function(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        decay_factor = 0.5 * (1 - remaining_ratio)
        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < to_current * 1.2) / len(unvisited_nodes)
        return (to_current * (1 - decay_factor) + to_destination * decay_factor) * (1 + connectivity)

    scores = [utility_function(node) for node in unvisited_nodes]
    total_score = sum(scores)
    probabilities = [score / total_score for score in scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
