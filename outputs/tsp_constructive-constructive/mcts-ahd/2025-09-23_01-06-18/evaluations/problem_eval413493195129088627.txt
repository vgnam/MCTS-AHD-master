def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0
    time_decay = 1 - progress_ratio  # Linear decay

    def path_potential(node):
        direct_cost = distance_matrix[node][destination_node]
        nearby_nodes = [n for n in range(len(distance_matrix)) if n != node]
        indirect_cost = sum(distance_matrix[node][n] + distance_matrix[n][destination_node]
                           for n in nearby_nodes[:3]) / min(3, len(nearby_nodes)) if nearby_nodes else 0
        return 0.7 * direct_cost + 0.3 * indirect_cost  # Fixed weights

    def node_centrality(node):
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        return 1 / (centrality + 1)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        potential = path_potential(node)
        centrality = node_centrality(node)

        weight_immediate = 0.6  # Fixed weight
        weight_potential = 0.4 - 0.2 * centrality  # Centrality reduces potential weight

        return weight_immediate * immediate_cost + weight_potential * potential

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
