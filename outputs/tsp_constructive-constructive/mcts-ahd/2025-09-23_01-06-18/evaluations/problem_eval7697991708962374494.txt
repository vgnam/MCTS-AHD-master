def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        if remaining_distance == 0:
            return destination_node

        visited_ratio = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
        decay_factor = np.exp(-visited_ratio * 3)
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        threshold = 0.5 + (0.5 * (1 - decay_factor))

        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        visited_ratio = 1.0 - (len(unvisited_nodes) / len(distance_matrix))

        local_weight = 0.7 * (1 - visited_ratio)
        global_weight = 0.3 + (visited_ratio * 0.7)

        predictive_factor = sum(np.exp(-distance_matrix[node][other] / 50) for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        return to_current * local_weight + predictive_factor * global_weight

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
