importance" metric based on connection centrality and a temperature-driven probabilistic selection to balance exploration and exploitation more effectively.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.5 + 0.5 * progress_factor
    temperature = 0.9 - 0.8 * progress_factor

    def node_importance(node):
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        return centrality

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = node_importance(node)
        weight = 1 + 0.3 * (remaining_nodes / total_nodes)
        weighted_score = (selection_pressure * local_cost + (1 - selection_pressure) * global_potential + 0.2 * regret_term) * temperature - 0.4 * diversity_bonus
        return weighted_score

    candidates = unvisited_nodes.copy()
    if len(candidates) > 1 and temperature > 0.3:
        import random
        candidates = random.sample(unvisited_nodes, min(3, len(unvisited_nodes)))

    next_node = min(candidates, key=heuristic)
    return next_node
