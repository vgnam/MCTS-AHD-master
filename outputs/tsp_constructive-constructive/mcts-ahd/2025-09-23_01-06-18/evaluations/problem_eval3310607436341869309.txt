def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.8 - (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def calculate_scores():
        scores = {}
        exploration_stage = len(unvisited_nodes) / len(distance_matrix)
        temp = 1.0 - 0.5 * exploration_stage

        for node in unvisited_nodes:
            local_dist = distance_matrix[current_node][node]
            global_dist = distance_matrix[node][destination_node]
            connectivity_bonus = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node)
            regret_penalty = max(distance_matrix[current_node][other] - local_dist for other in unvisited_nodes) if unvisited_nodes else 0

            score = (local_dist * (0.7 + 0.3 * exploration_stage) +
                     global_dist * (0.3 - 0.2 * exploration_stage) +
                     0.4 * regret_penalty -
                     0.1 * connectivity_bonus)
            scores[node] = score

        return scores

    scores = calculate_scores()
    min_score = min(scores.values())
    max_score = max(scores.values())
    normalized_scores = {node: (score - min_score) / (max_score - min_score + 1e-6) for node, score in scores.items()}

    temperature = 1.0 - 0.7 * (1.0 - len(unvisited_nodes) / len(distance_matrix))
    probabilities = [math.exp(-normalized_scores[node] / temperature) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
