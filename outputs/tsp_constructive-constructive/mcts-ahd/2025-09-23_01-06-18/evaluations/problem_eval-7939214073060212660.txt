def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    exploration_weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        local_regret = sum(max(0, distance_matrix[node][n] - distance_matrix[current_node][n]) for n in unvisited_nodes) / remaining_nodes
        return (0.5 - 0.3 * exploration_weight) * immediate_cost + (0.3 + 0.4 * exploration_weight) * regret + 0.1 * detour_cost + (0.2 + 0.3 * exploration_weight) * hub_score - 0.1 * local_regret

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
