def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.3:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = 0.9 - 0.8 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        score = local_cost + 0.5 * global_potential + 0.3 * regret_term - 0.2 * diversity_bonus
        return score

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]
    probs = [np.exp(ns / temperature) for ns in normalized_scores]
    probs = [p / sum(probs) for p in probs]
    next_node = np.random.choice(unvisited_nodes, p=probs)
    return next_node
