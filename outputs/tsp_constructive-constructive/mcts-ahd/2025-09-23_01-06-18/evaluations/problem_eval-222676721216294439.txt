def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    base_pressure = 0.5 - 0.4 * progress_factor
    node_density = total_nodes / (sum(sum(row) for row in distance_matrix) + 1e-6)
    selection_pressure = base_pressure * (1 + 0.3 * node_density)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)
        adjusted_regret = regret * (1 - 0.2 * progress_factor)
        proximity_bias = (1 - remaining_nodes / total_nodes) ** 2
        hub_preference = centrality / (sum(centrality for n in unvisited_nodes) + 1e-6)
        weighted_score = selection_pressure * (0.3 * adjusted_regret + 0.4 * hub_preference + 0.3 * local_cost) + (1 - selection_pressure) * (0.5 * global_connectivity + 0.5 * proximity_bias)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
