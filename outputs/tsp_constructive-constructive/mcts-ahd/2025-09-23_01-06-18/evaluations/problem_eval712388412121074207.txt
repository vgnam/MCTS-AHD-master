import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    exploration_factor = 0.5 - 0.4 * progress
    novelty_weight = 0.3 * (1 - progress)

    def novelty_score(node):
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        detour_resistance = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        return (0.7 * centrality + 0.3 * detour_resistance) * novelty_weight

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) / (remaining_nodes + 1)
        regret = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        novelty = novelty_score(node)

        weighted_score = (0.5 * local_cost + 0.4 * global_cost + 0.3 * regret) * (1 - exploration_factor) + novelty
        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(score - min_score) / (max_score - min_score + 1e-6) for score in scores]

    probabilities = [math.exp(-s / (exploration_factor + 1e-6)) for s in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
