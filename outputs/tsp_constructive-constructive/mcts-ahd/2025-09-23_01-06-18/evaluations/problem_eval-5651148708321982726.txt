def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.7
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        connectivity_factor = 1 + (0.2 * connectivity / len(unvisited_nodes))

        global_potential = (to_destination + sum(sorted(distance_matrix[node][other] for other in unvisited_nodes if other != node)[:2])) / 3

        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_bonus *= 0.5

        return (0.4 * to_current + 0.6 * global_potential) - 0.5 * diversity_bonus

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
