def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * avg_distance) if remaining_nodes > 1 else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        if progress < 0.3:
            weight_immediate = 0.6
            weight_regret = 0.1
            weight_hub = 0.1
        elif progress < 0.7:
            weight_immediate = 0.3
            weight_regret = 0.4
            weight_hub = 0.3
        else:
            weight_immediate = 0.2
            weight_regret = 0.5
            weight_hub = 0.3

        return (weight_immediate * immediate_cost +
                weight_regret * regret +
                weight_hub * hub_score -
                0.2 * diversity_bonus -
                0.1 * detour_cost)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
