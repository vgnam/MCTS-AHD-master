def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0
    exploration_weight = 0.7 * (1 - progress_ratio) + 0.3

    def path_connectivity(node):
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node]))
        return connectivity / (len(unvisited_nodes) - 1) if unvisited_nodes else 0

    def historical_penalty(node):
        if node == destination_node:
            return 0.0
        return 0.2 * (1 - progress_ratio) if node in unvisited_nodes else 0.0

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node] * (1 - exploration_weight)
        local_potential = (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes) * exploration_weight
        connectivity_bonus = path_connectivity(node) * 0.2

        return immediate_cost + global_potential + local_potential - connectivity_bonus + historical_penalty(node)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
