def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / (len(distance_matrix) - 1)
    temperature = 1 - progress

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        direction_factor = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        proximity_weight = 0.7 * (1 - temperature) + 0.3 * temperature
        direction_weight = 0.3 * (1 - temperature) + 0.7 * temperature
        penalty = 0.1 if node in unvisited_nodes else 0
        return proximity_weight * to_current + direction_weight * direction_factor + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
