def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.6 + 0.4 * progress_factor
    weight = 1 + 0.25 * (1 - progress_factor) + 0.1 * (remaining_nodes / total_nodes)
    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        local_global_ratio = local_cost / (global_potential + 1e-10)
        adaptive_weight = weight + 0.1 * (1 - local_global_ratio)
        return (selection_pressure * local_cost * adaptive_weight + (1 - selection_pressure) * global_potential * (1 / adaptive_weight)) + 0.15 * regret_term
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
