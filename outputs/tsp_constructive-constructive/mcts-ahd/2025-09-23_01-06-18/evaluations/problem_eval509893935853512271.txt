def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.8 - (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))
        regret_terms = sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)
        regret_term = sum(term ** 2 for term in regret_terms[:3]) / (3 ** 2)
        diversity_bonus = sum(distance_matrix[node][other] ** 1.5 for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        return (to_current * weight + to_destination * (1.0 - weight) + 1.2 * regret_term) - 0.3 * diversity_bonus
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
