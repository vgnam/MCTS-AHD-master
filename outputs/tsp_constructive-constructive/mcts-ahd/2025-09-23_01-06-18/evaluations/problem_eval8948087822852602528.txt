def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    exploration_weight = (1 - progress) ** 2
    exploitation_weight = 1 - exploration_weight

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]
        regret = (to_current - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        exploration_factor = exploitation_weight * (detour_risk + 0.3 * centrality)
        exploitation_factor = exploration_weight * (0.7 * to_current + 0.3 * regret)
        penalty = 0.2 * centrality + 0.3 * diversity_bonus

        return exploration_factor + exploitation_factor - penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
