def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0 or remaining_distance / avg_distance <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Calculate local density and global connectivity
    local_density = sum(1 for node in unvisited_nodes if distance_matrix[current_node][node] < avg_distance * 0.8) / remaining_nodes
    global_connectivity = sum(distance_matrix[node][n] for node in unvisited_nodes for n in unvisited_nodes if node != n) / (remaining_nodes * (remaining_nodes - 1)) if remaining_nodes > 1 else 0

    # Adaptive weight adjustment
    weight = 1 + 0.5 * (1 - progress_factor) * (1 - local_density) + 0.3 * global_connectivity

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                          sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        # Dynamic regret penalty
        regret_penalty = (max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0) * (1 + 0.5 * (1 - progress_factor))
        # Connectivity-aware opportunity cost
        opportunity_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (sum(1 for n in unvisited_nodes if n != node) + 1) if remaining_nodes > 1 else 0
        return (local_cost * weight + global_potential * (1 - weight)) + 0.4 * regret_penalty + 0.2 * opportunity_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
