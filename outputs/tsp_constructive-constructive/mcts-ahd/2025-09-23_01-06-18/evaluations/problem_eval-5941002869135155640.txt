def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 0.3 + 0.7 * (remaining_nodes / total_nodes)
    global_weight = 1 - exploration_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        detour_cost = global_cost - distance_matrix[current_node][destination_node]
        normalized_detour = detour_cost / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        return (exploration_factor * local_cost) + (global_weight * global_cost) + (0.2 * normalized_detour)

    candidates = sorted(unvisited_nodes, key=heuristic)[:max(3, remaining_nodes // 2)]
    if not candidates:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    def refined_heuristic(node):
        local = distance_matrix[current_node][node]
        global_conn = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        return local + 0.5 * global_conn

    next_node = min(candidates, key=refined_heuristic)
    return next_node
