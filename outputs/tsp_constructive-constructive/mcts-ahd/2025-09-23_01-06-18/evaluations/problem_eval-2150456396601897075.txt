def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining = len(unvisited_nodes)
    lookahead_depth = min(3, max(1, remaining // 5))

    def evaluate_path(node, depth=lookahead_depth):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        weight = 0.7 if remaining > 5 else 0.5
        return weight * immediate_cost + (1 - weight) * future_cost

    candidates = sorted(unvisited_nodes, key=heuristic)[:3]
    probabilities = [1.0 / (i + 1) for i in range(len(candidates))]
    probabilities = [p / sum(probabilities) for p in probabilities]
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
