def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        current_to_dest = distance_matrix[current_node][destination_node]
        avg_dist = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        progress_factor = 0.5 if current_to_dest == 0 else min(1.0, 0.5 * (current_to_dest / avg_dist))
        prob = 0.5 + 0.5 * (1 - 1 / (1 + math.exp(-temperature * progress_factor)))
        if random.random() < prob:
            return destination_node
        else:
            def heuristic(node):
                to_current = distance_matrix[current_node][node]
                to_destination = distance_matrix[node][destination_node]
                return (0.7 - 0.2 * progress_factor) * to_current + (0.3 + 0.2 * progress_factor) * to_destination
            return min(unvisited_nodes, key=heuristic)
    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
