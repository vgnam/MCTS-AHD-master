def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_pheromone(node):
        direct_distance = distance_matrix[current_node][node]
        decay_factor = 1.0 - (0.5 * len(unvisited_nodes) / len(distance_matrix))
        return (1.0 / (direct_distance + 1e-10)) * (decay_factor ** 2)

    def heuristic(node):
        pheromone = calculate_pheromone(node)
        local_distance = distance_matrix[current_node][node]
        destination_attractiveness = 1.0 / (1.0 + distance_matrix[node][destination_node])
        temperature = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
        exploration_bias = temperature * (1.0 / (pheromone + 1e-10))
        exploitation_bias = (1.0 - temperature) * local_distance
        return exploration_bias + exploitation_bias + (0.2 * destination_attractiveness)

    scores = [heuristic(node) for node in unvisited_nodes]
    probabilities = [1.0 / (score + 1e-10) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [prob / total_prob for prob in probabilities]
    next_node = np.random.choice(unvisited_nodes, p=normalized_probs)
    return next_node
