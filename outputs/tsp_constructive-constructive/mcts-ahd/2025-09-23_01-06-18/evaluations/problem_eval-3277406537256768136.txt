def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        progress_factor = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))
        weight = 0.7 + 0.3 * progress_factor

        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0

        diversity_metric = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_metric += 0.2 * sum(distance_matrix[other][node] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)

        return (to_current * weight + global_potential * (1.0 - weight) + 0.4 * regret_term) - 0.3 * diversity_metric

    heuristic_scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(heuristic_scores)
    max_score = max(heuristic_scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in heuristic_scores]

    if sum(normalized_scores) > 0:
        probabilities = [score / sum(normalized_scores) for score in normalized_scores]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = unvisited_nodes[0]

    return next_node
