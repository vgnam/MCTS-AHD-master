def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.7 + 0.3 * (1 - progress_factor)

    max_distance = max(max(row) for row in distance_matrix)
    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0

    def heuristic(node):
        local_cost = distance_matrix[current_node][node] / max_distance
        detour_cost = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / max_distance
        global_potential = (detour_cost + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)

        node_degree = sum(1 for d in distance_matrix[node] if d < avg_unvisited_distance)
        diversity_bonus = (node_degree / total_nodes) * (0.5 - 0.5 * progress_factor)

        weighted_score = (1 - selection_pressure) * local_cost + selection_pressure * global_potential - 0.3 * diversity_bonus
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
