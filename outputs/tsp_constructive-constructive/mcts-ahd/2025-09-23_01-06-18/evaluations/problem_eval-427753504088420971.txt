def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_pheromone(node):
        decay_factor = 1.0 / (1.0 + len(unvisited_nodes) ** 1.5)
        return (1.0 / (distance_matrix[current_node][node] + distance_matrix[node][destination_node] + 1e-10)) * decay_factor

    def heuristic(node):
        pheromone = calculate_pheromone(node)
        local_distance = distance_matrix[current_node][node]
        normalized_distance = local_distance / max(distance_matrix[current_node].values())
        temperature = 1.0 / (1.0 + len(unvisited_nodes))
        return (temperature * normalized_distance) / (pheromone + 1e-10)

    heuristic_values = {node: heuristic(node) for node in unvisited_nodes}
    total_heuristic = sum(heuristic_values.values())
    probabilities = {node: (1.0 - heuristic_values[node] / total_heuristic) for node in unvisited_nodes}
    next_node = max(probabilities.items(), key=lambda x: x[1])[0]
    return next_node
