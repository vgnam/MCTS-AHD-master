def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 1.5 - remaining_ratio

        # Aggressive regret term focusing on immediate savings
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:3]) / 3
        regret_weight = 0.7 * (1.0 - remaining_ratio)

        # Connectivity penalty instead of diversity bonus
        local_connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        connectivity_penalty = 0.3 * (1.0 - (local_connectivity / len(unvisited_nodes)))

        # Distance-based bonus
        distance_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)

        # Adaptive weighting
        local_factor = to_current * weight * (1.0 + regret_weight * regret_term)
        global_factor = (to_destination + distance_bonus) * (1.0 - weight)

        return (local_factor + global_factor) + connectivity_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
