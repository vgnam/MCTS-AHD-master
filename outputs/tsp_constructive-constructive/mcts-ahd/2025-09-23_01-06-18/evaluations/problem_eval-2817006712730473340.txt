def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if direct_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        path_quality = (local_distance + global_distance) / 2

        remaining_nodes_ratio = len(unvisited_nodes) / len(distance_matrix)
        exploration_weight = max(0.3, remaining_nodes_ratio)
        exploitation_weight = 1.0 - exploration_weight

        opportunity_cost = sum(max(distance_matrix[current_node][other] - local_distance, 0) for other in unvisited_nodes) / len(unvisited_nodes)
        diversity_score = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)

        return (exploitation_weight * (path_quality + 0.4 * opportunity_cost) +
                exploration_weight * (0.6 * node_centrality - 0.2 * diversity_score))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
