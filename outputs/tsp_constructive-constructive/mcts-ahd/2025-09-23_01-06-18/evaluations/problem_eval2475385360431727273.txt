def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    base_pressure = 0.3 + 0.7 * progress_factor
    node_density = total_nodes / (sum(sum(row) for row in distance_matrix) + 1e-6)
    selection_pressure = base_pressure * (1 + 0.2 * node_density)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Calculate node centrality and distance variance
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        distances = [distance_matrix[current_node][n] for n in unvisited_nodes]
        distance_variance = sum((d - local_cost) ** 2 for d in distances) / (len(distances) + 1e-6)

        # Novel node attractiveness metric
        node_attractiveness = (1 / (centrality + 1e-6)) * (1 + 0.1 * distance_variance)

        # Dynamic regret calculation
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)

        # Weighted hybrid score
        early_weight = 0.5 * (1 - progress_factor)
        late_weight = 0.5 * progress_factor
        weighted_score = (
            early_weight * (0.5 * regret + 0.3 * local_cost + 0.2 * node_attractiveness) +
            late_weight * (0.4 * global_potential + 0.3 * node_attractiveness + 0.3 * (1 / (local_cost + 1e-6)))
        )

        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
