def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    static_weight = 0.7

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - remaining_distance
        weighted_detour = static_weight * to_current + (1 - static_weight) * detour_cost
        normalization_factor = 1 + 0.1 * (len(unvisited_nodes) ** 2)
        return weighted_detour * normalization_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
