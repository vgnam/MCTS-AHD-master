def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    exploration_factor = 0.3 * (1 - progress_ratio) ** 3 + 0.1 * (remaining_nodes / total_nodes)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        detour_weight = (1 - exploration_factor) * (1 + 0.5 * (1 - progress_ratio))
        detour_penalty = detour_cost * detour_weight
        return immediate_cost + detour_penalty

    candidates = list(unvisited_nodes)
    weights = [1 / (1 + heuristic(node)) for node in candidates]
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(candidates, weights=normalized_weights, k=1)[0]
    return next_node
