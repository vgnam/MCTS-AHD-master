def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        if remaining_distance / avg_distance <= 1.1:
            return destination_node
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        base_weight = 1.5
        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:3]) / 3
        diversity_bonus = (sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)) * (1 + remaining_ratio)
        connectivity_factor = 1 + (0.3 * connectivity / len(unvisited_nodes))
        detour_penalty = (to_destination - to_current) * (1 - remaining_ratio) ** 2
        weighted_proximity = to_current * base_weight * connectivity_factor
        weighted_detour = to_destination * (1.0 - base_weight) * (1 + detour_penalty)
        regret_adjustment = regret_term * (1 + remaining_ratio)
        return weighted_proximity + weighted_detour + 0.3 * regret_adjustment - 0.1 * diversity_bonus
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
