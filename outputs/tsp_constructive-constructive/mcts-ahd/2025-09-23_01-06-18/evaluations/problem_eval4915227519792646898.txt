def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        weight = 1 + 0.4 * (len(unvisited_nodes) / len(distance_matrix))
        exploration_factor = (to_destination / centrality) ** 0.5
        return (to_current * weight + to_destination * (1 / weight)) * exploration_factor

    candidates = sorted(unvisited_nodes, key=heuristic)
    selection_prob = [1 / (i + 1) for i in range(len(candidates))]
    selection_prob = [p / sum(selection_prob) for p in selection_prob]
    next_node = np.random.choice(candidates, p=selection_prob)
    return next_node
