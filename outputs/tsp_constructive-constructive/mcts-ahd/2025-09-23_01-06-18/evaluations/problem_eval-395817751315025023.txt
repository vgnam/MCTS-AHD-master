def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
    proximity_weight = 0.6 * (1 - progress)
    direction_weight = 0.4 + progress * 0.6

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        direction_factor = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        cycle_penalty = 1 if node in [current_node, destination_node] else 0
        return (proximity_weight * to_current + direction_weight * direction_factor) + cycle_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
