def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    progress = 1 - len(unvisited_nodes) / len(distance_matrix)
    temperature = 1.0 - 0.8 * progress ** 2

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)

        regret_weights = [1.0 - (distance_matrix[current_node][other] / (sum(distance_matrix[current_node]) + 1e-6)) for other in unvisited_nodes]
        weighted_regret = sum(r * (distance_matrix[current_node][other] - to_current) for r, other in zip(regret_weights, unvisited_nodes)) / len(unvisited_nodes)

        diversity_metric = sum((distance_matrix[node][other] - sum(distance_matrix[n][other] for n in unvisited_nodes) / len(unvisited_nodes)) ** 2 for other in unvisited_nodes) ** 0.5

        exploration_term = temperature * (to_destination / (global_potential + 1e-6))
        exploitation_term = (1 - temperature) * to_current

        return exploitation_term + exploration_term + 0.4 * weighted_regret - 0.6 * diversity_metric

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
