def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 1.5 + 0.5 * remaining_ratio

        # Path deviation penalty
        avg_path = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        deviation_penalty = (to_current - avg_path) ** 2 if avg_path > 0 else 0

        # Regret term with lookahead
        regret_term = 0
        if len(unvisited_nodes) > 1:
            min_dist = min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)
            regret_term = (to_current - min_dist) ** 2

        # Adaptive weighting with time decay
        time_decay = 1.0 / (1.0 + 0.1 * remaining_ratio)
        weighted_current = to_current * weight * time_decay
        weighted_destination = to_destination * (1.0 - weight) * time_decay

        return weighted_current + weighted_destination + 0.2 * deviation_penalty + 0.4 * regret_term

    # Normalized probabilistic selection
    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    if max_score == min_score:
        return random.choice(unvisited_nodes)

    normalized_scores = [(max_score - score) / (max_score - min_score) for score in scores]
    total = sum(normalized_scores)
    probabilities = [score / total for score in normalized_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
