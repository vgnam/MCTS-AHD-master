def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]

        # Adaptive weights with sigmoid transition
        exploration_weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))
        exploitation_weight = 1 - exploration_weight

        # Penalize excessive detours relative to average
        avg_detour = sum(distance_matrix[node][dest] - distance_matrix[current_node][dest] for dest in unvisited_nodes) / remaining_nodes
        detour_penalty = max(0, detour_risk - 1.5 * avg_detour)

        return exploitation_weight * to_current + exploration_weight * (detour_risk + detour_penalty)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
