def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + 0.1 * (len(unvisited_nodes) / len(distance_matrix))
        if remaining_distance / avg_distance <= threshold:
            return destination_node
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        local_weight = 1.5 * remaining_ratio
        global_weight = 1.0 - remaining_ratio
        regret_penalty = min(distance_matrix[current_node][other] for other in unvisited_nodes if other != node) - to_current
        return to_current * local_weight + to_destination * global_weight + 0.3 * regret_penalty
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
