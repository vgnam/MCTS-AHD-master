def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    immediate_weight = 0.5 - 0.3 * progress
    regret_weight = 0.3 + 0.5 * progress
    detour_weight = 0.2 - 0.1 * progress
    hub_weight = 0.1 + 0.2 * progress
    diversity_weight = 0.3 - 0.2 * progress
    temperature = 0.8 - 0.6 * progress

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.15 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        weighted_score = (immediate_weight * immediate_cost + regret_weight * regret + detour_weight * detour_cost + hub_weight * hub_score) * temperature - diversity_weight * diversity_bonus
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
