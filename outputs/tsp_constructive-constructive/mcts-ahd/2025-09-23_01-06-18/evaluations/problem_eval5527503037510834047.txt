def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)

        # Dynamic regret scaling based on node centrality
        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n))
        regret_scale = 0.2 + 0.3 * (node_degree / (remaining_nodes - 1)) if remaining_nodes > 1 else 0.2

        # Path diversity term (reward nodes with fewer recently visited neighbors)
        diversity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 1.5 * immediate_cost) / remaining_nodes if remaining_nodes > 1 else 0

        # Hub connectivity adjusted by variance of distances to unvisited nodes
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        hub_score = (0.1 + 0.4 * progress) * (sum(distances) / len(distances) if distances else 0) / (max(distances) - min(distances) + 1e-6 if len(distances) > 1 else 1)

        return (0.6 - 0.3 * progress) * immediate_cost + regret_scale * regret + (0.1 * (1 - progress)) * detour_cost + hub_score + 0.1 * diversity_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
