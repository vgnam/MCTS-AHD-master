def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        progress_factor = 1 - remaining_ratio

        # Adaptive learning rate (decreases as progress increases)
        learning_rate = max(0.1, 0.9 * remaining_ratio)

        # Momentum term (favors recent choices)
        momentum = 0.5 if progress_factor < 0.5 else 0.3

        # Dynamic regret threshold (adjusts based on variance)
        distances = [distance_matrix[current_node][other] for other in unvisited_nodes]
        variance = sum((d - avg_distance) ** 2 for d in distances) / len(distances) if distances else 0
        regret_threshold = 1.5 * (1 + variance / (avg_distance + 1e-6))

        # Regret term with dynamic threshold
        regret_term = max(0, max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) - regret_threshold)

        # Global potential with predictive factor
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        global_potential = (to_destination + predictive_factor) / 2

        # Combine terms with adaptive weights
        local_weight = 0.6 * (1 - learning_rate) + 0.2 * momentum
        global_weight = 0.4 * learning_rate + 0.2 * momentum
        regret_weight = 0.2 * learning_rate

        return (local_weight * to_current + global_weight * global_potential + regret_weight * regret_term)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
