def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    distance_variance = np.var([distance_matrix[current_node][n] for n in unvisited_nodes])
    temperature = (1.0 - 0.7 * progress_factor) * (1.0 + 0.3 * distance_variance)

    remaining_distance = distance_matrix[current_node][destination_node]
    dynamic_weight = 0.5 + 0.5 * (1 - remaining_distance / sum(distance_matrix[current_node]))

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - remaining_distance
        weighted_detour = dynamic_weight * local_cost + (1 - dynamic_weight) * detour_cost
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_penalty = np.mean([distance_matrix[node][n] for n in unvisited_nodes])
        weighted_score = (0.4 * weighted_detour + 0.3 * regret_term) * temperature - 0.3 * diversity_penalty
        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    probabilities = np.exp(scores) / np.sum(np.exp(scores))
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
