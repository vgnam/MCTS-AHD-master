import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_weight = 0.0
    weights = []

    # Calculate weights for each node
    for node in unvisited_nodes:
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]

        # Inverse distance weighting for nearest-neighbor
        if to_current == 0:
            weight = float('inf')
        else:
            weight = 1.0 / to_current

        # Adjust weight based on detour cost and alignment with destination
        weight *= max(0.1, 1.0 - (detour_cost / (distance_matrix[current_node][destination_node] + 1e-6)))

        weights.append(weight)
        total_weight += weight

    # Normalize weights and select node probabilistically
    if total_weight == 0:
        return random.choice(unvisited_nodes)

    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
