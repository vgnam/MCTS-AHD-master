def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    exploration_weight = 0.2 * (1 - progress)
    exploitation_weight = 0.6
    direction_weight = 0.2

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        direction_factor = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        detour_risk = direction_factor if direction_factor > 0 else 0
        return exploitation_weight * to_current + direction_weight * direction_factor + exploration_weight * detour_risk

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
