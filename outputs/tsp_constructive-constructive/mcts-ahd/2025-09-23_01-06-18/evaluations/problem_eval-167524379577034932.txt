def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = immediate_cost - min_cost if min_cost > 0 else 0

        # Dynamic regret scaling based on current path efficiency
        regret_scaling = 1.0 / (1.0 + 0.5 * progress) if immediate_cost > 1.5 * min_cost else 1.0

        # Novel hub connectivity metric: centrality + proximity
        hub_score = 0
        if remaining_nodes > 1:
            nearest_neighbor = min(unvisited_nodes, key=lambda n: distance_matrix[node][n])
            hub_score = (1.0 / (1.0 + distance_matrix[node][nearest_neighbor])) * sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * distance_matrix[node][nearest_neighbor])

        # Probabilistic element to escape local optima
        random_factor = 0.1 * (0.5 + progress) * (random.random() - 0.5)

        return (0.5 - 0.3 * progress) * immediate_cost + (0.3 + 0.4 * progress) * regret * regret_scaling + (0.1 * (1 - progress)) * detour_cost + (0.1 + 0.3 * progress) * hub_score + random_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
