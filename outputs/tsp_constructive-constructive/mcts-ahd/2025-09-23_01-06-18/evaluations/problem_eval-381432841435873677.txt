def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix) - 1)
    proximity_weight = 0.5 - 0.4 * progress
    detour_weight = 0.3 + 0.4 * progress
    diversity_weight = 0.2 + 0.0 * progress

    def calculate_score(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        farthest_cost = max(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) if unvisited_nodes else 0
        return (proximity_weight * immediate_cost +
                detour_weight * detour_cost +
                diversity_weight * farthest_cost)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
