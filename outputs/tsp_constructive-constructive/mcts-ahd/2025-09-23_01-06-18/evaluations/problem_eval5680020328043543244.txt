def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_potential(node):
        direct_distance = distance_matrix[current_node][node]
        return (1.0 / (direct_distance + 1e-10)) * (1.0 / (1.0 + distance_matrix[node][destination_node]))

    def heuristic(node):
        potential = calculate_potential(node)
        local_distance = distance_matrix[current_node][node]
        penalty_factor = (len(unvisited_nodes) ** 0.5) / (len(distance_matrix) ** 1.5)
        exploration_weight = (len(unvisited_nodes) / len(distance_matrix)) ** 2
        return (local_distance * penalty_factor) / (potential ** exploration_weight)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
