def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    exploration_factor = (visited_nodes / total_nodes) if total_nodes > 0 else 0.0

    if destination_node in unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        normalized_distance = distance_matrix[current_node][destination_node] / avg_distance if avg_distance != 0 else 1.0
        priority_threshold = 1.5 * (1 - exploration_factor)
        if normalized_distance <= priority_threshold:
            return destination_node

    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes) if unvisited_nodes else 0
    normalized_heuristic = 1 + 0.3 * exploration_factor * (max_distance / (distance_matrix[current_node][destination_node] + 1e-9))

    next_node = min(unvisited_nodes, key=lambda node: (distance_matrix[current_node][node] / (max_distance + 1e-9)) * normalized_heuristic)
    return next_node
