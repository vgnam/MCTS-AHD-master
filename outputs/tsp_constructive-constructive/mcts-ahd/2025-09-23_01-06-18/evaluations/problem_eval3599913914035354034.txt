def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def cluster_nodes(nodes, threshold=1.5):
        clusters = []
        nodes = list(nodes)
        while nodes:
            cluster = [nodes.pop(0)]
            for node in list(nodes):
                if any(distance_matrix[cluster[0]][node] <= threshold * distance_matrix[cluster[0]][c] for c in cluster):
                    cluster.append(node)
                    nodes.remove(node)
            clusters.append(cluster)
        return clusters

    clusters = cluster_nodes(unvisited_nodes)
    cluster_scores = []

    for cluster in clusters:
        cluster_score = 0
        for node in cluster:
            immediate_cost = distance_matrix[current_node][node]
            future_cost = distance_matrix[node][destination_node]
            density = sum(1 for other in cluster if distance_matrix[node][other] <= threshold)
            cluster_score += (immediate_cost + 0.7 * future_cost) / (1 + density)
        cluster_score /= len(cluster)
        cluster_scores.append(cluster_score)

    selected_cluster = clusters[cluster_scores.index(min(cluster_scores))]
    node_weights = []
    for node in selected_cluster:
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        weight = (immediate_cost + 0.3 * future_cost) ** -1
        node_weights.append(weight)

    total_weight = sum(node_weights)
    normalized_weights = [w / total_weight for w in node_weights]
    next_node = np.random.choice(selected_cluster, p=normalized_weights)

    return next_node
