def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, path_history=None):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    selection_pressure = 0.5 + 0.5 * (progress ** 2)
    temperature = 0.9 - 0.8 * (progress ** 1.5)

    if path_history is None:
        path_history = []

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)

        hub_score = 0
        if remaining_nodes > 1:
            avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * avg_dist) * (0.9 ** len(path_history))

        novelty_bonus = 1 / (1 + sum(1 for n in path_history if n == node))
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        weighted_score = (selection_pressure * immediate_cost +
                         (1 - selection_pressure) * (regret * (1.2 - progress)) +
                         0.3 * detour_cost +
                         0.2 * hub_score) * temperature + 0.4 * novelty_bonus - 0.2 * diversity_bonus
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
