def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    selection_pressure = 0.5 + 0.5 * (progress ** 2)
    temperature = 0.9 - 0.8 * (progress ** 1.5)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) * (1 + 2 * progress)
        regret_weight = 1 + 0.5 * (1 - progress)
        regret = regret_weight * (immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes))

        hub_threshold = 1.1 * min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if remaining_nodes > 1 else 0
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < hub_threshold) if remaining_nodes > 1 else 0
        hub_score *= (1 + 0.3 * progress)

        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        diversity_penalty = (diversity_penalty ** 2) * (1 + 3 * progress)

        weighted_score = (selection_pressure * immediate_cost + (1 - selection_pressure) * regret + 0.3 * detour_cost + 0.2 * hub_score) * temperature - 0.4 * diversity_penalty
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
