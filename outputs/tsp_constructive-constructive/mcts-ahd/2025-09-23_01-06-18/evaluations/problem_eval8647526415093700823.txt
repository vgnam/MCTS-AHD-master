def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + 0.5 * (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        adaptive_weight = 1.0 / (1.0 + remaining_ratio)
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0
        diversity_metric = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        global_potential = (to_destination + predictive_factor) / 2
        path_diversity = diversity_metric / (sum(distance_matrix[current_node][other] for other in unvisited_nodes) + 1e-6)
        regret_aware_potential = global_potential * (1.0 + 0.3 * regret_term)
        return (to_current * adaptive_weight + regret_aware_potential * (1.0 - adaptive_weight)) - 0.3 * path_diversity

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
