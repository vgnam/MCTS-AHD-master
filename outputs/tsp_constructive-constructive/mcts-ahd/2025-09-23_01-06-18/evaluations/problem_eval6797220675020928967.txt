def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        local_density = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if local_density == 0:
            return destination_node
        threshold = 1.2 * (1 + 0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / local_density <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        tour_progress = len(unvisited_nodes) / len(distance_matrix)
        local_weight = 1.5 * (1 - tour_progress) + 0.5
        global_weight = 1.5 * tour_progress + 0.5
        density_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        proximity_factor = (to_current + to_destination) / (1 + density_factor)
        return (local_weight * to_current) + (global_weight * to_destination) + (0.3 * density_factor) + (0.2 * proximity_factor)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
