def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        weighted_detour = 0.7 * to_current + 0.3 * detour_cost
        return weighted_detour

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
