def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    temperature = 0.7 - 0.4 * progress

    neighborhood_size = max(1, int(3 * (1 - progress)))
    neighborhood = sorted(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])[:neighborhood_size]

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        regret_scaling = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        scaled_regret = regret * (1 + 0.5 * regret_scaling)

        cluster_size = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)

        exploration_bonus = (0.5 - 0.3 * progress) * (predictive_factor - immediate_cost)
        weighted_score = (0.4 - 0.2 * progress) * immediate_cost + (0.3 + 0.3 * progress) * scaled_regret + (0.2 * progress) * cluster_size + (0.1 * (1 - progress)) * exploration_bonus
        return weighted_score * temperature

    scores = [heuristic(node) for node in neighborhood]
    probabilities = [math.exp(score / temperature) for score in scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(neighborhood, weights=probabilities, k=1)[0]
    return next_node
