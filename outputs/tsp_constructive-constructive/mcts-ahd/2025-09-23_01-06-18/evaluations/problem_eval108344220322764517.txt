def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    dynamic_weight = 1.0 - remaining_ratio

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        proximity_factor = direct_distance / avg_distance
        threshold = 1.0 + (0.8 * (1.0 - remaining_ratio))
        if proximity_factor <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        destination_proximity = to_destination * (1.0 - dynamic_weight)
        return to_current * dynamic_weight + predictive_factor * (0.5 * dynamic_weight) + destination_proximity

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
