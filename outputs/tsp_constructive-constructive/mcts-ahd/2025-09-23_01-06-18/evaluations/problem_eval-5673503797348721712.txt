def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Calculate regret with dynamic multiplier
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        avg_cost = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
        regret_multiplier = (avg_cost / min_cost) if min_cost > 0 else 1
        regret = (immediate_cost - min_cost) * regret_multiplier

        # Calculate hub score using betweenness centrality estimate
        hub_score = 0
        if remaining_nodes > 1:
            for n in unvisited_nodes:
                if n != node:
                    neighbors = [m for m in unvisited_nodes if m != node and m != n]
                    if neighbors:
                        hub_score += sum(1 for m in neighbors if distance_matrix[node][n] < 1.3 * distance_matrix[node][m])

        # Adaptive weights
        weight_immediate = 0.7 - 0.4 * progress
        weight_regret = 0.2 + 0.2 * progress
        weight_detour = 0.1 * (1 - progress)
        weight_hub = 0.2 * progress

        return (weight_immediate * immediate_cost +
                weight_regret * regret +
                weight_detour * detour_cost +
                weight_hub * hub_score)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
