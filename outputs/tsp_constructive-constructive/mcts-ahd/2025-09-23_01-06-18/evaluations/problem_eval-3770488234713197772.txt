def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.5 + (0.5 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)

        # Centrality metric: average distance to all other nodes
        centrality = sum(distance_matrix[node][other] for other in distance_matrix) / len(distance_matrix)

        # Dynamic regret weighting based on remaining nodes
        regret_weight = 1.0 - remaining_ratio
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0

        # Exploration pressure term
        exploration_pressure = (len(distance_matrix) - len(unvisited_nodes)) / len(distance_matrix)

        # Dynamic weight adjustment
        weight = 1.5 - (1.0 * remaining_ratio)

        # Novel scoring equation
        score = (to_current * weight +
                centrality * (1.0 - weight) * 0.7 +
                regret_term * regret_weight * 0.3 -
                exploration_pressure * 0.2)

        return score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
