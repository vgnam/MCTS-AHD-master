def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]
        exploration_weight = 0.4 * (1 - progress)
        exploitation_weight = 1 - exploration_weight
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        destination_bias = 1 / (1 + to_destination)
        return exploitation_weight * to_current + exploration_weight * (0.8 * detour_risk + 0.2 * destination_bias) + 0.5 * centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
