def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    phase_factor = min(1, progress_factor * 2)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        min_local = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_local = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_local) / (max_local - min_local + 1e-6) if (max_local - min_local) > 0 else 0

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        scaled_centrality = centrality * (1 - phase_factor * 0.5)
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        if phase_factor < 0.5:
            weighted_score = (1 - phase_factor) * regret + phase_factor * (0.7 * local_cost + 0.3 * global_cost) - 0.3 * scaled_centrality - 0.2 * diversity_bonus
        else:
            weighted_score = (0.5 - phase_factor) * regret + (phase_factor - 0.5) * (0.6 * local_cost + 0.4 * global_cost) - 0.2 * scaled_centrality - 0.25 * diversity_bonus

        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
