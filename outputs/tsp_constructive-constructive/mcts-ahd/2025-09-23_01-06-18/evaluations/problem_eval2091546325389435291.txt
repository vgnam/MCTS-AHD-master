def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    progress_factor = (1 - progress) ** 1.5

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret = (local_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        diversity = max(distance_matrix[node][n] for n in unvisited_nodes) - min(distance_matrix[node][n] for n in unvisited_nodes)

        influence = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes) / remaining_nodes

        adaptive_regret = regret * (1 + progress_factor)
        dynamic_centrality_penalty = centrality * (1 - progress_factor)

        return (0.5 * adaptive_regret + 0.3 * local_cost + 0.2 * global_potential) - 0.3 * dynamic_centrality_penalty + 0.1 * diversity + 0.2 * influence

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
