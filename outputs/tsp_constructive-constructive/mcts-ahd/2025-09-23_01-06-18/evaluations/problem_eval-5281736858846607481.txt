def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    risk_tolerance = 0.5 * (1 + (len(unvisited_nodes) / len(distance_matrix)) * (remaining_distance / sum(distance_matrix[current_node])))

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - remaining_distance
        risk_factor = (detour_cost / (immediate_cost + 1e-6)) ** risk_tolerance
        return immediate_cost * (1 - risk_tolerance) + detour_cost * risk_tolerance * risk_factor

    scores = [heuristic(node) for node in unvisited_nodes]
    temperature = 1.0 / (1 + len(unvisited_nodes))
    probabilities = [math.exp(score / temperature) for score in scores]
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
