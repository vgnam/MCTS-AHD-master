def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        node_degree = sum(1 for node in unvisited_nodes if distance_matrix[current_node][node] < 1.5 * remaining_distance)
        entropy = sum((distance_matrix[current_node][node] / avg_distance) * (1 - (distance_matrix[current_node][node] / avg_distance)) for node in unvisited_nodes) / len(unvisited_nodes)
        dynamic_threshold = 0.75 - (0.25 * (len(unvisited_nodes) / len(distance_matrix))) - (0.1 * (node_degree / len(unvisited_nodes))) + (0.15 * entropy)
        if remaining_distance / avg_distance <= dynamic_threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        base_weight = 1.5 - remaining_ratio
        node_degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        entropy = sum((distance_matrix[node][other] / to_current) * (1 - (distance_matrix[node][other] / to_current)) for other in unvisited_nodes) / len(unvisited_nodes)
        memory_factor = 0.3 * (1 - remaining_ratio) if node in unvisited_nodes else 0.1
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:3]) / 3
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        global_potential = (to_destination + predictive_factor) / 2
        connectivity_factor = 1 + (0.25 * node_degree / len(unvisited_nodes)) + (0.15 * entropy)
        weight = base_weight * (1 + (0.3 * (node_degree / len(unvisited_nodes)))) * (1 - (0.2 * entropy))
        return (to_current * weight * connectivity_factor + global_potential * (1.0 - weight) + 0.5 * regret_term + 0.2 * memory_factor) - 0.3 * diversity_bonus

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
