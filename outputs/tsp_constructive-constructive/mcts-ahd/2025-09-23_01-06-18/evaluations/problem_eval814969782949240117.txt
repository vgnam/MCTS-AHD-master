def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 - (remaining_nodes / (remaining_nodes + 10))  # Decreases as nodes are visited

    # Calculate base probabilities
    base_probs = []
    for node in unvisited_nodes:
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = max(0, to_destination - distance_matrix[current_node][destination_node])
        weight = 1 + 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Dynamic weight
        score = to_current * weight + detour_cost
        base_probs.append((node, score))

    # Convert scores to probabilities using softmax with temperature
    scores = [score for _, score in base_probs]
    if not scores:
        return destination_node
    max_score = max(scores)
    exp_scores = [math.exp((max_score - score) / temperature) for score in scores]
    sum_exp = sum(exp_scores)
    probs = [exp / sum_exp for exp in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([node for node, _ in base_probs], weights=probs, k=1)[0]
    return next_node
