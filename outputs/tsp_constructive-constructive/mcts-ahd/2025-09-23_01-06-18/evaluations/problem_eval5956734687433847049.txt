def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_connectivity(node):
        connectivity = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                connectivity += 1 / (distance_matrix[node][neighbor] + 1e-10)
        return connectivity

    def dynamic_heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        connectivity = calculate_connectivity(node)
        return (0.5 * connectivity) + (0.3 * immediate_cost) + (0.2 * future_cost)

    next_node = min(unvisited_nodes, key=dynamic_heuristic)
    return next_node
