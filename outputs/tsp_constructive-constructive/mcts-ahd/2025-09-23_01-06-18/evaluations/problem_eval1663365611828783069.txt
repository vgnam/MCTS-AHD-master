def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_nodes = len(unvisited_nodes)
        total_nodes = len(distance_matrix)
        progress_factor = 1 - (remaining_nodes / total_nodes)
        priority_threshold = 1.2 - 0.4 * progress_factor

        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= priority_threshold:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.5 + 0.5 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (1 - progress_factor) * distance_matrix[node][destination_node] + progress_factor * sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) / (remaining_nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        destination_bias = 1 / (1 + distance_matrix[node][destination_node])
        weighted_score = (1 - selection_pressure) * 0.8 * local_cost + selection_pressure * (0.5 * global_potential + 0.3 * destination_bias) - 0.2 * centrality
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
