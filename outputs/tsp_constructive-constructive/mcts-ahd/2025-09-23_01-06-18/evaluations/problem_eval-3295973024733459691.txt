def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.0:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][i] for i in unvisited_nodes))
    detour_weight = 0.3 + 0.4 * (remaining_nodes / (remaining_nodes + 2)) * proximity_factor

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        weight = 1 + 0.4 * (remaining_nodes / (remaining_nodes + 2))
        return to_current * weight + detour_weight * detour_cost * 1.2

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
