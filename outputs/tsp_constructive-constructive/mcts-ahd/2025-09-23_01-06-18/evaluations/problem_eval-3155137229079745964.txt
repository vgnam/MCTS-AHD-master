def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    selection_pressure = 0.4 + 0.6 * progress

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        regret = max(distance_matrix[current_node][n] - immediate_cost for n in unvisited_nodes) if unvisited_nodes else 0
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        dynamic_weight = selection_pressure * (0.5 * immediate_cost + 0.5 * regret) + (1 - selection_pressure) * (0.6 * global_potential - 0.4 * diversity_bonus)
        return dynamic_weight

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
