def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    node_density = total_nodes / sum(sum(row) for row in distance_matrix)

    selection_pressure = 0.5 + 0.5 * progress_factor * (1 + node_density)
    temperature = 0.7 - 0.4 * progress_factor * (1 + node_density)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret_factor = sum(sorted(distance_matrix[current_node][n] - local_cost for n in unvisited_nodes)[:2]) if len(unvisited_nodes) > 1 else 0
        diversity_metric = (sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes) ** 2

        weighted_score = (selection_pressure * (local_cost ** 0.5) +
                         (1 - selection_pressure) * (global_potential ** 2) +
                         0.3 * regret_factor) * temperature - 0.5 * diversity_metric
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
