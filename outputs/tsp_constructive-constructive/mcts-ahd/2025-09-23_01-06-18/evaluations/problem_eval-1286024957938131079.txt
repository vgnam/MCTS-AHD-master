def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress_factor = remaining_nodes / len(distance_matrix)
    detour_weight = 0.4 * (1 - progress_factor)

    path_diversity = 0.2 + 0.1 * (len(distance_matrix) - remaining_nodes) / len(distance_matrix)

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        diversity_cost = distance_matrix[current_node][node] - distance_matrix[current_node][destination_node]
        return to_current + detour_weight * detour_cost + path_diversity * diversity_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
