def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]

        exploration_factor = 1 / (1 + math.exp(-10 * (progress - 0.5)))
        exploitation_factor = 1 - exploration_factor

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        structure_penalty = detour_risk * node_centrality

        return exploitation_factor * to_current + exploration_factor * structure_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
