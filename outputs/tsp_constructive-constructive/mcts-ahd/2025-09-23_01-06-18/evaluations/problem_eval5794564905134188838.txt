def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    detour_weight = 0.3 + 0.5 * (1 / (remaining_nodes + 1))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        return to_current + detour_weight * detour_cost * (remaining_nodes / (remaining_nodes + 2))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
