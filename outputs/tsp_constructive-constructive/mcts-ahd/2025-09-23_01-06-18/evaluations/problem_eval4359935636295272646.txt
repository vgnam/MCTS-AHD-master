def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0 or direct_distance / avg_distance <= 1.1:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    local_weight = 1.5 - 0.5 * progress_factor
    global_weight = 0.5 + 0.5 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                          sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        opportunity_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        destination_bias = 0
        if destination_node in unvisited_nodes:
            dest_distance = distance_matrix[node][destination_node]
            avg_dest_dist = sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / len(unvisited_nodes)
            destination_bias = 0.5 if dest_distance <= avg_dest_dist else -0.2

        return (local_cost * local_weight + global_potential * global_weight +
                0.4 * regret_term + 0.2 * opportunity_cost +
                0.3 * centrality + 0.5 * destination_bias)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
