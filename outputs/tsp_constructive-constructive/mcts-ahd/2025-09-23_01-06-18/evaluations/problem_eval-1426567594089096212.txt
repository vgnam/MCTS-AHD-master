def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        local_penalty = max(0, (1.0 - (to_current / sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node))) * 0.5)
        global_potential = to_destination * 0.3
        return to_current * 0.6 + global_potential - local_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
