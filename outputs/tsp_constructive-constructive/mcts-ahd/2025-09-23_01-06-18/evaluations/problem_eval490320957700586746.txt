def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.3 + 0.7 * progress_factor

    def neighborhood_aware_regret(node):
        min_dist = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_dist = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        local_regret = (distance_matrix[current_node][node] - min_dist) / (max_dist - min_dist + 1e-6)
        neighborhood_factor = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        return local_regret * (1 + 0.5 * neighborhood_factor)

    def dynamic_global_potential(node):
        base_potential = distance_matrix[node][destination_node]
        future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)
        return (base_potential + 0.8 * future_cost) / (remaining_nodes + 1)

    def reinforcement_weight_adjustment():
        if selection_pressure > 0.7:
            return (0.6, 0.4, 0.2, 0.1)  # High pressure: more local focus
        else:
            return (0.3, 0.5, 0.1, 0.4)  # Low pressure: more global exploration

    local_w, global_w, regret_w, central_w = reinforcement_weight_adjustment()

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = dynamic_global_potential(node)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        regret = neighborhood_aware_regret(node)
        proximity_bias = (1 - remaining_nodes / total_nodes) ** 2
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        weighted_score = (local_w * local_cost +
                         global_w * global_potential +
                         regret_w * regret +
                         central_w * centrality +
                         0.2 * proximity_bias -
                         0.1 * diversity_bonus)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
