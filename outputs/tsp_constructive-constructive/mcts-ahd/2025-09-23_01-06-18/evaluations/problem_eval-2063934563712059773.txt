def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    weight = 0.6 - 0.3 * progress
    temperature = 0.8 - 0.5 * progress ** 2  # Nonlinear cooling

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (immediate_cost - min_cost) / (min_cost + 1e-6)  # Adaptive regret scaling
        hub_centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.15 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        path_entropy = -sum((distance_matrix[node][n] / sum(distance_matrix[node][m] for m in unvisited_nodes)) * np.log(distance_matrix[node][n] / sum(distance_matrix[node][m] for m in unvisited_nodes) + 1e-6) for n in unvisited_nodes) if remaining_nodes > 1 else 0
        local_search_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1 + 1e-6) if remaining_nodes > 1 else 0
        weighted_score = (weight * immediate_cost + (1 - weight) * regret + 0.3 * hub_centrality) * temperature - 0.35 * path_entropy + 0.2 * local_search_bonus
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
