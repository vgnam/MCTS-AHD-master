def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0 or remaining_distance / avg_distance <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
        weight = 1 / (1 + math.exp(-5 * (progress - 0.5)))

        degree_penalty = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * to_current)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0

        diversity_entropy = -sum((distance_matrix[node][other] / sum(distance_matrix[node][n] for n in unvisited_nodes) * math.log(distance_matrix[node][other] / sum(distance_matrix[node][n] for n in unvisited_nodes))) for other in unvisited_nodes) if unvisited_nodes else 0

        return (to_current * weight + to_destination * (1 - weight) + 0.3 * regret_term - 0.1 * degree_penalty + 0.2 * diversity_entropy)

    if random.random() < 0.3 * (1 - len(unvisited_nodes) / len(distance_matrix)):
        candidates = sorted(unvisited_nodes, key=lambda x: -sum(1 for y in unvisited_nodes if distance_matrix[x][y] < 1.3 * distance_matrix[x][current_node]))
        return candidates[0] if candidates else destination_node

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
