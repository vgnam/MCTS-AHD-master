def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        compactness = avg_distance / max(distance_matrix[current_node][node] for node in unvisited_nodes) if unvisited_nodes else 1
        if compactness >= 0.7 or remaining_distance <= 1.5 * avg_distance:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        node_centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        path_potential = (distance_matrix[node][destination_node] +
                         sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        centrality_weight = 0.3 + 0.4 * progress_factor
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        return (local_cost * (1 - centrality_weight) + node_centrality * centrality_weight +
                0.5 * regret_term - 0.3 * path_potential)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
