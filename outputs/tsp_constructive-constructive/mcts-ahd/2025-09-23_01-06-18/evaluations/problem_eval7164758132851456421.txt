def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0 or remaining_distance / avg_distance <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = 1.0 - progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                          sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        return (local_cost * (1.5 - 0.5 * progress_factor) + global_potential * (0.5 + 0.5 * progress_factor)) + 0.3 * regret_term - 0.5 * diversity_bonus

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(score - min_score) / (max_score - min_score + 1e-6) for score in scores]

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    probabilities = [sigmoid((1 - normalized_score) / temperature) for normalized_score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
