def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_pheromone(node):
        direct_distance = distance_matrix[current_node][node]
        return (1.0 / (direct_distance + 1e-10)) * (1.0 / (1.0 + distance_matrix[node][destination_node]))

    def calculate_centrality(node):
        total_distance = sum(distance_matrix[node])
        return 1.0 / (total_distance + 1e-10)

    def heuristic(node):
        pheromone = calculate_pheromone(node)
        centrality = calculate_centrality(node)
        local_distance = distance_matrix[current_node][node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        temperature = 1.0 - (remaining_ratio ** 2)

        exploration_factor = temperature * centrality
        exploitation_factor = (1.0 - temperature) * (1.0 / (local_distance + 1e-10))

        return (exploration_factor + exploitation_factor) / (pheromone ** (1.0 / (1.0 + remaining_ratio)))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
