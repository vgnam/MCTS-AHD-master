importance" metric that balances proximity, connectivity, and bottleneck avoidance, with parameters (0.6, 0.3, -0.4) for weighted scoring.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Calculate node importance: balance of local cost, connectivity, and centrality
    node_importance = {}
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        connectivity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != node))
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        node_importance[node] = (0.6 * local_cost + 0.3 * connectivity - 0.4 * centrality)

    # Dynamic selection pressure based on node importance and progress
    avg_importance = sum(node_importance.values()) / remaining_nodes
    selection_pressure = 0.4 + 0.6 * (1 - progress_factor) * (1 - (node_importance[min(node_importance, key=node_importance.get)] / (avg_importance + 1e-6)))

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret = (local_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        weighted_score = (1 - selection_pressure) * regret + selection_pressure * (0.6 * node_importance[node] + 0.4 * global_potential)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
