import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        if len(unvisited_nodes) == 1:
            return destination_node
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.7 + (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        visited_ratio = 1.0 - (len(unvisited_nodes) / len(distance_matrix))

        # Dynamic weight adjustment with learning component
        base_weight = 1.5 - 0.5 * visited_ratio
        learning_factor = min(0.5, 0.1 * np.log(len(distance_matrix) - len(unvisited_nodes) + 1))
        weight = base_weight + learning_factor

        # Global potential with adaptive normalization
        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)
        norm_factor = max(1.0, sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))
        normalized_global = global_potential / norm_factor

        # Enhanced regret calculation
        current_distances = [distance_matrix[current_node][n] for n in unvisited_nodes]
        if not current_distances:
            regret_term = 0
        else:
            sorted_distances = sorted(current_distances)
            regret_term = sum(sorted_distances[-min(3, len(sorted_distances)):]) - to_current

        # Novel diversity measure
        diversity_scores = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        diversity_bonus = np.std(diversity_scores) if diversity_scores else 0

        # Hybrid heuristic with stochastic element
        base_score = (to_current * weight + normalized_global * (1.0 - weight))
        regret_weight = 0.6 + 0.4 * visited_ratio
        diversity_weight = 0.2 * (1.0 - visited_ratio)
        final_score = base_score + regret_weight * regret_term - diversity_weight * diversity_bonus

        # Add stochastic element based on unvisited count
        stochastic_factor = random.uniform(0.9, 1.1) if len(unvisited_nodes) > 3 else 1.0
        return final_score * stochastic_factor

    # Probabilistic selection with temperature cooling
    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    if min_score == max_score:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        normalized_scores = [(s - min_score) / (max_score - min_score) for s in scores]
        temperature = max(0.1, 1.0 - 0.5 * (len(unvisited_nodes) / len(distance_matrix)))
        probabilities = [np.exp(-score / temperature) for score in normalized_scores]
        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
