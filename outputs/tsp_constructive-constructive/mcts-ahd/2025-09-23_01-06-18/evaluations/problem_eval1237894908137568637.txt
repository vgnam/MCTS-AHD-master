def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (1 - (remaining_nodes / total_nodes)) ** 2
    exploration_weight = 0.3 * (1 - progress_factor) + 0.7 * np.log(1 + remaining_nodes / total_nodes)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (immediate_cost - min_cost) / (max_cost - min_cost + 1e-6)
        dynamic_regret = regret * (1 + np.log(1 + (max_cost - immediate_cost) / (max_cost - min_cost + 1e-6)))

        temperature = 1.0 - progress_factor
        weighted_score = (exploration_weight * immediate_cost + (1 - exploration_weight) * future_cost) + 0.3 * dynamic_regret

        if temperature < 0.1:
            return weighted_score
        else:
            return weighted_score * np.random.uniform(0.9, 1.1)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
