def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_pheromone(node):
        return 1.0 / (distance_matrix[current_node][node] + distance_matrix[node][destination_node] + 1e-10)

    def heuristic(node):
        pheromone = calculate_pheromone(node)
        local_distance = distance_matrix[current_node][node]
        penalty_factor = math.log(1 + len(unvisited_nodes)) / math.log(1 + len(distance_matrix))
        exploration_factor = (len(unvisited_nodes) ** 1.5) / (len(distance_matrix) ** 1.5)
        return (local_distance * penalty_factor) / (pheromone * exploration_factor)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
