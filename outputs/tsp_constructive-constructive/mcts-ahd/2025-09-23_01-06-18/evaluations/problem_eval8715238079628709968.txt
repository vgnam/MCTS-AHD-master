def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.6 + (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        exploration_bias = len(unvisited_nodes) ** 1.5 / len(distance_matrix)
        destination_pull = 1.0 / (1.0 + to_destination)
        regret_weight = sum(distance_matrix[current_node][other] for other in unvisited_nodes) / (len(unvisited_nodes) * to_current + 1e-6)
        diversity_factor = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        return (to_current * (1 - exploration_bias) + to_destination * destination_pull +
                regret_weight * 0.7 - diversity_factor * 0.3)

    candidates = sorted(unvisited_nodes, key=heuristic)[:max(2, len(unvisited_nodes)//3)]
    probabilities = [1/(i+1) for i in range(len(candidates))]
    probabilities = [p/sum(probabilities) for p in probabilities]
    next_node = np.random.choice(candidates, p=probabilities)
    return next_node
