def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    temperature = max(0.1, 1 - 2 * progress)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        centrality = sum(1 for n in range(total_nodes) if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in range(total_nodes) if m != n))
        exploration_bonus = (1 - progress) * (centrality / (total_nodes - 1))

        weighted_heuristic = (0.4 - 0.2 * progress) * immediate_cost + \
                            (0.2 + 0.4 * progress) * regret + \
                            (0.1 * (1 - progress)) * detour_cost + \
                            (0.2 * progress) * hub_score - \
                            0.15 * diversity_bonus + \
                            0.25 * exploration_bonus

        return weighted_heuristic / temperature

    if temperature > 0.5:
        probabilities = [math.exp(-heuristic(node)) for node in unvisited_nodes]
        total_prob = sum(probabilities)
        probabilities = [p/total_prob for p in probabilities]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=heuristic)

    return next_node
