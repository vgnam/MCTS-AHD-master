def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.4 + 0.6 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        exploration_weight = 0.5 * (1 - progress_factor)
        exploitation_weight = 0.5 * progress_factor
        weighted_score = (exploration_weight * (0.6 * local_cost + 0.4 * regret_term) +
                         exploitation_weight * (0.5 * global_potential + 0.3 * diversity_bonus))

        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    candidates = [node for i, node in enumerate(unvisited_nodes) if scores[i] == min_score]

    if len(candidates) > 1:
        probabilities = [1.0 / len(candidates) for _ in candidates]
        next_node = np.random.choice(candidates, p=probabilities)
    else:
        next_node = candidates[0]

    return next_node
