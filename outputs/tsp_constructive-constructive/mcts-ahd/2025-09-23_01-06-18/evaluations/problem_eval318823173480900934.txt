def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress_factor = 0.5 if remaining_nodes == 0 else min(1.0, 0.5 * (distance_matrix[current_node][destination_node] / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes)))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]
        centrality = sum(distance_matrix[node][j] for j in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0
        return to_current + (1 - progress_factor) * detour_cost + 0.2 * centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
