def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = 0.6 - 0.4 * (remaining_nodes / total_nodes)

    def initial_score(node):
        immediate_cost = distance_matrix[current_node][node]
        connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        return immediate_cost + exploration_weight * connectivity

    candidates = sorted(unvisited_nodes, key=initial_score)[:max(2, remaining_nodes // 3)]

    def refined_score(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        normalized_detour = detour_cost / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        return immediate_cost + 0.5 * normalized_detour

    next_node = min(candidates, key=refined_score)
    return next_node
