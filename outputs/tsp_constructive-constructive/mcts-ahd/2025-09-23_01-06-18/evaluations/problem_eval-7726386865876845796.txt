def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    avg_unvisited_dist = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
    progress_ratio = current_to_dest / avg_unvisited_dist if avg_unvisited_dist > 0 else 1.0

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        penalty = 0.1 if to_destination < 0.5 * current_to_dest else 0.0
        weight = 0.7 if progress_ratio < 1.0 else 0.3
        return (weight * to_current + (1 - weight) * to_destination) * (1 + penalty)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
