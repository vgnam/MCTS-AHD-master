def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        node_density = len(unvisited_nodes) / len(distance_matrix)
        exploration_rate = 0.5 * (1 - node_density) + 0.2

        if len(unvisited_nodes) > len(distance_matrix) / 2:
            regret = max(distance_matrix[current_node][n] - to_current for n in unvisited_nodes if n != node)
            return to_current + (1 - exploration_rate) * to_destination + 0.3 * regret
        else:
            return to_current + (1 - exploration_rate) * to_destination

    if len(unvisited_nodes) > len(distance_matrix) / 3:
        probabilities = [1 / heuristic(node) for node in unvisited_nodes]
        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=heuristic)

    return next_node
