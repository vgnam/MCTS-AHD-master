def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Calculate centrality of current node
    centrality = sum(distance_matrix[current_node][node] for node in range(total_nodes)) / total_nodes

    # Adaptive temperature scaling
    base_temp = 0.7 + 0.3 * (1 - progress_factor)
    centrality_temp = 0.5 + 0.5 * (centrality / max(sum(distance_matrix[node]) for node in range(total_nodes)))

    # Dynamic weight adjustment
    local_weight = 1.2 - 0.2 * progress_factor
    global_weight = 0.8 + 0.2 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)

        # Regret-based exploration
        regret = max(distance_matrix[current_node][n] - local_cost for n in unvisited_nodes) if unvisited_nodes else 0

        # Centrality measure
        node_centrality = sum(distance_matrix[node]) / total_nodes

        # Combined score with temperature scaling
        score = (local_cost * local_weight + global_potential * global_weight +
                 0.3 * regret) * (base_temp * centrality_temp) - 0.1 * node_centrality

        return score

    # Probabilistic selection
    if remaining_nodes > 1:
        scores = [heuristic(node) for node in unvisited_nodes]
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in scores]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=heuristic)

    return next_node
