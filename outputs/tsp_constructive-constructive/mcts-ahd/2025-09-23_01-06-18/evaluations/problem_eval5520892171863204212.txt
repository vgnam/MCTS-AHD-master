def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    temperature = max(0.1, 1 - 1.5 * progress)

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = max(0, to_destination - distance_matrix[current_node][destination_node])

        exploration_factor = temperature * (1 - progress ** 2)
        exploitation_factor = 1 - exploration_factor

        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        connectivity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * centrality)

        return (exploitation_factor * to_current +
                exploration_factor * (detour_risk ** 1.2 + (0.5 - 0.3 * progress) * centrality - 0.1 * connectivity))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
