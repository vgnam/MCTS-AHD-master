def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.3:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    weight = 0.5 + 0.5 * progress_factor
    temperature = 1.0 - 0.9 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * avg_distance) if unvisited_nodes else 0
        centrality_penalty = node_degree * 0.1 * progress_factor

        weighted_score = (local_cost * weight + global_potential * (1 - weight) + 0.3 * regret_term) * temperature - 0.2 * diversity_bonus - centrality_penalty
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
