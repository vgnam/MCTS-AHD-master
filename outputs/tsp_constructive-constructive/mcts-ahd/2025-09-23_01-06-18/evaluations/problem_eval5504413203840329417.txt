def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
        if avg_distance == 0:
            return destination_node

        threshold = 1.0 + (1.0 - progress_ratio) * (1.0 - (remaining_nodes / total_nodes))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        local_weight = 0.5 + 0.5 * (1.0 - progress_ratio)
        global_weight = 1.0 - local_weight

        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / remaining_nodes

        return to_current * local_weight + predictive_factor * global_weight

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
