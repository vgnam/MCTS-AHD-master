def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        if remaining_distance / avg_distance <= 1.2:
            return destination_node

    # Adaptive weight mechanism based on path progress
    progress = 1 - len(unvisited_nodes) / len(distance_matrix)
    weight = 0.5 + 0.5 * progress  # More global focus as progress increases

    # Calculate path diversity index
    visited_nodes = set(distance_matrix.keys()) - set(unvisited_nodes)
    diversity_index = sum(min(distance_matrix[node][other] for other in visited_nodes if other != node)
                         for node in unvisited_nodes) / len(unvisited_nodes)

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        # Reinforcement learning-inspired component
        historical_bonus = sum(distance_matrix[current_node][other] - to_current
                              for other in unvisited_nodes if distance_matrix[current_node][other] > to_current) / (len(unvisited_nodes) + 1e-6)

        # Probabilistic selection component
        prob_factor = 1 / (1 + 0.1 * to_current * (1 - weight))

        # Diversity reward
        diversity_reward = 0.3 * diversity_index * (1 - progress)

        return (weight * to_current + (1 - weight) * to_destination +
                0.4 * historical_bonus - 0.2 * diversity_reward) * prob_factor

    # Probabilistic selection with temperature cooling
    temp = max(0.1, 1 - 0.5 * progress)
    candidates = sorted(unvisited_nodes, key=lambda x: heuristic(x))
    selection_weights = [math.exp(-heuristic(x)/temp) for x in candidates]
    next_node = random.choices(candidates, weights=selection_weights, k=1)[0]

    return next_node
