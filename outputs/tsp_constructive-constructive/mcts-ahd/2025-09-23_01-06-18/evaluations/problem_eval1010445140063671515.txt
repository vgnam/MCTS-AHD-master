importance measure that combines local distance, global connectivity, and a progress-adaptive penalty for less central nodes, while using a novel adaptive weight mechanism that balances exploration and exploitation based on both progress and node centrality.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.3 + 0.7 * (1 - progress_factor)

    max_distance = max(max(row) for row in distance_matrix)
    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0

    node_degrees = [sum(1 for d in row if d < avg_unvisited_distance) for row in distance_matrix]
    max_degree = max(node_degrees) if node_degrees else 1

    def heuristic(node):
        local_cost = distance_matrix[current_node][node] / max_distance
        global_connectivity = node_degrees[node] / max_degree

        path_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes / max_distance
        dynamic_importance = (0.6 * global_connectivity + 0.4 * (1 - local_cost)) * (1 - 0.3 * progress_factor)

        exploration_penalty = (1 - global_connectivity) * exploration_weight
        exploitation_bonus = global_connectivity * (1 - exploration_weight)

        combined_score = (1 - exploration_weight) * (local_cost + 0.5 * path_centrality) + exploration_weight * (1 - dynamic_importance) - exploration_penalty + exploitation_bonus
        return combined_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
