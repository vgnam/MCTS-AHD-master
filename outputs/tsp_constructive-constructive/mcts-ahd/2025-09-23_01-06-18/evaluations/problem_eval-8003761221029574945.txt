def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = 0.7 * (remaining_nodes / total_nodes) ** 2 + 0.3
    density_weight = 0.4 * (1 - (remaining_nodes / total_nodes))

    def calculate_density(node):
        if not unvisited_nodes:
            return 0
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return 1 / (avg_distance + 1e-6)

    def calculate_centrality(node):
        if not unvisited_nodes:
            return 0
        return sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

    def calculate_potential(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        centrality = calculate_centrality(node)
        density = calculate_density(node)
        return (exploration_weight * immediate_cost +
                (1 - exploration_weight) * detour_potential -
                0.3 * centrality +
                density_weight * density)

    next_node = min(unvisited_nodes, key=calculate_potential)
    return next_node
