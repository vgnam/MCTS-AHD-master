def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.7 - (0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    learning_rate = 0.3 + 0.5 * (1 - len(unvisited_nodes) / len(distance_matrix))
    exploration_weight = 0.5 * (len(unvisited_nodes) / len(distance_matrix)) + 0.1

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        proximity_score = to_current * (1 - exploration_weight)
        global_score = to_destination * exploration_weight

        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        connectivity_bonus = 0.2 * connectivity / len(unvisited_nodes)

        nearby_nodes = sorted([distance_matrix[node][other] for other in unvisited_nodes if other != node])[:3]
        promise_metric = (sum(nearby_nodes) / len(nearby_nodes)) if nearby_nodes else 0

        regret_penalty = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:2]) / 2

        diversity_score = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)

        return (proximity_score + global_score * (1 + connectivity_bonus) + 0.5 * promise_metric - 0.3 * regret_penalty) * (1 - 0.2 * diversity_score)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
