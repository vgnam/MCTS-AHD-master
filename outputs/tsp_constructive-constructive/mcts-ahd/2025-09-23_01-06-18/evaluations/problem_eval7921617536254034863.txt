importance" metric (based on betweenness centrality approximation) with adaptive weights that emphasize exploration early and exploitation later, while using a nonlinear progress-based weight to balance these factors more aggressively.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]

        exploration_factor = (1 - progress) ** 3
        exploitation_factor = 1 - exploration_factor

        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        importance = 0
        for neighbor in range(len(distance_matrix[node])):
            if neighbor != node:
                importance += sum(distance_matrix[neighbor]) / len(distance_matrix[neighbor])

        return (exploitation_factor * to_current +
                exploration_factor * (0.4 * detour_risk + 0.6 * centrality + 0.2 * importance))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
