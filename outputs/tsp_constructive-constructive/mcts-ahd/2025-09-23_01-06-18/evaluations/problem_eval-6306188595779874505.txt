def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        progress_factor = 1 - remaining_ratio

        # Dynamic priority weight
        priority_weight = 1.2 * (1 - progress_factor) + 0.3 * progress_factor

        # Destination pull metric
        destination_pull = (to_destination / (1 + progress_factor)) + (to_current * 0.5)

        # Predictive diversity bonus
        unvisited_connections = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        visited_connections = sum(distance_matrix[node][other] for other in distance_matrix if other not in unvisited_nodes and other != node)
        diversity_score = (unvisited_connections * 0.7) + (visited_connections * 0.3)

        # Combine metrics
        return (to_current * priority_weight) + (destination_pull * (1 - priority_weight)) + (diversity_score * 0.2)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
