def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    dynamic_weight = 0.5 + 0.5 * (1 - remaining_distance / sum(distance_matrix[current_node]))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        weighted_heuristic = dynamic_weight * to_current + (1 - dynamic_weight) * (to_destination ** 0.5)
        return weighted_heuristic

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
