def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = max(0, to_destination - distance_matrix[current_node][destination_node])
        exploration_factor = (1 - progress) ** 2
        exploitation_factor = 1 - exploration_factor
        centrality_penalty = 1 / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6))
        destination_priority = 1 / (1 + to_destination ** 2)
        return (exploitation_factor * to_current +
                exploration_factor * (0.6 * detour_risk + 0.4 * destination_priority) +
                0.3 * centrality_penalty)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
