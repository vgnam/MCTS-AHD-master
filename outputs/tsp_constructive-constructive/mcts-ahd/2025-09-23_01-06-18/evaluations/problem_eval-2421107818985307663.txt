def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = 1.0 - 0.3 * progress_factor

    remaining_distance = distance_matrix[current_node][destination_node]

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - remaining_distance
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        weighted_score = (0.4 * local_cost + 0.4 * regret_term) * temperature - 0.3 * detour_cost - 0.3 * diversity_penalty
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
