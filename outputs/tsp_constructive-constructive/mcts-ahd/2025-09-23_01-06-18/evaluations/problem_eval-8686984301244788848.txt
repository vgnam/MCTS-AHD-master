importance through a hybrid heuristic combining immediate cost, regret, centrality, and global potential with novel weighting and selection mechanisms.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        regret_weights = [1 / (distance_matrix[current_node][n] + 1e-6) for n in unvisited_nodes]
        weighted_regret = sum(regret_weights) / len(regret_weights) if regret_weights else 0
        centrality_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        global_score = (distance_matrix[node][destination_node] + diversity_score) / 2
        selection_prob = (0.4 - 0.2 * progress) * immediate_cost + (0.4 + 0.3 * progress) * weighted_regret + (0.1 * progress) * centrality_score + (0.1 * (1 - progress)) * global_score
        return selection_prob

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in scores]
    prob_dist = [score / sum(normalized_scores) for score in normalized_scores]
    next_node = np.random.choice(unvisited_nodes, p=prob_dist) if len(unvisited_nodes) > 1 else unvisited_nodes[0]
    return next_node
