def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        max_distance = max(max(row) for row in distance_matrix)

        normalized_to_current = to_current / max_distance
        normalized_to_destination = to_destination / max_distance

        decay_factor = 0.1 * (len(unvisited_nodes) / len(distance_matrix))

        density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < max_distance * 0.3)
        density_term = density / len(unvisited_nodes) if unvisited_nodes else 0

        return (normalized_to_current * normalized_to_destination) * (1 - decay_factor) * (1 + density_term)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
