def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        if direct_distance / avg_distance <= 1.3:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max_distance if max_distance > 0 else 0)
    exploration_factor = 0.1 * (1 - remaining_nodes / (remaining_nodes + 1))
    detour_weight = 0.3 + 0.4 * proximity_factor + exploration_factor

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_penalty = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        stochastic_component = random.uniform(0.8, 1.2) if remaining_nodes <= 3 else 1.0
        weighted_cost = immediate_cost + detour_weight * detour_penalty * stochastic_component
        return weighted_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
