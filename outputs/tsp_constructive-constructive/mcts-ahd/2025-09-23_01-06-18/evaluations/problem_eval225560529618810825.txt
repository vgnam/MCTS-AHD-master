def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        current_to_dest = distance_matrix[current_node][destination_node]
        avg_dist = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        node_density = len(unvisited_nodes) / sum(distance_matrix[current_node][n] for n in unvisited_nodes)
        progress_factor = 0.5 if current_to_dest == 0 else min(1.0, 0.5 * (current_to_dest / avg_dist))
        density_bias = 1.0 / (1.0 + math.exp(-5 * (node_density - 0.5)))
        prob = 0.5 + 0.5 * (1 - 1 / (1 + math.exp(-progress_factor * density_bias)))
        if random.random() < prob:
            return destination_node
        else:
            centrality = {node: sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) for node in unvisited_nodes}
            return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] - 0.3 * centrality[node])
    else:
        centrality = {node: sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) for node in unvisited_nodes}
        return next_node
