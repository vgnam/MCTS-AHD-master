def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)

        # Calculate connection strength: how well the node connects to others
        connection_strength = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)

        # Dynamic weight scheme: prioritize immediate proximity early, connection strength later
        weight_immediate = 1 + 0.5 * remaining_ratio
        weight_connection = 1 + 0.3 * (1 - remaining_ratio)

        return (to_current * weight_immediate +
                to_destination * 0.3 +
                connection_strength * weight_connection)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
