def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    lookahead_depth = max(2, min(5, num_unvisited // 2))

    def evaluate_path(node, depth=lookahead_depth, visited=None):
        if visited is None:
            visited = set()
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node and n not in visited]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:4]
        future_costs = []
        for candidate in next_candidates:
            new_visited = visited.copy()
            new_visited.add(candidate)
            cost = distance_matrix[node][candidate] + evaluate_path(candidate, depth-1, new_visited)
            if candidate in visited:
                cost *= 1.2  # penalty for revisiting
            future_costs.append(cost)
        return min(future_costs)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        return 0.6 * immediate_cost + 0.4 * future_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
