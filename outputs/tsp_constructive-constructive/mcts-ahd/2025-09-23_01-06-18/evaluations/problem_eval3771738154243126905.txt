def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_pressure = 0.1 + 0.8 * (1 - progress_factor) ** 2

    def heuristic(node):
        direct_cost = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        diversity_factor = (distance_matrix[current_node][node] - distance_matrix[current_node][destination_node]) / (1 + distance_matrix[current_node][destination_node])

        weighted_cost = direct_cost + exploration_pressure * detour_potential - 0.5 * diversity_factor
        return weighted_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
