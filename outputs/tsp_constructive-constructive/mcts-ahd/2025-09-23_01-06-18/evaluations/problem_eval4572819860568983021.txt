def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    proximity_to_dest = distance_matrix[current_node][destination_node] / max([distance_matrix[current_node][n] for n in unvisited_nodes] + [1])
    dynamic_weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        if destination_node in unvisited_nodes and remaining_ratio < 0.3:
            return to_destination
        if to_current < 0.1 * max([distance_matrix[current_node][n] for n in unvisited_nodes] + [1]):
            penalty = 10 * (0.1 * max([distance_matrix[current_node][n] for n in unvisited_nodes] + [1]) - to_current)
        else:
            penalty = 0
        return (to_current * (1 - dynamic_weight) + to_destination * dynamic_weight) + penalty
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
