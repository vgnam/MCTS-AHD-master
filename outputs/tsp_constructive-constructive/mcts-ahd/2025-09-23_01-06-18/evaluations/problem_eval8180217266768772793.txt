def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.3 + 0.7 * progress_factor

    remaining_distance = distance_matrix[current_node][destination_node]
    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes else 0

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = max(0, to_destination - remaining_distance)
        regret_threshold = local_cost * (1 + 0.5 * (1 - progress_factor))
        regret_values = [distance_matrix[current_node][n] - local_cost for n in unvisited_nodes if distance_matrix[current_node][n] > regret_threshold]
        regret_term = sum(regret_values) / len(regret_values) if regret_values else 0
        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        normalized_cost = local_cost / avg_distance if avg_distance else 1.0
        weighted_score = (0.4 * normalized_cost + 0.3 * regret_term + 0.3 * (1 - diversity_penalty)) * exploration_weight
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
