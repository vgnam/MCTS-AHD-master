def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    dynamic_weight_proximity = 0.7 * remaining_ratio
    dynamic_weight_detour = 0.3 * (1 - remaining_ratio)
    dynamic_weight_centrality = 0.2 * (1 - remaining_ratio)

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - remaining_distance

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        weighted_proximity = dynamic_weight_proximity * to_current
        weighted_detour = dynamic_weight_detour * detour_cost
        weighted_centrality = dynamic_weight_centrality * node_centrality

        return weighted_proximity + weighted_detour + weighted_centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
