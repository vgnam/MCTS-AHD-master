def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def evaluate_path(node, depth=3):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        candidate_count = min(max(2, len(remaining_nodes) // 2), 5)
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:candidate_count]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def centrality(node):
        if not unvisited_nodes:
            return 0
        return sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        node_centrality = centrality(node)
        weight_future = 0.3 * (0.8 if len(unvisited_nodes) > 5 else 0.5)
        weight_centrality = 0.2 * (1.0 if len(unvisited_nodes) < 5 else 0.5)
        return 0.5 * immediate_cost + weight_future * future_cost + weight_centrality * node_centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
