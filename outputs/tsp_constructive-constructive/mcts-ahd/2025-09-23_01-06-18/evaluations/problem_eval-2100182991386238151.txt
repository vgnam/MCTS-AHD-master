importance, with priorities shifting based on progress and incorporating a learning factor that adapts weights over time.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0

        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * immediate_cost) if remaining_nodes > 1 else 0
        learning_factor = 0.5 * (1 - progress) + 0.5 * (progress ** 2)

        dynamic_weight = (
            (0.4 - 0.2 * progress) * immediate_cost +
            (0.3 - 0.2 * progress) * regret +
            (0.2 + 0.3 * progress) * detour_cost +
            (0.3 + 0.4 * progress) * hub_score +
            (0.1 + 0.2 * progress) * centrality
        ) * learning_factor

        return dynamic_weight

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
