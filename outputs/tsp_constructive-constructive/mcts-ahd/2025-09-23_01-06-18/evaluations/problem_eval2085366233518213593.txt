def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.7 - (0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        visited_ratio = len(unvisited_nodes) / len(distance_matrix)
        path_progress = 1.0 - visited_ratio
        weight = 1.2 - 0.8 * path_progress

        # Path momentum calculation
        if len(unvisited_nodes) < len(distance_matrix) - 1:
            prev_node = current_node
            momentum = sum(distance_matrix[prev_node][node] - distance_matrix[node][prev_node] for node in unvisited_nodes) / len(unvisited_nodes)
        else:
            momentum = 0

        # Probabilistic exploration factor
        uncertainty = (max(distance_matrix[current_node][n] for n in unvisited_nodes) -
                      min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (len(unvisited_nodes) + 1e-6)

        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0

        # Novel selection metric
        selection_score = (to_current * weight +
                          global_potential * (1.0 - weight) +
                          0.5 * regret_term +
                          0.3 * momentum -
                          0.1 * uncertainty)

        return selection_score

    # Probabilistic selection with temperature
    scores = [1.0 / (1.0 + heuristic(node)) for node in unvisited_nodes]
    total = sum(scores)
    probabilities = [score / total for score in scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
