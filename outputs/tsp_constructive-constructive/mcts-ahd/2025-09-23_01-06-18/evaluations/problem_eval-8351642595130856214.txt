def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.5 + 0.5 * progress_factor
    temperature = 0.9 - 0.6 * progress_factor
    memory_factor = 0.2 * (1 - progress_factor)

    recent_nodes = set()
    if len(unvisited_nodes) < total_nodes - 2:
        recent_nodes.add(current_node)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        memory_penalty = 1.0 if node in recent_nodes else 1.0

        weighted_score = (selection_pressure * local_cost + (1 - selection_pressure) * global_potential + 0.25 * regret_term) * temperature
        weighted_score -= 0.35 * diversity_bonus * (1 + memory_factor)
        weighted_score *= memory_penalty

        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
