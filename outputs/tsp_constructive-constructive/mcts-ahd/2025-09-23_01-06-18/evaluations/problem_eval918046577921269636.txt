def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        node_density = len(unvisited_nodes) / len(distance_matrix)
        if remaining_distance <= node_density * sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes):
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (1 - (remaining_nodes / total_nodes)) ** 2
    weight = 0.4 + 0.6 * progress_factor
    node_density = len(unvisited_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        weighted_score = to_current * weight + to_destination * (1 - weight) + 0.5 * regret_term * node_density
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
