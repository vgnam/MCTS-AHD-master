def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    min_distance_to_unvisited = min(distance_matrix[current_node][node] for node in unvisited_nodes) if remaining_nodes > 0 else 0

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        dynamic_weight = 0.7 * (1 - (remaining_nodes / (remaining_nodes + 2)))  # Higher weight when fewer nodes remain
        return to_current + dynamic_weight * to_destination + 0.4 * min_distance_to_unvisited  # Min distance factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
