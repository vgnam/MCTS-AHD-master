def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (immediate_cost - min_cost) / (min_cost + 1e-6) if min_cost > 0 else 0

        # Dynamic regret scaling based on node density
        node_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) / max(1, remaining_nodes - 1)
        regret_scale = 0.3 + 0.7 * (1 - node_density) * (0.5 + 0.5 * progress)

        # Enhanced hub connectivity metric
        local_hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        global_hub_score = sum(1 for n in unvisited_nodes if sum(distance_matrix[node][m] < 1.5 * min(distance_matrix[node][k] for k in unvisited_nodes if k != m) for m in unvisited_nodes) > remaining_nodes // 2) if remaining_nodes > 2 else 0

        return (0.5 - 0.2 * progress) * immediate_cost + regret_scale * regret + (0.15 + 0.25 * progress) * detour_cost + (0.2 + 0.3 * progress) * (local_hub_score + 0.5 * global_hub_score)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
