def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = (total_unvisited - len(unvisited_nodes) + 1) / total_unvisited
    progress_factor = 0.3 + 0.7 * progress_ratio

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        avg_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        return (to_current + to_destination + 0.5 * avg_to_unvisited) * (1 - progress_factor)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
