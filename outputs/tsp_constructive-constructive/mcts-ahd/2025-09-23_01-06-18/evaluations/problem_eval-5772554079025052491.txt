def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        progress_factor = 1 - remaining_ratio

        # Dynamic exploration-exploitation weight
        exploration_weight = 1.5 - 0.7 * progress_factor
        exploitation_weight = 1.0 - exploration_weight

        # Global potential with path history penalty
        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)
        path_penalty = sum(1 for other in unvisited_nodes if distance_matrix[current_node][other] < distance_matrix[current_node][node])

        # Node similarity metric (diversity encouragement)
        similarity = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_bonus = similarity * 0.4

        # Regret term with adaptive weight
        regret_weight = 0.2 + 0.5 * progress_factor
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0

        return (to_current * exploration_weight +
                global_potential * exploitation_weight +
                regret_term * regret_weight -
                diversity_bonus -
                path_penalty * 0.2)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
