def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        if remaining_distance / avg_distance <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        base_weight = 2.0 - remaining_ratio
        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.3 * to_current)
        centrality = sum(1 for other in distance_matrix if distance_matrix[node][other] < 1.5 * min(distance_matrix[node]))
        regret_penalty = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:2]) / 2
        path_entropy = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        dynamic_weight = base_weight * (1 + 0.1 * centrality)
        regret_factor = 1 + (0.3 * regret_penalty / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6))
        return (to_current * dynamic_weight + to_destination * (1.0 - dynamic_weight) +
                0.4 * regret_factor * regret_penalty - 0.3 * path_entropy)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
