def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    temperature = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
    memory_factor = 0.5 + (0.5 * (len(distance_matrix) - len(unvisited_nodes)) / len(distance_matrix))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        global_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        return (to_current * memory_factor + global_factor * (1.0 - memory_factor)) / (1.0 + temperature)

    candidates = []
    weights = []
    for node in unvisited_nodes:
        h = heuristic(node)
        candidates.append(node)
        weights.append(1.0 / (1.0 + h))

    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]

    return next_node
