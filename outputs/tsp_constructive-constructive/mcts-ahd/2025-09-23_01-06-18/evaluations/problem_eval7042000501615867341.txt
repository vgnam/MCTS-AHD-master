def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def centrality_score(node):
        return sum(distance_matrix[node]) / len(distance_matrix[node])

    def inverse_distance(node):
        return 1.0 / (distance_matrix[current_node][node] + 1e-6)

    temperature = max(0.1, 1.0 * (len(unvisited_nodes) / len(distance_matrix)))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        node_centrality = centrality_score(node)
        inv_dist = inverse_distance(node)
        exploration_factor = temperature * inv_dist
        return (1 - exploration_factor) * to_current + exploration_factor * (to_destination + 0.5 * node_centrality)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
