def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    current_to_dest = distance_matrix[current_node][destination_node]
    max_current_dist = max(distance_matrix[current_node][i] for i in unvisited_nodes)
    proximity_factor = 1 - (current_to_dest / max_current_dist) if max_current_dist > 0 else 0
    detour_weight = 0.2 + 0.6 * (1 - (remaining_nodes / (remaining_nodes + 2))) * proximity_factor

    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - current_to_dest
        balance_factor = (to_current - avg_unvisited_distance) / (avg_unvisited_distance + 1e-6)
        return to_current + detour_weight * detour_cost * (1 - balance_factor)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
