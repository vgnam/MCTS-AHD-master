def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    dynamic_weight = 0.6 + 0.4 * (1 - progress_factor)

    def evaluate_path(node, depth=2):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        return dynamic_weight * (0.6 * immediate_cost + 0.4 * future_cost) + (1 - dynamic_weight) * detour_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
