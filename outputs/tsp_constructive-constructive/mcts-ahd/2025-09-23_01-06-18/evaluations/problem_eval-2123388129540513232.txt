def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.0:
            return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    local_weight = 0.6 - 0.2 * progress_factor
    global_weight = 0.4 + 0.2 * progress_factor
    hub_weight = 0.2 * (1 - progress_factor)
    regret_weight = 0.2 * (1 - progress_factor)
    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)
        hub_avoidance = 1 / (centrality + 1e-6)
        weighted_score = (local_weight * local_cost + global_weight * global_potential +
                         hub_weight * hub_avoidance + regret_weight * regret)
        return weighted_score
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
