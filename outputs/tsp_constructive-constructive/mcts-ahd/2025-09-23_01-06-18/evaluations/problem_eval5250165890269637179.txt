def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def evaluate_path(node, depth=2):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def sigmoid(x, k=0.1):
        return 1 / (1 + math.exp(-k * x))

    remaining_nodes_count = len(unvisited_nodes)
    if remaining_nodes_count == 0:
        return destination_node

    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes_count) / total_nodes
    weight_factor = sigmoid(progress * 10 - 5)  # Adjusts between 0 and 1

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        return (1 - weight_factor) * immediate_cost + weight_factor * future_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
