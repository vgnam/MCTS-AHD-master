def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        # Dynamic temperature based on remaining nodes
        temperature = max(0.1, 1.0 - (len(unvisited_nodes) / len(distance_matrix)))

        # Centrality measure: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Weighted combination with temperature
        local_weight = 1 + 0.5 * temperature
        global_weight = 1 / (1 + 0.5 * temperature)
        centrality_weight = 0.3 * temperature

        return (to_current * local_weight + to_destination * global_weight) + centrality * centrality_weight

    # Probabilistic selection with softmax
    scores = [heuristic(node) for node in unvisited_nodes]
    exp_scores = [math.exp(-score / temperature) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
