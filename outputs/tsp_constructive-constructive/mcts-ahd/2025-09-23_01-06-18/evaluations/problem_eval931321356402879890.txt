def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.3 + 0.7 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        regret_aware_diversity = regret_term * diversity_bonus / (remaining_nodes + 1e-6)
        weighted_score = selection_pressure * (0.4 * local_cost + 0.2 * regret_term) + (1 - selection_pressure) * (0.3 * global_potential + 0.1 * regret_aware_diversity)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
