def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (1 - (remaining_nodes / total_nodes)) ** 2
    exploration_weight = 1 / (1 + np.exp(-5 * (progress_factor - 0.5)))

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]

        avg_cost = np.mean([distance_matrix[current_node][n] for n in unvisited_nodes])
        regret = (immediate_cost - avg_cost) / (avg_cost + 1e-6)

        temperature = 1 - progress_factor
        weighted_score = (exploration_weight * immediate_cost + (1 - exploration_weight) * future_cost) + temperature * regret

        return weighted_score

    probabilities = np.array([np.exp(-heuristic(node)) for node in unvisited_nodes])
    probabilities = probabilities / np.sum(probabilities)
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
