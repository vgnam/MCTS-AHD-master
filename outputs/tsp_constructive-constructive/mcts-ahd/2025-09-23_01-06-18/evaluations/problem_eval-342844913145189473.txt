def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.7 * (1 - progress_factor) ** 1.2
    exploitation_weight = 0.3 + 0.7 * progress_factor ** 1.5

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)
        adjusted_regret = regret * (1 + 0.2 * (centrality / (sum(centrality for n in unvisited_nodes) + 1e-6)))
        progress_penalty = (1 - progress_factor) ** 2
        hub_clustering = 1 / (1 + centrality * progress_penalty)
        weighted_score = (exploration_weight * (0.5 * adjusted_regret + 0.3 * hub_clustering + 0.2 * local_cost) +
                          exploitation_weight * (0.4 * global_potential + 0.3 * (1 - progress_factor) + 0.3 * (1 / (centrality + 1e-6))))
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
