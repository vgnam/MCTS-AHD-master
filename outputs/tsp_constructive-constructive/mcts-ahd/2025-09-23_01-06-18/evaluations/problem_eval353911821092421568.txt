import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]

        # Dynamic weighting based on progress toward destination
        progress = 1 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
        weight_current = 1 / (1 + math.exp(-10 * (progress - 0.5)))
        weight_detour = 1 - weight_current

        # Penalty for revisiting nodes (simplified)
        penalty = 0.1 if node in unvisited_nodes else 0

        weighted_detour = weight_current * to_current + weight_detour * detour_cost + penalty
        return weighted_detour

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
