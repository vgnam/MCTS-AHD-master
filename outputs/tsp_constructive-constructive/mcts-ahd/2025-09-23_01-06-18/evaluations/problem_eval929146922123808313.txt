def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (1 + remaining_nodes) / (1 + total_nodes)
    log_progress = 1 - (1 / (1 + math.log(1 + progress)))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]
        exploration_weight = 0.7 * log_progress
        exploitation_weight = 1 - exploration_weight
        return exploitation_weight * to_current + exploration_weight * detour_risk

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
