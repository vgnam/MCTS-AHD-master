def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        # Dynamic regret adjustment
        regret_factor = len(unvisited_nodes) / len(distance_matrix)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0
        adjusted_regret = regret_term * regret_factor

        # Variance-based centrality
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes]
        mean_distance = sum(distances_to_unvisited) / len(unvisited_nodes) if unvisited_nodes else 0
        variance = sum((d - mean_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality = 1.0 / (1.0 + variance) if variance != 0 else 1.0

        # Probabilistic escape mechanism
        if adjusted_regret > to_current * 0.8:
            if np.random.rand() < 0.3:
                return float('inf')

        return (to_current + adjusted_regret + 0.3 * to_destination) * (1.0 + 0.5 * centrality)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
