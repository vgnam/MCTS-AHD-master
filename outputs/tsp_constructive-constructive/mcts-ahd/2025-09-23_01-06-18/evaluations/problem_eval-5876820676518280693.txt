importance metric based on degree centrality and average connectivity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = remaining_nodes / total_nodes
    temperature = 1.0 - 0.8 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        min_local = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_local = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_local) / (max_local - min_local + 1e-6)

        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)

        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < max(distance_matrix[node]) * 0.7)
        avg_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        node_importance = 0.7 * node_degree + 0.3 * avg_connectivity

        probability = (0.4 * regret + 0.3 * local_cost + 0.3 * global_potential) / (1 + 0.2 * node_importance)
        return probability / temperature

    probabilities = [heuristic(node) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
