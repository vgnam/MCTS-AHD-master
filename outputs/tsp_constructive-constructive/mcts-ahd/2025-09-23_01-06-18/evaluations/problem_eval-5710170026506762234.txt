def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes) ** 2

    def calculate_density(node):
        if not unvisited_nodes:
            return 0
        nearby_nodes = [n for n in unvisited_nodes if distance_matrix[node][n] < 2 * distance_matrix[current_node][node]]
        return len(nearby_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    def calculate_potential(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        density = calculate_density(node)
        return (progress_factor * immediate_cost +
                (1 - progress_factor) * detour_potential +
                0.5 * density)

    next_node = min(unvisited_nodes, key=calculate_potential)
    return next_node
