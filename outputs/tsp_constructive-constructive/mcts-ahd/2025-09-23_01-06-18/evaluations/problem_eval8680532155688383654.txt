def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.0:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        total_nodes = len(distance_matrix)

        # Dynamic regret threshold
        regret_threshold = (total_nodes - remaining_nodes) / total_nodes
        regret_term = max((distance_matrix[current_node][other] - to_current) * regret_threshold for other in unvisited_nodes) if unvisited_nodes else 0

        # Proximity to geometric center
        center_x = sum(node for node in unvisited_nodes) / remaining_nodes if remaining_nodes else 0
        proximity_bonus = 1.0 / (1.0 + abs(node - center_x)) if remaining_nodes else 0

        # Non-linear weight adjustment
        weight = (remaining_nodes / total_nodes) ** 0.5

        return (to_current * weight + to_destination * (1.0 - weight) + 0.3 * regret_term) * (1.0 + 0.3 * proximity_bonus)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
