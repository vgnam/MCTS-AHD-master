def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.7 - (0.25 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        exploration_weight = 2.0 - 1.5 * remaining_ratio
        exploitation_weight = 1.0 - 0.5 * remaining_ratio

        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:3]) / 3
        diversity_variance = np.var([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        novelty_bonus = np.log(1 + diversity_variance)

        local_factor = to_current * exploration_weight * (1 + 0.15 * connectivity / len(unvisited_nodes))
        global_factor = (to_destination + novelty_bonus) * exploitation_weight
        selection_probability = np.exp(-0.5 * regret_term) / (local_factor + global_factor + 1e-6)

        return selection_probability

    next_node = max(unvisited_nodes, key=heuristic)
    return next_node
