def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Calculate node centrality as average distance to all other nodes
    centrality = {node: sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes for node in unvisited_nodes}

    # Adaptive selection pressure and temperature based on progress and centrality
    avg_centrality = sum(centrality.values()) / remaining_nodes if remaining_nodes > 0 else 0
    selection_pressure = 0.3 + 0.7 * progress_factor + 0.2 * (1 - avg_centrality / (sum(sum(row) for row in distance_matrix) / (total_nodes**2)))
    temperature = 0.8 - 0.6 * progress_factor + 0.2 * (avg_centrality / (sum(sum(row) for row in distance_matrix) / (total_nodes**2)))

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        centrality_potential = centrality[node] / (sum(sum(row) for row in distance_matrix) / (total_nodes**2))
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        weighted_score = (selection_pressure * local_cost + (1 - selection_pressure) * global_potential +
                          0.2 * centrality_potential + 0.1 * regret_term) * temperature - 0.3 * diversity_bonus
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
