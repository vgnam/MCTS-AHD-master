def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.2 + 0.3 * (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        progress_ratio = 1 - (len(unvisited_nodes) / len(distance_matrix))
        local_weight = 0.8 - 0.4 * progress_ratio
        global_weight = 1.0 - local_weight

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        regret_weight = 0.2 + 0.6 * progress_ratio
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0

        historical_bias = 0.0
        if hasattr(heuristic, 'history'):
            historical_bias = sum(heuristic.history.get((node, neighbor), 0) for neighbor in unvisited_nodes) / len(unvisited_nodes)

        transition_prob = 1.0 / (1.0 + to_current + 0.5 * to_destination + 0.3 * centrality)

        score = (local_weight * to_current + global_weight * (to_destination + centrality) +
                regret_weight * regret_term - 0.2 * historical_bias) * transition_prob

        return score

    if hasattr(heuristic, 'history'):
        next_node = min(unvisited_nodes, key=lambda x: heuristic(x))
    else:
        heuristic.history = {}
        next_node = min(unvisited_nodes, key=lambda x: heuristic(x))

    if hasattr(heuristic, 'history'):
        for neighbor in unvisited_nodes:
            if neighbor != next_node:
                heuristic.history[(next_node, neighbor)] = heuristic.history.get((next_node, neighbor), 0) + 1

    return next_node
