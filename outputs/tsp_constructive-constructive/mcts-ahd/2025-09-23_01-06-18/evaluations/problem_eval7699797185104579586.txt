def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix) - 1)
    proximity_weight = 0.7 - 0.5 * progress
    detour_weight = 0.3 + 0.5 * progress
    centrality_weight = 0.2 * progress

    def calculate_score(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        detour_ratio = detour_cost / immediate_cost if immediate_cost > 0 else float('inf')

        node_centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)
        revisit_penalty = 1.0 if node in [current_node] else 1.0

        return (proximity_weight * immediate_cost +
                detour_weight * detour_ratio +
                centrality_weight * node_centrality +
                1000 * revisit_penalty if node == current_node else 0)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
