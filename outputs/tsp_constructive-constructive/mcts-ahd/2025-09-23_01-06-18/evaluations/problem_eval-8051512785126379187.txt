def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / num_nodes
    temperature = 0.5 * (1.0 - remaining_ratio)

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + 0.5 * (1.0 - remaining_ratio)
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][other] for other in range(num_nodes)) / num_nodes
        weight = 2.0 - 1.5 * remaining_ratio + 0.5 * (centrality / sum(sum(row) for row in distance_matrix) * num_nodes**2)

        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        regret_term = max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)

        global_potential = (to_destination + predictive_factor) / 2
        weighted_score = (to_current * weight + global_potential * (1.0 - weight) + 0.5 * regret_term) - 0.2 * diversity_bonus

        return weighted_score * (1.0 - temperature) + temperature * np.random.normal(0, 1)

    if np.random.random() < 0.3 * remaining_ratio:
        next_node = min(unvisited_nodes, key=heuristic)
    else:
        scores = [heuristic(node) for node in unvisited_nodes]
        exp_scores = [np.exp(score / temperature) for score in scores]
        probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]
        next_node = np.random.choice(unvisited_nodes, p=probs)

    return next_node
