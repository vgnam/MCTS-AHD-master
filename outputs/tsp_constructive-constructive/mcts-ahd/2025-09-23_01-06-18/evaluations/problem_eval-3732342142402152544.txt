def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_momentum = 0.5 * (1 + (remaining_nodes / total_nodes) ** 0.5)
    node_density = total_nodes / (sum(sum(row) for row in distance_matrix) + 1e-6)

    def calculate_centrality(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

    def calculate_exploration_score(node):
        centrality = calculate_centrality(node)
        normalized_centrality = centrality / (sum(calculate_centrality(n) for n in unvisited_nodes) + 1e-6)
        return (1 - normalized_centrality) * exploration_momentum

    def calculate_regret_score(node):
        local_cost = distance_matrix[current_node][node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)
        return regret * (1 + 0.2 * (1 - progress_factor))

    def calculate_global_score(node):
        return (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)

    def calculate_weighted_score(node):
        exploration_score = calculate_exploration_score(node)
        regret_score = calculate_regret_score(node)
        global_score = calculate_global_score(node)
        local_score = distance_matrix[current_node][node]

        dynamic_weight = 0.3 + 0.7 * (1 - progress_factor)
        return (dynamic_weight * (0.6 * regret_score + 0.4 * exploration_score) +
                (1 - dynamic_weight) * (0.5 * (global_score / (local_score + 1e-6)) + 0.5 * (1 - progress_factor)))

    candidate_scores = {node: calculate_weighted_score(node) for node in unvisited_nodes}
    next_node = min(candidate_scores, key=candidate_scores.get)
    return next_node
