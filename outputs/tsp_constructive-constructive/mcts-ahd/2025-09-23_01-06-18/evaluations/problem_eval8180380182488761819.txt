def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = max(0.1, remaining_nodes / total_nodes)

    def calculate_pheromone(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        connectivity = sum(1 / (distance_matrix[node][n] + 1e-10) for n in unvisited_nodes if n != destination_node)
        return (0.5 * (1 / (immediate_cost + 1e-10)) + 0.3 * connectivity - 0.2 * detour_cost)

    def calculate_heuristic(node):
        global_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) / (remaining_nodes + 1e-6)
        local_cost = distance_matrix[current_node][node] / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        return (0.6 * exploration_factor * local_cost + 0.4 * (1 - exploration_factor) * global_cost)

    def combined_score(node):
        pheromone = calculate_pheromone(node)
        heuristic = calculate_heuristic(node)
        return (0.7 * pheromone + 0.3 * heuristic)

    next_node = min(unvisited_nodes, key=combined_score)
    return next_node
