def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_distance = distance_matrix[current_node][destination_node]
    distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    variance_to_dest = sum((d - base_distance) ** 2 for d in distances_to_dest) / remaining_nodes if remaining_nodes > 1 else 0

    proximity_factor = 1 - (base_distance / max(distance_matrix[current_node][i] for i in unvisited_nodes))
    detour_penalty = 0.2 + 0.6 * (variance_to_dest / (base_distance + 1)) * (remaining_nodes / (remaining_nodes + 2))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_dest = distance_matrix[node][destination_node]
        detour_cost = to_dest - base_distance
        return to_current + detour_penalty * detour_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
