def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (1 - (remaining_nodes / total_nodes)) ** 2
    exploration_weight = 0.6 * (1 - progress_factor)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        regret = (immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        return (exploration_weight * immediate_cost + (1 - exploration_weight) * future_cost) + 0.2 * regret - 0.1 * diversity_bonus

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
