def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    max_distance = max(max(row) for row in distance_matrix)
    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][i] for i in unvisited_nodes if i != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node] / max_distance
        detour_cost = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / max_distance

        weight_proximity = 0.6 * (1 - progress_ratio) + 0.2 * progress_ratio
        weight_detour = 1 - weight_proximity

        penalty = 0.2 if node in unvisited_nodes and node != destination_node else 0.0

        centrality_factor = centrality.get(node, 0) / max_distance if max_distance > 0 else 0

        adjusted_detour = detour_cost * (remaining_nodes / total_nodes) * (1 - progress_ratio) * centrality_factor

        return weight_proximity * immediate_cost + weight_detour * adjusted_detour + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
