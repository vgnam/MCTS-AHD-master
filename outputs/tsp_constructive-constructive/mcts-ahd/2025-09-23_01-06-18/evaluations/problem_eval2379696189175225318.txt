def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        global_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        destination_penalty = distance_matrix[node][destination_node] / (distance_matrix[current_node][destination_node] + 1e-6)
        normalized_connectivity = global_connectivity / (remaining_nodes + 1e-6)
        return immediate_cost + 0.7 * normalized_connectivity - 0.5 * destination_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
