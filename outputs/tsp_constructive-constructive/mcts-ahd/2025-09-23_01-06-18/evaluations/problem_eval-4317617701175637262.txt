def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = 1.0 - 0.8 * progress_factor

    remaining_distance = distance_matrix[current_node][destination_node]
    dynamic_weight = 0.4 + 0.6 * (1 - remaining_distance / sum(distance_matrix[current_node]))

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - remaining_distance
        weighted_detour = dynamic_weight * local_cost + (1 - dynamic_weight) * detour_cost

        regret_values = [distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes]
        regret_threshold = sorted(regret_values)[max(1, int(0.2 * remaining_nodes))] if remaining_nodes > 1 else 0
        regret_term = sum(1 for r in regret_values if r > regret_threshold)

        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        weighted_score = (0.6 * weighted_detour + 0.3 * regret_term) * temperature - 0.1 * diversity_penalty
        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    probabilities = [math.exp(score / temperature) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
