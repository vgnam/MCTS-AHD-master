importance" metric that combines distance and centrality.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_node_importance(node):
        immediate_cost = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        return 0.6 * immediate_cost + 0.4 * centrality

    def evaluate_future_path(node, depth=2):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        future_weights = [0.7 ** (i+1) for i in range(len(next_candidates))]
        weighted_costs = [
            future_weights[i] * (distance_matrix[node][candidate] + evaluate_future_path(candidate, depth-1))
            for i, candidate in enumerate(next_candidates)
        ]
        return sum(weighted_costs) / sum(future_weights)

    def hybrid_heuristic(node):
        importance = calculate_node_importance(node)
        future_cost = evaluate_future_path(node)
        dynamic_weight = 0.5 + 0.2 * (1 - len(unvisited_nodes) / len(distance_matrix))
        return dynamic_weight * importance + (1 - dynamic_weight) * future_cost

    next_node = min(unvisited_nodes, key=hybrid_heuristic)
    return next_node
