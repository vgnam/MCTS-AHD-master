def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    # Dynamic adaptive weights
    local_weight = 0.5 + 0.4 * progress_factor
    global_weight = 0.5 - 0.3 * progress_factor
    novelty_weight = 0.2 * progress_factor

    # Temperature scaling based on both progress and diversity
    diversity_factor = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
    temperature = 0.7 - 0.4 * progress_factor + 0.3 * (1 - diversity_factor)

    # Track visit frequencies for novelty term (simplified for this example)
    visit_frequencies = {node: 1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes}

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        novelty_term = 1 / (1 + visit_frequencies.get(node, 1))

        weighted_score = (local_cost * local_weight +
                         global_potential * global_weight +
                         novelty_term * novelty_weight) * temperature
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
