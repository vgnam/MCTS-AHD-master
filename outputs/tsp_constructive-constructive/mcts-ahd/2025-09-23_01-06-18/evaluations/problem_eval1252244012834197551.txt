def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (remaining_nodes / total_nodes)
    exploration_weight = max(0.3, 0.7 * (1 - progress_factor))

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        regret_factor = 0.5 * progress_factor
        regret = (immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        return (exploration_weight * immediate_cost + (1 - exploration_weight) * future_cost) + regret_factor * regret

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
