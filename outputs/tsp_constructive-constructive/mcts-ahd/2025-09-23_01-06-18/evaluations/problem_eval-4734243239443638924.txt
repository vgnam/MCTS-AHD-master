def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        exploration_weight = (1 - progress) ** 2
        exploitation_weight = 1 - exploration_weight
        centrality_weight = 0.2 * (1 - progress ** 3)

        return (exploitation_weight * to_current +
                exploration_weight * detour_risk +
                centrality_weight * centrality)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
