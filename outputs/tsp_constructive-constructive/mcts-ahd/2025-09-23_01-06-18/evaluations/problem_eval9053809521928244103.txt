def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.0:
            return destination_node
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        weight = 0.5 + 0.5 * (len(unvisited_nodes) / len(distance_matrix))
        penalty = max(0, to_current - 2 * avg_distance) + max(0, to_destination - 2 * avg_distance)
        return to_current * (1 / weight) + to_destination * weight + penalty
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
