def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (remaining_nodes / total_nodes) ** 2
    selection_pressure = 0.6 + 0.4 * (1 - progress_factor)

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    weight_factor = 1 + 0.3 * (1 - progress_factor)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        centrality_weight = centrality[node] / max(centrality.values()) if centrality else 1
        return (selection_pressure * local_cost * weight_factor * (1 + centrality_weight) +
                (1 - selection_pressure) * global_potential * (1 / weight_factor)) + 0.15 * regret_term

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
