def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        priority = remaining_distance / avg_distance if avg_distance != 0 else 1.0
        if priority <= 1.2:  # Stricter threshold for destination priority
            return destination_node

    # Dynamic heuristic combining distance and remaining nodes with exponential decay
    heuristic_factor = 1 + 0.3 * (1 / (1 + 0.1 * len(unvisited_nodes)))
    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] * heuristic_factor)

    return next_node
