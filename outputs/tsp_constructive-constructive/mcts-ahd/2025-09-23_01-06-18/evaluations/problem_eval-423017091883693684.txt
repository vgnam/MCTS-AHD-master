importance" metric that combines local and global connectivity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if remaining_distance <= 1.2 * avg_distance:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)
    exploration_factor = 0.5 + 0.5 * (1 - progress)
    exploitation_factor = 0.5 * progress

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        regret = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        destination_proximity = distance_matrix[node][destination_node] / (avg_distance + 1e-6)
        node_importance = (local_cost + global_connectivity) / (1 + destination_proximity)

        exploration_term = local_cost * exploration_factor
        exploitation_term = node_importance * exploitation_factor
        regret_incentive = regret * 0.3 * (1 - progress)
        destination_bias = destination_proximity * 0.2 * progress

        score = exploration_term + exploitation_term + regret_incentive - destination_bias
        return score

    scores = [heuristic(node) for node in unvisited_nodes]
    probs = [math.exp(-s / (0.1 + 0.9 * progress)) for s in scores]
    total_prob = sum(probs)
    probs = [p / total_prob for p in probs]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
