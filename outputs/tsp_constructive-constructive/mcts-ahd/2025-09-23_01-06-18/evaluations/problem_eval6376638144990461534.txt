def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (1 - (remaining_nodes / total_nodes)) ** 2
    exploration_weight = 1 / (1 + np.exp(-5 * (progress_factor - 0.5)))

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        regret = (immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)

        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        diversity = 1 / (1 + np.exp(-0.1 * (centrality - np.mean([sum(distance_matrix[n]) / len(distance_matrix[n]) for n in unvisited_nodes]))))

        return (exploration_weight * immediate_cost + (1 - exploration_weight) * future_cost) + 0.3 * regret + 0.1 * diversity

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
