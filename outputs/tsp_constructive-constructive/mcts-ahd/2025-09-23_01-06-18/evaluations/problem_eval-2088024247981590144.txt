def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    if remaining_distance < 0.1 * sum(sum(row) for row in distance_matrix) / len(distance_matrix):
        weight_current = 0.4
        weight_destination = 0.6
    else:
        weight_current = 0.6
        weight_destination = 0.4

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        if len(unvisited_nodes) < len(distance_matrix) * 0.3:
            random_factor = 0.2 * random.random()
        else:
            random_factor = 0
        return (weight_current * to_current + weight_destination * to_destination) * (1 + random_factor)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
