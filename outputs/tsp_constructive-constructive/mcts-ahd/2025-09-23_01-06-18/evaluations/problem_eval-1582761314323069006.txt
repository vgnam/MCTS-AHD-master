def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)

        # Calculate path entropy (uncertainty in remaining paths)
        entropy = 0
        for n in unvisited_nodes:
            if n != node:
                entropy += distance_matrix[node][n] / sum(distance_matrix[node][m] for m in unvisited_nodes if m != node)

        # Calculate attraction score (balances local and global connectivity)
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * immediate_cost)
        global_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes))
        attraction_score = (0.6 * local_connectivity + 0.4 * global_connectivity) / remaining_nodes

        # Dynamic weight adjustment
        dynamic_weight = (0.4 - 0.2 * progress) * immediate_cost + \
                         (0.2 - 0.1 * progress) * regret + \
                         (0.1 - 0.2 * progress) * detour_cost + \
                         (0.2 + 0.4 * progress) * attraction_score + \
                         (0.1 + 0.1 * progress) * entropy

        return dynamic_weight

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
