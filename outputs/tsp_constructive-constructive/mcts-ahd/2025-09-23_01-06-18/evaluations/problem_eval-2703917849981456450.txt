def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    weight = 0.6 - 0.3 * progress
    temperature = 0.8 - 0.5 * progress

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = immediate_cost - min_cost
        proximity_aware_regret = regret * (1 + (immediate_cost / (min_cost + 1e-6)))
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        connectivity_bonus = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        weighted_score = (weight * immediate_cost + (1 - weight) * proximity_aware_regret + 0.2 * hub_score + 0.1 * connectivity_bonus) * temperature - 0.3 * diversity_bonus
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
