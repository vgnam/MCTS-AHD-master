def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Adaptive regret calculation considering node centrality
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        regret = (immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (1 + 0.5 * centrality)

        # Enhanced hub score combining local and global centrality
        local_hub = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        global_hub = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        hub_score = 0.7 * local_hub + 0.3 * global_hub

        # Path deviation penalty scaling with tour length
        deviation_penalty = (immediate_cost + detour_cost) / (1 + 0.3 * (total_nodes - remaining_nodes))

        # Adaptive weights with refined balance
        weight_immediate = 0.4 - 0.2 * progress
        weight_regret = 0.3 + 0.4 * progress
        weight_detour = 0.15 * (1 - progress)
        weight_hub = 0.05 * progress
        weight_deviation = 0.1 * (1 - progress)

        return (weight_immediate * immediate_cost +
                weight_regret * regret +
                weight_detour * detour_cost +
                weight_hub * hub_score -
                weight_deviation * deviation_penalty)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
