def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def cluster_nodes(nodes, cluster_size=3):
        clusters = []
        nodes = list(nodes)
        while nodes:
            cluster = nodes[:cluster_size]
            for node in cluster:
                nodes.remove(node)
            clusters.append(cluster)
        return clusters

    clusters = cluster_nodes(unvisited_nodes)
    cluster_scores = []

    for cluster in clusters:
        cluster_score = sum(distance_matrix[current_node][node] for node in cluster) / len(cluster)
        cluster_scores.append(cluster_score)

    selected_cluster = clusters[cluster_scores.index(min(cluster_scores))]
    next_node = min(selected_cluster, key=lambda node: distance_matrix[current_node][node] + 0.5 * distance_matrix[node][destination_node])
    return next_node
