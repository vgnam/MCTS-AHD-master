def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = 1.0 - 0.7 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] +
                           sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)

        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0

        diversity_reward = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        revisit_penalty = 1.0 if node in unvisited_nodes else 0.0

        weighted_score = (0.5 * local_cost + 0.25 * global_potential + 0.15 * regret_term) * temperature
        weighted_score += 0.3 * centrality - 0.2 * diversity_reward * revisit_penalty

        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
