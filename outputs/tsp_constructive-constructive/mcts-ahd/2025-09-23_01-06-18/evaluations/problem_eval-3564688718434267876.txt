def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    proximity_weight = 1 - (remaining_nodes / total_nodes)

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        proximity_bias = proximity_weight * to_current
        return to_current + (1 - proximity_weight) * to_destination + proximity_bias

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
