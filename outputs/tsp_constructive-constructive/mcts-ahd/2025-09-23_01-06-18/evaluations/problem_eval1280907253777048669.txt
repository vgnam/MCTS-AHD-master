def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        priority = remaining_distance / avg_distance if avg_distance != 0 else 1.0
        if priority <= 1.5:
            return destination_node
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        return to_current + (to_destination ** 0.5) * (1 + 0.2 * (len(unvisited_nodes) / len(distance_matrix)))
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
