def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    temperature = max(0.1, 1 - 2 * progress_factor)

    def node_centrality(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        centrality = node_centrality(node)
        weighted_cost = (local_cost + 0.5 * centrality) * (1 - progress_factor)
        weighted_global = global_potential * progress_factor
        weighted_regret = regret_term * 0.3
        return (weighted_cost + weighted_global + weighted_regret) / temperature

    probabilities = [math.exp(-heuristic(node)) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
