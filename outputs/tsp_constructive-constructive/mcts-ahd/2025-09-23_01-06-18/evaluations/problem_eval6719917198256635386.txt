def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    weight_immediate = 0.9 * remaining_ratio + 0.1
    weight_future = 1 - weight_immediate

    def evaluate_path(node, depth=3):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        return weight_immediate * immediate_cost + weight_future * future_cost

    candidates = list(unvisited_nodes)
    if len(candidates) > 1:
        probabilities = [1.0 / len(candidates) for _ in candidates]
        probabilities[candidates.index(min(candidates, key=heuristic))] += 0.2
        next_node = random.choices(candidates, weights=probabilities)[0]
    else:
        next_node = candidates[0]

    return next_node
