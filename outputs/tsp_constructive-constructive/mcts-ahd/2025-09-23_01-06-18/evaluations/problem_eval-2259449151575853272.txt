def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_pressure = 0.2 + 0.8 * (1 - progress_factor)
    exploitation_pressure = 0.8 * progress_factor

    def calculate_pheromone(node):
        return (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) ** -0.5

    def heuristic(node):
        pheromone = calculate_pheromone(node)
        local_cost = distance_matrix[current_node][node]
        global_potential = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)
        adjusted_regret = regret * (1 + 0.2 * (centrality / (sum(centrality for n in unvisited_nodes) + 1e-6)))
        hub_avoidance = 1 / (centrality + 1e-6)
        penalty_factor = 1.0 + (remaining_nodes / total_nodes) ** 1.5
        weighted_score = exploration_pressure * (0.4 * adjusted_regret + 0.4 * local_cost * penalty_factor + 0.2 * hub_avoidance) + exploitation_pressure * (0.6 * global_potential / pheromone + 0.4 * progress_factor)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
