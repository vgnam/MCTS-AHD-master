def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.7 * (1 - progress_factor) + 0.3 * progress_factor
    exploitation_weight = 1 - exploration_weight

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret = (local_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        exploration_score = regret + 0.4 * (local_cost / (centrality + 1e-6)) - 0.5 * diversity_bonus
        exploitation_score = 0.7 * local_cost + 0.3 * global_potential - 0.3 * centrality

        temperature = 1.0 - 0.8 * progress_factor
        weighted_score = exploration_weight * exploration_score + exploitation_weight * exploitation_score
        weighted_score *= (1 + temperature * (0.5 - random.random()))

        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
