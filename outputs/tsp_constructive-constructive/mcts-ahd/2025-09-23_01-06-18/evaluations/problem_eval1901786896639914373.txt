def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def evaluate_path(node, depth=2):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:2]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        max_distance = max(max(row) for row in distance_matrix)
        normalized_immediate = immediate_cost / max_distance
        normalized_future = future_cost / max_distance
        decay_factor = 0.1 * (len(unvisited_nodes) / len(distance_matrix))
        return (0.6 * normalized_immediate + 0.4 * normalized_future) * (1 - decay_factor)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
