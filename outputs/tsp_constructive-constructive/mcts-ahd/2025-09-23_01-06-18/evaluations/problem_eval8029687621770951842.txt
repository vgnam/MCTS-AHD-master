def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.5 + 0.5 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (1 - progress_factor) * distance_matrix[node][destination_node] + progress_factor * sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) / (remaining_nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        regret_factor = (1 - progress_factor) * 0.8 + progress_factor * 0.3
        regret = (local_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)

        destination_bias = 1 / (1 + distance_matrix[node][destination_node])
        weighted_score = (1 - selection_pressure) * regret_factor * regret + selection_pressure * (0.6 * local_cost + 0.3 * global_potential + 0.1 * destination_bias) - 0.3 * centrality
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
