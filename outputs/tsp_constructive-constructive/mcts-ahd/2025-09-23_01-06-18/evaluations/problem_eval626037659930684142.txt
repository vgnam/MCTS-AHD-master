def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    temperature = 1.0 - 0.7 * progress

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_penalty = max(0, to_destination - distance_matrix[current_node][destination_node])
        global_potential = (to_destination + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        exploration_weight = 0.6 * (1 - progress)
        exploitation_weight = 1 - exploration_weight
        weighted_score = (exploitation_weight * local_cost + exploration_weight * (0.4 * detour_penalty + 0.6 * global_potential)) * temperature - 0.1 * regret_term
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
