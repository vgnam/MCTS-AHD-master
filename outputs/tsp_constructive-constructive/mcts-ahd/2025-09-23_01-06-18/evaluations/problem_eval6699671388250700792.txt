defined as the inverse of the sum of distances to the current node and destination, and the heuristic adjusts exploration-exploitation by scaling pheromone influence with the square root of remaining nodes.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_pheromone(node):
        direct_distance = distance_matrix[current_node][node]
        return 1.0 / (direct_distance + distance_matrix[node][destination_node] + 1e-10)

    def heuristic(node):
        pheromone = calculate_pheromone(node)
        local_distance = distance_matrix[current_node][node]
        exploration_weight = (len(unvisited_nodes) ** 0.5) / len(distance_matrix)
        return local_distance / (pheromone ** exploration_weight)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
