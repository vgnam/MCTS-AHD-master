importance as progress advances.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)

        # Enhanced hub score combining local and global connectivity
        local_hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        global_hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes)) if remaining_nodes > 1 else 0
        hub_score = (local_hub_score + global_hub_score) * (0.5 + 0.5 * progress)

        # Detour-aware regret scaling
        current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != current_node)
        scaled_regret = regret * (1 + progress * (current_path_length / total_nodes)) * (1 + 0.5 * progress)

        # Adaptive weights with stronger hub focus late in the tour
        weight_immediate = 0.5 - 0.3 * progress
        weight_regret = 0.2 + 0.5 * progress
        weight_detour = 0.15 * (1 - progress)
        weight_hub = 0.15 + 0.35 * progress

        return (weight_immediate * immediate_cost +
                weight_regret * scaled_regret +
                weight_detour * detour_cost +
                weight_hub * hub_score)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
