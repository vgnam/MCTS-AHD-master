def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_nodes = len(distance_matrix)
    visited_ratio = 1.0 - (len(unvisited_nodes) / num_nodes)
    exploration_weight = 0.7 * (1.0 - visited_ratio) + 0.2

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.6 + 0.4 * (visited_ratio ** 2)
        if direct_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        density_factor = len([n for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * to_current]) / len(unvisited_nodes)

        local_score = to_current * (1.0 - exploration_weight)
        global_score = predictive_factor * exploration_weight
        density_score = density_factor * 0.1 * visited_ratio

        return local_score + global_score + density_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
