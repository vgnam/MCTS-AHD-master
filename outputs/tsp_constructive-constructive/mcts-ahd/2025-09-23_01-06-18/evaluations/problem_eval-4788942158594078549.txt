def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_progress = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalized progress (0 to 1)
    weight = 0.5 + 0.5 * (1 - remaining_progress)  # Dynamic weight: higher as progress decreases

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        return to_current + weight * to_destination + 0.1 * random.random()  # Add small randomness

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
