def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    proximity_factor = 1 - (distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][i] for i in unvisited_nodes))
    detour_weight = 0.1 + 0.7 * (remaining_nodes / (remaining_nodes + 1)) * proximity_factor

    max_distance = max(max(row) for row in distance_matrix)
    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node] / max_distance
        to_destination = distance_matrix[node][destination_node] / max_distance
        detour_cost = to_destination - (distance_matrix[current_node][destination_node] / max_distance)
        balance_factor = (avg_unvisited_distance / max_distance - to_current) / (avg_unvisited_distance / max_distance)

        decay_factor = 0.1 * (remaining_nodes / len(distance_matrix))
        density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < max_distance * 0.3)
        density_term = density / len(unvisited_nodes) if unvisited_nodes else 0

        return to_current + detour_weight * detour_cost * balance_factor * (1 - decay_factor) * (1 + density_term)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
