def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def calculate_centrality(node):
        centrality = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                centrality += 1 / (distance_matrix[node][neighbor] + 1e-10)
        return centrality

    def heuristic(node):
        centrality = calculate_centrality(node)
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        return (0.4 * centrality + 0.3 * immediate_cost + 0.3 * future_cost)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
