def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0 or remaining_distance / avg_distance <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    centrality = sum(distance_matrix[current_node][node] for node in range(total_nodes)) / total_nodes
    avg_centrality = sum(sum(distance_matrix[i][j] for j in range(total_nodes)) / total_nodes for i in range(total_nodes)) / total_nodes
    centrality_weight = 1.0 if centrality < avg_centrality else 0.5

    weight = (1.5 - 0.5 * progress_factor) * centrality_weight

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_connectivity = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        return (local_cost * weight + global_connectivity * (1 - weight)) + 0.4 * regret_term - 0.3 * diversity_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
