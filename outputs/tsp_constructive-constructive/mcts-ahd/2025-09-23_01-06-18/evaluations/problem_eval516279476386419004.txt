def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.5 + 0.5 * progress_factor
    temperature = 1.0 - 0.8 * progress_factor

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / remaining_nodes if remaining_nodes > 0 else 0
        weighted_score = (selection_pressure * to_current + (1 - selection_pressure) * (to_destination + predictive_factor)) * temperature
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
