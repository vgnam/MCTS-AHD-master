importance and entropy quantifies path uncertainty, while incorporating a novel regret-aware detour factor that balances immediate cost with long-term path variability.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)

        if remaining_nodes > 1:
            neighbors = [n for n in unvisited_nodes if n != node]
            avg_neighbor_distance = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors) if neighbors else 0
            local_density = sum(1 for n in neighbors if distance_matrix[node][n] < 1.5 * avg_neighbor_distance) / len(neighbors) if neighbors else 0
            centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes) / len(unvisited_nodes)
            entropy = -sum((distance_matrix[node][n] / sum(distance_matrix[node][m] for m in unvisited_nodes)) * np.log(distance_matrix[node][n] / sum(distance_matrix[node][m] for m in unvisited_nodes)) for n in unvisited_nodes) if sum(distance_matrix[node][m] for m in unvisited_nodes) > 0 else 0
        else:
            local_density = 0
            centrality = 0
            entropy = 0

        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0

        weight_immediate = 0.4 - 0.2 * progress
        weight_regret = 0.4 + 0.3 * progress
        weight_detour = 0.1 * (1 - progress) + 0.05 * entropy
        weight_hub = 0.1 + 0.1 * progress + 0.05 * centrality
        weight_density = 0.1 + 0.2 * progress

        return (weight_immediate * immediate_cost +
                weight_regret * regret +
                weight_detour * detour_cost +
                weight_hub * hub_score +
                weight_density * local_density)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
