def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        if remaining_distance / avg_distance <= 1.2:
            return destination_node

    path_memory = getattr(select_next_node, 'path_memory', [])
    if current_node in path_memory:
        path_memory.remove(current_node)
    path_memory.append(current_node)
    if len(path_memory) > 5:
        path_memory.pop(0)
    select_next_node.path_memory = path_memory

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        path_length_ratio = sum(distance_matrix[path_memory[i]][path_memory[i+1]] for i in range(len(path_memory)-1)) / len(distance_matrix) if len(path_memory) > 1 else 0
        dynamic_weight = 1.5 * (1 - remaining_ratio) + 0.5 * path_length_ratio

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes if other not in path_memory) / (len(unvisited_nodes) + 1e-6)

        lookahead_penalty = 0
        if len(unvisited_nodes) > 3:
            lookahead_nodes = sorted(unvisited_nodes, key=lambda x: distance_matrix[node][x])[:3]
            lookahead_penalty = sum(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in lookahead_nodes) / 3

        return (to_current * (1 - dynamic_weight) + to_destination * dynamic_weight + 0.3 * centrality) - 0.4 * diversity_bonus + 0.2 * lookahead_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
