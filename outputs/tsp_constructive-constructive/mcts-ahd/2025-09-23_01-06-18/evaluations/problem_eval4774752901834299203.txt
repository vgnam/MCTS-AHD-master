def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    temperature = max(0.1, 2.0 * (len(unvisited_nodes) / len(distance_matrix)))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)

        # Connectivity gap metric
        connectivity_gap = max(distance_matrix[node][other] for other in unvisited_nodes) - min(distance_matrix[node][other] for other in unvisited_nodes)
        gap_weight = 0.3 * (1.0 - remaining_ratio)

        # Regret term with probabilistic component
        sorted_distances = sorted(distance_matrix[current_node][other] for other in unvisited_nodes)
        regret_term = (sorted_distances[1] - sorted_distances[0]) if len(sorted_distances) > 1 else 0

        # Adaptive diversity bonus
        local_density = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * to_current) / len(unvisited_nodes)
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_factor = 0.2 * (1 + 0.2 * local_density) * diversity_bonus

        # Temperature-adjusted selection
        selection_score = (to_current + to_destination) * (1.0 + gap_weight * connectivity_gap) - diversity_factor
        selection_score += regret_term * (1.0 - remaining_ratio)

        return selection_score / temperature

    # Probabilistic selection based on softmax
    scores = [heuristic(node) for node in unvisited_nodes]
    exp_scores = [math.exp(score) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
