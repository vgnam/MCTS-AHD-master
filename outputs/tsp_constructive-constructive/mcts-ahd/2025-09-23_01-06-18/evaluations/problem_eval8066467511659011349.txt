def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.6 - (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        exploration_ratio = len(unvisited_nodes) / len(distance_matrix)
        exploitation_weight = 0.5 + 0.5 * (1 - exploration_ratio)

        connectivity = sum(1 for other in unvisited_nodes
                         if distance_matrix[node][other] < 1.3 * to_current)
        connectivity_score = 1 + (0.2 * connectivity / len(unvisited_nodes))

        global_promise = (to_destination +
                         sum(sorted(distance_matrix[node][other]
                                  for other in unvisited_nodes if other != node)[:3])) / 4
        regret_score = sum(sorted(distance_matrix[current_node][other] - to_current
                                for other in unvisited_nodes)[:3]) / 3

        diversity_score = (sum(distance_matrix[node][other]
                              for other in unvisited_nodes) /
                          (len(unvisited_nodes) + 1e-6))
        diversity_score *= 1 - (0.3 * (connectivity / len(unvisited_nodes)))

        historical_bias = 0.1 * (1 - exploration_ratio)
        promise_score = (global_promise * 0.6 +
                        diversity_score * 0.3 +
                        historical_bias)

        return (to_current * exploitation_weight * connectivity_score +
               promise_score * (1.0 - exploitation_weight) +
               0.5 * regret_score)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
