def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    weight_immediate = 0.9 * (0.5 ** (1 / (remaining_count + 1)))  # Dynamic weight decay
    weight_future = 1 - weight_immediate

    def evaluate_path(node, depth=2):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = evaluate_path(node)
        return weight_immediate * immediate_cost + weight_future * future_cost

    # Probabilistic selection to escape local optima
    candidates = sorted(unvisited_nodes, key=lambda n: heuristic(n))
    probabilities = [1 / (1 + idx) for idx in range(len(candidates))]
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
