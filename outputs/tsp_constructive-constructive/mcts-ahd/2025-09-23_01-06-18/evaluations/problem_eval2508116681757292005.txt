import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = to_destination - distance_matrix[current_node][destination_node]

        # Dynamic weighting using sigmoid function
        weight_proximity = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
        weight_detour = 1 - weight_proximity

        # Penalty for revisiting nodes (simplified for demonstration)
        penalty = 0.1 if node in unvisited_nodes and node != destination_node else 0.0

        weighted_cost = weight_proximity * to_current + weight_detour * detour_cost + penalty
        return weighted_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
