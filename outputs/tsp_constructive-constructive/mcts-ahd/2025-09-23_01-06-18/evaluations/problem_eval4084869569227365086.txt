def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    local_weight = 0.7 * (1 - progress_factor)
    global_weight = 0.3 * progress_factor

    max_distance = max(max(row) for row in distance_matrix)
    avg_local_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes if remaining_nodes else 0

    def heuristic(node):
        local_cost = distance_matrix[current_node][node] / max_distance
        detour_penalty = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / max_distance * (1 + progress_factor)

        connectivity_penalty = sum(1 for d in distance_matrix[node] if d < avg_local_distance) / total_nodes
        global_potential = (sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) / (remaining_nodes - 1)) if remaining_nodes > 1 else 0

        weighted_score = local_weight * local_cost + global_weight * global_potential + detour_penalty + 0.1 * connectivity_penalty
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
