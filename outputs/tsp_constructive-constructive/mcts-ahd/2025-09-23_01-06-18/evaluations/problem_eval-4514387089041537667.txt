def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    temperature = 1.0 - 0.5 * progress

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]
        exploitation_weight = 0.8 * (1 - progress)
        exploration_weight = 0.2 + 0.6 * progress
        return exploitation_weight * to_current + exploration_weight * detour_risk

    scores = [heuristic(node) for node in unvisited_nodes]
    exp_scores = [math.exp(score / temperature) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
