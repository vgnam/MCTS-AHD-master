def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.9 + 0.3 * (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 1.5 * (1.0 - remaining_ratio)

        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:3]) / 3
        regret_weight = 0.7 * (1.0 - remaining_ratio)

        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_factor = 0.3 * (1 + 0.2 * connectivity / len(unvisited_nodes)) * diversity_bonus

        selection_temp = 1.2 + 0.4 * (1.0 - remaining_ratio)
        selection_prob = 1.0 / (1.0 + to_current**selection_temp + 0.4 * to_destination**selection_temp)

        local_factor = to_current * weight * (1.0 + regret_weight * regret_term)
        global_factor = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)) * (1.0 - weight)

        return (local_factor + global_factor) * selection_prob - diversity_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
