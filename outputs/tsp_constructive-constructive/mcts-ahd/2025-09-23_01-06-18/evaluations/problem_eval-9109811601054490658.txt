def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    # Calculate centrality of each node
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_score = 1 / (1 + centrality.get(node, 0))  # Prefer less central nodes

        # Phase transition weights
        if progress < 0.3:
            # Early phase: focus on immediate cost and diversity
            return (0.6 - 0.4 * progress) * immediate_cost + (0.2 + 0.3 * progress) * diversity_score + 0.2 * (1 - progress) * detour_cost
        elif progress < 0.7:
            # Mid phase: balance regret and hub score
            return 0.3 * immediate_cost + 0.4 * regret + 0.2 * hub_score + 0.1 * diversity_score
        else:
            # Late phase: prioritize hub score and minimize detour
            return 0.2 * immediate_cost + 0.3 * hub_score + 0.4 * (1 - detour_cost) + 0.1 * diversity_score

    # Add probabilistic selection for exploration
    if progress > 0.5 and remaining_nodes > 3:
        candidates = sorted(unvisited_nodes, key=heuristic)[:3]
        return candidates[np.random.choice(3, p=[0.5, 0.3, 0.2])]
    else:
        return next_node
