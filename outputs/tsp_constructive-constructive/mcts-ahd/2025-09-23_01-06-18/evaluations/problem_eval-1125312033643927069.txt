def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.6 + 0.1 * (len(unvisited_nodes) / len(distance_matrix))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    visit_counts = {node: 0 for node in distance_matrix}
    for node in unvisited_nodes:
        visit_counts[node] += 1

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        unvisited_ratio = len(unvisited_nodes) / len(distance_matrix)
        novelty_factor = 1 / (1 + visit_counts[node])
        weight = 1.2 - 0.8 * unvisited_ratio + 0.4 * novelty_factor
        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:2]) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        return (to_current * weight + global_potential * (1.0 - weight) + 0.8 * regret_term) - 0.3 * diversity_bonus

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    temperature = 0.5 + 0.5 * (max_score - min_score)
    probabilities = [math.exp(-(score - min_score) / temperature) for score in scores]
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
