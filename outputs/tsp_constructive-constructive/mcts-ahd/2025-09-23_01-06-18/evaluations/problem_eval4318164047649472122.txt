def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.8 - (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        base_weight = 1.8 - remaining_ratio

        # Dynamic centrality weight
        centrality = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.2 * to_current)
        dynamic_weight = base_weight * (1 + 0.1 * centrality / len(unvisited_nodes))

        # Path diversity factor
        diversity = sum(abs(distance_matrix[node][other] - distance_matrix[current_node][other]) for other in unvisited_nodes) / len(unvisited_nodes)
        diversity_factor = 1 + (0.3 * diversity / (sum(distance_matrix[current_node][other] for other in unvisited_nodes) + 1e-6))

        # Path momentum
        momentum = 0.7 if to_destination < sum(distance_matrix[current_node][other] for other in unvisited_nodes) / len(unvisited_nodes) else 0.3

        # Probabilistic selection
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:2]) / 2
        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)) / 2

        score = (to_current * dynamic_weight * diversity_factor +
                global_potential * (1.0 - dynamic_weight) * momentum +
                0.5 * regret_term) * (1 + 0.2 * remaining_ratio)

        return score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
