def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def path_potential(node):
        direct_cost = distance_matrix[node][destination_node]
        nearby_nodes = [n for n in range(len(distance_matrix)) if n != node]
        indirect_cost = sum(distance_matrix[node][n] + distance_matrix[n][destination_node]
                          for n in nearby_nodes[:3]) / min(3, len(nearby_nodes)) if nearby_nodes else 0
        return 0.6 * direct_cost + 0.4 * indirect_cost

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        potential = path_potential(node)
        penalty = 0.3 if node in unvisited_nodes and node != destination_node else 0.0
        return 0.7 * immediate_cost + 0.3 * potential + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
