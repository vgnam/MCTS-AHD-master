def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.3 + 0.7 * progress_factor

    remaining_distance = distance_matrix[current_node][destination_node]
    centrality_scores = [sum(distance_matrix[node]) / (total_nodes - 1) for node in unvisited_nodes]
    avg_centrality = sum(centrality_scores) / remaining_nodes if remaining_nodes else 0

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_cost = max(0, to_destination - remaining_distance)
        regret_term = max(distance_matrix[current_node][n] - distance_matrix[current_node][node] for n in unvisited_nodes) if unvisited_nodes else 0
        diversity_term = (sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes) / avg_centrality if avg_centrality else 0
        exploitation_score = 0.4 * local_cost + 0.3 * detour_cost + 0.3 * regret_term
        exploration_score = (1 - exploitation_score) * exploration_weight
        weighted_score = exploitation_score - 0.5 * diversity_term + exploration_score
        return weighted_score

    if np.random.random() < exploration_weight:
        next_node = np.random.choice(unvisited_nodes)
    else:
        next_node = min(unvisited_nodes, key=heuristic)
    return next_node
