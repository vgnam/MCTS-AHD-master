def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.2 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 1.5 - remaining_ratio

        # Enhanced diversity bonus
        local_connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * to_current)
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_factor = 0.3 * (1 + 0.2 * local_connectivity / len(unvisited_nodes)) * diversity_bonus

        # Predictive factor with adjusted weight
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        predictive_weight = 0.4 * (1.0 - remaining_ratio)

        # Reduced local focus
        local_factor = to_current * weight * 0.8
        global_factor = (to_destination + predictive_factor * predictive_weight) * (1.5 - weight)

        return (local_factor + global_factor) + diversity_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
