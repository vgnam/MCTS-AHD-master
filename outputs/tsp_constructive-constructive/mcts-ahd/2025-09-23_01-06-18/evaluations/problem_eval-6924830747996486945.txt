def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    avg_unvisited_dist = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    progress_factor = 0.5 if current_to_dest == 0 else min(1.0, 0.5 * (current_to_dest / avg_unvisited_dist))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        return (1 - progress_factor) * to_current + progress_factor * (1 / (to_destination + 1e-6))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
