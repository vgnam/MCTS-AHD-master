def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def evaluate_path(node, depth):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:2]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        adaptive_depth = max(1, len(unvisited_nodes) // 3)
        future_cost = evaluate_path(node, adaptive_depth)
        return 0.3 * immediate_cost + 0.7 * future_cost

    scores = [heuristic(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score + 1e-6) / (max_score - min_score + 1e-6) for score in scores]
    total = sum(normalized_scores)
    probabilities = [score / total for score in normalized_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
