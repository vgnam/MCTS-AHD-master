def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 2.0 - remaining_ratio

        # Regret term combining differences to alternatives
        sorted_distances = sorted(distance_matrix[current_node][other] for other in unvisited_nodes)
        regret_term = (sorted_distances[1] - to_current) if len(sorted_distances) > 1 else 0
        regret_weight = 0.5 * (1.0 - remaining_ratio)

        # Diversity bonus considering connectivity
        local_connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.3 * to_current)
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        diversity_factor = 0.2 * (1 + 0.1 * local_connectivity / len(unvisited_nodes)) * diversity_bonus

        # Predictive factor from No.2
        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)

        # Balanced component weighting
        local_factor = to_current * weight * (1.0 + regret_weight * regret_term)
        global_factor = (to_destination + predictive_factor) * (1.0 - weight)

        return (local_factor + global_factor) - diversity_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
