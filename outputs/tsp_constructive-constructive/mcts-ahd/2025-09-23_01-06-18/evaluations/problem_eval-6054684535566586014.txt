def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.8 - (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)

        # Adaptive weight based on node centrality
        centrality = sum(distance_matrix[node][n] for n in distance_matrix) / len(distance_matrix)
        weight = 1.5 * (1.0 - remaining_ratio) + 0.5 * (centrality / max(sum(distance_matrix[n]) for n in distance_matrix))

        # Dynamic regret heuristic (combines immediate and future regret)
        immediate_regret = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:2]) / 2
        future_regret = sum(sorted(distance_matrix[node][other] for other in unvisited_nodes)[:3]) / 3
        regret_term = 0.7 * immediate_regret + 0.3 * future_regret

        # Diversity bonus adjusted by node connectivity
        connectivity = len([n for n in distance_matrix if distance_matrix[node][n] > 0])
        diversity_bonus = (sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)) * (1.0 / connectivity)

        # Probabilistic selection factor
        prob_factor = 1.0 + 0.1 * (1.0 - remaining_ratio)

        return (to_current * weight + to_destination * (1.0 - weight) + 0.5 * regret_term - 0.3 * diversity_bonus) * prob_factor

    # Select node with probability inversely proportional to heuristic score
    scores = [heuristic(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]
    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
