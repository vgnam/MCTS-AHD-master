def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_rate = 0.9 - 0.6 * progress_factor
    temperature = 1.0 - 0.5 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        potential_flow = sum((distance_matrix[node][n] - distance_matrix[current_node][n]) for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * local_cost) / (remaining_nodes + 1e-6)
        regret_threshold = 0.5 + 0.3 * progress_factor
        regret = max(0, (local_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) / (max(distance_matrix[current_node][n] for n in unvisited_nodes) - min(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6) - regret_threshold)

        weighted_score = (1 - exploration_rate) * (0.5 * local_cost + 0.3 * global_potential + 0.2 * potential_flow) - 0.3 * connectivity + exploration_rate * regret
        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    probabilities = [math.exp(score / temperature) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]

    return next_node
