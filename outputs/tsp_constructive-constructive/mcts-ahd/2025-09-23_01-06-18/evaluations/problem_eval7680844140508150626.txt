def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.2:
            return destination_node
    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        weight = 1 + 0.4 * remaining_ratio
        predictive_avg = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        predictive_min = min(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        return to_current * weight + to_destination * (1 / weight) + 0.5 * (predictive_avg + predictive_min) * (1 - remaining_ratio)
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
