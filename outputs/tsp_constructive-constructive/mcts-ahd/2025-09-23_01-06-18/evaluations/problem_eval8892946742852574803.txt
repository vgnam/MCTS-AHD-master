def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    temperature = max(0.1, 1.0 - progress * 0.9)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        global_potential = (distance_matrix[node][destination_node] + diversity_bonus) / 2

        weighted_score = (0.5 - 0.3 * progress) * immediate_cost + (0.3 + 0.4 * progress) * regret + (0.1 * progress) * hub_score + (0.1 * (1 - progress)) * global_potential

        # Apply temperature scaling for probabilistic selection
        return weighted_score * temperature

    # Calculate probabilities using softmax
    scores = [heuristic(node) for node in unvisited_nodes]
    exp_scores = [math.exp(-score) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]

    # Select node probabilistically
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
