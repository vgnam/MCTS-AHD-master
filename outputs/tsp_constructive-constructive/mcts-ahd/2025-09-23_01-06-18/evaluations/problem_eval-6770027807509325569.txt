def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        if remaining_distance == 0:
            return destination_node
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + 0.5 * (1.0 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        progress = (len(distance_matrix) - len(unvisited_nodes)) / len(distance_matrix)

        # Dynamic exploration factor
        exploration_factor = 0.5 * (1.0 - progress) + 0.3 * progress

        # Adaptive local and global weights
        local_weight = 2.0 * (1.0 - progress)
        global_weight = 1.0 + 0.5 * progress

        # Novelty bonus based on historical visits (simplified)
        novelty_bonus = 0.2 * (1.0 - (sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] == to_current) / len(unvisited_nodes)))

        # Connectivity metrics
        local_connectivity = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        global_connectivity = sum(distance_matrix[other][destination_node] for other in unvisited_nodes) / len(unvisited_nodes)

        # Temperature-based probabilistic selection
        temperature = 1.0 - 0.8 * progress
        selection_prob = (1.0 / (1.0 + to_current)) ** (1.0 / temperature)

        # Combined heuristic
        local_score = local_weight * (to_current - novelty_bonus)
        global_score = global_weight * (to_destination + 0.5 * (local_connectivity + global_connectivity))

        return (local_score + global_score) * selection_prob * exploration_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
