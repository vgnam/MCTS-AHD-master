def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.6 * (remaining_nodes / total_nodes) + 0.4 * progress_factor

    def calculate_potential(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_potential = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) * (1 + progress_factor)
        farthest_cost = max(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        return (exploration_weight * immediate_cost +
                (1 - exploration_weight) * detour_potential +
                0.3 * farthest_cost -
                0.2 * diversity_bonus)

    next_node = min(unvisited_nodes, key=calculate_potential)
    return next_node
