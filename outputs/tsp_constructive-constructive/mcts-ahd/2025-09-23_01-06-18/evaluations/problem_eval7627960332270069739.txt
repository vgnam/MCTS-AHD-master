def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    avg_distance_to_unvisited = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0
    total_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        distance_ratio = (to_current / (avg_distance_to_unvisited + 1e-6))  # Avoid division by zero
        dynamic_weight = 0.7 * (remaining_nodes / (remaining_nodes + 1))  # Stronger global influence
        penalty = 0.2 * (1 if node in unvisited_nodes else 0)  # Penalize revisiting nodes
        return to_current + dynamic_weight * to_destination + 0.4 * distance_ratio + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
