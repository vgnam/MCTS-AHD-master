def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 / (1 + math.exp(-5 * (1 - remaining_nodes / total_nodes)))
    exploration_weight = 0.7 * (1 - progress_factor)

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        normalized_regret = (immediate_cost - min_cost) / (max_cost - min_cost + 1e-6)

        local_diversity = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        return (exploration_weight * immediate_cost + (1 - exploration_weight) * future_cost) + 0.3 * normalized_regret * local_diversity

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
