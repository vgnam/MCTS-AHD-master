def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_factor = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / (distance_matrix[current_node][destination_node] + 1e-6)

        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.3 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) / (remaining_nodes + 1e-6)
        global_density = sum(1 for n in unvisited_nodes if sum(distance_matrix[n][m] for m in unvisited_nodes) < 1.5 * sum(distance_matrix[n][m] for m in unvisited_nodes if m != n)) / (remaining_nodes + 1e-6)

        regret_component = (immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)) * (0.5 + 0.5 * (local_density - global_density))

        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes) / (remaining_nodes + 1e-6)

        return (0.4 - 0.2 * progress) * immediate_cost + (0.3 + 0.4 * progress) * regret_component + (0.15 * (1 - progress)) * detour_factor + (0.3 * progress) * centrality_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
