defined path direction, adjusting weights based on tour progress to favor early-stage alignment while later emphasizing detour reduction.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]
        alignment = distance_matrix[current_node][destination_node] - to_current
        alignment_weight = 0.7 * (1 - progress)
        detour_weight = 1 - alignment_weight
        return alignment_weight * alignment + detour_weight * detour_risk

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
