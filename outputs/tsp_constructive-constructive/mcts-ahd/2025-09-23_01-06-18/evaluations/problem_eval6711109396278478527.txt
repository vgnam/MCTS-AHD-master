def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    max_distance = max(max(row) for row in distance_matrix)
    avg_unvisited_distance = sum(distance_matrix[current_node][i] for i in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node] / max_distance
        detour_cost = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / max_distance

        weight_detour = 0.7 if progress_ratio < 0.5 else 0.3
        weight_proximity = 1 - weight_detour

        penalty = 0.2 * (2 ** (remaining_nodes - 1)) if node in unvisited_nodes and node != destination_node else 0.0

        adjusted_detour = detour_cost * (1 - (remaining_nodes / total_nodes)) * (1 - progress_ratio)

        return weight_detour * adjusted_detour + weight_proximity * immediate_cost + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
