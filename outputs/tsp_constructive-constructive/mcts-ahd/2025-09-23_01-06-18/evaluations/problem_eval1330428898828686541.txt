def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    def evaluate_path(node, depth=3):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, depth-1)
            for candidate in next_candidates
        )

    def evaluate_medium_term(node):
        if not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_candidates = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:3]
        return min(
            distance_matrix[node][candidate] + evaluate_path(candidate, 4)
            for candidate in next_candidates
        )

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        short_term_cost = evaluate_path(node)
        medium_term_cost = evaluate_medium_term(node)
        return 0.6 * immediate_cost + 0.3 * short_term_cost + 0.1 * medium_term_cost

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
