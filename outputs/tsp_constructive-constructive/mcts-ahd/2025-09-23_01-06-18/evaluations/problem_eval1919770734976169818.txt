import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes

    def heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        regret = immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) if remaining_nodes > 1 else 0
        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * immediate_cost) if remaining_nodes > 1 else 0

        # Dynamic penalty for revisiting nodes
        revisit_penalty = 0.1 * (total_nodes - remaining_nodes) if node in unvisited_nodes else 0

        # Adaptive weights
        cost_weight = 0.5 - 0.3 * progress
        regret_weight = 0.3 - 0.2 * progress
        detour_weight = 0.2 - 0.3 * progress
        hub_weight = 0.3 + 0.5 * progress
        centrality_weight = 0.2 + 0.3 * progress

        # Normalize scores
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes) if unvisited_nodes else 1
        max_regret = max(immediate_cost - min(distance_matrix[current_node][n] for n in unvisited_nodes) for n in unvisited_nodes) if unvisited_nodes else 1
        max_detour = max(distance_matrix[n][destination_node] - distance_matrix[current_node][destination_node] for n in unvisited_nodes) if unvisited_nodes else 1
        max_hub = max(sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n)) for node in unvisited_nodes) if remaining_nodes > 1 else 1
        max_centrality = max(sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.1 * distance_matrix[current_node][node]) for node in unvisited_nodes) if remaining_nodes > 1 else 1

        normalized_cost = immediate_cost / max_cost if max_cost != 0 else 0
        normalized_regret = regret / max_regret if max_regret != 0 else 0
        normalized_detour = detour_cost / max_detour if max_detour != 0 else 0
        normalized_hub = hub_score / max_hub if max_hub != 0 else 0
        normalized_centrality = centrality / max_centrality if max_centrality != 0 else 0

        dynamic_weight = (cost_weight * normalized_cost +
                          regret_weight * normalized_regret +
                          detour_weight * normalized_detour +
                          hub_weight * normalized_hub +
                          centrality_weight * normalized_centrality) - revisit_penalty

        return dynamic_weight

    # Probabilistic selection based on heuristic scores
    scores = [heuristic(node) for node in unvisited_nodes]
    max_score = max(scores) if scores else 0
    min_score = min(scores) if scores else 0
    normalized_scores = [(score - min_score) / (max_score - min_score) if max_score != min_score else 1 for score in scores]

    if not normalized_scores:
        return random.choice(unvisited_nodes)

    next_node = random.choices(unvisited_nodes, weights=normalized_scores, k=1)[0]
    return next_node
