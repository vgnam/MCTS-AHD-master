def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        priority = remaining_distance / avg_distance
        if priority <= 1.0:
            return destination_node

    def regret_heuristic(node):
        immediate_cost = distance_matrix[current_node][node]
        alternative_costs = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        regret = max(alternative_costs) - min(alternative_costs) if alternative_costs else 0
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        dynamic_weight = 0.7 * (1 - remaining_ratio) + 0.3 * remaining_ratio
        return immediate_cost * (1 - dynamic_weight) + regret * dynamic_weight

    next_node = min(unvisited_nodes, key=regret_heuristic)
    return next_node
