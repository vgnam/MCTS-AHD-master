def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 0.5 * (remaining_nodes / total_nodes) ** 2 + 0.5

    def calculate_potential(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        penalty = 10 if node in unvisited_nodes else 0
        return (exploration_factor * immediate_cost +
                (1 - exploration_factor) * detour_potential +
                0.2 * centrality +
                penalty)

    potentials = [calculate_potential(node) for node in unvisited_nodes]
    min_potential = min(potentials)
    max_potential = max(potentials)

    if max_potential == min_potential:
        return unvisited_nodes[0]

    normalized_potentials = [(max_potential - p) / (max_potential - min_potential) for p in potentials]
    selection_probabilities = [p / sum(normalized_potentials) for p in normalized_potentials]
    next_node = random.choices(unvisited_nodes, weights=selection_probabilities, k=1)[0]

    return next_node
