def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    selection_pressure = 0.6 + 0.4 * progress_factor
    temperature = 0.8 - 0.7 * progress_factor

    def calculate_pheromone(node):
        distance = distance_matrix[current_node][node]
        return 1.0 / (1.0 + distance ** 2)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        pheromone = calculate_pheromone(node)
        weighted_score = (selection_pressure * local_cost + (1 - selection_pressure) * global_potential) * temperature + (1.0 / pheromone)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
