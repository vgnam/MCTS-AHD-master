def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.3 * (1 - remaining_nodes / (remaining_nodes + 1))

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        random_weight = random.uniform(0.1, 0.5)
        return (0.5 * to_current + 0.3 * to_destination) * (1 - exploration_factor) + random_weight * exploration_factor

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
