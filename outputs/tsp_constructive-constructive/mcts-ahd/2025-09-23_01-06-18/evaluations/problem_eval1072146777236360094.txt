def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 0.7 - (0.3 * (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        visited_ratio = len(unvisited_nodes) / len(distance_matrix)
        exploration_weight = 1.2 * (1 - visited_ratio)
        exploitation_weight = 0.8 * visited_ratio

        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.3 * to_current)
        connectivity_factor = 1 + (0.15 * connectivity / len(unvisited_nodes))

        global_potential = (to_destination + sum(sorted(distance_matrix[node][other] for other in unvisited_nodes if other != node)[:3])) / 4
        regret_term = sum(sorted(distance_matrix[current_node][other] - to_current for other in unvisited_nodes)[:3]) / 3

        novelty_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        novelty_bonus *= 1 - (0.3 * (connectivity / len(unvisited_nodes)))

        temperature = 1.0 / (1 + visited_ratio)
        scores = []
        for candidate in unvisited_nodes:
            local_score = distance_matrix[current_node][candidate] * connectivity_factor
            global_score = (distance_matrix[candidate][destination_node] +
                           sum(sorted(distance_matrix[candidate][other] for other in unvisited_nodes if other != candidate)[:2])) / 3
            novelty_score = sum(distance_matrix[candidate][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
            total_score = (exploration_weight * local_score +
                          exploitation_weight * global_score +
                          0.5 * regret_term -
                          0.4 * novelty_score)
            scores.append(math.exp(-total_score / temperature))

        probabilities = [score / sum(scores) for score in scores]
        return random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    next_node = heuristic(unvisited_nodes)
    return next_node
