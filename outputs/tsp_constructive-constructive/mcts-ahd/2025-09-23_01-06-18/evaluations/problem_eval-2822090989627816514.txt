def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)
    temperature = 1.0 - 0.7 * progress

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            return local_cost

        predictive_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        global_potential = (to_destination + predictive_factor) / 2

        regret_penalty = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                regret_penalty = max(regret_penalty, distance_matrix[current_node][neighbor] - local_cost)

        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)

        path_memory = 0
        if len(unvisited_nodes) > 1:
            path_memory = sum(distance_matrix[other][node] for other in unvisited_nodes if other != node) / len(unvisited_nodes)

        return (local_cost * (1.2 - 0.8 * progress) +
                global_potential * (0.8 + 0.4 * progress) +
                0.5 * regret_penalty -
                0.3 * diversity_bonus +
                0.2 * path_memory)

    if remaining_nodes > 1:
        scores = [heuristic(node) for node in unvisited_nodes]
        exp_scores = [math.exp(-score / temperature) for score in scores]
        probabilities = [score / sum(exp_scores) for score in exp_scores]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=heuristic)

    return next_node
