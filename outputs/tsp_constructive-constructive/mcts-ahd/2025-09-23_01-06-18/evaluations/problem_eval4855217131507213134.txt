def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    exploration_weight = 0.6  # Fixed weight for immediate proximity

    def calculate_potential(node):
        immediate_cost = distance_matrix[current_node][node]
        detour_potential = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        farthest_cost = max(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node) if unvisited_nodes else 0
        return (exploration_weight * immediate_cost +
                (1 - exploration_weight) * detour_potential +
                0.15 * farthest_cost)

    next_node = min(unvisited_nodes, key=calculate_potential)
    return next_node
