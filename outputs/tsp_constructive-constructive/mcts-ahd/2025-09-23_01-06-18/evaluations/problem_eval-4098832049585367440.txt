def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    destination_bias = 1 - (remaining_nodes / total_nodes)

    def weighted_probability(node):
        distance = distance_matrix[current_node][node]
        detour = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        destination_distance = distance_matrix[node][destination_node]
        probability = (0.5 * (1 / (distance + 1e-10)) + 0.3 * destination_bias * (1 / (destination_distance + 1e-10)) - 0.2 * detour)
        return probability

    probabilities = [weighted_probability(node) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
