def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        detour_risk = to_destination - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment
        exploration_weight = 0.3 + 0.4 * (1 - progress)
        exploitation_weight = 1 - exploration_weight

        # Novel metrics
        node_diversity = sum(abs(distance_matrix[node][n] - distance_matrix[current_node][n])
                           for n in unvisited_nodes if n != node) / (remaining_nodes - 1 + 1e-6)

        path_momentum = 1 / (1 + abs(to_current - distance_matrix[current_node][destination_node]))

        # Weighted heuristic
        return (exploitation_weight * to_current +
                exploration_weight * (0.6 * detour_risk + 0.2 * (1 / (1 + to_destination)) + 0.2 * path_momentum) +
                0.1 * node_diversity)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
