def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.2 + (0.8 - (len(unvisited_nodes) / len(distance_matrix)))
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    def heuristic(node):
        to_current = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)

        centrality = sum(distance_matrix[node][other] for other in distance_matrix) / len(distance_matrix)
        progress_factor = 1 - remaining_ratio
        weight = 1.5 * (1 - progress_factor) + 0.5 * (progress_factor)

        global_potential = (to_destination + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) / (len(unvisited_nodes) + 1)
        regret_penalty = (max(distance_matrix[current_node][other] - to_current for other in unvisited_nodes) if unvisited_nodes else 0) * (1 + remaining_ratio)

        diversity_bonus = (sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)) * (1 - remaining_ratio)

        decay_factor = 2.0 ** (-progress_factor)
        return (to_current * weight + global_potential * (1.0 - weight) * decay_factor + 0.4 * regret_penalty) - 0.2 * diversity_bonus + 0.3 * centrality

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
