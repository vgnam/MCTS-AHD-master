def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        remaining_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.0 + (1.0 - (len(unvisited_nodes) / len(distance_matrix)))**2
        if remaining_distance / avg_distance <= threshold:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (1 - (remaining_nodes / total_nodes))**2
    selection_pressure = 0.7 - 0.3 * progress_factor
    temperature = 1.0 - 0.8 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]
        regret_threshold = 0.5 + 0.5 * (1 - progress_factor)
        regret_term = max(distance_matrix[current_node][n] - local_cost for n in unvisited_nodes) if unvisited_nodes else 0
        regret_term = regret_term if regret_term > regret_threshold else 0
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        weighted_score = (selection_pressure * local_cost + (1 - selection_pressure) * global_potential + 0.3 * regret_term) * temperature - 0.3 * diversity_bonus
        return weighted_score

    scores = [heuristic(node) for node in unvisited_nodes]
    probabilities = [math.exp(-score / temperature) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
