def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    base_pressure = 0.3 + 0.7 * progress_factor
    node_density = total_nodes / (sum(sum(row) for row in distance_matrix) + 1e-6)
    selection_pressure = base_pressure * (1 + 0.2 * node_density)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_potential = (distance_matrix[node][destination_node] + sum(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)) / (remaining_nodes + 1)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        min_cost = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_cost = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        regret = (local_cost - min_cost) / (max_cost - min_cost + 1e-6)
        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        hub_avoidance = 1 / (centrality + 1e-6)
        weighted_score = selection_pressure * (0.5 * regret + 0.3 * local_cost + 0.2 * hub_avoidance) + (1 - selection_pressure) * (0.5 * global_potential - 0.25 * diversity_bonus)
        return weighted_score

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
