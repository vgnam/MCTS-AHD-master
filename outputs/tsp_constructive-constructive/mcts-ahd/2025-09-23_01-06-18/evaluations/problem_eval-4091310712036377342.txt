def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        local_density = sum(1 for node in unvisited_nodes if distance_matrix[current_node][node] <= 2 * min(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node))
        if local_density >= 0.6 * len(unvisited_nodes):
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    base_weight = 1 + 0.5 * (1 - progress_factor)

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        global_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != node)) / len(unvisited_nodes)
        path_potential = distance_matrix[node][destination_node] / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes))
        hub_penalty = (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) ** 0.5

        weighted_cost = base_weight * local_cost
        weighted_potential = (1 / base_weight) * path_potential
        return weighted_cost + 0.3 * weighted_potential - 0.15 * hub_penalty + 0.2 * (1 - global_connectivity)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
