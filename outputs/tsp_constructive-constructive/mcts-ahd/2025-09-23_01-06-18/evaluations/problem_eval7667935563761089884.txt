def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if avg_distance == 0:
            return destination_node
        threshold = 1.2 - 0.8 * (len(unvisited_nodes) / len(distance_matrix))
        if direct_distance / avg_distance <= threshold:
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)
    weight = 1.3 - 0.7 * progress_factor

    def heuristic(node):
        local_cost = distance_matrix[current_node][node]
        to_destination = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        global_potential = (to_destination + avg_distance_to_unvisited) / 2
        regret_term = max(distance_matrix[current_node][other] - local_cost for other in unvisited_nodes) if unvisited_nodes else 0
        diversity_bonus = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) + 1e-6)
        variance_factor = (sum((distance_matrix[node][other] - avg_distance_to_unvisited) ** 2 for other in unvisited_nodes) / len(unvisited_nodes)) ** 0.5
        momentum_term = 0.5 * (local_cost - distance_matrix[current_node][node]) if current_node != node else 0
        return (local_cost * weight + global_potential * (1.0 - weight) + 0.4 * regret_term - 0.3 * diversity_bonus - 0.2 * variance_factor + 0.1 * momentum_term)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
