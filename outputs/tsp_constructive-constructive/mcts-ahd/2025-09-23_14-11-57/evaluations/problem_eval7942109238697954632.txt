def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    local_search_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        local_search = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        local_search_scores.append(local_search)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = 0.5 * (remaining_nodes / total_nodes)
    local_search_weight = 0.5 + 0.5 * (1.0 - (remaining_nodes / total_nodes))
    exploration_prob = 0.3 + 0.7 * (1.0 - (remaining_nodes / total_nodes))

    if np.random.rand() < exploration_prob:
        scores = [
            regret_weight * regret + local_search_weight * local_search
            for regret, local_search in zip(regrets, local_search_scores)
        ]
    else:
        scores = distances

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
