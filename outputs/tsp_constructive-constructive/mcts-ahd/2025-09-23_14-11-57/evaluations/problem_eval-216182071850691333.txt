def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        combined_distance = immediate_distance + 0.2 * future_potential
        distances.append(combined_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

    if regrets:
        max_regret = max(regrets)
        normalized_regrets = [r / max_regret if max_regret != 0 else 0 for r in regrets]
    else:
        normalized_regrets = [0] * len(regrets)

    avg_distance = sum(distances) / len(distances) if distances else 0
    normalized_distances = [d / avg_distance if avg_distance != 0 else 0 for d in distances]

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = 0.3 * (remaining_nodes / total_nodes)
    distance_weight = 0.7 * (1 - remaining_nodes / total_nodes)

    scores = [distance_weight * nd + regret_weight * nr for nd, nr in zip(normalized_distances, normalized_regrets)]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
