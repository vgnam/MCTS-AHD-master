import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Dynamic temperature for probabilistic selection
    temperature = 1.0 - progress
    local_density = 1.0 / (1.0 + sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))

    # Adaptive weights with temperature influence
    short_term_weight = 0.4 + 0.3 * progress - 0.2 * local_density
    long_term_weight = 0.4 - 0.2 * progress + 0.3 * local_density
    neighborhood_weight = 0.4 - 0.1 * progress + 0.2 * local_density

    candidate_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]

        # Neighborhood centrality with progress-based adjustment
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_score = 1.0 / (1.0 + sum(distance_matrix[node][n] for n in remaining) / len(remaining))
            detour_penalty = max(0, (immediate_distance + distance_matrix[node][destination_node] - global_estimate) / global_estimate)
        else:
            neighborhood_score = 0
            detour_penalty = 0

        # Combined score with temperature-adjusted components
        score = (short_term_weight * immediate_distance +
                 long_term_weight * global_estimate +
                 neighborhood_weight * (1 - neighborhood_score) +
                 0.5 * detour_penalty)
        candidate_scores.append((node, score))

    # Simulated annealing-like selection
    if temperature > 0.1:
        # Calculate probabilities using softmax with temperature
        max_score = max(score for _, score in candidate_scores)
        probs = [math.exp((max_score - score) / temperature) for _, score in candidate_scores]
        total_prob = sum(probs)
        probs = [p / total_prob for p in probs]

        # Select based on probabilities
        selected_node = random.choices([node for node, _ in candidate_scores], weights=probs, k=1)[0]
    else:
        # Greedy selection when temperature is low
        selected_node = min(candidate_scores, key=lambda x: x[1])[0]

    return next_node
