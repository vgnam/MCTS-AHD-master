def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.6 if remaining_nodes > 2 else 0.4
    future_weight = 0.4 if remaining_nodes > 2 else 0.6
    penalty_factor = 0.3

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_future_distance = 0
        revisit_penalty = penalty_factor * immediate_distance

        if remaining_nodes > 1:
            next_nodes = [n for n in unvisited_nodes if n != node]
            avg_future_distance = sum(distance_matrix[node][n] for n in next_nodes) / len(next_nodes)

        combined_score = immediate_weight * immediate_distance + future_weight * avg_future_distance + revisit_penalty

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
