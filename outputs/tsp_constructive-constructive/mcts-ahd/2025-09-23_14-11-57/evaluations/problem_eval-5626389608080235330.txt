def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    adjusted_progress = 1 - (1 - progress_factor) ** 3  # Stronger non-linear progress scaling

    # Calculate node centrality and connectivity
    node_centralities = []
    node_connectivities = []
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in range(total_nodes))
        centrality = total_distance / (total_nodes - 1)
        connectivity = sum(1 for other in range(total_nodes) if distance_matrix[node][other] < (sum(distance_matrix[node]) / total_nodes))
        node_centralities.append(centrality)
        node_connectivities.append(connectivity)

    # Pheromone-inspired exploration factor
    pheromone_factor = [0.5 + (0.5 * (1 - progress_factor)) for _ in unvisited_nodes]
    for i, node in enumerate(unvisited_nodes):
        pheromone_factor[i] *= (1 + (node_connectivities[i] / total_nodes))

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with stronger progress influence
        distance_weight = (1 - adjusted_progress) * 0.6 + 0.4
        future_weight = adjusted_progress * 0.7 + 0.3
        centrality_weight = 0.3 * (1 - adjusted_progress)
        connectivity_weight = 0.2 * adjusted_progress

        # Combined score with pheromone influence
        combined_score = (distance_weight * immediate_distance) + \
                        (future_weight * (1 / (1 + future_distance))) + \
                        (centrality_weight * (1 / (1 + node_centralities[i]))) + \
                        (connectivity_weight * node_connectivities[i]) - \
                        (0.5 * pheromone_factor[i] * (1 / (1 + immediate_distance)))

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_node]

    return next_node
