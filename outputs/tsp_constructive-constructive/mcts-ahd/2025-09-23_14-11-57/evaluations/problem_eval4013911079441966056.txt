import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 - math.exp(-0.5 * (total_nodes - remaining_nodes) / total_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            penalty = (sum(distance_matrix[current_node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)) ** 2 if progress > 0.7 else 0
        else:
            avg_remaining_dist = 0
            penalty = 0

        immediate_weight = (1 - progress_factor) ** 2
        future_weight = progress_factor ** 2

        weighted_score = immediate_weight * immediate_distance + future_weight * future_potential + penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
