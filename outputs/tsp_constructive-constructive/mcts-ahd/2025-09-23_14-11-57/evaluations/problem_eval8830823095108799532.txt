importance, while penalizing nodes with high revisitation risk or low centrality to avoid cycles and improve path coherence.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic priority weights
    exploration_weight = max(0.2, 0.5 * (remaining_nodes / total_nodes))
    exploitation_weight = 1.0 - exploration_weight
    centrality_weight = 0.3 * (1.0 - (remaining_nodes / total_nodes))

    # Calculate node centrality (average distance to all other nodes)
    centrality = []
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node]) / total_nodes
        centrality.append(avg_distance)

    # Normalize centrality (lower is better)
    max_centrality = max(centrality) if centrality else 1.0
    normalized_centrality = [1.0 - (c / max_centrality) if max_centrality > 0 else 1.0 for c in centrality]

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Dynamic learning rate based on traversal progress
        learning_rate = 0.2 + 0.8 * (1.0 - remaining_nodes / total_nodes)

        # Penalize nodes with high revisitation risk or low centrality
        revisit_penalty = 0.1 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.3 else 0
        centrality_penalty = 0.1 * (1.0 - normalized_centrality[i])

        # Combined score with dynamic weights
        combined_score = (exploration_weight * immediate_distance +
                         exploitation_weight * future_potential -
                         centrality_weight * normalized_centrality[i]) * learning_rate - revisit_penalty - centrality_penalty

        scores.append(combined_score)

    # Select node with minimal score
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
