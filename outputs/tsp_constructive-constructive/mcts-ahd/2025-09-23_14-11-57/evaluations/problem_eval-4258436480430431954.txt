def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.3 if remaining_nodes > 3 else 0.7
    future_weight = 0.7 if remaining_nodes > 3 else 0.3

    node_degrees = [sum(1 for d in distance_matrix[node] if d > 0) for node in unvisited_nodes]
    max_degree = max(node_degrees) if node_degrees else 1
    degree_weights = [(d / max_degree) for d in node_degrees]

    scores = []
    for i, node in enumerate(unvisited_nodes):
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        penalty = 0.3 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.5 else 0
        memory_factor = 0.2 * degree_weights[i]

        combined_score = immediate_weight * current_to_node + future_weight * total_increase + penalty + memory_factor
        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
