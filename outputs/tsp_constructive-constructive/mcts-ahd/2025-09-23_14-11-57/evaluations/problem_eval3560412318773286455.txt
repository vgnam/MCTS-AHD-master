def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    # Adaptive weight factors
    distance_weight = 0.5 + 0.3 * (1 - progress)
    future_weight = 0.3 + 0.5 * progress
    centrality_weight = 0.2 * (1 - progress)
    exploration_weight = 0.3 * (1 - progress)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Normalized metrics
        norm_immediate = immediate_distance / max(distance_matrix[current_node])
        norm_future = future_distance / max(distance_matrix[node])
        norm_centrality = node_centrality / max(sum(row) for row in distance_matrix)

        # Dynamic exploration bonus
        exploration_bonus = (remaining_nodes / total_nodes) * (1 - norm_centrality)

        # Multi-objective score
        combined_score = (distance_weight * norm_immediate) + \
                        (future_weight * norm_future) + \
                        (centrality_weight * (1 - norm_centrality)) + \
                        (exploration_weight * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
