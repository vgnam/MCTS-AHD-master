importance" metric, while using a non-linear penalty function to discourage revisiting nearby nodes, with weights adjusted based on the remaining nodes and a novel "exploration factor" that encourages global optimization early in the search.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    proximity_potentials = []
    node_importances = []
    penalties = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate proximity potential
        proximity_potential = (immediate_distance + future_potential) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        proximity_potentials.append(proximity_potential)

        # Calculate node importance (novel metric)
        node_importance = (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) if unvisited_nodes else 0
        node_importances.append(node_importance)

        # Non-linear penalty function
        penalty = 0.2 * (1.0 / (immediate_distance + 1e-6)) ** 2 if immediate_distance < 0.5 else 0
        penalties.append(penalty)

    # Dynamic adaptive weights with exploration factor
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 1.0 - (remaining_nodes / total_nodes) ** 2
    regret_weight = 0.5 * exploration_factor + 0.3
    distance_weight = 0.4 * exploration_factor + 0.5
    proximity_weight = 0.2 * exploration_factor + 0.2
    importance_weight = 0.3 * exploration_factor

    # Combine weighted scores with penalty
    scores = [
        regret_weight * regret + distance_weight * distance + proximity_weight * potential + importance_weight * importance - penalty
        for regret, distance, potential, importance, penalty in zip(regrets, distances, proximity_potentials, node_importances, penalties)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
