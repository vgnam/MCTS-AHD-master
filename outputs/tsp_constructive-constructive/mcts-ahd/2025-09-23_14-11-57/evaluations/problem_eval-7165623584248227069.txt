import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = remaining_nodes / total_nodes

    # Dynamic neighborhood density factor (inverted)
    local_density = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    # Inverted adaptive weights
    short_term_weight = 0.7 - 0.5 * progress + 0.3 * local_density
    long_term_weight = 0.3 + 0.4 * progress - 0.2 * local_density
    neighborhood_weight = 0.5 - 0.3 * progress + 0.2 * local_density

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]

        # Neighborhood centrality score (inverted)
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_score = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
            detour_penalty = max(0, (immediate_distance + distance_matrix[node][destination_node] - global_estimate) / global_estimate)
        else:
            neighborhood_score = 0
            detour_penalty = 0

        # Combined score with inverted components
        score = (short_term_weight * immediate_distance +
                 long_term_weight * global_estimate +
                 neighborhood_weight * neighborhood_score +
                 0.5 * detour_penalty)
        scores.append(score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
