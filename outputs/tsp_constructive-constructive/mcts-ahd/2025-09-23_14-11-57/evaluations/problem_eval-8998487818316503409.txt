def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    progress = 1 - remaining_nodes / (total_nodes - 1) if (total_nodes - 1) > 0 else 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Dynamic weights with centrality influence
        distance_weight = 0.5
        future_weight = 0.5

        # Calculate penalty if progress > 70%
        if progress > 0.7 and remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            penalty = avg_remaining_dist ** 2
        else:
            penalty = 0

        # Centrality-aware score
        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_distance) + \
                         (0.1 * node_centrality) + penalty

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
