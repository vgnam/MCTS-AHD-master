def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_degree = sum(1 for d in distance_matrix[node] if d > 0 and d < float('inf'))
        path_diversity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        distance_weight = 0.7 - 0.3 * (node_degree / total_nodes)
        future_weight = 0.3 + 0.2 * progress
        diversity_weight = 0.1 + 0.2 * progress

        exploration_bonus = (1 / (1 + immediate_distance)) * (node_degree / total_nodes)

        if progress > 0.5:
            reconsideration_penalty = (path_diversity / (sum(distance_matrix[current_node]) / (total_nodes - 1))) * (1 - progress)
        else:
            reconsideration_penalty = 0

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (diversity_weight * path_diversity) + \
                         reconsideration_penalty - \
                         (0.3 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
