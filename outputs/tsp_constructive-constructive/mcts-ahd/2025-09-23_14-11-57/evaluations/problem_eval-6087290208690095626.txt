importance, using a hybrid scoring system that combines normalized metrics with a penalty for node centrality to encourage diverse paths while maintaining efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        normalized_centrality = node_centrality / max(distance_matrix[node]) if max(distance_matrix[node]) != 0 else 0

        distance_weight = 0.5 - (0.3 * progress) + (0.1 * normalized_centrality)
        future_weight = 0.3 + (0.4 * progress) - (0.2 * normalized_centrality)
        exploration_weight = 0.2 + (0.5 * (1 - progress))

        exploration_penalty = (1 - normalized_centrality) * (remaining_nodes / total_nodes)
        future_bonus = (1 / (1 + future_distance)) * (1 + (0.5 * progress))

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 - future_bonus)) + \
                         (exploration_weight * exploration_penalty)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
