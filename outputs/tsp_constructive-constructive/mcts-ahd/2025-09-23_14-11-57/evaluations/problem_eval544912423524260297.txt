def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    connectivity_scores = []
    proximity_potentials = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) / distance_matrix[current_node][node] if distance_matrix[current_node][node] > 0 else 0
        else:
            regret = 0
        regrets.append(regret)

        connectivity_score = (immediate_distance + future_connectivity) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        connectivity_scores.append(connectivity_score)

        proximity_potential = (immediate_distance + future_connectivity) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        proximity_potentials.append(proximity_potential)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = max(0.2, 0.7 * (remaining_nodes / total_nodes))
    regret_weight = max(0.1, 0.6 * (remaining_nodes / total_nodes))
    connectivity_weight = 1.0 - distance_weight - regret_weight
    proximity_weight = max(0.1, 0.4 * (remaining_nodes / total_nodes))

    scores = [
        distance_weight * distance + regret_weight * regret + connectivity_weight * connectivity + proximity_weight * potential
        for distance, regret, connectivity, potential in zip(distances, regrets, connectivity_scores, proximity_potentials)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
