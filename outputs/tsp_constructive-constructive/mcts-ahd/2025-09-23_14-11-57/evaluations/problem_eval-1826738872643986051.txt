def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weighted_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = immediate_distance + node_to_dest

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, immediate_distance - second_best)
        else:
            regret = 0

        penalty = 0.1 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.5 else 0
        weighted_score = 0.7 * immediate_distance + 0.3 * total_increase + regret - penalty
        weighted_scores.append(weighted_score)

    min_score = min(weighted_scores)
    candidates = [i for i, score in enumerate(weighted_scores) if score == min_score]

    if len(candidates) > 1:
        regrets = []
        for node in unvisited_nodes:
            other_nodes = [n for n in unvisited_nodes if n != node]
            if other_nodes:
                second_best = min(distance_matrix[current_node][n] for n in other_nodes)
                regret = max(0, distance_matrix[current_node][node] - second_best)
            else:
                regret = 0
            regrets.append(regret)
        secondary_regrets = [regrets[i] for i in candidates]
        selected_index = candidates[secondary_regrets.index(max(secondary_regrets))]
    else:
        selected_index = candidates[0]

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
