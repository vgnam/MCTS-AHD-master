def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))

        phase_factor = (progress ** 2) if progress <= 0.5 else (1 - (1 - progress) ** 2)
        distance_weight = 0.7 - 0.5 * phase_factor
        future_weight = 0.3 + 0.5 * phase_factor

        exploration_bonus = (node_centrality / avg_distance) * (1 - progress) * (1 / (1 + immediate_distance))

        penalty = 0
        if progress > 0.7:
            penalty = (sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)) ** 2

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_distance) + \
                         penalty - \
                         (0.3 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
