importance.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality_weight = (node_centrality / max(distance_matrix[node])) if max(distance_matrix[node]) != 0 else 0

        exploration_weight = (1 - progress_factor) * 0.5 + 0.5 + (0.3 * centrality_weight)
        exploitation_weight = progress_factor * 0.7 + 0.3 - (0.2 * centrality_weight)

        exploration_score = (1 / (1 + immediate_distance)) * exploration_weight
        exploitation_score = (1 / (1 + future_distance)) * exploitation_weight

        penalty = (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) ** 1.5 if progress_factor > 0.6 else 0

        combined_score = (exploration_score + exploitation_score) + (0.5 * penalty)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
