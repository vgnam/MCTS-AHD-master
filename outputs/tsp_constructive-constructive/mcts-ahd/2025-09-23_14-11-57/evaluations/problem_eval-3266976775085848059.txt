def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_cost = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    temperature = 1.0 / (1.0 + 2.0 * progress)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            global_cost = sum(min(distance_matrix[node][n] for n in remaining_nodes if n != node) for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = sum(distance_matrix[current_node][n] for n in remaining_nodes) * (progress ** 2)
            diversity_term = sum(distance_matrix[node][n] for n in remaining_nodes if n not in [current_node, destination_node]) / len(remaining_nodes)
        else:
            global_cost = 0
            revisit_penalty = 0
            diversity_term = 0

        weighted_cost = (1 - temperature) * current_to_node + temperature * global_cost + revisit_penalty + 0.2 * diversity_term

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            best_node = node

    return next_node
