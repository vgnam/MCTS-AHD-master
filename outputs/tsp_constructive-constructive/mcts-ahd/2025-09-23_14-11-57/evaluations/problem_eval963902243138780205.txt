def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate base metrics
    immediate_distances = []
    future_potentials = []
    connectivities = []
    regrets = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        immediate_distances.append(immediate_distance)
        future_potentials.append(future_potential)

        # Calculate connectivity (average distance to other unvisited nodes)
        if remaining_nodes > 1:
            connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            connectivity = 0
        connectivities.append(connectivity)

        # Calculate regret (difference between best and second-best immediate distance)
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, immediate_distance - second_best)
        else:
            regret = 0
        regrets.append(regret)

    # Phase-based adaptive weights
    if remaining_nodes > total_nodes * 0.7:  # Exploration phase
        immediate_weight = 0.5
        future_weight = 0.2
        connectivity_weight = 0.2
        regret_weight = 0.1
    elif remaining_nodes > total_nodes * 0.3:  # Transition phase
        immediate_weight = 0.3
        future_weight = 0.3
        connectivity_weight = 0.3
        regret_weight = 0.1
    else:  # Exploitation phase
        immediate_weight = 0.2
        future_weight = 0.2
        connectivity_weight = 0.4
        regret_weight = 0.2

    # Combine weighted scores
    scores = [
        immediate_weight * immediate +
        future_weight * future +
        connectivity_weight * connectivity +
        regret_weight * regret
        for immediate, future, connectivity, regret in zip(immediate_distances, future_potentials, connectivities, regrets)
    ]

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
