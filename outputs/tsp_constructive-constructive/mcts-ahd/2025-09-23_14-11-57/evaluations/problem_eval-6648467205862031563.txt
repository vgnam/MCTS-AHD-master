def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    # Calculate node centrality (average distance to all other nodes)
    node_centralities = []
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in range(total_nodes))
        centrality = total_distance / (total_nodes - 1)
        node_centralities.append(centrality)

    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Adaptive weight adjustment
        distance_weight = 0.5 * (1 - progress_factor) + 0.5
        future_weight = 0.4 * progress_factor + 0.6
        centrality_weight = 0.3 * (1 - progress_factor)

        # Dynamic exploration bonus
        exploration_bonus = (1 / (1 + immediate_distance)) * (progress_factor) * \
                          (1 / (1 + node_centralities[i]))

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_distance) + \
                         (centrality_weight * (1 / (1 + node_centralities[i]))) - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
