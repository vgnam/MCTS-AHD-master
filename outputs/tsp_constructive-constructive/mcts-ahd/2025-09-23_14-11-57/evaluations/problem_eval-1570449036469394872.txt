def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.7
    base_future_weight = 0.3

    # Adaptive weighting based on remaining nodes and distance to destination
    distance_to_destination = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)

    # Adjust weights: prioritize future potential when close to destination
    distance_factor = distance_to_destination / max_distance
    immediate_weight = base_immediate_weight * (1 - distance_factor)
    future_weight = base_future_weight * (1 + distance_factor)

    # Normalize weights
    total_weight = immediate_weight + future_weight
    immediate_weight /= total_weight
    future_weight /= total_weight

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        combined_score = immediate_weight * immediate_distance + future_weight * future_potential
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
