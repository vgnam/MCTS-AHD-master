import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate inverse distances for softmax probability
    inv_distances = []
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        # Combine inverse distances with a balance factor
        inv_dist = (1 / (current_to_node + 1e-6)) * (1 / (node_to_dest + 1e-6))
        inv_distances.append(inv_dist)

    # Convert to probabilities using softmax
    exp_dist = np.exp(inv_distances)
    probs = exp_dist / np.sum(exp_dist)

    # Select node based on probabilities
    next_node = np.random.choice(list(unvisited_nodes), p=probs)

    return next_node
