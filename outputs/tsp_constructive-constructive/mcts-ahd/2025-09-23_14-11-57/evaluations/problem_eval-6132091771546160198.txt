import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    temperature = max(0.1, 1.0 - 0.1 * len(unvisited_nodes))  # Dynamic temperature decay
    weights = []
    total_weight = 0.0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]

        # Local search component: average distance to neighboring nodes
        neighbors = [n for n in unvisited_nodes if n != node]
        if neighbors:
            avg_local_distance = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            avg_local_distance = immediate_distance

        # Combined weight with temperature and local search
        weight = 1.0 / (immediate_distance + 0.3 * global_estimate + temperature * avg_local_distance)
        weights.append(weight)
        total_weight += weight

    if total_weight == 0:
        return random.choice(unvisited_nodes)

    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
