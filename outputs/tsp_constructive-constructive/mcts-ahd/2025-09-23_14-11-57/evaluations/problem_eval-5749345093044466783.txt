def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, distance_matrix[current_node][node] - second_best)
        else:
            regret = 0
        regrets.append(regret)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - remaining_nodes) / total_nodes
    temperature = 1 - visited_ratio

    weighted_scores = []
    for regret, distance in zip(regrets, distances):
        regret_score = (regret / (sum(regrets) + 1e-6)) if sum(regrets) > 0 else 0
        distance_score = (distance / (sum(distances) + 1e-6)) if sum(distances) > 0 else 0
        hybrid_score = (0.5 * regret_score + 0.5 * distance_score) * (1 - temperature) + (0.3 * regret_score + 0.7 * distance_score) * temperature
        weighted_scores.append(hybrid_score)

    probabilities = [math.exp(-score / temperature) for score in weighted_scores]
    probabilities = [p / sum(probabilities) for p in probabilities]
    next_node_index = random.choices(range(len(unvisited_nodes)), weights=probabilities)[0]
    next_node = list(unvisited_nodes)[next_node_index]

    return next_node
