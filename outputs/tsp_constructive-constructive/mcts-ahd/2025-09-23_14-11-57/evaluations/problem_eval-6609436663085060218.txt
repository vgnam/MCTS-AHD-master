def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    dynamic_weight = 0.6 - 0.4 * progress
    immediate_weight = 0.6 if len(unvisited_nodes) > 2 else 0.8
    future_weight = 0.4 if len(unvisited_nodes) > 2 else 0.2

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        penalty = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if progress > 0.5 else 0
        combined_score = immediate_weight * immediate_distance + dynamic_weight * future_weight * future_potential + penalty
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
