def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    proximity_weight = 0.9 - 0.8 * (total_nodes / (total_nodes + len(unvisited_nodes)))
    efficiency_weight = 1 - proximity_weight

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Non-linear penalty function
        penalty = 0.2 * (current_to_node ** 2) if current_to_node < 0.3 else 0

        # Dynamic weighted score
        score = proximity_weight * current_to_node + efficiency_weight * total_increase - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
