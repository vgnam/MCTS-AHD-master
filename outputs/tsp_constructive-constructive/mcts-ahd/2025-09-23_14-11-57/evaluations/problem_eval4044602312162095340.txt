importance scores that combine local regret, global distance, and path coherence with dynamic weights, while introducing a novel "node potential" metric that evaluates each node's contribution to the overall tour efficiency, particularly emphasizing connectivity and directionality in the middle stages of the tour.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    node_potentials = []
    for node in unvisited_nodes:
        # Calculate node potential: combination of local and global factors
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, immediate_distance - second_best)
        else:
            regret = 0

        # Calculate path coherence
        if len(unvisited_nodes) > 1:
            avg_distance = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m) / (len(unvisited_nodes) * (len(unvisited_nodes) - 1))
            coherence = (immediate_distance + future_potential) / (1 + avg_distance)
        else:
            coherence = 1.0

        # Calculate node importance: connectivity and centrality
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * avg_distance) if len(unvisited_nodes) > 1 else 1
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weight adjustment
        progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
        regret_weight = max(0.1, 0.8 - 0.6 * progress)
        distance_weight = 0.4 + 0.6 * progress
        coherence_weight = min(0.7, 0.2 + 0.5 * progress)
        connectivity_weight = 0.3 * (1 - progress)
        centrality_weight = 0.2 * progress

        # Combined potential
        potential = (
            regret_weight * regret +
            distance_weight * immediate_distance +
            coherence_weight * coherence +
            connectivity_weight * connectivity +
            centrality_weight * centrality
        )
        node_potentials.append(potential)

    # Select node with minimum potential (most favorable)
    min_potential = min(node_potentials)
    selected_index = node_potentials.index(min_potential)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
