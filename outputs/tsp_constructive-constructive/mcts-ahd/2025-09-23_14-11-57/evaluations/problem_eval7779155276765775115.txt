def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
        else:
            min_remaining_dist = 0

        score = current_to_node + 0.5 * min_remaining_dist
        scores.append(score)

    if len(scores) > 0:
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - s) / (max_score - min_score) if max_score != min_score else 1.0 for s in scores]
        probabilities = [s / sum(normalized_scores) for s in normalized_scores]
        next_node = np.random.choice(unvisited_nodes, p=probabilities)
    else:
        next_node = destination_node

    return next_node
