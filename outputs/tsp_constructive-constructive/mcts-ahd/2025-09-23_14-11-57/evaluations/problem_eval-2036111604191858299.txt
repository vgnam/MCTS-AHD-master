importance metric based on betweenness centrality, and a memory-based penalty that adapts with path length, creating a more adaptive and explorative search strategy.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_importance = sum(1 / (1 + d) for d in distance_matrix[node]) / (total_nodes - 1)
        avg_importance = sum(sum(1 / (1 + d) for d in row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))

        phase_factor = (progress ** 1.5) if progress <= 0.6 else (1 - (1 - progress) ** 1.5)
        distance_weight = 0.7 - 0.5 * phase_factor
        future_weight = 0.3 + 0.5 * phase_factor

        exploration_bonus = (node_importance / avg_importance) * (1 - progress) * (1 + (2 * (node_importance / max(distance_matrix[node]))))

        revisit_penalty = 0
        if progress > 0.4:
            revisit_count = total_nodes - remaining_nodes - 1
            revisit_penalty = (revisit_count / total_nodes) * (immediate_distance / sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1)))

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         revisit_penalty - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
