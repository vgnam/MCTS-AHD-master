import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Adaptive weights with randomness
    short_term_weight = 0.6 - 0.3 * progress + random.uniform(-0.1, 0.1)
    long_term_weight = 0.3 + 0.4 * progress + random.uniform(-0.1, 0.1)
    nearest_neighbor_weight = 0.3 + 0.2 * progress + random.uniform(-0.1, 0.1)

    # Normalize weights
    total_weight = short_term_weight + long_term_weight + nearest_neighbor_weight
    short_term_weight /= total_weight
    long_term_weight /= total_weight
    nearest_neighbor_weight /= total_weight

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]

        # Nearest-neighbor potential with adaptive lookahead
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            if remaining_nodes > 2:
                # Consider second nearest neighbor for better diversity
                sorted_neighbors = sorted(distance_matrix[node][n] for n in remaining)
                nearest_neighbor_dist = sorted_neighbors[0] + 0.5 * sorted_neighbors[1]
            else:
                nearest_neighbor_dist = min(distance_matrix[node][n] for n in remaining)
        else:
            nearest_neighbor_dist = 0

        # Combined score with progress-based bias
        score = (short_term_weight * immediate_distance +
                 long_term_weight * global_estimate +
                 nearest_neighbor_weight * nearest_neighbor_dist)
        scores.append(score)

    # Probabilistic selection based on rank
    ranked_indices = sorted(range(len(scores)), key=lambda k: scores[k])
    selection_probs = [1.0 / (i + 1) for i in range(len(ranked_indices))]
    total_prob = sum(selection_probs)
    selection_probs = [p / total_prob for p in selection_probs]

    selected_index = random.choices(ranked_indices, weights=selection_probs, k=1)[0]
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
