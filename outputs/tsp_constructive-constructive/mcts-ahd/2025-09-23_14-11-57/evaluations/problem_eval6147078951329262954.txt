def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    weights = []

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
        else:
            min_remaining_dist = 0

        weight_factor = 1.0 / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 1.0
        score = current_to_node + weight_factor * min_remaining_dist
        candidates.append((node, score))

    if not candidates:
        return destination_node

    nodes, scores = zip(*candidates)
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]

    selected_node = random.choices(nodes, weights=normalized_scores, k=1)[0]
    return next_node
