def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            second_best = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_cost = distance_matrix[node][second_best] + distance_matrix[second_best][destination_node]
        else:
            lookahead_cost = 0

        total_score = current_to_node + node_to_dest + 0.3 * lookahead_cost

        if total_score < min_score:
            min_score = total_score
            best_node = node

    return next_node
