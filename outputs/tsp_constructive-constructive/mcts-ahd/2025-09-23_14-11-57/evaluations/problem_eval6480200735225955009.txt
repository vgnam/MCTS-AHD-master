def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    # Calculate total inverse distance for probabilistic selection
    total_inverse_distance = sum(1.0 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        inverse_prob = (1.0 / (immediate_distance + 1e-6)) / total_inverse_distance

        # Best possible lookahead distance
        best_lookahead = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        # Combined score: weighted average of immediate distance and lookahead
        score = 0.4 * immediate_distance + 0.6 * best_lookahead - 0.1 * inverse_prob

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
