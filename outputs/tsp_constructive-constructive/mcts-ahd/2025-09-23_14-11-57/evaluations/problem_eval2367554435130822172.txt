def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Non-linear exploration and exploitation rates
    exploration_rate = 0.2 + 0.8 * (1.0 - progress ** 2)
    exploitation_rate = 1.0 - exploration_rate

    # Calculate node centrality (average distance to all other nodes)
    centrality = []
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node]) / total_nodes
        centrality.append(avg_distance)

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        node_centrality = centrality[i]

        # Dynamic learning rate with non-linear progression
        learning_rate = 0.5 * (1.0 + progress ** 1.5)

        # Adaptive penalty for central nodes to encourage diversification
        penalty = 0.3 * node_centrality if progress > 0.7 else 0

        # Novel scoring equation combining all factors
        combined_score = (exploration_rate * immediate_distance +
                        exploitation_rate * (future_potential + 0.5 * node_centrality)) * learning_rate - penalty

        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
