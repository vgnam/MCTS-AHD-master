import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_rate = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)))
    exploitation_rate = 1.0 - exploration_rate

    # Calculate node centrality as novelty factor
    centrality = []
    for node in unvisited_nodes:
        centrality_score = sum(distance_matrix[node]) / len(distance_matrix[node])
        centrality.append(centrality_score)

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Dynamic learning rate with centrality influence
        learning_rate = 0.3 + 0.7 * (1.0 - remaining_nodes / len(distance_matrix))
        novelty_factor = 0.1 * (centrality[i] / max(centrality)) if max(centrality) > 0 else 0.1

        # Hybrid score with novelty consideration
        combined_score = (exploration_rate * (1.0 / (immediate_distance + 1e-6)) +
                         exploitation_rate * (1.0 / (global_potential + 1e-6)) +
                         novelty_factor) * learning_rate

        scores.append(combined_score)

    selected_index = scores.index(max(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
