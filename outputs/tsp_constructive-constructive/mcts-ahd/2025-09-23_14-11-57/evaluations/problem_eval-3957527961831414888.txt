importance with adaptive weights, while adding a novelty factor based on the node's historical selection frequency and a path diversity bonus to encourage exploring less traversed routes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    # Initialize tracking for historical selection frequency (simulated here)
    selection_history = {node: 0 for node in range(total_nodes)}
    for node in unvisited_nodes:
        selection_history[node] += 1

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Node importance: combination of centrality and historical frequency
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality_weight = (node_centrality / max(distance_matrix[node])) if max(distance_matrix[node]) != 0 else 0
        novelty_factor = 1 / (1 + selection_history[node])

        # Dynamic weights with path diversity bonus
        distance_weight = (1 - progress_factor) * 0.6 + 0.4 - (0.2 * centrality_weight)
        future_weight = progress_factor * 0.5 + 0.5 + (0.1 * centrality_weight)
        novelty_weight = 0.3 * novelty_factor * (1 - progress_factor)

        # Path diversity bonus: encourages visiting nodes less frequently traversed
        path_diversity_bonus = (1 - progress_factor) * novelty_factor * 0.5

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (novelty_weight * centrality_weight) - \
                         (0.5 * path_diversity_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
