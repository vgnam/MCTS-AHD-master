def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        distance_weight = (1 - progress_factor) * 0.6 + 0.4
        future_weight = progress_factor * 0.5 + 0.5

        # Dynamic penalty for revisiting nodes
        revisit_penalty = 0.1 * (1 - (remaining_nodes / total_nodes))

        # Normalized score calculation
        normalized_score = (distance_weight * immediate_distance + future_weight * future_distance) * (1 + revisit_penalty)

        scores.append(normalized_score)

    # Probabilistic selection based on normalized scores
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score + 1e-10) / (max_score - min_score + 1e-10) for score in scores]
    total = sum(normalized_scores)
    probabilities = [score / total for score in normalized_scores]
    selected_index = np.random.choice(len(unvisited_nodes), p=probabilities)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
