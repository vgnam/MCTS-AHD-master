def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    penalty_factor = 0.7 * (len(unvisited_nodes) / len(distance_matrix)) ** 2

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]

        if remaining_nodes:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = penalty_factor * current_to_node * (1 / (len(remaining_nodes) + 1))
        else:
            avg_remaining_dist = 0
            revisit_penalty = 0

        score = (current_to_node + avg_remaining_dist) * (1 + revisit_penalty)
        scores.append((node, score))

    if scores:
        scores.sort(key=lambda x: x[1])
        selected_nodes = [node for node, score in scores[:3]]
        probabilities = [1 / (i + 1) for i in range(len(selected_nodes))]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = np.random.choice(selected_nodes, p=probabilities)
        return next_node
    return next_node
