def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.6
    base_future_weight = 0.4

    # Calculate distance to destination
    distance_to_destination = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)

    # Adaptive weighting based on distance to destination and remaining nodes
    distance_factor = distance_to_destination / max_distance
    proximity_factor = 1 - (remaining_nodes / len(distance_matrix))

    immediate_weight = base_immediate_weight * (1 - distance_factor) * (1 + proximity_factor)
    future_weight = base_future_weight * (1 + distance_factor) * (1 - proximity_factor)

    # Calculate centrality of each node (average distance to other unvisited nodes)
    centrality_scores = []
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        centrality_scores.append(avg_distance)

    # Normalize centrality scores
    max_centrality = max(centrality_scores) if centrality_scores else 1
    normalized_centrality = [c / max_centrality for c in centrality_scores] if max_centrality > 0 else [0 for _ in centrality_scores]

    # Calculate combined score
    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        centrality = normalized_centrality[i]
        combined_score = (immediate_weight * immediate_distance +
                          future_weight * future_potential +
                          (1 - immediate_weight - future_weight) * centrality)
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
