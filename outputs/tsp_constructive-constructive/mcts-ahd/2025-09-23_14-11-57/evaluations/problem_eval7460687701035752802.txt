import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    # Calculate novelty metric based on cumulative distances
    novelty_metric = 0
    for node in unvisited_nodes:
        novelty_metric += sum(distance_matrix[node][n] for n in range(total_nodes) if n != node)
    novelty_metric = 1 / (1 + novelty_metric) if novelty_metric > 0 else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Dynamic weights with sigmoid adjustment
        distance_weight = 0.5 - 0.3 * (1 / (1 + math.exp(-5 * (progress_factor - 0.5))))
        future_weight = 0.2 + 0.3 * (1 / (1 + math.exp(-5 * (progress_factor - 0.5))))
        centrality_weight = 0.3 + 0.2 * (1 / (1 + math.exp(-5 * (progress_factor - 0.5))))

        # Exploration bonus with novelty consideration
        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * \
                           (1 + (1.5 * (node_centrality / max(distance_matrix[node])))) * \
                           (1 + novelty_metric)

        # Sigmoid-weighted score components
        combined_score = (distance_weight * (1 / (1 + math.exp(-5 * (immediate_distance - 1))))) + \
                         (future_weight * (1 / (1 + math.exp(-5 * (future_distance - 1))))) + \
                         (centrality_weight * (1 / (1 + math.exp(-5 * (node_centrality - 1))))) - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
