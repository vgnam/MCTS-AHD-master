def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    proximity_potentials = []
    centralities = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        proximity_potential = (immediate_distance + future_potential) / (1 + avg_distance)
        proximity_potentials.append(proximity_potential)

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        centralities.append(centrality)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = 0.3 + 0.5 * (1 - remaining_nodes / total_nodes)
    distance_weight = 0.6 * (remaining_nodes / total_nodes)
    proximity_weight = 0.4 * (1 - remaining_nodes / total_nodes)
    centrality_weight = 0.2 * (1 - remaining_nodes / total_nodes)

    momentum_factor = 0.1 * (1 - remaining_nodes / total_nodes)

    scores = [
        (regret_weight * regret + distance_weight * distance + proximity_weight * potential + centrality_weight * centrality) *
        (1 + momentum_factor * (1 if i == 0 else 0))
        for i, (regret, distance, potential, centrality) in enumerate(zip(regrets, distances, proximity_potentials, centralities))
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
