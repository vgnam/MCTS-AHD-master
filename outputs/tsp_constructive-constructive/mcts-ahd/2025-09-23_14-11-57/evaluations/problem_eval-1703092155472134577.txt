def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            node_degree = sum(1 for n in remaining_nodes if distance_matrix[node][n] > 0)
            centrality = node_degree / len(remaining_nodes) if remaining_nodes else 0

            dynamic_weight = 0.5 + 0.3 * (1 - progress) * centrality
            penalty = (progress * (1 - centrality)) ** 2 if progress > 0.6 else 0
        else:
            dynamic_weight = 0.5
            penalty = 0

        weighted_score = immediate_distance + dynamic_weight * future_potential + penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
