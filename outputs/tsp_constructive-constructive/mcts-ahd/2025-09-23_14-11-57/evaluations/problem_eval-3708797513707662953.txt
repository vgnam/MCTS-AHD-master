importance score that combines regret, distance, and a novel "connectivity potential" metric (measuring a node's ability to bridge paths based on centrality and future connectivity), with weights that adapt based on remaining nodes and a new "exploration factor" that encourages diversity in early stages and precision in later stages.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    connectivity_potentials = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret: difference between best and second-best options
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate connectivity potential: centrality + future connectivity
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        future_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (1 + future_potential)
        connectivity_potential = (centrality + future_connectivity) / (1 + immediate_distance)
        connectivity_potentials.append(connectivity_potential)

    # Adaptive weights with exploration factor
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = max(0.1, 0.7 * (remaining_nodes / total_nodes))
    regret_weight = exploration_factor * 0.6
    distance_weight = 1.0 - regret_weight - exploration_factor * 0.3
    connectivity_weight = exploration_factor * 0.4

    # Combine weighted scores
    scores = [
        regret_weight * regret + distance_weight * distance + connectivity_weight * potential
        for regret, distance, potential in zip(regrets, distances, connectivity_potentials)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
