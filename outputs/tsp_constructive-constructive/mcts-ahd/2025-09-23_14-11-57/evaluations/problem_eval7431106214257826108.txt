def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        penalty = 0.1 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.5 else 0

        dynamic_weight = 0.6 - 0.4 * progress
        weighted_score = 0.7 * immediate_distance + 0.3 * future_potential + penalty * dynamic_weight

        if weighted_score < best_score:
            best_score = weighted_score
            best_node = node

    return next_node
