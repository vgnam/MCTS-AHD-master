def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)) * 0.5)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Look-ahead: evaluate the best possible next node after 'node'
        best_lookahead_distance = float('inf')
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]
                if lookahead_distance < best_lookahead_distance:
                    best_lookahead_distance = lookahead_distance

        # Weighted score combining distance, potential, and lookahead
        combined_score = (0.4 * immediate_distance +
                          0.3 * future_potential +
                          0.3 * best_lookahead_distance)

        # Apply temperature to introduce stochasticity
        adjusted_score = combined_score * temperature
        scores.append(adjusted_score)

    # Select node with minimum score with probability proportional to score
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score) for s in scores]

    selected_index = normalized_scores.index(max(normalized_scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
