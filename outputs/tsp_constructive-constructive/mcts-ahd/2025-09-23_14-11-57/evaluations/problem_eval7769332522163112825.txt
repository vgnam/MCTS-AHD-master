def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Linear weight adjustment
        distance_weight = 0.5 - (0.3 * (remaining_nodes / total_nodes))
        future_weight = 0.5 + (0.3 * (remaining_nodes / total_nodes))

        # Stronger exploration bonus
        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) ** 2

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_distance) - \
                         (0.6 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
