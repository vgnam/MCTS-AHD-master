def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Dynamic neighborhood density factor
    local_density = 1.0 / (1.0 + sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))

    # Adaptive weights influenced by progress and density
    immediate_weight = 0.5 - 0.2 * progress + 0.2 * local_density
    future_weight = 0.3 + 0.3 * progress - 0.1 * local_density
    neighborhood_weight = 0.4 + 0.2 * progress + 0.1 * local_density

    # Exploration penalty factor
    exploration_factor = 1.0 + 0.3 * (1.0 - (remaining_nodes / total_nodes))

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Neighborhood connectivity score
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_score = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        else:
            neighborhood_score = 0

        # Normalization factors
        avg_immediate = sum(distance_matrix[current_node]) / total_nodes
        avg_future = sum(distance_matrix[node]) / total_nodes

        normalized_immediate = immediate_distance / avg_immediate if avg_immediate > 0 else 0
        normalized_future = future_potential / avg_future if avg_future > 0 else 0

        # Exploration penalty
        penalty = 0.2 * (1.0 / (immediate_distance + 1e-6)) * exploration_factor

        # Combined score
        combined_score = (immediate_weight * normalized_immediate +
                          future_weight * normalized_future +
                          neighborhood_weight * neighborhood_score +
                          penalty)

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
