import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Exponentially increasing long-term weight and quadratically decreasing short-term weight
    short_term_weight = (0.8 - progress ** 2) * 0.5
    long_term_weight = (0.2 + progress ** 3) * 0.8
    nearest_neighbor_weight = 0.2 + 0.3 * (progress ** 0.5)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]

        # Nearest-neighbor potential
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            nearest_neighbor_dist = min(distance_matrix[node][n] for n in remaining)
        else:
            nearest_neighbor_dist = 0

        # Combined score with new weightings
        score = (short_term_weight * immediate_distance +
                 long_term_weight * global_estimate +
                 nearest_neighbor_weight * nearest_neighbor_dist)
        scores.append(score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
