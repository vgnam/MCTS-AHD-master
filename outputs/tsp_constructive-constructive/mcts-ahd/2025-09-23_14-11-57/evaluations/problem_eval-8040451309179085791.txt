def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    penalty_factor = 0.5
    decay_rate = 0.9

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Dynamic penalty based on node's distance to current and its potential
        penalty = penalty_factor * (immediate_distance + global_potential) * (decay_rate ** len(unvisited_nodes))

        # Score balances immediate distance and global potential with dynamic penalty
        score = immediate_distance + 0.7 * global_potential + penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
