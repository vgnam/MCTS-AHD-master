def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    current_density = len(unvisited_nodes) / (len(distance_matrix) - 1) if distance_matrix else 0

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Dynamic weight adjustment based on current density and remaining nodes
        proximity_weight = 0.6 + 0.2 * current_density
        efficiency_weight = 0.4 - 0.2 * current_density

        # Memory-based penalty for recently visited nodes
        penalty = 0.2 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.3 else 0

        # Additional term to encourage exploration of less visited regions
        exploration_term = 0.1 * (1.0 / (sum(distance_matrix[node]) + 1e-6))

        score = (proximity_weight * current_to_node +
                 efficiency_weight * total_increase -
                 penalty +
                 exploration_term)

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
