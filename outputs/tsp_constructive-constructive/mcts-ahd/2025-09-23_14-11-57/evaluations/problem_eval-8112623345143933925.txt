def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.5
    base_future_weight = 0.3
    base_centrality_weight = 0.2

    # Calculate distance to destination and normalize
    distance_to_destination = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)

    # Adaptive weights based on progress
    progress_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2
    immediate_weight = base_immediate_weight * (1 + progress_factor)
    future_weight = base_future_weight * (1 - progress_factor)
    centrality_weight = base_centrality_weight * (1 - progress_factor)

    # Normalize weights
    total_weight = immediate_weight + future_weight + centrality_weight
    immediate_weight /= total_weight
    future_weight /= total_weight
    centrality_weight /= total_weight

    # Calculate centrality: average distance to all other nodes
    centrality_scores = []
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        centrality_scores.append(avg_distance)

    # Normalize centrality scores
    min_centrality = min(centrality_scores) if centrality_scores else 0
    max_centrality = max(centrality_scores) if centrality_scores else 1
    normalized_centrality = [(c - min_centrality) / (max_centrality - min_centrality + 1e-10) for c in centrality_scores]

    # Calculate combined scores
    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        centrality = normalized_centrality[i]
        combined_score = (immediate_weight * immediate_distance +
                          future_weight * future_potential +
                          centrality_weight * (1 - centrality))
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
