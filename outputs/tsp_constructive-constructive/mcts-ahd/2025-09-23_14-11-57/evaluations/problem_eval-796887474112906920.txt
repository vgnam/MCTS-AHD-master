importance scores that combine adaptive weights for regret, distance, and a novel "node centrality" metric (measuring a node's average distance to others), with weights that evolve from exploration-focused (high regret and centrality) to exploitation-focused (low distance and centrality) as nodes are visited. It also incorporates a "path diversity" term to penalize nodes that reduce future options.
}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    centralities = []
    path_diversities = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (immediate_distance - second_best) if immediate_distance > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        centralities.append(centrality)

        path_diversity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0
        path_diversities.append(path_diversity)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = max(0.2, 0.7 * (remaining_nodes / total_nodes))
    distance_weight = 1.0 - regret_weight
    centrality_weight = max(0.1, 0.6 * (remaining_nodes / total_nodes))
    diversity_weight = max(0.1, 0.4 * (remaining_nodes / total_nodes))

    scores = [
        regret_weight * regret + distance_weight * distance + centrality_weight * centrality - diversity_weight * diversity
        for regret, distance, centrality, diversity in zip(regrets, distances, centralities, path_diversities)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
