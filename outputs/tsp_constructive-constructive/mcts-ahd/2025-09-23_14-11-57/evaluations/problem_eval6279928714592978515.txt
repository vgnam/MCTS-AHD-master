def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    # Phase 1: Initial candidate selection based on distance and future potential
    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Dynamic weights based on progress
        distance_weight = 0.6 - 0.4 * progress_factor
        future_weight = 0.4 + 0.2 * progress_factor

        initial_score = (distance_weight * immediate_distance) + (future_weight * (1 / (1 + future_distance)))
        candidates.append((node, initial_score))

    # Select top 3 candidates
    candidates.sort(key=lambda x: x[1])
    top_candidates = [c[0] for c in candidates[:min(3, len(candidates))]]

    # Phase 2: Refine selection with centrality and path diversity
    final_scores = []
    for node in top_candidates:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Dynamic centrality weight
        centrality_weight = 0.3 + 0.4 * progress_factor

        # Path diversity bonus: rewards nodes with unique connection patterns
        diversity_bonus = sum([1 / (1 + distance_matrix[node][n]) for n in unvisited_nodes if n != node]) / (remaining_nodes - 1)

        final_score = (0.5 * immediate_distance) + \
                      (0.3 * (1 / (1 + future_distance))) + \
                      (centrality_weight * (1 / (1 + node_centrality))) + \
                      (0.2 * diversity_bonus)

        final_scores.append(final_score)

    selected_index = final_scores.index(min(final_scores))
    next_node = top_candidates[selected_index]

    return next_node
