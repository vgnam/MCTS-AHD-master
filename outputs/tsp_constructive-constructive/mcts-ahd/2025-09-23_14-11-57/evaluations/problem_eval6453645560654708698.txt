def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_increase = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            dist_range = max_remaining_dist - min_remaining_dist
        else:
            min_remaining_dist = 0
            max_remaining_dist = 0
            dist_range = 0

        dynamic_weight = 0.3 * (remaining_count / (remaining_count + 1))
        weighted_increase = current_to_node + dynamic_weight * (min_remaining_dist + 0.5 * dist_range)

        if weighted_increase < min_weighted_increase:
            min_weighted_increase = weighted_increase
            best_node = node

    return next_node
