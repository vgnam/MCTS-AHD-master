def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, distance_matrix[current_node][node] - second_best)
        else:
            regret = 0
        regrets.append(regret)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - remaining_nodes) / total_nodes
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) if unvisited_nodes else 0
    avg_distance = current_path_length / remaining_nodes if remaining_nodes > 0 else 0

    dynamic_regret_scaling = 1 + (1 - visited_ratio) * (0.7 + 0.3 * (avg_distance / (sum(distance_matrix[0]) / len(distance_matrix[0]))))

    weighted_scores = []
    for regret, distance in zip(regrets, distances):
        normalized_regret = (regret * dynamic_regret_scaling) / (sum(regrets) + 1e-6) if sum(regrets) > 0 else 0
        normalized_distance = distance / (sum(distances) + 1e-6) if sum(distances) > 0 else 0
        weighted_score = (0.6 * normalized_regret + 0.4 * normalized_distance) if remaining_nodes > total_nodes / 2 else (0.4 * normalized_regret + 0.6 * normalized_distance)
        weighted_scores.append(weighted_score)

    min_score = min(weighted_scores)
    candidates = [i for i, score in enumerate(weighted_scores) if score == min_score]

    if len(candidates) > 1:
        candidate_scores = []
        for i in candidates:
            regret = regrets[i]
            distance = distances[i]
            future_regret = sum(max(0, distance_matrix[node][other] - min(distance_matrix[node][n] for n in unvisited_nodes if n != other)) for other in unvisited_nodes if other != list(unvisited_nodes)[i])
            candidate_scores.append(0.6 * (regret / (sum(regrets) + 1e-6)) + 0.4 * (distance / (sum(distances) + 1e-6)) + 0.2 * (future_regret / (len(unvisited_nodes) - 1 + 1e-6)))
        selected_index = candidates[candidate_scores.index(min(candidate_scores))]
    else:
        selected_index = candidates[0]

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
