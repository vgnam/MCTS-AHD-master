def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            node_centrality = sum(distance_matrix[node][n] for n in distance_matrix) / (len(distance_matrix) - 1)
            centrality_weight = 1.0 - (node_centrality / sum(distance_matrix[0]))
            dynamic_penalty_weight = 0.5 if remaining_count > 2 else 0.7
            revisit_penalty = dynamic_penalty_weight * distance_matrix[current_node][node]
        else:
            avg_remaining_dist = distance_matrix[node][destination_node]
            centrality_weight = 1.0
            revisit_penalty = 0

        score = current_to_node + (avg_remaining_dist * centrality_weight) + revisit_penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
