importance later, using inverse exponential decay weights to balance exploration and exploitation, favoring connectivity over proximity in later stages.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    future_diversities = []
    local_densities = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Regret with static scaling
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            other_distances = [distance_matrix[current_node][n] for n in other_nodes]
            second_best = min(other_distances)
            regret = (immediate_distance - second_best) * 0.5
        else:
            regret = 0
        regrets.append(regret)

        # Future diversity: count nodes within 1.5x immediate distance
        future_diversity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * immediate_distance)
        future_diversities.append(future_diversity)

        # Local density: sum of inverse distances to nearby nodes
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        local_density = sum(1 / d for d in nearby_distances) if nearby_distances else 0
        local_densities.append(local_density)

    # Adaptive weights with inverse exponential decay
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = 0.4 / (1 + 0.5 ** remaining_nodes)
    regret_weight = 0.3 * (1 - 0.5 ** remaining_nodes)
    diversity_weight = 0.2 * (1 - 0.3 ** remaining_nodes)
    density_weight = 0.1 * (1 - 0.3 ** remaining_nodes)

    # Combine weighted scores: prioritize distance and diversity early
    scores = [
        distance_weight * distance + regret_weight * regret +
        diversity_weight * diversity + density_weight * density
        for distance, regret, diversity, density in zip(
            distances, regrets, future_diversities, local_densities
        )
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
