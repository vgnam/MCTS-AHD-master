import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    exploration_penalties = []
    diversity_bonuses = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, (distance_matrix[current_node][node] - second_best) * (1.0 + 0.5 * (1.0 - len(unvisited_nodes) / len(distance_matrix))))
        else:
            regret = 0
        regrets.append(regret)

        exploration_penalties.append(0.2 * (1.0 / (immediate_distance + 1e-6)))

        diversity_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        diversity_bonuses.append(diversity_bonus)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = max(0.1, 0.9 * (remaining_nodes / total_nodes))
    distance_weight = 1.0 - regret_weight
    exploration_factor = 1.0 + 0.5 * (1.0 - (remaining_nodes / total_nodes))
    diversity_weight = 0.1 * (1.0 - (remaining_nodes / total_nodes))

    scores = [
        regret_weight * regret + distance_weight * distance - exploration_factor * penalty + diversity_weight * bonus
        for regret, distance, penalty, bonus in zip(regrets, distances, exploration_penalties, diversity_bonuses)
    ]

    if random.random() < 0.2 * (remaining_nodes / total_nodes):
        selected_index = random.randint(0, len(unvisited_nodes) - 1)
    else:
        min_score = min(scores)
        selected_index = scores.index(min_score)

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
