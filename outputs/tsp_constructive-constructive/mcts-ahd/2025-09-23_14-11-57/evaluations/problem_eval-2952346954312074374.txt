def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            sorted_remaining_dists = sorted(distance_matrix[node][n] for n in remaining_nodes)
            weighted_sum = sorted_remaining_dists[0] + 0.5 * sorted_remaining_dists[1]
            degree_penalty = len(remaining_nodes) / len(unvisited_nodes)
        elif len(unvisited_nodes) == 2:
            remaining_node = [n for n in unvisited_nodes if n != node][0]
            weighted_sum = distance_matrix[node][remaining_node]
            degree_penalty = 0.5
        else:
            weighted_sum = 0
            degree_penalty = 0

        score = current_to_node + weighted_sum * (1 - degree_penalty)

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
