def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    attractors = []
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
            attractor = (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) * (1 - progress) ** 2
        else:
            regret = 0
            attractor = 0
        regrets.append(regret)
        attractors.append(attractor)

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    regret_weight = max(0.1, 0.7 * (remaining_nodes / total_nodes))
    attractor_weight = 1.0 - regret_weight

    scores = [regret_weight * regret + attractor_weight * attractor for regret, attractor in zip(regrets, attractors)]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
