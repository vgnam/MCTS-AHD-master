def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    temperature = max(0.1, 1 - progress_factor * 0.8)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality_weight = (node_centrality / max(distance_matrix[node])) if max(distance_matrix[node]) != 0 else 0

        distance_weight = (1 - progress_factor) * 0.8 + 0.2 + (0.1 * centrality_weight)
        future_weight = progress_factor * 0.7 + 0.3 - (0.15 * centrality_weight)

        diversity_bonus = (1 / (1 + node_centrality)) * (remaining_nodes / total_nodes) * (1 + centrality_weight)

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (0.5 * diversity_bonus)

        scores.append(combined_score)

    probabilities = [math.exp(-score / temperature) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    selected_index = random.choices(range(len(unvisited_nodes)), weights=normalized_probs, k=1)[0]
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
