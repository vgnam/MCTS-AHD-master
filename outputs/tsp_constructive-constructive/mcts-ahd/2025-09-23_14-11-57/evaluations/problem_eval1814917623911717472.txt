def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        combined_score = immediate_distance + 0.5 * future_distance

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    if len(unvisited_nodes) > 1:
        remaining_nodes = list(unvisited_nodes)
        remaining_nodes.remove(best_node)
        for candidate in remaining_nodes:
            swap_score = distance_matrix[current_node][candidate] + distance_matrix[candidate][best_node] + distance_matrix[best_node][destination_node]
            if swap_score < best_score:
                best_node = candidate

    return next_node
