def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Dynamic weight based on remaining nodes (prioritize lookahead as tour progresses)
        weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid function
        lookahead_weight = weight
        immediate_weight = 1 - lookahead_weight

        # Look-ahead with penalty for revisiting nodes
        best_lookahead_distance = float('inf')
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]

                # Penalize revisiting nodes in lookahead
                if next_node in unvisited_nodes and next_node != node:
                    lookahead_distance *= 1.2  # Small penalty

                if lookahead_distance < best_lookahead_distance:
                    best_lookahead_distance = lookahead_distance

        # Weighted score with dynamic weights
        score = immediate_weight * immediate_distance + lookahead_weight * best_lookahead_distance

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
