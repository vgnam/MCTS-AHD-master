importance, prioritizing immediate gains in early stages and balancing diversity and efficiency in later stages.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    centralities = []
    continuities = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        centralities.append(centrality)

        continuity = (immediate_distance + future_potential) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        continuities.append(continuity)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_phase = remaining_nodes / total_nodes

    distance_weight = 1.0 - 0.7 * exploration_phase
    regret_weight = 0.5 + 0.5 * exploration_phase
    centrality_weight = 0.3 * exploration_phase
    continuity_weight = 0.7 - 0.5 * exploration_phase

    scores = [
        distance_weight * distance + regret_weight * regret + centrality_weight * centrality + continuity_weight * continuity
        for distance, regret, centrality, continuity in zip(distances, regrets, centralities, continuities)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
