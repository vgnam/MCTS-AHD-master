def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Initialize temperature and cooling rate
    temperature = 1.0
    cooling_rate = 0.99

    # Calculate selection probabilities based on inverse distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    # Avoid division by zero
    if max_distance == min_distance:
        probabilities = [1.0 / len(unvisited_nodes) for _ in unvisited_nodes]
    else:
        normalized_distances = [(max_distance - d) / (max_distance - min_distance) for d in distances]
        probabilities = [d / sum(normalized_distances) for d in normalized_distances]

    # Simulated annealing selection
    selected_index = -1
    for _ in range(100):  # Number of trials
        candidate_index = random.choices(range(len(unvisited_nodes)), weights=probabilities)[0]
        if selected_index == -1 or random.random() < temperature:
            selected_index = candidate_index
        temperature *= cooling_rate

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
