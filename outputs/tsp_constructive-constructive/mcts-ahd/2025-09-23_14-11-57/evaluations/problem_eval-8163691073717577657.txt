def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    immediate_distances = []
    avg_future_distances = []
    revisit_penalties = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        immediate_distances.append(immediate_distance)

        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            avg_future_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = 0.3 * immediate_distance
        else:
            avg_future_distance = 0
            revisit_penalty = 0

        avg_future_distances.append(avg_future_distance)
        revisit_penalties.append(revisit_penalty)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    immediate_weight = max(0.3, 0.7 * (remaining_nodes / total_nodes))
    future_weight = max(0.2, 0.5 * (remaining_nodes / total_nodes))
    revisit_weight = min(0.5, 0.5 * (1 - remaining_nodes / total_nodes))

    scores = [
        immediate_weight * immediate + future_weight * future + revisit_weight * penalty
        for immediate, future, penalty in zip(immediate_distances, avg_future_distances, revisit_penalties)
    ]

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
