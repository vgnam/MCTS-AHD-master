def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            nearest_neighbors = sorted(remaining_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(remaining_nodes))]
            weighted_avg_dist = sum(distance_matrix[node][n] * (1.0 / (i + 1)) for i, n in enumerate(nearest_neighbors)) / len(nearest_neighbors)
            dest_penalty = max(0, 100 - node_to_dest)
        else:
            weighted_avg_dist = 0
            dest_penalty = 0

        exploration_factor = 0.3 * (remaining_count / (remaining_count + 1)) ** 2
        weighted_score = current_to_node + exploration_factor * weighted_avg_dist - 0.15 * dest_penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
