def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    max_centrality = max(sum(row) / (total_nodes - 1) for row in distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        distance_weight = (1 - progress_factor) ** 2 * 0.8 + 0.2
        future_weight = progress_factor ** 1.5 * 0.7 + 0.3

        connectivity_bonus = (node_centrality / max_centrality) * (1 - (remaining_nodes / total_nodes))
        exploration_incentive = (1 / (1 + immediate_distance)) * connectivity_bonus

        diversity_factor = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < immediate_distance * 1.5)
        diversity_bonus = (diversity_factor / remaining_nodes) * 0.5

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.4 * exploration_incentive) + \
                         (0.3 * diversity_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
