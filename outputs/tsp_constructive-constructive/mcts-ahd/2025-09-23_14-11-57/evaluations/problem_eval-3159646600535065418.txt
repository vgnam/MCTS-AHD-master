def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    dynamic_weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid adjustment
    penalty_threshold = 0.8

    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            local_density = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = (local_density ** 2) if progress > penalty_threshold else 0
        else:
            penalty = 0

        weighted_score = immediate_distance + dynamic_weight * future_potential + penalty
        candidates.append((node, weighted_score))

    if not candidates:
        return destination_node

    # Probabilistic selection based on inverse score
    scores = [1 / (score + 1e-6) for _, score in candidates]
    total = sum(scores)
    probs = [s / total for s in scores]
    next_node = random.choices([node for node, _ in candidates], weights=probs, k=1)[0]

    return next_node
