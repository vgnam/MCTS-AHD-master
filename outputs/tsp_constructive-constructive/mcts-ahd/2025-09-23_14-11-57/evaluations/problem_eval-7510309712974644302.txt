def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1.0 - 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Adjusts from greedy to lookahead

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        penalty = 0.1 * (1 / (1 + distance_matrix[current_node][node]))  # Penalty for recently visited nodes

        total_score = immediate_distance + dynamic_weight * lookahead_distance - penalty

        if total_score < best_score:
            best_score = total_score
            best_node = node

    return next_node
