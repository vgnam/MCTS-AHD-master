def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Linear progress metric (0 to 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = (centrality ** 2) * (1 + 2 * progress) if progress > 0.7 else 0
        else:
            penalty = 0

        dynamic_weight = 0.5  # Fixed future potential weight
        weighted_score = immediate_distance + dynamic_weight * future_potential + penalty
        scores.append((node, weighted_score))
        total_score += weighted_score

    if total_score == 0:
        return unvisited_nodes[0]

    probabilities = [(1 / (score + 1e-6)) / sum(1 / (s + 1e-6) for _, s in scores) for _, score in scores]
    next_node = np.random.choice([node for node, _ in scores], p=probabilities)

    return next_node
