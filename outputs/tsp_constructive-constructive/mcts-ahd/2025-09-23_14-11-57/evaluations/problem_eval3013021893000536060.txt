def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 / (1 + math.exp(-5 * (remaining_nodes / total_nodes - 0.5)))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        distance_weight = 0.5 - 0.3 * progress_factor
        future_weight = 0.2 + 0.3 * progress_factor
        centrality_weight = 0.3 + 0.2 * progress_factor

        normalized_centrality = node_centrality / max(distance_matrix[node]) if max(distance_matrix[node]) != 0 else 0
        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * (1 + (2 * normalized_centrality))

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (centrality_weight * (1 / (1 + normalized_centrality))) - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_node]

    return next_node
