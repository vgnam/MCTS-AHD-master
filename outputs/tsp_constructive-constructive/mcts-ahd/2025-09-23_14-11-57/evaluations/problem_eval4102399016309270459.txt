def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Dynamic weights with progress and remaining nodes influence
    immediate_weight = 0.5 - 0.2 * progress + 0.1 * (1.0 / (1.0 + remaining_nodes))
    future_weight = 0.3 + 0.3 * progress - 0.1 * (1.0 / (1.0 + remaining_nodes))
    neighborhood_weight = 0.3 + 0.2 * progress + 0.2 * (1.0 / (1.0 + remaining_nodes))

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Future potential estimation with 2-step lookahead
        if remaining_nodes > 2:
            next_nodes = [n for n in unvisited_nodes if n != node]
            future_potential = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_nodes)
        else:
            future_potential = distance_matrix[node][destination_node]

        # Neighborhood connectivity score
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_score = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        else:
            neighborhood_score = 0

        # Memory penalty to discourage revisiting
        memory_penalty = 0.3 * (1.0 / (immediate_distance + 1e-6)) * (1.0 + progress)

        # Combined score with dynamic components
        combined_score = (immediate_weight * immediate_distance +
                         future_weight * future_potential +
                         neighborhood_weight * neighborhood_score +
                         memory_penalty)

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
