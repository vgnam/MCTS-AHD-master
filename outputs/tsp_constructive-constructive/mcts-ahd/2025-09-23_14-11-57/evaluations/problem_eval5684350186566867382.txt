def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.6 if remaining_nodes > 5 else 0.4
    future_weight = 0.4 if remaining_nodes > 5 else 0.6

    node_degrees = [sum(1 for d in distance_matrix[node] if d > 0) for node in unvisited_nodes]
    closeness_centrality = []
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        closeness_centrality.append(1.0 / (total_distance + 1e-6) if total_distance > 0 else 0)

    max_degree = max(node_degrees) if node_degrees else 1
    max_closeness = max(closeness_centrality) if closeness_centrality else 1
    degree_weights = [1 - (d / max_degree) for d in node_degrees]
    closeness_weights = [c / max_closeness for c in closeness_centrality]

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_potential = 0

        if remaining_nodes > 1:
            next_nodes = [n for n in unvisited_nodes if n != node]
            future_potential = sum(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_nodes) / len(next_nodes)

        penalty = 0.4 * (1.0 / (immediate_distance + 1e-6)) ** 2 if immediate_distance < 0.3 else 0
        memory_factor = 0.2 * (degree_weights[i] + closeness_weights[i]) * remaining_nodes / (remaining_nodes + 1)

        combined_score = immediate_weight * immediate_distance + future_weight * future_potential - penalty + memory_factor
        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
