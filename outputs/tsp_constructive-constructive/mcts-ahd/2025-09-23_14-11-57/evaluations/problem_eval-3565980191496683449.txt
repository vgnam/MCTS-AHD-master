importance scores (calculating node influence as the product of centrality and betweenness), adaptive exploration bonuses that consider both remaining nodes and path history, and a novel selection mechanism that combines weighted scores with a probabilistic component for diversification.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    scores = []
    importance_scores = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        betweenness = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, (remaining_nodes - 1))
        node_importance = node_centrality * betweenness

        distance_weight = 0.4 - 0.2 * progress_factor
        future_weight = 0.3 + 0.2 * progress_factor
        importance_weight = 0.3 + 0.1 * progress_factor

        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * (1 + (2 * (node_importance / max(1, max(distance_matrix[node])))))

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (importance_weight * (1 / (1 + node_importance))) - \
                         (0.6 * exploration_bonus)

        scores.append(combined_score)
        importance_scores.append(node_importance)

    if remaining_nodes > total_nodes // 2:
        selected_index = scores.index(min(scores))
    else:
        ranked_nodes = sorted(range(len(scores)), key=lambda i: scores[i])
        top_candidates = ranked_nodes[:min(3, len(ranked_nodes))]
        probabilities = [importance_scores[i] / sum(importance_scores[i] for i in top_candidates) for i in top_candidates]
        selected_index = np.random.choice(top_candidates, p=probabilities)

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
