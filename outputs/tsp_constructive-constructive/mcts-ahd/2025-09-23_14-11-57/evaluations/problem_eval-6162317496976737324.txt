import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Dynamic temperature for simulated annealing
    temperature = math.exp(-5 * progress)

    # Adaptive weights with temperature influence
    exploration_weight = 0.5 * (1 - progress) + 0.2 * temperature
    exploitation_weight = 0.5 * progress + 0.3 * (1 - temperature)

    # Energy function components
    energy_scores = []
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        long_term_cost = distance_matrix[node][destination_node]

        # Local neighborhood quality
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_quality = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
            detour_factor = max(0, (immediate_cost + distance_matrix[node][destination_node] - long_term_cost) / (long_term_cost + 1e-6))
        else:
            neighborhood_quality = 0
            detour_factor = 0

        # Combined energy function
        energy = (exploration_weight * neighborhood_quality +
                  exploitation_weight * long_term_cost +
                  0.3 * immediate_cost +
                  0.5 * detour_factor)
        energy_scores.append(energy)

    # Probabilistic selection based on energy
    probabilities = [math.exp(-e / temperature) for e in energy_scores]
    sum_prob = sum(probabilities)
    normalized_probs = [p / sum_prob for p in probabilities]

    next_node = random.choices(list(unvisited_nodes), weights=normalized_probs, k=1)[0]
    return next_node
