def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    centralities = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, distance_matrix[current_node][node] - second_best)
        else:
            regret = 0
        regrets.append(regret)

        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        centralities.append(centrality)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1.0 - (remaining_nodes / total_nodes)

    weighted_scores = []
    for regret, distance, centrality in zip(regrets, distances, centralities):
        normalized_regret = regret / (sum(regrets) + 1e-6) if sum(regrets) > 0 else 0
        normalized_distance = distance / (sum(distances) + 1e-6) if sum(distances) > 0 else 0
        normalized_centrality = centrality / (sum(centralities) + 1e-6) if sum(centralities) > 0 else 0
        weighted_score = (0.4 * normalized_distance) + (0.3 * normalized_regret) + (0.3 * normalized_centrality)
        weighted_scores.append(weighted_score)

    if temperature < 0.3:
        selected_index = weighted_scores.index(min(weighted_scores))
    else:
        probabilities = [math.exp(-score / temperature) for score in weighted_scores]
        probabilities = [p / sum(probabilities) for p in probabilities]
        selected_index = numpy.random.choice(len(unvisited_nodes), p=probabilities)

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
