def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    penalty_factor = 0.3

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = penalty_factor * distance_matrix[current_node][node]

            # Dynamic weighting based on remaining distances
            weight_avg = 1.0 / (1.0 + avg_remaining_dist)
            weight_penalty = 1.0 / (1.0 + len(unvisited_nodes))

            # Look-ahead mechanism: consider next two nodes
            if len(remaining_nodes) > 1:
                next_remaining_nodes = remaining_nodes.copy()
                next_node_candidate = min(next_remaining_nodes, key=lambda n: distance_matrix[node][n])
                next_remaining_nodes.remove(next_node_candidate)
                avg_next_dist = sum(distance_matrix[next_node_candidate][n] for n in next_remaining_nodes) / len(next_remaining_nodes)
                lookahead_penalty = penalty_factor * avg_next_dist
            else:
                lookahead_penalty = 0

            score = (current_to_node * (1 - weight_avg)) + (avg_remaining_dist * weight_avg) + (revisit_penalty * weight_penalty) + lookahead_penalty
        else:
            avg_remaining_dist = 0
            revisit_penalty = 0
            lookahead_penalty = 0
            score = current_to_node

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
