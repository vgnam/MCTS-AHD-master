def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            penalty = sum(distance_matrix[current_node][n] for n in remaining_nodes_list) / len(remaining_nodes_list) if progress > 0.5 else 0
        else:
            avg_remaining_dist = 0
            penalty = 0

        distance_weight = 0.7 - 0.5 * progress
        future_weight = 0.3 + 0.5 * progress

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_potential) + \
                         penalty

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
