def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic temperature with sigmoid scaling
    temperature = 1.0 / (1.0 + math.exp(-(remaining_nodes / total_nodes - 0.5) * 10))

    # Adaptive weights based on remaining nodes
    distance_weight = 0.5 + 0.3 * (remaining_nodes / total_nodes)
    potential_weight = 0.3 + 0.2 * (remaining_nodes / total_nodes)
    centrality_weight = 0.2 + 0.1 * (remaining_nodes / total_nodes)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Node centrality with local search: average distance to k-nearest neighbors
        k = min(3, len(unvisited_nodes) - 1)
        nearest_neighbors = sorted(unvisited_nodes, key=lambda x: distance_matrix[node][x])[:k]
        centrality = sum(distance_matrix[node][other] for other in nearest_neighbors) / k

        # Weighted score with dynamic weights
        combined_score = (distance_weight * immediate_distance +
                          potential_weight * future_potential +
                          centrality_weight * centrality)

        # Apply temperature and stochastic adjustment
        adjusted_score = combined_score * temperature
        scores.append(adjusted_score)

    # Normalized selection with softmax
    exp_scores = [math.exp(-s / temperature) for s in scores]
    sum_exp = sum(exp_scores)
    probabilities = [s / sum_exp for s in exp_scores]

    selected_index = numpy.random.choice(len(unvisited_nodes), p=probabilities)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
