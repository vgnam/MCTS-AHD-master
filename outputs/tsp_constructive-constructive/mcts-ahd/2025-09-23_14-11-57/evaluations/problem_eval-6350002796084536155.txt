def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_phase = remaining_nodes / total_nodes

    immediate_weight = 0.5 * (1 + exploration_phase)
    future_weight = 0.5 * (1 - exploration_phase)
    centrality_weight = 0.3 * (1 - exploration_phase)

    novelty_penalty = 0.2 * (1 - exploration_phase)

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        normalized_immediate = immediate_distance / (sum(distance_matrix[current_node]) / total_nodes)
        normalized_future = future_potential / (sum(distance_matrix[node]) / total_nodes)

        node_centrality = sum(distance_matrix[node]) / total_nodes
        normalized_centrality = node_centrality / (sum(sum(row) for row in distance_matrix) / (total_nodes ** 2))

        novelty_factor = 1.0 / (1 + 0.1 * (total_nodes - remaining_nodes))

        combined_score = (immediate_weight * normalized_immediate +
                         future_weight * normalized_future -
                         centrality_weight * normalized_centrality -
                         novelty_penalty * novelty_factor)

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
