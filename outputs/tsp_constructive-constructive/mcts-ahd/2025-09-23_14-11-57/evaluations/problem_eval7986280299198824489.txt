importance" metric derived from the average distances to unvisited nodes, while still penalizing nodes too close to avoid cycles.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('-inf')

    # Calculate dynamic weights based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 0.6 + 0.1 * (10 - remaining_nodes) / 10  # Higher weight when few nodes left
    weight_efficiency = 0.4 - 0.1 * (10 - remaining_nodes) / 10  # Lower weight when few nodes left

    # Calculate average distances to unvisited nodes for node importance
    avg_distances = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        avg_distances[node] = avg_distance

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Novel node importance metric
        node_importance = (current_to_node + node_to_dest) / (avg_distances[node] + 1e-6)

        # Penalize nodes too close to avoid cycles
        penalty = 0.2 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.3 else 0

        # Weighted score with dynamic weights and node importance
        score = (weight_proximity * current_to_node +
                 weight_efficiency * total_increase +
                 0.2 * node_importance) - penalty

        if score > best_score:  # Maximizing score in this version
            best_score = score
            best_node = node

    return next_node
