def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_increase = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalized progress (0 to 1)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            remaining_dists = [distance_matrix[node][n] for n in remaining_nodes]
            avg_remaining_dist = sum(remaining_dists) / len(remaining_dists)
            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in remaining_dists) / len(remaining_dists)
            penalty = variance_remaining_dist * (1 - progress) if progress > 0.5 else 0
        else:
            avg_remaining_dist = 0
            penalty = 0

        dynamic_weight = 1.0 - 0.5 * (1 - math.log10(1 + progress * 9))  # More aggressive logarithmic adjustment
        weighted_increase = current_to_node + dynamic_weight * avg_remaining_dist + penalty

        if weighted_increase < min_weighted_increase:
            min_weighted_increase = weighted_increase
            best_node = node

    return next_node
