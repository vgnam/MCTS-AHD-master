def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    future_potentials = []
    future_diversities = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)
        future_potentials.append(future_potential)

        future_diversity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        future_diversities.append(future_diversity)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = max(0.3, 0.7 * (remaining_nodes / total_nodes))
    potential_weight = max(0.2, 0.5 * (remaining_nodes / total_nodes))
    diversity_weight = 1.0 - (distance_weight + potential_weight)

    scores = [
        distance_weight * distance + potential_weight * potential + diversity_weight * diversity
        for distance, potential, diversity in zip(distances, future_potentials, future_diversities)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
