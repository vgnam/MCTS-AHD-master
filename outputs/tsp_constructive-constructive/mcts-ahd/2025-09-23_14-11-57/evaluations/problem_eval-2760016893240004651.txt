def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_decay = 0.9 ** (remaining_nodes - 1)
    future_scale = 1.1 ** (remaining_nodes - 1)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = 0

        if remaining_nodes > 1:
            next_nodes = [n for n in unvisited_nodes if n != node]
            future_potential = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_nodes)

        centrality_penalty = 0.4 * (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes))
        visit_penalty = 0.3 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.4 else 0
        combined_score = (immediate_decay * immediate_distance) + (future_scale * future_potential) - centrality_penalty - visit_penalty
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
