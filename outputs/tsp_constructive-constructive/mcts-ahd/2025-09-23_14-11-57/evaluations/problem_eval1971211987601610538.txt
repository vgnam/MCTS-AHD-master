def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 / (1 + math.exp(-10 * (remaining_nodes / total_nodes - 0.5)))

    scores = []
    node_selection_counts = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_diversity = len([n for n in unvisited_nodes if distance_matrix[node][n] < immediate_distance * 1.2]) / remaining_nodes
        local_quality = sum(distance_matrix[node]) / (total_nodes - 1)

        distance_weight = (1 - progress_factor) * 0.8 + 0.2
        future_weight = progress_factor * 0.7 + 0.3

        exploration_bonus = (1 / (1 + immediate_distance)) * node_diversity * (1 + 0.1 * local_quality)

        penalty = (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) ** 1.5 if progress_factor > 0.6 else 0

        reinforcement_factor = 1 + 0.1 * node_selection_counts.get(node, 0)

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.5 * exploration_bonus) + \
                         (0.7 * penalty) * reinforcement_factor

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    for node in unvisited_nodes:
        if node == next_node:
            node_selection_counts[node] += 1

    return next_node
