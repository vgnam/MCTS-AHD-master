def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    penalties = []
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) ** 1.5 if distance_matrix[current_node][node] > second_best else 0
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = (centrality ** 2) * (1 - progress) if progress > 0.7 else 0
        else:
            regret = 0
            penalty = 0
        regrets.append(regret)
        penalties.append(penalty)

    remaining_nodes = len(unvisited_nodes)
    regret_weight = max(0.1, 0.8 * (remaining_nodes / total_nodes) * (1 - progress))
    distance_weight = 1.0 - regret_weight
    proximity_bias = 0.2 * (1 - progress)

    scores = [
        (regret_weight * regret + distance_weight * distance + proximity_bias * immediate_distance) + penalty
        for regret, distance, penalty, immediate_distance in zip(regrets, distances, penalties, distances)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
