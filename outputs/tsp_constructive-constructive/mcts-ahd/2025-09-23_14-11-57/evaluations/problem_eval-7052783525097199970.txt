def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    future_diversities = []
    local_densities = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            other_distances = [distance_matrix[current_node][n] for n in other_nodes]
            variance = sum((d - sum(other_distances)/len(other_distances))**2 for d in other_distances) / len(other_distances)
            second_best = min(other_distances)
            regret = (distance_matrix[current_node][node] - second_best) * (1 + variance)
        else:
            regret = 0
        regrets.append(regret)

        future_diversity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * immediate_distance)
        future_diversities.append(future_diversity)

        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        local_density = sum(1 / d for d in nearby_distances) if nearby_distances else 0
        local_densities.append(local_density)

    remaining_nodes = len(unvisited_nodes)
    distance_weight = 0.6 * (0.7 ** remaining_nodes)
    diversity_weight = 0.4 * (0.7 ** remaining_nodes)
    regret_weight = 0.2 * (1 - 0.7 ** remaining_nodes)
    density_weight = 0.1 * (1 - 0.7 ** remaining_nodes)

    scores = [
        distance_weight * distance + diversity_weight * diversity +
        regret_weight * regret + density_weight * density
        for distance, diversity, regret, density in zip(
            distances, future_diversities, regrets, local_densities
        )
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
