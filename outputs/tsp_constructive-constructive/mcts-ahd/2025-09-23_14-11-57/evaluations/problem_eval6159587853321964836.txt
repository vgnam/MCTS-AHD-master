def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1 + remaining_nodes)  # Decreasing temperature over time

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Calculate long-term potential using average of top 3 future options
        future_options = sorted([distance_matrix[node][n] + distance_matrix[n][destination_node]
                               for n in unvisited_nodes if n != node], key=lambda x: x)[:3]
        future_potential = sum(future_options) / len(future_options) if future_options else 0

        # Adaptive penalty based on distance and connectivity
        connectivity_penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.5) / remaining_nodes
        penalty = 0.3 * (1.0 / (immediate_distance + 1e-6) + connectivity_penalty)

        # Combine with temperature for probabilistic selection
        combined_score = (0.5 * immediate_distance + 0.5 * future_potential) - penalty
        scores.append(combined_score)

    # Convert scores to probabilities using softmax with temperature
    exp_scores = [math.exp(-score / temperature) for score in scores]
    total = sum(exp_scores)
    probabilities = [e / total for e in exp_scores]

    # Select node probabilistically
    selected_index = numpy.random.choice(len(unvisited_nodes), p=probabilities)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
