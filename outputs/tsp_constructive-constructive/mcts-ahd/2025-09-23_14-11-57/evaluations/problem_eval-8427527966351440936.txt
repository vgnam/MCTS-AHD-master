def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    exploration_decay = max(0.1, 1 - progress_factor * 2)

    # Calculate node significance (combination of centrality and distance to destination)
    node_significance = []
    for node in unvisited_nodes:
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / (total_nodes - 1)
        destination_distance = distance_matrix[node][destination_node]
        significance = centrality * (1 + (1 / (1 + destination_distance)))
        node_significance.append(significance)

    # Normalize significance scores
    max_sig = max(node_significance) if node_significance else 1
    min_sig = min(node_significance) if node_significance else 0
    normalized_sig = [(sig - min_sig) / (max_sig - min_sig + 1e-6) for sig in node_significance]

    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Adaptive distance weighting
        distance_weight = 0.5 * (1 + math.cos(math.pi * progress_factor))
        future_weight = 1 - distance_weight

        # Probabilistic future estimation
        future_estimate = (future_distance ** 0.7) * (1 + normalized_sig[i])

        # Exploration incentive
        exploration_incentive = exploration_decay * (1 / (1 + immediate_distance)) * (1 - normalized_sig[i])

        combined_score = (distance_weight * immediate_distance) + \
                        (future_weight * future_estimate) + \
                        (0.3 * exploration_incentive)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
