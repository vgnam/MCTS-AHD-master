def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_cost = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalized progress (0 to 1)
    momentum = 0.2  # Base momentum factor

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            future_cost = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            detour_cost = sum(distance_matrix[current_node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = detour_cost * (1 + 0.5 * (progress - 0.5)**2) if progress > 0.5 else 0
        else:
            future_cost = 0
            penalty = 0

        dynamic_weight = 1.0 - 0.5 * progress  # Stronger shift to future cost as progress increases
        momentum_weight = momentum * (1 - progress)  # Reduce momentum influence as progress increases

        weighted_cost = (1 - momentum_weight) * (current_to_node + dynamic_weight * future_cost) + momentum_weight * penalty

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            best_node = node

    return next_node
