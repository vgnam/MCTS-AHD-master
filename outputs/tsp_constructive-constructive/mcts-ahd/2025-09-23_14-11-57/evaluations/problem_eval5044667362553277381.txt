def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            tour_progress = 1 - (remaining_count / total_nodes)
            dynamic_weight = 0.3 * tour_progress + 0.7 * (1 - tour_progress)
            weighted_score = current_to_node + dynamic_weight * centrality
        else:
            weighted_score = current_to_node + node_to_dest

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
