def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    recent_nodes = []

    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 0.6 if remaining_nodes > 3 else 0.4
    weight_efficiency = 1.0 - weight_proximity
    weight_coherence = 0.3

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Path coherence heuristic: evaluates node alignment with tour direction
        if len(recent_nodes) >= 2:
            prev_node = recent_nodes[-1]
            coherence = (distance_matrix[prev_node][current_node] + distance_matrix[current_node][node]) / (distance_matrix[prev_node][node] + 1e-6)
        else:
            coherence = 1.0

        # Dynamic penalty for recent visits
        penalty = 0.3 * (1.0 / (current_to_node + 1e-6)) if node in recent_nodes else 0

        # Heuristic for path efficiency (estimates impact on remaining tour)
        heuristic = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)

        # Combined score with adaptive weights
        score = (weight_proximity * current_to_node +
                 weight_efficiency * total_increase +
                 weight_coherence * (1.0 - coherence) +
                 0.2 * heuristic) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    recent_nodes.append(best_node)
    if len(recent_nodes) > 2:
        recent_nodes.pop(0)

    return next_node
