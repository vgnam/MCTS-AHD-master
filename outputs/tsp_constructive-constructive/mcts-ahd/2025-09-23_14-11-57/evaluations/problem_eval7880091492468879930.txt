def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Dynamic weighting based on remaining nodes
        local_weight = 0.5 + 0.4 * (1.0 - remaining_nodes / len(unvisited_nodes))
        global_weight = 0.5 - 0.4 * (1.0 - remaining_nodes / len(unvisited_nodes))

        # Node attractiveness: balances distance and remaining nodes
        attractiveness = (1.0 / (current_to_node + 1e-6)) * (1.0 + 0.2 * (remaining_nodes / len(unvisited_nodes)))

        # Penalize nodes that are too close or too far
        penalty = 0.1 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.3 else 0
        penalty += 0.2 * (current_to_node / max(distance_matrix[current_node])) if current_to_node > 0.7 else 0

        # Combined score with dynamic weights
        score = (local_weight * current_to_node +
                 global_weight * total_increase +
                 0.3 * attractiveness) - penalty

        if score > best_score:
            best_score = score
            best_node = node

    return next_node
