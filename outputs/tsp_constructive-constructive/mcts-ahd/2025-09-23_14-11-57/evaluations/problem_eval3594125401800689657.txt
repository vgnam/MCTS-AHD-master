def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.4 + (0.3 * (remaining_nodes / len(distance_matrix)))
    future_weight = 0.6 - (0.3 * (remaining_nodes / len(distance_matrix)))
    lookahead_weight = 0.2 * (1 - (remaining_nodes / len(distance_matrix)))

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        lookahead_potential = 0
        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            lookahead_potential = min(distance_matrix[node][n] for n in remaining_unvisited)

        combined_score = (immediate_weight * immediate_distance +
                          future_weight * future_potential +
                          lookahead_weight * lookahead_potential)
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
