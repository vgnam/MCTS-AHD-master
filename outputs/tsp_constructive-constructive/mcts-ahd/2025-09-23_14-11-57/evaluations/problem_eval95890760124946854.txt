def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = max(0.1, 1.0 - 0.2 * (1.0 - remaining_nodes / total_nodes))

    immediate_weight = 0.7 - 0.3 * (1.0 - remaining_nodes / total_nodes)
    future_weight = 0.3 + 0.3 * (1.0 - remaining_nodes / total_nodes)

    node_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        if remaining_nodes > 2:
            next_nodes = [n for n in unvisited_nodes if n != node]
            future_potential = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_nodes)
        else:
            future_potential = distance_matrix[node][destination_node]

        normalized_immediate = immediate_distance / (sum(distance_matrix[current_node]) / total_nodes)
        normalized_future = future_potential / (sum(distance_matrix[node]) / total_nodes)

        memory_penalty = 0.3 * (1.0 / (immediate_distance + 1e-6)) * (1.0 - remaining_nodes / total_nodes)
        combined_score = immediate_weight * normalized_immediate + future_weight * normalized_future - memory_penalty

        node_scores.append((node, combined_score))

    node_scores.sort(key=lambda x: x[1])
    probabilities = [math.exp(-score[1] / temperature) for score in node_scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    selected_index = numpy.random.choice(len(node_scores), p=normalized_probs)
    next_node = node_scores[selected_index][0]

    return next_node
