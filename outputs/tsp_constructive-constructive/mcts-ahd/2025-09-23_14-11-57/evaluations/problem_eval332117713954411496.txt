def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        distance_weight = (1 - progress_factor) * 0.6 + 0.4
        future_weight = progress_factor * 0.5 + 0.5

        # Regret calculation
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            other_distances = [distance_matrix[current_node][n] for n in other_nodes]
            second_best = min(other_distances)
            regret = immediate_distance - second_best
        else:
            regret = 0

        # Exploration bonus
        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes)

        # Density consideration
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        local_density = 1 / (sum(nearby_distances) / len(nearby_distances)) if nearby_distances else 0

        # Combined score
        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.3 * exploration_bonus) + \
                         (0.2 * regret) - \
                         (0.1 * local_density)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
