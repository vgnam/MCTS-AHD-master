importance scores based on betweenness centrality and adaptive exploration bonuses that scale with remaining progress, while maintaining a balance between immediate and future cost minimization through a novel progress-dependent weight adjustment mechanism.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_importance = (sum(distance_matrix[node]) / (total_nodes - 1)) * (1 / (1 + immediate_distance))

        dynamic_weight = 0.5 + 0.3 * progress
        future_weight = 0.5 - 0.3 * progress

        exploration_factor = (1 - progress) * (node_importance / max(distance_matrix[node]))

        if progress > 0.5:
            path_diversity = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
            adjustment_factor = 1 + (path_diversity / max(distance_matrix[current_node]))
        else:
            adjustment_factor = 1

        combined_score = (dynamic_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (0.3 * exploration_factor) - \
                         (0.2 * adjustment_factor)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
