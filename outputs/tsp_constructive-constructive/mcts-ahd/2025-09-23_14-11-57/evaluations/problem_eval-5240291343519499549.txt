def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 1.0 - 0.5 * (1.0 - remaining_nodes / total_nodes)

    scores = []
    for node in unvisited_nodes:
        immediate_reward = -distance_matrix[current_node][node]
        global_reward = -distance_matrix[node][destination_node]

        neighborhood_score = 0.0
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_score = -sum(distance_matrix[node][n] for n in remaining) / len(remaining)

        combined_score = (0.6 * immediate_reward +
                         0.3 * global_reward +
                         0.1 * neighborhood_score) * exploration_factor
        scores.append(combined_score)

    ranked_indices = sorted(range(len(scores)), key=lambda k: scores[k], reverse=True)
    selection_probs = [1.0 / (i + 1) for i in range(len(ranked_indices))]
    total_prob = sum(selection_probs)
    selection_probs = [p / total_prob for p in selection_probs]

    selected_index = random.choices(ranked_indices, weights=selection_probs, k=1)[0]
    next_node = list(unvisited_nodes)[selected_index]
    return next_node
