def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        proximity_weight = 0.8 - 0.1 * (remaining_nodes / len(distance_matrix))
        efficiency_weight = 0.2 + 0.1 * (remaining_nodes / len(distance_matrix))

        # Novel penalty term: scales with distance to destination
        penalty = 0.2 * (node_to_dest / max(distance_matrix[node])) if node_to_dest < 0.7 * max(distance_matrix[node]) else 0

        # Heuristic: reward nodes that reduce the maximum distance in the path
        max_distance = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_reduction = max_distance - current_to_node
        heuristic_reward = 0.1 * max_reduction / (max_distance + 1e-6)

        score = (proximity_weight * current_to_node +
                 efficiency_weight * (current_to_node + node_to_dest) +
                 heuristic_reward - penalty)

        if score > best_score:
            best_score = score
            best_node = node

    return next_node
