import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - remaining_nodes / total_nodes

    # Dynamic temperature for probabilistic selection
    temperature = 1.0 - 0.8 * progress

    # Dynamic neighborhood connectivity factor
    connectivity = sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] < 1.5 * min(distance_matrix[current_node]))

    # Adaptive weights with inverted progress influence
    local_weight = 0.4 + 0.3 * progress - 0.1 * connectivity / len(unvisited_nodes)
    global_weight = 0.4 - 0.2 * progress + 0.2 * connectivity / len(unvisited_nodes)
    connectivity_weight = 0.4 - 0.1 * progress + 0.2 * connectivity / len(unvisited_nodes)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]

        # Neighborhood connectivity score
        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            neighborhood_score = sum(1 for n in remaining if distance_matrix[node][n] < 1.5 * min(distance_matrix[node]))
            detour_factor = max(0, (immediate_distance + global_distance - distance_matrix[current_node][destination_node]) / distance_matrix[current_node][destination_node])
        else:
            neighborhood_score = 0
            detour_factor = 0

        # Combined score with inverted components
        score = (local_weight * immediate_distance +
                 global_weight * global_distance +
                 connectivity_weight * (1 - neighborhood_score / remaining_nodes) +
                 0.5 * detour_factor)

        scores.append(score)

    # Probabilistic selection with temperature scaling
    if temperature > 0:
        exp_scores = [math.exp(-s / temperature) for s in scores]
        total = sum(exp_scores)
        probs = [e / total for e in exp_scores]
        next_node = random.choices(list(unvisited_nodes), weights=probs, k=1)[0]
    else:
        next_node = list(unvisited_nodes)[scores.index(min(scores))]

    return next_node
