def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1 - (len(unvisited_nodes) / total_unvisited) if total_unvisited > 0 else 0
    dynamic_weight = 0.5 + 0.4 * progress

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Exploration bonus: encourages nodes that reduce average distance to remaining unvisited nodes
        exploration_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        exploration_bonus = 0.2 * (1 / (exploration_bonus + 1e-6))

        # Proximity threshold: penalizes nodes too close to avoid cycles
        proximity_penalty = 0.3 * (1 / (current_to_node + 1e-6)) if current_to_node < 0.3 else 0

        # Dynamic weighted score
        score = (dynamic_weight * current_to_node) + ((1 - dynamic_weight) * total_increase) - exploration_bonus - proximity_penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
