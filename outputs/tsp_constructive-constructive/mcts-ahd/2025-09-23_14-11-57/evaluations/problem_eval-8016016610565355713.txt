importance scoring, using a dynamic exploration factor that prioritizes high-impact nodes early while gradually favoring global optimization through a centrality-adjusted distance metric and a progress-dependent weight adjustment system.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality_norm = (node_centrality - min(distance_matrix[node])) / (max(distance_matrix[node]) - min(distance_matrix[node])) if max(distance_matrix[node]) != min(distance_matrix[node]) else 0

        distance_weight = (1 - progress_factor) * 0.8 + 0.2 - (0.15 * centrality_norm)
        future_weight = progress_factor * 0.7 + 0.3 + (0.25 * centrality_norm)

        exploration_factor = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * (1 + centrality_norm)
        importance_score = (node_centrality / (1 + immediate_distance)) * (1 + exploration_factor)

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.5 * importance_score)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
