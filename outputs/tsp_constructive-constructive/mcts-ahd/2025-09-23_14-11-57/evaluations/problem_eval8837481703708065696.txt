def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    immediate_weight = 0.5
    future_weight = 0.3
    revisit_weight = 0.2

    penalty_factor = 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
    scores = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = 0
        revisit_penalty = 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            future_potential = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = penalty_factor * immediate_distance * len(remaining_nodes)

        combined_score = immediate_weight * immediate_distance + future_weight * future_potential + revisit_weight * revisit_penalty
        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
