def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = (total_nodes - remaining_nodes) / total_nodes
    progress_factor = 1 / (1 + math.exp(-10 * (progress - 0.5)))

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_diversity = sum(abs(distance_matrix[node][n] - distance_matrix[current_node][n])
                           for n in unvisited_nodes if n != node) / remaining_nodes

        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality_weight = (centrality / max(distance_matrix[node])) if max(distance_matrix[node]) != 0 else 0

        distance_weight = (1 - progress_factor) * 0.8 + 0.2
        future_weight = progress_factor * 0.7 + 0.3
        diversity_weight = 0.3 * (1 - progress_factor)

        combined_score = (distance_weight * immediate_distance) + \
                        (future_weight * (1 / (1 + future_distance))) + \
                        (diversity_weight * node_diversity)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
