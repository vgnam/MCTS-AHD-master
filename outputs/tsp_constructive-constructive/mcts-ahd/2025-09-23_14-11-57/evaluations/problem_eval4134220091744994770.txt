import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress = 1.0 - remaining_nodes / len(distance_matrix)

    decay_factor = 0.5 ** progress
    penalty_weight = 0.1 + 0.9 * (1.0 - decay_factor)
    lookahead_weight = 0.2 * decay_factor

    scores = []
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        lookahead_cost = 0.0

        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            lookahead_cost = sum(distance_matrix[node][n] for n in remaining) / len(remaining)

        penalty = penalty_weight * immediate_cost
        combined_score = immediate_cost + penalty + lookahead_weight * lookahead_cost
        scores.append(combined_score)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]

    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]

    import random
    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
