def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weighting based on progress
    progress = 1 - (remaining_nodes / (remaining_nodes + 1))
    weight_lookahead = 1 / (1 + math.exp(-10 * (progress - 0.5)))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Look-ahead: evaluate the best possible next node after 'node'
        best_lookahead_distance = float('inf')
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]
                if lookahead_distance < best_lookahead_distance:
                    best_lookahead_distance = lookahead_distance

        # Penalty term: average distance to remaining nodes
        total_penalty = 0
        for remaining_node in unvisited_nodes:
            if remaining_node != node:
                total_penalty += distance_matrix[node][remaining_node]
        avg_penalty = total_penalty / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Weighted score with dynamic weighting and penalty
        score = (1 - weight_lookahead) * immediate_distance + weight_lookahead * best_lookahead_distance + 0.2 * avg_penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
