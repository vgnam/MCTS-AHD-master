def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_increase = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            remaining_dists = [distance_matrix[node][n] for n in remaining_nodes]
            avg_remaining_dist = sum(remaining_dists) / len(remaining_dists)
            variance_penalty = sum((d - avg_remaining_dist) ** 2 for d in remaining_dists) / len(remaining_dists)
        else:
            avg_remaining_dist = 0
            variance_penalty = 0

        dynamic_weight = 0.5 * (1 + (remaining_count - 1) / remaining_count)
        weighted_increase = current_to_node + dynamic_weight * avg_remaining_dist + 0.3 * variance_penalty

        if weighted_increase < min_weighted_increase:
            min_weighted_increase = weighted_increase
            best_node = node

    return next_node
