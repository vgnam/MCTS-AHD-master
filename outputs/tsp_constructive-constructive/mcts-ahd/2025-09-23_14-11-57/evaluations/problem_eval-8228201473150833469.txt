def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_entropy = -sum((d / sum(distance_matrix[node])) * np.log2(d / sum(distance_matrix[node]) + 1e-10) for d in distance_matrix[node] if d > 0)

        distance_weight = 0.7 - 0.5 * progress
        future_weight = 0.3 + 0.5 * progress

        entropy_bonus = (remaining_nodes / total_nodes) * (1 + (node_entropy / np.max([e for e in node_entropy if e > 0])))

        combined_score = (distance_weight * immediate_distance) + \
                        (future_weight * (1 / (1 + future_distance))) + \
                        (0.3 * entropy_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
