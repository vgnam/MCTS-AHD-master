def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    connectivity_scores = []
    node_potentials = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret with dynamic scaling
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
            regret_variance = sum((distance_matrix[current_node][n] - distance_matrix[current_node][node])**2 for n in other_nodes) / len(other_nodes)
            regret_scaled = regret * (1 + regret_variance)
        else:
            regret_scaled = 0
        regrets.append(regret_scaled)

        # Calculate connectivity score with global perspective
        global_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        connectivity_score = (immediate_distance + future_connectivity) / (1 + global_connectivity)
        connectivity_scores.append(connectivity_score)

        # Calculate node potential
        node_potential = (immediate_distance + future_connectivity + global_connectivity) / (1 + len(unvisited_nodes))
        node_potentials.append(node_potential)

    # Adaptive weights using sigmoid function
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = remaining_nodes / total_nodes
    distance_weight = 1 / (1 + math.exp(5 * (progress - 0.5)))
    connectivity_weight = 1 - distance_weight
    regret_weight = 0.1 + 0.2 * (1 - progress)

    # Combine scores with probabilistic selection
    scores = [
        distance_weight * distance + connectivity_weight * connectivity + regret_weight * regret
        for distance, connectivity, regret in zip(distances, connectivity_scores, regrets)
    ]
    probabilities = softmax([-s for s in scores])
    selected_index = np.random.choice(len(unvisited_nodes), p=probabilities)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node

def softmax(x):
    e_x = np.exp(x - np.max(x))
    return next_node
