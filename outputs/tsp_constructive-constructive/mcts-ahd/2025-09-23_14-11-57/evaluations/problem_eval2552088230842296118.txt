def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Dynamic weighting between proximity and efficiency
        weight_proximity = 0.6 if progress < 0.5 else 0.4
        weight_efficiency = 1.0 - weight_proximity

        # Heuristic for path efficiency
        heuristic = sum(min(distance_matrix[node][n], distance_matrix[n][node]) for n in unvisited_nodes if n != node)

        # Progress-based penalty
        penalty = (immediate_distance ** 2) if progress > 0.7 else 0

        # Combined score
        score = (weight_proximity * immediate_distance +
                 weight_efficiency * (immediate_distance + future_potential) +
                 0.3 * heuristic) + penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
