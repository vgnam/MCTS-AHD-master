def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)) * 0.5)

    # Calculate centroid of unvisited nodes
    centroid = [0.0, 0.0]  # Assuming nodes have (x,y) coordinates; replace with actual coordinates if available
    for node in unvisited_nodes:
        centroid[0] += node[0]  # x-coordinate
        centroid[1] += node[1]  # y-coordinate
    centroid = [c / len(unvisited_nodes) for c in centroid]

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)

        # Calculate novelty score (distance from centroid)
        novelty = ((node[0] - centroid[0])**2 + (node[1] - centroid[1])**2)**0.5

        # Dynamic weight adjustment using sigmoid function
        weight_distance = 1 / (1 + math.exp(-0.1 * (remaining_nodes - len(distance_matrix)/2)))
        weight_potential = 1 - weight_distance
        weight_centrality = 0.2  # Fixed weight for centrality
        weight_novelty = 0.1    # Fixed weight for novelty

        # Combined score with dynamic weights
        combined_score = (weight_distance * immediate_distance +
                         weight_potential * future_potential +
                         weight_centrality * centrality -
                         weight_novelty * novelty)  # Subtract novelty to prioritize central nodes

        # Apply temperature to introduce stochasticity
        adjusted_score = combined_score * temperature
        scores.append(adjusted_score)

    # Select node with minimum score with probability proportional to score
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score) for s in scores]

    selected_index = normalized_scores.index(max(normalized_scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
