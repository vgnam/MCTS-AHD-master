def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_increase = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    sigmoid_weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            # Local search: consider nearest neighbor in remaining nodes
            local_search_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            local_search_cost = distance_matrix[node][local_search_node]

            # Dynamic penalty based on progress and local search
            penalty = (progress * (local_search_cost - avg_remaining_dist)) if progress > 0.3 else 0
        else:
            avg_remaining_dist = 0
            local_search_cost = 0
            penalty = 0

        weighted_increase = current_to_node + sigmoid_weight * avg_remaining_dist + (1 - sigmoid_weight) * local_search_cost + penalty

        if weighted_increase < min_weighted_increase:
            min_weighted_increase = weighted_increase
            best_node = node

    return next_node
