def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    clusterings = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate clustering
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        clustering = sum(nearby_distances) / len(nearby_distances) if nearby_distances else 0
        clusterings.append(clustering)

    # Inverse adaptive weights based on phase
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    phase = 1 - (remaining_nodes / total_nodes)
    clustering_weight = max(0.1, 0.8 * (1 - phase**2))
    distance_weight = 0.3 * phase
    regret_weight = 0.2 * phase**2

    # Inverse weighted scores (penalize high distances and regrets early)
    scores = [clustering_weight * (1 / (1 + distance)) + distance_weight * distance + regret_weight * regret
              for regret, distance, clustering in zip(regrets, distances, clusterings)]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
