import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic scoring: distance to next node, distance to destination, and randomness
    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        random_factor = random.random()  # Introduces exploration
        score = (1 / (distance_to_node + 1e-6)) * (1 / (distance_to_dest + 1e-6)) * random_factor
        scores.append(score)

    # Normalize scores and select probabilistically
    total_score = sum(scores)
    normalized_scores = [s / total_score for s in scores] if total_score > 0 else [1.0 / len(scores)] * len(scores)
    selected_index = random.choices(range(len(unvisited_nodes)), weights=normalized_scores, k=1)[0]
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
