def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1 - math.exp(-0.5 * (total_nodes - remaining_nodes) / total_nodes)

    immediate_weight = (1 - progress_factor) ** 2
    future_weight = progress_factor ** 2
    revisit_weight = 0.3 * (1 - progress_factor)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_future_distance = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            revisit_penalty = distance_matrix[current_node][node]
        else:
            avg_future_distance = 0
            revisit_penalty = 0

        score = (immediate_weight * immediate_distance +
                 future_weight * avg_future_distance +
                 revisit_weight * revisit_penalty)

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
