def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = (total_nodes - remaining_nodes) / total_nodes

    immediate_weight = 0.5 + 0.5 * progress
    lookahead_weight = 1.0 - immediate_weight

    node_degrees = [sum(1 for d in distance_matrix[node] if d > 0) for node in unvisited_nodes]
    max_degree = max(node_degrees) if node_degrees else 1
    degree_weights = [d / max_degree for d in node_degrees]

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        inverse_distance_prob = 1.0 / (immediate_distance + 1e-6)
        centrality_factor = degree_weights[i]

        combined_score = (immediate_weight * immediate_distance) + (lookahead_weight * (inverse_distance_prob * centrality_factor))
        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
