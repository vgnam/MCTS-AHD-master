def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.6
    base_lookahead_weight = 0.4

    distance_to_destination = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)

    distance_factor = distance_to_destination / max_distance
    immediate_weight = base_immediate_weight * (1 - distance_factor)
    lookahead_weight = base_lookahead_weight * (1 + distance_factor)

    total_weight = immediate_weight + lookahead_weight
    immediate_weight /= total_weight
    lookahead_weight /= total_weight

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        best_lookahead_distance = float('inf')
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]
                if lookahead_distance < best_lookahead_distance:
                    best_lookahead_distance = lookahead_distance

        combined_score = immediate_weight * immediate_distance + lookahead_weight * best_lookahead_distance
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
