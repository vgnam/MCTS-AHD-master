def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    # Dynamic weighting based on remaining nodes (reverse of original)
    remaining_nodes = len(unvisited_nodes)
    weight_efficiency = 0.7 if remaining_nodes > 2 else 0.5
    weight_proximity = 1.0 - weight_efficiency

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Modified penalty for nodes too close to current (exponential decay)
        penalty = 0.3 * (1.0 / (current_to_node + 1e-6)) ** 2 if current_to_node < 0.4 else 0

        # Different heuristic (average distance to remaining nodes)
        heuristic = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        # Combined score with modified weights and heuristic
        score = (weight_proximity * current_to_node +
                 weight_efficiency * total_increase +
                 0.3 * heuristic) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
