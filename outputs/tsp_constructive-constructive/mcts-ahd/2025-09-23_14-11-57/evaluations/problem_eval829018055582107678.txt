def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.5 + 0.3 * (remaining_nodes / len(distance_matrix)) if remaining_nodes > 1 else 0.8
    future_weight = 0.5 - 0.3 * (remaining_nodes / len(distance_matrix)) if remaining_nodes > 1 else 0.2

    node_frequencies = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node].values()))
        combined_score = (immediate_weight * immediate_distance +
                         future_weight * future_potential +
                         0.1 * connectivity)
        node_frequencies[node] = combined_score

    total_score = sum(node_frequencies.values())
    probabilities = {node: score / total_score for node, score in node_frequencies.items()}
    next_node = max(probabilities.items(), key=lambda x: x[1])[0]

    return next_node
