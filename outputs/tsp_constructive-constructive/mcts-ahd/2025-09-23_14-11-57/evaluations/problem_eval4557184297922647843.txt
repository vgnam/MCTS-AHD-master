import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    weights = []
    total_weight = 0.0
    alpha = 0.4  # Weight for global estimate
    beta = 0.6   # Weight for path position
    gamma = 0.1  # Random perturbation factor

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]
        path_position = len(unvisited_nodes) - unvisited_nodes.index(node)
        weight = (1.0 / (immediate_distance + alpha * global_estimate)) * (1 + beta * path_position)
        weight *= (1 + gamma * random.uniform(-0.5, 0.5))
        weights.append(weight)
        total_weight += weight

    if total_weight == 0:
        return random.choice(unvisited_nodes)

    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
