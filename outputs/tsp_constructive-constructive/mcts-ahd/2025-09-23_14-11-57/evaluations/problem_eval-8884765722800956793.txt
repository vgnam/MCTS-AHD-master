def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_increase = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            isolation_penalty = max(distance_matrix[node][n] for n in remaining_nodes) - avg_remaining_dist
        else:
            avg_remaining_dist = 0
            isolation_penalty = 0

        immediate_weight = 0.6 if remaining_count > 2 else 0.8
        future_weight = 0.4 if remaining_count > 2 else 0.2
        dynamic_weight = 0.5 * (1 + (remaining_count - 1) / remaining_count)

        weighted_increase = (immediate_weight * immediate_distance +
                            future_weight * future_potential +
                            dynamic_weight * avg_remaining_dist +
                            0.1 * isolation_penalty)

        if weighted_increase < min_weighted_increase:
            min_weighted_increase = weighted_increase
            best_node = node

    return next_node
