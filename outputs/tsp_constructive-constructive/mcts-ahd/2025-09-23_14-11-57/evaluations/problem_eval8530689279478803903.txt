def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    connectivity_scores = []
    centrality_scores = []

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret with exponential scaling
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) ** 2 if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Enhanced connectivity score with dynamic normalization
        if remaining_nodes > 1:
            avg_future = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = (immediate_distance + future_connectivity) / (1 + avg_future)
        else:
            connectivity_score = immediate_distance + future_connectivity
        connectivity_scores.append(connectivity_score)

        # Node centrality measure
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality_scores.append(centrality)

    # Adaptive exponential weights
    distance_weight = 0.5 * (remaining_nodes / total_nodes) ** 2
    connectivity_weight = 1.0 - distance_weight
    regret_weight = 0.1 * (remaining_nodes / total_nodes) ** 1.5
    centrality_weight = 0.2 * (1 - (remaining_nodes / total_nodes))

    # Combine weighted scores with centrality boost for final stages
    scores = [
        (distance_weight * distance +
         connectivity_weight * connectivity +
         regret_weight * regret +
         centrality_weight * centrality)
        for distance, connectivity, regret, centrality in zip(distances, connectivity_scores, regrets, centrality_scores)
    ]

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
