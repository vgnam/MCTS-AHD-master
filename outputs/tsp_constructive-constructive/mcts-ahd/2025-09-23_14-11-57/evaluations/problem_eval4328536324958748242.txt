def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.5 * (1 - 1 / (remaining_nodes + 1))
    base_future_weight = 1 - base_immediate_weight
    novelty_factor = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / (remaining_nodes + 1e-6)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes + 1e-6)
        dynamic_penalty = 0.2 * (remaining_nodes / (remaining_nodes + 1)) * (1.0 / (immediate_distance + 1e-6))
        combined_score = (base_immediate_weight * immediate_distance +
                          base_future_weight * future_potential +
                          0.3 * centrality -
                          dynamic_penalty)
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
