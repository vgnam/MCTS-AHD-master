def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    penalty_factor = 0.7

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = penalty_factor * immediate_distance * len(remaining_nodes)
            penalty = (sum(distance_matrix[current_node][n] for n in remaining_nodes) / len(remaining_nodes)) ** 2 if progress > 0.7 else 0
        else:
            avg_remaining_dist = 0
            revisit_penalty = 0
            penalty = 0

        dynamic_weight = 0.5
        weighted_score = immediate_distance + dynamic_weight * future_potential + revisit_penalty + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            best_node = node

    return next_node
