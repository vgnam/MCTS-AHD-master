def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_degree = sum(1 for d in distance_matrix[node] if d > 0)
        distance_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        combined_centrality = (node_degree + distance_centrality) / (total_nodes - 1)

        distance_weight = (1 - progress_factor) * 0.6 + 0.4 - (0.2 * combined_centrality)
        future_weight = progress_factor * 0.7 + 0.3 + (0.3 * combined_centrality)

        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * (1 + combined_centrality) * (1 - progress_factor)

        immediate_penalty = (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) if progress_factor > 0.6 else 0
        future_penalty = (sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / len(unvisited_nodes)) if progress_factor > 0.8 else 0

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.5 * exploration_bonus) + \
                         (0.7 * immediate_penalty) + \
                         (0.9 * future_penalty)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
