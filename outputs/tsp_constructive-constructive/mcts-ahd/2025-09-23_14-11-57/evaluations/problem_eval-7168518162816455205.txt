def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress = 1.0 - remaining_nodes / len(distance_matrix)

    temperature = max(0.01, 0.5 ** (1.0 - progress))
    penalty_weight = 0.1 + 0.9 * (0.5 ** progress)
    lookahead_weight = 0.2 * (1.0 - 0.5 ** progress)

    scores = []
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        lookahead_cost = 0.0

        if remaining_nodes > 1:
            remaining = [n for n in unvisited_nodes if n != node]
            lookahead_cost = sum(distance_matrix[node][n] for n in remaining) / len(remaining)

        promise_metric = (1.0 - progress) * immediate_cost + progress * lookahead_cost
        combined_score = (1.0 - penalty_weight) * immediate_cost + penalty_weight * promise_metric
        scores.append(combined_score)

    if remaining_nodes > 1 and np.random.rand() < temperature:
        selected_index = np.random.choice(len(scores))
    else:
        selected_index = scores.index(min(scores))

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
