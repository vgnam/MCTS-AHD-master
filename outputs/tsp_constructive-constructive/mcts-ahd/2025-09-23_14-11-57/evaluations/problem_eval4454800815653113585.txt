def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weights based on remaining nodes
    proximity_weight = 0.8 if num_unvisited > 5 else 0.6
    efficiency_weight = 1.0 - proximity_weight

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        # Memory term: favor nodes that connect to many unvisited nodes
        memory_term = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * current_to_node) / num_unvisited

        # Non-linear penalty for very short distances
        penalty = 0.2 * (1.0 / (current_to_node + 1e-6)) ** 2 if current_to_node < 0.3 else 0

        # Combined score with dynamic weights and memory
        score = (proximity_weight * current_to_node +
                 efficiency_weight * (current_to_node + node_to_dest) +
                 0.2 * memory_term) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
