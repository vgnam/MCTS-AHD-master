def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_count)  # Decreases as tour progresses

    candidates = []
    weights = []

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes)
        else:
            avg_remaining_dist = 0
            centrality = 0

        # Dynamic weight combining distance, centrality, and temperature
        weight = (1 - temperature) * current_to_node + temperature * (0.7 * avg_remaining_dist - 0.3 * centrality)
        candidates.append(node)
        weights.append(weight)

    # Select node with probability inversely proportional to weight
    total_weight = sum(weights)
    probabilities = [1 - (w / total_weight) for w in weights]
    probabilities = [p / sum(probabilities) for p in probabilities]

    next_node = np.random.choice(candidates, p=probabilities)
    return next_node
