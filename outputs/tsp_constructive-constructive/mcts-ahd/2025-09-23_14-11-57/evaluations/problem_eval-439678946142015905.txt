def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    penalty_factor = 0.5 + 0.2 * (len(unvisited_nodes) / len(distance_matrix))  # Dynamic penalty based on remaining nodes

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # Calculate average distance to remaining nodes from current node
            avg_remaining_dist = sum(distance_matrix[current_node][n] for n in remaining_nodes) / len(remaining_nodes)
            # Revisit penalty scales with remaining path length and node centrality
            revisit_penalty = penalty_factor * current_to_node * (len(remaining_nodes) / len(distance_matrix))
        else:
            avg_remaining_dist = 0
            revisit_penalty = 0

        # Novel scoring equation: prioritize nodes with low immediate distance, low revisit risk, and high centrality
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        score = current_to_node + (0.3 * avg_remaining_dist) + (0.7 * revisit_penalty) - (0.2 * centrality)

        if score < best_score:
            best_score = score
            best_node = node

    # Add probabilistic selection to escape local minima
    if len(unvisited_nodes) > 3 and random.random() < 0.3:  # 30% chance to explore
        return random.choice(unvisited_nodes)

    return next_node
