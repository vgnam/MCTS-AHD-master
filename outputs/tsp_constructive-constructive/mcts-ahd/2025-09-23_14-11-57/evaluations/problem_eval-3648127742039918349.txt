def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    potentials = []
    risks = []
    variances = []
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)
        potentials.append(future_potential)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0

        risk = progress * regret
        risks.append(risk)

        node_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = (sum((d - sum(node_distances)/len(node_distances))**2 for d in node_distances) / len(node_distances)) if node_distances else 0
        variances.append(variance)

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    risk_weight = progress
    distance_weight = 1.0 - risk_weight
    variance_weight = 0.5 * progress

    scores = []
    for i in range(len(unvisited_nodes)):
        penalty = (variances[i] ** 2) if progress > 0.7 else 0
        score = risk_weight * risks[i] + distance_weight * distances[i] + distance_weight * potentials[i] - variance_weight * variances[i] + penalty
        scores.append(score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
