import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    total_fitness = 0.0

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            connectivity_score = (max_remaining_dist - avg_remaining_dist) / max_remaining_dist if max_remaining_dist > 0 else 0
        else:
            avg_remaining_dist = 0
            connectivity_score = 0

        dynamic_weight = 0.3 * (1 + (len(unvisited_nodes) - 1) / len(unvisited_nodes))
        fitness = (1 / (current_to_node + 1e-6)) * (1 + dynamic_weight * connectivity_score)

        candidates.append((node, fitness))
        total_fitness += fitness

    if total_fitness > 0:
        probabilities = [fitness / total_fitness for _, fitness in candidates]
        next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
