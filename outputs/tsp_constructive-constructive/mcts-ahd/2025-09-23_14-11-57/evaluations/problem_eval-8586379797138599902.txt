def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Dynamic weight adjustment: prioritize efficiency in later stages
        weight_proximity = 0.5 + 0.4 * (1 - remaining_nodes / (remaining_nodes + 1))
        weight_efficiency = 0.5 - 0.4 * (1 - remaining_nodes / (remaining_nodes + 1))

        # Penalize nodes too close to avoid cycles
        penalty = 0.1 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.5 else 0

        # Weighted score with dynamic adjustment
        score = weight_proximity * current_to_node + weight_efficiency * total_increase - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
