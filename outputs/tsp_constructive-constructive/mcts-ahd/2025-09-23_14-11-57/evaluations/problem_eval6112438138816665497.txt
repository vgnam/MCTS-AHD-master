import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_decay = 0.8 ** remaining_nodes
    exploitation_factor = 0.5 * (1.0 - (remaining_nodes / len(distance_matrix)))

    reward_scores = []
    for node in unvisited_nodes:
        immediate_reward = 1.0 / (1.0 + distance_matrix[current_node][node])

        if remaining_nodes > 2:
            next_nodes = [n for n in unvisited_nodes if n != node]
            long_term_reward = np.mean([1.0 / (1.0 + distance_matrix[node][n] + distance_matrix[n][destination_node])
                                       for n in next_nodes])
        else:
            long_term_reward = 1.0 / (1.0 + distance_matrix[node][destination_node])

        total_reward = immediate_reward * long_term_reward
        reward_scores.append(total_reward)

    probabilities = np.array(reward_scores) / np.sum(reward_scores)
    probabilities = (1 - exploitation_factor) * probabilities + exploitation_factor * (1.0 / len(unvisited_nodes))
    probabilities = probabilities * exploration_decay + (1 - exploration_decay) * (1.0 / len(unvisited_nodes))

    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
