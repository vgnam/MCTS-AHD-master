def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    penalty_factor = 0.5 + 0.2 * (len(unvisited_nodes) / len(distance_matrix))  # Dynamic penalty scaling

    # Track revisit history (simplified for example)
    revisit_history = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        revisit_history[node] = sum(1 for n in unvisited_nodes if n == node)  # Simplified revisit tracking

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]

        # Calculate revisit penalty with dynamic scaling
        revisit_penalty = penalty_factor * current_to_node * (1 + 0.1 * revisit_history[node])

        # Node centrality (simplified: average distance to other nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        # Score combines distance, revisit penalty, and centrality
        score = current_to_node + revisit_penalty + 0.3 * centrality

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
