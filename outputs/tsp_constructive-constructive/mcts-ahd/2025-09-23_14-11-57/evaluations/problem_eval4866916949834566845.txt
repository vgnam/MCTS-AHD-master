def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    clusterings = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        # Dynamic regret with threshold
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            sorted_distances = sorted(distance_matrix[current_node][n] for n in other_nodes)
            threshold = sorted_distances[min(1, len(sorted_distances)//2)] if len(sorted_distances) > 1 else sorted_distances[0]
            regret = (distance_matrix[current_node][node] - threshold) * (1 if distance_matrix[current_node][node] > threshold else 0)
        else:
            regret = 0
        regrets.append(regret)

        # Multi-phase clustering with exponential decay
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        future_distances = [distance_matrix[node][destination_node]] if destination_node in unvisited_nodes else []
        all_distances = nearby_distances + future_distances
        decay_factor = 0.7 ** (len(unvisited_nodes) / len(distance_matrix))
        clustering = (sum(d * (decay_factor ** i) for i, d in enumerate(sorted(all_distances))) / len(all_distances)) if all_distances else 0
        clusterings.append(clustering)

    # Adaptive normalization of distance
    avg_distance = sum(distances) / len(distances) if distances else 1
    normalized_distances = [d / avg_distance for d in distances]

    # Phase-based exponential weighting
    phase = 1 - (len(unvisited_nodes) / len(distance_matrix))
    regret_weight = 0.9 * (1 - phase) ** 2
    distance_weight = 0.4 * (1 - (phase ** 1.5))
    clustering_weight = 0.3 * (phase ** 1.5) + 0.1 * (1 - phase)

    # Combined score with adaptive threshold
    scores = [regret_weight * regret + distance_weight * distance + clustering_weight * clustering
              for regret, distance, clustering in zip(regrets, normalized_distances, clusterings)]
    threshold = min(scores) + 0.2 * (max(scores) - min(scores))
    candidates = [i for i, score in enumerate(scores) if score <= threshold]
    selected_index = candidates[0] if candidates else scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
