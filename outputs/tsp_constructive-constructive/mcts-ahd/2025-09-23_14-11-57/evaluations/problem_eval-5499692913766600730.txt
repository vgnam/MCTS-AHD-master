import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    clusterings = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate clustering using inverse of variance
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        if nearby_distances:
            mean = sum(nearby_distances) / len(nearby_distances)
            variance = sum((d - mean) ** 2 for d in nearby_distances) / len(nearby_distances)
            clustering = 1 / (variance + 1e-6)  # Avoid division by zero
        else:
            clustering = 0
        clusterings.append(clustering)

    # Adaptive weights based on phase and probabilistic selection
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    phase = 1 - (remaining_nodes / total_nodes)

    # Dynamic weight adjustment with probabilistic elements
    regret_weight = 0.6 * (1 - phase**3)
    distance_weight = 0.2 * phase**2
    clustering_weight = 0.2 * phase

    # Combine weighted scores with probabilistic selection
    scores = [regret_weight * regret + distance_weight * distance + clustering_weight * clustering
              for regret, distance, clustering in zip(regrets, distances, clusterings)]

    # Normalize scores to probabilities
    min_score = min(scores)
    max_score = max(scores)
    if min_score == max_score:
        probabilities = [1.0 / len(scores)] * len(scores)
    else:
        normalized_scores = [(score - min_score) / (max_score - min_score) for score in scores]
        probabilities = [1.0 - (s / sum(normalized_scores)) for s in normalized_scores]

    # Select node based on probability distribution
    selected_index = random.choices(range(len(unvisited_nodes)), weights=probabilities, k=1)[0]
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
