import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    weights = []
    total_weight = 0.0

    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 0.6 if remaining_nodes > 2 else 0.4
    weight_efficiency = 1.0 - weight_proximity

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]
        penalty = 0.1 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.2 else 0
        heuristic = sum(min(distance_matrix[node][n], distance_matrix[n][node]) for n in unvisited_nodes if n != node)

        weight = 1.0 / (immediate_distance + 0.3 * global_estimate)
        weights.append(weight)
        total_weight += weight

        score = (weight_proximity * immediate_distance +
                 weight_efficiency * (immediate_distance + global_estimate) +
                 0.3 * heuristic) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    if total_weight == 0:
        return random.choice(unvisited_nodes)

    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
