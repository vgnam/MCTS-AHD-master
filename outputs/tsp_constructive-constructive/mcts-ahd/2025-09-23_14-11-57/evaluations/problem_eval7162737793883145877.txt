def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate centrality of each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node]) / total_nodes
        centrality[node] = avg_distance

    # Dynamic weights based on centrality and path progress
    path_progress = (total_nodes - remaining_nodes) / total_nodes
    centrality_weight = path_progress * 0.6
    immediate_weight = 0.5 * (1 - centrality_weight)
    future_weight = 0.3 * (1 - centrality_weight)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        node_centrality = centrality[node]

        # Novel scoring function: multiplicative combination of factors
        combined_score = (immediate_weight * immediate_distance) + (future_weight * future_potential) + (centrality_weight * node_centrality)
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
