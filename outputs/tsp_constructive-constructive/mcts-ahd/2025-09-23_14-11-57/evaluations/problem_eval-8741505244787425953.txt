import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    phase = 'exploration' if progress < 0.3 else 'transition' if progress < 0.7 else 'exploitation'
    random_factor = random.uniform(0.8, 1.2)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        if phase == 'exploration':
            distance_weight = 0.7
            future_weight = 0.15
            centrality_weight = 0.15
            exploration_bonus = 0.5 * (remaining_nodes / total_nodes)
        elif phase == 'transition':
            distance_weight = 0.4
            future_weight = 0.3
            centrality_weight = 0.3
            exploration_bonus = 0.3 * (remaining_nodes / total_nodes)
        else:
            distance_weight = 0.2
            future_weight = 0.4
            centrality_weight = 0.4
            exploration_bonus = 0.1 * (remaining_nodes / total_nodes)

        combined_score = (distance_weight * immediate_distance) + \
                        (future_weight * (1 / (1 + future_distance))) + \
                        (centrality_weight * (1 / (1 + node_centrality))) - \
                        (0.5 * exploration_bonus)

        combined_score *= random_factor
        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
