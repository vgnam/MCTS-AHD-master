def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.5 + 0.3 * (1.0 / (remaining_nodes + 1))
    future_weight = 0.5 - 0.3 * (1.0 / (remaining_nodes + 1))

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        recent_penalty = 0.2 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.3 else 0
        indirect_future = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in unvisited_nodes if n != node)
        combined_score = immediate_weight * immediate_distance + future_weight * (0.7 * future_potential + 0.3 * indirect_future) - recent_penalty
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
