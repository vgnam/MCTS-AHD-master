def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate base metrics
    distances = []
    future_potentials = []
    connectivity_scores = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)
        future_potentials.append(future_potential)

        # Calculate connectivity score
        if len(unvisited_nodes) > 1:
            connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        else:
            connectivity = 0
        connectivity_scores.append(connectivity)

    # Phase-based adaptive weights
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    if remaining_nodes > total_nodes * 0.6:  # Early phase
        distance_weight = 0.7
        future_weight = 0.2
        connectivity_weight = 0.1
    elif remaining_nodes > total_nodes * 0.2:  # Mid phase
        distance_weight = 0.4
        future_weight = 0.4
        connectivity_weight = 0.2
    else:  # Late phase
        distance_weight = 0.3
        future_weight = 0.5
        connectivity_weight = 0.2

    # Combine weighted scores
    scores = [
        distance_weight * distance +
        future_weight * future +
        connectivity_weight * connectivity
        for distance, future, connectivity in zip(distances, future_potentials, connectivity_scores)
    ]

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
