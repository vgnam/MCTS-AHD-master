def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    proximity_potentials = []
    future_potentials = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret: difference between best and second-best options
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate proximity potential: estimate of how well the node bridges current and future paths
        proximity_potential = (immediate_distance + future_potential) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        proximity_potentials.append(proximity_potential)

        # Estimate future path efficiency (lookahead)
        future_nodes = [n for n in unvisited_nodes if n != node]
        if future_nodes:
            future_avg = sum(distance_matrix[node][n] for n in future_nodes) / len(future_nodes)
        else:
            future_avg = 0
        future_potentials.append(future_avg)

    # Adaptive weights: prioritize regret and proximity early, balance distance and future potential later
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = max(0.1, 0.8 * (remaining_nodes / total_nodes))
    distance_weight = max(0.1, 0.3 * (remaining_nodes / total_nodes))
    proximity_weight = max(0.1, 0.6 * (remaining_nodes / total_nodes))
    future_weight = 1.0 - (regret_weight + distance_weight + proximity_weight)

    # Combine weighted scores with future potential and cycle penalty
    scores = [
        regret_weight * regret + distance_weight * distance + proximity_weight * potential + future_weight * future
        for regret, distance, potential, future in zip(regrets, distances, proximity_potentials, future_potentials)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
