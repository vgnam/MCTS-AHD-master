def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic regret scaling based on distance variance
    distance_variance = np.var(distances) if len(distances) > 1 else 0
    regret_weight = 0.5 * (remaining_nodes / total_nodes) + 0.5 * (distance_variance / (np.max(distances) + 1e-6))
    distance_weight = 0.5

    # Exploration term based on path length
    exploration_term = 0.1 * (total_nodes - remaining_nodes) / total_nodes

    scores = [distance_weight * (distance / (np.max(distances) + 1e-6)) +
              regret_weight * (regret / (np.max(regrets) + 1e-6)) +
              exploration_term for distance, regret in zip(distances, regrets)]

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
