def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_connectivity = sum(1 for dist in distance_matrix[node] if dist < max(distance_matrix[node]) * 0.5)
        centrality_score = (node_connectivity / (total_nodes - 1)) * (sum(distance_matrix[node]) / (total_nodes - 1))

        distance_weight = (1 - progress_factor) * 0.7 + 0.3 - (0.3 * centrality_score)
        future_weight = progress_factor * 0.6 + 0.4 + (0.4 * centrality_score)

        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * (1 + 0.3 * centrality_score)

        penalty = 0.2 * (1 - (remaining_nodes / total_nodes)) if immediate_distance < max(distance_matrix[node]) * 0.2 else 0

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.4 * exploration_bonus) + penalty

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
