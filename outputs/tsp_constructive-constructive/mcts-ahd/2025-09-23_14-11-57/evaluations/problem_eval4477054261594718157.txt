import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.8 * (remaining_nodes / len(distance_matrix)))
    centrality_weights = [sum(distance_matrix[node]) for node in unvisited_nodes]

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        farthest_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        global_potential = distance_matrix[node][destination_node]

        # Dynamic weight based on centrality and traversal progress
        centrality_factor = centrality_weights[i] / sum(centrality_weights) if sum(centrality_weights) > 0 else 0.5
        weight = 0.4 + 0.6 * centrality_factor

        # Hybrid score combining distance, farthest-insertion, and global potential
        combined_score = (weight * (1.0 / (immediate_distance + 1e-6)) +
                         (1 - weight) * (1.0 / (farthest_distance + 1e-6)) +
                         0.3 * (1.0 / (global_potential + 1e-6))) * (1.0 / temperature)

        scores.append(combined_score)

    # Select node with highest score with probabilistic smoothing
    selected_index = scores.index(max(scores))
    if random.random() < 0.2:  # Small randomness for exploration
        selected_index = random.randint(0, len(unvisited_nodes) - 1)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
