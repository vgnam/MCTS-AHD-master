def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    phase_factor = (progress ** 2) if progress <= 0.5 else (1 - (1 - progress) ** 2)
    immediate_weight = 0.7 - 0.5 * phase_factor
    future_weight = 0.3 + 0.5 * phase_factor

    avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        exploration_bonus = (node_centrality / avg_distance) * (1 - progress) * (1 / (1 + immediate_distance))

        revisit_penalty = 0
        if progress > 0.5:
            revisit_count = total_nodes - remaining_nodes - 1
            revisit_penalty = (revisit_count / total_nodes) * (immediate_distance / avg_distance)

        combined_score = (immediate_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) - \
                         (0.3 * exploration_bonus) + \
                         revisit_penalty

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
