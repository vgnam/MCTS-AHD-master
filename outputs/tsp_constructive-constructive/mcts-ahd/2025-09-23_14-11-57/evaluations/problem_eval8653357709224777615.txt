def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    progress = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Normalized progress (0 to 1)
    decay_factor = 1.0 - (0.5 * progress)  # Weight decays from 1.0 to 0.75 as progress increases

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weighted_lookahead = lookahead_distance * decay_factor
        total_score = immediate_distance + weighted_lookahead

        if total_score < best_score:
            best_score = total_score
            best_node = node

    return next_node
