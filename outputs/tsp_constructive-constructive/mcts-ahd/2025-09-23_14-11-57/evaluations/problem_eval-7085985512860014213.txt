def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    proximity_potentials = []
    future_diversities = []
    local_densities = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret with dynamic scaling based on variance of options
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            other_distances = [distance_matrix[current_node][n] for n in other_nodes]
            variance = sum((d - sum(other_distances)/len(other_distances))**2 for d in other_distances) / len(other_distances)
            second_best = min(other_distances)
            regret = (distance_matrix[current_node][node] - second_best) * (1 + variance)
        else:
            regret = 0
        regrets.append(regret)

        # Exponential decay for proximity potential to emphasize early decisions
        remaining_nodes = len(unvisited_nodes)
        proximity_potential = (immediate_distance + future_potential) * (0.9 ** remaining_nodes)
        proximity_potentials.append(proximity_potential)

        # Future diversity: number of high-potential future connections
        future_diversity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 2 * immediate_distance)
        future_diversities.append(future_diversity)

        # Local density: inverse of average distance to nearby nodes
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        local_density = 1 / (sum(nearby_distances) / len(nearby_distances)) if nearby_distances else 0
        local_densities.append(local_density)

    # Adaptive weights with exponential decay for proximity and local density
    total_nodes = len(distance_matrix)
    regret_weight = 0.5 * (0.8 ** remaining_nodes)
    distance_weight = 0.4 * (0.8 ** remaining_nodes)
    proximity_weight = 0.2 * (0.8 ** remaining_nodes)
    diversity_weight = 0.3 * (1 - 0.8 ** remaining_nodes)
    density_weight = 0.2 * (1 - 0.8 ** remaining_nodes)

    # Combine weighted scores: balance all factors
    scores = [
        regret_weight * regret + distance_weight * distance + proximity_weight * potential +
        diversity_weight * diversity + density_weight * density
        for regret, distance, potential, diversity, density in zip(
            regrets, distances, proximity_potentials, future_diversities, local_densities
        )
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
