def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Count nearby unvisited nodes to encourage path diversity
        nearby_nodes = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 and n != node)

        # Combined score: immediate distance, future potential, and path diversity
        score = 0.5 * immediate_distance + 0.3 * future_potential + 0.2 * (10 - nearby_nodes)

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
