def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_possible_nodes = remaining_count + 1

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            dist_variance = sum((distance_matrix[node][n] - avg_remaining_dist) ** 2 for n in remaining_nodes) / len(remaining_nodes)
            connectivity_factor = avg_remaining_dist * (1 + dist_variance / (avg_remaining_dist + 1e-6))
        else:
            connectivity_factor = 0

        tour_progress = (total_possible_nodes - remaining_count) / total_possible_nodes
        dynamic_weight = 0.3 + 0.7 * (1 - tour_progress)

        weighted_score = (1 - dynamic_weight) * current_to_node + dynamic_weight * connectivity_factor

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
