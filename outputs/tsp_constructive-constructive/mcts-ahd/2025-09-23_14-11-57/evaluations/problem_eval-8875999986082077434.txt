def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic threshold for connectivity score
    threshold = 0.3 + 0.7 * (remaining_nodes / total_nodes)

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Calculate local connectivity score (average distance to nearby nodes)
        local_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        local_distances = sorted(local_distances)[:max(1, len(local_distances) // 2)]  # Consider top half
        connectivity_score = sum(local_distances) / len(local_distances) if local_distances else 0

        # Hybrid score: immediate distance (40%) + connectivity score (60%)
        score = 0.4 * immediate_distance + 0.6 * (connectivity_score * threshold)

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
