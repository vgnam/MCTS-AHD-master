def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_phase = remaining_nodes / total_nodes

    # Dynamic weight adjustment
    immediate_weight = 0.5 * (1 + exploration_phase)
    future_weight = 0.5 * (1 - exploration_phase)
    centrality_weight = 0.3 * (1 - exploration_phase)

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Node centrality metric
        node_centrality = sum(distance_matrix[node]) / total_nodes

        # Normalization factors
        max_immediate = max(distance_matrix[current_node])
        max_future = max(distance_matrix[node])
        max_centrality = max(sum(row) / total_nodes for row in distance_matrix)

        # Normalized scores
        normalized_immediate = immediate_distance / max_immediate if max_immediate > 0 else 0
        normalized_future = future_potential / max_future if max_future > 0 else 0
        normalized_centrality = node_centrality / max_centrality if max_centrality > 0 else 0

        # Dynamic penalty based on historical visits (simulated here)
        visit_penalty = 0.2 * (1 / (immediate_distance + 1e-6)) * (1 + exploration_phase)

        combined_score = (immediate_weight * normalized_immediate +
                          future_weight * normalized_future +
                          centrality_weight * (1 - normalized_centrality)) - visit_penalty

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
