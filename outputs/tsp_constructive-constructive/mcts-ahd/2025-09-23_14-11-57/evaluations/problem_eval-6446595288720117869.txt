import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_rate = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)))
    exploitation_rate = 1.0 - exploration_rate

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        # Dynamic learning rate based on traversal progress
        learning_rate = 0.3 + 0.7 * (1.0 - remaining_nodes / len(distance_matrix))

        # Penalize very close nodes to avoid cycles
        penalty = 0.2 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.5 else 0

        # Hybrid scoring: inverse distance for exploration, direct distance for exploitation
        combined_score = (exploration_rate * (1.0 / (immediate_distance + 1e-6)) +
                         exploitation_rate * future_potential) * learning_rate - penalty

        scores.append(combined_score)

    # Select node with highest hybrid score
    selected_index = scores.index(max(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
