def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]

        node_connectivity = sum(1 for d in distance_matrix[node] if d > 0) / total_nodes
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        phase_factor = (1 - (progress ** 1.8)) * 0.7 + 0.3

        distance_weight = phase_factor * 0.6 + (0.4 * (node_connectivity ** 0.5))
        future_weight = (1 - phase_factor) * 0.4 + (0.6 * (node_centrality / max(distance_matrix[node])))

        temporal_bonus = (1 / (1 + immediate_dist)) * (remaining_nodes / total_nodes) * (1 + (1.5 * (progress ** 2)))
        spatial_bonus = (node_connectivity ** 0.8) * (1 - (node_centrality / max(distance_matrix[node])))

        combined_score = (distance_weight * immediate_dist) + \
                         (future_weight * (1 / (1 + future_dist))) - \
                         (0.3 * temporal_bonus) - \
                         (0.5 * spatial_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
