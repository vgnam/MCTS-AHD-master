def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_cost = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            connectivity_bonus = (max_remaining_dist - avg_remaining_dist) / (1 + avg_remaining_dist)
        else:
            avg_remaining_dist = 0
            connectivity_bonus = 0

        dynamic_weight = 1 - (remaining_count / (remaining_count + 1)) ** 0.5
        weighted_cost = current_to_node - dynamic_weight * connectivity_bonus

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            best_node = node

    return next_node
