def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    clusterings = []
    utilities = []
    curiosity_factors = []
    local_densities = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate clustering
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        clustering = 1 / (sum(nearby_distances) / len(nearby_distances)) if nearby_distances else 0
        clusterings.append(clustering)

        # Calculate utility (combination of regret and distance)
        utility = regret / (immediate_distance + 1e-6)
        utilities.append(utility)

        # Calculate curiosity factor (decaying exploration)
        total_nodes = len(distance_matrix)
        curiosity = 1 / (1 + (total_nodes - len(unvisited_nodes)) / total_nodes)
        curiosity_factors.append(curiosity)

        # Calculate local density (number of nearby unvisited nodes)
        local_density = len([n for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * min(distance_matrix[node])])
        local_densities.append(local_density)

    # Adaptive weights based on phase and exploration progress
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    phase = 1 - (remaining_nodes / total_nodes)
    exploration_progress = (total_nodes - remaining_nodes) / total_nodes
    regret_weight = max(0.1, 0.8 * (1 - phase**2))
    distance_weight = 0.3 * phase
    clustering_weight = 0.2 * phase**2
    utility_weight = 0.3 * (1 - phase)
    curiosity_weight = 0.2 * (1 - exploration_progress)
    density_weight = 0.1 * phase

    # Combine weighted scores
    scores = [
        regret_weight * regret +
        distance_weight * distance +
        clustering_weight * clustering +
        utility_weight * utility +
        curiosity_weight * curiosity +
        density_weight * density
        for regret, distance, clustering, utility, curiosity, density in zip(regrets, distances, clusterings, utilities, curiosity_factors, local_densities)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
