def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_product = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        product = immediate_distance * future_distance

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            penalty = (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)) ** 2 if progress > 0.7 else 0
        else:
            penalty = 0

        weighted_product = product + penalty

        if weighted_product < min_weighted_product:
            min_weighted_product = weighted_product
            best_node = node

    return next_node
