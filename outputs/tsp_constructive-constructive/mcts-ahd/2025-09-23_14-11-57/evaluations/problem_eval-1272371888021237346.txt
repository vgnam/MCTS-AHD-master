def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Dynamic penalty based on distance
        penalty = 0.1 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.3 else 0

        # Adjust weights based on remaining unvisited nodes
        proximity_weight = 0.7 if len(unvisited_nodes) < 3 else 0.5
        efficiency_weight = 0.2 if len(unvisited_nodes) < 3 else 0.4
        penalty_weight = 0.1

        # Weighted score
        score = proximity_weight * current_to_node + efficiency_weight * total_increase + penalty_weight * penalty
        scores.append(score)

    # Normalize scores for probabilistic selection
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]

    # Probabilistic selection
    selected_index = random.choices(range(len(unvisited_nodes)), weights=normalized_scores, k=1)[0]
    next_node = unvisited_nodes[selected_index]

    return next_node
