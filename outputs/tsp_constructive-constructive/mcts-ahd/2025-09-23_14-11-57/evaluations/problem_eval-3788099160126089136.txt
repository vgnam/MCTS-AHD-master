def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Linear progress metric (0 to 1)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # Calculate node centrality as average distance to remaining nodes
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            # Calculate path diversity as variance of distances to remaining nodes
            distances = [distance_matrix[node][n] for n in remaining_nodes]
            diversity = sum((d - centrality) ** 2 for d in distances) / len(distances)
            # Non-linear penalty based on progress and diversity
            penalty_factor = (progress ** 2) * (1 + diversity / (centrality + 1e-6)) if progress > 0.6 else 0
            penalty = penalty_factor * centrality
        else:
            penalty = 0

        dynamic_weight = 0.4 + 0.2 * progress  # Progress-dependent future potential weight
        weighted_score = immediate_distance + dynamic_weight * future_potential + penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
