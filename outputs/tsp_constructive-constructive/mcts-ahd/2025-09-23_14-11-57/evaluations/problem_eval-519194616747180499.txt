def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    future_potentials = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, immediate_distance - second_best)
        else:
            regret = 0
        regrets.append(regret)

        future_potential = distance_matrix[node][destination_node]
        future_potentials.append(future_potential)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - remaining_nodes / total_nodes
    dynamic_weight = 0.6 - 0.4 * progress

    weighted_scores = []
    for i, node in enumerate(unvisited_nodes):
        normalized_regret = (regrets[i] * (1 + (1 - progress) * 0.5)) / (sum(regrets) + 1e-6) if sum(regrets) > 0 else 0
        normalized_distance = distances[i] / (sum(distances) + 1e-6) if sum(distances) > 0 else 0
        normalized_future = future_potentials[i] / (sum(future_potentials) + 1e-6) if sum(future_potentials) > 0 else 0

        if progress < 0.5:
            score = 0.5 * normalized_distance + 0.3 * normalized_regret + 0.2 * normalized_future
        else:
            penalty = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if remaining_nodes > 1 else 0
            score = 0.2 * normalized_distance + 0.3 * normalized_regret + dynamic_weight * 0.4 * normalized_future + penalty / (sum(distance_matrix[current_node]) + 1e-6)

        weighted_scores.append(score)

    min_score = min(weighted_scores)
    candidates = [i for i, score in enumerate(weighted_scores) if score == min_score]

    if len(candidates) > 1:
        candidate_distances = [distances[i] for i in candidates]
        selected_index = candidates[candidate_distances.index(min(candidate_distances))]
    else:
        selected_index = candidates[0]

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
