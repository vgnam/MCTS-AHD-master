def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    # Dynamic non-linear weighting based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 0.7 * (remaining_nodes / (remaining_nodes + 2))**2
    weight_efficiency = 1.0 - weight_proximity

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Path coherence penalty for abrupt direction changes
        if len(unvisited_nodes) > 1:
            prev_node = current_node if len(unvisited_nodes) == len(unvisited_nodes) else None
            if prev_node is not None:
                prev_to_current = distance_matrix[prev_node][current_node]
                current_to_node = distance_matrix[current_node][node]
                direction_change = abs(prev_to_current - current_to_node)
                coherence_penalty = 0.3 * direction_change
            else:
                coherence_penalty = 0
        else:
            coherence_penalty = 0

        # Node significance heuristic (estimates impact on future segments)
        if remaining_nodes > 2:
            significance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            significance = 0

        # Combined score with dynamic weights and novel factors
        score = (weight_proximity * current_to_node +
                 weight_efficiency * total_increase +
                 0.2 * significance) + coherence_penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
