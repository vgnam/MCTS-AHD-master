import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploitation_rate = max(0.1, 0.8 * (remaining_nodes / len(distance_matrix)))
    exploration_rate = 1.0 - exploitation_rate

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Dynamic weight based on traversal progress (decreases early, increases later)
        dynamic_weight = 0.5 + 0.5 * (1.0 - remaining_nodes / len(distance_matrix))

        # Combine with inverted scores for immediate vs. global
        combined_score = (exploration_rate * (1.0 / (global_potential + 1e-6)) +
                         exploitation_rate * (1.0 / (immediate_distance + 1e-6))) * dynamic_weight

        scores.append(combined_score)

    # Probabilistic selection to avoid local minima
    selected_index = random.choices(range(len(scores)), weights=scores, k=1)[0]
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
