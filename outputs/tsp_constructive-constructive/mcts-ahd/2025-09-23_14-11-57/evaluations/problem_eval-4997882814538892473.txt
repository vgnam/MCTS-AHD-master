def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    total_nodes = num_unvisited + 1  # +1 for current_node
    lookahead_factor = 0.3 + 0.7 * (num_unvisited / total_nodes)  # Dynamic factor

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        total_score = immediate_distance + lookahead_factor * lookahead_distance

        if total_score < best_score:
            best_score = total_score
            best_node = node

    # Add probabilistic element to escape local optima
    if len(unvisited_nodes) > 1:
        candidates = [n for n in unvisited_nodes if distance_matrix[current_node][n] <= 1.5 * best_score]
        if candidates:
            return random.choice(candidates)

    return next_node
