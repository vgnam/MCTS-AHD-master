def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            dynamic_weight = 0.5 + 0.5 * remaining_ratio
            revisit_penalty = 0.3 * distance_matrix[current_node][node] * (1 - dynamic_weight)
        else:
            avg_remaining_dist = 0
            revisit_penalty = 0

        score = current_to_node * (1 + dynamic_weight) + avg_remaining_dist + revisit_penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
