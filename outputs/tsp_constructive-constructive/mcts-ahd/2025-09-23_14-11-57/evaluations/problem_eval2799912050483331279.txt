def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        distance_weight = 0.5 - 0.3 * progress
        future_weight = 0.3 + 0.3 * progress
        centrality_weight = 0.2 + 0.2 * (1 - progress)

        exploration_factor = (remaining_nodes / total_nodes) * (1 + (node_centrality / max(distance_matrix[node])))

        combined_score = (distance_weight * immediate_distance) + \
                        (future_weight * (1 / (1 + future_distance))) + \
                        (centrality_weight * (1 / (1 + node_centrality))) - \
                        (0.5 * exploration_factor)

        scores.append(combined_score)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-10) for score in scores]

    temperature = 1.0 + 2.0 * (1 - progress)
    exp_scores = [math.exp(score / temperature) for score in normalized_scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [exp_score / sum_exp_scores for exp_score in exp_scores]

    selected_index = probabilities.index(max(probabilities))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
