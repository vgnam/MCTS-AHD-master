def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = -float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            betweenness = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 0.75 * max_remaining_dist)
            isolation_penalty = (max_remaining_dist - avg_remaining_dist) ** 2
        else:
            avg_remaining_dist = 0
            betweenness = 0
            isolation_penalty = 0

        exploration_factor = (total_nodes - remaining_count) / total_nodes
        dynamic_weight = 0.3 + 0.7 * exploration_factor

        score = (1 - dynamic_weight) * (-current_to_node) + dynamic_weight * (-avg_remaining_dist) + 0.5 * betweenness - 0.3 * isolation_penalty

        if score > best_score:
            best_score = score
            best_node = node

    return next_node
