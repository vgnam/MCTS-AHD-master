def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    penalty_factor = 0.3 if remaining_nodes > 3 else 0.1
    immediate_weight = 0.7 if remaining_nodes > 3 else 0.3
    future_weight = 0.3 if remaining_nodes > 3 else 0.7

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        avg_remaining_dist = 0
        revisit_penalty = 0

        if remaining_nodes > 1:
            next_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in next_nodes) / len(next_nodes)
            revisit_penalty = penalty_factor * distance_matrix[current_node][node]

        penalty = 0.3 * (current_to_node ** 2) if current_to_node < 0.5 else 0
        penalty += 0.2 * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.3 else 0

        score = immediate_weight * current_to_node + future_weight * avg_remaining_dist + revisit_penalty - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
