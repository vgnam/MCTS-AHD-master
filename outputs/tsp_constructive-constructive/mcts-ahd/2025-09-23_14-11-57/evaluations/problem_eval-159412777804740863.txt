def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))

        exploration_bonus = (node_centrality / avg_distance) * (1 - progress) ** 2
        exploration_weight = 0.6 + 0.3 * progress

        revisit_penalty = 0
        if progress > 0.3:
            revisit_count = total_nodes - remaining_nodes - 1
            revisit_penalty = (revisit_count / total_nodes) ** 2 * (immediate_distance / avg_distance)

        combined_score = (0.4 * immediate_distance) + \
                         (0.1 * (1 / (1 + future_distance))) + \
                         (0.5 * revisit_penalty) - \
                         (exploration_weight * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
