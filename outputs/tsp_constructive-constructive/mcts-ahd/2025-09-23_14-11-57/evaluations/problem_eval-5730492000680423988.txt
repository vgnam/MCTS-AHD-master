def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.5
    base_efficiency_weight = 0.4
    heuristic_weight = 0.3

    stage_factor = 1.0 / (1.0 + 0.1 * remaining_nodes)
    immediate_weight = base_immediate_weight * (1.0 - stage_factor)
    efficiency_weight = base_efficiency_weight * (1.0 + stage_factor)

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = immediate_distance + node_to_dest

        penalty = 0.2 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.3 else 0

        heuristic = sum(min(distance_matrix[node][n], distance_matrix[n][node]) for n in unvisited_nodes if n != node)
        normalized_heuristic = heuristic / (len(unvisited_nodes) - 1) if unvisited_nodes else 0

        combined_score = (immediate_weight * immediate_distance +
                          efficiency_weight * total_increase +
                          heuristic_weight * normalized_heuristic) - penalty

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
