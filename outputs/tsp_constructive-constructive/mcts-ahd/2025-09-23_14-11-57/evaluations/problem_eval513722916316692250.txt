def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights based on node density and distance variance
    distance_variance = np.var([distance_matrix[current_node][node] for node in unvisited_nodes])
    density_factor = remaining_nodes / total_nodes
    immediate_weight = 0.6 + 0.2 * (1 - density_factor) + 0.1 * (distance_variance / max(distance_variance, 1e-6))
    future_weight = 1.0 - immediate_weight

    # Calculate centrality scores for nodes
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes - 1)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Future potential based on average distance to remaining nodes
        future_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)

        # Novel penalty combining distance and centrality
        penalty = (immediate_distance ** 1.5) * (1 + 0.5 * centrality[node])

        # Probabilistic adjustment based on remaining nodes
        prob_factor = np.random.uniform(0.8, 1.2) if remaining_nodes > 2 else 1.0
        combined_score = (immediate_weight * immediate_distance + future_weight * future_potential) * prob_factor - penalty

        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
