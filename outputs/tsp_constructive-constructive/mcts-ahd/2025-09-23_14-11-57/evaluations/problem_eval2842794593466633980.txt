def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    adjusted_progress = progress_factor ** 2

    # Calculate node centrality and diversity factors
    node_centralities = []
    path_diversity = []
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in range(total_nodes))
        centrality = total_distance / (total_nodes - 1)
        node_centralities.append(centrality)

        # Path diversity: penalize nodes visited more frequently in current path
        diversity_score = 1 / (1 + sum(1 for n in unvisited_nodes if n == node))
        path_diversity.append(diversity_score)

    # Calculate future potential by looking ahead 2 steps
    future_potentials = []
    for node in unvisited_nodes:
        potential = distance_matrix[node][destination_node]
        if remaining_nodes > 2:
            next_candidates = [n for n in unvisited_nodes if n != node]
            if next_candidates:
                next_potential = min(distance_matrix[node][n] + distance_matrix[n][destination_node]
                                    for n in next_candidates)
                potential += next_potential * 0.5
        future_potentials.append(potential)

    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]

        # Adaptive weight adjustment with diversity consideration
        distance_weight = (1 - adjusted_progress) * 0.6 + 0.4
        future_weight = adjusted_progress * 0.5 + 0.5
        centrality_weight = 0.2 * (1 - adjusted_progress)
        diversity_weight = 0.3 * (1 - adjusted_progress)

        # Dynamic exploration bonus with path diversity
        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes) * \
                          (1 / (1 + node_centralities[i])) * path_diversity[i]

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_potentials[i]))) + \
                         (centrality_weight * node_centralities[i]) + \
                         (diversity_weight * (1 - path_diversity[i])) - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_node]

    return next_node
