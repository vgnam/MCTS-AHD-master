import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic exploration-exploitation tradeoff using sigmoid
    progress = 1.0 - (remaining_nodes / total_nodes)
    exploration_weight = 1.0 / (1.0 + math.exp(5 * (progress - 0.5)))
    exploitation_weight = 1.0 - exploration_weight

    # Temperature parameter that decays over time
    temperature = math.exp(-5.0 * (1.0 - remaining_nodes / total_nodes))

    # Calculate centrality of unvisited nodes (average distance to others)
    centrality = []
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
        centrality.append(avg_distance)

    scores = []
    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Novelty term based on centrality
        novelty = 1.0 / (centrality[i] + 1e-6)

        # Combined score with temperature adjustment
        combined_score = (exploration_weight * (1.0 / (immediate_distance + 1e-6)) +
                         exploitation_weight * (1.0 / (global_potential + 1e-6)) +
                         0.2 * novelty) * temperature

        scores.append(combined_score)

    # Select node with highest score
    selected_index = scores.index(max(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
