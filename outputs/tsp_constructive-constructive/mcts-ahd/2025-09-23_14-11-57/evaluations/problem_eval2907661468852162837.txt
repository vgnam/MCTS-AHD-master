importance" metric that considers both distance and connectivity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    # Calculate node importance metric
    node_importance = {}
    for node in unvisited_nodes:
        node_importance[node] = (sum(distance_matrix[node]) / (total_nodes - 1)) * (1 - progress)

    # Adaptive weight balancing
    distance_weight = 0.6 * (1 - progress**2)
    future_weight = 0.4 * progress**2
    importance_weight = 0.2 + 0.6 * progress

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic centrality scaling
        centrality_scale = (1 + progress) * (remaining_nodes / total_nodes)
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1) * centrality_scale

        # Hybrid selection components
        distance_component = distance_weight * immediate_distance
        future_component = future_weight * (1 / (1 + future_distance))
        importance_component = importance_weight * node_importance[node]

        # Progress-aware penalty
        if progress > 0.6:
            penalty = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        else:
            penalty = 0

        # Combined score with new hybrid mechanism
        combined_score = distance_component + future_component + importance_component + penalty

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
