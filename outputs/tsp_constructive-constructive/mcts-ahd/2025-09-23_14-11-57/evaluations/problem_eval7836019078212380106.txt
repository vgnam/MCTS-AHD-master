def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight based on remaining nodes (prioritize lookahead as nodes decrease)
    weight_lookahead = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid function
    weight_immediate = 1 - weight_lookahead

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Look-ahead: evaluate the best possible next node after 'node'
        best_lookahead_distance = float('inf')
        for next_node in unvisited_nodes:
            if next_node != node:
                lookahead_distance = distance_matrix[node][next_node]
                if lookahead_distance < best_lookahead_distance:
                    best_lookahead_distance = lookahead_distance

        # Penalty for nodes far from destination (to guide toward completion)
        penalty = 0.2 * distance_matrix[node][destination_node]

        # Weighted score with dynamic weights and penalty
        score = weight_immediate * immediate_distance + weight_lookahead * best_lookahead_distance + penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
