def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Long-term potential: sum of distances to all other unvisited nodes
        long_term_potential = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weights based on remaining nodes
        immediate_weight = 0.5 if remaining_nodes > 3 else 0.3
        long_term_weight = 1.0 - immediate_weight

        # Penalty for nodes with high immediate distance relative to average
        avg_immediate = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
        penalty = 0.2 * (immediate_distance - avg_immediate) if immediate_distance > avg_immediate else 0

        # Combined score with dynamic weights and penalty
        score = (immediate_weight * immediate_distance + long_term_weight * long_term_potential) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
