def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    dynamic_weight = 0.5 + 0.2 * len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Dynamic penalty based on recent node proximity
        penalty = 0.2 * (1.0 / (current_to_node + 1e-6)) ** 2 if current_to_node < 0.7 else 0

        # Weighted score with dynamic adjustment
        score = (dynamic_weight * current_to_node + (1 - dynamic_weight) * total_increase) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
