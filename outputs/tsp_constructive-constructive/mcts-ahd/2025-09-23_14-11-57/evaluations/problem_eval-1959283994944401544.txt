def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    penalty_factor = 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Dynamic penalty scaling

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        revisit_penalty = penalty_factor * current_to_node * (1 + node_to_dest / (sum(distance_matrix[node]) + 1e-6))

        score = current_to_node + revisit_penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
