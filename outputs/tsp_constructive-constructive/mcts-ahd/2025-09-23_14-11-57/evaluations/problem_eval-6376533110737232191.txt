def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress = 1.0 - remaining_nodes / len(distance_matrix)

    decay_factor = 0.5 ** progress
    penalty_weight = 0.1 + 0.9 * (1.0 - decay_factor)
    lookahead_weight = 0.2 * decay_factor

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        penalty = penalty_weight * (1.0 / (current_to_node + 1e-6)) if current_to_node < 0.5 else 0
        combined_score = 0.7 * current_to_node + 0.3 * total_increase + penalty + lookahead_weight * (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes))

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
