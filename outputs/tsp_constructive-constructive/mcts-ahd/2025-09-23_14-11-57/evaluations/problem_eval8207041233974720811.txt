def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    # Dynamic weights based on progress
    immediate_weight = 0.8 - 0.4 * progress
    lookahead_weight = 0.2 + 0.4 * progress

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        # Multi-step lookahead potential
        if remaining_nodes > 2:
            next_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_potential = sum(min(distance_matrix[node][n] + distance_matrix[n][dest] for dest in next_nodes)
                                    for n in next_nodes) / len(next_nodes)
        else:
            lookahead_potential = distance_matrix[node][destination_node]

        # Penalty for nodes too close to current
        penalty = 0.1 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.2 else 0

        # Combined score with dynamic weights
        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_potential + penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
