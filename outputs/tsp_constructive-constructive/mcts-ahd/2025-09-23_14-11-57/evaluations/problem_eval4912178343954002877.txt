def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    penalty_factor = 0.3
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]

        if num_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            weight_factor = 1.0 / (1.0 + 0.1 * num_unvisited)
            weighted_avg_dist = weight_factor * avg_remaining_dist

            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited
            centrality_score = 0.5 * centrality

            revisit_penalty = penalty_factor * distance_matrix[current_node][node]
            score = current_to_node + weighted_avg_dist + centrality_score + revisit_penalty
        else:
            score = current_to_node

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
