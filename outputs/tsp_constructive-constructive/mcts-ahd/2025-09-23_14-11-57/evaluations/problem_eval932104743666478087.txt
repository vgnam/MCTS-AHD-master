def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            connectivity_score = (max_remaining_dist - avg_remaining_dist) / (max_remaining_dist + 1e-6)
            centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in remaining_nodes) / len(remaining_nodes)
            connectivity_penalty = connectivity_score * (1 - centrality)
        else:
            avg_remaining_dist = 0
            connectivity_penalty = 0

        dynamic_factor = 0.7 * (1 - (remaining_count - 1) / remaining_count)
        hybrid_score = current_to_node + dynamic_factor * avg_remaining_dist + 0.3 * connectivity_penalty

        if hybrid_score < best_score:
            best_score = hybrid_score
            best_node = node

    return next_node
