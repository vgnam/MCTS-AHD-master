import numpy as np
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = (total_nodes - remaining_nodes) / total_nodes

    # Greedy selection with dynamic lookahead
    candidate_scores = {}
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]

        # Lookahead cost calculation
        if remaining_nodes == 1:
            lookahead_cost = distance_matrix[node][destination_node]
        else:
            next_candidates = [n for n in unvisited_nodes if n != node]
            lookahead_cost = min([distance_matrix[node][n] + distance_matrix[n][destination_node]
                                for n in next_candidates])

        # Dynamic weighting based on progress
        weight = 0.7 - 0.4 * progress
        combined_score = (weight * immediate_cost) + ((1 - weight) * lookahead_cost)
        candidate_scores[node] = combined_score

    # Select node with best combined score
    next_node = min(candidate_scores, key=candidate_scores.get)

    # Add exploration factor based on progress
    if random.random() < 0.3 * (1 - progress):
        next_node = random.choice(list(unvisited_nodes))

    return next_node
