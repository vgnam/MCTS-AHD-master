def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_degree = sum(1 for d in distance_matrix[node] if d > 0)
        max_degree = max(sum(1 for d in row if d > 0) for row in distance_matrix)
        avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))

        phase_factor = (1 - progress) ** 2 if progress <= 0.5 else progress ** 2
        distance_weight = 0.6 + 0.3 * phase_factor
        future_weight = 0.4 - 0.3 * phase_factor

        exploration_prob = (node_degree / max_degree) * progress
        exploration_bonus = (1 / (1 + future_distance)) * exploration_prob * (1 + (node_degree / max_degree))

        revisit_penalty = 0
        if progress > 0.5:
            revisit_count = total_nodes - remaining_nodes - 1
            revisit_penalty = (revisit_count / total_nodes) * (future_distance / avg_distance)

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_distance) + \
                         revisit_penalty - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
