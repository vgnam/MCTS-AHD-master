def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    exploration_penalties = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        exploration_penalties.append(0.2 * (1.0 / (immediate_distance + 1e-6)))

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = 0.7
    regret_weight = 0.3 * (remaining_nodes / total_nodes)
    exploration_factor = 0.3 + 0.4 * (1.0 - (remaining_nodes / total_nodes))

    scores = [
        distance_weight * distance + regret_weight * regret - exploration_factor * penalty
        for distance, regret, penalty in zip(distances, regrets, exploration_penalties)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
