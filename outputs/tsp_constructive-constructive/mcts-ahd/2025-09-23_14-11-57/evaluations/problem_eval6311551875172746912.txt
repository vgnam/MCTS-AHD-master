def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_increase = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            variance_remaining_dist = sum((distance_matrix[node][n] - avg_remaining_dist) ** 2 for n in remaining_nodes) / len(remaining_nodes)
            connectivity_score = avg_remaining_dist / (1 + variance_remaining_dist)
        else:
            connectivity_score = 0

        exploration_weight = 0.3 + 0.7 * (remaining_count / total_nodes)
        exploitation_weight = 1 - exploration_weight

        weighted_increase = (exploitation_weight * current_to_node +
                             exploration_weight * connectivity_score)

        if weighted_increase < min_weighted_increase:
            min_weighted_increase = weighted_increase
            best_node = node

    return next_node
