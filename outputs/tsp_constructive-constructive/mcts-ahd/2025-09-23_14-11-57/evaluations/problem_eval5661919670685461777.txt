def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_immediate_weight = 0.7
    base_future_weight = 0.3
    stage_factor = 1.0 / (1.0 + 0.2 * remaining_nodes)

    immediate_weight = base_immediate_weight * (1.0 - stage_factor * 0.8)
    future_weight = base_future_weight * (1.0 + stage_factor * 1.2)

    exploration_factor = 1.0 + 0.5 * (1.0 - (remaining_nodes / len(distance_matrix)))

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        local_avg_immediate = sum(distance_matrix[current_node]) / len(distance_matrix)
        local_avg_future = sum(distance_matrix[node]) / len(distance_matrix)
        normalized_immediate = immediate_distance / local_avg_immediate if local_avg_immediate > 0 else 0
        normalized_future = future_potential / local_avg_future if local_avg_future > 0 else 0

        penalty = 0.25 * (1.0 / (immediate_distance + 1e-6)) * exploration_factor
        combined_score = immediate_weight * normalized_immediate + future_weight * normalized_future - penalty

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    return next_node
