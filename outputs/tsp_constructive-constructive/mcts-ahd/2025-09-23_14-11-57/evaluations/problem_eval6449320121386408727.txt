def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    immediate_weight = 0.6 if remaining_nodes > 2 else 0.4
    future_weight = 0.4 if remaining_nodes > 2 else 0.6
    progress = 1 - remaining_nodes / (remaining_nodes + 1)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        penalty = 0
        if progress > 0.7 and remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            penalty = (sum(distance_matrix[current_node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)) ** 2

        combined_score = immediate_weight * immediate_distance + future_weight * future_potential + penalty
        scores.append(combined_score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
