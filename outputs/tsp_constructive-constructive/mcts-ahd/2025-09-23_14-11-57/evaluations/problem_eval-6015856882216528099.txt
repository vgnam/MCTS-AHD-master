def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    min_weighted_score = float('inf')
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            remaining_dists = [distance_matrix[node][n] for n in remaining_nodes]
            avg_remaining_dist = sum(remaining_dists) / len(remaining_dists)
            variance = sum((d - avg_remaining_dist) ** 2 for d in remaining_dists) / len(remaining_dists)
            penalty = variance * (1 / (1 + math.exp(-10 * (progress - 0.5)))) if progress > 0.6 else 0
        else:
            avg_remaining_dist = 0
            penalty = 0

        dynamic_weight = 1 / (1 + math.exp(-8 * (progress - 0.3)))
        weighted_score = immediate_distance + dynamic_weight * future_potential + penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            best_node = node

    return next_node
