defaults to the nearest unvisited node if none are left.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 0.5  # Controls exploration vs. exploitation
    candidates = []
    total_weight = 0.0

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_remaining_dist = 0

        score = current_to_node + (0.7 * avg_remaining_dist)  # Weighted combination
        weight = math.exp(-score / temperature)
        candidates.append((node, weight))
        total_weight += weight

    if total_weight > 0:
        rand_val = random.uniform(0, total_weight)
        cumulative_weight = 0.0
        for node, weight in candidates:
            cumulative_weight += weight
            if rand_val <= cumulative_weight:
                return node

    # Fallback: select nearest node if probabilistic selection fails
    nearest_node = min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])
    return next_node
