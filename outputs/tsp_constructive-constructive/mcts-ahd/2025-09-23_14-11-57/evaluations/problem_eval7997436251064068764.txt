def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_connectivity = len([n for n in unvisited_nodes if n != node and distance_matrix[node][n] < immediate_distance * 1.2])
        node_degree = sum(1 for i in range(total_nodes) if distance_matrix[node][i] > 0)

        distance_weight = 0.8 - 0.6 * progress
        future_weight = 0.4 + 0.2 * progress
        connectivity_weight = 0.3 * (1 - progress)

        regret_score = sum(distance_matrix[current_node][n] - immediate_distance for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * (1 / (1 + future_distance))) + \
                         (connectivity_weight * (1 / (1 + node_connectivity))) + \
                         (0.5 * regret_score)

        if progress < 0.5:
            combined_score *= (1 + 0.3 * (0.5 - progress))

        scores.append(combined_score)

    if remaining_nodes > 2:
        selection_probabilities = [1/score for score in scores]
        total_prob = sum(selection_probabilities)
        selection_probabilities = [p/total_prob for p in selection_probabilities]
        selected_index = np.random.choice(len(unvisited_nodes), p=selection_probabilities)
    else:
        selected_index = scores.index(min(scores))

    next_node = list(unvisited_nodes)[selected_index]

    return next_node
