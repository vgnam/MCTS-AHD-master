def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Dynamic adjustment factor: prioritizes immediate proximity when fewer nodes remain
        adjustment_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2
        weighted_score = (current_to_node * adjustment_factor) + node_to_dest

        if weighted_score < best_score:
            best_score = weighted_score
            best_node = node

    return next_node
