def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes[0]

    best_node = None
    best_score = float('inf')
    scores = []

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]

        if remaining_nodes:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality_penalty = sum(distance_matrix[current_node][n] for n in remaining_nodes) / len(remaining_nodes)
            revisit_penalty = (0.5 + 0.2 * (len(unvisited_nodes) / len(distance_matrix))) * centrality_penalty
        else:
            avg_remaining_dist = 0
            revisit_penalty = 0

        score = current_to_node + avg_remaining_dist + revisit_penalty
        scores.append(score)

        if score < best_score:
            best_score = score
            best_node = node

    normalized_scores = [1 - (s - min(scores)) / (max(scores) - min(scores) + 1e-6) for s in scores]
    probabilities = [s / sum(normalized_scores) for s in normalized_scores]
    selected_idx = np.random.choice(len(unvisited_nodes), p=probabilities)

    return next_node
