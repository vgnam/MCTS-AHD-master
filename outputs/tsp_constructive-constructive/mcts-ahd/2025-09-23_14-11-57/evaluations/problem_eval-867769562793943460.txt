def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    immediate_distances = []
    avg_future_distances = []
    revisit_penalties = []

    for node in unvisited_nodes:
        immediate_distances.append(distance_matrix[current_node][node])

        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            avg_future = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_future = 0
        avg_future_distances.append(avg_future)

        revisit_penalties.append(0.3 * distance_matrix[current_node][node])

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = 0.6 * (remaining_nodes / total_nodes)
    future_weight = 0.4 * (remaining_nodes / total_nodes)
    revisit_weight = 0.2 * (1.0 - (remaining_nodes / total_nodes))

    scores = [
        distance_weight * immediate + future_weight * future + revisit_weight * penalty
        for immediate, future, penalty in zip(immediate_distances, avg_future_distances, revisit_penalties)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
