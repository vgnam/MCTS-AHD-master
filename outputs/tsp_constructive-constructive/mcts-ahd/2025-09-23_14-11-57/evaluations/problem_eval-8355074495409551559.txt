def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    proximity_potentials = []
    penalties = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) if distance_matrix[current_node][node] > second_best else 0
        else:
            regret = 0
        regrets.append(regret)

        # Calculate proximity potential
        proximity_potential = (immediate_distance + future_potential) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        proximity_potentials.append(proximity_potential)

        # Penalize nodes too close
        penalty = 0.15 * (1.0 / (immediate_distance + 1e-6)) if immediate_distance < 0.5 else 0
        penalties.append(penalty)

    # Adaptive weights
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    regret_weight = max(0.1, 0.7 * (remaining_nodes / total_nodes))
    distance_weight = 0.6 * (remaining_nodes / total_nodes)
    proximity_weight = max(0.1, 0.4 * (remaining_nodes / total_nodes))

    # Combine weighted scores with penalty
    scores = [
        regret_weight * regret + distance_weight * distance + proximity_weight * potential - penalty
        for regret, distance, potential, penalty in zip(regrets, distances, proximity_potentials, penalties)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
