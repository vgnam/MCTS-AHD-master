def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 if remaining_nodes > 5 else 0.5
    centrality_weight = 0.5 if remaining_nodes > 3 else 0.9

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            next_nodes = [n for n in unvisited_nodes if n != node]
            future_candidates = [distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_nodes]
            future_potential = min(future_candidates) * centrality_weight + (sum(future_candidates) / len(future_candidates)) * (1 - centrality_weight)
        else:
            future_potential = distance_matrix[node][destination_node]

        penalty = 0.2 * (immediate_distance ** 1.5) if immediate_distance < 0.6 else 0
        combined_score = immediate_distance + temperature * (future_potential - immediate_distance) - penalty

        scores.append(combined_score)

    if remaining_nodes > 4:
        probabilities = [math.exp(-score / temperature) for score in scores]
        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]
        selected_index = numpy.random.choice(len(scores), p=probabilities)
    else:
        selected_index = numpy.argmin(scores)

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
