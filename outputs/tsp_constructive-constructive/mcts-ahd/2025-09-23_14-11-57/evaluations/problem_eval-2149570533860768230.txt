def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    future_potentials = []
    coherence_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)
        future_potentials.append(future_potential)

        # Calculate path coherence
        if len(unvisited_nodes) > 1:
            avg_distance = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m) / (len(unvisited_nodes) * (len(unvisited_nodes) - 1))
            coherence = (immediate_distance + future_potential) / (1 + avg_distance)
        else:
            coherence = 1.0
        coherence_scores.append(coherence)

    # Dynamic weight adjustment (inverted progression)
    progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
    distance_weight = max(0.2, 0.9 - 0.7 * progress)
    future_weight = min(0.8, 0.3 + 0.5 * progress)
    coherence_weight = 0.5 + 0.5 * progress

    # Combined scoring (distance first, then coherence, then future potential)
    scores = [
        distance_weight * distance + coherence_weight * coherence + future_weight * future_potential
        for distance, coherence, future_potential in zip(distances, coherence_scores, future_potentials)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
