def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    potentials = []
    exploration_bonuses = []
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)
        potentials.append(future_potential)

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        exploration_bonus = 1 / (1 + centrality)
        exploration_bonuses.append(exploration_bonus)

    total_nodes = len(distance_matrix)
    exploration_weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))
    distance_weight = 1 - exploration_weight

    scores = []
    for i in range(len(unvisited_nodes)):
        penalty = (sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != list(unvisited_nodes)[i]) / max(1, len(unvisited_nodes) - 1)) ** 2 if progress > 0.8 else 0
        score = distance_weight * distances[i] + distance_weight * potentials[i] + exploration_weight * exploration_bonuses[i] + penalty
        scores.append(score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
