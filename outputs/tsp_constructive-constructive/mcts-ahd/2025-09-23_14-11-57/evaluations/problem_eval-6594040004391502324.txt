import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Sigmoid-based exploration-exploitation trade-off
    progress = 1.0 - remaining_nodes / total_nodes
    exploration_prob = 1.0 / (1.0 + math.exp(5 * (progress - 0.3)))
    exploitation_prob = 1.0 - exploration_prob

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_potential = distance_matrix[node][destination_node]

        # Logarithmic scaling for exploitation
        log_potential = math.log(global_potential + 1.0) if global_potential > 0 else 0.0

        # Dynamic weight adjustment
        weight_factor = 0.5 + 0.5 * math.sin(math.pi * progress)

        # Combined score with hybrid weighting
        combined_score = (exploration_prob * (1.0 / (immediate_distance + 1e-6)) +
                         exploitation_prob * (1.0 / (log_potential + 1e-6))) * weight_factor

        scores.append(combined_score)

    selected_index = scores.index(max(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
