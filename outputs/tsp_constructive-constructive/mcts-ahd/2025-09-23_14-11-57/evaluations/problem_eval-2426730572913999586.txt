def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('inf')

    # Calculate dynamic weight based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    proximity_weight = 0.6 + 0.2 * (1.0 / (remaining_nodes + 1e-6))  # Decreases as more nodes remain
    efficiency_weight = 1.0 - proximity_weight

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        total_increase = current_to_node + node_to_dest

        # Centrality metric: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Non-linear penalty for very short distances
        penalty = 0.2 * (1.0 / (current_to_node + 1e-6)) ** 2 if current_to_node < 0.5 else 0

        # Weighted score with dynamic weights and centrality
        score = (proximity_weight * current_to_node +
                 efficiency_weight * total_increase +
                 0.2 * centrality) - penalty

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
