import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    weights = []
    total_weight = 0.0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        global_estimate = distance_matrix[node][destination_node]

        # Dynamic weighting with sigmoid adjustment and variance penalty
        combined = immediate_distance + 0.4 * global_estimate
        sigmoid_weight = 1.0 / (1.0 + math.exp(-0.1 * combined))

        # Penalize nodes with high local variance in distances
        local_distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        variance_penalty = 1.0 if not local_distances else 1.0 - (max(local_distances) - min(local_distances)) / (sum(local_distances) / len(local_distances) if local_distances else 1.0)

        weight = sigmoid_weight * variance_penalty
        weights.append(weight)
        total_weight += weight

    if total_weight == 0:
        return random.choice(unvisited_nodes)

    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
