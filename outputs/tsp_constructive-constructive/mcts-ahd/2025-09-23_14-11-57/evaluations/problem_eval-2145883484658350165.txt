def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    future_potentials = []
    coherence_scores = []
    exploration_penalties = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]
        distances.append(immediate_distance)
        future_potentials.append(future_potential)

        # Calculate path coherence
        if len(unvisited_nodes) > 1:
            avg_distance = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m) / (len(unvisited_nodes) * (len(unvisited_nodes) - 1))
            coherence = (immediate_distance + future_potential) / (1 + avg_distance)
        else:
            coherence = 1.0
        coherence_scores.append(coherence)

        # Calculate exploration penalty
        exploration_penalty = 0.15 * (1.0 / (immediate_distance + 1e-6)) * (1.0 + 0.4 * (1.0 - (len(unvisited_nodes) / len(distance_matrix))))
        exploration_penalties.append(exploration_penalty)

    # Dynamic weight adjustment
    progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
    regret_weight = max(0.2, 0.9 - 0.7 * progress)
    distance_weight = 0.5 + 0.5 * progress
    coherence_weight = min(0.8, 0.3 + 0.5 * progress)

    # Calculate scores
    scores = []
    for i, node in enumerate(unvisited_nodes):
        # Calculate regret
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = max(0, distance_matrix[current_node][node] - second_best)
        else:
            regret = 0

        # Combined score
        score = (regret_weight * regret +
                 distance_weight * distances[i] +
                 coherence_weight * coherence_scores[i] -
                 exploration_penalties[i])
        scores.append(score)

    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
