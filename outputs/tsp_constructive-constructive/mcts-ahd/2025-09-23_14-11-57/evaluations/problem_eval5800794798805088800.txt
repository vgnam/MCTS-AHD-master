def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        avg_distance = sum(distance_matrix[node]) / total_nodes
        normalized_reward = (1 / (1 + future_distance)) * (avg_distance / future_distance)

        dynamic_weight = 1 - (progress_factor * (1 - math.exp(-immediate_distance)))
        combined_score = dynamic_weight * immediate_distance + (1 - dynamic_weight) * (1 / normalized_reward)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
