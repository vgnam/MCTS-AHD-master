def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    penalties = []
    connectivity_scores = []
    progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = distance_matrix[node][destination_node]
        distances.append(immediate_distance)

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = (sum(distance_matrix[current_node][n] for n in remaining_nodes) / len(remaining_nodes)) ** 2 if progress > 0.7 else 0
        else:
            penalty = 0
        penalties.append(penalty)

        connectivity_score = (immediate_distance + future_connectivity) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        connectivity_scores.append(connectivity_score)

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = max(0.3, 0.9 * (remaining_nodes / total_nodes))
    connectivity_weight = 1.0 - distance_weight

    scores = [
        distance_weight * distance + connectivity_weight * connectivity + penalty
        for distance, connectivity, penalty in zip(distances, connectivity_scores, penalties)
    ]
    min_score = min(scores)
    selected_index = scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
