def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    regrets = []
    clusterings = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distances.append(immediate_distance)

        # Dynamic regret calculation with scaling
        other_nodes = [n for n in unvisited_nodes if n != node]
        if other_nodes:
            second_best = min(distance_matrix[current_node][n] for n in other_nodes)
            regret = (distance_matrix[current_node][node] - second_best) * (len(unvisited_nodes) / len(distance_matrix))
        else:
            regret = 0
        regrets.append(regret)

        # Selective look-ahead clustering with adaptive depth
        depth = min(3, len(unvisited_nodes))
        nearby_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:depth]
        nearby_distances = [distance_matrix[node][n] for n in nearby_nodes]
        future_distances = [distance_matrix[node][destination_node]] if destination_node in unvisited_nodes else []
        all_distances = nearby_distances + future_distances
        clustering = 1 / (sum(all_distances) / len(all_distances)) if all_distances else 0
        clusterings.append(clustering)

    # Adaptive phase-based weights with probabilistic selection
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    phase = 1 - (remaining_nodes / total_nodes)
    regret_weight = max(0.1, 0.9 * (1 - phase**2))
    distance_weight = 0.2 * phase
    clustering_weight = 0.3 * phase**2 + 0.1 * (1 - phase)

    # Weighted scores with probabilistic selection
    scores = [regret_weight * regret + distance_weight * distance + clustering_weight * clustering
              for regret, distance, clustering in zip(regrets, distances, clusterings)]
    min_score = min(scores)
    candidates = [i for i, score in enumerate(scores) if score <= min_score * 1.1]
    selected_index = candidates[0] if len(candidates) == 1 else random.choice(candidates)

    next_node = list(unvisited_nodes)[selected_index]
    return next_node
