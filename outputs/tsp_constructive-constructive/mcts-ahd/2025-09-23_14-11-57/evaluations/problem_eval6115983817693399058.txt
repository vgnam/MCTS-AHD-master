importance, historical path influence, and predictive tour quality, where weights are adjusted based on the current phase (exploration vs. exploitation) and node characteristics, favoring nodes with high immediate relevance and long-term potential while penalizing those with high uncertainty or redundancy.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    phase_factor = len(unvisited_nodes) / len(distance_matrix)
    exploration_weight = 0.6 * phase_factor + 0.2
    exploitation_weight = 0.4 * (1 - phase_factor) + 0.2

    node_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node]

        node_importance = (immediate_distance + future_potential) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        path_history = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        uncertainty = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        redundancy = sum(1 for n in unvisited_nodes if distance_matrix[node][n] == immediate_distance) / len(unvisited_nodes) if unvisited_nodes else 0

        exploration_score = node_importance * (1 - uncertainty) + path_history * (1 - redundancy)
        exploitation_score = immediate_distance + future_potential

        node_score = exploration_weight * exploration_score + exploitation_weight * exploitation_score
        node_scores.append(node_score)

    min_score = min(node_scores)
    selected_index = node_scores.index(min_score)
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
