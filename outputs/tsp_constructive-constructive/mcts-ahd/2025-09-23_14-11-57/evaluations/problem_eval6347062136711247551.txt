def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (remaining_nodes + 1)

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        centrality[node] = avg_distance

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_potential = 0

        if remaining_nodes > 1:
            next_nodes = [n for n in unvisited_nodes if n != node]
            future_potential = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_nodes)

        # Combine immediate distance, future potential, and centrality
        combined_score = (0.5 * immediate_distance + 0.3 * future_potential + 0.2 * centrality[node])

        # Apply Boltzmann distribution
        probability = math.exp(-combined_score / temperature)
        scores.append((node, probability))

    # Select node based on probabilities
    nodes, probabilities = zip(*scores)
    selected_node = random.choices(nodes, weights=probabilities, k=1)[0]

    return next_node
