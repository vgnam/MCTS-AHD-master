def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        distance_weight = (1 - progress_factor) * 0.8 + 0.2
        future_weight = progress_factor * 0.7 + 0.3

        # Penalty based on progress
        if remaining_nodes <= 0.7 * total_nodes:
            penalty = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) ** 2 / len(unvisited_nodes) if unvisited_nodes else 0
        else:
            penalty = 0

        # Exploration bonus
        exploration_bonus = (1 / (1 + immediate_distance)) * (remaining_nodes / total_nodes)

        combined_score = (distance_weight * immediate_distance) + \
                         (future_weight * future_distance) + \
                         penalty - \
                         (0.5 * exploration_bonus)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
