def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_potential = (1 / (1 + immediate_distance)) * (1 / (1 + future_distance))
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality_weight = centrality / max(distance_matrix[node]) if max(distance_matrix[node]) != 0 else 0

        exploration_weight = (1 - progress_factor) * 0.5 + 0.3 + (0.2 * centrality_weight)
        exploitation_weight = progress_factor * 0.4 + 0.6 - (0.1 * centrality_weight)

        exploration_bonus = node_potential * exploration_weight * (remaining_nodes / total_nodes)
        exploitation_score = (immediate_distance + future_distance) * exploitation_weight

        penalty = (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) ** 1.5 if progress_factor > 0.6 else 0

        combined_score = exploitation_score - exploration_bonus + (0.7 * penalty)

        scores.append(combined_score)

    selected_index = scores.index(min(scores))
    next_node = list(unvisited_nodes)[selected_index]

    return next_node
