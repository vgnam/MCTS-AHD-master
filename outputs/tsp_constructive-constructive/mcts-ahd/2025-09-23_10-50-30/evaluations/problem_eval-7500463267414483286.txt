def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    # Calculate average distance in the remaining graph
    remaining_nodes = unvisited_nodes - {current_node}
    if remaining_nodes:
        total_avg_distance = sum(distance_matrix[n1][n2] for n1 in remaining_nodes for n2 in remaining_nodes if n1 != n2)
        avg_distance = total_avg_distance / (len(remaining_nodes) * (len(remaining_nodes) - 1)) if len(remaining_nodes) > 1 else 0
    else:
        avg_distance = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_after_visit = unvisited_nodes - {node}

        # Dynamic weight for immediate cost (higher when more nodes remain)
        immediate_weight = 0.3 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))

        # Penalty for nodes distant from current node relative to average distance
        distance_penalty = max(0, (distance_to_node - avg_distance) / (avg_distance + 1e-6)) if avg_distance > 0 else 0

        # Score combines immediate cost and long-term savings with dynamic weight
        score = (distance_matrix[node][destination_node] - distance_to_node) - immediate_weight * distance_to_node - distance_penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
