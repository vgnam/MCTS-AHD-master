def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited if total_unvisited else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            max_remaining_distance = 0
            avg_remaining_distance = 0
            exploration_factor = 0
        else:
            max_remaining_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes)
            avg_remaining_distance = total_remaining_distance / len(remaining_nodes)
            exploration_factor = sum(1 / (distance_matrix[node][n] + 1e-6) for n in remaining_nodes) / len(remaining_nodes)

        reduction = max_remaining_distance - distance_to_node
        savings = avg_remaining_distance - distance_to_node
        weight = (total_unvisited / (total_unvisited + 1)) * (1 - current_path_length / (sum(sum(row) for row in distance_matrix) / (len(distance_matrix) * len(distance_matrix))))

        score = (1 - weight) * reduction + weight * savings + 0.2 * exploration_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
