def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight = remaining_nodes / (remaining_nodes + 1)  # Dynamic weight based on remaining nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate angular heuristic to encourage exploration
        if current_node != destination_node:
            prev_distance = distance_matrix[current_node][destination_node]
            angle_heuristic = (prev_distance - distance_to_node - distance_to_destination) / (prev_distance + 1e-10)
        else:
            angle_heuristic = 0

        # Combine weighted proximity and angular heuristic
        score = (1 - weight) * distance_to_destination - weight * distance_to_node + 0.5 * angle_heuristic

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
