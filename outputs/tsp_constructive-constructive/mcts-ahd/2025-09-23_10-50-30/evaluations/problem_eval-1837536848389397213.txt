def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_count = len(unvisited_nodes)
    temperature = max(0.1, 1.0 / (1 + remaining_count))  # Decreasing temperature

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes) if remaining_nodes else 0

        # Dynamic weight adjustment with temperature
        weight_factor = (remaining_count / (remaining_count + len(unvisited_nodes))) ** temperature
        reward_term = avg_remaining_distance - distance_to_node
        penalty_term = (distance_to_node ** 2) * (1 - weight_factor)
        score = reward_term - penalty_term
        scores.append(score)

    # Convert scores to probabilities using softmax with temperature
    max_score = max(scores) if scores else 0
    exp_scores = [math.exp((s - max_score) / temperature) for s in scores]
    sum_exp = sum(exp_scores)
    probabilities = [e / sum_exp for e in exp_scores] if sum_exp > 0 else [1.0 / len(scores)] * len(scores)

    # Select node based on probabilities
    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
