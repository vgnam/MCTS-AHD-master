def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes)
            avg_remaining_distance = total_remaining_distance / len(remaining_nodes)
        else:
            avg_remaining_distance = 0

        priority_factor = (remaining_count / total_nodes) * 0.5 + 0.5
        future_cost_estimate = avg_remaining_distance * priority_factor
        immediate_cost = distance_to_node * (1 + (distance_to_destination / (distance_to_node + 1)))

        score = immediate_cost + future_cost_estimate

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
