def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}
        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes) if remaining_nodes else 0
        savings = avg_remaining_distance - distance_to_node

        # Dynamic weights based on remaining nodes
        savings_weight = 1.0 / (1.0 + remaining_count)
        proximity_weight = 0.5 * (1.0 - savings_weight)
        distance_weight = 0.3 * (1.0 - savings_weight)

        score = (savings_weight * savings) + (proximity_weight * distance_to_destination) + (distance_weight * distance_to_node)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
