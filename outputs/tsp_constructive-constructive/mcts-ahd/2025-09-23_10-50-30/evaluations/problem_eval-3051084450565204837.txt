def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes_count = len(unvisited_nodes)
    base_weight = remaining_nodes_count / (remaining_nodes_count + 1)

    # Calculate variance of distances to unvisited nodes
    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    mean_distance = sum(distances_to_unvisited) / len(distances_to_unvisited)
    variance = sum((d - mean_distance) ** 2 for d in distances_to_unvisited) / len(distances_to_unvisited)

    # Adjust weight based on variance (lower variance reduces weight)
    weight = base_weight * (1 - 0.5 * variance / (mean_distance + 1e-6)) if mean_distance > 0 else base_weight

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}
        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes_after_visit) if remaining_nodes_after_visit else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes_after_visit) if remaining_nodes_after_visit else 0
        score = (1 - weight) * avg_remaining_distance + weight * distance_to_node

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
