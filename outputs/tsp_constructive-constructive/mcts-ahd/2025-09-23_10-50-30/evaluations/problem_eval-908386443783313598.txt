def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    remaining_path_length = len(unvisited_nodes) + 1  # +1 for the return to destination

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        # Dynamic weight adjustment based on remaining path length
        weight_immediate = 1.0 / (1.0 + (remaining_path_length ** 0.5))
        weight_destination = 1.0 - weight_immediate
        weight_centrality = 0.5 * (1.0 / (1.0 + (remaining_path_length ** 0.3)))

        # Score calculation with dynamic weights
        score = (weight_immediate * immediate_distance) + \
                (weight_destination * destination_distance) + \
                (weight_centrality * (1.0 / (centrality + 1)))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
