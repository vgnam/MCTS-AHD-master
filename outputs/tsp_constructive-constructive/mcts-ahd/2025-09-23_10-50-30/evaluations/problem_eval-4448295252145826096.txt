def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    weight = 0.6  # Higher weight for immediate cost

    remaining_nodes = unvisited_nodes - {current_node}
    if remaining_nodes:
        total_avg_distance = sum(distance_matrix[n1][n2] for n1 in remaining_nodes for n2 in remaining_nodes if n1 != n2)
        avg_distance = total_avg_distance / (len(remaining_nodes) * (len(remaining_nodes) - 1)) if len(remaining_nodes) > 1 else 0
    else:
        avg_distance = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}

        if not remaining_nodes_after_visit:
            max_remaining_distance = 0
            avg_remaining_distance = 0
        else:
            max_remaining_distance = max(distance_matrix[node][n] for n in remaining_nodes_after_visit)
            total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes_after_visit)
            avg_remaining_distance = total_remaining_distance / len(remaining_nodes_after_visit)

        reduction = max_remaining_distance - distance_to_node
        savings = avg_remaining_distance - distance_to_node
        score = weight * distance_to_node + (1 - weight) * (0.7 * -reduction + 0.3 * savings)  # Different weights for reduction and savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
