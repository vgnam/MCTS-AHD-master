def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes_count = len(unvisited_nodes)
    lookahead_depth = max(1, min(3, remaining_nodes_count // 2))  # Dynamic depth based on remaining nodes

    for node in unvisited_nodes:
        immediate_score = -distance_matrix[current_node][node]

        remaining_nodes = unvisited_nodes - {node}
        lookahead_score = 0
        if remaining_nodes:
            next_nodes = list(remaining_nodes)[:lookahead_depth]
            for next_node_candidate in next_nodes:
                lookahead_score += -distance_matrix[node][next_node_candidate]

        # Adaptive weighting: favor proximity early, future optimization later
        proximity_weight = 0.7 if remaining_nodes_count > len(unvisited_nodes) // 2 else 0.4
        future_weight = 1 - proximity_weight
        total_score = immediate_score * proximity_weight + future_weight * lookahead_score

        if total_score > best_score:
            best_score = total_score
            next_node = node

    return next_node
