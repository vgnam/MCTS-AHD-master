import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            max_remaining_distance = 0
            avg_remaining_distance = 0
            var_remaining_distance = 0
        else:
            remaining_distances = [distance_matrix[node][n] for n in remaining_nodes]
            max_remaining_distance = max(remaining_distances)
            avg_remaining_distance = sum(remaining_distances) / len(remaining_distances)
            var_remaining_distance = sum((d - avg_remaining_distance) ** 2 for d in remaining_distances) / len(remaining_distances)

        reduction = max_remaining_distance - distance_to_node
        savings = avg_remaining_distance - distance_to_node
        novelty_penalty = var_remaining_distance / (avg_remaining_distance + 1e-6)

        proximity_weight = 1 / (1 + math.exp(-(len(unvisited_nodes) - len(remaining_nodes))))
        score = proximity_weight * reduction + (1 - proximity_weight) * savings - novelty_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
