import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0
    remaining_count = len(unvisited_nodes)
    temperature = 1.0 - (remaining_count / (remaining_count + len(unvisited_nodes)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty_term = math.exp(distance_to_node * temperature) * (distance_to_destination ** 2)
        score = (distance_to_node * distance_to_destination) + penalty_term
        scores.append((node, score))
        total_score += score

    if total_score == 0:
        return min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    probabilities = [1.0 / (score + 1e-6) for _, score in scores]
    prob_sum = sum(probabilities)
    normalized_probs = [p / prob_sum for p in probabilities]

    import random
    next_node = random.choices([node for node, _ in scores], weights=normalized_probs, k=1)[0]
    return next_node
