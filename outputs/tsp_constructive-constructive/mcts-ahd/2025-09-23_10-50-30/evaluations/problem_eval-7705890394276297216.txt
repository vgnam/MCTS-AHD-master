importance of immediate proximity, global alignment, and centrality based on the remaining path length, using a sigmoid function to smooth transitions between these factors. It also introduces a penalty for nodes that are outliers in terms of distance to the destination.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        # Dynamic weighting based on remaining path length
        remaining_length = len(unvisited_nodes)
        weight_factor = 1 / (1 + math.exp(-0.1 * (remaining_length - 5)))

        # Penalize nodes that are outliers in distance to destination
        avg_destination_distance = sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / total_unvisited
        penalty = 1 + (distance_to_destination - avg_destination_distance) ** 2 / (avg_destination_distance ** 2 + 1e-6)

        score = (distance_to_node * (1 - weight_factor) +
                 distance_to_destination * weight_factor +
                 (1 / (centrality + 1))) * penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
