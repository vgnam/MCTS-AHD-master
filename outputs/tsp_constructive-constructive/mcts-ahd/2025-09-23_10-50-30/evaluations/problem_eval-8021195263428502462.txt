def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_score = -distance_matrix[current_node][node]

        lookahead_weight = min(0.5, 0.3 * (total_unvisited / len(distance_matrix))) if total_unvisited > 2 else 0.1

        remaining_nodes = unvisited_nodes - {node}
        lookahead_score = 0
        if remaining_nodes:
            next_nodes = list(remaining_nodes)[:2]
            for next_node_candidate in next_nodes:
                lookahead_score += -distance_matrix[node][next_node_candidate]

        density_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        total_score = immediate_score + lookahead_weight * lookahead_score - 0.2 * density_penalty

        if total_score > best_score:
            best_score = total_score
            next_node = node

    return next_node
