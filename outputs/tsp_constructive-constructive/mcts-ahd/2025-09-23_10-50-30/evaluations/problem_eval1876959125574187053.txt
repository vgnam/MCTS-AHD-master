def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    lookahead_depth = 2

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes) if remaining_nodes else 0
        savings = avg_remaining_distance - distance_to_node

        lookahead_score = 0
        if remaining_nodes:
            next_nodes = list(remaining_nodes)[:lookahead_depth]
            for next_node_candidate in next_nodes:
                lookahead_score += -distance_matrix[node][next_node_candidate]

        total_score = savings + 0.3 * lookahead_score

        if total_score > best_score:
            best_score = total_score
            next_node = node

    return next_node
