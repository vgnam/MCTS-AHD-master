def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality = len(remaining_nodes) / sum(distance_matrix[node][n] for n in remaining_nodes)
        else:
            avg_distance = 0
            centrality = 0

        dynamic_weight = 1.0 + (0.5 * (len(unvisited_nodes) / len(distance_matrix)))
        score = (distance_to_node * dynamic_weight) + (0.4 * distance_to_destination) + (0.2 * avg_distance) - (0.3 * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
