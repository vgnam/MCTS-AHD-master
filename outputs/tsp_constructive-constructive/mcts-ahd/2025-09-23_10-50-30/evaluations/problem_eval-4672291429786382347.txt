def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes) if remaining_nodes else 0

        # Aggressive dynamic weight adjustment based on remaining nodes
        weight_factor = (1.0 - (remaining_count / (remaining_count + len(unvisited_nodes)))) ** 2
        penalty_term = (distance_to_node ** 2) * weight_factor
        score = (avg_remaining_distance - distance_to_node) - penalty_term

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
