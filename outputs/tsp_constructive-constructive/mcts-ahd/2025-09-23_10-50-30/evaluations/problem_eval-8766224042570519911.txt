def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}
        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes) if remaining_nodes else 0
        savings = avg_remaining_distance - distance_to_node

        if remaining_count > 1:
            variance = sum((distance_matrix[node][n] - avg_remaining_distance) ** 2 for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
            dynamic_weight = 0.8 if remaining_count > len(unvisited_nodes) // 2 else 0.4
            score = dynamic_weight * savings + 0.3 * distance_to_destination + 0.2 * distance_to_node - 0.1 * variance
        else:
            score = 0.6 * savings + 0.3 * distance_to_destination + 0.1 * distance_to_node

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
