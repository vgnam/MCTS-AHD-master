def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_remaining_distance = 0
            centrality = 0

        decay_factor = (remaining_count / (remaining_count + len(unvisited_nodes))) ** 2
        exploration_term = centrality * (1 - decay_factor) * (1 + 0.1 * (len(unvisited_nodes) - remaining_count))
        score = (avg_remaining_distance - distance_to_node) * (1 + exploration_term)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
