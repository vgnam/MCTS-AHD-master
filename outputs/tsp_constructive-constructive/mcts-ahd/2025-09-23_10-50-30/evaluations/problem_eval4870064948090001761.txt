def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes_count = len(unvisited_nodes)
    temperature = max(1.0, remaining_nodes_count)  # Higher temperature for more exploration
    novelty_factor = 1.0 / (1.0 + len(unvisited_nodes))  # Encourages visiting less frequent nodes

    visit_counts = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        if node in visit_counts:
            visit_counts[node] += 1

    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}

        if not remaining_nodes_after_visit:
            max_remaining_distance = 0
            avg_remaining_distance = 0
        else:
            max_remaining_distance = max(distance_matrix[node][n] for n in remaining_nodes_after_visit)
            total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes_after_visit)
            avg_remaining_distance = total_remaining_distance / len(remaining_nodes_after_visit)

        reduction = max_remaining_distance - distance_to_node
        savings = avg_remaining_distance - distance_to_node
        novelty_score = novelty_factor * (1.0 / (1.0 + visit_counts[node]))
        score = (distance_to_node + novelty_score) / (1.0 + reduction + savings)

        scores.append((node, score))

    # Apply softmax with temperature to get probabilities
    exp_scores = [math.exp(-s[1] / temperature) for s in scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [e / sum_exp_scores for e in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([s[0] for s in scores], weights=probabilities, k=1)[0]
    return next_node
