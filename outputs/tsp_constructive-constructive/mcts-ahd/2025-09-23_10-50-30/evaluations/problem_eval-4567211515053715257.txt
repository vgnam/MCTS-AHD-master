def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    # Calculate average distance of unvisited nodes to the destination
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalize distance to node and distance to destination
        norm_distance_to_node = distance_to_node / max(distance_matrix[current_node][n] for n in unvisited_nodes + [destination_node])
        norm_distance_to_destination = distance_to_destination / max(distance_matrix[n][destination_node] for n in unvisited_nodes + [current_node])

        # Weighted score combining normalized distances and average distance factor
        score = (0.6 * (1 - norm_distance_to_node)) + (0.3 * norm_distance_to_destination) + (0.1 * (distance_to_destination / avg_distance))

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
