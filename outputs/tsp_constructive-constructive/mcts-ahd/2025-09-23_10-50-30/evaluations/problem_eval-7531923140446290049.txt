def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0

        # Dynamic weight adjustment: destination weight increases as unvisited nodes decrease
        destination_weight = 0.5 + (0.5 * (1 - num_unvisited / len(unvisited_nodes)))
        score = distance_to_node + destination_weight * distance_to_destination + 0.3 * avg_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
