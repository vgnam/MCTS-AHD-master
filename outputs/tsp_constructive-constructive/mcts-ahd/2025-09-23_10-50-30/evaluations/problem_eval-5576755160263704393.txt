def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    alpha = 0.7  # Weight for reduction, 1-alpha for distance

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        max_remaining_distance = max(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0
        reduction = max_remaining_distance - distance_to_node
        composite_score = alpha * reduction - (1 - alpha) * distance_to_node

        if composite_score > best_score:
            best_score = composite_score
            next_node = node

    return next_node
