def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_distance = float('inf')
    base_bias = 0.3
    remaining_nodes = len(unvisited_nodes)

    # Dynamic bias adjustment based on remaining nodes
    dynamic_bias = base_bias * (1 + (1 / (remaining_nodes + 1)))

    # Nearest neighbor selection
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Lookahead mechanism: evaluate the impact of selecting destination or nearest neighbor
    if destination_node in unvisited_nodes:
        distance_to_destination = distance_matrix[current_node][destination_node]
        destination_lookahead = distance_to_destination + distance_matrix[destination_node][current_node]

        nearest_neighbor_lookahead = min_distance + distance_matrix[next_node][current_node]

        # Bias towards destination if it significantly reduces total path length
        if (destination_lookahead < nearest_neighbor_lookahead) and \
           (distance_to_destination < min_distance * (1 - dynamic_bias)):
            next_node = destination_node

    return next_node
