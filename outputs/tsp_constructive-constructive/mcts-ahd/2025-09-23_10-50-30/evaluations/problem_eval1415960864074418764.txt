def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes_count = len(unvisited_nodes)
    weight = 1 / (1 + (remaining_nodes_count / (remaining_nodes_count + 1)) ** 2)

    remaining_nodes = unvisited_nodes - {current_node}
    if remaining_nodes:
        distances = [distance_matrix[n1][n2] for n1 in remaining_nodes for n2 in remaining_nodes if n1 != n2]
        avg_distance = sum(distances) / len(distances) if distances else 0
        var_distance = sum((d - avg_distance) ** 2 for d in distances) / len(distances) if distances else 0
    else:
        avg_distance = 0
        var_distance = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}

        if not remaining_nodes_after_visit:
            max_remaining_distance = 0
            avg_remaining_distance = 0
            var_remaining_distance = 0
        else:
            remaining_distances = [distance_matrix[node][n] for n in remaining_nodes_after_visit]
            max_remaining_distance = max(remaining_distances)
            avg_remaining_distance = sum(remaining_distances) / len(remaining_distances)
            var_remaining_distance = sum((d - avg_remaining_distance) ** 2 for d in remaining_distances) / len(remaining_distances)

        reduction = max_remaining_distance - distance_to_node
        savings = avg_remaining_distance - distance_to_node
        variance_penalty = var_remaining_distance / (var_distance + 1e-6)
        score = (1 - weight) * (-reduction + savings * variance_penalty) + weight * distance_to_node

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
