def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    remaining_nodes_count = len(unvisited_nodes)
    weight = remaining_nodes_count / (remaining_nodes_count + 2)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}
        remaining_distances = [distance_matrix[node][n] for n in remaining_nodes_after_visit] if remaining_nodes_after_visit else [0]
        avg_remaining_distance = sum(remaining_distances) / len(remaining_distances)
        std_dev_remaining_distance = (sum((d - avg_remaining_distance) ** 2 for d in remaining_distances) / len(remaining_distances)) ** 0.5 if len(remaining_distances) > 1 else 0
        penalty = 0.1 * std_dev_remaining_distance
        score = (1 - weight) * (avg_remaining_distance + penalty) + weight * distance_to_node

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
