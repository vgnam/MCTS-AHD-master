def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 - (remaining_nodes / len(distance_matrix)) ** 2

    next_node = None
    max_score = -float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        probabilistic_factor = (1 / (1 + distance_to_node)) * (distance_to_destination / (1 + centrality))

        score = (exploration_weight * distance_to_destination - (1 - exploration_weight) * distance_to_node) + probabilistic_factor

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
