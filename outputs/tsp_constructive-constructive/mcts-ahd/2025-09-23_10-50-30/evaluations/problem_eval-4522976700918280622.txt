def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}
        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes_after_visit) if remaining_nodes_after_visit else 0
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes_after_visit) if remaining_nodes_after_visit else 0

        if avg_remaining_distance == 0:
            weight = 1.0
        else:
            ratio = distance_to_node / avg_remaining_distance
            weight = 1 / (1 + ratio)  # Higher weight for long-term savings when ratio is high

        score = (1 - weight) * avg_remaining_distance + weight * distance_to_node

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
