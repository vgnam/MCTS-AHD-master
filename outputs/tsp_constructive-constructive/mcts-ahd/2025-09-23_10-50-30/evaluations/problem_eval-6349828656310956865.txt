def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    weight = 0.3

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        remaining_nodes_after_visit = unvisited_nodes - {node}

        if not remaining_nodes_after_visit:
            max_remaining_distance = 0
            avg_remaining_distance = 0
        else:
            max_remaining_distance = max(distance_matrix[node][n] for n in remaining_nodes_after_visit)
            total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes_after_visit)
            avg_remaining_distance = total_remaining_distance / len(remaining_nodes_after_visit)

        reduction = max_remaining_distance - distance_to_node
        savings = avg_remaining_distance - distance_to_node
        score = (1 - weight) * (-reduction + savings) + weight * distance_to_node * 0.9

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
