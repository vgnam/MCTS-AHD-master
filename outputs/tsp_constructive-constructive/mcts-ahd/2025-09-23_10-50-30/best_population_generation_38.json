{
     "algorithm": "The algorithm dynamically balances short-term (current distance) and long-term (average remaining distances) costs, penalizing higher immediate costs more heavily when few nodes remain and prioritizing long-term savings when more nodes are left. The scoring function uses a non-linear penalty term based on the proportion of unvisited nodes, where the penalty for immediate distance is squared and weighted by the remaining node count. The algorithm prioritizes nodes that minimize the difference between long-term savings and penalized immediate costs, adapting decisions based on the remaining problem scale.",
     "thought": "The new algorithm introduces a dynamic weight adjustment mechanism that balances short-term and long-term costs, where higher immediate costs are penalized more heavily when fewer nodes remain, while long-term savings are prioritized when more nodes are left. The scoring function incorporates a non-linear penalty term based on the proportion of unvisited nodes to ensure adaptive decision-making.",
     "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    max_score = -float('inf')\n    remaining_count = len(unvisited_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_node = distance_matrix[current_node][node]\n        remaining_nodes = unvisited_nodes - {node}\n        total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0\n        avg_remaining_distance = total_remaining_distance / len(remaining_nodes) if remaining_nodes else 0\n\n        # Dynamic weight adjustment based on remaining nodes\n        weight_factor = 1.0 - (remaining_count / (remaining_count + len(unvisited_nodes)))\n        penalty_term = (distance_to_node ** 2) * weight_factor\n        score = (avg_remaining_distance - distance_to_node) - penalty_term\n\n        if score > max_score:\n            max_score = score\n            next_node = node\n\n    return next_node",
     "objective": 6.41068,
     "other_inf": null
}