import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 0.7 * (remaining_nodes / total_nodes)  # Dynamic temperature based on remaining nodes

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        min_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes)
        dest_bias = max(0, 1 - (dest_distance / (min_distance + 1e-10)))  # Normalized bias toward destination

        if random.random() < (temperature * dest_bias):
            return destination_node

    min_distance = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node
    return next_node
