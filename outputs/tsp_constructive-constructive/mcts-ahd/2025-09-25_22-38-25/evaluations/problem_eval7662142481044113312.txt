def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
    else:
        destination_distance = float('inf')

    distances = []
    nodes = []
    for node in unvisited_nodes:
        distances.append(distance_matrix[current_node][node])
        nodes.append(node)

    if not distances:
        return None

    min_distance = min(distances)
    max_distance = max(distances)

    if max_distance == min_distance:
        probabilities = [1.0 / len(distances)] * len(distances)
    else:
        probabilities = [(max_distance - d + 1e-6) / (max_distance - min_distance + 1e-6) for d in distances]
        probabilities = [p ** (1.0 / temperature) for p in probabilities]

    sum_prob = sum(probabilities)
    probabilities = [p / sum_prob for p in probabilities]

    next_node = np.random.choice(nodes, p=probabilities)
    return next_node
