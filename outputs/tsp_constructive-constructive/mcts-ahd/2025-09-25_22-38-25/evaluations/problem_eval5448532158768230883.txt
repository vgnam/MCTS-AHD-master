import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    destination_prob = min(0.6 + (1 - 0.6) * (1 - total_unvisited / (total_unvisited + 1)), 0.9)
    explore_prob = max(0.4 - 0.4 * (1 - total_unvisited / (total_unvisited + 1)), 0.2)

    if destination_node in unvisited_nodes and random.random() < destination_prob:
        return destination_node

    min_distance = float('inf')
    next_node = None
    weighted_scores = {}

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

        if destination_node in unvisited_nodes:
            dest_distance = distance_matrix[node][destination_node]
            weighted_scores[node] = distance * (1 + 0.3 * (1 - dest_distance / distance_matrix[current_node][destination_node]))

    if not weighted_scores:
        return next_node

    if random.random() < explore_prob:
        nearby_nodes = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= min_distance * 1.1]
        if nearby_nodes:
            return random.choices(nearby_nodes, weights=[weighted_scores[node] for node in nearby_nodes], k=1)[0]

    return next_node
