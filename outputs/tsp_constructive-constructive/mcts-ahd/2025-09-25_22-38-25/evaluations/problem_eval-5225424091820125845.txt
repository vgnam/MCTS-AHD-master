import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 0.9 * (total_unvisited / (total_unvisited + 1)))

    # Calculate attraction factors for each node
    attraction_factors = {}
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][node]
        if destination_node in unvisited_nodes:
            dest_distance = distance_matrix[node][destination_node]
            attraction = (1 / (direct_distance + 1e-6)) * (1 + 0.3 * (1 - dest_distance / (distance_matrix[current_node][destination_node] + 1e-6)))
        else:
            attraction = 1 / (direct_distance + 1e-6)
        attraction_factors[node] = attraction

    # Temperature-based probabilistic selection
    if random.random() < temperature:
        # Explore nearby nodes with higher probability
        nearby_nodes = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= min(distance_matrix[current_node][n] for n in unvisited_nodes) * 1.2]
        if nearby_nodes:
            weights = [attraction_factors[node] for node in nearby_nodes]
            return random.choices(nearby_nodes, weights=weights, k=1)[0]

    # Exploit the most attractive node
    next_node = max(attraction_factors.items(), key=lambda x: x[1])[0]
    return next_node
