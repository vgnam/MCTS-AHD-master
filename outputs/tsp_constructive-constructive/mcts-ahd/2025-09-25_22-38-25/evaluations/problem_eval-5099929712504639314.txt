import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    max_unvisited = len(distance_matrix)
    temp_factor = math.exp(-(total_unvisited / max_unvisited))

    # Dynamic exploration factor
    explore_factor = 0.5 * (1 + math.tanh(2 * (total_unvisited / max_unvisited - 0.5)))

    # Calculate entropy-based weights
    entropy_weights = {}
    for node in unvisited_nodes:
        if node == current_node:
            entropy_weights[node] = 0
            continue

        # Distance to current node
        d_current = distance_matrix[current_node][node]

        # Distance to destination (if unvisited)
        d_dest = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else 0

        # Entropy component (inverse of normalized distance)
        entropy = 1 / (1 + d_current / max(distance_matrix[current_node]))

        # Combine with destination bias
        entropy_weights[node] = (1 - explore_factor) * entropy + explore_factor * (1 / (1 + d_dest))

    # Temperature-based sampling
    temperatures = [math.exp(entropy_weights[node] / temp_factor) for node in unvisited_nodes]
    probs = [t / sum(temperatures) for t in temperatures]

    # Select with probabilistic bias toward destination
    if destination_node in unvisited_nodes and random.random() < 0.7 * (1 - temp_factor):
        return destination_node

    # Final selection with temperature-adjusted probabilities
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    # Local optimization step
    if len(unvisited_nodes) > 2:
        nearby_nodes = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= 1.3 * min(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)]
        if nearby_nodes and random.random() < 0.3 * explore_factor:
            nearby_weights = [entropy_weights[node] for node in nearby_nodes]
            next_node = random.choices(nearby_nodes, weights=nearby_weights, k=1)[0]

    return next_node
