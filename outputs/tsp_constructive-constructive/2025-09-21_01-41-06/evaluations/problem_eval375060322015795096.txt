def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_path(node, depth=1):
        if depth == 0 or not unvisited_nodes:
            return distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return distance_matrix[node][destination_node]
        next_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
        return distance_matrix[node][next_node] + evaluate_path(next_node, depth - 1)

    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] + evaluate_path(node))
    return next_node
