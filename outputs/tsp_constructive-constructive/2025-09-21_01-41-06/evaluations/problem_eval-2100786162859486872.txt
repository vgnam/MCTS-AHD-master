def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)
    if min_dist == max_dist:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    normalized_distances = [(max_dist - d) / (max_dist - min_dist) for d in distances]
    temperature = max(1.0, len(unvisited_nodes) / 10.0)
    probabilities = [math.exp(nd / temperature) for nd in normalized_distances]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]
    selected_index = random.choices(range(len(unvisited_nodes)), weights=probabilities)[0]
    return next_node
