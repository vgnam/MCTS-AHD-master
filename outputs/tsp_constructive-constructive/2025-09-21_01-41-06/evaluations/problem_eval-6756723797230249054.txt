import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_weight(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = 0
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            future_cost = min(distance_matrix[node][n] for n in remaining_nodes)
        return immediate_cost + 0.5 * future_cost

    weights = [calculate_weight(node) for node in unvisited_nodes]
    total_weight = sum(weights)
    probabilities = [1 - (w / total_weight) for w in weights]
    probabilities = [p / sum(probabilities) for p in probabilities]

    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
