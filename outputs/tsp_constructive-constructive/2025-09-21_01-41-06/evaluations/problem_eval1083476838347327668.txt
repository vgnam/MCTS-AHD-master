def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weights = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = (1 / (distance_to_current + 1e-10)) * distance_to_destination
        weights.append(weight)

    total_weight = sum(weights)
    if total_weight == 0:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    probabilities = [w / total_weight for w in weights]
    next_node = np.random.choice(list(unvisited_nodes), p=probabilities)
    return next_node
