def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 0.3 + 0.7 * (remaining_nodes / (remaining_nodes + 1))  # Dynamic weight

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        revisit_penalty = 1.0 + 0.1 * (len(unvisited_nodes) - remaining_nodes)  # Penalize revisits

        score = (1 - exploration_weight) * current_distance + exploration_weight * destination_distance + revisit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
