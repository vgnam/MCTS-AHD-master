def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    exploration_factor = 1.0 / (1.0 + 0.3 * (total_unvisited - 1))
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        path_entropy = sum(distance_matrix[node][n] for n in unvisited_nodes) / (total_unvisited * centrality + 1e-6)
        dynamic_centrality = centrality * (1.0 + 0.1 * (1.0 - temperature))

        weighted_score = (1.0 - temperature) * current_distance + temperature * (future_distance + 0.3 * dynamic_centrality) + exploration_factor * path_entropy

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            path_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0
            prev_potential = sum(distance_matrix[next_node][n] for n in unvisited_nodes if n != next_node) / (total_unvisited - 1) if total_unvisited > 1 else 0
            if path_potential < prev_potential:
                next_node = node

    return next_node
