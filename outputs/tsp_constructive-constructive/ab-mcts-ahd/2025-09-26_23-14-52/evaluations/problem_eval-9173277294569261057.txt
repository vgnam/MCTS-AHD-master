def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.5 * (1 + (total_unvisited / (total_unvisited + 1)) ** 0.5)
    centrality_weights = [sum(distance_matrix[node]) for node in unvisited_nodes]

    best_score = float('inf')
    next_node = None
    candidates = []

    for i, node in enumerate(unvisited_nodes):
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        normalized_centrality = centrality_weights[i] / sum(centrality_weights) if sum(centrality_weights) else 1
        weighted_score = (current_distance + exploration_factor * future_distance) * (1 - 0.3 * normalized_centrality)

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        candidate_scores = [(distance_matrix[current_node][c] + distance_matrix[c][destination_node], c) for c in candidates]
        next_node = min(candidate_scores, key=lambda x: x[0])[1]
    else:
        next_node = candidates[0]

    return next_node
