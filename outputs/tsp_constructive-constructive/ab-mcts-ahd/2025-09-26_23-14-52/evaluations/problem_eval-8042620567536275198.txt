def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 0.5 * (1.0 - (total_unvisited / (total_unvisited + 1)))
    scores = []
    nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = (1.0 - (total_unvisited / (total_unvisited + 1))) * current_distance + future_distance + temperature * centrality
        scores.append(weighted_score)
        nodes.append(node)

    min_score = min(scores)
    adjusted_scores = [math.exp((min_score - s) / temperature) for s in scores]
    total = sum(adjusted_scores)
    probabilities = [s / total for s in adjusted_scores]

    selected_node = random.choices(nodes, weights=probabilities, k=1)[0]

    for node in unvisited_nodes:
        if node != selected_node:
            centrality_selected = sum(distance_matrix[selected_node][n] for n in unvisited_nodes) / total_unvisited
            centrality_node = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
            if centrality_node > centrality_selected:
                selected_node = node

    return next_node
