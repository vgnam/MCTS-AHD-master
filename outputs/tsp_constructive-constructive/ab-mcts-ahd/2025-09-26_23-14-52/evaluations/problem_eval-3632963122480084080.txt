importance using a temperature-based scoring system, where importance is calculated as the ratio of a node's centrality to its distance from the current node, and the temperature adjusts from exploration to exploitation as unvisited nodes decrease, with tie-breaking based on cumulative future distance and node degree.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))

        importance = centrality / (current_distance + 1e-6)
        weighted_score = (1 - temperature) * (-current_distance) + temperature * (importance + 0.2 * degree) - 0.3 * future_distance

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if importance > (sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited) / (distance_matrix[current_node][next_node] + 1e-6) or future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
