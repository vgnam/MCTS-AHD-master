def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, alpha=0.5, penalty_factor=0.1):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Weighted score combining immediate and destination distances
        score = alpha * current_distance + (1 - alpha) * destination_distance

        # Penalize nodes that are expensive to revisit
        if current_node in unvisited_nodes and distance_matrix[current_node][node] > distance_matrix[current_node][destination_node]:
            score += penalty_factor * current_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
