def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weighting: higher immediate weight when far, lower when close
        weight = 1.0 if current_to_dest > 10 else 0.5

        # Node potential: connectivity and proximity to unvisited nodes
        node_potential = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes) / remaining_nodes

        # Combined score: immediate, future, and node potential
        combined_score = (current_distance + weight * future_distance) / (1 + node_potential)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node
        elif combined_score == best_score:
            # Tiebreaker: prefer nodes closer to the destination
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
