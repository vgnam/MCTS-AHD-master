def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1.0 - (total_unvisited / (total_unvisited + 1))
    temperature = 1.0 / (1.0 + math.exp(-5 * (progress - 0.5)))

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        score = (1 - temperature) * (current_distance + future_distance) + temperature * centrality
        candidates.append((node, score))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    top_score = candidates[0][1]
    top_candidates = [node for node, score in candidates if score == top_score]

    if len(top_candidates) == 1:
        return top_candidates[0]
    else:
        centralities = [(node, sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited) for node in top_candidates]
        centralities.sort(key=lambda x: x[1])
        return next_node
