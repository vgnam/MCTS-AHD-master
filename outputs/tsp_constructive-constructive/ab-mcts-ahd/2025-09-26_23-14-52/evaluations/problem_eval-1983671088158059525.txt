def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.3 * (total_unvisited / (total_unvisited + 1))
    weight_factor = 0.7 * (total_unvisited / (total_unvisited + 1))
    temperature = 1.0 - (total_unvisited / (total_unvisited + 1))

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = (1 - exploration_factor) * (current_distance + weight_factor * future_distance) + exploration_factor * centrality
        scores.append(weighted_score)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]

    probabilities = [math.exp(ns / temperature) for ns in normalized_scores]
    sum_prob = sum(probabilities)
    probabilities = [p / sum_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
