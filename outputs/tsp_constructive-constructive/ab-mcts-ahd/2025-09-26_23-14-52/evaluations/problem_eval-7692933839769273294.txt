def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5)))
    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        penalty = centrality * (1.0 - temperature)
        weighted_score = current_distance + (1.0 - temperature) * future_distance + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        probabilities = [math.exp(-0.5 * (sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited)) for node in candidates]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
