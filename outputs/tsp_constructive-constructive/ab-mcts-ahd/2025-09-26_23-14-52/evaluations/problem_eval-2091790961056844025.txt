def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, np.exp(-0.5 * total_unvisited))
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        exploration_factor = (1 - temperature) * centrality
        exploitation_factor = temperature * (current_distance + 0.5 * future_distance)
        sigmoid_weight = 1 / (1 + np.exp(-5 * (temperature - 0.5)))
        weighted_score = sigmoid_weight * exploration_factor - (1 - sigmoid_weight) * exploitation_factor

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality > sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited:
                next_node = node

    return next_node
