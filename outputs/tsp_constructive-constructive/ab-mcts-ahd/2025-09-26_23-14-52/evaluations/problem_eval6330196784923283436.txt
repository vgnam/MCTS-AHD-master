def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_weight = max(0.1, 1.0 - (total_unvisited / len(distance_matrix)))
    local_search_radius = min(3, total_unvisited)
    best_score = float('-inf')

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        proximity_score = 1.0 / (1.0 + current_distance)
        destination_attraction = 1.0 / (1.0 + future_distance) if future_distance != 0 else 0.0
        combined_score = (1 - exploration_weight) * proximity_score + exploration_weight * destination_attraction

        if node in unvisited_nodes[:local_search_radius]:
            combined_score *= 1.2

        if combined_score > best_score:
            best_score = combined_score
            next_node = node
        elif combined_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
