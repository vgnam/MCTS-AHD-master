def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic temperature based on exploration phase
    exploration_phase = len(unvisited_nodes) / (len(distance_matrix) - 1)
    temperature = 0.7 if exploration_phase > 0.5 else 0.3

    scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Penalize nodes that are too far from the current path
        path_detour_penalty = abs(current_distance - distance_matrix[current_node][destination_node]) * 0.2

        # Weighted score with dynamic temperature and detour penalty
        weighted_score = current_distance + temperature * (centrality - future_distance) + path_detour_penalty
        scores.append((node, weighted_score))
        total_score += weighted_score

    # Boltzmann distribution for probabilistic selection
    probabilities = [score / total_score for (_, score) in scores]
    next_node = random.choices([node for (node, _) in scores], weights=probabilities, k=1)[0]

    return next_node
