def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        avg_unvisited_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        dynamic_weight = 1.0 + (remaining_nodes / (remaining_nodes + 1)) * 0.5
        weighted_score = (dynamic_weight * current_distance) + (1.0 * future_distance) + (0.3 * avg_unvisited_distance)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if (current_distance + future_distance) < (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
