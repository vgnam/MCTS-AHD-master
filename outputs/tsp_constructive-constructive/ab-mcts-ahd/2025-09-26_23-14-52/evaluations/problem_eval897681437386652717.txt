def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    lookahead_factor = remaining_nodes / total_nodes
    centrality_weight = 1.0 - lookahead_factor

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        proximity_score = current_distance
        lookahead_score = destination_distance

        centrality_score = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                centrality_score += distance_matrix[node][neighbor]

        score = (lookahead_factor * proximity_score) + \
                (centrality_weight * centrality_score) + \
                (0.1 * lookahead_score)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
