def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))
        promise = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree) - 0.2 * future_distance + 0.1 * promise
        scores.append((node, weighted_score))

    if not scores:
        return destination_node

    max_score = max(score for _, score in scores)
    min_score = min(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-9)) for node, score in scores]

    probabilities = [exp(score / (temperature + 1e-9)) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
