import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, memory=None):
    if not unvisited_nodes:
        return destination_node

    if memory is None:
        memory = {node: 0 for node in unvisited_nodes}

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.5 * math.exp(-total_unvisited / 10)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        if total_unvisited > 5:
            weight = 0.9
        elif total_unvisited > 2:
            weight = 0.6
        else:
            weight = 0.4

        normalized_penalty = (future_distance / (current_distance + 1e-10)) ** 1.5
        memory_factor = memory[node] * 0.15
        weighted_score = 0.6 * current_distance + 0.3 * (weight * future_distance - normalized_penalty) + 0.1 * memory_factor + exploration_factor * random.uniform(0, 1)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    if next_node is not None:
        memory[next_node] += 1

    return next_node
