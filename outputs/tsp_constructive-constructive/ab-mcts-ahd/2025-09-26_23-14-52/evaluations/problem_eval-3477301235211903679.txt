def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    exploration_factor = 1.0 / (1.0 + 0.3 * (total_unvisited - 1))
    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))
        path_length_estimate = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m) / (total_unvisited * (total_unvisited - 1))

        weighted_score = (1.0 - temperature) * current_distance + temperature * (future_distance + 0.3 * centrality) + exploration_factor * (degree / total_unvisited) + 0.2 * path_length_estimate

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) == 1:
        return candidates[0]
    else:
        probs = [1.0 / (1.0 + sum(distance_matrix[n][c] for n in unvisited_nodes)) for c in candidates]
        total_prob = sum(probs)
        probs = [p / total_prob for p in probs]
        return next_node
