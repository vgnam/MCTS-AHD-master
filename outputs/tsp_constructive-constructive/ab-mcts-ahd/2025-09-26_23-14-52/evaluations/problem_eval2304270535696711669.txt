import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + math.exp(-(total_unvisited - 5)))  # Sigmoid-based temperature

    centrality = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        centrality[node] = avg_distance

    best_score = float('-inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = (0.4 * current_distance + 0.5 * future_distance + 0.1 * centrality[node]) * temperature

        if weighted_score > best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        # Break ties by selecting the node with highest centrality
        next_node = max(candidates, key=lambda x: -centrality[x])
    else:
        next_node = candidates[0]

    return next_node
