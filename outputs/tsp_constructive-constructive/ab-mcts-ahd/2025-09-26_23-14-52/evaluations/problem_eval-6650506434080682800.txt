import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_path_length = total_unvisited + 1  # Including current and destination nodes

    # Dynamic exploration weight based on both unvisited nodes and remaining path length
    exploration_weight = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5) - 0.05 * (remaining_path_length - 5)))

    # Temperature for probabilistic selection (decreases as path progresses)
    temperature = max(0.1, 1.0 - (1.0 / (1.0 + math.exp(-0.2 * (remaining_path_length - 5)))))

    best_score = float('inf')
    next_node = None
    candidate_scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Local search with adaptive segment evaluation
        segment_score = current_distance + future_distance
        if total_unvisited > 2:
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    segment_distance = current_distance + distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node]
                    if segment_distance < segment_score:
                        segment_score = segment_distance

        # Combined score with dynamic weights
        weighted_score = (0.5 * current_distance) + (0.3 * future_distance) + (exploration_weight * 0.2 * random.uniform(0, 1)) + (0.1 * segment_score)

        candidate_scores.append((node, weighted_score))

    # Probabilistic selection based on scores and temperature
    if candidate_scores:
        min_score = min(score for _, score in candidate_scores)
        max_score = max(score for _, score in candidate_scores)
        normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in candidate_scores]
        probabilities = [math.exp(-normalized_score / temperature) for _, normalized_score in normalized_scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]

    return next_node
