def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    max_unvisited = total_unvisited
    dynamic_weight = 0.5 + 0.4 * (1 - (total_unvisited / max_unvisited) ** 3)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        exploration_bias = 0.1 * (total_unvisited / max_unvisited) * random.uniform(0, 1)

        weighted_score = (dynamic_weight * immediate_distance) + ((1 - dynamic_weight) * future_distance) + exploration_bias

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
