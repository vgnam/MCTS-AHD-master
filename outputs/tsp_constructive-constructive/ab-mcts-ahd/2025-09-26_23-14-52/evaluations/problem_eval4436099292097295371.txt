def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 / (remaining_nodes + 1)
    exploitation_weight = 1.0 - exploration_weight

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Novel scoring mechanism combining exploration and exploitation
        exploration_term = current_distance * (1.0 + exploration_weight)
        exploitation_term = destination_distance * (1.0 + exploitation_weight)

        # Add probabilistic component to avoid local optima
        random_factor = 0.1 * (1.0 / (remaining_nodes + 1))
        score = (exploration_weight * exploration_term) + (exploitation_weight * exploitation_term) + random_factor

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
