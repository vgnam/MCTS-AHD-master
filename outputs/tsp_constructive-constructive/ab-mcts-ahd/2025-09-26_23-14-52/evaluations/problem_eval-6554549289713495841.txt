import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    visited_nodes = set(distance_matrix.keys()) - set(unvisited_nodes) - {destination_node}
    total_nodes = len(distance_matrix)
    visited_ratio = len(visited_nodes) / (total_nodes - 1) if (total_nodes - 1) > 0 else 0.0

    # Dynamic weight calculation using sigmoid function
    current_weight = 1.0 / (1.0 + math.exp(-10 * (visited_ratio - 0.5)))
    future_weight = 1.0 - current_weight
    temperature = max(0.1, 1.0 - visited_ratio)

    # Path diversity calculation
    avg_distance = sum(distance_matrix[current_node].values()) / len(distance_matrix[current_node])

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Path memory term - favors nodes that create more balanced paths
        path_memory = sum(distance_matrix[node].values()) / len(distance_matrix[node])

        # Temperature-based exploration
        exploration_term = temperature * random.uniform(0, 1)

        weighted_score = (current_weight * current_distance +
                         future_weight * future_distance +
                         0.2 * path_memory +
                         exploration_term)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node
        elif weighted_score == min_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
