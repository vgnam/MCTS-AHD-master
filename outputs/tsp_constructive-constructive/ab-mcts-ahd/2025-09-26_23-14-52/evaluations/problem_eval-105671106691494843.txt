def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    decay_factor = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 10)))

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        weighted_score = (0.6 * current_dist + 0.25 * future_dist + 0.15 * centrality) * decay_factor
        scores.append((node, weighted_score))

    scores.sort(key=lambda x: x[1])
    top_nodes = [node for node, score in scores[:3]] if len(scores) >= 3 else [node for node, score in scores]

    if len(top_nodes) > 1:
        probabilities = [1.0 / (i + 1) for i in range(len(top_nodes))]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices(top_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = top_nodes[0]

    return next_node
