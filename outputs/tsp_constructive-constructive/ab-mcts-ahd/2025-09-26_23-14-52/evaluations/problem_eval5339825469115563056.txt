def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight = 1.0 - 0.5 * remaining_ratio
        weighted_score = current_distance + weight * future_distance

        # Heuristic to balance exploration and exploitation
        avg_future = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        exploration_penalty = 0.2 * avg_future

        adjusted_score = weighted_score + exploration_penalty

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node
        elif adjusted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
