def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - (0.5 * (total_unvisited / (total_unvisited + 1)))
    temperature = 1.0 / (1 + 0.1 * (total_unvisited - len(unvisited_nodes)))

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        distance_ratio = future_distance / (current_distance + 1e-10)
        weighted_score = current_distance + 0.5 * future_distance + exploration_factor * distance_ratio * random.uniform(0, 1)

        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1])
    best_node, best_score = candidates[0]

    if len(candidates) > 1:
        probabilities = [math.exp(-(score - best_score) / temperature) for _, score in candidates]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    else:
        next_node = best_node

    return next_node
