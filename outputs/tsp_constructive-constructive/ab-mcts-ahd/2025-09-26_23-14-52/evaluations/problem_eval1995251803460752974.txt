def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    weight_factor = 1.0  # Higher weight for immediate distance
    future_weight = 0.5  # Lower weight for future distance
    avg_weight = 0.3     # New weight for average distance to remaining nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate average distance to remaining nodes
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0

        weighted_score = (weight_factor * current_distance) + (future_weight * future_distance) + (avg_weight * avg_distance)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
