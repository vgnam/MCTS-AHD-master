def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)) ** 2))

    # Calculate centrality of current node (average distance to other nodes)
    centrality = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and centrality
        if remaining_nodes > 5:
            weight = 0.3 * (1 - centrality / max(centrality, 1e-10))
        elif remaining_nodes > 2:
            weight = 0.5 * (1 - centrality / max(centrality, 1e-10))
        else:
            weight = 0.8 * (1 - centrality / max(centrality, 1e-10))

        combined_score = current_distance + weight * temperature * future_distance
        scores.append((combined_score, current_distance, future_distance, node))

    scores.sort(key=lambda x: x[0])
    min_score = scores[0][0]
    candidates = [s for s in scores if s[0] == min_score]

    if len(candidates) > 1:
        candidates.sort(key=lambda x: x[1] + x[2])
        next_node = candidates[0][3]
    else:
        next_node = candidates[0][3]

    return next_node
