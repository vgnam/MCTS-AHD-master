importance. It combines these with a novel scoring function that emphasizes immediate distance early but gradually shifts to favoring future distance and connectivity, with temperature-adjusted weights that non-linearly balance the components.}

import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 1:
        return unvisited_nodes[0]

    # Adaptive temperature with harmonic decay
    temperature = 1.0 / (1.0 + math.log(1 + total_unvisited))

    # Calculate minimum spanning tree edges for connectivity heuristic
    mst_edges = []
    for node in unvisited_nodes:
        min_edge = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        mst_edges.append(min_edge)
    avg_connectivity = sum(mst_edges) / len(mst_edges) if mst_edges else 0

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic centrality considering both local and global importance
        local_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        global_centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)
        centrality = 0.7 * local_centrality + 0.3 * global_centrality

        # Weighted scoring with temperature-adjusted components
        weighted_score = (1 - temperature) * current_distance + \
                        temperature * (0.6 * future_distance + 0.4 * centrality) + \
                        0.2 * avg_connectivity

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
