def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)) ** 2)
    exploration_factor = 1.0 / (1.0 + 0.3 * (total_unvisited - 1))
    best_score = float('inf')
    next_node = None
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0
        normalized_centrality = centrality / (sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / total_unvisited + 1e-6)

        distance_weight = 1.0 - 0.5 * temperature
        centrality_weight = 0.5 + 0.5 * temperature
        exploration_weight = exploration_factor * (1.0 - temperature)

        weighted_score = (distance_weight * current_distance +
                          centrality_weight * (future_distance + 0.3 * centrality) +
                          exploration_weight * normalized_centrality)
        scores.append((weighted_score, node))

    if scores:
        min_score = min(score for score, _ in scores)
        candidates = [(score, node) for score, node in scores if score == min_score]
        if len(candidates) > 1:
            next_node = min(candidates, key=lambda x: sum(distance_matrix[x[1]][n] for n in unvisited_nodes if n != x[1]) / (total_unvisited - 1))[1]
        else:
            next_node = candidates[0][1]

    return next_node
