def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weighting: prioritize future distance more when far from destination, immediate distance when close
        weight = 0.5 if current_to_dest > 10 else 1.0  # Inverted from original
        weighted_score = current_distance + weight * future_distance

        # Centrality tiebreaker: nodes with higher centrality (lower average distance to unvisited nodes) are preferred
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
            best_centrality = centrality
        elif weighted_score == best_score:
            if centrality < best_centrality:  # Prefer nodes with higher centrality (lower centrality value)
                next_node = node
                best_centrality = centrality

    return next_node
