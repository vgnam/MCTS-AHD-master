def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    proximity_factor = 1.0 / (1.0 + distance_matrix[current_node][destination_node])

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        dynamic_weight = 2.0 + (1.0 - proximity_factor) * 2.0
        weighted_score = dynamic_weight * current_distance + (3.0 - dynamic_weight) * future_distance

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            local_search = []
            for candidate in unvisited_nodes:
                if candidate != node and candidate != next_node:
                    local_score = distance_matrix[current_node][candidate] + distance_matrix[candidate][destination_node]
                    local_search.append((local_score, candidate))
            if local_search:
                local_search.sort()
                if local_search[0][0] < (current_distance + future_distance):
                    next_node = local_search[0][1]

    return next_node
