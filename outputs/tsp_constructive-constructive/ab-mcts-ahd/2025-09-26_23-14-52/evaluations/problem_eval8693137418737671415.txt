def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    alpha = 0.7 if total_unvisited > 2 else 0.3  # Dynamic weight adjustment

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        penalty = 1.0 + (0.1 * (total_unvisited / len(distance_matrix)))  # Penalty for previously visited nodes

        combined_score = alpha * current_distance + (1 - alpha) * destination_distance * penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node
        elif combined_score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
