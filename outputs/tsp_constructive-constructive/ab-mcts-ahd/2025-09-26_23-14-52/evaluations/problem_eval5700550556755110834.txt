def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)) ** 2)
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = current_distance + temperature * (future_distance + 0.5 * centrality)
        scores.append((node, weighted_score, centrality))

    if not scores:
        return destination_node

    min_score = min(score for _, score, _ in scores)
    max_score = max(score for _, score, _ in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-9), centrality)
                        for node, score, centrality in scores]

    if temperature > 0.5:
        probabilities = [1 / (1 + score) for _, score, _ in normalized_scores]
    else:
        probabilities = [1 / (1 + score) ** 2 for _, score, _ in normalized_scores]

    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected_node = None
    if temperature > 0.5:
        selected_node = max(zip(unvisited_nodes, probabilities), key=lambda x: x[1])[0]
    else:
        selected_node = min(zip(unvisited_nodes, probabilities), key=lambda x: x[1])[0]

    if temperature < 0.3:
        candidates = [node for node, _, _ in normalized_scores if normalized_scores[0][1] == normalized_scores[1][1]]
        if candidates:
            selected_node = min(candidates, key=lambda x: sum(distance_matrix[x][n] for n in unvisited_nodes))

    return next_node
