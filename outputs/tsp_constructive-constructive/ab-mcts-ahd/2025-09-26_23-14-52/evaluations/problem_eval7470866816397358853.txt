def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weighting using sigmoid function
        sigmoid_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        weighted_current = current_distance * (1 - sigmoid_weight)
        weighted_future = future_distance * sigmoid_weight

        # Centrality penalty (avoid hub nodes)
        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
        penalty = 0.5 * (avg_distance / (current_distance + 1e-10)) ** 1.5

        # Combined score
        combined_score = weighted_current + weighted_future + penalty

        candidates.append((node, combined_score))

    # Select top candidates and choose probabilistically
    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:min(3, len(candidates))]
    probabilities = [1.0 / (i + 1) for i in range(len(top_candidates))]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected_node = random.choices([c[0] for c in top_candidates], weights=probabilities, k=1)[0]

    return next_node
