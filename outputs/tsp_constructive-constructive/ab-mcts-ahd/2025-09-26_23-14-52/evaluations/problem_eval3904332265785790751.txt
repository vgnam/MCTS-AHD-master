def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    exploration_factor = 1.0 / (1.0 + 0.3 * (total_unvisited - 1))

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n))
        diversity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)

        weighted_score = (1 - exploration_factor) * (current_distance + 0.7 * future_distance) + exploration_factor * (0.4 * centrality + 0.3 * diversity_score + 0.3 * connectivity)
        weighted_score *= (1 - temperature * 0.2)

        candidates.append((node, weighted_score, connectivity, centrality))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    min_score = candidates[0][1]
    top_candidates = [c for c in candidates if c[1] <= min_score * 1.1]

    if len(top_candidates) > 1:
        top_candidates.sort(key=lambda x: (x[2], x[3]), reverse=True)

    return next_node
