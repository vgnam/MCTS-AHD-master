def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - (1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5))))
    centrality_weights = [sum(distance_matrix[node]) for node in unvisited_nodes]
    normalized_weights = [w / sum(centrality_weights) for w in centrality_weights]

    scores = []
    for i, node in enumerate(unvisited_nodes):
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        combined_score = (1 - exploration_factor) * current_distance + exploration_factor * future_distance
        combined_score *= (1 + 0.1 * normalized_weights[i])
        scores.append((combined_score, node))

    scores.sort(key=lambda x: x[0])
    min_score = scores[0][0]
    candidates = [s for s in scores if s[0] == min_score]

    if len(candidates) > 1:
        next_node = random.choice(candidates)[1]
    else:
        next_node = candidates[0][1]

    return next_node
