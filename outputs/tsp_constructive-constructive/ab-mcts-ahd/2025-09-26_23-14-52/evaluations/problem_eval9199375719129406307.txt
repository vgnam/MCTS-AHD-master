def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, memory=None):
    if not unvisited_nodes:
        return destination_node

    if memory is None:
        memory = {node: 0 for node in unvisited_nodes}

    remaining_nodes = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        if remaining_nodes > 5:
            weight = 0.2
        elif remaining_nodes > 2:
            weight = 0.5
        else:
            weight = 0.8

        normalized_penalty = (future_distance / (current_distance + 1e-10)) ** 1.5
        memory_factor = memory[node] * 0.2
        weighted_score = weight * future_distance - current_distance - normalized_penalty + memory_factor

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    if next_node is not None:
        memory[next_node] += 1

    return next_node
