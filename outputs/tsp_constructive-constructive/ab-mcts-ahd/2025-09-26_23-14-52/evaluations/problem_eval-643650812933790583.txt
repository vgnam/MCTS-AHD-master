import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    alpha = 0.2  # Controls the steepness of the sigmoid
    future_weight = 1 / (1 + math.exp(-alpha * (remaining_nodes - 5)))  # Sigmoid-based weighting

    best_score = float('inf')
    next_node = None
    recent_nodes = []  # Track recently visited nodes to avoid cycles

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Penalty for revisiting nodes that were recently part of the tour
        penalty = 1.0 if node in recent_nodes else 1.0
        weighted_score = current_distance + future_weight * future_distance * penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    recent_nodes.append(next_node)
    if len(recent_nodes) > 3:  # Limit the history to avoid excessive penalties
        recent_nodes.pop(0)

    return next_node
