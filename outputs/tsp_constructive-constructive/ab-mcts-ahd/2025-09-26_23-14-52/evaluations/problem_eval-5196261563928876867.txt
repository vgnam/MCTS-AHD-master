import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_decay = 0.9 ** (1 / (total_unvisited + 1))  # Slower decay than linear
    centrality_weights = {}

    # Calculate node centrality (average distance to all nodes)
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
        centrality_weights[node] = avg_distance

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality_score = centrality_weights[node]

        # Adaptive weighting: centrality more important in late stages
        centrality_weight = 0.2 + 0.3 * (1 - exploration_decay)
        weighted_score = (0.4 * current_distance +
                         0.3 * future_distance +
                         centrality_weight * centrality_score +
                         exploration_decay * random.uniform(0, 0.5))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
