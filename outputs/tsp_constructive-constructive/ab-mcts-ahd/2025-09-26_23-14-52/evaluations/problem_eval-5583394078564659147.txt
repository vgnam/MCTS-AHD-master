def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (num_unvisited / (num_unvisited + 5)))  # Decreases as unvisited nodes decrease
    selection_counts = {node: 0 for node in unvisited_nodes}  # Track selection counts to avoid cycles

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        penalty = selection_counts.get(node, 0) * 0.1  # Penalize nodes selected more frequently
        weighted_score = (current_distance + future_distance) * (1.0 + penalty)
        scores.append((node, weighted_score))

    # Apply softmax with temperature to get probabilities
    exp_scores = [math.exp(-score / temperature) for _, score in scores]
    total = sum(exp_scores)
    probabilities = [exp_score / total for exp_score in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]
    selection_counts[next_node] += 1  # Update selection count

    return next_node
