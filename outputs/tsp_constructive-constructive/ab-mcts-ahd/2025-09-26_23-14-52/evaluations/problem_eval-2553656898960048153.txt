def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - total_unvisited) / total_nodes

    # Dynamic weight factor using sigmoid function for smooth transition
    weight_factor = 1 / (1 + math.exp(-10 * (visited_ratio - 0.5)))

    # Calculate average distance to unvisited nodes
    avg_future_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        # Adjust score by considering deviation from average future distance
        weighted_score = current_distance + weight_factor * (future_distance - avg_future_distance)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
