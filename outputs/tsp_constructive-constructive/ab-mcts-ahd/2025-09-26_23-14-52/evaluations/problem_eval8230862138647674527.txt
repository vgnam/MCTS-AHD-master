def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited
    max_distance = max(max(row) for row in distance_matrix)
    inverse_temperature = 1.0 - (1.0 - (total_unvisited / (total_unvisited + 1))) * (1.0 - (avg_distance / max(1, max_distance)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        distance_product = current_distance * future_distance
        weighted_score = inverse_temperature * distance_product + (1 - inverse_temperature) * centrality

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality > sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited:
                next_node = node

    return next_node
