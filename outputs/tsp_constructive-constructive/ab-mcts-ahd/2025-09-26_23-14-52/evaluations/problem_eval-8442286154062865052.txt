def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    scores = []
    nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = current_distance + temperature * (future_distance + 0.5 * centrality)
        scores.append(weighted_score)
        nodes.append(node)

    min_score = min(scores)
    normalized_scores = [min_score / (score + 1e-6) for score in scores]
    probabilities = [math.exp(score / temperature) for score in normalized_scores]
    sum_prob = sum(probabilities)
    probabilities = [p / sum_prob for p in probabilities]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]

    tie_breaker_nodes = [node for node, score in zip(nodes, scores) if score == scores[nodes.index(next_node)]]
    if len(tie_breaker_nodes) > 1:
        centralities = [sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited for node in tie_breaker_nodes]
        next_node = tie_breaker_nodes[centralities.index(min(centralities))]

    return next_node
