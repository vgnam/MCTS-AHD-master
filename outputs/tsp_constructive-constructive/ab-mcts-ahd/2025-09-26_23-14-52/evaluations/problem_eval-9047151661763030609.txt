def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes.copy()
    remaining_nodes.add(destination_node) if destination_node not in remaining_nodes else None

    # Compute centroid of remaining nodes
    centroid = sum(node for node in remaining_nodes) / len(remaining_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        centroid_distance = abs(node - centroid)  # Simplified centroid distance

        # Attraction-repulsion balance
        attraction = (current_distance + destination_distance) / (1 + centroid_distance)
        repulsion = (current_distance * destination_distance) / (1 + centroid_distance)

        # Centrality measure: variance of distances to remaining nodes
        distances = [distance_matrix[node][n] for n in remaining_nodes if n != node]
        variance = sum((d - sum(distances)/len(distances))**2 for d in distances) / len(distances) if distances else 0
        centrality = variance

        # Weighted score
        score = (attraction + repulsion) * (1 / (1 + centrality)) if centrality != 0 else (attraction + repulsion)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
