import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1 - math.log(1 + total_unvisited) / (1 + math.log(1 + total_unvisited))

    best_score = float('-inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        degree_centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf')) / total_unvisited
        path_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited

        exploration_score = (0.6 * degree_centrality + 0.4 * path_centrality) * (1 - temperature)
        exploitation_score = (0.7 * current_distance + 0.3 * future_distance) * temperature

        combined_score = exploration_score + exploitation_score

        if combined_score > best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        harmonic_weights = []
        for node in candidates:
            distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            if distances:
                harmonic_mean = len(distances) / sum(1/d for d in distances)
                harmonic_weights.append(harmonic_mean)
            else:
                harmonic_weights.append(1)

        total_weight = sum(harmonic_weights)
        selection_prob = [w / total_weight for w in harmonic_weights]
        next_node = random.choices(candidates, weights=selection_prob, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
