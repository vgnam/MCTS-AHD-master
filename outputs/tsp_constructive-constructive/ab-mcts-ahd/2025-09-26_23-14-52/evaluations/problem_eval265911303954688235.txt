def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    base_weight = 0.7 if total_unvisited > len(unvisited_nodes) * 0.6 else 0.9

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        harmonic_mean = 2 * current_distance * future_distance / (current_distance + future_distance) if (current_distance + future_distance) != 0 else float('inf')
        weighted_score = harmonic_mean + base_weight * (0.6 * centrality + 0.4 * future_distance)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node
        elif weighted_score == min_score:
            centroid_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            if centroid_distance < sum(distance_matrix[next_node][n] for n in unvisited_nodes) / len(unvisited_nodes):
                next_node = node

    return next_node
