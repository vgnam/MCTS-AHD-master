import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_indices = list(unvisited_nodes)
    n = len(unvisited_indices)
    if n == 1:
        return unvisited_indices[0]

    # Calculate centroid of unvisited nodes
    centroid_distances = np.mean([distance_matrix[node] for node in unvisited_indices], axis=0)
    centroid_node = np.argmin(centroid_distances)

    min_score = float('inf')
    next_node = None
    exploration_factor = 1.0 - (0.8 * (n / (n + 1)))
    current_weight = 1.0 + (0.2 * exploration_factor)
    future_weight = 0.5 + (0.5 * exploration_factor)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centroid_bias = 1.0 / (1.0 + distance_matrix[node][centroid_node])

        weighted_score = (current_weight * current_distance +
                         future_weight * future_distance +
                         (1.0 - centroid_bias) * random.uniform(0, 1))

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node
        elif weighted_score == min_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
