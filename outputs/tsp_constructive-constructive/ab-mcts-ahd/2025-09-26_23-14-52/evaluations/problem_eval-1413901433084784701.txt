def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight_factor = max(0.3, 0.8 * (total_unvisited / (total_unvisited + 2)))  # Different weight scaling

    # Penalty for revisiting nodes (assuming revisits are penalized)
    revisit_penalty = 0.1  # Fixed penalty for revisiting
    visited_nodes = set()  # Placeholder for tracking visited nodes (in practice, this would be tracked)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Base score with dynamic weight and revisit penalty
        base_score = current_distance + weight_factor * future_distance
        if node in visited_nodes:
            base_score += revisit_penalty

        if base_score < best_score:
            best_score = base_score
            next_node = node
        elif base_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
