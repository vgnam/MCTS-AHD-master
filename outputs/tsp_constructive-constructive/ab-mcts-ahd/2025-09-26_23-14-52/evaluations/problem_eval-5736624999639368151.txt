import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_weight = 1.0 / (1.0 + math.exp(-0.5 * (total_unvisited - 5)))
    exploitation_weight = 1.0 - exploration_weight

    best_score = float('inf')
    next_node = None
    node_popularity = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Base score with dynamic weights
        base_score = (exploitation_weight * current_distance) + (exploration_weight * future_distance)

        # Popularity adjustment (simulated reinforcement learning effect)
        popularity_score = node_popularity[node] * 0.2
        weighted_score = base_score + popularity_score + random.uniform(-0.1, 0.1)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
            node_popularity[node] += 1  # Simulate learning
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
