import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_decay = 0.95 ** (10 - total_unvisited) if total_unvisited > 0 else 0
    exploration_weight = 0.3 * exploration_decay

    # Phase 1: Dynamic scoring with probabilistic components
    candidates = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        diversity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / total_unvisited
        weighted_score = (current_dist + 0.3 * future_dist + exploration_weight * diversity_score) * (1 + random.gauss(0, 0.1))
        candidates.append((node, weighted_score))

    # Phase 2: Adaptive neighborhood evaluation
    refined_candidates = []
    for node, score in sorted(candidates, key=lambda x: x[1])[:min(4, len(candidates))]:
        neighborhood_scores = []
        for neighbor in unvisited_nodes:
            if neighbor != node:
                neighborhood_scores.append(distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node])
        if neighborhood_scores:
            avg_neighborhood = sum(neighborhood_scores) / len(neighborhood_scores)
            refined_score = score + 0.15 * avg_neighborhood
        else:
            refined_score = score
        refined_candidates.append((node, refined_score))

    # Phase 3: Probabilistic selection with temperature cooling
    temperature = max(0.1, 0.5 * (total_unvisited / (total_unvisited + 1)))
    probabilities = [math.exp(-score / temperature) for _, score in refined_candidates]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices([node for node, _ in refined_candidates], weights=normalized_probs, k=1)[0]

    return next_node
