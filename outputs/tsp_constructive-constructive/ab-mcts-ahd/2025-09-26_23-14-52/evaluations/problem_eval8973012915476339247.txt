import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_decay = math.exp(-0.3 * total_unvisited)
    priority_factor = 1.0 - 0.8 * (total_unvisited / (total_unvisited + 1))

    candidates = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        normalized_score = (current_dist + priority_factor * future_dist) / (1 + current_dist + future_dist)
        exploration_noise = exploration_decay * random.uniform(0, 1)
        utility_score = normalized_score - exploration_noise
        candidates.append((node, utility_score, future_dist))

    candidates.sort(key=lambda x: (x[1], -x[2]))
    selected_node = candidates[0][0]

    return next_node
