def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = unvisited_nodes.copy()
    remaining_nodes.add(destination_node) if destination_node not in remaining_nodes else None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        remaining_count = len(unvisited_nodes)
        if remaining_count > 5:
            weight = 0.3
        elif remaining_count > 2:
            weight = 0.5
        else:
            weight = 0.8

        # Centrality measure: average distance to remaining nodes
        centrality = sum(distance_matrix[node][n] for n in remaining_nodes if n != node) / (len(remaining_nodes) - 1) if len(remaining_nodes) > 1 else 0
        penalty = 0.2 * (current_distance / (future_distance + 1e-10)) ** 2

        # Weighted score balancing future distance, current distance, centrality, and penalty
        weighted_score = weight * future_distance - current_distance - penalty - centrality

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance > distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
