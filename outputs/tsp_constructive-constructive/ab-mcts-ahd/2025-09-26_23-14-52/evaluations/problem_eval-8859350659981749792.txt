import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_decay = 0.5 * (total_unvisited / (total_unvisited + 1))

    # Phase 1: Initial candidate selection with dynamic weights
    candidates = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        exploration_weight = 0.3 * exploration_decay * random.uniform(0.1, 0.7)
        weighted_score = current_dist + 0.5 * future_dist + exploration_weight
        candidates.append((node, weighted_score))

    # Phase 2: Neighborhood refinement with adaptive weights
    refined_candidates = []
    for node, score in sorted(candidates, key=lambda x: x[1])[:min(2, len(candidates))]:
        neighborhood_scores = []
        for neighbor in unvisited_nodes:
            if neighbor != node:
                neighborhood_score = (distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node]) / 1.5
                neighborhood_scores.append(neighborhood_score)
        avg_neighborhood = sum(neighborhood_scores) / len(neighborhood_scores) if neighborhood_scores else 0
        refined_score = score + 0.3 * avg_neighborhood * exploration_decay
        refined_candidates.append((node, refined_score))

    # Phase 3: Probabilistic selection with temperature-based stochasticity
    temperature = 0.8 * exploration_decay
    probabilities = [math.exp(-score / temperature) for _, score in refined_candidates]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices([node for node, _ in refined_candidates], weights=normalized_probs, k=1)[0]

    return next_node
