def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    node_centrality = {}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        node_centrality[node] = avg_distance

        remaining_nodes = len(unvisited_nodes)
        if remaining_nodes > 5:
            weight = 0.8
        elif remaining_nodes > 2:
            weight = 0.5
        else:
            weight = 0.3

        novelty_factor = 1 / (1 + sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] < current_distance))
        weighted_score = (0.6 * current_distance) + (0.4 * weight * future_distance) - (0.2 * node_centrality[node]) + (0.1 * novelty_factor)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
