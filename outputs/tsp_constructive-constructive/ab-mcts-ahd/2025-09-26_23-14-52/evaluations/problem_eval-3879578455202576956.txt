def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]
    exploration_factor = len(unvisited_nodes) / (len(distance_matrix) - 1)  # Normalized exploration factor

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weighting with temperature-based exploration
        temperature = 1.0 if exploration_factor > 0.5 else 0.3  # Higher temperature for early exploration
        weighted_score = (1 - temperature) * current_distance + temperature * future_distance

        # Novel centrality heuristic: weighted by inverse distance to current node
        centrality = sum(distance_matrix[node][other] / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes) / len(unvisited_nodes)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
            best_centrality = centrality
        elif weighted_score == best_score:
            if centrality < best_centrality:  # Prefer nodes with lower centrality (closer to others)
                next_node = node
                best_centrality = centrality

    return next_node
