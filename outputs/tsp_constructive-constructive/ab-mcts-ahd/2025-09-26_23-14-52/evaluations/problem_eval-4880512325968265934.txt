def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    exploration_factor = 0.1 * (1.0 - (total_unvisited / (total_unvisited + 1))) ** 2
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        ratio = current_distance / future_distance if future_distance != 0 else float('inf')

        if total_unvisited > len(unvisited_nodes) * 0.5:
            weighted_score = ratio + temperature * (0.6 * current_distance + 0.3 * ratio + 0.1 * centrality)
        else:
            weighted_score = ratio + temperature * (0.5 * ratio + 0.3 * centrality + 0.2 * exploration_factor)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality < sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited:
                next_node = node

    return next_node
