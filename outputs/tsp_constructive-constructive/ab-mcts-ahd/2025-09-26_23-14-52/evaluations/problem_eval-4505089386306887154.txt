def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustment based on remaining nodes
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes
    sigmoid = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
    weight_factor = 0.5 * (1 - sigmoid)  # More immediate focus early
    future_weight = 0.5 * sigmoid  # More future focus later

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Penalty term for nodes already close to destination
        penalty = 0.2 * (1 - future_distance / max(distance_matrix[node]))

        weighted_score = (weight_factor * current_distance) + (future_weight * future_distance) + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
