import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 0.9 ** (1 - total_unvisited / (total_unvisited + 1)))

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (degree)
        node_degree = sum(1 for n in unvisited_nodes if n != node)

        # Dynamic weighting with temperature and centrality
        immediate_weight = 0.5 + 0.3 * (1 - temperature)
        future_weight = 0.4 - 0.2 * (1 - temperature)
        centrality_weight = 0.2 * (node_degree / (total_unvisited - 1)) if total_unvisited > 1 else 0

        weighted_score = (immediate_weight * current_distance +
                         future_weight * future_distance +
                         centrality_weight * random.uniform(0, 1))

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance > distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
