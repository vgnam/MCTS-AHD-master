importance (40%) in later stages, and exploration factor (10%) decreases as unvisited nodes decrease to prioritize exploitation. It uses a hybrid scoring approach, minimizing the weighted sum of distances and randomness, and breaks ties by selecting the node with the longer future distance.}

```python
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.1 * (total_unvisited / (total_unvisited + 1))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        current_weight = 0.5 - (0.2 * (total_unvisited / (total_unvisited + 1)))
        future_weight = 0.3 + (0.2 * (total_unvisited / (total_unvisited + 1)))
        weighted_score = current_weight * current_distance + future_weight * future_distance + exploration_factor * random.uniform(0, 1)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance > distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
