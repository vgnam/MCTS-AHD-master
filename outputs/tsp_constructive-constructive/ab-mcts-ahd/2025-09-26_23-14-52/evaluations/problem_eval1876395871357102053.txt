importance" metric based on both distance and connectivity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (1.0 - (total_unvisited / (total_unvisited + 1))))

    # Calculate node importance: weighted combination of distance and connectivity
    node_importance = {}
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= current_dist)
        node_importance[node] = (1 - temperature) * current_dist + temperature * (0.6 * future_dist + 0.4 * connectivity)

    # Normalize importance scores to probabilities
    min_importance = min(node_importance.values())
    max_importance = max(node_importance.values())
    normalized_scores = {node: (node_importance[node] - min_importance) / (max_importance - min_importance + 1e-6)
                        for node in node_importance}

    # Select node with probability proportional to normalized score
    probabilities = [1 - normalized_scores[node] for node in unvisited_nodes]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    import random
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
