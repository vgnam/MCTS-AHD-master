import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_weight = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5)))  # Sigmoid-based exploration

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Local search: evaluate pairs of nodes to improve path segments
        if total_unvisited > 2:
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    segment_distance = current_distance + distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node]
                    if segment_distance < best_score:
                        best_score = segment_distance
                        next_node = node

        # Dynamic weighted score with sigmoid-adjusted exploration
        weighted_score = (0.6 * current_distance) + (0.2 * future_distance) + (exploration_weight * 0.2 * random.uniform(0, 1))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
