def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    dynamic_bias = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Adjusts bias toward destination as nodes are visited

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        normalized_distance = current_distance / avg_distance if avg_distance != 0 else current_distance
        penalty = max(0, (current_distance - 2 * avg_distance) / avg_distance)  # Penalizes nodes too far from current
        score = dynamic_bias * normalized_distance + (1 - dynamic_bias) * destination_distance + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
