importance through a multi-objective scoring system combining node centrality, distance metrics, and a novel "exploration potential" factor, while maintaining probabilistic selection with temperature-adjusted weights.}

import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1 / (1 + math.exp(-0.3 * (total_unvisited - 7)))  # Adjusted temperature function

    # Calculate node centrality metrics
    degree_centrality = {}
    path_centrality = {}
    for node in unvisited_nodes:
        degree_centrality[node] = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf')) / total_unvisited
        path_centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)

    # Calculate exploration potential (novel factor)
    exploration_potential = {}
    for node in unvisited_nodes:
        exploration_potential[node] = math.sqrt(degree_centrality[node] * path_centrality[node]) * (1 + math.log(total_unvisited + 1))

    best_score = float('-inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Multi-objective scoring
        distance_score = (0.7 * current_distance + 0.3 * future_distance) / (1 + 0.1 * exploration_potential[node])
        centrality_score = 0.9 * degree_centrality[node] + 0.1 * path_centrality[node]

        weighted_score = (1 - temperature) * distance_score + temperature * centrality_score

        if weighted_score > best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        # Probability based on combined factors
        selection_prob = []
        for node in candidates:
            prob = (degree_centrality[node] + exploration_potential[node]) / (2 * total_unvisited)
            selection_prob.append(prob)

        total_prob = sum(selection_prob)
        selection_prob = [p / total_prob for p in selection_prob]
        next_node = random.choices(candidates, weights=selection_prob, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
