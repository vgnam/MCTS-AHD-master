def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes.copy()
    remaining_nodes.add(destination_node) if destination_node not in remaining_nodes else None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Centrality measure: total distance to remaining nodes
        centrality = sum(distance_matrix[node][n] for n in remaining_nodes if n != node)
        weight = 1 / (1 + centrality) if centrality != 0 else 1

        # Proximity score: prioritize nodes closer to current node
        proximity = current_distance
        score = proximity * (1 - weight)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
