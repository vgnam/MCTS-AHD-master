def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weighting based on remaining nodes
    if remaining_nodes > 5:
        weight_factor = 0.4
        future_weight = 0.6
    else:
        weight_factor = 0.2
        future_weight = 0.8

    # Penalty for recently visited nodes
    penalty_factor = 1.0
    if hasattr(select_next_node, 'last_visited') and select_next_node.last_visited == current_node:
        penalty_factor = 1.5

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Apply dynamic weighting and penalty
        weighted_score = (weight_factor * current_distance) + (future_weight * future_distance) * penalty_factor

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    # Store last visited node for penalty calculation
    select_next_node.last_visited = current_node

    return next_node
