def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    # Adaptive weight factor with penalty for outliers
    base_weight = 1.0 - (total_unvisited / (total_unvisited + 1)) ** 2
    neighborhood_avg = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited
    penalty_factor = 1.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Penalize nodes that are significantly farther than average in the neighborhood
        if current_distance > 1.5 * neighborhood_avg:
            penalty_factor = 0.7

        # Logarithmic normalization to emphasize better options
        score = (current_distance + base_weight * future_distance) * penalty_factor
        normalized_score = 1 - (1 / (1 + math.log1p(score)))

        if normalized_score > best_score:
            best_score = normalized_score
            next_node = node
        elif normalized_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
