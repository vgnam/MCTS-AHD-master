import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - math.exp(-total_unvisited / (total_unvisited + 1))
    temperature = max(0.1, exploration_factor * (1.0 - (total_unvisited / (total_unvisited + 1))))
    weight_factor = max(0.1, 0.5 * exploration_factor * (total_unvisited / (total_unvisited + 1)))

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = (1 - temperature) * current_distance + weight_factor * (temperature * future_distance + 0.5 * centrality)
        scores.append((node, weighted_score))

    scores.sort(key=lambda x: x[1])
    candidate_nodes = [node for node, score in scores if score <= scores[0][1] * (1.0 + exploration_factor * 0.2)]
    next_node = random.choice(candidate_nodes) if candidate_nodes else scores[0][0]

    return next_node
