def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to all other nodes
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Weighted score: prioritize nodes closer to destination, penalize high centrality
        score = (0.6 * destination_distance) + (0.4 * current_distance) + (0.2 * centrality)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
