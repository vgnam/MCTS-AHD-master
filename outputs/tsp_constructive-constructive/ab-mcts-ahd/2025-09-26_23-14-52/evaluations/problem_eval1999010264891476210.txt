import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    # Dynamic exploration factor with logarithmic scaling
    exploration_factor = 0.2 * (1.0 - math.log(total_unvisited + 1) / math.log(total_unvisited + 2))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate opportunity cost: average distance to remaining unvisited nodes
        opportunity_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Weighted score with opportunity cost penalty
        weighted_score = 0.4 * current_distance + 0.3 * future_distance + 0.2 * opportunity_cost + exploration_factor * random.uniform(0, 1)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
