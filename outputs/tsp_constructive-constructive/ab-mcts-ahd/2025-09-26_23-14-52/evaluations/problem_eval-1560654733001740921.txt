def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1 - (total_unvisited / (total_unvisited + 1))
    current_weight = 0.5 * (1 - progress)
    future_weight = 0.3 + 0.2 * progress
    centrality_weight = 0.2 + 0.3 * progress

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        score = (current_weight * current_distance +
                 future_weight * future_distance +
                 centrality_weight * centrality)
        candidates.append((node, score, current_distance, centrality))

    candidates.sort(key=lambda x: x[1])
    min_score = candidates[0][1]
    best_candidates = [c for c in candidates if c[1] == min_score]

    if len(best_candidates) > 1:
        next_node = min(best_candidates, key=lambda x: (x[2], x[3]))[0]
    else:
        next_node = best_candidates[0][0]

    return next_node
