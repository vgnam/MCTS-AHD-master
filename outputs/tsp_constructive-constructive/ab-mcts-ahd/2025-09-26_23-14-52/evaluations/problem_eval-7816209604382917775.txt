def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Dynamic weight based on remaining nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        penalty = 1 + (current_distance / sum(distance_matrix[current_node]))  # Penalty for distant nodes
        score = (weight * current_distance + (1 - weight) * destination_distance) * penalty

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
