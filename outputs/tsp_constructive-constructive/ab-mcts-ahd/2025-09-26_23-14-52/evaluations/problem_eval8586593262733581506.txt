def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + total_unvisited)
    best_score = float('-inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        penalty = sum(1.0 / (1.0 + distance_matrix[current_node][n]) for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        score = (exploration_factor * current_distance + (1 - exploration_factor) * future_distance) + (1.0 - exploration_factor) * centrality - penalty

        candidates.append((node, score))

    if candidates:
        candidates.sort(key=lambda x: x[1], reverse=True)
        selected = min(candidates[:3], key=lambda x: x[1])
        next_node = selected[0]

    return next_node
