def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-0.5 * (total_unvisited - 5)))  # Sigmoid adjustment

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Dynamic weighted score with exploration component
        weighted_score = (1 - weight_factor) * current_distance + weight_factor * future_distance + 0.3 * centrality
        exploration_bonus = random.uniform(0, 0.1)  # Small randomness
        scores.append((node, weighted_score + exploration_bonus))

    # Probabilistic selection based on normalized scores
    scores = sorted(scores, key=lambda x: x[1], reverse=True)
    probabilities = [math.exp(s[1] / 0.5) for s in scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([s[0] for s in scores], weights=probabilities, k=1)[0]
    return next_node
