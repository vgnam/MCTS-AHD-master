def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_path_length = total_unvisited + 1
    dynamic_weight = 1.0 / (1.0 + math.exp(-(remaining_path_length - 5)))
    best_score = float('inf')
    next_node = None
    centrality_cache = {}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        if node not in centrality_cache:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
            centrality_cache[node] = centrality
        else:
            centrality = centrality_cache[node]

        penalty = 0.0
        if total_unvisited < 5:
            penalty = 0.2 * centrality

        weighted_score = current_distance + dynamic_weight * (future_distance + 0.5 * centrality) - penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality < centrality_cache.get(next_node, float('inf')):
                next_node = node

    return next_node
