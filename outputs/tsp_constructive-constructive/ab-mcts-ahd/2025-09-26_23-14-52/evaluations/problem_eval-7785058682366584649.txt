def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight_factor = min(0.9, (total_unvisited / len(distance_matrix)) ** 2)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        ratio = current_distance / destination_distance if destination_distance != 0 else float('inf')
        weighted_distance = weight_factor * current_distance + (1 - weight_factor) * destination_distance
        density_penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.5 * destination_distance)
        score = ratio + (0.1 * density_penalty) - (0.2 * (1 - weight_factor))

        if score < min_score:
            min_score = score
            next_node = node
            min_weighted = weighted_distance
        elif score == min_score:
            if weighted_distance < min_weighted:
                next_node = node
                min_weighted = weighted_distance
            elif weighted_distance == min_weighted:
                if destination_distance < distance_matrix[next_node][destination_node]:
                    next_node = node

    return next_node
