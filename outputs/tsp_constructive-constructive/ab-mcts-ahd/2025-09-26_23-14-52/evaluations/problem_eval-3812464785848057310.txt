import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = current_distance + temperature * (future_distance + 0.5 * centrality)
        scores.append((node, weighted_score))

    if not scores:
        return destination_node

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score)) for node, score in scores]

    candidates = [node for node, score in normalized_scores if score <= 0.3]
    if not candidates:
        candidates = [node for node, score in normalized_scores if score <= 0.7]

    if candidates:
        return random.choice(candidates)
    else:
        return next_node
