import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - (0.7 * np.exp(-0.5 * total_unvisited))
    alpha = 0.5 + 0.5 * (1.0 - exploration_factor)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = np.mean([distance_matrix[node][n] for n in unvisited_nodes if n != node])

        # Weighted score with dynamic components
        weighted_score = (alpha * current_distance +
                         (1 - alpha) * future_distance +
                         exploration_factor * centrality +
                         0.1 * random.uniform(0, 1))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
