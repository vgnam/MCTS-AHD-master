def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            next_best_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_distance = distance_matrix[node][next_best_node] + distance_matrix[next_best_node][destination_node]
        else:
            lookahead_distance = 0

        weighted_score = 1.5 * current_distance + 0.5 * future_distance + 0.3 * lookahead_distance

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
