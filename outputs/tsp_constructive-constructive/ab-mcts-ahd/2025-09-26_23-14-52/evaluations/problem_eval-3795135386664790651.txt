def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        if remaining_nodes > 5:
            weight = 0.8
        elif remaining_nodes > 2:
            weight = 0.5
        else:
            weight = 0.3

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        adjusted_weight = weight * (1 + 0.1 * (centrality / (current_distance + 1e-10)))

        penalty = 0.3 * (future_distance / (current_distance + 1e-10)) ** 1.5
        weighted_score = current_distance + adjusted_weight * future_distance - penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
