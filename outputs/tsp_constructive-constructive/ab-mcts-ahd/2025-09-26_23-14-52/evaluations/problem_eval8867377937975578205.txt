def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes.copy()
    remaining_nodes.add(destination_node) if destination_node not in remaining_nodes else None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Proximity and attractiveness components
        proximity = current_distance
        attractiveness = 1 / (1 + destination_distance) if destination_distance != 0 else 1

        # Opportunity cost: penalize nodes too close to others
        min_neighbor_distance = min(distance_matrix[node][n] for n in remaining_nodes if n != node) if len(remaining_nodes) > 1 else float('inf')
        opportunity_cost = 1 / (1 + min_neighbor_distance) if min_neighbor_distance != float('inf') else 0

        # Dynamic weighting factor
        weight_factor = len(remaining_nodes) / (len(unvisited_nodes) + 1) if unvisited_nodes else 1
        score = (proximity * (1 - weight_factor) + attractiveness * weight_factor) * (1 - opportunity_cost)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
