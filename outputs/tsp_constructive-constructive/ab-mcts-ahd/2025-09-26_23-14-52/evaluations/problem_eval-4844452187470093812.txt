def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (total_unvisited / (total_unvisited + 1)))  # Dynamic temperature
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Centrality as average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Composite score with dynamic weights
        score = (0.3 * current_distance + 0.5 * future_distance + 0.2 * centrality)
        scores.append((node, score))

    # Apply softmax to scores for probabilistic selection
    exp_scores = [math.exp(s / temperature) for _, s in scores]
    probs = [e / sum(exp_scores) for e in exp_scores]

    # Select node based on probabilities
    selected_node = random.choices([node for node, _ in scores], weights=probs, k=1)[0]

    return next_node
