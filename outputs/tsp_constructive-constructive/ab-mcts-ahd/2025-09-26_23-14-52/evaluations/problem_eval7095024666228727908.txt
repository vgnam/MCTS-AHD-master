def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited ** 0.5) / ((total_unvisited + 1) ** 0.5))

    def calculate_proximity_diversity(node):
        if total_unvisited <= 1:
            return 0.0
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        return sum(distances) / (len(distances) - 1) if distances else 0.0

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        proximity_diversity = calculate_proximity_diversity(node)

        exploration_factor = (1 - temperature) * (centrality * 0.4 + proximity_diversity * 0.6)
        exploitation_factor = temperature * (current_distance + future_distance)
        weighted_score = exploration_factor - exploitation_factor

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality > sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited:
                next_node = node

    return next_node
