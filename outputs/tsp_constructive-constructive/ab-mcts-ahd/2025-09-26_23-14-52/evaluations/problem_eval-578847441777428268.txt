def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (total_unvisited / (total_unvisited + 1)))
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        weighted_score = (1.2 * current_distance + 0.3 * future_distance + 0.1 * avg_distance) * temperature
        scores.append((node, weighted_score))

    # Normalize scores to probabilities using softmax with temperature
    exp_scores = [math.exp(-score / temperature) for _, score in scores]
    sum_exp = sum(exp_scores)
    probabilities = [exp_score / sum_exp for exp_score in exp_scores]

    # Select node based on probabilities
    selected_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]
    return next_node
