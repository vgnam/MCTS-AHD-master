def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1 / (1 + math.exp(-(total_unvisited - 5)))  # Sigmoid decay centered at 5
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        avg_unvisited_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))

        # Dynamic weights based on temperature and node characteristics
        distance_weight = (1 - temperature) * 0.8
        connectivity_weight = temperature * 0.6
        penalty = 0.3 * (avg_unvisited_distance / (sum(distance_matrix[node]) / len(distance_matrix[node]))) if degree > 0 else 0

        weighted_score = (distance_weight * (-current_distance) +
                          connectivity_weight * (0.4 * degree - 0.2 * penalty))

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
