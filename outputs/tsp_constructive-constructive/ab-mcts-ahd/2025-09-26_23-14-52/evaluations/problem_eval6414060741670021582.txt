def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    alpha = 0.7  # Dynamic weighting factor

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        weighted_sum = alpha * current_distance + (1 - alpha) * destination_distance
        efficiency = (current_distance + destination_distance) / (weighted_sum + 1e-10)
        log_adjustment = math.log(efficiency + 1)
        score = weighted_sum / log_adjustment

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
