def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    temperature = max(0.1, 1.0 - visited_ratio ** 2)
    best_score = float('-inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))
        long_term_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        weighted_score = (1 - temperature) * (-current_distance - 0.3 * future_distance) + temperature * (0.4 * centrality + 0.6 * degree + 0.2 * long_term_connectivity)

        if weighted_score > best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if candidates:
        return max(candidates, key=lambda x: sum(1 for n in unvisited_nodes if distance_matrix[x][n] < float('inf')) * (1 + visited_ratio))
    return next_node
