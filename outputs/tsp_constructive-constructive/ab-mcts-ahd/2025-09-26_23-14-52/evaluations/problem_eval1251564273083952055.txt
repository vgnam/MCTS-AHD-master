def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_decay = 0.8 ** (1 / (total_unvisited + 1))
    exploration_factor = 0.3 * exploration_decay
    weight_factor = 0.6 * (1 - exploration_decay)

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = (1 - exploration_factor) * (current_distance + weight_factor * future_distance) + exploration_factor * centrality
        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:min(3, len(candidates))]

    if len(top_candidates) > 1:
        probabilities = [1 / (i + 1) for i in range(len(top_candidates))]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([c[0] for c in top_candidates], weights=probabilities, k=1)[0]
    else:
        next_node = top_candidates[0][0]

    return next_node
