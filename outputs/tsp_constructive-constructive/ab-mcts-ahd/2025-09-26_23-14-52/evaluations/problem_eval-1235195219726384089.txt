def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / (remaining_nodes + 1)))  # Dynamic temperature

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        mean_score = current_distance * (1.0 + temperature * future_distance)
        variance = sum((distance_matrix[node][n] - future_distance) ** 2 for n in unvisited_nodes) / remaining_nodes
        scores.append((mean_score, variance, node))

    # Normalize scores by mean and variance
    normalized_scores = []
    for mean, var, node in scores:
        normalized_mean = mean / (1 + var)
        normalized_scores.append((normalized_mean, node))

    # Select node with lowest normalized score
    best_score, next_node = min(normalized_scores, key=lambda x: x[0])

    return next_node
