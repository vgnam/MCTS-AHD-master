def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    base_temp = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    avg_centrality = sum(sum(distance_matrix[node][n] for n in unvisited_nodes) for node in unvisited_nodes) / (total_unvisited * total_unvisited)
    variance = sum((sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited - avg_centrality)**2 for node in unvisited_nodes) / total_unvisited
    temperature = base_temp * (1 + 0.5 * variance)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        normalized_centrality = (centrality - avg_centrality) / (variance**0.5 + 1e-6)

        score = (1 - temperature) * (-current_distance) + temperature * (-future_distance - 0.3 * normalized_centrality)

        if score > best_score:
            best_score = score
            next_node = node
        elif score == best_score:
            if normalized_centrality < (sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited - avg_centrality) / (variance**0.5 + 1e-6):
                next_node = node

    return next_node
