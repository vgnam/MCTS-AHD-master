def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 1.0 / (1.0 + remaining_nodes)
        combined_score = (1 - weight) * current_distance + weight * dest_distance

        # Centrality factor: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        total_score = combined_score + 0.2 * centrality

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
