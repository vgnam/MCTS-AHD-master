def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    base_weight = 0.2 if total_unvisited > 4 else 0.5
    proximity_factor = distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)
    weight_factor = base_weight * (1 - 0.3 * proximity_factor)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        detour_penalty = max(0, (current_distance - distance_matrix[current_node][destination_node]) * 0.1)
        weighted_score = current_distance + weight_factor * future_distance + detour_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
