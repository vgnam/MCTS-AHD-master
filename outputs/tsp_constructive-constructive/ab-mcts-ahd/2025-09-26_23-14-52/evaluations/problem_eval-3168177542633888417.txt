import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + math.exp(-(total_unvisited - 5))) ** 2  # Squared to emphasize early exploration

    scores = []
    nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        random_component = exploration_factor * random.uniform(0, 1)

        # Normalized score combining immediate and future distances with randomness
        score = (current_distance + 0.3 * future_distance) * (1 - random_component) + random_component * (current_distance + future_distance)
        scores.append(score)
        nodes.append(node)

    # Probabilistic selection: higher scores have lower probability of being chosen
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]  # Inverted to favor lower scores

    next_node = random.choices(nodes, weights=normalized_scores, k=1)[0]
    return next_node
