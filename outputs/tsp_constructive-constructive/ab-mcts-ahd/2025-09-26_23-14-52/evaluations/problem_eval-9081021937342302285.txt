def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + math.exp(-(total_unvisited - 5)))
    scores = []
    nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node][m] for m in unvisited_nodes if m != n))
        weighted_score = current_distance + temperature * (future_distance + 0.5 * centrality + 0.3 * local_connectivity)
        scores.append(weighted_score)
        nodes.append(node)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]

    probabilities = [s / sum(normalized_scores) for s in normalized_scores]
    next_node = random.choices(nodes, weights=probabilities, k=1)[0]

    return next_node
