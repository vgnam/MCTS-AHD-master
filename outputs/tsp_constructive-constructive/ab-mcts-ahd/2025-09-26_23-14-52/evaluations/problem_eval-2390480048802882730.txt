def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_potential = 0.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        potential = (current_distance * 0.5) + (future_distance * 0.3) + (centrality * 0.2)
        score = 1 / (1 + potential)  # Sigmoid-like scaling
        scores.append((node, score))
        total_potential += score

    if total_potential == 0:
        return unvisited_nodes[0]

    probabilities = [(node, score / total_potential) for node, score in scores]
    selected = random.choices([node for node, _ in probabilities], weights=[prob for _, prob in probabilities], k=1)[0]

    return next_node
