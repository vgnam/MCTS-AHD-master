def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / len(unvisited_nodes + [current_node])))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic priority function
        priority = (1 - temperature) * current_distance + temperature * (future_distance + 0.3 * centrality)

        # Apply penalty if too close to destination early
        if total_unvisited > len(unvisited_nodes) // 2 and future_distance < 1.5 * min(distance_matrix[node][other] for other in unvisited_nodes if other != node):
            priority += 0.4 * future_distance

        if priority < best_score:
            best_score = priority
            next_node = node
        elif priority == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
