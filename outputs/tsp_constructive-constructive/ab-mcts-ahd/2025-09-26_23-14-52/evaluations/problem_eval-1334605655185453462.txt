def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    progress = 1 - (total_unvisited / (total_unvisited + 1))

    # Sigmoid-based dynamic weight adaptation
    exploration_weight = 1 / (1 + math.exp(-10 * (0.5 - progress)))
    exploitation_weight = 1 - exploration_weight

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Node degree centrality (number of nearby nodes)
        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < current_distance * 1.5)

        # Dynamic score calculation
        local_score = exploitation_weight * current_distance
        global_score = exploration_weight * future_distance
        centrality_score = 0.2 * (1 - progress) * node_degree

        total_score = local_score + global_score + centrality_score

        if total_score < best_score:
            best_score = total_score
            next_node = node
        elif total_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
