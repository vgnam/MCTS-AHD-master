import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = max(0.3, 0.9 * (total_unvisited / (total_unvisited + 1)) ** 2)

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        penalty = 0.1 * (1 - (total_unvisited / (total_unvisited + 1)))
        weighted_score = 0.3 * current_distance + 0.6 * future_distance + exploration_factor * random.uniform(0, 1) - penalty

        candidates.append((node, weighted_score, current_distance))

    candidates.sort(key=lambda x: (-x[1], x[2]))

    if len(candidates) > 1 and random.random() < exploration_factor:
        selected = random.choice(candidates[:int(0.3 * len(candidates))])
    else:
        selected = candidates[0]

    return next_node
