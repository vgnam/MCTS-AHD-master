def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    base_weight = 0.7 if total_unvisited > 0.5 * len(unvisited_nodes) else 0.4

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Novel scoring components
        euclidean_dist = (current_distance**2 + future_distance**2)**0.5
        harmonic_mean = 2 * current_distance * future_distance / (current_distance + future_distance) if (current_distance + future_distance) != 0 else 0
        revisit_penalty = 1 + 0.1 * (1 - len(unvisited_nodes) / total_unvisited)

        # Dynamic weight adjustment
        weight = base_weight * (1 - 0.2 * (len(unvisited_nodes) / total_unvisited))

        # Combined score
        score = (euclidean_dist * weight) + ((1 - weight) * harmonic_mean) + (revisit_penalty * centrality)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
