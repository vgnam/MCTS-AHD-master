def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1 - (total_unvisited / len(distance_matrix))
    centrality_weight = 0.5 + 0.5 * (1 / (1 + math.exp(-10 * (progress - 0.5))))

    best_score = float('inf')
    next_node = None
    node_selection_count = {}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        penalty = 0
        if node in node_selection_count:
            penalty = 0.1 * node_selection_count[node]

        weighted_score = current_distance + centrality_weight * (0.6 * centrality + 0.4 * future_distance) + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    if next_node in node_selection_count:
        node_selection_count[next_node] += 1
    else:
        node_selection_count[next_node] = 1

    return next_node
