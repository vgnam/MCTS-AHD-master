def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Calculate dynamic weight based on remaining unvisited nodes' proximity to destination
    avg_dest_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    dest_weight = 0.5 + 0.5 * (avg_dest_distance / max(distance_matrix[current_node][destination_node], 1))

    # Calculate average distance of unvisited nodes to current node for normalization
    avg_current_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Normalize distances and apply dynamic weight
        normalized_current = current_distance / avg_current_distance
        normalized_dest = dest_distance / avg_dest_distance
        total_score = normalized_current + dest_weight * normalized_dest

        if total_score < min_score:
            min_score = total_score
            next_node = node
        elif total_score == min_score:
            if dest_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
