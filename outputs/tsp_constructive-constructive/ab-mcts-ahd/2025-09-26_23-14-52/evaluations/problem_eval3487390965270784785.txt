def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    memory = {node: 0 for node in unvisited_nodes}
    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        sum_distance = current_distance + future_distance
        product_distance = current_distance * future_distance
        ratio = sum_distance / product_distance if product_distance != 0 else float('inf')

        if remaining_nodes > 5:
            weight = 0.9
        elif remaining_nodes > 2:
            weight = 0.6
        else:
            weight = 0.4

        normalized_penalty = (future_distance / (current_distance + 1e-10)) ** 1.5
        memory_factor = memory[node] * 0.15
        weighted_score = ratio + weight * (0.5 * centrality + 0.5 * (future_distance - normalized_penalty)) + memory_factor

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    if next_node is not None:
        memory[next_node] += 1

    return next_node
