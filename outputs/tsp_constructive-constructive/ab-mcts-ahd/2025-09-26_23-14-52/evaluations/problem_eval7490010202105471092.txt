def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, memory=None):
    if not unvisited_nodes:
        return destination_node

    if memory is None:
        memory = {node: 0 for node in unvisited_nodes}

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        memory_factor = memory[node] * 0.15

        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality - 0.2 * future_distance) + memory_factor

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality > sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited or future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    if next_node is not None:
        memory[next_node] += 1

    return next_node
