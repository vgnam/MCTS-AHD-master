import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - math.exp(-0.5 * total_unvisited / (total_unvisited + 1))
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        distance_variance = sum((distance_matrix[node][n] - current_distance) ** 2 for n in unvisited_nodes if n != node) / (total_unvisited - 1)

        weighted_score = (0.6 * current_distance + 0.3 * future_distance + 0.1 * distance_variance) * (1 + exploration_factor * random.uniform(-0.2, 0.2))
        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1])
    best_score = candidates[0][1]
    best_candidates = [c for c in candidates if c[1] <= best_score * 1.1]

    if len(best_candidates) > 1:
        best_candidates.sort(key=lambda x: sum(distance_matrix[x[0]][n] for n in unvisited_nodes if n != x[0]) / (total_unvisited - 1))
        next_node = best_candidates[0][0]
    else:
        next_node = best_candidates[0][0]

    return next_node
