def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-0.5 * (num_unvisited - 5)))  # Sigmoid adjustment for weight

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate variance of distances from current node to all unvisited nodes
        distances_to_unvisited = [distance_matrix[current_node][n] for n in unvisited_nodes]
        variance = statistics.variance(distances_to_unvisited) if len(distances_to_unvisited) > 1 else 0
        novelty_penalty = variance * 0.1  # Penalize high variance

        weighted_score = (1.0 - weight_factor) * current_distance + weight_factor * future_distance + novelty_penalty
        scores.append((node, weighted_score))

    # Select node with lowest score, with randomness if scores are equal
    scores.sort(key=lambda x: x[1])
    min_score = scores[0][1]
    candidates = [node for node, score in scores if score == min_score]

    if len(candidates) > 1:
        return random.choice(candidates)
    else:
        return next_node
