def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_unvisited = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (total_unvisited / (total_unvisited + 1)))

    # Precompute centrality using eigenvector centrality approximation
    centrality = {}
    if total_unvisited > 1:
        for node in unvisited_nodes:
            centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1)
        max_centrality = max(centrality.values()) if centrality else 1
        centrality = {k: v / max_centrality for k, v in centrality.items()} if max_centrality else centrality

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Normalized centrality contribution
        node_centrality = centrality.get(node, 0)

        # Probabilistic scoring with exponential scaling
        score = (1 - weight_factor) * (1 / (1 + current_distance)) + weight_factor * (1 / (1 + future_distance)) + 0.3 * node_centrality
        scores.append((node, score))

    # Select node based on exponentially weighted probabilities
    if scores:
        nodes, raw_scores = zip(*scores)
        exp_scores = [s ** 2 for s in raw_scores]
        total_score = sum(exp_scores)
        probabilities = [s / total_score for s in exp_scores]
        next_node = np.random.choice(nodes, p=probabilities)
        return next_node
    return next_node
