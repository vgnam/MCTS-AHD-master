def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight_current = 1.0 / (remaining_nodes + 1)
        weight_destination = 1.0 - weight_current

        # Calculate score with ratio tie-breaker
        score = (weight_current * current_distance) + (weight_destination * destination_distance)
        ratio = current_distance / (destination_distance + 1e-10)  # Avoid division by zero

        if score < min_score:
            min_score = score
            next_node = node
            best_ratio = ratio
        elif score == min_score:
            if ratio < best_ratio:
                next_node = node
                best_ratio = ratio

    return next_node
