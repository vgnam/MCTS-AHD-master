import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - (0.5 * (total_unvisited / (total_unvisited + 1)))
    current_weight = 1.0
    future_weight = 0.5 + (0.3 * (1.0 - exploration_factor))

    novelty_scores = {}
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        novelty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                novelty += distance_matrix[node][neighbor] / (1 + distance_matrix[current_node][neighbor])
        novelty_scores[node] = novelty

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        novelty = novelty_scores[node]
        weighted_score = (current_weight * current_distance +
                         future_weight * future_distance +
                         exploration_factor * random.uniform(0, 1) +
                         0.2 * novelty)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node
        elif weighted_score == min_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
