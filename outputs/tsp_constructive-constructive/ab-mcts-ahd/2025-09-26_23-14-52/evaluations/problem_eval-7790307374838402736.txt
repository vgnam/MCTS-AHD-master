import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    path_progress = 1.0 - (total_unvisited / (total_unvisited + 1))
    temperature = math.exp(-2.0 * path_progress)
    density_weight = 0.5 * (1.0 - path_progress)

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited

        if path_progress < 0.5:
            penalty = 0.2 * (1.0 - path_progress) * (future_distance / (sum(distance_matrix[node][n] for n in unvisited_nodes) + 1e-6))
        else:
            penalty = 0.0

        score = current_distance + temperature * (future_distance + 0.3 * centrality) - penalty
        candidates.append((node, score, future_distance))

    if not candidates:
        return random.choice(unvisited_nodes)

    candidates.sort(key=lambda x: (x[1], x[2]))
    selected = candidates[0][0]

    if random.random() < 0.1 * (1.0 - path_progress):
        selected = random.choice([c[0] for c in candidates[:min(3, len(candidates))]])

    return next_node
