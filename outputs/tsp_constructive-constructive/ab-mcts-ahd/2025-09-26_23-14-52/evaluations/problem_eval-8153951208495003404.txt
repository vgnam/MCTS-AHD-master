def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining unvisited nodes
        weight_factor = 1.0 + (0.5 / (remaining_nodes + 1))
        weighted_score = (0.5 * current_distance) + (weight_factor * future_distance)

        # Penalty for nodes that are potential bottlenecks (high sum of distances to other unvisited nodes)
        bottleneck_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        weighted_score += 0.1 * bottleneck_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
