import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.8 * math.exp(-0.5 * (total_unvisited / (total_unvisited + 1)))

    node_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        weighted_score = (0.4 * current_distance +
                         0.3 * future_distance +
                         0.3 * centrality +
                         exploration_factor * random.uniform(0, 1))

        node_scores.append((node, weighted_score))

    # Normalize scores and select probabilistically
    max_score = max(score for _, score in node_scores)
    normalized_scores = [(node, score / max_score) for node, score in node_scores]

    # Select node with probability proportional to normalized score
    selected = random.choices(
        [node for node, _ in normalized_scores],
        weights=[score for _, score in normalized_scores],
        k=1
    )[0]

    return next_node
