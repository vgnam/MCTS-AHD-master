import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    decay_factor = 0.7 ** (10 - total_unvisited)  # Emphasizes early-stage efficiency
    centrality_bias = 1.0 - decay_factor

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        score = (1 - centrality_bias) * (current_distance + future_distance) + centrality_bias * centrality
        scores.append(score)

    # Convert scores to probabilities using softmax
    exp_scores = np.exp(-np.array(scores))  # Lower scores are better
    probabilities = exp_scores / np.sum(exp_scores)

    # Select node based on probabilities
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
