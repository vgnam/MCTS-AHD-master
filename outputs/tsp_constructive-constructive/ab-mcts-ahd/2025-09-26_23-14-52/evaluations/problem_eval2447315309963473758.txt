def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (remaining_nodes / (remaining_nodes + 1)))  # Dynamic temperature
    best_score = -float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        local_density = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        proximity_to_dest = future_distance / (sum(distance_matrix[destination_node][n] for n in unvisited_nodes) / remaining_nodes)
        weighted_score = (current_distance + temperature * (local_density - future_distance)) * (1 - 0.5 * proximity_to_dest)

        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1], reverse=True)
    selected = candidates[0][0]

    if len(candidates) > 1 and candidates[0][1] == candidates[1][1]:
        selected = candidates[0][0] if distance_matrix[current_node][candidates[0][0]] < distance_matrix[current_node][candidates[1][0]] else candidates[1][0]

    return next_node
