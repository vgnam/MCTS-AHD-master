def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    total_unvisited = len(unvisited_nodes)
    visited_ratio = (total_nodes - total_unvisited) / total_nodes
    exploration_factor = 0.5 * (1.0 - (total_unvisited / (total_unvisited + 1))) ** 2

    weighted_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = (0.6 + 0.2 * visited_ratio) * current_distance + (0.3 - 0.1 * visited_ratio) * future_distance + exploration_factor * random.uniform(0, 1)
        weighted_scores.append((node, weighted_score))

    weighted_scores.sort(key=lambda x: x[1])
    candidates = [node for node, score in weighted_scores if score == weighted_scores[0][1]]

    if len(candidates) > 1:
        future_distances = [(node, distance_matrix[node][destination_node]) for node in candidates]
        future_distances.sort(key=lambda x: x[1])
        next_node = future_distances[0][0]
    else:
        next_node = weighted_scores[0][0]

    return next_node
