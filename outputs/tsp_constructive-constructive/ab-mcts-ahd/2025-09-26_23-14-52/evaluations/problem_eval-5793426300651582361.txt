import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5)))
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = current_distance + temperature * (future_distance + 0.4 * centrality)
        scores.append((node, weighted_score))

    if not scores:
        return destination_node

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    norm_scores = [(node, (score - min_score) / (max_score - min_score + 1e-10)) for node, score in scores]
    probabilities = [math.exp(-temp * norm_score) for _, norm_score in norm_scores]
    total_prob = sum(probabilities)

    if total_prob == 0:
        return random.choice(unvisited_nodes)

    probabilities = [p / total_prob for p in probabilities]
    selected_node = random.choices([node for node, _ in norm_scores], weights=probabilities, k=1)[0]

    return next_node
