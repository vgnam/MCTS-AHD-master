def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        novelty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][n]) / total_unvisited
        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality + 0.4 * novelty) - 0.3 * future_distance

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if novelty > sum(1 for n in unvisited_nodes if distance_matrix[next_node][n] < distance_matrix[current_node][n]) / total_unvisited or future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
