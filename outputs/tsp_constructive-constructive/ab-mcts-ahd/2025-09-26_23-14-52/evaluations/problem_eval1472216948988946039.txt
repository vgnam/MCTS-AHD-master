import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    degree_factor = sum(1 for node in unvisited_nodes if distance_matrix[current_node][node] > 0) / total_nodes
    historical_factor = 0.3 * (visited_nodes / total_nodes) ** 1.5
    exploration_factor = 0.2 * (1 - (visited_nodes / total_nodes)) ** 2 * random.uniform(0, 1)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        if current_dist == 0 or future_dist == 0:
            continue

        penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0 and n != current_node)
        weighted_score = (current_dist + degree_factor * future_dist) / (1 + historical_factor * penalty) + exploration_factor

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_dist < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
