def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        ratio = current_distance / destination_distance if destination_distance != 0 else float('inf')
        total_distance = current_distance + destination_distance

        # Dynamic weighting factor based on remaining nodes and destination proximity
        remaining_nodes = len(unvisited_nodes)
        weight = 1.0 + (0.1 * (remaining_nodes / (remaining_nodes + 1))) * (destination_distance / sum(distance_matrix[node]))

        # Calculate score with penalty for nodes too far from destination
        penalty = 1.0 + 0.2 * (destination_distance / max(distance_matrix[node])) if destination_distance > 0.5 * sum(distance_matrix[node]) else 1.0
        score = (ratio * weight) + (total_distance * penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
