def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited
    max_distance = max(max(row) for row in distance_matrix)
    density_factor = 1.0 - (total_unvisited / len(distance_matrix))
    temperature = max(0.1, density_factor * (1.0 - (avg_distance / max_distance)))

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        local_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        global_centrality = sum(distance_matrix[node]) / len(distance_matrix)

        novelty_factor = 1.0 - (global_centrality / max_distance)
        distance_ratio = current_distance / (future_distance + 1e-6)
        weighted_score = (1 - temperature) * (current_distance + future_distance) + temperature * (novelty_factor - local_centrality * distance_ratio)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if novelty_factor > 1.0 - (sum(distance_matrix[next_node]) / max_distance):
                next_node = node

    return next_node
