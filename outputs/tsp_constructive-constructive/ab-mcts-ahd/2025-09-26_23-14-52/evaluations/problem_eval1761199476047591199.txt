def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_weight = 1.0 - (total_unvisited / (total_unvisited + 1)) ** 2
    exploitation_weight = 1.0 - exploration_weight

    avg_centrality = sum(sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited for node in unvisited_nodes) / total_unvisited
    centrality_variance = sum((sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited - avg_centrality) ** 2 for node in unvisited_nodes) / total_unvisited
    normalized_variance = centrality_variance / (max(1, max(max(row) for row in distance_matrix)) ** 2)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_reward = -distance_matrix[current_node][node]
        future_reward = -distance_matrix[node][destination_node]
        centrality_reward = -sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        variance_reward = -normalized_variance

        combined_score = (exploration_weight * (immediate_reward + future_reward) +
                          exploitation_weight * (centrality_reward + variance_reward))

        if combined_score > best_score:
            best_score = combined_score
            next_node = node
        elif combined_score == best_score:
            if sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited < sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited:
                next_node = node

    return next_node
