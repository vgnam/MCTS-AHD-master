def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = remaining_nodes / (remaining_nodes + 2)  # Modified weight adjustment

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        potential_path = current_distance + destination_distance
        distance_penalty = max(0, (potential_path - 2 * distance_matrix[current_node][destination_node]) / distance_matrix[current_node][destination_node])

        score = (weight_factor * current_distance) + ((1 - weight_factor) * destination_distance) + 0.3 * distance_penalty

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
