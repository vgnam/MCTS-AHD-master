def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (total_unvisited / (total_unvisited + 1)))

    # Memory-based adjustment: prioritize nodes that were historically better choices
    memory_factor = 0.2  # Base weight for historical performance
    historical_scores = {}  # Placeholder for historical data (in practice, this would be tracked)
    novelty_factor = 0.3  # Penalty for frequently selected nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Base score with dynamic weight
        base_score = current_distance + weight_factor * future_distance

        # Apply historical adjustment if available
        if node in historical_scores:
            historical_score = historical_scores[node]
            # Adjust memory factor based on tour progress
            adjusted_memory_factor = memory_factor * (1 - (total_unvisited / (total_unvisited + 1)))
            # Apply novelty penalty if node was selected before
            novelty_penalty = novelty_factor * historical_score if historical_score > 0 else 0
            adjusted_score = base_score * (1 - adjusted_memory_factor) + historical_score * adjusted_memory_factor + novelty_penalty
        else:
            adjusted_score = base_score

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node
        elif adjusted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
