def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 / (1 + 0.5 * (total_unvisited ** 0.5)))
    momentum_factor = 0.3 * (1 - total_unvisited / (total_unvisited + 1))

    probabilities = []
    total_prob = 0.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        combined_score = current_distance + temperature * future_distance
        momentum_score = momentum_factor * (current_distance + future_distance)
        adjusted_score = combined_score + momentum_score
        probability = max(0.01, 1.0 / (1 + adjusted_score))
        probabilities.append((probability, node))
        total_prob += probability

    if total_prob > 0:
        normalized_probs = [(p/total_prob, n) for p, n in probabilities]
        next_node = random.choices([n for _, n in normalized_probs], weights=[p for p, _ in normalized_probs])[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
