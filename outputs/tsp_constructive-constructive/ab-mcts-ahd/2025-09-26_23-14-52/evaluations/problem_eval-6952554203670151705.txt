import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = math.exp(-0.5 * (total_unvisited / (total_unvisited + 1)))

    node_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to all unvisited nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited

        # Historical visit frequency (simulated here for demonstration)
        visit_frequency = random.uniform(0.1, 0.5)

        # Recent visit penalty (simulated here for demonstration)
        recent_visit_penalty = 1.0 if node in unvisited_nodes[-3:] else 1.0

        # Weighted score with dynamic components
        weighted_score = (
            0.5 * current_distance +
            0.3 * future_distance +
            0.1 * centrality +
            0.05 * visit_frequency +
            0.05 * recent_visit_penalty +
            exploration_factor * random.uniform(0, 0.2)
        )

        node_scores.append((node, weighted_score))

    # Select top 3 candidates and choose randomly
    candidates = sorted(node_scores, key=lambda x: x[1])[:3]
    selected_node, _ = random.choice(candidates)

    return next_node
