import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_proximity = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited
    weight_factor = max(0.1, 0.7 * (remaining_proximity / (remaining_proximity + 1)))
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    best_score = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        normalized_centrality = centrality / (sum(distance_matrix[node][n] for n in unvisited_nodes) + 1e-6)
        weighted_score = current_distance + weight_factor * future_distance + temperature * normalized_centrality

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        next_node = random.choice(candidates)
    else:
        next_node = candidates[0]

    return next_node
