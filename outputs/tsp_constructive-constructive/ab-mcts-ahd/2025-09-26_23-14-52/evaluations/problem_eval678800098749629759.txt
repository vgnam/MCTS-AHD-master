def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = min(0.9, (total_unvisited / len(distance_matrix)))
    penalty_factor = 1.0 + (1.0 - (total_unvisited / len(distance_matrix))) * 0.5

    node_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        ratio = current_distance / destination_distance if destination_distance != 0 else float('inf')
        weighted_distance = weight_factor * current_distance + (1 - weight_factor) * destination_distance
        penalty = penalty_factor * (1.0 - (destination_distance / max(distance_matrix[node])))
        score = (ratio * weighted_distance) / (1.0 + penalty)

        node_scores.append((node, score, current_distance, destination_distance))

    if not node_scores:
        return destination_node

    node_scores.sort(key=lambda x: (x[1], x[2], -x[3]))
    selected_node = node_scores[0][0]

    return next_node
