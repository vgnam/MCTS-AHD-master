import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, math.exp(-0.5 * total_unvisited / (total_unvisited + 1)))
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))

        immediate_weight = (1 - temperature) ** 2
        centrality_weight = temperature * (1 - temperature)
        future_weight = temperature ** 2

        score = (immediate_weight * (-current_distance) +
                 centrality_weight * (centrality + 0.2 * degree) -
                 future_weight * future_distance)
        scores.append((node, score))

    if not scores:
        return random.choice(unvisited_nodes)

    scores.sort(key=lambda x: x[1], reverse=True)
    max_score = scores[0][1]
    candidates = [node for node, score in scores if score == max_score]

    if len(candidates) == 1:
        return candidates[0]
    else:
        probabilities = [math.exp(score / temperature) for node, score in scores if node in candidates]
        probabilities = [p / sum(probabilities) for p in probabilities]
        return next_node
