import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    exploration_factor = np.exp(-0.5 * (total_unvisited - 1))
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        future_potential = np.mean([distance_matrix[node][n] for n in unvisited_nodes if n != node])
        centrality = np.sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        normalized_centrality = centrality / (np.sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / total_unvisited + 1e-6)

        priority_scale = 1.0 + 0.2 * (1 - temperature)
        weighted_score = (current_distance + future_distance) * priority_scale + \
                         temperature * (0.7 * centrality + 0.3 * future_potential) + \
                         exploration_factor * normalized_centrality

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_potential < np.mean([distance_matrix[next_node][n] for n in unvisited_nodes if n != next_node]):
                next_node = node

    return next_node
