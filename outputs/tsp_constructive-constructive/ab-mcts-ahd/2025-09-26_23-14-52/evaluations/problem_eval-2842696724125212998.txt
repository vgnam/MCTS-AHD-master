def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 - (total_unvisited / (total_unvisited + 1)) ** 2

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate centrality penalty (average distance to other unvisited nodes)
        centrality_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, total_unvisited - 1)

        # Adjust score with centrality penalty and dynamic weight
        adjusted_score = (current_distance + weight_factor * future_distance) / (1 + future_distance) - (1 - weight_factor) * centrality_penalty

        if adjusted_score > best_score:
            best_score = adjusted_score
            next_node = node
        elif adjusted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
