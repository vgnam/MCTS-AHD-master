def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = remaining_nodes / total_nodes

    # Dynamic weighting using sigmoid function
    immediate_weight = 1.0 + 4.0 / (1.0 + math.exp(-10.0 * (progress - 0.5)))
    future_weight = 1.0 + 4.0 / (1.0 + math.exp(10.0 * (progress - 0.5)))

    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = immediate_weight * current_distance + future_weight * future_distance

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    # Probabilistic selection for exploration
    if len(candidates) > 1 and random.random() < 0.1:
        next_node = random.choice(candidates)
    else:
        # Tie-breaker: select node with minimum combined distance
        next_node = min(candidates, key=lambda n: (distance_matrix[current_node][n] + distance_matrix[n][destination_node]))

    return next_node
