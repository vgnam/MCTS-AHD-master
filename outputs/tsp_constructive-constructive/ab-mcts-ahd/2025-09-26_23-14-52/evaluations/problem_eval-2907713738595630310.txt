import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    max_exploration = 0.4
    exploration_decay = 0.9
    exploration_factor = max_exploration * (exploration_decay ** (10 - total_unvisited))

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        predicted_cost = current_distance + future_distance * 0.7

        score = 0.6 * current_distance + 0.4 * predicted_cost + exploration_factor * random.gauss(0, 1)
        candidates.append((node, score, current_distance))

    candidates.sort(key=lambda x: (x[1], x[2]))
    selected = random.choices(
        [c[0] for c in candidates[:min(3, len(candidates))]],
        weights=[math.exp(-c[1]) for c in candidates[:min(3, len(candidates))]],
        k=1
    )[0]

    return next_node
