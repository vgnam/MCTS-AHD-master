def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        normalized_distance = current_distance / max_distance if max_distance > 0 else 0
        weight_factor = 1 / (1 + math.exp(5 * (normalized_distance - 0.5)))
        future_weight = 1 - weight_factor
        weighted_score = (weight_factor * current_distance) + (future_weight * future_distance)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if (current_distance - future_distance) < (distance_matrix[current_node][next_node] - distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
