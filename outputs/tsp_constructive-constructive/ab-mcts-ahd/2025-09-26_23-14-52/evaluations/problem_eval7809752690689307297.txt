def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        weighted_score = current_distance + weight_factor * future_distance
        ratio = current_distance / future_distance if future_distance != 0 else float('inf')

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if ratio < (distance_matrix[current_node][next_node] / distance_matrix[next_node][destination_node]) if distance_matrix[next_node][destination_node] != 0 else float('inf'):
                next_node = node
            elif ratio == (distance_matrix[current_node][next_node] / distance_matrix[next_node][destination_node]) if distance_matrix[next_node][destination_node] != 0 else float('inf'):
                if centrality < sum(distance_matrix[next_node][n] for n in unvisited_nodes) / remaining_nodes:
                    next_node = node

    return next_node
