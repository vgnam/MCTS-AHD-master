def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 1.0 / (len(unvisited_nodes) ** 0.5)
    scores = []
    nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        score = current_distance - temperature * (centrality - future_distance)
        scores.append(score)
        nodes.append(node)

    max_score = max(scores)
    min_score = min(scores)
    normalized_scores = [(s - min_score) / (max_score - min_score) for s in scores]

    if len(unvisited_nodes) <= 5:
        for i in range(len(nodes)):
            local_search = sum(distance_matrix[nodes[i]][n] for n in unvisited_nodes if n != nodes[i]) / (len(unvisited_nodes) - 1)
            normalized_scores[i] = (normalized_scores[i] + local_search) / 2

    probabilities = [math.exp(s / temperature) for s in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
