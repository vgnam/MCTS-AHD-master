def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    alpha = 0.5 + 0.4 * (remaining_nodes / (remaining_nodes + 1))  # Dynamic weighting factor
    beta = 0.1 * (remaining_nodes / (remaining_nodes + 1))  # Penalty scaling factor

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        penalty = beta * (1 / (current_distance + 1e-6))  # Penalty for nodes too close
        weighted_score = alpha * future_distance + (1 - alpha) * current_distance - penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
