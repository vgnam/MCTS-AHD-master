def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 for the current node
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    # Dynamic weighting using sigmoid function
    sigmoid = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
    current_weight = 1.5 + 0.5 * sigmoid
    future_weight = 0.5 + 0.5 * (1 - sigmoid)

    best_score = float('inf')
    next_node = None
    lookahead_depth = min(3, remaining_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Lookahead mechanism
        lookahead_score = 0
        if remaining_nodes > 1:
            remaining = unvisited_nodes.copy()
            remaining.remove(node)
            lookahead_node = select_next_node(node, destination_node, remaining, distance_matrix)
            lookahead_score = distance_matrix[node][lookahead_node] * 0.3

        weighted_score = current_weight * current_distance + future_weight * future_distance + lookahead_score

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
