def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_rate = max(0.1, 1.0 - (len(unvisited_nodes) / len(distance_matrix)))
    best_score = float('inf')
    next_node = None
    candidate_nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        score = current_distance + exploration_rate * future_distance
        candidate_nodes.append((node, score))

    if candidate_nodes:
        candidate_nodes.sort(key=lambda x: x[1])
        best_score = candidate_nodes[0][1]
        best_candidates = [node for node, score in candidate_nodes if score == best_score]

        if len(best_candidates) > 1:
            next_node = min(best_candidates, key=lambda x: distance_matrix[x][destination_node])
        else:
            next_node = best_candidates[0]

    return next_node
