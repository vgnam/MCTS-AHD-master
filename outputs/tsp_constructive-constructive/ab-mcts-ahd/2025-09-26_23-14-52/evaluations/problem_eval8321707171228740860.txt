def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_weight = max(0.1, 0.7 * (total_unvisited / (total_unvisited + 1)))

    # Centrality-based adjustment: prioritize nodes with higher centrality (lower average distance to others)
    centrality_scores = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality_scores[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Composite score with exploration weight and centrality adjustment
        composite_score = current_distance + exploration_weight * future_distance * (1 - centrality_scores[node] / max(centrality_scores.values(), default=1))

        if composite_score < best_score:
            best_score = composite_score
            next_node = node
        elif composite_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
