def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 0.5 * (len(unvisited_nodes) / len(distance_matrix))
    scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        weighted_score = current_distance + temperature * (centrality - future_distance)
        scores.append((node, weighted_score))
        total_score += weighted_score

    if not scores:
        return destination_node

    probabilities = []
    for node, score in scores:
        probability = (total_score - score) / total_score if total_score > 0 else 1.0 / len(scores)
        probabilities.append((node, probability))

    probabilities.sort(key=lambda x: x[1], reverse=True)
    selected_node = probabilities[0][0]

    return next_node
