def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + math.exp(-(total_unvisited - 5)))  # Sigmoid-based temperature

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        variance = sum((distance_matrix[node][other] - avg_distance) ** 2 for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Dynamic weight adjustment
        weight_current = 0.1 + 0.3 * (1 - temperature)
        weight_future = 0.5 + 0.2 * temperature
        weight_avg = 0.3 + 0.1 * temperature
        weight_variance = 0.1 * temperature

        weighted_score = (weight_current * current_distance +
                         weight_future * future_distance +
                         weight_avg * avg_distance +
                         weight_variance * variance)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
