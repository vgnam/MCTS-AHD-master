def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (total_unvisited / (total_unvisited + 1)))

    memory_factor = 0.3
    historical_scores = {}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        base_score = current_distance + weight_factor * future_distance

        if node in historical_scores:
            adjusted_score = base_score * (1 - memory_factor) + historical_scores[node] * memory_factor
        else:
            adjusted_score = base_score

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node
        elif adjusted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
