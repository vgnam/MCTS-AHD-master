def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, path_history=None):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1 / (1 + remaining_nodes)  # Dynamic weight based on remaining nodes

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Penalty for revisited nodes
        penalty = 1.0 if (path_history and node in path_history) else 0.0

        # Weighted score combining current and destination distances with penalty
        score = (1 - weight_factor) * current_distance + weight_factor * destination_distance + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
