def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    # Dynamic weight factor based on remaining path length and node density
    density_factor = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - len(distance_matrix) / 2)))
    remaining_path_factor = min(1.0, (total_unvisited / len(distance_matrix)) ** 2)
    weight_factor = density_factor * remaining_path_factor

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        normalized_current = current_distance / avg_distance
        normalized_future = future_distance / distance_matrix[current_node][destination_node]

        # Novel scoring equation combining normalized distances with dynamic weights
        weighted_score = (1 - weight_factor) * normalized_current + weight_factor * normalized_future

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
