import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None
    candidates = []

    # Calculate centrality of current node (average distance to unvisited nodes)
    centrality = np.mean([distance_matrix[current_node][node] for node in unvisited_nodes])

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and centrality
        if remaining_nodes > 5:
            weight = 0.6 if centrality < np.mean(distance_matrix[current_node]) else 0.8
        elif remaining_nodes > 2:
            weight = 0.4 if centrality < np.mean(distance_matrix[current_node]) else 0.6
        else:
            weight = 0.2 if centrality < np.mean(distance_matrix[current_node]) else 0.4

        # Novel scoring function with logarithmic penalty
        penalty = 0.2 * (np.log(future_distance + 1) / (current_distance + 1e-10))
        weighted_score = current_distance + weight * future_distance - penalty

        candidates.append((node, weighted_score))

    # Probabilistic selection to escape local optima
    if np.random.rand() < 0.2 and len(candidates) > 1:
        candidates = sorted(candidates, key=lambda x: x[1])
        top_candidates = candidates[:min(3, len(candidates))]
        next_node = np.random.choice([x[0] for x in top_candidates])
    else:
        next_node = min(candidates, key=lambda x: x[1])[0]

    return next_node
