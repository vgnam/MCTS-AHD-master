def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    cluster_proximity = 0
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance from current node to all unvisited nodes
    avg_current_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on cluster proximity
        if current_distance < avg_current_distance:
            weight_factor = 0.7  # Higher weight for immediate distance if node is close to current cluster
        else:
            weight_factor = 0.5  # Lower weight if node is far from current cluster

        future_weight = 1 - weight_factor

        # Penalize nodes far from current cluster to encourage exploration
        cluster_penalty = (current_distance - avg_current_distance) ** 2 if current_distance > avg_current_distance else 0

        # Normalized score calculation
        weighted_score = (weight_factor * current_distance) + (future_weight * future_distance) + cluster_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
