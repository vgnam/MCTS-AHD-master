import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + math.exp(-0.5 * (total_unvisited - 5)))
    randomness_decay = 0.15 + 0.1 * (1.0 - exploration_factor)

    best_score = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = 0.6 * current_distance + 0.25 * future_distance + exploration_factor * random.uniform(0, randomness_decay)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        best_local_score = float('inf')
        for node in candidates:
            local_avg = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)
            if local_avg < best_local_score:
                best_local_score = local_avg
                next_node = node

    return next_node
