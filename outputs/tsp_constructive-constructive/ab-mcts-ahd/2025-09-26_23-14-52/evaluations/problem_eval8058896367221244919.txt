def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    efficiency_weight = 0.4 + 0.3 * (1 - remaining_nodes / len(distance_matrix))  # Adjusts from 0.4 to 0.7 as nodes are visited
    progress_weight = 1 - efficiency_weight
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Penalize nodes that are too close to the current node to avoid revisiting
        proximity_penalty = 0.1 if current_distance < 0.2 * min(distance_matrix[current_node]) else 0

        # Calculate node density (average distance to other unvisited nodes)
        node_density = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Combined score: weighted distance + density + proximity penalty
        score = (efficiency_weight * current_distance + progress_weight * destination_distance) + (0.3 * node_density) + proximity_penalty

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
