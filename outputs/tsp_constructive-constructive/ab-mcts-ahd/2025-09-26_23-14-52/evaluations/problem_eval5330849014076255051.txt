def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    total_unvisited = len(unvisited_nodes)
    progress = 1.0 - (total_unvisited / len(distance_matrix))
    sigmoid_weight = 1.0 / (1.0 + math.exp(-10 * (progress - 0.5)))

    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        normalized_future = future_distance / (sum(distance_matrix[node]) / len(distance_matrix[node]))

        score = (1 - sigmoid_weight) * current_distance + sigmoid_weight * normalized_future

        if score < best_score:
            best_score = score
            candidates = [node]
        elif score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        ratio_scores = [(distance_matrix[current_node][node] / distance_matrix[node][destination_node]) for node in candidates]
        next_node = candidates[np.argmin(ratio_scores)]
    else:
        next_node = candidates[0]

    return next_node
