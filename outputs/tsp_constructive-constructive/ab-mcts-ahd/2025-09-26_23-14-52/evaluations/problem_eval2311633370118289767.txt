def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight using sigmoid function
    x = (remaining_nodes - 1) / (remaining_nodes + 1)
    weight_factor = 1 / (1 + math.exp(-10 * (x - 0.5)))  # Sigmoid with midpoint at 0.5

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate average distance to remaining unvisited nodes
        avg_future = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Path potential metric: current + future + exploration component
        path_potential = current_distance + weight_factor * future_distance + (1 - weight_factor) * avg_future

        if path_potential < best_score:
            best_score = path_potential
            next_node = node
        elif path_potential == best_score:
            # Tiebreaker: prefer node with higher average future distance (more exploration)
            if avg_future > sum(distance_matrix[next_node][n] for n in unvisited_nodes if n != next_node) / max(1, remaining_nodes - 1):
                next_node = node

    return next_node
