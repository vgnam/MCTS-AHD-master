def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 0.5 + 0.5 * (1 - (remaining_nodes / len(distance_matrix))) ** 0.5
        total_distance = current_distance + weight * destination_distance

        # Additional centrality consideration
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)
        adjusted_distance = total_distance + 0.2 * centrality

        if adjusted_distance < min_distance:
            min_distance = adjusted_distance
            next_node = node
        elif adjusted_distance == min_distance:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node
            elif destination_distance == distance_matrix[next_node][destination_node]:
                if centrality < sum(distance_matrix[next_node][other] for other in unvisited_nodes if other != next_node) / max(1, remaining_nodes - 1):
                    next_node = node

    return next_node
