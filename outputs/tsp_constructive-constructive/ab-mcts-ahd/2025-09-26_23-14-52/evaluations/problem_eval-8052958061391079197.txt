import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - (0.7 * (total_unvisited / (total_unvisited + 1)))
    sigmoid_weight = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        if total_unvisited > 2:
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    segment_distance = current_distance + distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node]
                    if segment_distance < best_score:
                        best_score = segment_distance
                        next_node = node

        weighted_score = (0.5 * current_distance) + (0.3 * future_distance) + (exploration_factor * sigmoid_weight * random.uniform(0, 1))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
