def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1 / (1 + math.exp(-0.5 * (total_unvisited - 5)))
    centrality_weights = 0.6 if total_unvisited > 5 else 0.4
    future_weights = 0.4 if total_unvisited > 5 else 0.6

    best_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        path_potential = (centrality_weights * centrality) + (future_weights * future_distance)
        adjusted_score = current_distance + temperature * path_potential

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node
        elif adjusted_score == best_score:
            if (current_distance + future_distance) < (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
