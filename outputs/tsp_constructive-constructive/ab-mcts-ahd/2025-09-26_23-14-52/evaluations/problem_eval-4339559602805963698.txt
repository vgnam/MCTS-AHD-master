def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 1)) ** 3
    detour_penalty = progress_factor * 0.5

    # Calculate mean and variance of distances to unvisited nodes
    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    mean_distance = sum(distances_to_unvisited) / total_unvisited
    variance = sum((d - mean_distance) ** 2 for d in distances_to_unvisited) / total_unvisited

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate detour penalty based on deviation from mean
        deviation = abs(current_distance - mean_distance)
        detour_score = deviation * detour_penalty

        # Normalized score incorporating detour penalty
        normalized_score = (current_distance + progress_factor * future_distance - detour_score) / (1 + future_distance + variance)

        if normalized_score > best_score:
            best_score = normalized_score
            next_node = node
        elif normalized_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
