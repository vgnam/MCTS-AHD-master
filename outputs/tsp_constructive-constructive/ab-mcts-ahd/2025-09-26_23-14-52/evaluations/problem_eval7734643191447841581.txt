import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_factor = math.exp(-total_unvisited / (total_unvisited + 1))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = 0.6 * current_distance + 0.25 * future_distance + exploration_factor * random.uniform(0.15, 0.25)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            variance = sum((d - sum(distances)/len(distances))**2 for d in distances) / len(distances)
            next_distances = [distance_matrix[next_node][n] for n in unvisited_nodes if n != next_node]
            next_variance = sum((d - sum(next_distances)/len(next_distances))**2 for d in next_distances) / len(next_distances)
            if variance < next_variance:
                next_node = node

    return next_node
