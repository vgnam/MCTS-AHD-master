def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Dynamic threshold for switching between local and global focus
    threshold = 0.5 * (1.0 + (remaining_nodes / len(distance_matrix)))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Non-linear weighting based on remaining nodes and threshold
        if remaining_nodes > threshold * len(distance_matrix):
            weight_current = 0.3 + 0.7 * (remaining_nodes / len(distance_matrix))
            weight_destination = 1.0 - weight_current
        else:
            weight_current = 0.7
            weight_destination = 0.3

        # Add probabilistic component to avoid local optima
        random_factor = 0.1 * (1.0 - (remaining_nodes / len(distance_matrix)))
        score = (weight_current * current_distance) + (weight_destination * destination_distance) + random_factor * (destination_distance - current_distance)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
