def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_factor = 1 / (1 + math.exp(-10 * (visited_ratio - 0.5)))

    best_score = float('-inf')
    next_node = None
    diversity_bonus = {}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        if (current_node, node) in diversity_bonus:
            diversity_bonus[(current_node, node)] += 1
        else:
            diversity_bonus[(current_node, node)] = 1

        weighted_score = (0.4 - 0.3 * visited_ratio) * current_distance + (0.6 + 0.3 * visited_ratio) * future_distance
        weighted_score += exploration_factor * random.uniform(0, 1) - 0.5 * math.log(diversity_bonus[(current_node, node)])

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
