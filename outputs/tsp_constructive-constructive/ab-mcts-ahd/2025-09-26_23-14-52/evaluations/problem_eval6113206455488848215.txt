def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (total_nodes - num_unvisited) / total_nodes  # Encourages exploration as more nodes are visited
    weight_factor = 0.5 + 0.5 * (1.0 - exploration_factor)  # Adjusts weight dynamically

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        revisit_penalty = 0.1 * (total_nodes - num_unvisited)  # Penalty for revisiting nodes
        weighted_score = (1.0 - weight_factor) * current_distance + weight_factor * future_distance + revisit_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited
            if current_distance - node_centrality < 0:
                next_node = node

    return next_node
