def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = total_unvisited / total_nodes

    # Dynamic weight factors using sigmoid function
    distance_weight = 1 / (1 + math.exp(-10 * (1 - progress_ratio)))
    future_weight = 1 - distance_weight
    proximity_factor = math.exp(-total_unvisited / total_nodes)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_degree = sum(1 for n in unvisited_nodes if n != node)

        # Composite score with dynamic weights and proximity factor
        weighted_score = (distance_weight * current_distance +
                         future_weight * future_distance -
                         proximity_factor * node_degree)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if (future_distance < distance_matrix[next_node][destination_node] or
                node_degree > sum(1 for n in unvisited_nodes if n != next_node)):
                next_node = node

    return next_node
