def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_weight = min(0.5, 0.2 + 0.3 * (remaining_nodes / total_nodes))  # Dynamic weighting
    efficiency_weight = 1 - progress_weight

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        detour_penalty = current_distance + destination_distance - distance_matrix[current_node][destination_node]

        weighted_distance = efficiency_weight * current_distance + progress_weight * destination_distance
        score = weighted_distance + 0.3 * detour_penalty

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
