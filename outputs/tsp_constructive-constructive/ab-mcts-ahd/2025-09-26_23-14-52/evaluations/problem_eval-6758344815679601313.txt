import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    node_density = 1.0 / (1.0 + math.exp(-0.2 * (total_unvisited - 3)))  # Higher density at lower unvisited nodes
    exploration_weight = node_density * (1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 7))))  # Decaying exploration

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Local search with adjusted segment evaluation
        if total_unvisited > 3:
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    segment_distance = current_distance + distance_matrix[node][neighbor] + future_distance
                    if segment_distance < best_score:
                        best_score = segment_distance
                        next_node = node

        # Dynamic weighted score with exploration and random decay
        weighted_score = (0.4 * current_distance) + (0.3 * future_distance) + (exploration_weight * 0.3 * random.uniform(0.1, 0.9))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
