importance and a probabilistic selection based on node rankings, ensuring balanced exploration of immediate and long-term gains while avoiding premature convergence.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and proximity to destination
        if remaining_nodes > 5:
            weight = 0.8 * (0.9 ** (remaining_nodes - 5))
        elif remaining_nodes > 2:
            weight = 0.5 * (0.9 ** (remaining_nodes - 2))
        else:
            weight = 0.3

        # Probabilistic adjustment based on node ranking
        rank = sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] < current_distance)
        rank_penalty = 0.1 * (rank / (remaining_nodes + 1e-10))

        # Combined score with exponential decay for future distance
        score = current_distance + weight * (future_distance ** 0.8) - rank_penalty
        scores.append((score, node))

    # Select top 3 candidates and choose randomly
    candidates = sorted(scores, key=lambda x: x[0])[:3]
    next_node = random.choice([node for (score, node) in candidates]) if candidates else unvisited_nodes[0]

    return next_node
