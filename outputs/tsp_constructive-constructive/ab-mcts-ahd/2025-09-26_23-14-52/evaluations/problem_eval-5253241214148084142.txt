import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + total_unvisited)  # Decaying temperature

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        combined_distance = current_distance + future_distance
        scores.append(combined_distance)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score + 1e-6) / (max_score - min_score + 1e-6) for score in scores]  # Invert and normalize

    # Apply temperature to probabilities
    probs = [math.exp(score / temperature) for score in normalized_scores]
    prob_sum = sum(probs)
    probs = [p / prob_sum for p in probs]

    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
