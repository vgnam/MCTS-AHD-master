def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = max(0.1, 0.9 ** (10 - total_unvisited))
    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_score = (1 - exploration_factor) * current_distance + exploration_factor * future_distance + 0.2 * centrality

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) == 1:
        return candidates[0]
    else:
        min_total = float('inf')
        best_node = None
        for node in candidates:
            total_path = current_distance + future_distance + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            if total_path < min_total:
                min_total = total_path
                best_node = node
        return next_node
