import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_decay = 1.0 / (1.0 + math.exp(-0.1 * (total_unvisited - 5)))
    temperature = 1.0 - 0.8 * exploration_decay

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        score = (0.5 * current_dist + 0.4 * future_dist) * (1 + 0.5 * exploration_decay)
        scores.append((node, score))

    if temperature < 0.1:
        next_node = max(scores, key=lambda x: x[1])[0]
    else:
        probabilities = [math.exp(score / temperature) for (_, score) in scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for (node, _) in scores], weights=probabilities, k=1)[0]

    if any(scores[i][1] == scores[scores.index((next_node, scores[scores.index((next_node, _))][1]))][1] for i in range(len(scores)) if scores[i][0] != next_node):
        future_distances = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        variance = [abs(d - sum(future_distances)/len(future_distances)) for d in future_distances]
        next_node = unvisited_nodes[variance.index(max(variance))]

    return next_node
