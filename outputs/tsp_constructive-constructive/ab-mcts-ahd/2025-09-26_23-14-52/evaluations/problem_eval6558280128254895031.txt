def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 - (remaining_nodes / (remaining_nodes + 2))  # Modified dynamic weight

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        ratio_score = current_distance / (future_distance + 1e-6)  # Avoid division by zero
        penalty_term = (1 - weight_factor) * future_distance  # Penalize long future distances
        total_score = ratio_score + penalty_term

        if total_score < best_score:
            best_score = total_score
            next_node = node
        elif total_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
