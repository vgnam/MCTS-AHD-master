importance scores that combine immediate distance, future potential, and long-term centrality, with adaptive weights that emphasize either local efficiency or global optimization based on the remaining unvisited nodes, while adding a probabilistic selection mechanism to introduce controlled randomness and improve solution diversity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.3 * (total_unvisited / (total_unvisited + 1))
    weight_factor = 0.6 * (total_unvisited / (total_unvisited + 1))
    random_factor = 0.1 * (1 - total_unvisited / (total_unvisited + 1))

    node_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        importance_score = (1 - exploration_factor) * (current_distance + weight_factor * future_distance) + exploration_factor * centrality

        node_scores.append((node, importance_score))

    if random.random() < random_factor:
        selected_node = random.choice(unvisited_nodes)
    else:
        node_scores.sort(key=lambda x: x[1])
        selected_node = node_scores[0][0]

    return next_node
