def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance to destination for normalization
    avg_dest_dist = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes and destination proximity
        weight_current = 0.5 * (1.0 / (remaining_nodes + 1))
        weight_destination = 0.5 * (1.0 - (destination_distance / (avg_dest_dist + 1e-6)))

        # Node centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)

        # Calculate weighted score with centrality adjustment
        score = (weight_current * current_distance) + (weight_destination * destination_distance) + (0.2 * centrality)

        # Penalty for nodes closer to destination than current node
        if destination_distance < distance_matrix[current_node][destination_node]:
            score *= 1.2

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
