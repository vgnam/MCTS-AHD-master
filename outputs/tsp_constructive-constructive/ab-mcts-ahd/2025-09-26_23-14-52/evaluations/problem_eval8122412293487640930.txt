def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = 0.3  # Fixed exploration factor
    best_score = float('-inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        weighted_score = (1 - exploration_factor) * current_distance + exploration_factor * (0.5 * centrality + 0.5 * future_distance)

        if weighted_score > best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) > 1:
        distance_scores = [distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in candidates]
        next_node = candidates[distance_scores.index(min(distance_scores))]
    else:
        next_node = candidates[0]

    return next_node
