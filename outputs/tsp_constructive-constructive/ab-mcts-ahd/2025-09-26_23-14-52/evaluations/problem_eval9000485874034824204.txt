def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 - 1.0 / (1.0 + math.exp(-(remaining_nodes - 5)))  # Sigmoid-based dynamic weight

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate average distance to remaining nodes for novelty
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Power-weighted distance metric
        weighted_score = (current_distance ** 0.7) + (future_distance ** 0.7) * exploration_factor
        novelty_score = avg_distance * 0.3  # Novelty term

        total_score = weighted_score + novelty_score

        if total_score < best_score:
            best_score = total_score
            next_node = node
        elif total_score == best_score:
            if (current_distance + future_distance) < (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
