def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_ratio = total_unvisited / (total_unvisited + 1)
    weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        sum_distance = current_distance + future_distance
        product_distance = current_distance * future_distance
        ratio = sum_distance / product_distance if product_distance != 0 else float('inf')
        opportunity_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        score = ratio + weight * (0.4 * centrality + 0.3 * future_distance + 0.3 * opportunity_cost)
        candidates.append((node, score, future_distance))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: (x[1], x[2]))
    return next_node
