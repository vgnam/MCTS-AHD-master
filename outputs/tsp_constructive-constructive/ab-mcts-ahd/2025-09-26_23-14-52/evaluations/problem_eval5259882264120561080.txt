def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weighted_scores = []
    max_current_dist = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    max_dest_dist = max(distance_matrix[node][destination_node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        normalized_current = current_dist / max_current_dist if max_current_dist != 0 else 0
        normalized_dest = dest_dist / max_dest_dist if max_dest_dist != 0 else 0

        weight = 0.6
        score = weight * normalized_current + (1 - weight) * normalized_dest
        weighted_scores.append((node, score))

    weighted_scores.sort(key=lambda x: x[1])
    return next_node
