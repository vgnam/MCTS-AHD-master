def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited
    temperature = max(0.1, (1.0 - (total_unvisited / (total_unvisited + 1))) * (1.0 - (avg_distance / max(1, max(max(row) for row in distance_matrix)))))
    bias_factor = 1.0 + (1.0 / (1.0 + total_unvisited)) * (avg_distance / max(1, max(max(row) for row in distance_matrix)))

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        distance_ratio = current_distance / (future_distance + 1e-6)
        weighted_score = (1 - temperature) * (current_distance + future_distance) - temperature * centrality * distance_ratio
        scores.append(weighted_score)

    max_score = max(scores)
    if max_score == float('-inf'):
        return unvisited_nodes[0]

    exp_scores = [math.exp(score - max_score) * bias_factor for score in scores]
    total_exp_score = sum(exp_scores)
    probs = [exp_score / total_exp_score for exp_score in exp_scores]

    selected_index = random.choices(range(len(unvisited_nodes)), weights=probs, k=1)[0]
    return next_node
