importance score that combines current distance, future distance, and a node's centrality (average distance to all other nodes), with exploration controlled by a decaying randomness factor and tie-breaking based on both future distance and centrality.}

```python
import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 - (0.7 * (total_unvisited / (total_unvisited + 1)))
    current_weight = 1.0
    future_weight = 0.5 + (0.4 * (1.0 - exploration_factor))

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = np.mean(distance_matrix[node])

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        node_centrality = centrality[node]
        weighted_score = (current_weight * current_distance +
                         future_weight * future_distance +
                         0.3 * node_centrality +
                         exploration_factor * random.uniform(0, 1))

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node
        elif weighted_score == min_score:
            if (future_distance < distance_matrix[next_node][destination_node] or
                node_centrality < centrality.get(next_node, float('inf'))):
                next_node = node

    return next_node
