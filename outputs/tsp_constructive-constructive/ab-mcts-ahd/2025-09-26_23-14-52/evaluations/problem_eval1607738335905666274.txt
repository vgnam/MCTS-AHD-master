def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 - (num_unvisited / (num_unvisited + 5))  # More aggressive weighting for current distance when few nodes remain

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = (1.0 - weight_factor) * current_distance + weight_factor * future_distance

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            avg_current_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / num_unvisited
            avg_future_distance = sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / num_unvisited
            if current_distance < avg_current_distance and future_distance < avg_future_distance:
                next_node = node

    return next_node
