def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = max(0.1, 0.8 * (1 - (total_unvisited / (total_unvisited + 2)) ** 1.5))
    decay_rate = 0.95
    normalized_scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = (1 - exploration_factor) * current_distance + exploration_factor * future_distance
        normalized_score = weighted_score / (current_distance + future_distance + 1e-6)
        normalized_scores.append((normalized_score, current_distance, future_distance, node))

    normalized_scores.sort(key=lambda x: x[0])
    min_score = normalized_scores[0][0]
    candidates = [s for s in normalized_scores if s[0] == min_score]

    if len(candidates) > 1:
        candidates.sort(key=lambda x: x[1] + x[2])
        next_node = candidates[0][3]
    else:
        next_node = candidates[0][3]

    exploration_factor *= decay_rate
    return next_node
