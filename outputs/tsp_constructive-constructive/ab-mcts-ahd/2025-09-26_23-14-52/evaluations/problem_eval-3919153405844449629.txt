def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight for current distance based on remaining path length
        weight_current = 1.0 / (1.0 + total_unvisited)
        weight_destination = 1.0 - weight_current

        # Heuristic factor for destination distance
        heuristic_factor = 0.5 * (1.0 + (current_distance / (current_distance + destination_distance)))

        weighted_sum = (weight_current * current_distance) + (weight_destination * destination_distance * heuristic_factor)
        straight_line = distance_matrix[node][destination_distance]

        if weighted_sum < min_score:
            min_score = weighted_sum
            next_node = node
        elif weighted_sum == min_score:
            if straight_line < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
