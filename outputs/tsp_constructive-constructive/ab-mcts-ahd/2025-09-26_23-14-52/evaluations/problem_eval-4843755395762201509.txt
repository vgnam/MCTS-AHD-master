def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    decay_rate = 0.9
    weight_factor = decay_rate ** (total_unvisited - 1)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate local neighborhood influence
        neighborhood_size = 3
        neighborhood = sorted(unvisited_nodes, key=lambda x: distance_matrix[node][x])[:neighborhood_size]
        neighborhood_influence = sum(distance_matrix[node][n] for n in neighborhood) / len(neighborhood) if neighborhood else 0

        weighted_score = current_distance + weight_factor * future_distance + 0.3 * neighborhood_influence

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
