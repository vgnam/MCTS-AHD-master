def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    visited_ratio = (len(distance_matrix) - len(unvisited_nodes)) / len(distance_matrix)
    weight_factor = 1 - (visited_ratio ** 2)
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        path_optimization = (current_distance + destination_distance) * (1 - weight_factor)
        local_proximity = current_distance * weight_factor
        score = local_proximity + path_optimization

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if (current_distance + destination_distance) < (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
