import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1 / (1 + math.exp(-0.5 * (total_unvisited - 5)))  # Sigmoid-based exploration

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        regret_term = max([distance_matrix[node][other] for other in unvisited_nodes if other != node]) - future_distance
        weighted_score = (0.6 * current_distance + 0.3 * future_distance - 0.1 * regret_term) * (1 - exploration_factor) + exploration_factor * random.uniform(0, 1)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
