def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    base_temp = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))
    dest_factor = distance_matrix[current_node][destination_node] / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited)
    temperature = base_temp * (1 + 0.5 * dest_factor)

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))
        relative_distance = current_distance / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited)
        score = (1 - temperature) * (-relative_distance) + temperature * (centrality + 0.5 * degree) - 0.2 * (future_distance / (sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / total_unvisited))
        scores.append((node, score))

    if not scores:
        return destination_node

    max_score = max(score for _, score in scores)
    probabilities = [math.exp((score - max_score) / temperature) for _, score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    selected = random.choices([node for node, _ in scores], weights=normalized_probs, k=1)[0]
    return next_node
