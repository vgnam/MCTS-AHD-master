import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_weight = 0.2 * (1.0 - (total_unvisited / (total_unvisited + 1))) ** 2
    current_to_dest = distance_matrix[current_node][destination_node]

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    best_score = float('inf')
    next_node = None
    candidate_nodes = random.sample(unvisited_nodes, min(3, len(unvisited_nodes)))

    for node in candidate_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        distance_ratio = current_distance / (current_to_dest + 1e-6)
        exploration_factor = sigmoid(distance_ratio) * exploration_weight

        weighted_score = 0.5 * current_distance + 0.3 * future_distance + exploration_factor * random.uniform(0, 1)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < distance_matrix[current_node][next_node]:
                next_node = node

    if next_node is None:
        next_node = random.choice(unvisited_nodes)

    return next_node
