def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead factor based on remaining nodes and potential path diversity
        lookahead_factor = (remaining_nodes ** 0.5) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))

        # Adaptive weights with lookahead consideration
        weight_current = 1.0 / (remaining_nodes ** 1.5 + 1)
        weight_destination = 1.0 - weight_current
        weight_lookahead = 0.3 * (1.0 / (remaining_nodes + 1))

        # Combined score with lookahead and diversity terms
        score = (weight_current * current_distance) + (weight_destination * destination_distance) + (weight_lookahead * lookahead_factor)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
