def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_factor = max(0.3, 1.0 - (num_unvisited / (num_unvisited + 15)))  # More aggressive weight adjustment

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to nearby nodes
        nearby_nodes = [n for n in unvisited_nodes if n != node]
        if nearby_nodes:
            centrality = sum(distance_matrix[node][n] for n in nearby_nodes) / len(nearby_nodes)
        else:
            centrality = 0

        # Weighted score with centrality factor
        weighted_score = (1.0 - weight_factor) * current_distance + weight_factor * future_distance + 0.2 * centrality

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance < sum(distance_matrix[current_node][n] for n in unvisited_nodes) / num_unvisited:
                next_node = node

    return next_node
