def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (1 - (total_unvisited / (total_unvisited + 1)) ** 0.5))
    log_decay = 1 - (math.log(total_unvisited + 1) / math.log(total_unvisited + 2))

    best_score = float('inf')
    next_node = None
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        local_density = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        weighted_score = (current_distance + weight_factor * future_distance) * (1 - 0.3 * local_density) * log_decay
        scores.append((node, weighted_score))

    scores.sort(key=lambda x: x[1])
    next_node = scores[0][0]

    return next_node
