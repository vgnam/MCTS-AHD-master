importance and recent path performance, while incorporating a temporal discount factor to prioritize nodes that improve long-term path efficiency.}

```python
import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.7 * (1.0 - (total_unvisited / (total_unvisited + 2)))
    temporal_discount = 1.0 - (0.3 * (1 - exploration_factor))

    # Calculate adaptive centrality based on distance variance and connectivity
    centrality_scores = []
    for node in unvisited_nodes:
        distances = distance_matrix[node]
        mean_dist = np.mean(distances)
        std_dist = np.std(distances)
        connectivity = np.sum(distances < np.percentile(distances, 70))
        centrality_scores.append((mean_dist * 0.6) + (std_dist * 0.3) + (connectivity * 0.1))

    # Normalize and apply temporal discount
    if centrality_scores:
        max_score = max(centrality_scores)
        centrality_scores = [(s / max_score) ** temporal_discount for s in centrality_scores]

    best_score = float('inf')
    next_node = None

    for idx, node in enumerate(unvisited_nodes):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        centrality = centrality_scores[idx]

        # Adaptive weighting with reinforcement-inspired adjustment
        weight_factor = 0.3 + 0.7 * (1 - exploration_factor)
        weighted_score = (0.5 * current_dist +
                         0.3 * future_dist +
                         weight_factor * (1 - centrality))

        # Exploration bonus for high-centrality nodes
        if random.random() < (centrality ** 1.5) * exploration_factor:
            weighted_score *= 0.7

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_dist < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
