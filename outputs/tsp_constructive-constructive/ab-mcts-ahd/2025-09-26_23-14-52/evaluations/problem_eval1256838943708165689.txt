def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    centrality_weight = min(1.0, 0.5 + 0.5 * (1 - total_unvisited / (total_unvisited + 1)))

    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        score = (0.3 * immediate_cost + 0.3 * future_cost) - (0.4 * centrality * centrality_weight)

        if score > best_score:
            best_score = score
            next_node = node
        elif score == best_score:
            if future_cost < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
