def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    proximity_factor = 1 - (total_unvisited / (total_unvisited + 1)) ** 2
    immediate_weight = 0.3 * (1 - proximity_factor)
    future_weight = 0.5 * (1 + proximity_factor)
    avg_weight = 0.2

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        local_search_radius = min(3, len(unvisited_nodes))
        nearest_neighbors = sorted(unvisited_nodes, key=lambda x: distance_matrix[node][x])[:local_search_radius]
        local_avg = sum(distance_matrix[node][neighbor] for neighbor in nearest_neighbors) / local_search_radius if local_search_radius > 0 else 0

        weighted_score = (immediate_weight * current_distance +
                         future_weight * future_distance +
                         avg_weight * local_avg)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
