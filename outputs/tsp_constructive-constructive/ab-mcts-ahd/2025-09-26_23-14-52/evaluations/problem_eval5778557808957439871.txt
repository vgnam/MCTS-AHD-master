def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = min(0.9, (remaining_nodes / len(distance_matrix)))  # Dynamic weight increasing as fewer nodes remain

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = current_distance + weight_factor * future_distance  # Weighted combination
        product_score = current_distance * future_distance  # Product-based score

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if product_score < (distance_matrix[current_node][next_node] * distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
