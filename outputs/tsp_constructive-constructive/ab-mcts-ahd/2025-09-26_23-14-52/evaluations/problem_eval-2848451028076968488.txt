def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    path_length = len(unvisited_nodes) + 1

    # Dynamic weight factor based on remaining nodes and path progress
    weight_factor = (total_unvisited ** 1.5) / (path_length ** 0.75)
    weight_factor = max(0.1, min(1.0, weight_factor))

    # Proximity penalty factor
    proximity_penalty = 1.0 + (0.5 * (path_length / (path_length + total_unvisited)))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Novel scoring formula incorporating proximity penalty
        weighted_score = (current_distance + weight_factor * future_distance) * proximity_penalty

        # Additional penalty for nodes too close to destination early
        if total_unvisited > len(unvisited_nodes) // 2:
            weighted_score += 0.3 * future_distance

        # Tie-breaker based on both distances
        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if (current_distance + future_distance) < (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
