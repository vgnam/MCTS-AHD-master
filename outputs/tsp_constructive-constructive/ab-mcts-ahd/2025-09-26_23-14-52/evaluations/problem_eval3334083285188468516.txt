def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    base_weight = 0.7 * (total_unvisited / (total_unvisited + 2))
    density_factor = 1.0 / (1.0 + sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] < 1.5 * min(distance_matrix[current_node][node] for node in unvisited_nodes)) / total_unvisited)
    weight_factor = base_weight * density_factor

    historical_lengths = [distance_matrix[current_node][n] for n in unvisited_nodes]
    length_variance = (max(historical_lengths) - min(historical_lengths)) / (sum(historical_lengths) / total_unvisited) if historical_lengths else 0.0
    temperature = max(0.1, 0.5 * (1.0 - (total_unvisited / (total_unvisited + 3))) + 0.5 * length_variance)

    novelty_penalty = 1.0 + (0.5 * (total_unvisited / (total_unvisited + 5)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        novelty_score = sum(1.0 if distance_matrix[current_node][n] > current_distance else 0.0 for n in unvisited_nodes) / total_unvisited
        weighted_score = (current_distance + weight_factor * future_distance + temperature * centrality) * (1.0 - novelty_penalty * novelty_score)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality < sum(distance_matrix[next_node][n] for n in unvisited_nodes) / total_unvisited:
                next_node = node

    return next_node
