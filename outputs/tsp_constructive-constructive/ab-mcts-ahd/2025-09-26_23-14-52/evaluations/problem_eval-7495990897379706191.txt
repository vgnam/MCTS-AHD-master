def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (1 - (total_unvisited / (total_unvisited + 1)) ** 3))
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        combined_score = (1 - temperature) * current_distance + temperature * future_distance + 0.2 * centrality
        scores.append((combined_score, current_distance, future_distance, node))

    normalized_scores = [s[0] / sum(sc[0] for sc in scores) for s in scores]
    next_node = unvisited_nodes[0]

    for i, node in enumerate(unvisited_nodes):
        if random.random() < normalized_scores[i]:
            next_node = node
            break

    return next_node
