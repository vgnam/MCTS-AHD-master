import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.8 * math.exp(-total_unvisited / 10)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        node_degree = sum(1 for n in range(len(distance_matrix)) if distance_matrix[node][n] > 0)
        centrality_score = node_degree / (len(distance_matrix) - 1) if len(distance_matrix) > 1 else 0

        weighted_score = (0.5 * current_distance + 0.3 * future_distance + 0.2 * centrality_score) * (1 - exploration_factor) + exploration_factor * random.uniform(0, 1)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if (current_distance + future_distance) > (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
