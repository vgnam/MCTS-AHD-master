import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    total_unvisited = len(unvisited_nodes)
    remaining_ratio = total_unvisited / (total_unvisited + 1)
    scale_factor = 1.0 - remaining_ratio ** 3
    exploration_weight = 0.3 * (1 - remaining_ratio)

    candidate_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        historical_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0

        hybrid_score = (current_dist + scale_factor * future_dist + exploration_weight * historical_dist) / (1 + future_dist)
        candidate_scores.append((node, hybrid_score, current_dist, future_dist))

    candidate_scores.sort(key=lambda x: x[1])
    best_candidates = [c for c in candidate_scores if c[1] == candidate_scores[0][1]]

    if len(best_candidates) > 1:
        selected = min(best_candidates, key=lambda x: x[2] + x[3])
    else:
        selected = best_candidates[0]

    if random.random() < exploration_weight:
        return random.choice(unvisited_nodes)

    return next_node
