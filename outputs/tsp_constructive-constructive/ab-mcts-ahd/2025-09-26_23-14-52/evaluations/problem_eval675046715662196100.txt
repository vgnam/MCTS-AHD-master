import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    unvisited_ratio = len(unvisited_nodes) / total_nodes
    exploration_factor = 0.15 * (1 / (1 + math.exp(-5 * (unvisited_ratio - 0.5))))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        revisit_penalty = min(0.2 * min(distance_matrix[node][n] for n in unvisited_nodes if n != node), 0.1 * current_distance)

        weighted_score = 0.5 * current_distance + 0.3 * future_distance + exploration_factor * random.uniform(0, 1) - revisit_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
