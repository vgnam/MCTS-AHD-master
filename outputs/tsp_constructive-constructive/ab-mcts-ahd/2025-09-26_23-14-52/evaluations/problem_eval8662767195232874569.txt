def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_current = max(0.5, 1.0 - (remaining_nodes - 1) * 0.1)
    weight_future = 1.0 - weight_current

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        penalty = 0.0

        if node in visited_recently:
            penalty = 0.2 * (remaining_nodes / len(distance_matrix))

        weighted_score = (weight_current * current_distance) + (weight_future * future_distance) + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    visited_recently.add(next_node)
    if len(visited_recently) > 3:
        visited_recently.pop()

    return next_node
