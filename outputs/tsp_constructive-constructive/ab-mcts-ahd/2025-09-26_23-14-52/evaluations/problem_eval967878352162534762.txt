def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1 - (total_unvisited / (total_unvisited + 1))
    temperature = max(0.2, 1.0 - progress * 0.8)

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))

        distance_score = -current_distance
        centrality_score = centrality
        degree_score = degree

        if progress < 0.5:
            weight_distance, weight_centrality, weight_degree = 0.6, 0.2, 0.2
        else:
            weight_distance, weight_centrality, weight_degree = 0.4, 0.3, 0.3

        combined_score = (weight_distance * distance_score +
                          weight_centrality * centrality_score +
                          weight_degree * degree_score)

        scores.append((combined_score, node, degree))

    max_score = max(score[0] for score in scores)
    exp_scores = [math.exp(score[0] - max_score) for score in scores]
    sum_exp = sum(exp_scores)
    probs = [exp / sum_exp for exp in exp_scores]

    selected_index = random.choices(range(len(scores)), weights=probs)[0]
    next_node = scores[selected_index][1]

    if scores.count(scores[selected_index][0]) > 1:
        candidates = [score for score in scores if score[0] == scores[selected_index][0]]
        next_node = max(candidates, key=lambda x: x[2])[1]

    return next_node
