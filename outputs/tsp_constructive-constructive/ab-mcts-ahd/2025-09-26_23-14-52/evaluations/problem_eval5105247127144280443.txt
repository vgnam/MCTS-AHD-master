def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight_factor = max(0.2, 0.8 * (total_unvisited / (total_unvisited + 1)) ** 1.5)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        weighted_score = current_distance + weight_factor * future_distance

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            normalized_current = current_distance / (current_distance + future_distance + 1e-9)
            normalized_future = future_distance / (current_distance + future_distance + 1e-9)
            if normalized_current + normalized_future < distance_matrix[current_node][next_node] / (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node] + 1e-9) + distance_matrix[next_node][destination_node] / (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node] + 1e-9):
                next_node = node

    return next_node
