def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-0.1 * (total_unvisited - 5)))  # Sigmoid adjustment

    node_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Node centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)
        normalized_centrality = centrality / sum(distance_matrix[node][n] for n in range(len(distance_matrix)))

        # Weighted score with centrality consideration
        weighted_score = current_distance + weight_factor * (future_distance * (1 - normalized_centrality))
        node_scores.append((node, weighted_score, future_distance))

    # Select top 3 candidates and choose probabilistically
    candidates = sorted(node_scores, key=lambda x: x[1])[:3]
    if len(candidates) == 1:
        return candidates[0][0]

    # Probabilistic selection based on rank
    probabilities = [0.5, 0.3, 0.2]
    selected = random.choices([c[0] for c in candidates], weights=probabilities, k=1)[0]

    # Fallback to closest to destination if no clear winner
    if selected is None:
        selected = min(unvisited_nodes, key=lambda n: distance_matrix[n][destination_node])

    return next_node
