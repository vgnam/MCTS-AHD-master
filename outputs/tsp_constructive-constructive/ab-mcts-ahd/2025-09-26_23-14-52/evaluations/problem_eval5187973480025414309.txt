import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 0.3 * (1.0 - (total_unvisited / (total_unvisited + 1)))
    current_weight = 1.0
    future_weight = 0.5 + (0.3 * exploration_factor)

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Normalized score combining distance, centrality, and randomness
        distance_score = current_weight * current_distance + future_weight * future_distance
        centrality_penalty = 0.2 * centrality[node]  # Penalize high centrality nodes
        randomness = exploration_factor * random.uniform(0, 1)

        weighted_score = (distance_score - centrality_penalty) + randomness

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
