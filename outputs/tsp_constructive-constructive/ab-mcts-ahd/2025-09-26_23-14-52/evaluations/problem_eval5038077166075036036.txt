def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited
    temperature = max(0.1, (1.0 - (total_unvisited / (total_unvisited + 1))) * (1.0 - (avg_distance / max(1, max(max(row) for row in distance_matrix)))))

    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        distance_ratio = current_distance / (future_distance + 1e-6)
        weighted_score = (1 - temperature) * (current_distance + future_distance) - temperature * centrality * distance_ratio
        scores.append(weighted_score)

    max_score = max(scores)
    min_score = min(scores)
    normalized_scores = [(s - min_score) / (max_score - min_score + 1e-6) for s in scores]

    probabilities = [np.exp(s / temperature) for s in normalized_scores]
    sum_prob = sum(probabilities)
    probabilities = [p / sum_prob for p in probabilities]

    decay_factor = 1.0 - (total_unvisited / (total_unvisited + 1))
    probabilities = [p * (1.0 - decay_factor) + decay_factor * (1.0 / total_unvisited) for p in probabilities]

    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
