importance" score based on both distance and connectivity, and employs a probabilistic selection phase to balance exploitation and exploration with decreasing temperature.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 1)))
    exploration_factor = 1.0 / (1.0 + 0.5 * (total_unvisited - 1))
    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        node_importance = (centrality / (1 + sum(distance_matrix[n][node] for n in unvisited_nodes) / total_unvisited)) * (1 - temperature)

        weighted_score = current_distance + temperature * future_distance + exploration_factor * node_importance

        if weighted_score < best_score:
            best_score = weighted_score
            candidates = [node]
        elif weighted_score == best_score:
            candidates.append(node)

    if len(candidates) == 1:
        return candidates[0]
    else:
        probabilities = []
        for node in candidates:
            prob = (1 - temperature) * (1 / (1 + distance_matrix[current_node][node])) + temperature * (1 / (1 + distance_matrix[node][destination_node]))
            probabilities.append(prob)
        probabilities = [p / sum(probabilities) for p in probabilities]
        return next_node
