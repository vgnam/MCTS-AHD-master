def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_weighted_sum = float('inf')
    next_node = None

    # Calculate average distance to unvisited nodes
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        if current_distance > 0 and destination_distance > 0:
            ratio = current_distance / destination_distance
            if ratio > 1:
                weight_current = 0.8
                weight_destination = 0.2
            else:
                weight_current = 0.5
                weight_destination = 0.5
        else:
            weight_current = 0.7
            weight_destination = 0.3

        # Apply penalty if current distance is too large
        penalty = 1.0
        if current_distance > 2 * avg_distance:
            penalty = 1.5

        weighted_sum = (weight_current * current_distance + weight_destination * destination_distance) * penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node
        elif weighted_sum == min_weighted_sum:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
