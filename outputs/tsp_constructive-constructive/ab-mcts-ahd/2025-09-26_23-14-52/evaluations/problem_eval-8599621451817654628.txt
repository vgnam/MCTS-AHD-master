def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 1.0 / len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate centrality (average distance to unvisited nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Calculate node entropy (diversity of connections)
        entropy = -sum((distance_matrix[node][n] / sum(distance_matrix[node])) * np.log(distance_matrix[node][n] / sum(distance_matrix[node]) + 1e-10) for n in unvisited_nodes)

        # Sigmoid temperature adjustment
        sigmoid_temp = 1 / (1 + np.exp(-10 * (temperature - 0.5)))

        # Weighted score incorporating entropy and sigmoid-adjusted temperature
        weighted_score = current_distance - sigmoid_temp * (centrality - future_distance) + 0.3 * entropy

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance > distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
