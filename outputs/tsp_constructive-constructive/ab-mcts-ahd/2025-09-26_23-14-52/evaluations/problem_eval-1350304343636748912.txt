def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    max_nodes = len(distance_matrix)

    # Dynamic weight factor with non-linear decay
    weight_factor = 0.1 + 0.9 * (total_unvisited / max_nodes) ** 2

    # Lookahead mechanism
    lookahead_factor = 0.5 * (1.0 - (total_unvisited / max_nodes))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Incorporate lookahead by considering average future distances to remaining nodes
        if total_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_future = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_future = future_distance

        weighted_score = current_distance + weight_factor * future_distance + lookahead_factor * avg_future

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if future_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
