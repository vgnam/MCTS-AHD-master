import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 0.6 * (total_unvisited / (total_unvisited + 1))

    # Phase 1: Initial candidate selection with weighted scoring
    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        if total_unvisited > len(unvisited_nodes) * 0.5:
            weighted_score = current_distance + temperature * (0.6 * current_distance - 0.4 * centrality)
        else:
            weighted_score = current_distance + temperature * (0.5 * centrality + 0.5 * future_distance)

        candidates.append((node, weighted_score))

    # Phase 2: Neighborhood refinement of top candidates
    refined_candidates = []
    for node, score in sorted(candidates, key=lambda x: x[1])[:min(3, len(candidates))]:
        neighborhood_scores = []
        for neighbor in unvisited_nodes:
            if neighbor != node:
                neighborhood_score = (distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node]) / 2
                neighborhood_scores.append(neighborhood_score)
        avg_neighborhood = sum(neighborhood_scores) / len(neighborhood_scores) if neighborhood_scores else 0
        refined_score = score + 0.2 * avg_neighborhood
        refined_candidates.append((node, refined_score))

    # Phase 3: Stochastic tournament selection
    tournament_size = min(3, len(refined_candidates))
    tournament = random.sample(refined_candidates, tournament_size)
    next_node = min(tournament, key=lambda x: x[1])[0]

    return next_node
