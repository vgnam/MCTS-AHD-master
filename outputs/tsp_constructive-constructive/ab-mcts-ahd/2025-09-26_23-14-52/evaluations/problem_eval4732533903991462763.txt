def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes.copy()
    remaining_nodes.add(destination_node) if destination_node not in remaining_nodes else None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        sum_distance = current_distance + destination_distance
        product_distance = current_distance * destination_distance
        ratio = sum_distance / product_distance if product_distance != 0 else float('inf')

        # Centrality measure: average distance to remaining nodes
        centrality = sum(distance_matrix[node][n] for n in remaining_nodes if n != node) / (len(remaining_nodes) - 1) if len(remaining_nodes) > 1 else 0
        weight = 1 / (1 + centrality) if centrality != 0 else 1
        score = ratio * weight

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_distance]:
                next_node = node

    return next_node
