def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = max(0.3, 1.0 - (remaining_nodes / len(unvisited_nodes + [current_node])))  # Dynamic immediate weight
    future_weight = 1.0 - weight_factor  # Dynamic future weight

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        weighted_score = (weight_factor * current_distance) + (future_weight * future_distance) - (0.2 * centrality_score)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if centrality_score > sum(distance_matrix[next_node][n] for n in unvisited_nodes if n != next_node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0:
                next_node = node

    return next_node
