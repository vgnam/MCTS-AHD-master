def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    # Calculate centrality of current node (average distance to other nodes)
    centrality = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and centrality
        if remaining_nodes > 5:
            weight = 0.3 * (1 - centrality / max(centrality, 1e-10))
        elif remaining_nodes > 2:
            weight = 0.5 * (1 - centrality / max(centrality, 1e-10))
        else:
            weight = 0.8 * (1 - centrality / max(centrality, 1e-10))

        # Exploration bonus: variance of distances to unvisited nodes
        exploration_bonus = sum((distance_matrix[node][other] - current_distance) ** 2 for other in unvisited_nodes) / remaining_nodes

        weighted_score = weight * future_distance - current_distance + exploration_bonus

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node
        elif weighted_score == best_score:
            if current_distance > distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
