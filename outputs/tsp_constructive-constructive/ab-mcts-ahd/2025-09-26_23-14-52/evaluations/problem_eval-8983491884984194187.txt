import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    memory = {node: 1.0 for node in unvisited_nodes}
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = min(0.2 + (1.0 - remaining_nodes / len(unvisited_nodes)) * 0.8, 1.0)
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        normalized_current = current_distance / max(distance_matrix[current_node])
        normalized_future = future_distance / max(distance_matrix[node])

        score = (0.6 * normalized_current + 0.4 * normalized_future) * (1.0 - exploration_factor)
        score = score / (memory[node] ** 0.5)
        scores.append(score)

    if not scores:
        return random.choice(unvisited_nodes)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s + 1e-10) for s in scores]

    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]

    selected_index = random.choices(range(len(unvisited_nodes)), weights=probabilities, k=1)[0]
    next_node = unvisited_nodes[selected_index]

    memory[next_node] *= 1.1

    return next_node
