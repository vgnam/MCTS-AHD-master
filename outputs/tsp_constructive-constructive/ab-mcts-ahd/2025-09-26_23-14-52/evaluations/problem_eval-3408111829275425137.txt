import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 - (0.8 * (total_unvisited / (total_unvisited + 1)))

    best_score = float('-inf')
    next_node = None
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        weighted_score = (0.4 * current_distance + 0.3 * future_distance + 0.3 * centrality) * (1 + (0.5 * temperature * random.uniform(-1, 1)))
        scores.append((node, weighted_score))

    # Apply softmax selection
    exp_scores = [math.exp(score / temperature) for (_, score) in scores]
    sum_exp = sum(exp_scores)
    probabilities = [exp / sum_exp for exp in exp_scores]

    selected_index = random.choices(range(len(probabilities)), weights=probabilities, k=1)[0]
    next_node = scores[selected_index][0]

    return next_node
