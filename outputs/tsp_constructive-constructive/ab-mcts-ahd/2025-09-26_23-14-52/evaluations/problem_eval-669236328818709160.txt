def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Dynamically adjust weights
        weight_current = 0.5 / (remaining_nodes + 1)
        weight_destination = 0.5 - (0.1 / (remaining_nodes + 1))
        weight_centrality = 0.4 + (0.2 / (remaining_nodes + 1))

        # Calculate weighted score
        score = (weight_current * current_distance) + (weight_destination * destination_distance) + (weight_centrality * centrality)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            if destination_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
