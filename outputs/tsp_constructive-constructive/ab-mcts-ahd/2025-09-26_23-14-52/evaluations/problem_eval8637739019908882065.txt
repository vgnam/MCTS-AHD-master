def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 1.0 / len(unvisited_nodes)
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        score = (current_distance + centrality) / (1 + future_distance)
        normalized_score = score * (1 - temperature) + temperature * (1 / (1 + future_distance))
        scores.append((node, normalized_score))

    if not scores:
        return destination_node

    total_score = sum(score for _, score in scores)
    if total_score == 0:
        return random.choice(unvisited_nodes)

    probabilities = [score / total_score for _, score in scores]
    next_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]

    return next_node
