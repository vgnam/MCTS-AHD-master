[
     {
          "algorithm": "The algorithm selects the next node in the TSP path by prioritizing the unvisited node with the smallest ratio of the current distance (from the current node) to the destination distance (from the node to the destination), breaking ties by choosing the node closer to the destination. This balances proximity to the current node and directness to the destination, favoring nodes that reduce the ratio while minimizing detours. The `distance_matrix` provides node distances, and the function iterates over unvisited nodes to compute and compare ratios.",
          "thought": "The new algorithm prioritizes the next node by selecting the unvisited node with the smallest ratio of the current distance to the destination distance, breaking ties by choosing the node closer to the destination, aiming to balance proximity to the current node and the destination more directly.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_ratio = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        ratio = current_distance / destination_distance if destination_distance != 0 else float('inf')\n\n        if ratio < min_ratio:\n            min_ratio = ratio\n            next_node = node\n        elif ratio == min_ratio:\n            if destination_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.66389,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance (current_distance) heavily early on (weighted at 0.6) but shifts to balance centrality (average distance to unvisited nodes) and future distance (distance to destination) later (weighted at 0.5 each). Temperature adjusts dynamically based on remaining nodes to balance exploration and exploitation, with ties broken by proximity to the destination. The scoring function combines these factors with weighted adjustments to guide node selection.",
          "thought": "The new algorithm prioritizes immediate distance (weighted at 0.6) over node centrality (weighted at 0.4) early on, shifting to favor centrality (weighted at 0.5) and future distance (weighted at 0.5) as the tour progresses, with temperature dynamically adjusted based on remaining unvisited nodes to balance exploration and exploitation, and ties broken by selecting the node closest to the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    temperature = 0.6 * (total_unvisited / (total_unvisited + 1))\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)\n\n        if total_unvisited > len(unvisited_nodes) * 0.5:\n            weighted_score = current_distance + temperature * (0.6 * current_distance - 0.4 * centrality)\n        else:\n            weighted_score = current_distance + temperature * (0.5 * centrality + 0.5 * future_distance)\n\n        if weighted_score < best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.81199,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances exploration and exploitation by combining immediate distance (prioritized when temperature is low) with centrality, degree, novelty, and diversity (prioritized when temperature is high). It uses a non-linear temperature decay to adjust weights, giving higher priority to centrality, degree, and novelty while slightly penalizing diversity. The weighted score is calculated as `(1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree + 0.2 * novelty - 0.1 * diversity)`, with ties broken by proximity to the destination node.",
          "thought": "The new algorithm enhances the original by incorporating a dynamic priority system that combines immediate distance, centrality, and degree with a novelty score based on node uniqueness and a path diversity factor, using a non-linear temperature decay to balance exploration and exploitation more effectively.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)) ** 2)\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        novelty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < current_distance) / total_unvisited\n        diversity = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited\n\n        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree + 0.2 * novelty - 0.1 * diversity)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.84729,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing dynamic weights between current and destination distances, adjusted by remaining nodes, while prioritizing centrality (lower distance sums to unvisited nodes) and degree (higher connectivity) to guide selection, favoring nodes that are centrally located and highly connected in early stages. The score combines these factors, with current distance weighted more heavily early on, while centrality and degree contribute negatively to the score. The weight factor decreases as nodes are visited, shifting emphasis toward destination proximity.",
          "thought": "The new algorithm combines dynamic weight balancing from No.2 with centrality and degree considerations from No.1, adjusting the weight factor inversely with remaining nodes while incorporating node centrality and degree to guide selection, favoring nodes that are centrally located and highly connected in early stages.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    weight_factor = 1 / (1 + remaining_nodes)  # Dynamic weight based on remaining nodes\n\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n\n        # Weighted score combining current and destination distances, with centrality and degree\n        score = (1 - weight_factor) * current_distance + weight_factor * destination_distance - 0.2 * centrality - 0.1 * degree\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.85292,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes nodes with lower immediate distance (exploitation) and higher centrality (exploration), balancing them using a decaying temperature that shifts focus from exploration to exploitation as unvisited nodes decrease. Centrality and node degree are weighted more heavily in later stages, while immediate distance dominates early on. The temperature dynamically adjusts the balance between short-term gains (distance) and long-term gains (centrality/degree), with tie-breaking favoring nodes closer to the destination.",
          "thought": "The new algorithm prioritizes nodes with lower immediate distance and higher centrality, using a decaying temperature to shift from exploration to exploitation, with tie-breaking based on future distance and node degree to balance exploration and exploitation dynamically.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.85847,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance (weighted by `1 - temperature`) while balancing node centrality and degree (weighted by `temperature`), with a slower temperature decay to maintain exploration. Higher-degree nodes are preferred when scores are tied, emphasizing long-term connectivity. The weights (0.5 for centrality, 0.7 for degree) reflect a slight bias toward degree over centrality, and the temperature starts high (1.0) and decays to a minimum of 0.2.",
          "thought": "The new algorithm emphasizes immediate distance with a stronger focus on node degree early on, using a temperature that decays more slowly to maintain exploration longer, and prioritizes nodes with higher degree when scores are tied, balancing short-term and long-term gains differently than the original.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.2, 1.0 - (total_unvisited / (total_unvisited + 1)))\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        weighted_score = (1 - temperature) * (-current_distance) + temperature * (0.5 * centrality + 0.7 * degree)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if degree > sum(1 for n in unvisited_nodes if distance_matrix[next_node][n] < float('inf')):\n                next_node = node\n\n    return next_node",
          "objective": 6.86596,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines dynamic weight adaptation between immediate and future distances, normalizes scores to ensure fairness, and resolves ties by minimizing both current and future distances, prioritizing global optimization as the tour progresses. The `weight_factor` decreases over time, reducing the influence of future distances early in the tour, while the weighted score balances immediate and future distances. The algorithm selects the next node by minimizing a normalized score, breaking ties based on total distance to the destination.",
          "thought": "The new algorithm combines dynamic weight adaptation from No.1 and No.2, normalizes scores for fairness, resolves ties by minimizing both immediate and future distances, and prioritizes global optimization as the tour progresses.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    weight_factor = 0.5 * (1 - (total_unvisited / (total_unvisited + 1)) ** 2)\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        weighted_score = (current_distance + weight_factor * future_distance) / (1 + future_distance)\n\n        if weighted_score < best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if current_distance + future_distance < distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.89218,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm combines dynamic weight adjustment between current distance, centrality, and future distance with a multi-phase approach, using a temperature-based exploration factor that decays over time to balance exploitation and exploration. It prioritizes current distance early on, shifts to balancing centrality and future distance later, and refines candidate selection with neighborhood analysis before using a stochastic tournament for final node selection. The weighted scores dynamically adjust based on the remaining unvisited nodes, with temperature controlling exploration intensity.",
          "thought": "The new algorithm combines the No.1 algorithm's dynamic weight adjustment between current distance, centrality, and future distance with the No.2 algorithm's multi-phase approach, using a temperature-based exploration factor that decays over time to balance exploitation and exploration, with refined candidate selection and stochastic tournament for final node selection.",
          "code": "import random\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = 0.6 * (total_unvisited / (total_unvisited + 1))\n\n    # Phase 1: Initial candidate selection with weighted scoring\n    candidates = []\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)\n\n        if total_unvisited > len(unvisited_nodes) * 0.5:\n            weighted_score = current_distance + temperature * (0.6 * current_distance - 0.4 * centrality)\n        else:\n            weighted_score = current_distance + temperature * (0.5 * centrality + 0.5 * future_distance)\n\n        candidates.append((node, weighted_score))\n\n    # Phase 2: Neighborhood refinement of top candidates\n    refined_candidates = []\n    for node, score in sorted(candidates, key=lambda x: x[1])[:min(3, len(candidates))]:\n        neighborhood_scores = []\n        for neighbor in unvisited_nodes:\n            if neighbor != node:\n                neighborhood_score = (distance_matrix[node][neighbor] + distance_matrix[neighbor][destination_node]) / 2\n                neighborhood_scores.append(neighborhood_score)\n        avg_neighborhood = sum(neighborhood_scores) / len(neighborhood_scores) if neighborhood_scores else 0\n        refined_score = score + 0.2 * avg_neighborhood\n        refined_candidates.append((node, refined_score))\n\n    # Phase 3: Stochastic tournament selection\n    tournament_size = min(3, len(refined_candidates))\n    tournament = random.sample(refined_candidates, tournament_size)\n    next_node = min(tournament, key=lambda x: x[1])[0]\n\n    return next_node",
          "objective": 6.91149,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines **ratio-based selection** (prioritizing nodes with favorable current-to-destination distance ratios) with **dynamic temperature and centrality/degree weighting** (balancing immediate distance, node centrality, and degree using a decaying temperature). It favors nodes closer to the destination in ties, dynamically adjusting priorities as the number of unvisited nodes decreases. The **temperature parameter** (linearly decaying from 1.0 to 0.1) shifts focus from **centrality/degree** (early stages) to **ratio-based selection** (later stages).",
          "thought": "The new algorithm combines the ratio-based selection of No.1 with the dynamic temperature and centrality/degree weighting of No.2. It prioritizes nodes with favorable current-to-destination distance ratios while balancing immediate distance, centrality, and degree using a decaying temperature, favoring nodes closer to the destination in ties.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        ratio = current_distance / future_distance if future_distance != 0 else float('inf')\n        weighted_score = (1 - temperature) * (-ratio) + temperature * (centrality + 0.3 * degree)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.92824,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances exploration and exploitation by adjusting a temperature parameter based on remaining unvisited nodes. Early on, it prioritizes immediate distance (weighted 0.6) over centrality (0.4), shifting later toward minimizing future distance (0.3), with ties broken by proximity to the destination. The weighted scoring ensures a compromise between short-term gains and long-term efficiency.",
          "thought": "The new algorithm balances exploration and exploitation by dynamically adjusting a temperature parameter based on the remaining unvisited nodes, prioritizing immediate distance (weighted at 0.6) over centrality (weighted at 0.4) early on, then shifting toward minimizing future distance as the tour progresses, with ties broken by selecting the node closest to the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    temperature = 0.5 * (total_unvisited / (total_unvisited + 1))\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)\n        weighted_score = current_distance + temperature * (0.6 * current_distance - 0.4 * centrality + 0.3 * future_distance)\n\n        if weighted_score < best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.99946,
          "other_inf": null
     }
]