[
     {
          "algorithm": "The algorithm selects the next node in the TSP path by prioritizing the unvisited node with the smallest ratio of the current distance (from the current node) to the destination distance (from the node to the destination), breaking ties by choosing the node closer to the destination. This balances proximity to the current node and directness to the destination, favoring nodes that reduce the ratio while minimizing detours. The `distance_matrix` provides node distances, and the function iterates over unvisited nodes to compute and compare ratios.",
          "thought": "The new algorithm prioritizes the next node by selecting the unvisited node with the smallest ratio of the current distance to the destination distance, breaking ties by choosing the node closer to the destination, aiming to balance proximity to the current node and the destination more directly.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_ratio = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        ratio = current_distance / destination_distance if destination_distance != 0 else float('inf')\n\n        if ratio < min_ratio:\n            min_ratio = ratio\n            next_node = node\n        elif ratio == min_ratio:\n            if destination_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.66389,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines ratio-based selection with dynamic weight adaptation, prioritizing nodes that balance immediate and future distances while normalizing for fairness. It uses a weighted ratio score where the weight factor decreases as more nodes are visited, giving higher priority to immediate distances early on and balancing both later. Ties are resolved by minimizing the sum of current and future distances to prioritize global optimization. The `weight_factor` dynamically adjusts the balance between current and future distances, while the `normalized_score` ensures fair comparison across nodes.",
          "thought": "The new algorithm combines the ratio-based selection from No.1 with the dynamic weight adaptation from No.2, using a weighted ratio score that balances immediate and future distances while normalizing for fairness, and resolving ties by minimizing both current and future distances to prioritize global optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    weight_factor = 0.5 * (1 - (total_unvisited / (total_unvisited + 1)) ** 2)\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        weighted_ratio = (current_distance / (1 + future_distance)) + weight_factor * (future_distance / (1 + current_distance))\n        normalized_score = weighted_ratio / (1 + future_distance)\n\n        if normalized_score < best_score:\n            best_score = normalized_score\n            next_node = node\n        elif normalized_score == best_score:\n            if current_distance + future_distance < distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.67909,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance (current_distance) heavily early on (weighted at 0.6) but shifts to balance centrality (average distance to unvisited nodes) and future distance (distance to destination) later (weighted at 0.5 each). Temperature adjusts dynamically based on remaining nodes to balance exploration and exploitation, with ties broken by proximity to the destination. The scoring function combines these factors with weighted adjustments to guide node selection.",
          "thought": "The new algorithm prioritizes immediate distance (weighted at 0.6) over node centrality (weighted at 0.4) early on, shifting to favor centrality (weighted at 0.5) and future distance (weighted at 0.5) as the tour progresses, with temperature dynamically adjusted based on remaining unvisited nodes to balance exploration and exploitation, and ties broken by selecting the node closest to the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    temperature = 0.6 * (total_unvisited / (total_unvisited + 1))\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)\n\n        if total_unvisited > len(unvisited_nodes) * 0.5:\n            weighted_score = current_distance + temperature * (0.6 * current_distance - 0.4 * centrality)\n        else:\n            weighted_score = current_distance + temperature * (0.5 * centrality + 0.5 * future_distance)\n\n        if weighted_score < best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.81199,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing two criteria: minimizing the ratio of current distance to destination distance (70% weight) and minimizing the sum of current and destination distances (30% weight). It prioritizes nodes that reduce the ratio while also keeping future distances short, breaking ties by preferring nodes closer to the destination. The weighted combination ensures a trade-off between immediate and long-term path efficiency.",
          "thought": "The new algorithm combines the ratio-based selection from No.1 with the weighted distance approach from No.2, favoring nodes that minimize the ratio of current distance to destination distance while also considering a weighted balance between immediate and future distances.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_weighted_ratio = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        ratio = current_distance / destination_distance if destination_distance != 0 else float('inf')\n        weighted_ratio = 0.7 * ratio + 0.3 * (current_distance + destination_distance)\n\n        if weighted_ratio < min_weighted_ratio:\n            min_weighted_ratio = weighted_ratio\n            next_node = node\n        elif weighted_ratio == min_weighted_ratio:\n            if destination_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.84365,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances exploration and exploitation by combining immediate distance (prioritized when temperature is low) with centrality, degree, novelty, and diversity (prioritized when temperature is high). It uses a non-linear temperature decay to adjust weights, giving higher priority to centrality, degree, and novelty while slightly penalizing diversity. The weighted score is calculated as `(1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree + 0.2 * novelty - 0.1 * diversity)`, with ties broken by proximity to the destination node.",
          "thought": "The new algorithm enhances the original by incorporating a dynamic priority system that combines immediate distance, centrality, and degree with a novelty score based on node uniqueness and a path diversity factor, using a non-linear temperature decay to balance exploration and exploitation more effectively.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)) ** 2)\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        novelty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < current_distance) / total_unvisited\n        diversity = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited\n\n        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree + 0.2 * novelty - 0.1 * diversity)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.84729,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing dynamic weights between current and destination distances, adjusted by remaining nodes, while prioritizing centrality (lower distance sums to unvisited nodes) and degree (higher connectivity) to guide selection, favoring nodes that are centrally located and highly connected in early stages. The score combines these factors, with current distance weighted more heavily early on, while centrality and degree contribute negatively to the score. The weight factor decreases as nodes are visited, shifting emphasis toward destination proximity.",
          "thought": "The new algorithm combines dynamic weight balancing from No.2 with centrality and degree considerations from No.1, adjusting the weight factor inversely with remaining nodes while incorporating node centrality and degree to guide selection, favoring nodes that are centrally located and highly connected in early stages.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    weight_factor = 1 / (1 + remaining_nodes)  # Dynamic weight based on remaining nodes\n\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n\n        # Weighted score combining current and destination distances, with centrality and degree\n        score = (1 - weight_factor) * current_distance + weight_factor * destination_distance - 0.2 * centrality - 0.1 * degree\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.85292,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines dynamic weight adaptation for balancing local (current distance) and global (future distance) considerations, prioritizing global optimization as the tour progresses while resolving ties by minimizing both current and future distances. It normalizes scores to ensure fairness and adjusts weights based on the number of remaining unvisited nodes, with higher weights given to future distances early in the tour. The weighted score balances immediate and long-term distances, and ties are resolved by selecting the pair with the shorter combined current and future distances.",
          "thought": "The new algorithm combines dynamic weight adaptation from all three algorithms, normalizes scores for fairness, prioritizes global optimization as the tour progresses, and resolves ties by minimizing both current and future distances, while ensuring a smooth transition between local and global considerations.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    weight_factor = max(0.1, 0.5 * (1 - (total_unvisited / (total_unvisited + 1)) ** 2))\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        weighted_score = (current_distance + weight_factor * future_distance) / (1 + future_distance)\n\n        if weighted_score < best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if current_distance + future_distance < distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.85744,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes nodes with lower immediate distance (exploitation) and higher centrality (exploration), balancing them using a decaying temperature that shifts focus from exploration to exploitation as unvisited nodes decrease. Centrality and node degree are weighted more heavily in later stages, while immediate distance dominates early on. The temperature dynamically adjusts the balance between short-term gains (distance) and long-term gains (centrality/degree), with tie-breaking favoring nodes closer to the destination.",
          "thought": "The new algorithm prioritizes nodes with lower immediate distance and higher centrality, using a decaying temperature to shift from exploration to exploitation, with tie-breaking based on future distance and node degree to balance exploration and exploitation dynamically.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.1, 1.0 - (total_unvisited / (total_unvisited + 2)))\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        weighted_score = (1 - temperature) * (-current_distance) + temperature * (centrality + 0.3 * degree)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if future_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.85847,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance (weighted by `1 - temperature`) while balancing node centrality and degree (weighted by `temperature`), with a slower temperature decay to maintain exploration. Higher-degree nodes are preferred when scores are tied, emphasizing long-term connectivity. The weights (0.5 for centrality, 0.7 for degree) reflect a slight bias toward degree over centrality, and the temperature starts high (1.0) and decays to a minimum of 0.2.",
          "thought": "The new algorithm emphasizes immediate distance with a stronger focus on node degree early on, using a temperature that decays more slowly to maintain exploration longer, and prioritizes nodes with higher degree when scores are tied, balancing short-term and long-term gains differently than the original.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    temperature = max(0.2, 1.0 - (total_unvisited / (total_unvisited + 1)))\n    best_score = float('-inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf'))\n        weighted_score = (1 - temperature) * (-current_distance) + temperature * (0.5 * centrality + 0.7 * degree)\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if degree > sum(1 for n in unvisited_nodes if distance_matrix[next_node][n] < float('inf')):\n                next_node = node\n\n    return next_node",
          "objective": 6.86596,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance over future distance with a time-varying weight factor (starting at 0.8 and decreasing as unvisited nodes decrease), normalizes scores by dividing by the sum of distances, and resolves ties by selecting the node with the smallest immediate distance. The weight factor balances local optimization (current distance) and global optimization (future distance) as the tour progresses, while the normalization ensures fairness in score comparison.",
          "thought": "The new algorithm prioritizes immediate distance over future distance with a time-varying weight factor, normalizes scores by dividing by the sum of distances, and resolves ties by selecting the node with the smallest immediate distance, emphasizing local optimization as the tour progresses.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    total_unvisited = len(unvisited_nodes)\n    weight_factor = 0.8 * (total_unvisited / (total_unvisited + 1))\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        future_distance = distance_matrix[node][destination_node]\n        weighted_score = (weight_factor * current_distance + (1 - weight_factor) * future_distance) / (current_distance + future_distance)\n\n        if weighted_score < best_score:\n            best_score = weighted_score\n            next_node = node\n        elif weighted_score == best_score:\n            if current_distance < distance_matrix[current_node][next_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.87465,
          "other_inf": null
     }
]