def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    weight = 1 / (1 + remaining_nodes ** 2)  # Exponential decay weight

    def cost_function(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = sum(distance_matrix[node][other] for other in unvisited_nodes)
        normalized_future = future_cost / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        return (1 - weight) * immediate_cost + weight * normalized_future

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
