def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    exploration_phase = remaining_nodes / (remaining_nodes + 1)  # Decreases as nodes are visited

    def cost_function(node):
        immediate_cost = distance_matrix[current_node][node]
        future_cost = sum(distance_matrix[node][other] for other in unvisited_nodes)
        normalized_future = future_cost / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Centrality measure: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Dynamic weight combining distance, future savings, and centrality
        weight_distance = 0.5 * (1 - exploration_phase)
        weight_future = 0.3 * exploration_phase
        weight_centrality = 0.2 * exploration_phase

        return (weight_distance * immediate_cost +
                weight_future * normalized_future +
                weight_centrality * centrality)

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
