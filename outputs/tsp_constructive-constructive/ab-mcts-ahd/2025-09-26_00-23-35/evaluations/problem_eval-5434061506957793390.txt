def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality heuristic: nodes with high centrality (many nearby connections) are preferred
        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < (sum(distance_matrix[node]) / total_nodes))

        # Heuristic lookahead: estimate future cost by considering the average distance to remaining nodes
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustment based on remaining nodes
        weight_immediate = 0.7 - 0.2 * (remaining_nodes / total_nodes)
        weight_centrality = 0.2 + 0.1 * (remaining_nodes / total_nodes)
        weight_future = 0.1 + 0.1 * (remaining_nodes / total_nodes)
        penalty = 0.1 * distance_to_destination

        score = (weight_immediate * distance_to_node +
                 weight_centrality * centrality +
                 weight_future * avg_future_distance +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
