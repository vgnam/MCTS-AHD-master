def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    next_node = None
    best_score = -float('inf')

    centrality = {}
    connectivity = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / max(1, len(unvisited_nodes) - 1)

        threshold = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        connectivity[node] = sum(1 for other in unvisited_nodes if other != node and distance_matrix[node][other] <= threshold)

    exploration_factor = 0.5 + 0.5 * (total_unvisited / len(distance_matrix))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        normalized_centrality = centrality[node] / (centrality.get(destination_node, 1) + 1e-6)

        score = (1 - exploration_factor) * (-distance_to_node) + \
                (2 * exploration_factor) * connectivity[node] - \
                (exploration_factor) * normalized_centrality

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
