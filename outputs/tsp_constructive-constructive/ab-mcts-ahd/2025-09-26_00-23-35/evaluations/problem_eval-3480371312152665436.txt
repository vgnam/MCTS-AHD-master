def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Dynamic weights
        weight_future = 1.0 / (1 + remaining_nodes) * (1 - progress)
        weight_centrality = 0.4 * (1 - progress)
        weight_destination = 0.6 * progress

        # Score combines proximity, weighted future distance, centrality, and destination alignment
        score = (distance_to_node +
                 weight_future * distance_to_destination +
                 weight_centrality * (-avg_future_distance) +
                 weight_destination * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
