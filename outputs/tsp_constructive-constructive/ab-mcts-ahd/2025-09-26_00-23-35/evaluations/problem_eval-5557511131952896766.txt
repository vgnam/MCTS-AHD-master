def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    min_distance = float('inf')
    dest_distance = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality for each node
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Temperature for probabilistic selection
    temperature = max(0.1, 1.0 - (1.0 / remaining_nodes))

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            next_node = node
            break
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if next_node != destination_node and remaining_nodes > 1:
        # Centrality factor for bias adjustment
        centrality_factor = centrality.get(next_node, 0) / (centrality.get(destination_node, 1) + 1e-6)
        threshold = 0.5 * (1.0 / (1 + remaining_nodes)) * (1.0 + centrality_factor * temperature)
        bias_factor = min_distance / (dest_distance + 1e-6)
        penalty = 1.2 if min_distance > 2 * dest_distance else 1.0
        adjusted_bias = bias_factor * penalty
        if adjusted_bias > threshold:
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    return next_node
