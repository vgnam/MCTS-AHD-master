def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    progress_ratio = (num_unvisited / (num_unvisited + 1)) if num_unvisited > 0 else 0

    weight_proximity = 0.6 * (1 - progress_ratio) + 0.4
    weight_centrality = 0.3 * progress_ratio + 0.2
    weight_dest_align = 0.5 * progress_ratio + 0.3

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_dest - variance

        dest_distance = distance_matrix[node][destination_node]
        dest_align_score = 1 / (dest_distance + 1e-6)

        score = (weight_proximity * (-distance_to_node) +
                 weight_centrality * centrality_score +
                 weight_dest_align * dest_align_score)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
