def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')

    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)

    # Calculate centrality for each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Dynamic weight factor based on remaining nodes
    if total_unvisited > 1:
        weight_factor = 0.3 + (0.7 * (total_unvisited - 1) / (len(distance_matrix) - 2))
    else:
        weight_factor = 0.8

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Centrality factor for bias adjustment
        centrality_factor = centrality.get(node, 0) / (centrality.get(destination_node, 1) + 1e-6)

        # Weighted score with centrality emphasis
        score = (1.0 - weight_factor) * centrality_factor - weight_factor * distance_to_node
        score *= (1.0 + (1.0 / total_unvisited))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
