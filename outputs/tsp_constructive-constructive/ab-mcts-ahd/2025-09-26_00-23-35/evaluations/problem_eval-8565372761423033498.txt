def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on proximity to destination
        proximity_factor = 1 - (distance_to_destination / max(distance_matrix[node]))
        weight_immediate = 0.5 + 0.3 * proximity_factor
        weight_future = 0.5 - 0.3 * proximity_factor

        # Look-ahead mechanism: evaluate potential future paths
        future_scores = []
        for future_node in unvisited_nodes:
            if future_node != node:
                future_distance = distance_matrix[node][future_node]
                future_to_dest = distance_matrix[future_node][destination_node]
                future_scores.append(future_distance + 0.2 * future_to_dest)

        avg_future_distance = sum(future_scores) / max(1, len(future_scores))

        # Penalty based on both distance and remaining nodes
        penalty = (0.2 * distance_to_destination) * (remaining_nodes / total_nodes)

        # Calculate score with probabilistic element
        score = (weight_immediate * distance_to_node +
                 weight_future * avg_future_distance +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    # Introduce probabilistic selection among top 3 nodes
    if remaining_nodes > 3:
        top_nodes = sorted(unvisited_nodes, key=lambda n: (
            distance_matrix[current_node][n] +
            0.3 * distance_matrix[n][destination_node]
        ))[:3]
        if next_node not in top_nodes:
            next_node = random.choice(top_nodes)

    return next_node
