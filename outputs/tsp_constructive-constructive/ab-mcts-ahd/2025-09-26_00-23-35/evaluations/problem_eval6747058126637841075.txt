def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    node_densities = {}
    for node in unvisited_nodes:
        neighbors = [n for n in unvisited_nodes if n != node]
        if neighbors:
            avg_distance = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
            node_densities[node] = avg_distance
        else:
            node_densities[node] = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / len(future_distances) if future_distances else 0
        distance_to_destination = distance_matrix[node][destination_node]

        density_factor = node_densities[node] / (sum(node_densities.values()) / len(node_densities)) if node_densities else 1
        diversity_factor = (max(future_distances) - min(future_distances)) / avg_future_distance if avg_future_distance > 0 else 0

        weight_proximity = 0.6 if remaining_nodes <= 3 else 0.4
        weight_density = 0.3 if remaining_nodes <= 3 else 0.4
        weight_diversity = 0.1 if remaining_nodes <= 3 else 0.2

        penalty = (0.2 / remaining_nodes) * distance_to_destination if remaining_nodes > 3 else 0
        score = (weight_proximity * distance_to_node +
                 weight_density * density_factor +
                 weight_diversity * diversity_factor) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
