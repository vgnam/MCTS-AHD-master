def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    num_unvisited = len(unvisited_nodes)
    proximity_weight = 0.5 * (0.8 - 0.3 * (num_unvisited / (num_unvisited + 1)))
    future_weight = 0.4 * (0.3 + 0.7 * (num_unvisited / (num_unvisited + 1)))
    hub_weight = 0.1 * (1 - (num_unvisited / len(distance_matrix)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        hub_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)) / max(1, num_unvisited - 1)
        revisit_penalty = 0.2 if node == destination_node else 0

        score = (proximity_weight * (1 / (1 + distance_to_node)) +
                 future_weight * (1 / (1 + avg_future_distance)) +
                 hub_weight * hub_score) - revisit_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
