def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        # Base distances
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Connectivity bonus: favor nodes that connect to many unvisited nodes
        connectivity_bonus = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * distance_to_node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weights
        weight_proximity = 0.5 * (1 - (remaining_nodes / len(unvisited_nodes)))
        weight_future = 0.5 * (remaining_nodes / len(unvisited_nodes))
        weight_connectivity = 0.2 + 0.8 * (1 - (remaining_nodes / len(unvisited_nodes)))

        # Score calculation
        score = (weight_proximity * distance_to_node +
                 weight_future * distance_to_destination +
                 weight_connectivity * (1 - connectivity_bonus))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
