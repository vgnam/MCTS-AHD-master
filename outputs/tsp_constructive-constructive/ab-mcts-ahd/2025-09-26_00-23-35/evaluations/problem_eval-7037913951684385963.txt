def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if unvisited_nodes:
            future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            future_potential = harmonic_mean(future_distances) if future_distances else 0
        else:
            future_potential = 0

        dynamic_weight = 0.5 + 0.1 * (len(unvisited_nodes) / len(distance_matrix)) if unvisited_nodes else 0.5
        score = (0.4 - dynamic_weight) * distance_to_node + 0.3 * distance_to_destination + (0.3 + dynamic_weight) * future_potential

        if score < best_score:
            best_score = score
            next_node = node

    return next_node

def harmonic_mean(values):
    if not values:
        return 0
    reciprocal_sum = sum(1 / x for x in values)
    return next_node
