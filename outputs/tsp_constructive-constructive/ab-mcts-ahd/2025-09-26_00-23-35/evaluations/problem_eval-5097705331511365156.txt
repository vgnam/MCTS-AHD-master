def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Adaptive weight based on tour progress
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    weight_proximity = 1.0 - 0.7 * progress_factor
    weight_future = 0.7 * progress_factor
    weight_exploration = 0.3 * (1 - progress_factor)

    # Track visited nodes to estimate exploration
    visited_nodes = total_nodes - remaining_nodes
    exploration_bias = 1 - (visited_nodes / total_nodes) if visited_nodes > 0 else 1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality measure: average distance to all other nodes (both visited and unvisited)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes) if n != node) / (total_nodes - 1)

        # Future potential: weighted by remaining nodes and exploration bias
        future_potential = distance_to_destination * (remaining_nodes / total_nodes) * exploration_bias

        # Exploration incentive: favor nodes with higher average distance to visited nodes
        visited_avg_distance = sum(distance_matrix[node][n] for n in range(total_nodes) if n not in unvisited_nodes and n != current_node) / max(1, visited_nodes)
        exploration_incentive = visited_avg_distance * weight_exploration

        # Probabilistic component with adaptive scaling
        random_factor = 0.15 * (distance_to_node / max(distance_matrix[current_node])) * (1 - progress_factor)

        # Combined score with adaptive weights
        score = (weight_proximity * distance_to_node +
                 weight_future * future_potential -
                 0.6 * centrality +
                 exploration_incentive +
                 random_factor)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
