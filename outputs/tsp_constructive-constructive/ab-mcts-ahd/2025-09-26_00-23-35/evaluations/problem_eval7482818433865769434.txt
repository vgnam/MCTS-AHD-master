def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    # Calculate current node's centrality (average distance to unvisited nodes)
    current_centrality = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and current centrality
        weight = 0.3 + 0.7 * (remaining_nodes / total_nodes) * (1 - min(current_centrality / (distance_to_node + 1e-6), 1))

        # Penalty for nodes that are outliers in the current neighborhood
        neighborhood_avg = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        penalty = 1.0 + 0.5 * (distance_to_node / (neighborhood_avg + 1e-6)) if distance_to_node > neighborhood_avg else 1.0

        score = distance_to_node + weight * distance_to_destination * penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
