def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 0.5 if remaining_nodes > 1 else 0.3
        score = distance_to_node + weight * distance_to_destination

        # Normalize score by potential path length
        if remaining_nodes > 1:
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            score += 0.2 * avg_future_distance

        if score < best_score:
            best_score = score
            next_node = node

    # Add probabilistic selection for exploration
    if remaining_nodes > 1 and random.random() < 0.1:
        candidates = [node for node in unvisited_nodes if node != next_node]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
