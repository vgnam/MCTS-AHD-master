def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    num_total_nodes = len(distance_matrix)
    phase_factor = (num_total_nodes - num_unvisited) / num_total_nodes
    weight_proximity = 0.6 * (1 - phase_factor) + 0.2
    weight_future = 0.3 * phase_factor + 0.1
    weight_diversity = 0.1 * (1 - phase_factor)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        node_centrality = sum(distance_matrix[node][n] for n in range(num_total_nodes)) / num_total_nodes
        penalty = 0.2 * (1 - (num_unvisited / num_total_nodes)) if node in unvisited_nodes else 0
        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance -
                 weight_diversity * node_centrality +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
