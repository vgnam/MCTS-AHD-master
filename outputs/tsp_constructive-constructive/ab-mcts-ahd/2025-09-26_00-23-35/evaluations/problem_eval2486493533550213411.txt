def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    num_total_nodes = len(distance_matrix)
    weight_proximity = 0.6 * (0.7 - 0.1 * (num_unvisited / num_total_nodes))
    weight_future = 0.3 * (0.3 + 0.7 * (1 - (num_unvisited / num_total_nodes)))
    weight_centrality = 0.1 * (0.1 + 0.9 * (1 - (num_unvisited / num_total_nodes)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        node_degree = sum(1 for n in range(num_total_nodes) if distance_matrix[node][n] > 0)
        centrality_penalty = 0.2 * (node_degree / num_total_nodes) if node_degree > 2 else 0
        score = (weight_proximity * distance_to_node +
                weight_future * avg_future_distance +
                weight_centrality * centrality_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
