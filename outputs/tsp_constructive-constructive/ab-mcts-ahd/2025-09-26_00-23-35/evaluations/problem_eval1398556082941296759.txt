def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    dest_distance = distance_matrix[current_node][destination_node]

    # Temperature-based exploration factor
    exploration_factor = 1.0 / (1.0 + len(unvisited_nodes))  # Decreases as nodes are visited

    # Calculate nearest neighbor
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            next_node = node
            break
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Probabilistic bias toward destination
    if next_node != destination_node and len(unvisited_nodes) > 1:
        bias_score = (dest_distance - min_distance) / (dest_distance + 1e-6)
        probability = exploration_factor * bias_score

        if probability > 0.5:
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    # Greedy switch to destination if path is too long
    if next_node != destination_node:
        path_length = min_distance + distance_matrix[next_node][destination_node]
        if path_length > 1.5 * dest_distance:
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    return next_node
