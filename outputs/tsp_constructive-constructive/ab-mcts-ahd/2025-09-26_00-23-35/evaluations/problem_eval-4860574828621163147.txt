import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    scores = []
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weights with exponential decay
    weight_proximity = 0.5 * math.exp(-0.5 * (remaining_nodes / len(unvisited_nodes)))
    weight_future = 0.5 * (1 - math.exp(-0.5 * (remaining_nodes / len(unvisited_nodes))))

    # Centrality reward based on node's average distance to all unvisited nodes
    centrality_rewards = {}
    for node in unvisited_nodes:
        centrality_rewards[node] = -0.2 * sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

    # Penalty term scaling with remaining nodes and their average distances
    penalty = 0.1 * sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes <= 4 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Score with dynamic weights, centrality reward, and penalty
        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance +
                 centrality_rewards[node] +
                 penalty)

        scores.append((node, score))

    # Probabilistic selection based on exponential decay of scores
    exp_scores = [math.exp(-s[1]) for s in scores]
    sum_exp_scores = sum(exp_scores)
    probs = [e / sum_exp_scores for e in exp_scores]

    import random
    next_node = random.choices([s[0] for s in scores], weights=probs, k=1)[0]

    return next_node
