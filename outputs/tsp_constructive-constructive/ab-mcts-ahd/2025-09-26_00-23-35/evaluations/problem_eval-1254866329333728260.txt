def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality of current node (lower average distance = more central)
    avg_current_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes))
    centrality_factor = 1 / (1 + avg_current_distance)

    # Historical frequency penalty (simplified example)
    historical_frequency = {node: 0 for node in unvisited_nodes}  # In practice, this would track past selections

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weighting based on centrality and remaining nodes
        if centrality_factor > 0.5:
            weight_immediate = 0.6 + 0.2 * (1 - centrality_factor)
            weight_future = 0.4 - 0.2 * (1 - centrality_factor)
        else:
            weight_immediate = 0.5
            weight_future = 0.5

        # Add historical frequency penalty
        penalty = historical_frequency[node] * 0.1

        score = weight_immediate * distance_to_node + weight_future * avg_future_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
