def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    proximity_weight = 0.7 * (num_unvisited / (num_unvisited + 1)) + 0.3
    centrality_weight = 0.5
    novelty_weight = 0.5 * (1 - (num_unvisited / (num_unvisited + 1)) ** 2) + 0.5

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance_to_dest = sum(distances_to_others) / max(1, len(distances_to_others))
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_distance_to_dest)
        centrality_score = connectivity * (1 - variance / (avg_distance_to_dest + 1))

        proximity_penalty = distance_to_node * proximity_weight
        novelty_penalty = variance * novelty_weight ** 2

        score = -proximity_penalty + centrality_weight * centrality_score - novelty_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
