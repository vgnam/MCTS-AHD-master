def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting: favor global guidance early, local refinement later
        weight_global = 1 / (remaining_nodes + 1)
        weight_local = 1 - weight_global

        score = (weight_local * distance_to_current) + (weight_global * distance_to_destination)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
