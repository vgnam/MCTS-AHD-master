def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # Including current node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        # Immediate proximity
        distance_to_node = distance_matrix[current_node][node]

        # Long-term efficiency (weighted by sigmoid of remaining nodes ratio)
        distance_to_destination = distance_matrix[node][destination_node]
        sigmoid_weight = 1 / (1 + math.exp(-(remaining_nodes / total_nodes - 0.5) * 10))  # Sigmoid function
        long_term_score = sigmoid_weight * distance_to_destination

        # Bottleneck penalty (average distance to other unvisited nodes)
        if remaining_nodes > 1:
            other_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance = sum(distance_matrix[node][n] for n in other_nodes) / len(other_nodes)
            penalty = 0.1 * avg_distance
        else:
            penalty = 0

        # Combined score
        score = distance_to_node + long_term_score + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
