def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)

        # Dynamic weight based on unvisited count and destination proximity
        destination_weight = 2.5 + 0.5 * (1 / (1 + 0.2 * unvisited_count)) + 0.3 * (1 - distance_to_destination / max(distance_matrix[node]))

        # Path potential: combination of direct distance and centrality in remaining graph
        path_potential = 0.6 * distance_to_destination + 0.4 * (sum(distance_matrix[node][n] for n in unvisited_nodes) / unvisited_count)

        # Combined score with adaptive weighting
        score = destination_weight * path_potential + 0.4 * avg_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
