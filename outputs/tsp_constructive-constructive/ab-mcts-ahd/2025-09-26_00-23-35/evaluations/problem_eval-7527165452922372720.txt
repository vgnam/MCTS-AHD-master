def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustment based on remaining nodes
        if remaining_nodes <= 3:
            weight_distance = 1.5
            weight_destination = 0.3
            weight_centrality = 0.1
        else:
            weight_distance = 1.0
            weight_destination = 0.4
            weight_centrality = 0.2

        # Penalize nodes that are too far from the current path's direction
        direction_penalty = 0
        if current_node != destination_node:
            current_direction = distance_matrix[current_node][destination_node]
            node_direction = distance_matrix[node][destination_node]
            if node_direction > 1.5 * current_direction:
                direction_penalty = 0.3 * node_direction

        score = (weight_distance * distance_to_node +
                 weight_destination * distance_to_destination +
                 weight_centrality * avg_distance) + direction_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
