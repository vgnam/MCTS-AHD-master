importance mid-tour, and balances centrality and novelty later, using dynamic weights that adjust based on remaining unvisited nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][destination_node]) / max(1, len(unvisited_nodes) - 1)
        destination_alignment = 1 / (1 + distance_matrix[node][destination_node])

        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_dest - variance
        novelty_penalty = variance * (0.5 * (1 - remaining_nodes / (remaining_nodes + 1)))

        weight_immediate = 0.5 + 0.3 * (remaining_nodes / total_nodes)
        weight_connectivity = 0.3 - 0.1 * (remaining_nodes / total_nodes)
        weight_alignment = 0.2 + 0.1 * (remaining_nodes / total_nodes)
        weight_centrality = 0.3 * (remaining_nodes / total_nodes) + 0.7
        weight_novelty = 0.5 * (1 - remaining_nodes / (remaining_nodes + 1))

        score = (weight_immediate * distance_to_node +
                weight_connectivity * (1 - connectivity_score) +
                weight_alignment * destination_alignment +
                weight_centrality * centrality_score -
                weight_novelty * novelty_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
