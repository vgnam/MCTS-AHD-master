import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weight adjustment with reduced randomness
    weight_future = 0.7 * (0.7 + 0.3 * (num_unvisited / (num_unvisited + 1)))
    weight_proximity = 0.3 * (0.3 * (1 - (num_unvisited / (num_unvisited + 1))))

    # Reduced randomness
    randomness = 0.05 * random.random()

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # No proximity bonus
        score = (weight_future * avg_future_distance + weight_proximity * distance_to_node) * (1 + randomness)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
