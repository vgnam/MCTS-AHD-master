def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Precompute node properties
    node_frequency = {node: sum(1 for n in unvisited_nodes if n == node) for node in unvisited_nodes}
    node_degrees = {node: sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) for node in unvisited_nodes}

    for node in unvisited_nodes:
        # Basic distance metrics
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight adjustments
        proximity_weight = 1.0 - (0.3 * (remaining_nodes / len(unvisited_nodes)))
        future_weight = 0.5 + (0.4 * (remaining_nodes / len(unvisited_nodes)))
        momentum_weight = 0.2 * (remaining_nodes / len(unvisited_nodes))

        # Novel path momentum factor (rewards nodes in current direction)
        if current_node in unvisited_nodes:
            prev_node = current_node
            direction_vector = [distance_matrix[prev_node][node] - distance_matrix[node][prev_node], 0]
            node_vector = [distance_matrix[node][destination_node] - distance_matrix[node][prev_node], 0]
            dot_product = direction_vector[0] * node_vector[0]
            momentum_score = dot_product / (np.linalg.norm(direction_vector) * np.linalg.norm(node_vector) + 1e-6)
        else:
            momentum_score = 0

        # Future connectivity score (anticipates future path options)
        future_options = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < distance_to_dest)
        connectivity_score = future_options / max(1, len(unvisited_nodes) - 1)

        # Exploration bonus (rewards less frequent nodes)
        exploration_bonus = 1.0 / (1.0 + node_frequency.get(node, 0))

        # Combined scoring
        score = (proximity_weight * distance_to_node +
                 future_weight * (distance_to_dest + connectivity_score) +
                 momentum_weight * momentum_score +
                 exploration_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
