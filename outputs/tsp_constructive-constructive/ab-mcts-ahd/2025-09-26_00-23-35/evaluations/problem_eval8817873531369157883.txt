def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        dest_distance = distance_matrix[node][destination_node]

        exploration_weight = 0.5 * (1 - remaining_ratio)
        exploitation_weight = 0.5 * remaining_ratio
        normalized_dest_distance = dest_distance / (avg_distance + 1e-6)

        penalty = 0.2 * normalized_dest_distance if normalized_dest_distance > 1.5 else 0
        score = (exploration_weight * distance_to_node) + (exploitation_weight * avg_distance) + penalty

        if score < best_score:
            best_score = best_score
            next_node = node

    return next_node
