def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Dynamic centrality factor: inversely proportional to remaining nodes and current path length
        path_length_factor = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        centrality_weight = 0.5 * (1 - remaining_nodes / (remaining_nodes + path_length_factor))

        # Opportunity cost: penalize nodes with high future connectivity
        connectivity_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Detour cost: adjusted for remaining nodes
        detour_cost = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / max(1, remaining_nodes)

        score = distance_to_node + centrality_weight * connectivity_cost + 0.3 * detour_cost

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
