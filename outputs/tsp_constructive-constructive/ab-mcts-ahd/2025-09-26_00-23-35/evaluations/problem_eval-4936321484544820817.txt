import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    min_distance = float('inf')
    candidates = []

    # Calculate centrality and exploration potential for each node
    centrality = {}
    exploration_potential = {}
    for node in unvisited_nodes:
        # Distance-based centrality
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Exploration potential: harmonic mean of distance to current and destination
        dist_to_current = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]
        exploration_potential[node] = 2 * dist_to_current * dist_to_dest / (dist_to_current + dist_to_dest + 1e-6) if dist_to_dest > 0 else dist_to_current

    # Dynamic temperature using sigmoid function
    remaining_nodes = len(unvisited_nodes)
    temperature = 1 / (1 + math.exp(-0.5 * (remaining_nodes - 5)))

    # Find nearest neighbor
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Combined centrality score
    combined_score = {}
    for node in unvisited_nodes:
        combined_score[node] = (1 - temperature) * centrality[node] + temperature * exploration_potential[node]

    # Dynamic centrality threshold
    centrality_threshold = 0.5 * (1 + math.tanh(remaining_nodes / 5 - 1))

    # Probabilistic rerouting
    if next_node != destination_node and remaining_nodes > 1:
        reroute_prob = (combined_score.get(next_node, 0) / (centrality_threshold + 1e-6)) * (1 - temperature)

        if (combined_score.get(next_node, 0) > centrality_threshold and random.random() < reroute_prob) or \
           (random.random() < temperature * 0.5):
            # Consider alternative nodes based on combined score
            candidate_nodes = [node for node in unvisited_nodes if node != next_node]
            if candidate_nodes:
                next_node = max(candidate_nodes, key=lambda x: combined_score.get(x, 0))

    return next_node
