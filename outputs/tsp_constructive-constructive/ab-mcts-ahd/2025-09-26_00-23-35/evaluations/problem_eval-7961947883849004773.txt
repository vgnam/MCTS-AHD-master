def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    if num_unvisited == 0:
        return destination_node

    # Dynamic weights with non-linear scaling
    progress = (len(unvisited_nodes) + 1) / (num_unvisited + 1)
    proximity_weight = 0.6 * (progress ** 2) + 0.4
    centrality_weight = 0.4 * (progress ** 0.5) + 0.6
    novelty_weight = 0.3 * (1 - progress ** 3)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Predictive centrality: average distance to other unvisited nodes
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Variance calculation for novelty penalty
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))

        # Centrality score adjusted for predictive impact
        centrality_score = avg_distance_to_dest - 0.5 * variance

        # Novelty penalty with adaptive strength
        novelty_penalty = variance * novelty_weight * (1 + progress)

        # Proximity component with distance discounting
        proximity_score = -distance_to_node * proximity_weight * (1 + 0.1 * (1 - progress))

        # Combined score with adaptive weighting
        score = proximity_score + centrality_weight * centrality_score - novelty_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
