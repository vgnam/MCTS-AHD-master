def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality of the current node (average distance to all other nodes)
    total_distance = sum(distance_matrix[current_node])
    num_nodes = len(distance_matrix)
    current_centrality = total_distance / (num_nodes - 1) if num_nodes > 1 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and current centrality
        weight = (1.0 / (1 + remaining_nodes)) * (1 + current_centrality / (current_centrality + 1))

        # Score combines distance to node, distance to destination, and centrality
        score = distance_to_node + weight * distance_to_destination + (1 - weight) * current_centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
