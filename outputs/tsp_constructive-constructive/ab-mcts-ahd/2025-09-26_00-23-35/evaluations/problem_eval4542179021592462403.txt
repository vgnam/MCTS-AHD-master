def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Dynamic weight adjustment based on remaining nodes
        if remaining_nodes <= 3:
            weight_immediate = 0.7
            weight_future = 0.3
        else:
            weight_immediate = 0.5
            weight_future = 0.5

        # Additional consideration for proximity to destination
        distance_to_destination = distance_matrix[node][destination_node]
        score = (weight_immediate * distance_to_node +
                 weight_future * avg_future_distance +
                 0.2 * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
