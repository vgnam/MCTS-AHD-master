def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distance_to_dest = distance_matrix[node][destination_node]
        max_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0

        if remaining_ratio > 0.5:
            weight_proximity = 0.3
            weight_centrality = 0.5
            weight_indirect = 0.2
        else:
            weight_proximity = 0.2
            weight_centrality = 0.3
            weight_indirect = 0.5

        score = weight_proximity * (-distance_to_node) + weight_centrality * (-max_distance) + weight_indirect * distance_to_dest

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
