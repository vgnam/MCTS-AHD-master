def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        max_future_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        hub_penalty = 0.2 * centrality if remaining_nodes > 2 else 0

        weight_proximity = 0.4 * (remaining_nodes / len(unvisited_nodes))
        weight_future_avg = 0.3 * (1.0 / (1.0 + remaining_nodes))
        weight_future_max = 0.3 * (remaining_nodes / len(unvisited_nodes))

        score = (weight_proximity * distance_to_node +
                 weight_future_avg * avg_future_distance +
                 weight_future_max * max_future_distance +
                 hub_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
