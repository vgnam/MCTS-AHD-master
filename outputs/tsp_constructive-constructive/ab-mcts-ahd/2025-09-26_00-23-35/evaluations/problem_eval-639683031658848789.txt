def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes))
        distance_to_destination = distance_matrix[node][destination_node]

        weight_immediate = 0.7 - 0.2 * (remaining_nodes / total_nodes)
        weight_centrality = 0.2 + 0.1 * (remaining_nodes / total_nodes)
        penalty = 0.1 * distance_to_destination

        lookahead = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0

        score = weight_immediate * distance_to_node + weight_centrality * centrality + penalty - 0.1 * lookahead

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
