def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.7 * (num_unvisited / (num_unvisited + 1))
    weight_future = 0.3 * (1 - (num_unvisited / (num_unvisited + 1)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        score = weight_proximity * distance_to_node + weight_future * avg_future_distance

        if score < best_score:
            best_score = score
            next_node = node

    if next_node != destination_node and num_unvisited > 1:
        threshold = 0.5 * (1.0 / (1 + num_unvisited))
        dest_distance = distance_matrix[current_node][destination_node]
        bias_factor = distance_matrix[current_node][next_node] / (dest_distance + 1e-6)
        penalty = 1.2 if distance_matrix[current_node][next_node] > 2 * dest_distance else 1.0
        adjusted_bias = bias_factor * penalty
        if adjusted_bias > threshold:
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    return next_node
