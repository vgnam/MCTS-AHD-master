def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    remaining_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = 0.5 * (remaining_nodes / total_nodes)

        # Penalize nodes that are too far from current node
        if distance_to_node > 1.5 * avg_distance:
            penalty = 0.3 * distance_to_node
        else:
            penalty = 0

        # Local optimization: consider average distance to remaining nodes
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_remaining_distance = sum(remaining_distances) / len(remaining_distances) if remaining_distances else 0
        local_optimization = 0.2 * avg_remaining_distance

        score = distance_to_node + weight * distance_to_destination + penalty + local_optimization

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
