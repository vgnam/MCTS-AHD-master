def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    dest_distance = distance_matrix[current_node][destination_node]
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.7 * (0.6 + 0.4 * (num_unvisited / (num_unvisited + 1)))
    weight_future = 0.3 * (0.4 * (1 - (num_unvisited / (num_unvisited + 1))))
    candidates = []

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        score = weight_proximity * distance_to_node + weight_future * avg_future_distance

        if distance_to_node < min_distance:
            min_distance = distance_to_node
            next_node = node
        candidates.append((node, score))

    if next_node != destination_node and len(unvisited_nodes) > 1:
        bias_factor = min_distance / (dest_distance + 1e-6)
        if bias_factor > 0.5 or random.random() < 0.3:
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    return next_node
