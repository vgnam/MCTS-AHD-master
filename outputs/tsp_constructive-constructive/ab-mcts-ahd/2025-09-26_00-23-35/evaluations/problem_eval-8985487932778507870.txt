defined as the average distance to unvisited nodes, and the weight factor balances immediate proximity and long-term efficiency, with higher weights on long-term efficiency as the tour progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality for each node (average distance to all other unvisited nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Dynamic weight based on remaining nodes
    weight = 1.0 / (1 + remaining_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality factor for bias adjustment
        centrality_factor = centrality.get(node, 0) / (centrality.get(destination_node, 1) + 1e-6)

        # Weighted score with centrality adjustment
        score = distance_to_node + weight * distance_to_destination
        score *= (1.0 + centrality_factor * weight)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
