def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 0.7 if remaining_nodes < 3 else 0.5
    weight_destination = 0.2
    weight_future = 0.1 if remaining_nodes < 3 else 0.3

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / max(1, len(unvisited_nodes) - 1)
        std_future_distance = (sum((d - avg_future_distance) ** 2 for d in future_distances) / max(1, len(future_distances))) ** 0.5
        penalty = std_future_distance * 0.1

        score = (weight_proximity * distance_to_node +
                 weight_destination * distance_to_destination +
                 weight_future * avg_future_distance +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
