def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Calculate average and variance of distances to unvisited nodes
    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances_to_unvisited) / remaining_nodes
    variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight: inversely proportional to remaining nodes and scaled by variance
        weight = (1.0 / (1 + remaining_nodes)) * (1 + variance / (avg_distance + 1e-6))
        score = distance_to_node + weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
