def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    # Calculate centrality for each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Temperature for probabilistic selection (decreases with remaining nodes)
    temperature = max(0.1, 1.0 - (1.0 / len(unvisited_nodes)))

    # Dynamic weight factor based on unvisited nodes
    if total_unvisited > 1:
        weight_factor = 1.0 + (0.5 * (total_unvisited - 1) / (len(distance_matrix) - 2))
    else:
        weight_factor = 1.5

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality factor for bias adjustment
        centrality_factor = centrality.get(node, 0) / (centrality.get(destination_node, 1) + 1e-6)

        # Weighted score with centrality adjustment
        score = weight_factor * distance_to_node + (1.0 - weight_factor) * distance_to_destination
        score *= (1.0 + centrality_factor * temperature)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
