def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weighting based on remaining nodes
        weight_immediate = 1.0
        weight_destination = 0.4 * (remaining_nodes / (remaining_nodes + 1))  # Reduce destination weight as nodes decrease
        weight_centrality = 0.2 * (1 - (remaining_nodes / (remaining_nodes + 1)))  # Increase centrality weight as nodes decrease

        score = (weight_immediate * distance_to_node +
                 weight_destination * distance_to_destination +
                 weight_centrality * avg_distance)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
