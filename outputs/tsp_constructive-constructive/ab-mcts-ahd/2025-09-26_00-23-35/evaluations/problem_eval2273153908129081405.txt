import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    # Dynamic weights (immediate distance has full priority, future efficiency increases as unvisited nodes decrease)
    weight_immediate = 1.0
    weight_future = 0.5 * (1 - (total_unvisited / (total_unvisited + 1)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, total_unvisited - 1)

        # Score with dynamic weights
        score = weight_immediate * distance_to_node + weight_future * avg_future_distance

        if score < best_score:
            best_score = score
            next_node = node

    # 25% chance to select destination node if not already selected
    if random.random() < 0.25 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
