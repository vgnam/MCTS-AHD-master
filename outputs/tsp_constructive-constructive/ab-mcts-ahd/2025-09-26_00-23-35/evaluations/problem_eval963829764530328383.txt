def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight with non-linear adjustment
        weight = (remaining_nodes ** 2) / (1 + remaining_nodes ** 2)

        # Penalty for nodes that have been visited more recently
        penalty = 0.1 * (remaining_nodes - unvisited_nodes.index(node)) if node in unvisited_nodes else 0

        # Heuristic for remaining tour length
        heuristic = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes))

        score = distance_to_node + weight * distance_to_destination + penalty + 0.5 * heuristic

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
