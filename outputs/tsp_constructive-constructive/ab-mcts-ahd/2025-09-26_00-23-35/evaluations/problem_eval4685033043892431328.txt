def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weights: prioritize proximity early, future efficiency later
    weight_proximity = 0.5 * (0.7 + 0.3 * (remaining_nodes / (remaining_nodes + 1)))
    weight_future = 0.5 * (0.3 * (1 - (remaining_nodes / (remaining_nodes + 1))))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)
        distance_to_destination = distance_matrix[node][destination_node]

        # Strong penalty for distant nodes when few nodes remain
        penalty = 0.3 * distance_to_destination if remaining_nodes <= 3 else 0

        # Centrality reward
        centrality_reward = -0.3 * avg_future_distance

        # Score with dynamic weights, penalty, and centrality reward
        score = weight_proximity * distance_to_node + weight_future * avg_future_distance + penalty + centrality_reward

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
