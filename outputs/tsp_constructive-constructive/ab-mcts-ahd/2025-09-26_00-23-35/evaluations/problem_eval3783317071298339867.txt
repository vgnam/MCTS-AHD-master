def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes))
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight_proximity = 0.2 + 0.8 * (remaining_nodes / len(unvisited_nodes))
        weight_centrality = 1.0 - weight_proximity
        weight_future = 0.5 * (1.0 - (remaining_nodes / len(unvisited_nodes)))

        # Future path estimation (rolling window of next 3 nodes)
        future_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:min(3, len(unvisited_nodes))]
        future_cost = sum(distance_matrix[node][n] for n in future_nodes) if future_nodes else 0

        penalty = 0.2 * distance_to_destination if remaining_nodes > 2 else 0.5 * distance_to_destination
        score = (weight_proximity * distance_to_node +
                 weight_centrality * centrality +
                 weight_future * future_cost +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
