def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    if not unvisited_nodes:
        return None

    weight_proximity = 0.5 * (0.7 + 0.3 * (total_unvisited / (total_unvisited + 1)))
    weight_future = 0.3 * (0.3 * (1 - (total_unvisited / (total_unvisited + 1))))
    weight_connectivity = 0.2
    weight_alignment = 0.2 * (1 - (total_unvisited / (total_unvisited + 1)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, total_unvisited - 1)
        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][destination_node]) / max(1, total_unvisited - 1)
        destination_alignment = 1 / (1 + distance_matrix[node][destination_node])

        penalty = max(0, distance_to_node - 2 * avg_future_distance)
        centrality_reward = -0.3 * avg_future_distance

        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance +
                 weight_connectivity * (1 - connectivity_score) +
                 weight_alignment * destination_alignment +
                 penalty +
                 centrality_reward)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
