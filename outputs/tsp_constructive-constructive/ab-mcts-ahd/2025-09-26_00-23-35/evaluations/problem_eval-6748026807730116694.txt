def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Calculate potential hub centrality (average distance to other unvisited nodes)
        hub_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Progressive destination focus (strengthens as tour progresses)
        progress_factor = 1 - (remaining_nodes / total_nodes)
        destination_weight = 0.2 + 0.3 * progress_factor

        # Hub penalty to discourage overusing central nodes
        hub_penalty = 0.1 * hub_centrality

        # Dynamic weights for immediate and future considerations
        weight_immediate = 0.5 + 0.2 * (remaining_nodes / total_nodes)
        weight_hub = 0.3 - 0.1 * (remaining_nodes / total_nodes)

        # Calculate score with new components
        score = (weight_immediate * distance_to_node +
                 weight_hub * hub_centrality +
                 destination_weight * distance_matrix[node][destination_node] +
                 hub_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
