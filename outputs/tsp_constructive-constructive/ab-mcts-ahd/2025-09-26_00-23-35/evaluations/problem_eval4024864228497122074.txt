def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        proximity_weight = 2.0 if remaining_nodes > 5 else 1.5
        centrality_weight = 1.5 if remaining_nodes > 5 else 2.0
        progress_weight = 0.5 if remaining_nodes > 5 else 1.0

        # Penalize nodes that are too far from current node
        if distance_to_node > 1.5 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]):
            penalty = 0.3 * distance_to_node
        else:
            penalty = 0

        score = (proximity_weight * distance_to_node) + (centrality_weight * avg_distance) + (progress_weight * distance_to_dest) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
