def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)

        # Novelty term: count of unique connections to unvisited nodes
        novelty = sum(1 for other in unvisited_nodes if other != node and distance_matrix[node][other] > 1.2 * centrality)

        # Dynamic weight based on remaining nodes and centrality
        weight = 0.4 * (remaining_nodes / total_nodes) + 0.6 * (1 - centrality / sum(distance_matrix[node]))

        # Penalize nodes that are too far from current node
        if distance_to_node > 1.5 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]):
            penalty = 0.4 * distance_to_node
        else:
            penalty = 0

        score = distance_to_node + weight * distance_to_destination - 0.2 * novelty + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
