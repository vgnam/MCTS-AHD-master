def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weights based on tour progress
    progress_ratio = (len(unvisited_nodes) + 1) / len(distance_matrix)
    weight_proximity = 0.7 * (1 - progress_ratio)
    weight_future = 0.3 * progress_ratio
    weight_centrality = 0.2 * (1 - progress_ratio)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Proximity penalty (favors closer nodes)
        proximity_penalty = -distance_to_node * weight_proximity

        # Future distance reward (favors nodes that lead to better future paths)
        future_reward = -distance_to_destination * weight_future

        # Centrality reward (favors nodes central to remaining nodes)
        centrality_reward = -avg_future_distance * weight_centrality

        # Score combines all factors with dynamic weights
        score = proximity_penalty + future_reward + centrality_reward

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
