def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for destination bias based on remaining nodes
        weight = 0.5 * (1 - (total_unvisited - 1) / total_unvisited)

        # Penalty for nodes previously considered but not selected
        penalty = 0.1 if node in unvisited_nodes and node != current_node else 0

        # Combined score with dynamic adjustments
        score = distance_to_node + weight * distance_to_destination + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
