def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        proximity_weight = 0.7 * (1 - 1 / (1 + math.exp(-(remaining_nodes - total_nodes / 2))))
        destination_weight = 0.3 * (1 - proximity_weight)

        # Penalize revisits to avoid cycles
        revisit_penalty = 0.1 if node in unvisited_nodes else 0

        score = (proximity_weight * (1 / distance_to_node) +
                destination_weight * distance_to_destination) - revisit_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
