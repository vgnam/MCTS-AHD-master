def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = max(0.1, 0.5 * (remaining_nodes / (remaining_nodes + 1)))  # Adjusts weight based on remaining nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = 0.2 * (1 / (distance_to_node + 1e-6))  # Penalty for nodes close to current node to encourage exploration
        score = distance_to_node + dynamic_weight * distance_to_destination + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
