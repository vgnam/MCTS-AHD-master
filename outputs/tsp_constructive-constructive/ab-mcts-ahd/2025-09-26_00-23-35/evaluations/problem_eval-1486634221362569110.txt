def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    weight_proximity = 1.0 - progress_factor * 0.7
    weight_centrality = progress_factor * 0.5

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        avg_distance_to_others = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_others) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_others * (1 - variance / (avg_distance_to_others + 1e-6))

        future_potential = distance_to_destination * (remaining_nodes / total_nodes)
        score = (weight_proximity * (-distance_to_node) +
                 weight_centrality * centrality_score +
                 0.3 * future_potential)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
