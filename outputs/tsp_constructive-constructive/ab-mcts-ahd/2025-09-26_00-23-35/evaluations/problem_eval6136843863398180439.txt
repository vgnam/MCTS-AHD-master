import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    candidates = []
    dest_distance = distance_matrix[current_node][destination_node]
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Decreases as nodes are visited

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        penalty = 1.0 if node == destination_node else 1.0 + (distance / (dest_distance + 1e-6))  # Penalty for revisiting
        score = -distance * (1.0 + 0.5 * (random.random() - 0.5))  # Add small randomness
        score /= penalty
        candidates.append((node, score))

    # Temperature-based selection
    candidates.sort(key=lambda x: x[1], reverse=True)
    selected = candidates[0][0]
    if len(candidates) > 1 and random.random() < temperature:
        selected = random.choices(
            [c[0] for c in candidates],
            weights=[math.exp(c[1] / temperature) for c in candidates]
        )[0]

    return next_node
