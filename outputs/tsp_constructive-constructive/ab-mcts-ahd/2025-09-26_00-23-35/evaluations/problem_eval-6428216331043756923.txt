def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and sigmoid function
        weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        score = weight * (1 / distance_to_node) + (1 - weight) * (1 / distance_to_destination)

        # Penalty for nodes already in the path (simplified check)
        if node in unvisited_nodes:
            score *= 0.9  # Small penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
