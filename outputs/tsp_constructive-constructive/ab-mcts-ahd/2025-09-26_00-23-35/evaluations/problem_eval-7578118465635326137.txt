def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        dest_distance = distance_matrix[node][destination_node]

        dynamic_weight = 0.3 + 0.2 * (1 / (1 + math.exp(-10 * (remaining_ratio - 0.5))))
        centrality_penalty = 0.05 * (avg_distance - min(avg_distance for n in unvisited_nodes))
        dest_alignment = 0.1 * dest_distance if dest_distance > 1.5 * avg_distance else 0

        future_lookahead = 0
        if len(unvisited_nodes) > 2:
            remaining_after_node = [n for n in unvisited_nodes if n != node]
            future_lookahead = min(distance_matrix[node][n] + distance_matrix[n][destination_node]
                                 for n in remaining_after_node) * 0.05

        score = distance_to_node + dynamic_weight * avg_distance + centrality_penalty + dest_alignment + future_lookahead

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
