def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')

    if not unvisited_nodes:
        return None

    # Calculate betweenness centrality (simplified proxy)
    centrality = {}
    for node in unvisited_nodes:
        betweenness = 0
        for u in unvisited_nodes:
            for v in unvisited_nodes:
                if u != v and u != node and v != node:
                    if distance_matrix[u][node] + distance_matrix[node][v] == distance_matrix[u][v]:
                        betweenness += 1
        centrality[node] = betweenness

    # Fixed weight factors
    distance_weight = 0.7
    centrality_weight = 0.3

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Score combines distance to current and destination, plus centrality
        score = -distance_weight * distance_to_node - 0.3 * distance_to_dest + centrality_weight * centrality[node]

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
