import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustment with temperature-based randomness
    progress = (total_nodes - num_unvisited) / total_nodes
    temperature = 1 - progress
    weight_proximity = 0.5 * (0.8 - 0.3 * progress)
    weight_future = 0.5 * (0.3 + 0.5 * progress)

    # Node centrality metric
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, num_unvisited - 1)

    # Penalty for recently visited nodes
    recently_visited = set()
    if len(unvisited_nodes) < total_nodes - 2:
        recently_visited.add(current_node)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_cost = centrality[node]

        # Temperature-based randomness
        randomness = temperature * 0.2 * random.random()

        # Penalty for revisiting
        penalty = 0.1 * distance_to_node if node in recently_visited else 0

        score = (weight_proximity * distance_to_node + weight_future * future_cost) * (1 + randomness) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
