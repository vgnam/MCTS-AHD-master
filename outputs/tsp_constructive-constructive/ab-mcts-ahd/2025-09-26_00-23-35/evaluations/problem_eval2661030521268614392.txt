def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining - 1)

        # Dynamic weight adjustment with sigmoid smoothing
        t = remaining / max(1, len(unvisited_nodes))
        weight_proximity = 1 / (1 + math.exp(-10 * (t - 0.5)))
        weight_efficiency = 1 - weight_proximity

        # Local density estimation
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.5 * max(distance_matrix[node]))

        # Penalty for nodes near destination
        penalty = 0.1 * distance_matrix[node][destination_node] if remaining <= 2 else 0

        score = (weight_proximity * distance_to_node +
                 weight_efficiency * avg_future_distance -
                 local_density * 0.05 * distance_to_node +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
