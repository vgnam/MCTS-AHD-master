def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Calculate average distance to remaining unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)

        # Novel connectivity score: sum of distances to all unvisited nodes
        connectivity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        # Dynamic priority scaling based on proximity to destination
        priority_scale = 1.0 + 0.3 * (1.0 - (distance_matrix[node][destination_node] / max(distance_matrix[node][n] for n in unvisited_nodes)))

        # Dynamic weight for density
        density_weight = 0.5 / (1 + 0.1 * unvisited_count)

        # Destination factor with adjusted weight
        destination_factor = 0.2 * distance_matrix[node][destination_node]

        # Composite score with novel connectivity term
        score = (distance_to_node + density_weight * avg_distance + destination_factor) * priority_scale + 0.1 * connectivity_score

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
