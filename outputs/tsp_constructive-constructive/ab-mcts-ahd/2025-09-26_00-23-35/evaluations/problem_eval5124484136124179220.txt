def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # Including current node
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes) if total_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        weight = visited_ratio * (1.0 / (1 + len(unvisited_nodes)))  # Dynamic weight with visited ratio
        score = distance_to_node + weight * (distance_to_destination + avg_distance_to_remaining)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
