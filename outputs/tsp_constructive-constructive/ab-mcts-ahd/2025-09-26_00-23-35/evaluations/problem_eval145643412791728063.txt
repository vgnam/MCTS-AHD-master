def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weights using sigmoid function for adaptive balancing
    proximity_weight = 1 / (1 + math.exp(-0.5 * (num_unvisited - len(distance_matrix) / 2)))
    future_weight = 1 - proximity_weight

    # Novelty factor based on distance to destination
    novelty_factor = 1 / (1 + distance_matrix[destination_node][current_node])

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Penalty for revisiting nodes (if applicable)
        revisit_penalty = 0.1 if node in unvisited_nodes else 0

        score = (proximity_weight * distance_to_node +
                future_weight * avg_future_distance +
                novelty_factor * distance_matrix[node][destination_node] +
                revisit_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
