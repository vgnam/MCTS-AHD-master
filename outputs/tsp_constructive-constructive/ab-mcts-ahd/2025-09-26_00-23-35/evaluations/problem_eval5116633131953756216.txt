def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Non-linear scaling factor for weight adjustment
    scaling_factor = 1 / (1 + math.exp(-0.5 * (remaining_nodes - len(distance_matrix) / 2)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with non-linear scaling
        weight_current = 0.7 * scaling_factor
        weight_destination = 0.3 * (1 - scaling_factor)
        weighted_distance = weight_current * distance_to_current + weight_destination * distance_to_destination

        # Penalty for revisiting nodes with high frequency (simulated)
        if node in distance_matrix and distance_matrix[current_node][node] > 0:
            weighted_distance *= (1 + 0.1 * (1 / distance_matrix[current_node][node]))

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
