def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight for destination proximity
        total_remaining_distance = sum(distance_matrix[node][n] for n in unvisited_nodes)
        normalized_distance = distance_to_destination / max(1, total_remaining_distance)
        weight_destination = 3.0 * (1 - normalized_distance)  # Higher weight if closer to destination

        # Inverse weight for average distance based on remaining nodes
        weight_avg = 1.0 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Scales down as nodes decrease

        score = weight_destination * distance_to_destination + weight_avg * avg_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
