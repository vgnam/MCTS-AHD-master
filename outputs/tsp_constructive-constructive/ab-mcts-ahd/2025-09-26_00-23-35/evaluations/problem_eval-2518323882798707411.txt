def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustment based on remaining nodes
        proximity_weight = 0.5 if total_unvisited > 3 else 0.3
        destination_weight = 0.3 if total_unvisited > 3 else 0.5
        future_weight = 0.2 if total_unvisited > 3 else 0.2

        # Penalty for nodes too close to destination early in the journey
        penalty = 0.1 * distance_to_destination if total_unvisited > 5 else 0

        score = (proximity_weight * distance_to_node +
                 destination_weight * distance_to_destination +
                 future_weight * avg_future_distance +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
