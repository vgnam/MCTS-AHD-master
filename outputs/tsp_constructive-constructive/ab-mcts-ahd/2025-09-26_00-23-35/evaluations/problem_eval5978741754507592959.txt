def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Dynamic centrality: combine average and median distances
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance = sum(distances) / max(1, len(distances))
        median_distance = sorted(distances)[len(distances)//2] if distances else 0
        centrality = 0.7 * avg_distance + 0.3 * median_distance

        # Dynamic weights based on remaining nodes and path progress
        weight_centrality = 0.4 if remaining_nodes <= 2 else 0.2 + 0.01 * remaining_nodes
        weight_detour = 0.3 * (1.0 - (remaining_nodes / len(unvisited_nodes)))

        # Detour penalty: scaled by remaining path length
        detour_cost = distance_matrix[node][destination_node] - current_to_dest
        detour_penalty = detour_cost * (1.0 + (remaining_nodes / len(unvisited_nodes)))

        # Combined score with dynamic factors
        score = distance_to_node + weight_centrality * centrality + weight_detour * detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
