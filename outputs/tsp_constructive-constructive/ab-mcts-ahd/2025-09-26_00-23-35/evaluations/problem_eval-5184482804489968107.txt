def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')

    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    max_nodes = len(distance_matrix)

    # Calculate connectivity (degree) for each node
    connectivity = {}
    for node in unvisited_nodes:
        connected = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0)
        connectivity[node] = connected

    # Dynamic exploration-exploitation trade-off using piecewise linear function
    exploration_weight = max(0, min(1, (max_nodes - total_unvisited) / max_nodes))

    # Locality factor: distance to destination
    locality = {}
    for node in unvisited_nodes:
        locality[node] = distance_matrix[node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Connectivity factor
        connectivity_factor = connectivity.get(node, 0) / (connectivity.get(destination_node, 1) + 1e-6)

        # Combined score with locality and exploration weight
        score = (exploration_weight * (-distance_to_node) +
                 (1 - exploration_weight) * connectivity_factor * (1 / (locality[node] + 1e-6)))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
