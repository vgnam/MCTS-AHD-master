def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)

        # Dynamic penalty for nodes too close to current node
        penalty = 0.5 * (1.0 - (distance_to_node / max(distance_matrix[current_node]))) if unvisited_count > 1 else 0.0

        # Bonus for nodes that connect well to destination path
        bonus = 0.7 * (1.0 - (distance_matrix[node][destination_node] / max(distance_matrix[node]))) if unvisited_count > 2 else 0.0

        # Weight factor adjusts more aggressively
        weight_factor = 1.0 + (1.0 * (unvisited_count - 1) / (len(distance_matrix) - 2)) if unvisited_count > 1 else 2.0

        score = weight_factor * (distance_to_node - penalty) + 0.2 * avg_distance - bonus

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
