def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.7 * (num_unvisited / (num_unvisited + 1))
    weight_future = 0.3 * (1 - num_unvisited / (num_unvisited + 1))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / max(1, num_unvisited - 1)
        max_future_distance = max(future_distances) if future_distances else 0
        penalty = 0.5 * (distance_matrix[node][destination_node] / (avg_future_distance + 1e-6)) if distance_matrix[node][destination_node] < avg_future_distance else 0
        score = weight_proximity * distance_to_node + weight_future * (0.6 * avg_future_distance + 0.4 * max_future_distance) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
