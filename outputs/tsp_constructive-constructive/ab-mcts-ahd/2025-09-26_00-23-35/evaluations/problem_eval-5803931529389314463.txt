def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 0.5 + 0.2 * (unvisited_count / len(distance_matrix))

        # Penalize nodes with high average distance to other unvisited nodes
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / unvisited_count
        penalty = 0.3 * avg_distance

        score = distance_to_node + weight * distance_to_destination + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
