def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate dynamic weights based on tour compactness
    if num_unvisited == total_nodes - 1:
        # Early stages: prioritize proximity
        weight_proximity = 0.6
        weight_future = 0.2
        weight_compactness = 0.2
    else:
        # Later stages: balance proximity and future efficiency
        weight_proximity = 0.4
        weight_future = 0.4
        weight_compactness = 0.2

    # Calculate current tour compactness (lower is better)
    current_tour_length = sum(distance_matrix[current_node][destination_node] for _ in range(total_nodes - num_unvisited))
    compactness = current_tour_length / (total_nodes - num_unvisited) if (total_nodes - num_unvisited) > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Calculate potential detour impact
        if num_unvisited > 1:
            potential_detour = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / avg_future_distance
        else:
            potential_detour = 0

        # Calculate penalty for revisiting (if applicable)
        penalty = 0.1 * (1 - (num_unvisited / total_nodes)) if node in unvisited_nodes else 0

        # Calculate score with dynamic weights
        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance +
                 weight_compactness * compactness +
                 0.1 * potential_detour +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
