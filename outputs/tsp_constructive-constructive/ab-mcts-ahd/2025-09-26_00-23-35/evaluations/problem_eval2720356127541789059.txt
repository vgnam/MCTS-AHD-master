def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Dynamic weight adjustment based on unvisited nodes density
        if num_unvisited > 2:
            weight_proximity = 0.6
            weight_destination = 0.3
            weight_centrality = 0.1
        else:
            weight_proximity = 0.8
            weight_destination = 0.1
            weight_centrality = 0.1

        # Penalty for nodes too far from destination
        penalty = 1.0 if distance_to_destination > 1.5 * sum(distance_matrix[destination_node][n] for n in unvisited_nodes) / max(1, num_unvisited) else 0.0

        score = (weight_proximity * distance_to_node +
                 weight_destination * distance_to_destination +
                 weight_centrality * avg_distance +
                 penalty * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
