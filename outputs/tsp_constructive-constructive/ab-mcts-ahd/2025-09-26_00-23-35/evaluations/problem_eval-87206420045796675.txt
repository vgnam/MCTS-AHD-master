def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Non-linear weight adjustment using sigmoid function
        sigmoid_input = (remaining_nodes / (remaining_nodes + 1)) - 0.5
        weight_current = 1 / (1 + math.exp(-10 * sigmoid_input))
        weight_destination = 1 - weight_current

        # Incorporate average distance for adaptive selection
        distance_ratio = distance_to_current / avg_distance
        weighted_distance = (weight_current * distance_to_current + weight_destination * distance_to_destination) * (1 + 0.5 * distance_ratio)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
