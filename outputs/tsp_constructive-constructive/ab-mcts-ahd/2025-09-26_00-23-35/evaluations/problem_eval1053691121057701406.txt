def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # including current node

    for node in unvisited_nodes:
        # Proximity component
        direct_distance = distance_matrix[current_node][node]

        # Future connectivity component
        connectivity_score = sum(1 / distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Centrality component
        centrality = sum(1 / distance_matrix[node][n] for n in unvisited_nodes) / total_nodes

        # Adaptive weights
        proximity_weight = 0.5 * (remaining_nodes / total_nodes) ** 2
        connectivity_weight = 0.3 * (1 - (remaining_nodes / total_nodes))
        centrality_weight = 0.2

        # Distance penalty
        penalty_factor = 0.2 * (1 - (remaining_nodes / total_nodes)) if remaining_nodes > 2 else 0
        penalty = penalty_factor * distance_matrix[node][destination_node]

        # Combined score
        score = (proximity_weight * direct_distance +
                 connectivity_weight * (1 / connectivity_score) +
                 centrality_weight * centrality +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
