import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        score = distance_to_node + weight * distance_to_destination

        # Add penalty for revisiting nodes (if applicable)
        if node in unvisited_nodes and current_node in unvisited_nodes:
            score += 0.1 * distance_matrix[current_node][node]

        if score < best_score:
            best_score = score
            next_node = node

    # Probabilistic selection to avoid local optima
    if random.random() < 0.2 and remaining_nodes > 2:
        candidates = [node for node in unvisited_nodes if node != next_node]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
