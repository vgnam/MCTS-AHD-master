def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Precompute historical penalties (simplified for demonstration)
    historical_penalties = {node: sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Node centrality: average distance to all unvisited nodes (higher is better)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weighting with historical penalty adjustment
        weight_immediate = 0.7 if remaining_nodes <= 2 else 0.4
        weight_future = 0.3 if remaining_nodes <= 2 else 0.5
        weight_destination = 0.2 if remaining_nodes <= 2 else 0.3
        weight_centrality = 0.1 if remaining_nodes <= 2 else 0.4

        # Penalize nodes with high historical costs
        penalty = historical_penalties[node] * (1.0 - (remaining_nodes / len(unvisited_nodes)))

        score = (weight_immediate * distance_to_node +
                 weight_future * avg_future_distance +
                 weight_destination * distance_to_destination +
                 weight_centrality * (1 / centrality) +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
