def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Non-linear weight adjustment
    weight_current = 0.8 * (1 - math.exp(-remaining_nodes / 2))
    weight_destination = 0.2 * math.log(remaining_nodes + 1)

    # Calculate weighted distances and select node with smallest distance
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weighted_distance = weight_current * distance_to_current + weight_destination * distance_to_destination

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    # Add probabilistic selection to introduce randomness
    if random.random() < 0.1 and len(unvisited_nodes) > 2:
        next_node = random.choice(list(unvisited_nodes))

    return next_node
