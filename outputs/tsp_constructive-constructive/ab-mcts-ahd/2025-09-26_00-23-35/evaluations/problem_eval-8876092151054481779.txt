import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    # Dynamic weights (60% proximity early, 40% future efficiency later)
    weight_proximity = 0.6 * (0.7 + 0.3 * (total_unvisited / (total_unvisited + 1)))
    weight_future = 0.4 * (0.3 * (1 - (total_unvisited / (total_unvisited + 1))))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Score with dynamic weights, destination proximity, and centrality penalty
        score = weight_proximity * distance_to_node + weight_future * avg_future_distance + 0.3 * distance_to_destination - 0.5 * avg_future_distance

        if score < best_score:
            best_score = score
            next_node = node

    # 25% chance to select destination node if not already selected
    if random.random() < 0.25 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
