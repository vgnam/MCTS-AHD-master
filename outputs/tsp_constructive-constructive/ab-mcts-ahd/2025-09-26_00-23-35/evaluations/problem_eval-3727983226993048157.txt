def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining unvisited nodes
        weight_local = 0.7 + 0.1 * (total_unvisited / len(unvisited_nodes))
        weight_global = 0.3 - 0.1 * (total_unvisited / len(unvisited_nodes))

        # Normalized score with adaptive weights
        normalized_distance = distance_to_node / max(distance_matrix[current_node])
        normalized_progress = distance_to_destination / max(distance_matrix[node])

        score = weight_local * (1 / (1 + normalized_distance)) + weight_global * (1 - normalized_progress)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
