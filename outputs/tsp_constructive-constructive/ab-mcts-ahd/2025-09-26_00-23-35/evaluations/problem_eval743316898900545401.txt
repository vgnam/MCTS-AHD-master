import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    max_distance = -float('inf')
    candidates = []

    # Calculate centrality for each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Dynamic temperature based on path progress
    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.7 * (remaining_nodes / (remaining_nodes + 1)))

    # Find farthest node from current
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance > max_distance:
            max_distance = distance
            next_node = node

    # Harmonic mean of distances for bias calculation
    dest_distance = distance_matrix[current_node][destination_node]
    harmonic_mean = 2 * max_distance * dest_distance / (max_distance + dest_distance + 1e-6) if dest_distance > 0 else max_distance

    # Dynamic centrality threshold
    centrality_threshold = 0.3 + 0.7 * (1.0 - (1.0 / remaining_nodes))

    # Adjust bias based on centrality and temperature
    if next_node != destination_node and remaining_nodes > 1:
        centrality_factor = centrality.get(next_node, 0) / (centrality.get(destination_node, 1) + 1e-6)
        reroute_prob = temperature * (centrality_factor / centrality_threshold)

        if (centrality.get(next_node, 0) > centrality_threshold and random.random() < reroute_prob) or \
           (harmonic_mean < 0.8 * max_distance and random.random() < temperature):
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    return next_node
