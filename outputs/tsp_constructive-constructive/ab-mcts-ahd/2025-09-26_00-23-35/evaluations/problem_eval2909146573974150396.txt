def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)
        density_weight = 0.6 * (1 - 1 / (1 + 0.2 * unvisited_count))  # Dynamic weight based on remaining nodes
        destination_factor = 0.3 * distance_matrix[node][destination_node] * (1 - 1 / (1 + unvisited_count))  # Adjusted by remaining steps

        # Novelty: Centrality factor (inverse of average distance to unvisited nodes)
        centrality_factor = 0.1 * (1 / (1 + avg_distance))

        score = distance_to_node + density_weight * avg_distance + destination_factor - centrality_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
