def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / max(1, len(future_distances))
        distance_to_destination = distance_matrix[node][destination_node]

        phase = remaining_nodes / total_nodes
        weight_immediate = 1 / (1 + math.exp(-10 * (phase - 0.5)))
        weight_future = 1 - weight_immediate

        penalty = 0.2 * (distance_to_destination ** 1.5) / (avg_future_distance + 1)

        score = weight_immediate * distance_to_node + weight_future * avg_future_distance + penalty
        scores.append((node, score))

    if not scores:
        return destination_node

    scores.sort(key=lambda x: x[1])
    top_nodes = scores[:max(1, len(scores) // 3)]
    probabilities = [math.exp(-s[1]) for s in top_nodes]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([n[0] for n in top_nodes], weights=probabilities, k=1)[0]

    return next_node
