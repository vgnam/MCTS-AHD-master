def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weights (70% proximity early, 30% future efficiency later)
    weight_proximity = 0.7 * (0.6 + 0.4 * (num_unvisited / (num_unvisited + 1)))
    weight_future = 0.3 * (0.4 * (1 - (num_unvisited / (num_unvisited + 1))))

    # Centrality of current node
    current_centrality = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Centrality of candidate node
        node_centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Bias factor combining distance, centrality, and destination proximity
        bias_factor = (distance_to_node / (distance_matrix[current_node][destination_node] + 1e-6)) * (1 + node_centrality / (current_centrality + 1e-6)) * (1 - distance_to_destination / (sum(distance_matrix[destination_node]) + 1e-6))

        # Score with dynamic weights, centrality bias, and destination proximity
        score = weight_proximity * distance_to_node + weight_future * avg_future_distance + 0.2 * distance_to_destination
        score *= (1 + 0.15 * bias_factor)

        if score < best_score:
            best_score = score
            next_node = node

    # 25% chance to select destination node if not already selected
    if random.random() < 0.25 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
