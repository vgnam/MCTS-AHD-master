def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Adaptive weights based on tour progress
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    weight_proximity = 1.0 - progress_factor
    weight_future = progress_factor
    weight_centrality = 0.3 * (1 - progress_factor)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality measure: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Dynamic future potential
        future_potential = distance_to_destination * (remaining_nodes / total_nodes)

        # Probabilistic component
        random_factor = 0.1 * (distance_matrix[current_node][node] / max(distance_matrix[current_node]))

        # Combined score
        score = (weight_proximity * distance_to_node +
                weight_future * future_potential -
                weight_centrality * centrality +
                random_factor)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
