def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)

        # Dynamic weights based on unvisited nodes density
        proximity_weight = 0.5 + 0.1 * (unvisited_count / len(distance_matrix))
        destination_weight = 0.3 + 0.1 * (1 - unvisited_count / len(distance_matrix))
        future_weight = 0.2

        # Penalty for potential dead-ends (low connectivity to unvisited nodes)
        connectivity_penalty = 1.0 if unvisited_count <= 2 else (1.0 - len(unvisited_nodes) / unvisited_count)

        score = (proximity_weight * distance_to_node +
                 destination_weight * distance_to_destination +
                 future_weight * avg_future_distance) * connectivity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
