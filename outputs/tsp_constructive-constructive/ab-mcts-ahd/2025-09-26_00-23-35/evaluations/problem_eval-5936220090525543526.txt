def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights with exploration bonus and greedy penalty
    proximity_weight = 0.5 * (1 - (num_unvisited / total_nodes))**2
    future_weight = 0.5 * (1 - proximity_weight)
    exploration_bonus = 0.2 * (num_unvisited / total_nodes)
    greedy_penalty = 0.1 * (1 - (num_unvisited / total_nodes))**3

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Score calculation with novel components
        score = (proximity_weight * distance_to_node +
                 future_weight * avg_future_distance +
                 exploration_bonus * avg_future_distance -
                 greedy_penalty * distance_to_node)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
