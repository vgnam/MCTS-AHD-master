def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    base_weight = 0.5 + 0.5 * (1 - num_unvisited / (num_unvisited + 1)) ** 2
    weight_proximity = base_weight * 0.9
    weight_future = (1 - base_weight) * 0.9

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / max(1, num_unvisited - 1)
        distance_decay = 1 / (1 + 0.1 * distance_to_node)
        connectivity_penalty = 0.3 * (sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited)
        penalty = 0.4 if distance_matrix[node][destination_node] < (avg_future_distance + connectivity_penalty) else 0
        score = (weight_proximity * distance_to_node * distance_decay +
                weight_future * avg_future_distance + penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
