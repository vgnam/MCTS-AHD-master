def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    base_weight_proximity = 0.5
    base_weight_centrality = 0.3
    base_weight_connectivity = 0.2
    dynamic_factor = len(unvisited_nodes) / max(1, len(distance_matrix))
    weight_proximity = base_weight_proximity * dynamic_factor
    weight_centrality = base_weight_centrality * (1 - dynamic_factor)
    weight_connectivity = base_weight_connectivity * (1 - dynamic_factor)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        centrality_score = avg_distance_to_dest
        distance_to_dest = distance_matrix[node][destination_node]

        connectivity_score = sum(distance_matrix[current_node][n] + distance_matrix[n][node] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        penalty = 0.5 if distance_to_dest < 0.3 * max(distance_matrix[node][n] for n in unvisited_nodes) else 0

        score = -weight_proximity * distance_to_node + weight_centrality * centrality_score + weight_connectivity * connectivity_score - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
