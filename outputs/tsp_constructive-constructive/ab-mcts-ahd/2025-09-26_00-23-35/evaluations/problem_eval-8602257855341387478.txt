def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        weight_distance = 2.0 - (1.0 / (remaining_nodes + 1))
        weight_dest = 1.0 + (1.0 / (remaining_nodes + 1))

        # Penalize nodes that are too far from others to avoid isolation
        isolation_penalty = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                isolation_penalty += distance_matrix[node][other_node]

        isolation_penalty /= (remaining_nodes - 1) if remaining_nodes > 1 else 1.0
        score = (-weight_distance * distance_to_node) + (weight_dest * distance_to_dest) - (0.5 * isolation_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
