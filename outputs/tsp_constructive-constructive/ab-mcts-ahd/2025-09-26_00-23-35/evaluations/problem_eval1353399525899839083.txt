def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate connectivity score: average distance to other nodes
        connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes))

        # Adaptive weights with progress-based adjustment
        progress = 1 - (remaining_nodes / total_nodes)
        weight_immediate = 0.5 + 0.3 * progress
        weight_future = 0.3 - 0.2 * progress
        weight_connectivity = 0.2 + 0.1 * progress

        # Novel penalty for nodes that disrupt local clustering
        local_penalty = 0 if len(unvisited_nodes) <= 2 else 0.1 * (distance_to_node - connectivity)

        score = (weight_immediate * distance_to_node +
                 weight_future * avg_future_distance +
                 weight_connectivity * connectivity -
                 local_penalty +
                 0.2 * distance_to_destination)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
