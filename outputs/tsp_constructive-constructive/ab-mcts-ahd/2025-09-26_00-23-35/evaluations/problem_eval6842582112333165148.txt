def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    node_frequency = {node: sum(1 for n in unvisited_nodes if n == node) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))

        distance_weight = 1.0 - (0.3 * (remaining_nodes / len(unvisited_nodes)))
        centrality_weight = 0.4 + (0.5 * (remaining_nodes / len(unvisited_nodes)))
        variance_penalty = 0.2 * (variance / (avg_distance + 1e-6))
        exploration_bonus = 1.0 / (1.0 + node_frequency.get(node, 0))

        score = (-distance_weight * distance_to_node +
                centrality_weight * avg_distance -
                variance_penalty * distance_to_node +
                exploration_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
