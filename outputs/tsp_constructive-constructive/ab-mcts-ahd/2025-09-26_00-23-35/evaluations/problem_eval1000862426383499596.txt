import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weights (proximity early, centrality later)
    weight_proximity = 0.6 * (num_unvisited / (num_unvisited + 1)) + 0.4
    weight_centrality = 0.4 * (num_unvisited / (num_unvisited + 1)) + 0.6

    # Calculate centrality for each node (average distance minus variance)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance) ** 2 for d in distances) / max(1, len(distances))
        centrality[node] = avg_distance - variance

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        centrality_score = centrality[node]

        # Penalty for outliers (nodes with extreme distance to current node)
        penalty = max(0, distance_to_node - 2 * centrality_score)

        # Score with dynamic weights and penalty
        score = -weight_proximity * distance_to_node + weight_centrality * centrality_score - penalty

        if score > best_score:
            best_score = score
            next_node = node

    # 25% chance to select destination node if not already selected
    if random.random() < 0.25 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
