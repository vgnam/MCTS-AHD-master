def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    remaining_distance = distance_matrix[current_node][destination_node]
    total_unvisited = len(unvisited_nodes)
    avg_distance = remaining_distance / (total_unvisited + 1) if total_unvisited > 0 else 0

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining distance
        weight_factor = 1 / (1 + math.exp(-0.1 * (remaining_distance - avg_distance)))
        weight_short_term = 1.0 + 0.4 * weight_factor
        weight_long_term = 1.0 - 0.4 * weight_factor

        # Penalty for nodes too close to current node
        penalty = max(0, (avg_distance - distance_to_node) / avg_distance) if avg_distance > 0 else 0

        score = (weight_short_term * distance_to_node + weight_long_term * distance_to_destination) * (1 + penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
