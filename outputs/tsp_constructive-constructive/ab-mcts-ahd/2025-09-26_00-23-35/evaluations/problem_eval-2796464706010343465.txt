def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = 0.8 * (1 - remaining_nodes / total_nodes)  # Higher weight as more nodes are visited

        # Penalize nodes that are too far from current node or destination
        if distance_to_node > 2 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]):
            penalty = 0.5 * distance_to_node
        elif distance_to_destination > 1.2 * sum(distance_matrix[node]) / len(distance_matrix[node]):
            penalty = 0.2 * distance_to_destination
        else:
            penalty = 0

        score = distance_to_node + weight * distance_to_destination + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
