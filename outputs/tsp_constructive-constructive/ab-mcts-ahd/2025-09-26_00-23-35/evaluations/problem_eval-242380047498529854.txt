def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    # Calculate exploration factor
    exploration_factor = (remaining_nodes / total_nodes) ** 2

    for node in unvisited_nodes:
        # Immediate distance component
        distance_to_node = distance_matrix[current_node][node]

        # Future connectivity component (considering node's centrality)
        centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node)
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Destination proximity component
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights
        weight_immediate = 0.5 + 0.3 * exploration_factor
        weight_centrality = 0.3 - 0.1 * exploration_factor
        weight_destination = 0.2 + 0.2 * (1 - exploration_factor)

        # Calculate score with non-linear transformations
        score = (weight_immediate * (1 / (distance_to_node + 1e-6)) +
                 weight_centrality * centrality +
                 weight_destination * (1 / (distance_to_destination + 1e-6)))

        # Add stochastic element
        score *= (1 + 0.2 * exploration_factor * (0.5 - random.random()))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
