def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Precompute node frequencies in the path (simplified for this example)
    node_frequency = {node: sum(1 for n in unvisited_nodes if n == node) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustments
        distance_weight = 1.0 - (0.2 * (remaining_nodes / len(unvisited_nodes)))
        centrality_weight = 0.5 + (0.3 * (remaining_nodes / len(unvisited_nodes)))
        detour_weight = 0.1 * (remaining_nodes / len(unvisited_nodes))

        # Novel exploration bonus: rewards less frequent nodes
        exploration_bonus = 1.0 / (1.0 + node_frequency.get(node, 0))

        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Multi-objective scoring
        score = (distance_weight * distance_to_node +
                 centrality_weight * avg_distance +
                 detour_weight * detour_cost +
                 exploration_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
