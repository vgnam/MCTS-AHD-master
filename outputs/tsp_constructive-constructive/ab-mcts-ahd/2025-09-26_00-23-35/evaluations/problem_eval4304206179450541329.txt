def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, total_unvisited - 1)
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        proximity_weight = 2.0 - (0.5 * (total_unvisited / len(distance_matrix)))
        centrality_weight = 1.0 + (0.2 * (total_unvisited / len(distance_matrix)))
        indirect_weight = 0.5 + (0.3 * (total_unvisited / len(distance_matrix)))

        score = (-proximity_weight * distance_to_node) + (centrality_weight * centrality) + (indirect_weight * distance_to_dest)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
