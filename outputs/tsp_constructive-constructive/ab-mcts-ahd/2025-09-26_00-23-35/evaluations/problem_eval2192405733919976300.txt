def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes))
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        detour_weight = 0.1 + 0.2 * (1 - remaining_nodes / len(distance_matrix))
        centrality_weight = 0.4 + 0.2 * (remaining_nodes / len(distance_matrix))
        score = 0.7 * (1 / distance_to_node) + centrality_weight * centrality + detour_weight * detour_cost

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
