def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    proximity_weight = 0.7 * (num_unvisited / (num_unvisited + 1)) + 0.3
    centrality_weight = 0.3 + 0.4 * (1 - num_unvisited / (num_unvisited + 1))
    novelty_weight = 0.5 * (1 - num_unvisited / (num_unvisited + 1)) + 0.5

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance_to_all = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)
        avg_distance_to_unvisited = sum(distances_to_others) / max(1, len(distances_to_others))
        variance = sum((d - avg_distance_to_unvisited) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))

        centrality_score = (avg_distance_to_all - 0.3 * variance) * (1 + 0.2 * (distance_to_dest / max(1, distance_matrix[current_node][destination_node])))
        novelty_penalty = variance * novelty_weight * (1 + 0.1 * (distance_to_dest / max(1, distance_matrix[current_node][destination_node])))

        score = -proximity_weight * distance_to_node + centrality_weight * centrality_score - novelty_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
