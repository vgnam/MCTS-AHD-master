def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weights with exponential decay for proximity
    weight_proximity = 0.7 * np.exp(-0.5 * (remaining_nodes / len(unvisited_nodes)))
    weight_future = 0.3 * (1 - weight_proximity)

    # Calculate betweenness centrality for each node
    betweenness = {}
    for node in unvisited_nodes:
        betweenness[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

    # Normalize betweenness scores
    max_betweenness = max(betweenness.values()) if betweenness else 1
    normalized_betweenness = {k: v / max_betweenness for k, v in betweenness.items()}

    # Calculate scores with probabilistic selection
    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Centrality reward based on betweenness
        centrality_reward = 0.5 * normalized_betweenness[node]

        # Penalty for distant nodes
        penalty = 0.3 * distance_matrix[node][destination_node] if remaining_nodes <= 2 else 0

        # Combined score
        score = (weight_proximity * distance_to_node +
                 weight_future * future_distance +
                 centrality_reward -
                 penalty)
        scores.append(score)

    # Probabilistic selection based on softmax
    exp_scores = np.exp(scores - np.max(scores))
    probs = exp_scores / np.sum(exp_scores)
    next_node = np.random.choice(unvisited_nodes, p=probs)

    return next_node
