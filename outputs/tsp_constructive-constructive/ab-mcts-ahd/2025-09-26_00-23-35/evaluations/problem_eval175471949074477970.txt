def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining - 1)
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight_proximity = 0.5 + 0.3 * (remaining / total_nodes)
        weight_efficiency = 0.3 - 0.1 * (remaining / total_nodes)
        weight_destination = 0.2 * (1 - (remaining / total_nodes))

        # Penalize nodes farther from destination early on, emphasize efficiency later
        score = (weight_proximity * distance_to_node +
                weight_efficiency * avg_future_distance +
                weight_destination * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
