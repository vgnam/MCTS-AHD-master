importance (weight increases from 0.3 to 0.6), penalizing outliers to avoid detours.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][destination_node]) / max(1, len(unvisited_nodes) - 1)
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        weight_proximity = 0.7 - 0.3 * (remaining_nodes / total_nodes)
        weight_connectivity = 0.3 + 0.3 * (remaining_nodes / total_nodes)
        penalty = max(0, distance_to_node - 2 * avg_distance)

        score = distance_to_node + weight_proximity * avg_distance + weight_connectivity * (1 - connectivity_score) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
