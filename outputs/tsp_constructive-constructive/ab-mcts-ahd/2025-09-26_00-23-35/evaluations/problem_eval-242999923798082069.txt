def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    dynamic_factor = num_unvisited / max(1, len(distance_matrix))
    weight_proximity = 0.7 * (0.6 + 0.4 * dynamic_factor)
    weight_centrality = 0.3 * (0.4 + 0.6 * dynamic_factor)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_dest - variance
        distance_to_dest = distance_matrix[node][destination_node]

        penalty = 0.5 if distance_to_dest < 0.3 * max(distance_matrix[node][n] for n in unvisited_nodes) else 0
        score = -weight_proximity * distance_to_node + weight_centrality * centrality_score - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
