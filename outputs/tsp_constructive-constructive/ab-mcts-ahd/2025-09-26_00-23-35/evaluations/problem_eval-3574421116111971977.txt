importance later, while also incorporating exploration bonuses to balance path diversity and efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    node_frequency = {node: sum(1 for n in unvisited_nodes if n == node) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes))
        future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        proximity_weight = 2.0 * (1 - 0.5 * (remaining_nodes / len(distance_matrix)))
        connectivity_weight = 1.5 * (1 - future_cost / (avg_distance_to_dest + 1e-6))
        exploration_weight = 0.3 * (remaining_nodes / len(distance_matrix))

        exploration_bonus = 1.0 / (1.0 + node_frequency.get(node, 0))

        score = (-proximity_weight * distance_to_node +
                 connectivity_weight * (1 / (future_cost + 1e-6)) +
                 exploration_weight * exploration_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
