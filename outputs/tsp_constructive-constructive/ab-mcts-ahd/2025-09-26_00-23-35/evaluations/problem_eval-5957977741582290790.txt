import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        progress = 1 - (remaining_nodes / total_nodes)
        weight_immediate = 1 / (1 + math.exp(-10 * (progress - 0.5)))
        weight_future = 1 - weight_immediate
        penalty = 0.2 * (1 - math.exp(-0.1 * distance_to_destination))

        # Score calculation with probabilistic element
        score = (weight_immediate * (-distance_to_node) + weight_future * (-avg_future_distance)) * (1 - penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
