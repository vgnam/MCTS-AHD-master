def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustment
    weight_proximity = 0.4 * (1 - (num_unvisited / total_nodes)) + 0.3
    weight_future = 0.4 * (num_unvisited / total_nodes) + 0.3
    weight_diversity = 0.3

    # Track node visit frequency (simplified for example)
    visit_counts = {node: 1 if node == current_node else 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Diversity term: encourages less visited nodes
        diversity_term = 1 / (1 + visit_counts.get(node, 0))

        # Penalty for revisits (not needed here as we're working with unvisited nodes)
        penalty = 0

        # Novel score calculation
        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance +
                 weight_diversity * diversity_term)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
