import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weights (60% proximity early, 40% future efficiency later)
    weight_proximity = 0.6 * (0.5 + 0.5 * (num_unvisited / (num_unvisited + 1)))
    weight_future = 0.4 * (0.5 * (1 - (num_unvisited / (num_unvisited + 1))))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Centrality penalty (higher average distance is penalized more)
        centrality_penalty = -0.6 * avg_future_distance

        # Score with dynamic weights, destination proximity, and centrality penalty
        score = weight_proximity * distance_to_node + 0.4 * distance_to_destination + weight_future * avg_future_distance + centrality_penalty

        if score < best_score:
            best_score = score
            next_node = node

    # 30% chance to select destination node if not already selected
    if random.random() < 0.3 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
