importance and rewarding central nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Dynamic weight for future distance (decreases as more nodes are visited)
        weight_future = 0.5 / (1 + remaining_nodes)

        # Centrality reward (favors nodes with lower average future distance)
        centrality_reward = -0.3 * avg_future_distance

        # Additional proximity and destination balance from No.1
        proximity_weight = 2.0
        destination_weight = 0.5

        # Hybrid score combining No.1 and No.2 elements
        score = proximity_weight * distance_to_node + weight_future * distance_to_destination + centrality_reward + destination_weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
