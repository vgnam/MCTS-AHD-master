def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_future_distance) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))

        if remaining_nodes > len(unvisited_nodes) / 2:
            weight_immediate = 0.7
            weight_future = 0.3
        else:
            weight_immediate = 0.5
            weight_future = 0.5

        centrality_weight = 1.2 * (1 - variance / (avg_future_distance + 1e-6))
        score = weight_immediate * distance_to_node + weight_future * (centrality_weight * avg_future_distance)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
