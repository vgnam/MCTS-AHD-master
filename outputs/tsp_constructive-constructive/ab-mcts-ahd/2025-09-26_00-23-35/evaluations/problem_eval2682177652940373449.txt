def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    remaining_nodes = len(unvisited_nodes)
    centroid = sum(unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    next_node = None
    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / max(1, len(future_distances))
        destination_penalty = distance_matrix[node][destination_node] * 0.2

        if remaining_nodes <= 3:
            weight_immediate = 0.8
            weight_future = 0.2
        else:
            weight_immediate = 0.6
            weight_future = 0.4

        centroid_penalty = abs(node - centroid) * 0.1
        score = (weight_immediate * distance_to_node +
                weight_future * avg_future_distance +
                destination_penalty +
                centroid_penalty)

        candidates.append((node, score))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        selected = candidates[0]
        if len(candidates) > 1 and remaining_nodes > 2:
            selected = candidates[1] if random.random() < 0.2 else selected
        next_node = selected[0]

    return next_node
