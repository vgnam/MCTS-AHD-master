def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Dynamic weight for proximity (decays as more nodes are visited)
        weight_proximity = 0.7 * (1 - remaining_nodes / len(unvisited_nodes + [current_node]))

        # Weighted future distance with logarithmic emphasis
        weight_future = 0.4 * (1 + math.log(remaining_nodes + 1))

        # Centrality scaling (increases as problem nears completion)
        centrality_scale = 0.5 * (1 - 1 / (remaining_nodes + 1))

        # Score combines weighted proximity, future distance, and scaled centrality
        score = weight_proximity * distance_to_node + weight_future * distance_to_destination + centrality_scale * avg_future_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
