def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        dynamic_weight = 0.1 * (remaining_nodes / len(unvisited_nodes))  # Adjusts based on remaining nodes

        score = (0.5 * distance_to_node +
                 0.2 * distance_to_destination +
                 0.2 * avg_future_distance +
                 dynamic_weight * avg_future_distance)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
