import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    if remaining_nodes == 0:
        return destination_node

    ratio = remaining_nodes / total_nodes
    # Sigmoid function to smooth weight transitions
    weight_current = 1 / (1 + math.exp(-10 * (ratio - 0.5)))
    weight_destination = 1 - weight_current

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalty for nodes too far from the current path
        penalty = 0.1 * max(0, distance_to_current - 2 * distance_matrix[current_node][destination_node])

        weighted_distance = (weight_current * distance_to_current +
                            weight_destination * distance_to_destination +
                            penalty)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
