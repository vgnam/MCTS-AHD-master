def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = num_unvisited + 1  # +1 for the current node

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        direct_distance = distance_matrix[current_node][destination_node]

        # Normalized distance ratio to adapt weights
        normalized_ratio = distance_to_node / (direct_distance + 1e-6)
        weight_proximity = 0.5 * (1 - normalized_ratio)
        weight_future = 0.5 * normalized_ratio

        # Penalize nodes that deviate too much from the direct path
        angular_penalty = 1.0
        if distance_to_node > 1.5 * direct_distance:
            angular_penalty = 1.5
        elif distance_to_node > direct_distance:
            angular_penalty = 1.2

        score = weight_proximity * distance_to_node + weight_future * distance_to_destination * angular_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
