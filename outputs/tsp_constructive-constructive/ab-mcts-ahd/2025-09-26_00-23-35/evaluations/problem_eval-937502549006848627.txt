importance (starting at 0.4 and increasing to 0.6 as nodes remain).}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        weight = 0.6 if remaining_nodes <= 3 else 0.4
        score = 0.4 * (1 / distance_to_node) + weight * (1 / avg_distance) + 0.6 * (1 / (1 + detour_cost))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
