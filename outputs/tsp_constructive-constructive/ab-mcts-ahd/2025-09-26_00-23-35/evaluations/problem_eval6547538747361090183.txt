def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    progress_factor = 1 - remaining_ratio

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        dest_distance = distance_matrix[node][destination_node]

        geometric_median = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        deviation_penalty = 0.15 * (dest_distance - geometric_median) if dest_distance > geometric_median else 0

        dynamic_weight = 0.4 * (1 - progress_factor) + 0.3 * progress_factor
        score = distance_to_node + dynamic_weight * avg_distance + deviation_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
