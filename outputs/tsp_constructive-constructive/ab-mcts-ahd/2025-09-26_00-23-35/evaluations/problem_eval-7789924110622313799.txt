def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weights with non-linear adjustment
    weight_proximity = 0.5 * (0.6 + 0.4 * (remaining_nodes / (remaining_nodes + 2)))
    weight_future = 0.5 * (0.4 * (1 - (remaining_nodes / (remaining_nodes + 2))))

    # Centrality factor scaling with remaining nodes
    centrality_factor = 0.4 * (1 - (remaining_nodes / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Future efficiency multiplier based on node degree
        node_degree = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 2 * avg_future_distance)
        future_multiplier = 1 - (0.2 * (node_degree / max(1, remaining_nodes - 1)))

        # Adaptive distance penalty based on current path length
        penalty = 0.3 * distance_matrix[node][destination_node] / (1 + len(unvisited_nodes)) if remaining_nodes <= 4 else 0

        # Centrality reward with dynamic factor
        centrality_reward = -centrality_factor * avg_future_distance

        # Score with dynamic weights, multipliers, and adaptive penalty
        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance * future_multiplier +
                 penalty +
                 centrality_reward)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
