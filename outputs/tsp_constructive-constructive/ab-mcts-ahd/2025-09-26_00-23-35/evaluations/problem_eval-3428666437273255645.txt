def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    temperature = max(0.1, 0.5 * (remaining_nodes / total_nodes))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustment with temperature
        weight_immediate = max(0.3, 1.0 * temperature)
        weight_long_term = 1.0 - weight_immediate
        weight_centrality = 0.5 * (1.0 - temperature)

        score = (weight_immediate * distance_to_node +
                 weight_long_term * distance_to_destination +
                 weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
