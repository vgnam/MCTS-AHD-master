def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if num_unvisited > 1:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1)
            max_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            centrality = 0.5 * avg_distance + 0.5 * max_distance
        else:
            centrality = 0

        dynamic_weight = 0.2 + 0.1 * (num_unvisited / len(distance_matrix))
        normalized_destination = distance_to_destination / (sum(distance_matrix[node]) + 1e-6)

        score = distance_to_node + dynamic_weight * normalized_destination - 0.3 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
