importance of proximity to the next node and the average distance to the destination based on the remaining unvisited nodes, ensuring a balance between immediate gains and long-term efficiency. The algorithm calculates a score using a weighted combination of the current distance, the average distance to the destination, and a novelty factor that considers the number of remaining nodes, then selects the node with the highest score.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = distance_matrix[node][destination_node]
        novelty_factor = remaining_nodes / (distance_to_node + 1e-6)  # Avoid division by zero

        # Dynamic weights: prioritize distance_to_node as remaining nodes decrease
        proximity_weight = 2.0 * (remaining_nodes / len(unvisited_nodes)) if remaining_nodes > 0 else 1.0
        directness_weight = 1.0 * (1 - remaining_nodes / len(unvisited_nodes)) if remaining_nodes > 0 else 1.0

        score = -proximity_weight * distance_to_node + directness_weight * avg_distance_to_dest + 0.5 * novelty_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
