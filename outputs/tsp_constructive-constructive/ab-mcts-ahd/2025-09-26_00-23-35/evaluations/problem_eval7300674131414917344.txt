def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]

        if not distances_to_others:
            harmonic_mean = 0
        else:
            harmonic_mean = len(distances_to_others) / sum(1 / (d + 1e-6) for d in distances_to_others)

        node_degree = len(unvisited_nodes) - 1
        centrality_score = harmonic_mean * (1 + node_degree * 0.1)

        exploration_factor = math.log(num_unvisited + 1) / math.log(len(distance_matrix) + 1)
        proximity_score = -distance_to_node * (1 + exploration_factor)

        score = proximity_score + centrality_score

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
