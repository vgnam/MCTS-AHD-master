def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.6 * (0.7 + 0.3 * (num_unvisited / (num_unvisited + 1)))
    weight_connectivity = 0.3 * (0.3 + 0.7 * (1 - (num_unvisited / (num_unvisited + 1))))
    weight_destination = 0.1 * (1 - (num_unvisited / len(distance_matrix)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        connectivity_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        destination_bias = 1 / (distance_matrix[node][destination_node] + 1e-6) if destination_node is not None else 0
        revisit_penalty = 0.2 * (1 - (num_unvisited / len(distance_matrix))) if node in unvisited_nodes else 0
        score = (weight_proximity * distance_to_node +
                 weight_connectivity * (1 / connectivity_score) +
                 weight_destination * destination_bias +
                 revisit_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
