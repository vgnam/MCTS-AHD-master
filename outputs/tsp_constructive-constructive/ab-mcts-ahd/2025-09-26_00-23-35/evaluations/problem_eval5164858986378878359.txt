def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Track recent visits for path momentum
    recent_visits = unvisited_nodes[-5:] if len(unvisited_nodes) >= 5 else unvisited_nodes
    visit_frequency = {node: recent_visits.count(node) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Adaptive weight scaling
        distance_weight = 1.0 - (0.3 * (remaining_nodes / len(unvisited_nodes)))
        centrality_weight = 0.4 + (0.4 * (remaining_nodes / len(unvisited_nodes)))
        detour_weight = 0.2 * (remaining_nodes / len(unvisited_nodes))

        # Dynamic centrality metric
        centrality_metric = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Path momentum: penalize nodes recently visited
        momentum_penalty = 0.1 * visit_frequency.get(node, 0)

        # Novel exploration bonus with adaptive threshold
        exploration_threshold = 0.5 * (1 - (remaining_nodes / len(unvisited_nodes)))
        exploration_bonus = (1.0 / (1.0 + visit_frequency.get(node, 0))) if visit_frequency.get(node, 0) < exploration_threshold else 0

        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Refined scoring with path momentum
        score = (distance_weight * distance_to_node +
                 centrality_weight * centrality_metric +
                 detour_weight * detour_cost +
                 exploration_bonus -
                 momentum_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
