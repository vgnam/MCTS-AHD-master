def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic penalty based on remaining nodes ratio
        penalty_ratio = remaining_nodes / total_nodes
        penalty = 0.2 * distance_to_destination * penalty_ratio if remaining_nodes > 3 else 0

        # Centrality score when few nodes remain
        if remaining_nodes <= 3:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
            score = 0.6 * distance_to_node + 0.4 * centrality + penalty
        else:
            score = 0.5 * distance_to_node + 0.5 * avg_future_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
