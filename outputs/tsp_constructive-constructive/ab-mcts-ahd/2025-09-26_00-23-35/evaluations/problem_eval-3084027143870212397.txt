def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)

        # Dynamic weights based on remaining nodes and progress
        weight_distance = 1.0 + (0.5 * (unvisited_count - 1) / (total_nodes - 2)) if unvisited_count > 1 else 1.5
        weight_density = 0.5 / (1 + 0.1 * unvisited_count)
        weight_destination = 0.2 * (1.0 - (unvisited_count / total_nodes))

        score = (weight_distance * distance_to_node +
                 weight_density * avg_distance +
                 weight_destination * distance_matrix[node][destination_node])

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
