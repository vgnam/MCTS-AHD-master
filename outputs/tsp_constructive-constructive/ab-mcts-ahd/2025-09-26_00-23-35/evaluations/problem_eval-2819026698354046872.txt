def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Calculate average distance of unvisited nodes to destination
    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight combining remaining nodes and average distance
        weight = (1.0 / (1 + remaining_nodes)) * (1.0 + (distance_to_destination / avg_distance_to_dest))

        # Penalize nodes that are too far from current node
        penalty = max(0, (distance_to_node - avg_distance_to_dest) / avg_distance_to_dest)

        score = distance_to_node + weight * distance_to_destination + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
