importance, while penalizing revisits more aggressively as the search progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights with non-linear adjustment
    progress = (total_nodes - num_unvisited) / total_nodes
    weight_proximity = 0.5 * (1 - progress) + 0.2
    weight_future = 0.3 * progress + 0.5
    weight_centrality = 0.2 * (1 - progress)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Centrality measure: sum of distances to all other nodes
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes) if n != node) / (total_nodes - 1)

        # Average future distance to remaining unvisited nodes
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Dynamic penalty for revisits and centrality
        penalty = 0.3 * (1 - (num_unvisited / total_nodes)) + 0.1 * centrality / max(centrality for n in unvisited_nodes)

        # Combined score with centrality term
        score = (weight_proximity * distance_to_node +
                 weight_future * avg_future_distance +
                 weight_centrality * centrality +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
