def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        max_distance_to_others = max(distances_to_others) if distances_to_others else 0
        avg_distance_to_others = sum(distances_to_others) / max(1, len(distances_to_others))

        proximity_weight = 1.0 + (num_unvisited / len(distance_matrix)) * 1.0
        centrality_weight = 0.8 * (avg_distance_to_others / (max_distance_to_others + 1e-6))
        score = -proximity_weight * distance_to_node - centrality_weight * max_distance_to_others

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
