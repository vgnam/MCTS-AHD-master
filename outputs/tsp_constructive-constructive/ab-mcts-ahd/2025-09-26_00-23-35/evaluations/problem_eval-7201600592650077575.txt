import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    # Dynamic weights (60% proximity early, 40% future efficiency later)
    weight_proximity = 0.6 * (0.7 + 0.3 * (total_unvisited / (total_unvisited + 1)))
    weight_centrality = 0.4 * (0.3 * (1 - (total_unvisited / (total_unvisited + 1))))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        centrality_score = avg_distance_to_dest

        score = -weight_proximity * distance_to_node + weight_centrality * centrality_score

        if score > best_score:
            best_score = score
            next_node = node

    # 25% chance to select destination node if not already selected
    if random.random() < 0.25 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
