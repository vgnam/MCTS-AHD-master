def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Dynamic weight for centrality penalty (increases as tour progresses)
        centrality_weight = 0.2 * (1 - remaining_nodes / total_nodes)

        # Balance between current distance, destination distance, and centrality penalty
        score = distance_to_node + 0.4 * distance_to_destination + centrality_weight * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
