def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')

    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)

    centrality = {}
    variance = {}
    for node in unvisited_nodes:
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance = sum(distances_to_others) / max(1, len(distances_to_others))
        centrality[node] = avg_distance
        variance[node] = sum((d - avg_distance) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))

    weight_factor = 1.0 + (0.5 * (total_unvisited - 1) / (len(distance_matrix) - 2)) if total_unvisited > 1 else 1.5

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = centrality.get(node, 0)
        centrality_factor = centrality.get(node, 0) / (centrality.get(destination_node, 1) + 1e-6)
        variance_factor = 1.2 * (1 - variance.get(node, 0) / (avg_distance_to_dest + 1e-6))

        score = -weight_factor * distance_to_node + variance_factor * avg_distance_to_dest
        score *= (1.0 + centrality_factor * (1.0 / total_unvisited))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
