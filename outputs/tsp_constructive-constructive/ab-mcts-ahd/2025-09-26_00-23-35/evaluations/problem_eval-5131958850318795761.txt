def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Quadratic weight adjustment: prioritize short-term optimization initially, then long-term
        weight_current = 0.9 * ((remaining_nodes / (remaining_nodes + 1)) ** 2)
        weight_destination = 0.1 * (1 - ((remaining_nodes / (remaining_nodes + 1)) ** 2))
        weighted_distance = weight_current * distance_to_current + weight_destination * distance_to_destination

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
