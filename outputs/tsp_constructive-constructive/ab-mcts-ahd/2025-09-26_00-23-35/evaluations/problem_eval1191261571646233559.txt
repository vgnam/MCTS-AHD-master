def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality measure: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Convexity measure: angle between current->node and node->destination
        if remaining_nodes > 1:
            prev_node = current_node
            next_next_node = min(unvisited_nodes, key=lambda n: distance_matrix[node][n])
            vec1 = (distance_matrix[prev_node][node], 0)
            vec2 = (distance_matrix[node][next_next_node] * (distance_matrix[node][destination_node] / distance_matrix[prev_node][node]), 0)
            convexity = abs(vec1[0] * vec2[1] - vec1[1] * vec2[0]) / (distance_matrix[prev_node][node] * distance_matrix[node][next_next_node])
        else:
            convexity = 0

        # Dynamic weights based on centrality and convexity
        weight_immediate = 0.7 - 0.2 * (centrality / max(distance_to_node, 1))
        weight_future = 0.3 + 0.2 * (convexity / max(distance_to_node, 1))
        penalty = 0.1 * distance_to_destination * (1 + (remaining_nodes / total_nodes))

        score = weight_immediate * distance_to_node + weight_future * centrality - 0.5 * convexity + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
