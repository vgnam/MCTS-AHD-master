def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    phase = 1 - (len(unvisited_nodes) / total_nodes) if total_nodes > 0 else 0
    sigmoid_weight = 1 / (1 + math.exp(-10 * (phase - 0.5)))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        # Phase-aware weight balance
        local_weight = 0.6 + 0.4 * (1 - sigmoid_weight)
        global_weight = 0.4 + 0.6 * sigmoid_weight

        score = (local_weight * distance_to_node) + (global_weight * distance_to_destination) + (0.2 * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
