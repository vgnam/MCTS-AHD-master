import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights (70% proximity early, 30% future efficiency later)
    weight_proximity = 0.7 * (0.8 + 0.2 * (num_unvisited / total_nodes))
    weight_future = 0.3 * (0.2 * (1 - (num_unvisited / total_nodes)))

    # Centrality of current node
    current_centrality = sum(distance_matrix[current_node]) / total_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)

        # Centrality of candidate node
        node_centrality = sum(distance_matrix[node]) / total_nodes

        # Bias factor combining distance and centrality
        bias_factor = (distance_to_node / (distance_matrix[current_node][destination_node] + 1e-6)) * (1 + (node_centrality / (current_centrality + 1e-6)) ** 2)

        # Score with dynamic weights and centrality bias
        score = weight_proximity * distance_to_node + weight_future * avg_future_distance
        score *= (1 + 0.2 * bias_factor)  # Centrality bias factor

        if score < best_score:
            best_score = score
            next_node = node

    # 30% chance to select destination node if not already selected
    if random.random() < 0.3 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
