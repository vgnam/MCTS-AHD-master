def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    unvisited_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        min_future_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0

        weight_proximity = 0.4 + 0.4 * (1 - unvisited_ratio)
        weight_future = 0.4 * unvisited_ratio
        penalty_factor = 1.0 + 0.2 * (distance_to_node / (distance_to_destination + 1e-6))
        score = weight_proximity * distance_to_node + weight_future * (0.6 * avg_future_distance + 0.4 * min_future_distance) * penalty_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
