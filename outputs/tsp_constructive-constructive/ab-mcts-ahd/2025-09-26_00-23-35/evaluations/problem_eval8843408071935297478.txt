importance" metric, which integrates distance, centrality, and a decaying exploration factor to balance exploitation and exploration adaptively.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    next_node = None
    best_score = -float('inf')

    # Calculate centrality (average distance to others)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

    # Calculate node importance (distance to current + centrality)
    importance = {}
    for node in unvisited_nodes:
        importance[node] = distance_matrix[current_node][node] + centrality.get(node, 0)

    # Dynamic exploration factor (decays with remaining nodes)
    exploration_factor = 1.0 / (1.0 + 0.5 * (total_unvisited - 1))

    for node in unvisited_nodes:
        # Proximity component (inverse distance)
        proximity = 1.0 / (distance_matrix[current_node][node] + 1e-6)

        # Centrality bias (relative to destination)
        centrality_bias = centrality.get(node, 0) / (centrality.get(destination_node, 1) + 1e-6)

        # Importance decay (prioritizes nodes that are both close and important)
        importance_decay = 1.0 / (1.0 + importance.get(node, 0) * exploration_factor)

        # Composite score
        score = (proximity * 0.6 + centrality_bias * 0.3) * importance_decay

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
