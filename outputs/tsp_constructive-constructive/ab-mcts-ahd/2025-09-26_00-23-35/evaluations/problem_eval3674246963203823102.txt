def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    destination_weight = 0.7 * (num_unvisited / (num_unvisited + 1))  # Dynamic weight based on remaining nodes

    if num_unvisited == 1:
        return unvisited_nodes[0]  # Directly return the last node if only one remains

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_distance = distance_to_node / avg_distance if avg_distance != 0 else distance_to_node
        score = normalized_distance + destination_weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
