def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.5 ** (1 / remaining_nodes)  # Exponential decay weight

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        detour_penalty = max(0, distance_to_destination - distance_matrix[current_node][destination_node])
        score = distance_to_node + decay_factor * detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
