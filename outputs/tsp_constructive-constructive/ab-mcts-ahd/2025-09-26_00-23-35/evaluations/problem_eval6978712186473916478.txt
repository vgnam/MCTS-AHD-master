def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.6 * (num_unvisited / (num_unvisited + 1)) + 0.4
    weight_centrality = 0.4 * (num_unvisited / (num_unvisited + 1)) + 0.6
    weight_novelty = 0.2 * (1 - (num_unvisited / (num_unvisited + 1))) + 0.8

    visit_history = {}
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_dest - variance

        novelty_score = visit_history.get(node, 0) / (sum(visit_history.values()) + 1)

        score = (-weight_proximity * distance_to_node +
                 weight_centrality * centrality_score -
                 weight_novelty * novelty_score)

        if score > best_score:
            best_score = score
            next_node = node

    if next_node is not None:
        visit_history[next_node] = visit_history.get(next_node, 0) + 1

    return next_node
