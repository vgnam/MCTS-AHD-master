import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    base_weight_proximity = 0.6
    base_weight_centrality = 0.4
    exploration_bias = 0.2 * (1 - (len(unvisited_nodes) / len(distance_matrix)))

    dynamic_factor = len(unvisited_nodes) / max(1, len(distance_matrix))
    sigmoid = 1 / (1 + math.exp(-10 * (dynamic_factor - 0.5)))
    weight_proximity = base_weight_proximity * (1 - sigmoid)
    weight_centrality = base_weight_centrality * sigmoid

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        centrality_score = avg_distance_to_dest
        distance_to_dest = distance_matrix[node][destination_node]

        penalty = 0.3 * (1 - (distance_to_dest / max(distance_matrix[node][n] for n in unvisited_nodes))) if len(unvisited_nodes) < 5 else 0
        exploration_term = exploration_bias * (distance_to_node / max(distance_matrix[current_node][n] for n in unvisited_nodes))

        score = -weight_proximity * distance_to_node + weight_centrality * centrality_score + exploration_term - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
