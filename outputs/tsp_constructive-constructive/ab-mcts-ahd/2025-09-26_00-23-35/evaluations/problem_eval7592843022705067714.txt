def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Inverse adaptive weight based on tour progress
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    weight_proximity = progress_factor
    weight_future = 1.0 - progress_factor

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality measure: sum of distances to all other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        # Future potential: normalized by total remaining nodes
        future_potential = distance_to_destination * (1.0 / remaining_nodes)

        # Reduced randomness factor
        random_factor = 0.05 * (distance_matrix[current_node][node] / max(distance_matrix[current_node]))

        # Combined score with inverse adaptive weights
        score = (weight_proximity * distance_to_node +
                 weight_future * future_potential +
                 0.3 * centrality -
                 random_factor)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
