def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.5 * (0.5 + 0.3 * (num_unvisited / (num_unvisited + 1))) + 0.3 * (0.3 * (1 - (num_unvisited / (num_unvisited + 1))))
    weight_centrality = 0.3 * (0.5 + 0.3 * (num_unvisited / (num_unvisited + 1))) + 0.4 * (0.3 * (1 - (num_unvisited / (num_unvisited + 1))))
    weight_connectivity = 0.2 * (0.5 + 0.3 * (num_unvisited / (num_unvisited + 1))) + 0.3 * (0.3 * (1 - (num_unvisited / (num_unvisited + 1))))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_dest - variance

        connectivity_score = 0
        for n1 in unvisited_nodes:
            for n2 in unvisited_nodes:
                if n1 != n2 and n1 != node and n2 != node:
                    connectivity_score += (distance_matrix[node][n1] + distance_matrix[node][n2] - distance_matrix[n1][n2]) / max(1, distance_matrix[node][n1] + distance_matrix[node][n2])

        connectivity_score /= max(1, (len(unvisited_nodes) - 1) * (len(unvisited_nodes) - 2))

        score = -weight_proximity * distance_to_node + weight_centrality * centrality_score + weight_connectivity * connectivity_score

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
