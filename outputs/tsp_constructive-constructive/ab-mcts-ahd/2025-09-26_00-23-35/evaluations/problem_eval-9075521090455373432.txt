def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1 + remaining_nodes)
    weights = []

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        penalty = (distance_to_node / (distance_to_dest + 1e-6)) ** 2 if distance_to_node > 1.5 * distance_to_dest else 1.0
        weight = (1 - exploration_factor) * (1 / (distance_to_node + 1e-6)) + exploration_factor * (1 / (distance_to_dest + 1e-6))
        weight *= penalty
        weights.append((node, weight))

    if weights:
        weights.sort(key=lambda x: -x[1])
        candidates = [node for node, weight in weights if weight > 0.5 * max(w for n, w in weights)]
        if destination_node in candidates and remaining_nodes > 1:
            next_node = destination_node
        else:
            next_node = weights[0][0] if weights else None

    return next_node
