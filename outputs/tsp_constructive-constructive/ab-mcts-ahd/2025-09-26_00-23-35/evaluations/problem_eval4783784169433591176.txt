importance increases exponentially as unvisited nodes decrease, while centrality is weighted by both average distance and variance, and includes a novel "destination pull" factor that attracts paths toward the destination node as the problem nears completion.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        distance_to_dest = distance_matrix[node][destination_node]

        proximity_weight = 1.5 * (1 + (1 - num_unvisited / total_nodes) ** 2)
        centrality_weight = 0.5 * (1 - variance / (avg_distance_to_dest + 1e-6))
        dest_pull_weight = 0.3 * (1 - num_unvisited / (total_nodes + 1e-6))
        score = -proximity_weight * distance_to_node + centrality_weight * avg_distance_to_dest - dest_pull_weight * distance_to_dest

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
