def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to remaining nodes to estimate potential
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Exponentially decreasing weight for destination distance
        weight = math.exp(-0.5 * remaining_nodes)

        # Score combines immediate distance, potential, and weighted destination distance
        score = distance_to_node + (1 - weight) * avg_distance_to_remaining + weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
