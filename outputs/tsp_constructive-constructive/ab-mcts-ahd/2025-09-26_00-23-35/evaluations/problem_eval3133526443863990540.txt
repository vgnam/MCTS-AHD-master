import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    temperature = max(1, total_unvisited / len(distance_matrix))

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        if total_unvisited > 1:
            weight_factor = 0.6 + 0.4 * (temperature ** 2)
        else:
            weight_factor = 1.0

        # Penalty for revisiting nodes (to avoid cycles)
        revisit_penalty = 1.0 if node == destination_node and total_unvisited == 1 else 0.0

        # Normalized score to account for varying node counts
        normalization_factor = math.log(total_unvisited + 1)
        score = (weight_factor * distance_to_node + (1.0 - weight_factor) * avg_future_distance) * normalization_factor + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    # Probabilistic selection with temperature
    if random.random() < temperature:
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= 1.5 * best_score]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
