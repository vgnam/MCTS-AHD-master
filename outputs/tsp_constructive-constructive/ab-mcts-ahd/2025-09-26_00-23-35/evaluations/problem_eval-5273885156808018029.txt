def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)

        # Dynamic weight adjustment: favor centrality as nodes deplete
        w1 = 0.7 * (remaining_nodes / (remaining_nodes + 3))  # Immediate distance weight
        w2 = 0.3 * (1 - (remaining_nodes / (remaining_nodes + 3)))  # Destination alignment weight
        w3 = 0.3 * (1 - (remaining_nodes / (remaining_nodes + 3)))  # Centrality weight

        score = (-1.0 * distance_to_node * w1) + (-0.5 * distance_to_dest * w2) + (-0.3 * centrality * w3)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
