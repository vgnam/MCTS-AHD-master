def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        proximity_weight = 0.5 - 0.1 * (remaining_nodes / len(distance_matrix)) if remaining_nodes > 1 else 0.5
        destination_weight = 0.3
        future_weight = 0.2

        # Refined future distance: weighted by current node's centrality
        centrality = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        future_distance = 0.7 * avg_future_distance + 0.3 * centrality

        score = proximity_weight * distance_to_node + destination_weight * distance_to_destination + future_weight * future_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
