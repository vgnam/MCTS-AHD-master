def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining - 1)

        # Dynamic weight adjustment with penalty for revisiting destination early
        weight_proximity = 0.8 - 0.6 * (remaining / max(1, len(unvisited_nodes)))
        weight_efficiency = 0.2 + 0.6 * (remaining / max(1, len(unvisited_nodes)))

        # Hybrid scoring: weighted sum + multiplicative factor
        score = weight_proximity * distance_to_node + weight_efficiency * avg_future_distance
        if node == destination_node and remaining > 1:
            score *= 1.5  # Penalize revisiting destination early

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
