def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        destination_alignment = distance_matrix[node][destination_node]

        weight_local = 0.7 * (remaining_nodes / total_nodes)
        weight_global = 0.3 * (1 - remaining_nodes / total_nodes)
        penalty_factor = 0.2 * (destination_alignment / max(1, sum(distance_matrix[destination_node][n] for n in unvisited_nodes)))

        score = (weight_local * immediate_distance) + (weight_global * future_connectivity) + (penalty_factor * destination_alignment)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
