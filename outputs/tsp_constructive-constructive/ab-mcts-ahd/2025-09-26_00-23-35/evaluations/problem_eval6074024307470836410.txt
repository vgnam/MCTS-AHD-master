import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weight adjustment with node centrality
    weight_proximity = 0.5 * (0.6 + 0.4 * (num_unvisited / (num_unvisited + 1)))
    weight_future = 0.5 * (0.4 * (1 - (num_unvisited / (num_unvisited + 1))))

    # Adaptive randomness increases with remaining nodes
    randomness_factor = 0.1 * (1 + 0.5 * (num_unvisited / (num_unvisited + 1)))
    randomness = randomness_factor * random.random()

    # Node centrality metric
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Look-ahead mechanism
        future_look_ahead = 0
        if num_unvisited > 2:
            nearest_neighbor = min(unvisited_nodes, key=lambda n: distance_matrix[node][n] if n != node else float('inf'))
            future_look_ahead = distance_matrix[node][nearest_neighbor]

        # Proximity bonus when few nodes remain
        proximity_bonus = 0.25 * distance_to_node if num_unvisited <= 2 else 0

        # Centrality adjustment
        centrality_factor = 0.3 * (1 - centrality[node] / max(centrality.values())) if centrality else 0

        score = (weight_proximity * distance_to_node +
                 weight_future * future_look_ahead +
                 centrality_factor * math.sqrt(distance_to_node)) * (1 + randomness) + proximity_bonus

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
