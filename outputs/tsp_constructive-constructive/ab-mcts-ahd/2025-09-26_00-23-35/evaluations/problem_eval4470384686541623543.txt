def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        max_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0

        # Dynamic weighting: prioritize centrality more when fewer nodes remain
        weight_avg = 0.4 if remaining_nodes <= 3 else 0.2
        weight_max = 0.3 if remaining_nodes <= 3 else 0.1

        # Novel detour penalty: distance from current to destination adjusted by remaining nodes
        detour_penalty = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) * (1 + 0.1 * (remaining_nodes / len(unvisited_nodes)))

        # Combined score with novel centrality measure
        score = distance_to_node + weight_avg * avg_distance + weight_max * max_distance + 0.3 * detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
