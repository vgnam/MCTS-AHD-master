def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Higher weight for proximity, lower for centrality and detour
        weight_proximity = 0.5
        weight_centrality = 0.2
        weight_detour = 0.3

        detour_cost = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        score = weight_proximity * distance_to_node + weight_centrality * avg_distance + weight_detour * detour_cost

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
