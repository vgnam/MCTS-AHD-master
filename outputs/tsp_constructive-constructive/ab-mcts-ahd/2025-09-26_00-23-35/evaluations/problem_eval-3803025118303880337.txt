def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Calculate average distance to other unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)

        # Dynamic density weight based on current path length and remaining nodes
        path_length_so_far = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != current_node)
        density_weight = 0.3 * (1 + 0.2 * (path_length_so_far / max(1, sum(distance_matrix[unvisited_nodes[0]][n] for n in unvisited_nodes[1:]))))

        # Node centrality: prioritize nodes with high average distance to others (more central)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / unvisited_count

        # Destination factor with adaptive weight
        destination_factor = 0.15 * distance_matrix[node][destination_node] * (1 + 0.1 * (unvisited_count / len(distance_matrix)))

        # Combine factors with novel weighting
        score = (0.4 * distance_to_node +
                 density_weight * avg_distance +
                 0.25 * centrality +
                 destination_factor)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
