def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.6 * (0.5 + 0.5 * (num_unvisited / (num_unvisited + 1))) ** 2
    weight_future = 0.3 * (0.5 * (1 - (num_unvisited / (num_unvisited + 1))) ** 2)
    weight_dest = 0.1 * (0.5 * (num_unvisited / (num_unvisited + 1)) ** 2)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, num_unvisited - 1)
        distance_to_dest = distance_matrix[node][destination_node]
        penalty = 0.4 if distance_to_dest < (sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited) else 0
        score = -weight_proximity * distance_to_node + weight_future * avg_future_distance + weight_dest * distance_to_dest - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
