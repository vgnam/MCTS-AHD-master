def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)
    progress = 1 - (num_unvisited / (num_unvisited + len(distance_matrix)))
    weight_centrality = 0.5 * (1 - progress) + 0.2
    weight_proximity = 0.5 * progress + 0.2
    weight_connectivity = 0.3

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_dest = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distances_to_others = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_distance_to_dest) ** 2 for d in distances_to_others) / max(1, len(distances_to_others))
        centrality_score = avg_distance_to_dest + 0.5 * variance

        connectivity_score = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * avg_distance_to_dest) / max(1, len(unvisited_nodes) - 1)

        score = (-weight_proximity * distance_to_node +
                 weight_centrality * centrality_score +
                 weight_connectivity * connectivity_score)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
