def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # Including current node
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Historical penalty to avoid revisiting nodes
    history_penalty = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on visited ratio and remaining nodes
        weight = (1 - visited_ratio) / (1 + len(unvisited_nodes))

        # Normalize distance to destination to avoid bias in early stages
        normalized_destination_distance = distance_to_destination / (max(distance_matrix[node]) if max(distance_matrix[node]) != 0 else 1)

        # Incorporate historical penalty
        score = distance_to_node + weight * normalized_destination_distance + history_penalty[node]

        if score < best_score:
            best_score = score
            next_node = node

    # Update history penalty for the selected node
    if next_node is not None:
        history_penalty[next_node] += 0.1  # Small penalty to discourage revisiting

    return next_node
