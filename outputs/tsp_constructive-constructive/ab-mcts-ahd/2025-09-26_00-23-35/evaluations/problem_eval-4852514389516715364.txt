import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Calculate centrality of current node (average distance to all other nodes)
    centrality = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    next_node = None
    min_distance = float('inf')
    dest_distance = distance_matrix[current_node][destination_node]
    candidates = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Dynamic bias factor combining distance and centrality
    bias_factor = (min_distance / (dest_distance + 1e-6)) * (1 + centrality / (sum(sum(row) for row in distance_matrix) / len(distance_matrix) ** 2))

    if next_node != destination_node and len(unvisited_nodes) > 1:
        if bias_factor > 0.6 or random.random() < 0.2:
            next_node = destination_node if destination_node in unvisited_nodes else next_node
        else:
            # Consider centrality in selection
            for node in unvisited_nodes:
                if node == destination_node:
                    continue
                distance = distance_matrix[current_node][node]
                node_centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
                if distance <= min_distance * 1.2 and node_centrality > centrality * 0.8:
                    next_node = node
                    break

    return next_node
