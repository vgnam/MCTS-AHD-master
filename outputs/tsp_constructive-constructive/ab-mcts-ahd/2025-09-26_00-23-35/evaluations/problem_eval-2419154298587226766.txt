def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    dest_distance = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            next_node = node
            break

        # Calculate attractiveness score combining distance and destination proximity
        proximity_factor = 1.0 if dest_distance == 0 else (distance / dest_distance)
        novelty_factor = 1.0 / (1 + (len(unvisited_nodes) - 1) / len(distance_matrix))
        score = distance * (1 + proximity_factor * novelty_factor)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node != destination_node and remaining_nodes > 1:
        # Dynamic threshold with exponential decay based on remaining nodes
        threshold = 0.7 ** (1.0 / remaining_nodes)
        bias_factor = min_score / (dest_distance + 1e-6)

        # Adaptive penalty considering both distance and remaining progress
        penalty = 1.0 + (0.5 * (remaining_nodes / len(distance_matrix)) * (min_score / (dest_distance + 1e-6)))
        adjusted_bias = bias_factor * penalty

        if adjusted_bias > threshold:
            next_node = destination_node if destination_node in unvisited_nodes else next_node

    return next_node
