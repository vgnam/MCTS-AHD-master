def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 0.7 - 0.4 * (total_unvisited / len(distance_matrix))

        # Penalty for nodes too close to recently visited nodes (avoid clustering)
        penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node and distance_matrix[node][other_node] < 1.5 * distance_to_node:
                penalty += 0.1

        score = weight * (1 / distance_to_node) + (1 - weight) * (1 / distance_to_destination) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
