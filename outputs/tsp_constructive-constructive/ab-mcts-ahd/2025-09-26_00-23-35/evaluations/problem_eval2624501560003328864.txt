def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]

        # Dynamic proximity weight (increases as nodes remain)
        proximity_weight = 0.5 + 0.3 * (1 - total_unvisited / len(distance_matrix))

        # Centrality factor: potential to reduce future distances
        centrality_factor = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Penalty for outliers (nodes much farther than average)
        avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / max(1, total_unvisited)
        penalty = max(0, distance_to_node - 1.5 * avg_distance)

        # Additional penalty for nodes that maximize the remaining maximum distance
        max_remaining_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        max_penalty = 0.2 * max_remaining_distance

        # Composite score
        score = (proximity_weight * distance_to_node) + (1 - proximity_weight) * centrality_factor + penalty + max_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
