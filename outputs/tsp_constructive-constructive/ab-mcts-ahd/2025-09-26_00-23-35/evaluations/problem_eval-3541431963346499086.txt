importance mid-way, and emphasizing destination alignment late, with dynamic weights adjusting based on remaining nodes to balance local and global path optimization.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][destination_node]) / max(1, len(unvisited_nodes) - 1)
        destination_alignment = 1 / (1 + distance_matrix[node][destination_node])

        weight_immediate = 0.4 + 0.4 * (remaining_nodes / total_nodes)
        weight_connectivity = 0.4 - 0.2 * (remaining_nodes / total_nodes)
        weight_alignment = 0.2 + 0.2 * (remaining_nodes / total_nodes)

        score = (weight_immediate * distance_to_node +
                 weight_connectivity * (1 - connectivity_score) +
                 weight_alignment * destination_alignment)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
