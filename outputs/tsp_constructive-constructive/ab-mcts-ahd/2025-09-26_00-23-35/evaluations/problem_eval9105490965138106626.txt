def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, unvisited_count - 1)
        distance_to_dest = distance_matrix[node][destination_node]

        if unvisited_count > len(distance_matrix) // 2:
            weight_proximity = 1.5
            weight_centrality = 1.0
            weight_indirect = 0.5
        else:
            weight_proximity = 1.0
            weight_centrality = 1.5
            weight_indirect = 1.0

        weight_factor = 1.0 + (0.5 * (unvisited_count - 1) / (len(distance_matrix) - 2)) if unvisited_count > 1 else 1.5
        score = weight_proximity * (-distance_to_node) + weight_centrality * avg_distance + weight_indirect * distance_to_dest
        score *= weight_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
