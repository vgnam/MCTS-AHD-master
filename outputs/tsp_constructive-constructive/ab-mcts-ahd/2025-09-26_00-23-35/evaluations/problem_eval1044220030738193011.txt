def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_proximity = 0.6 + 0.1 * (remaining_nodes / len(distance_matrix))
        weight_global = 0.4 - 0.1 * (remaining_nodes / len(distance_matrix))

        # Normalize scores and apply penalty for revisiting
        normalized_proximity = 1 / (distance_to_node + 1e-6)
        normalized_global = 1 / (distance_to_destination + 1e-6)

        score = (weight_proximity * normalized_proximity) + (weight_global * normalized_global)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
