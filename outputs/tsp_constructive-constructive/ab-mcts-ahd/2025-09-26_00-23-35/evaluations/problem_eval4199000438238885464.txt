def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Dynamic weight for future distance (increases as more nodes are visited)
        weight_future = 0.7 * (1 - 1 / (1 + remaining_nodes))

        # Centrality penalty (penalizes nodes with higher average future distance)
        centrality_penalty = 0.5 * avg_future_distance

        # Score combines proximity, weighted future distance, and centrality penalty
        score = distance_to_node + weight_future * distance_to_destination + centrality_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
