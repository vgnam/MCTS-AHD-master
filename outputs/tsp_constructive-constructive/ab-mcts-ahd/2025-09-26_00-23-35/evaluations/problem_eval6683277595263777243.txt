def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    dest_distance = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes)

    # Calculate nearest neighbor
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Probabilistic selection: destination bias increases with remaining nodes
    if next_node != destination_node and destination_node in unvisited_nodes:
        dest_prob = 1.0 - (0.9 ** (1.0 / (1 + remaining_nodes)))  # Exponential bias
        nearest_prob = 1.0 - dest_prob  # Linear decrease for nearest neighbor

        # Randomly select based on probabilities
        if np.random.rand() < dest_prob:
            next_node = destination_node
        else:
            next_node = next_node  # Keep nearest neighbor

    return next_node
