"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    next_node = None\n    best_score = -float('inf')\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        lookahead_distance = distance_matrix[node][destination_node]\n        remaining_nodes = len(unvisited_nodes)\n\n        # Dynamic weight based on remaining nodes (similar to No.1)\n        weight = 0.5 + 0.5 * (1 - remaining_nodes / len(distance_matrix))\n\n        # Bias factor decreasing as nodes are visited (similar to No.2)\n        bias_factor = remaining_nodes / (remaining_nodes + 1)\n\n        # Penalty for revisits (similar to No.1)\n        penalty = 0.1 * (1 / (remaining_nodes + 1))\n\n        # Combined score: prioritize immediate distance, balance lookahead, and penalize revisits\n        score = -immediate_distance + bias_factor * (weight * lookahead_distance) - penalty\n\n        if score > best_score:\n            best_score = score\n            next_node = node\n\n    return next_node"