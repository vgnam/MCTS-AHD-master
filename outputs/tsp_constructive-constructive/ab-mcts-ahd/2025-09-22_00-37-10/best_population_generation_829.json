"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    next_node = None\n    best_score = -float('inf')\n    total_nodes = len(unvisited_nodes) + 1  # +1 to include current_node if considering progress\n    progress_ratio = 1 - (len(unvisited_nodes) / total_nodes)\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        dest_distance = distance_matrix[node][destination_node]\n\n        # Calculate lookahead term: average distance to remaining nodes\n        remaining_nodes = [n for n in unvisited_nodes if n != node]\n        lookahead_term = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0\n\n        # Dynamic bias factor: decreases as progress increases\n        bias_factor = (1 - progress_ratio) * 0.5 + 0.5  # Ranges from 0.5 (early) to 1.0 (late)\n\n        # Weighted score: current_distance is heavily weighted, dest_distance and lookahead are balanced\n        score = -2 * current_distance + bias_factor * (dest_distance + 0.3 * lookahead_term)\n\n        if score > best_score:\n            best_score = score\n            next_node = node\n\n    return next_node"