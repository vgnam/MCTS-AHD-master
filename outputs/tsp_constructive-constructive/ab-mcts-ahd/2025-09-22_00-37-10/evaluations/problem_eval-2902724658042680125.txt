def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 + 0.5 * (1 / (1 + remaining_nodes))  # Dynamic weight based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality as the average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        score = immediate_distance - weight * lookahead_distance + 0.2 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
