def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Dynamic weight based on remaining nodes
    historical_penalties = {}  # Track penalties for revisiting nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        penalty = historical_penalties.get(node, 0)  # Apply penalty if node was previously considered
        score = immediate_distance - weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    # Update historical penalties for the selected node
    if next_node in historical_penalties:
        historical_penalties[next_node] += 1
    else:
        historical_penalties[next_node] = 1

    return next_node
