def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1) if num_unvisited > 1 else 0
        weight = 0.5 + 0.5 * (1 - num_unvisited / len(distance_matrix))  # Dynamic weight
        score = (immediate_distance - weight * lookahead_distance) + 0.2 * penalty
        score /= num_unvisited  # Normalize by remaining nodes

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
