def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight with non-linear scaling
        weight = 1.0 / (1.0 + (remaining_nodes ** 1.5) * 0.3)

        # Penalty for revisiting nodes (if applicable)
        penalty = 0.0
        if node in unvisited_nodes and remaining_nodes > 1:
            penalty = 0.1 * immediate_distance

        # Bonus for nodes close to current node
        bonus = 0.2 * (1.0 - (immediate_distance / max(distance_matrix[current_node])))

        score = immediate_distance + weight * lookahead_distance - penalty + bonus

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
