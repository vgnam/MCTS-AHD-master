import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    candidate_nodes = []
    weights = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if destination_node is not None:
            # Dynamic weight combining local distance and global path estimation
            global_estimate = distance_matrix[node][destination_node] if node != destination_node else 0
            weight = (1.0 / (distance + 1e-6)) * math.exp(-global_estimate / (sum(distance_matrix[node]) + 1e-6))
        else:
            weight = 1.0 / (distance + 1e-6)
        weights.append(weight)
        candidate_nodes.append(node)

    if weights:
        total_weight = sum(weights)
        normalized_weights = [w / total_weight for w in weights]
        next_node = random.choices(candidate_nodes, weights=normalized_weights, k=1)[0]
    else:
        next_node = unvisited_nodes[0] if unvisited_nodes else None

    return next_node
