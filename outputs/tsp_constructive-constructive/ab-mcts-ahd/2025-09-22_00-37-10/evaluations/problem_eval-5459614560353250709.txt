def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    # Calculate average distance to unvisited nodes for centrality measure
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        avg_distances.append(avg_dist)

    # Calculate current path deviation from shortest possible path
    shortest_possible = sum(min(distance_matrix[node][n] for n in unvisited_nodes if n != node) for node in unvisited_nodes)
    current_path = sum(distance_matrix[current_node][n] for n in unvisited_nodes)
    deviation_factor = min(1.0, current_path / max(1, shortest_possible))

    for i, node in enumerate(unvisited_nodes):
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes and path deviation
        weight = 0.5 + 0.4 * (len(unvisited_nodes) / len(distance_matrix)) * (1 - deviation_factor)

        # Probabilistic penalty based on centrality and remaining nodes
        centrality_penalty = 0.3 * avg_distances[i] if len(unvisited_nodes) > 1 else 0
        penalty = centrality_penalty * (1 - deviation_factor) if len(unvisited_nodes) == 1 else 0

        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
