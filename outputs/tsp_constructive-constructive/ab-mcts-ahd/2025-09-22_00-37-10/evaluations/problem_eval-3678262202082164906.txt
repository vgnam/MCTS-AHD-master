import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    candidate_nodes = []
    min_distance = float('inf')
    lookahead_factor = 0.3

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) == 1:
        return candidate_nodes[0]

    weights = []
    total_weight = 0.0

    for node in candidate_nodes:
        inv_distance = 1.0 / (distance_matrix[current_node][node] + 1e-6)
        lookahead = 0.0
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead = min(distance_matrix[node][n] for n in remaining_nodes) if remaining_nodes else 0.0
        combined_weight = (1 - lookahead_factor) * inv_distance + lookahead_factor * (1.0 / (lookahead + 1e-6))
        weights.append(combined_weight)
        total_weight += combined_weight

    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(candidate_nodes, weights=normalized_weights, k=1)[0]

    return next_node
