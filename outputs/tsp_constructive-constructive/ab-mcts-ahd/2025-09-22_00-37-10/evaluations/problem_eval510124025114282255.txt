def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 to include current node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        exploration_weight = 0.5 + (0.5 * (remaining_nodes / total_nodes))
        visit_penalty = 1.0 if node in unvisited_nodes else 1.2  # Penalize revisiting

        # Heuristic score: immediate + weighted lookahead + penalty
        score = (immediate_distance + exploration_weight * lookahead_distance) * visit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
