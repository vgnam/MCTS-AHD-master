def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining unvisited nodes
        if num_unvisited <= 3:
            weight = 0.2  # Favor immediate distances when few nodes left
        else:
            weight = 0.7  # Balance with lookahead when many nodes remain

        # Penalty for nodes too far from current node
        penalty = 0.0
        if immediate_distance > 1.5 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]):
            penalty = 0.3 * immediate_distance

        score = immediate_distance - weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
