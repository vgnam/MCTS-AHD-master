def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustment based on tour progress and node position
    gamma = 0.6 * (remaining_nodes / total_nodes) ** 2  # Quadratic decay for centrality
    delta = 0.4 * (1 - (remaining_nodes / total_nodes) ** 0.5)  # Sublinear growth for detour

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        detour = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Centrality: harmonic mean of distances to all unvisited nodes
        centrality = 0.0
        sum_reciprocal = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                dist = distance_matrix[node][other_node]
                if dist > 0:
                    sum_reciprocal += 1.0 / dist
        if sum_reciprocal > 0:
            centrality = (remaining_nodes - 1) / sum_reciprocal

        # Score combines immediate distance, detour, and centrality with novel weighting
        score = immediate_distance + gamma * centrality - delta * detour

        # Additional penalty for nodes that are too far from current node
        if immediate_distance > 2 * gamma * centrality:
            score += 0.3 * immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
