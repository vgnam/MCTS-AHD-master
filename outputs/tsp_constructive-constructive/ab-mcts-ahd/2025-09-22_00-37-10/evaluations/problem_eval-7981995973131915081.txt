def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)  # Dynamic temperature for probabilistic selection

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weight = temperature * (0.5 + 0.5 * (1 - temperature))  # Weight balances distance and randomness
        score = immediate_distance + weight * lookahead_distance
        scores.append((node, score))

    if scores:
        # Select node with probability inversely proportional to score
        total_score = sum(score for _, score in scores)
        probabilities = [(node, (total_score - score) / total_score) for node, score in scores]
        probabilities = [(node, prob / sum(p for _, p in probabilities)) for node, prob in probabilities]
        next_node = random.choices([node for node, _ in probabilities], weights=[prob for _, prob in probabilities], k=1)[0]

    return next_node
