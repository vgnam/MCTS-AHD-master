def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    alpha = 0.5 * (1 - remaining_nodes / total_nodes)  # Early focus on distance and detour
    beta = 0.7 * (remaining_nodes / total_nodes)  # Later focus on centrality

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        detour = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Centrality: average distance to all unvisited nodes
        centrality = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += distance_matrix[node][other_node]
        centrality /= max(1, remaining_nodes - 1)

        # Score combines immediate distance, detour, and centrality
        score = immediate_distance + alpha * detour - beta * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
