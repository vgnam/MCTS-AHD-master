def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality /= max(1, remaining_nodes - 1)  # Avoid division by zero

        # Dynamic weight factors
        distance_weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Favor immediate distance early
        centrality_weight = 0.5 - 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Favor centrality later

        # Score combines immediate distance, lookahead distance, and centrality
        score = (-distance_weight * immediate_distance +
                 (1.0 / (1.0 + remaining_nodes)) * lookahead_distance +
                 centrality_weight * centrality)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
