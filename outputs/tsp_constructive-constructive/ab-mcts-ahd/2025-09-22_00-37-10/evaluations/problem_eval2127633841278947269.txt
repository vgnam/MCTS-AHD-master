def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Quadratic decay in lookahead weight
        lookahead_weight = -0.3 + (0.2 * (remaining_nodes ** 2) / (remaining_nodes ** 2 + 1))

        # Higher penalty for early destination revisits
        penalty = 0.3 * immediate_distance if (remaining_nodes > 2 and node == destination_node) else 0

        # Dynamic threshold adjustment
        threshold = 0.4 * (remaining_nodes / (remaining_nodes + 2))

        score = immediate_distance + lookahead_weight * lookahead_distance + penalty

        if score < best_score and score <= threshold * immediate_distance:
            best_score = score
            next_node = node

    return next_node
