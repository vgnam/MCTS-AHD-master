def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Fixed weight for immediate and lookahead distances
        weight = 0.7

        # Constant bias factor
        bias_factor = 0.8

        # Fixed penalty for revisits
        penalty = 0.2

        # Linear decay factor
        decay_factor = remaining_nodes / total_nodes

        # Combined score: immediate distance with weighted lookahead, penalize revisits
        score = immediate_distance - weight * (lookahead_distance * bias_factor * decay_factor) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
