def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    candidate_nodes = []

    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    bias_factor = (1 - progress_ratio) * 0.5 + 0.5

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        weights = []
        for node in candidate_nodes:
            current_distance = distance_matrix[current_node][node]
            dest_distance = distance_matrix[node][destination_node]
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_term = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
            score = -2 * current_distance + bias_factor * (dest_distance + 0.3 * lookahead_term)
            weights.append(score)
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
