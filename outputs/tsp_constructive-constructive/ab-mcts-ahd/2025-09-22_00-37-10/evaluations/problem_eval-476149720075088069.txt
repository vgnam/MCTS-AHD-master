def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adaptation from No.1
        weight = 1.0 / (1.0 + remaining_nodes)

        # Lookahead prioritization for few remaining nodes from No.2
        lookahead_weight = -0.5 if remaining_nodes > 3 else -0.7

        # Penalty for early destination revisits
        penalty = 0.3 * immediate_distance if (remaining_nodes > 1 and node == destination_node) else 0

        # Balanced immediate-lookahead trade-off from No.3
        score = immediate_distance + weight * (lookahead_weight * lookahead_distance) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
