import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Adaptive weighting based on tour progress
    progress = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
    weight_local = 1.0 / (1.0 + math.exp(5 * (progress - 0.5)))  # Sigmoid transition
    weight_global = 1.0 - weight_local

    # Calculate candidate nodes and their scores
    candidate_nodes = []
    min_distance = float('inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    heuristic_scores = []
    for node in candidate_nodes:
        inv_distance = 1.0 / (distance_matrix[current_node][node] + 1e-6)

        # Improved heuristic: minimum spanning tree estimate for remaining nodes
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            # Prim's algorithm approximation
            mst_estimate = prim_mst_estimate(node, remaining_nodes, distance_matrix)
        else:
            mst_estimate = distance_matrix[node][destination_node]

        # Combined score with adaptive weights
        score = weight_local * inv_distance + weight_global * (1.0 / (mst_estimate + 1e-6))
        heuristic_scores.append(score)

    # Normalize and select
    total_score = sum(heuristic_scores)
    probabilities = [s / total_score for s in heuristic_scores]
    next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]

    return next_node

def prim_mst_estimate(start_node, nodes, distance_matrix):
    if not nodes:
        return 0.0

    in_mst = {start_node}
    total = 0.0

    while len(in_mst) < len(nodes) + 1:
        min_edge = float('inf')
        next_node = None

        for u in in_mst:
            for v in nodes:
                if v not in in_mst and distance_matrix[u][v] < min_edge:
                    min_edge = distance_matrix[u][v]
                    next_node = v

        if next_node is None:
            break

        in_mst.add(next_node)
        total += min_edge

    return next_node
