def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance from current node to all unvisited nodes
        centrality = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

        # Dynamic weight adjustment: balances immediate, lookahead, and centrality
        weight_immediate = 0.5 + (0.3 * (remaining_nodes / (remaining_nodes + 1)))
        weight_lookahead = 0.5 + (0.3 * (remaining_nodes / (remaining_nodes + 1)))
        weight_centrality = 0.2 * (1 - (remaining_nodes / (remaining_nodes + 1)))

        score = (weight_immediate * immediate_distance) + (weight_lookahead * lookahead_distance) - (weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
