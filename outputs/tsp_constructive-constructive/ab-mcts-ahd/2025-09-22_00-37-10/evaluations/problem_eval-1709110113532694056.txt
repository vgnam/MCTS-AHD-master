def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    # Calculate entropy of distances from current_node to unvisited nodes
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    mean_distance = sum(distances) / remaining_nodes
    entropy = -sum((d / sum(distances)) * math.log(d / sum(distances) + 1e-10) for d in distances)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        dynamic_weight = (1.0 / (remaining_nodes + 1)) * (1 + entropy)  # Entropy scaling
        score = immediate_distance + dynamic_weight * lookahead_distance
        scores.append(score)

    # Normalize scores to probabilities
    min_score = min(scores)
    adjusted_scores = [max(s - min_score + 1e-10, 0) for s in scores]
    total = sum(adjusted_scores)
    probabilities = [s / total for s in adjusted_scores]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
