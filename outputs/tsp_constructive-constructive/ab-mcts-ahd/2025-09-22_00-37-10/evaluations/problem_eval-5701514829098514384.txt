def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Dynamic weight factor: balances immediate, lookahead, and centrality
        weight = (0.4 + (0.6 * (remaining_nodes / (remaining_nodes + 1)))) / (1.0 + remaining_nodes)
        score = (0.5 * immediate_distance) + (0.3 * lookahead_distance) + (0.2 * centrality) - (weight * (immediate_distance + lookahead_distance))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
