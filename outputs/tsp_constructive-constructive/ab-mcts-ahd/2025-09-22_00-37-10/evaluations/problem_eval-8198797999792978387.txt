def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalize distances by the number of unvisited nodes to balance influence
        normalized_current = distance_to_current / num_unvisited
        normalized_destination = distance_to_destination / num_unvisited

        # Dynamic weighting: prioritize proximity when fewer nodes remain
        weight = 0.5 if num_unvisited > 1 else 0.2
        score = normalized_current + weight * normalized_destination

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
