def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights: alpha decreases, beta increases, gamma introduces a penalty for revisits
    alpha = 0.7 * (remaining_nodes / total_nodes)
    beta = 0.3 * (1 - remaining_nodes / total_nodes)
    gamma = 0.1 * (1 - (remaining_nodes / total_nodes) ** 2)  # Penalty increases as tour progresses

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Centrality: weighted average of distances to unvisited nodes
        centrality = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += distance_matrix[node][other_node] * (1 - gamma * (1 if other_node in unvisited_nodes else 0))
        centrality /= max(1, remaining_nodes - 1)

        # Novel score function: balances distance, centrality, and a penalty for revisits
        score = (alpha * immediate_distance + beta * lookahead_distance) / (1 + centrality) - gamma * (1 if node in unvisited_nodes else 0)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
