def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 if remaining_nodes <= 2 else 0.7  # Adjust weight based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        revisit_penalty = 0.1 * (1 / (1 + distance_matrix[node][destination_node]))  # Penalize nodes farther from destination

        score = immediate_distance - dynamic_weight * lookahead_distance + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
