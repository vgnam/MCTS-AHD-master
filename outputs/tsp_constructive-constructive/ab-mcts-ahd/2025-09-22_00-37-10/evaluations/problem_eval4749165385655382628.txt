def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight with non-linear adaptation
        if remaining_nodes > 1:
            weight = (remaining_nodes / (remaining_nodes + 1)) ** 2
        else:
            weight = 1.0

        # Penalty for revisiting nodes in lookahead path
        if node in unvisited_nodes and node != destination_node:
            revisit_penalty = 0.1 * sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        else:
            revisit_penalty = 0

        score = immediate_distance + weight * lookahead_distance + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
