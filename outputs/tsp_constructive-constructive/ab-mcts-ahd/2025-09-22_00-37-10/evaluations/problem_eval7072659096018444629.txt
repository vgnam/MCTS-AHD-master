importance" metric based on average distances to all unvisited nodes, with adaptive weights that emphasize global optimization as the problem progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate node importance as average distance to all unvisited nodes
        node_importance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Adaptive weights based on problem progress
        progress_factor = 1 - (len(unvisited_nodes) / len(distance_matrix))
        immediate_weight = 0.6 - 0.3 * progress_factor
        importance_weight = 0.4 + 0.3 * progress_factor

        # Penalty for nodes that would create long remaining paths
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            remaining_distance = min(distance_matrix[node][n] for n in remaining_nodes)
        else:
            remaining_distance = 0

        penalty = 0.1 * remaining_distance if len(unvisited_nodes) > 1 else 0

        score = (immediate_weight * immediate_distance +
                 importance_weight * node_importance +
                 0.3 * lookahead_distance +
                 penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
