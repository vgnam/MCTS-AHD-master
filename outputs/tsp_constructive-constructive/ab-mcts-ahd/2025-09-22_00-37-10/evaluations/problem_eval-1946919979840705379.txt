def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 to include current_node if considering progress
    progress_ratio = 1 - (len(unvisited_nodes) / total_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate lookahead term: average distance to remaining nodes
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        lookahead_term = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        # Dynamic bias factor: decreases as progress increases
        bias_factor = (1 - progress_ratio) * 0.5 + 0.5  # Ranges from 0.5 (early) to 1.0 (late)

        # Weighted score: current_distance is heavily weighted, dest_distance and lookahead are balanced
        score = -2 * current_distance + bias_factor * (dest_distance + 0.3 * lookahead_term)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
