def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress = 1 - (total_unvisited / len(distance_matrix))
    weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid-based weight adjustment

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        path_penalty = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = immediate_distance + weight * lookahead_distance + 0.3 * path_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
