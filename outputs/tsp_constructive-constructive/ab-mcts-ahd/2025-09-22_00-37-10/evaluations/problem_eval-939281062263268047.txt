def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight balancing local and global factors
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))

        # Centrality factor: sum of distances to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality_weight = 1.0 / (1.0 + centrality)  # Higher centrality reduces weight

        score = immediate_distance + weight * lookahead_distance + centrality_weight * (1 - weight)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
