def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    # Dynamic weight based on remaining nodes
    exploration_weight = 1.0 - (0.8 * len(unvisited_nodes) / len(distance_matrix))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Novel scoring: weighted sum with exploration factor
        score = (1.2 * immediate_distance) - (0.7 * lookahead_distance) + (exploration_weight * (immediate_distance - lookahead_distance))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
