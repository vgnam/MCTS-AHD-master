def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on node ratio and exploration penalty
        weight = (1.0 + (0.5 * (remaining_nodes / total_nodes))) / (1.0 + remaining_nodes)
        exploration_penalty = 0.1 * len(unvisited_nodes) / total_nodes  # Penalty for revisiting

        score = immediate_distance - weight * lookahead_distance + exploration_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
