def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes and path progress
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))

        # Penalize nodes that are too close to the current path
        path_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                path_penalty += distance_matrix[node][other_node] * 0.1

        score = immediate_distance + weight * lookahead_distance + path_penalty

        if score < best_score:
            best_score = score
            next_node = node

    # Introduce probabilistic selection to avoid local minima
    if random.random() < 0.2 and len(unvisited_nodes) > 2:
        candidates = [node for node in unvisited_nodes if node != next_node]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
