def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Exponentially decaying temperature parameter
        temperature = 1.0 * (0.5 ** (remaining_nodes / total_nodes))

        # Neighborhood lookahead: average distance to remaining nodes
        neighborhood_avg = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Probabilistic selection based on energy function
        energy = immediate_distance + temperature * (lookahead_distance + neighborhood_avg)

        # Dynamic bias favoring nodes closer to current node
        bias = (1 - immediate_distance / sum(distance_matrix[current_node][n] for n in unvisited_nodes)) if unvisited_nodes else 0

        # Combined score with probabilistic twist
        score = energy * (1 - bias)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
