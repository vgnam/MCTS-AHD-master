def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    scores = []
    nodes = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        bias_factor = (remaining_nodes / (remaining_nodes + 1)) ** 1.5
        weight = 1.0 / (1.0 + remaining_nodes * 0.5)
        score = -immediate_distance * (1 - bias_factor) + weight * lookahead_distance * bias_factor
        scores.append(score)
        nodes.append(node)

    if not scores:
        return destination_node

    max_score = max(scores)
    min_score = min(scores)
    normalized_scores = [(score - min_score) / (max_score - min_score + 1e-10) for score in scores]

    selected_index = 0
    for i in range(len(normalized_scores)):
        if normalized_scores[i] > normalized_scores[selected_index]:
            selected_index = i

    return next_node
