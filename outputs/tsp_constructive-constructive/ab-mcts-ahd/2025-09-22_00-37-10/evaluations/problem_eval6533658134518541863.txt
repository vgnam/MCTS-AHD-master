def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Lookahead: Evaluate the next-best neighbor for the current node
        lookahead_score = 0
        if remaining_nodes > 1:
            next_neighbors = [n for n in unvisited_nodes if n != node]
            if next_neighbors:
                next_best_neighbor = min(next_neighbors, key=lambda n: distance_matrix[node][n])
                lookahead_score = -distance_matrix[node][next_best_neighbor]

        # Dynamic bias factor based on remaining nodes and lookahead
        bias_factor = (remaining_nodes / (remaining_nodes + 2)) ** 2
        score = -current_distance + bias_factor * dest_distance + 0.3 * lookahead_score

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
