def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)

        # Penalty for nodes that are too distant from the destination
        penalty = 0.1 * (lookahead_distance - immediate_distance)

        # Normalized score to ensure fair comparison
        score = (immediate_distance - weight * lookahead_distance) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
