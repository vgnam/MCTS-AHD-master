def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function
        progress = (total_nodes - remaining_nodes) / total_nodes
        weight = 1 / (1 + np.exp(-10 * (progress - 0.5)))

        # Penalty term for revisiting nodes
        penalty = 0.1 * (1 - (remaining_nodes / total_nodes))

        # Calculate score with penalty
        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
