def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead horizon
        horizon = min(3, max(1, total_nodes // 3))
        lookahead_horizon = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node) / horizon

        # Non-linear weight and proximity penalty
        weight = 1.0 / (1.0 + (remaining_nodes ** 0.5))
        proximity_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / remaining_nodes
        score = immediate_distance - (1 - weight) * lookahead_distance + 0.3 * proximity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
