def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Dynamic bias factor: starts aggressive (global) and becomes more local as tour progresses
        bias_factor = (remaining_nodes / (remaining_nodes + 2)) ** 2

        # Score combines current distance (penalized) and destination distance (weighted dynamically)
        score = -current_distance * (1 - bias_factor) + dest_distance * bias_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
