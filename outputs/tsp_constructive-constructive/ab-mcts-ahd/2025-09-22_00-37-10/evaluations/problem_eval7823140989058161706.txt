import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Calculate centrality as inverse of average distance to other nodes
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = np.mean([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        centrality[node] = 1.0 / (avg_distance + 1e-6)

    # Normalize centrality
    total_centrality = sum(centrality.values())
    if total_centrality > 0:
        centrality = {node: c / total_centrality for node, c in centrality.items()}
    else:
        centrality = {node: 1.0 / len(unvisited_nodes) for node in unvisited_nodes}

    # Calculate weights combining distance, centrality, and destination bias
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        distance_weight = 1.0 / (distance + 1e-6)
        dest_bias = 1.0 / (distance_matrix[node][destination_node] + 1e-6) if destination_node != node else 0.0
        combined_weight = distance_weight * centrality[node] * (0.5 + 0.5 * dest_bias)
        weights.append(combined_weight)

    # Normalize weights
    total_weight = sum(weights)
    if total_weight > 0:
        weights = [w / total_weight for w in weights]
    else:
        weights = [1.0 / len(unvisited_nodes) for _ in weights]

    # Select next node
    next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]
    return next_node
