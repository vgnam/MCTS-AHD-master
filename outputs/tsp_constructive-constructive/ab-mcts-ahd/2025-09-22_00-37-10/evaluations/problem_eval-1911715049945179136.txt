def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    node_history = {}  # Track historical costs for nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight with nonlinear adjustment
        weight = 1.0 / (1.0 + remaining_nodes ** 1.5)

        # Penalty for high historical costs
        penalty = node_history.get(node, 0) * 0.2

        # Score with penalty
        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    # Update history for next iteration
    if next_node in node_history:
        node_history[next_node] += best_score
    else:
        node_history[next_node] = best_score

    # Probabilistic selection to escape local optima
    if remaining_nodes > 1 and random.random() < 0.1:  # 10% chance to explore
        candidates = [node for node in unvisited_nodes if node != next_node]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
