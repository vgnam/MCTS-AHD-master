def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        weight = 0.5 * (1 - (remaining_nodes - 1) / len(unvisited_nodes))

        # Normalized score with penalty for nodes far from destination
        penalty = (lookahead_distance - min(distance_matrix[node])) / max(distance_matrix[node]) if max(distance_matrix[node]) != 0 else 0
        score = immediate_distance - weight * lookahead_distance + 0.3 * penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
