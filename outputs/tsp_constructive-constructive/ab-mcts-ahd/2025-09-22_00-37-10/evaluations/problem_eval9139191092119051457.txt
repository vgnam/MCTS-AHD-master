def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    if num_unvisited == 1:
        return unvisited_nodes[0]

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 0.5 + (0.5 * (num_unvisited - 1) / (len(distance_matrix) - 1))

        # Additional heuristic: average distance to remaining unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1)

        # Score combines immediate, lookahead, and average distances
        score = immediate_distance - weight * lookahead_distance + 0.3 * avg_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
