def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight = 0.7 + (0.3 * (1 - remaining_nodes / len(distance_matrix)))

        # Secondary heuristic: average distance to remaining nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Combined score with dynamic weight and secondary heuristic
        score = immediate_distance + weight * lookahead_distance + 0.2 * avg_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
