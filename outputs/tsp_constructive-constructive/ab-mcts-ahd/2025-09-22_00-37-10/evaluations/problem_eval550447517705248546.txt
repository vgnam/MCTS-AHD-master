def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 0.5 + (0.5 * (num_unvisited / (num_unvisited + 1)))

        # Centrality score: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Combined score: immediate + lookahead + centrality
        score = immediate_distance - weight * lookahead_distance + 0.3 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
