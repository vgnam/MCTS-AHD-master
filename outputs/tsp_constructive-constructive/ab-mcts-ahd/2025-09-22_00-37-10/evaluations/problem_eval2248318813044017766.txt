def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function for smooth transition
        sigmoid_weight = 1 / (1 + math.exp(-0.2 * (remaining_nodes - total_nodes / 2)))

        # Centrality penalty to avoid revisiting high-traffic nodes
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Combined score with dynamic weighting and centrality adjustment
        score = immediate_distance + sigmoid_weight * lookahead_distance + 0.1 * centrality_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
