def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and current node's centrality
        centrality_weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
        distance_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))

        # Penalize nodes too far from destination
        penalty = 0.1 * (lookahead_distance - distance_matrix[current_node][destination_node])

        score = immediate_distance + centrality_weight * lookahead_distance + distance_weight * penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
