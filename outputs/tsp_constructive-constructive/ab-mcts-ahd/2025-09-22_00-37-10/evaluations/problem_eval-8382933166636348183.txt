def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        normalized_lookahead = lookahead_distance / (distance_matrix[current_node][destination_node] + 1e-10)

        # Dynamic weight adjustment (from No.1)
        weight = 0.5 + 0.5 * (1 - remaining_nodes / len(distance_matrix))

        # Bias factor decreasing as nodes are visited (from No.1)
        bias_factor = remaining_nodes / (remaining_nodes + 1)

        # Penalty term (from No.2)
        penalty = 1.0 - (remaining_nodes / (remaining_nodes + 1))

        # Combined score: prioritize immediate distance, balance lookahead with dynamic weight and bias factor
        score = immediate_distance + (1 - penalty) * (weight * normalized_lookahead) * bias_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
