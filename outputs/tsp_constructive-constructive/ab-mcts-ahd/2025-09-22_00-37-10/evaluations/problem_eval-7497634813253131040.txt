import random
    import math

    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)

        # Calculate average distance to all unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Dynamic weight incorporating average distance
        weight = 1.0 / (1.0 + remaining_nodes) + 0.5 * (avg_distance / max(distance_matrix[current_node][node] for node in unvisited_nodes))

        # Score with exponential penalty for lookahead distance
        score = immediate_distance - weight * math.exp(-lookahead_distance)
        scores.append(score)
        total_score += score

    # Select node with probability proportional to its score
    if total_score <= 0:
        # If all scores are negative, select the node with the highest score
        next_node = unvisited_nodes[scores.index(max(scores))]
    else:
        rand = random.uniform(0, total_score)
        cumulative = 0
        for i, node in enumerate(unvisited_nodes):
            cumulative += scores[i]
            if rand <= cumulative:
                next_node = node
                break

    return next_node
