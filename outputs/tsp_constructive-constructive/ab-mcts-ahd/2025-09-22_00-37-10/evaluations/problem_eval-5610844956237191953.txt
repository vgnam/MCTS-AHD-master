def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate average distance to nearby unvisited nodes
        nearby_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_nearby_distance = sum(nearby_distances) / len(nearby_distances) if nearby_distances else 0

        # Calculate variance of distances to nearby nodes
        variance = sum((d - avg_nearby_distance) ** 2 for d in nearby_distances) / len(nearby_distances) if nearby_distances else 0

        # Dynamic weight adjustment
        weight = 0.3 + 0.7 * (1 - remaining_ratio)

        # Novel scoring mechanism
        score = (immediate_distance + weight * lookahead_distance) * (1 + 0.1 * variance)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
