def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    candidate_nodes = []
    min_distance = float('inf')

    # Find nearest neighbors
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    # Calculate hybrid scores
    heuristic_scores = []
    remaining_nodes = len(unvisited_nodes)
    for node in candidate_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weight = 0.3 + 0.4 * (1.0 / (1.0 + remaining_nodes))  # Adjusted dynamic weight
        score = 0.7 * (1.0 / (immediate_distance + 1e-6)) + 0.3 * (1.0 / (lookahead_distance + 1e-6)) * weight
        heuristic_scores.append(score)

    # Normalize scores to probabilities
    total_score = sum(heuristic_scores)
    probabilities = [s / total_score for s in heuristic_scores]

    # Select node with weighted random choice
    next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]

    return next_node
