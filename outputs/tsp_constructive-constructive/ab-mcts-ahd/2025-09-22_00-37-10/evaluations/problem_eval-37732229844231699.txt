def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with sigmoid scaling
        weight = 1 / (1 + math.exp(-5 * (remaining_nodes / (remaining_nodes + 1))))

        # Penalty for revisiting nodes (avoid cycles)
        penalty = 0.1 if node in unvisited_nodes else 0

        # Score combines immediate distance, forward-looking estimate, and penalty
        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
