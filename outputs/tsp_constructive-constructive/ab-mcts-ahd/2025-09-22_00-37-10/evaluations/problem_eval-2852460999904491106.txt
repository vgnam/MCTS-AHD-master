import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Temperature parameter (decreases as nodes are visited)
    temp = 1.0 - (len(unvisited_nodes) / len(distance_matrix))

    # Calculate candidate nodes and distances
    candidate_nodes = []
    distances = []
    min_distance = float('inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
            distances = [distance]
        elif distance == min_distance:
            candidate_nodes.append(node)
            distances.append(distance)

    # Calculate heuristic scores
    heuristic_scores = []
    for i, node in enumerate(candidate_nodes):
        # Local component: inverse distance with temperature adjustment
        local_score = (1.0 / (distances[i] + 1e-6)) ** (1.0 - temp)

        # Global component: estimated remaining path cost
        heuristic = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        heuristic += distance_matrix[node][destination_node]  # Add return cost
        global_score = 1.0 / (heuristic + 1e-6)

        # Penalty for revisiting nodes (simplified)
        penalty = 1.0 - (0.5 * temp) if node in unvisited_nodes else 1.0

        # Combined score
        score = (0.6 * local_score + 0.4 * global_score) * penalty
        heuristic_scores.append(score)

    # Normalize scores to probabilities
    total_score = sum(heuristic_scores)
    probabilities = [s / total_score for s in heuristic_scores]

    # Select node with weighted random choice
    next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]

    return next_node
