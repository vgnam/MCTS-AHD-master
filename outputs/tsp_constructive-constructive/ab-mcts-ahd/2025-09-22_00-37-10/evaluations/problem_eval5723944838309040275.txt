def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Dynamic bias factor with exponential decay
        progress = (total_nodes - remaining_nodes) / total_nodes
        bias_factor = 0.5 * (1 - progress) + 0.5 * (1 - progress ** 2)

        # Novel scoring with adaptive weights
        score = -current_distance + bias_factor * dest_distance
        score += 0.1 * (dest_distance / (remaining_nodes + 1))  # Additional heuristic

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
