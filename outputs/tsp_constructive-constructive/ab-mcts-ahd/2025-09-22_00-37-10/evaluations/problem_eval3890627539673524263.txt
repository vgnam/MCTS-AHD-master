def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Track visited nodes to penalize frequent selections
    visited_count = {}
    for node in unvisited_nodes:
        visited_count[node] = visited_count.get(node, 0)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))

        # Penalize nodes visited more frequently
        penalty = 0.1 * visited_count[node]
        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    # Update visited count for the selected node
    visited_count[next_node] = visited_count.get(next_node, 0) + 1

    return next_node
