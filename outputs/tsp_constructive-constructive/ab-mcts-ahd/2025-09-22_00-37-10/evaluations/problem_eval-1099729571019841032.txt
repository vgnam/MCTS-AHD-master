def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to all other nodes
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        node_centrality = total_distance / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Exponential decay bias factor
        bias_factor = 0.5 ** (1 / num_unvisited) if num_unvisited > 0 else 0
        centrality_weight = 0.3 * (1 - bias_factor)

        score = -current_distance + bias_factor * dest_distance + centrality_weight * node_centrality

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
