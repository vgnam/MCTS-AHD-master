def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    alpha = 0.5 * (remaining_nodes / total_nodes)  # Decreases as more nodes are visited
    beta = 0.3 * (1 - remaining_nodes / total_nodes)  # Increases as more nodes are visited
    weight = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += distance_matrix[node][other_node]
        centrality /= max(1, remaining_nodes - 1)  # Avoid division by zero

        # Score combines immediate distance, lookahead distance, centrality, and dynamic weight
        score = (immediate_distance + alpha * lookahead_distance) / (1 + beta * centrality) - weight * lookahead_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
