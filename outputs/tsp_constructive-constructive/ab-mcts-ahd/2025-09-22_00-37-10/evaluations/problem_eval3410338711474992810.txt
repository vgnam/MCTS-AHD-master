def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate average distance to remaining unvisited nodes
        avg_remaining_distance = sum(distance_matrix[node][unvisited] for unvisited in unvisited_nodes) / num_unvisited

        # Dynamic exploration factor (decays over time)
        exploration_factor = (num_unvisited / (num_unvisited + 2)) ** 2

        # Compute score with weighted combination of distances
        score = -current_distance + exploration_factor * (dest_distance + avg_remaining_distance)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
