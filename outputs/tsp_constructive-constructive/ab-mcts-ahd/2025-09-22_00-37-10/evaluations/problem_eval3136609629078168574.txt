def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality of the current node (average distance to all other nodes)
        centrality = sum(distance_matrix[current_node]) / total_nodes

        # Dynamic weight based on remaining nodes and current node's centrality
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1))) * (centrality / max(distance_matrix[current_node]))

        # Score combines immediate distance, lookahead, and centrality
        score = immediate_distance + weight * lookahead_distance + (1 - weight) * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
