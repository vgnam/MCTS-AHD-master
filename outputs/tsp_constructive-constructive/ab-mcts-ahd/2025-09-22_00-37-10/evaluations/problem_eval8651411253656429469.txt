def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight_factor = 1.0 - (0.3 * (remaining_nodes / (remaining_nodes + 1)))
        score = distance_to_current + weight_factor * distance_to_destination

        # Additional heuristic: consider the node's potential to reduce the total path length
        if remaining_nodes > 1:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            score += 0.2 * avg_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
