def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    unvisited_count = len(unvisited_nodes)

    if unvisited_count == 0:
        return destination_node

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / unvisited_count

        # Dynamic bias factor: exponential decay with visited nodes
        bias_factor = (unvisited_count / (unvisited_count + 1)) ** 2

        # Score combines immediate distance, destination proximity, and centrality
        score = -current_distance + bias_factor * dest_distance - 0.3 * centrality

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
