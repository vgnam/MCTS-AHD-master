def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 - (1.0 / (1.0 + remaining_nodes))  # Decreases as remaining_nodes decreases

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on node density and remaining steps
        density_weight = 0.5 * (1.0 / (1.0 + len(unvisited_nodes))) if remaining_nodes > 1 else 0.0
        lookahead_weight = 0.3 + density_weight

        # Probabilistic penalty for revisiting destination early
        penalty = 0.1 * immediate_distance * (1.0 - temperature) if (remaining_nodes > 1 and node == destination_node) else 0

        # Combine with temperature-based stochasticity
        score = immediate_distance + lookahead_weight * lookahead_distance + penalty
        score *= (1.0 + temperature * (0.5 - 0.5 * (1.0 - temperature)))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
