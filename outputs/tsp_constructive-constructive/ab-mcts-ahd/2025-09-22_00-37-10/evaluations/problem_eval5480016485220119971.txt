def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        if total_unvisited > 1:
            weight_factor = 0.7 * (total_unvisited / (total_unvisited + 1))
        else:
            weight_factor = 0.7

        # Centrality penalty: higher penalty for more central nodes (higher average distance to other nodes)
        centrality_penalty = sum(distance_matrix[node]) / (len(distance_matrix[node]) - 1)

        score = immediate_distance + weight_factor * lookahead_distance + 0.3 * centrality_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
