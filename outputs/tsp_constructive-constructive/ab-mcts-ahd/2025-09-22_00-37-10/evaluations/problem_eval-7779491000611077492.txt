def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight = max(0.1, 0.5 * np.exp(-0.5 * total_unvisited))  # Exponential weight decay

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        normalized_lookahead = lookahead_distance / (distance_matrix[current_node][destination_node] + 1e-6)
        score = immediate_distance + weight * normalized_lookahead

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
