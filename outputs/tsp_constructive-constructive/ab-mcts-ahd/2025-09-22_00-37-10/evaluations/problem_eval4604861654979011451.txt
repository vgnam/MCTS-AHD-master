def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    λ = 0.7 * (1 + 0.5 * (1 - num_unvisited / (num_unvisited + 1)))  # Dynamic λ adjustment
    ρ = 0.3 / (distance_matrix[current_node][destination_node] + 1)  # Recency penalty factor

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        recency_penalty = ρ * (1 if node in [current_node] else 0)  # Penalize recency
        score = immediate_distance + λ * lookahead_distance + recency_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
