def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        dynamic_weight = 1.0 / (centrality + 1)  # Higher centrality reduces lookahead influence

        # Combine immediate and lookahead with dynamic weight
        score = -immediate_distance + dynamic_weight * lookahead_distance

        # Add probabilistic element based on relative score
        if remaining_nodes > 1:
            score *= (1.0 + (0.1 * (remaining_nodes / total_nodes)))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
