def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    scores = []
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    gamma = 0.7 * (remaining_nodes / total_nodes)
    delta = 0.5 * (1 - remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        detour = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        centrality = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += distance_matrix[node][other_node]
        centrality /= max(1, remaining_nodes - 1)

        # Dynamic penalty for revisiting nodes (higher penalty as tour progresses)
        penalty = 0.3 * (1 - remaining_nodes / total_nodes) * (total_nodes - remaining_nodes)

        score = immediate_distance + gamma * centrality - delta * detour - penalty
        scores.append(score)

    # Softmax selection to allow probabilistic exploration
    exp_scores = [math.exp(-s) for s in scores]
    sum_exp = sum(exp_scores)
    probs = [exp / sum_exp for exp in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
