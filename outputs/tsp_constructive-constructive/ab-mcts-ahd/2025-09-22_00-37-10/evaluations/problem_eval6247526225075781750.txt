def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    temperature = 1 - progress_ratio

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        centrality = sum(1 for n in range(len(distance_matrix)) if n != node and distance_matrix[node][n] < float('inf'))
        centrality_score = 1 / (1 + centrality)

        weight_immediate = 0.6 * (1 - progress_ratio) + 0.4
        weight_lookahead = 0.4 * (1 - progress_ratio) + 0.2
        weight_centrality = 0.3 * progress_ratio

        score = (weight_immediate * immediate_distance +
                 weight_lookahead * lookahead_distance +
                 weight_centrality * centrality_score)

        if temperature > 0:
            score *= (1 + (temperature * np.random.uniform(-0.1, 0.1)))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
