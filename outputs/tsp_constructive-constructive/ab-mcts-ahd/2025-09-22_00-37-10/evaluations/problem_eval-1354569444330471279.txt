def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    bias_factor = (1 - progress_ratio) ** 2 + 0.1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        distance_entropy = -sum((distance_matrix[node][n] / sum(distance_matrix[node])) * np.log2(distance_matrix[node][n] / sum(distance_matrix[node])) for n in unvisited_nodes if distance_matrix[node][n] > 0)

        weighted_immediate = immediate_distance * (1 + node_degree / total_nodes)
        weighted_lookahead = lookahead_distance * (1 - distance_entropy / np.log2(total_nodes))

        score = bias_factor * (0.6 * weighted_immediate + 0.4 * weighted_lookahead)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
