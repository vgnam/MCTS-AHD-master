def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight adjustment
    immediate_weight = 0.6 * (remaining_nodes / total_nodes)
    lookahead_weight = 0.3 * (1 - (remaining_nodes / total_nodes))
    centrality_weight = 0.1 * (total_nodes / remaining_nodes)  # Inverse relationship

    # Calculate centrality for each node (average distance to all others)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)

    # Calculate scores and apply softmax for probabilistic selection
    scores = []
    nodes = list(unvisited_nodes)
    for node in nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance + centrality_weight * centrality[node]
        scores.append(score)

    # Softmax to get probabilities
    exp_scores = [np.exp(-s) for s in scores]  # Lower scores are better
    probs = [exp / sum(exp_scores) for exp in exp_scores]

    # Select node probabilistically
    next_node = np.random.choice(nodes, p=probs)

    return next_node
