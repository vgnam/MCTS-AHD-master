def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    dynamic_weight = 0.5 if total_unvisited > 1 else 0.8  # Higher weight when few nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = 0.1 * distance_matrix[current_node][node] if total_unvisited < 3 else 0  # Penalize detours when few nodes left

        score = distance_to_current + dynamic_weight * distance_to_destination + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
