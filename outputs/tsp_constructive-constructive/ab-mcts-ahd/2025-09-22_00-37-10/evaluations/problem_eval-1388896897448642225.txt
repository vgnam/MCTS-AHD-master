import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    candidate_nodes = []
    bias_factor = 0.5 ** (1 / len(unvisited_nodes))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        if current_distance < min_distance:
            min_distance = current_distance
            candidate_nodes = [node]
        elif current_distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        weights = []
        for node in candidate_nodes:
            current_distance = distance_matrix[current_node][node]
            dest_distance = distance_matrix[node][destination_node]
            score = -current_distance * (1 + bias_factor) + bias_factor * dest_distance
            weights.append(score)
        weights = [w - min(weights) + 1e-6 for w in weights]  # Ensure positive weights
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
