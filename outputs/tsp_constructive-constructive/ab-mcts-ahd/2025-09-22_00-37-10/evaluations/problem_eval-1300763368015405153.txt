def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and path progress
        progress_factor = (total_nodes - remaining_nodes) / total_nodes
        weight = 0.5 * (1 - progress_factor) + 0.7 * progress_factor

        # Penalty for revisiting nodes (if applicable)
        penalty = 0.0 if node not in unvisited_nodes else 0.0

        # Heuristic for node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes

        # Combined score with centrality and penalty
        score = immediate_distance + weight * lookahead_distance + penalty - 0.2 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
