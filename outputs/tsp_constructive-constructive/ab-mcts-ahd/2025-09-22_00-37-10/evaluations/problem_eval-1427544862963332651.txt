importance in the graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weight = 1.0 / (1.0 + remaining_nodes)

        # Calculate node centrality (average distance to all other nodes)
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality = total_distance / max(1, len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Priority score: balance immediate, lookahead, and centrality
        score = (immediate_distance + (1 - weight) * lookahead_distance) / (1 + centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
