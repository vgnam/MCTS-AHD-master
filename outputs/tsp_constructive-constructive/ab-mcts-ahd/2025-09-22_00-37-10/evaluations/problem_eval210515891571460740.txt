def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)
    decay_factor = 0.5 ** (1 / total_unvisited) if total_unvisited > 0 else 1.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate node degree (number of unvisited neighbors)
        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)

        # Dynamic priority score with decay and degree weighting
        score = (-current_distance + decay_factor * dest_distance) * (1 + 0.1 * (1 / (node_degree + 1)))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
