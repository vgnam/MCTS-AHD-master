def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight: non-linear adaptation with centrality consideration
        if remaining_nodes == 1:
            weight = 1.0
        else:
            weight = 0.5 + 0.5 * (1 - (remaining_nodes / len(unvisited_nodes))) + 0.2 * (centrality / max(centrality, 1))

        score = immediate_distance + weight * lookahead_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
