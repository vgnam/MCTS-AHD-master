def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    candidate_nodes = []
    remaining_nodes = len(unvisited_nodes)

    # Calculate momentum factor based on path trends and remaining nodes
    momentum_factor = 0.5 * (1 - (remaining_nodes / len(distance_matrix))) ** 1.5

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        # Combine bias and momentum for weighted selection
        bias_factor = 0.7 * (remaining_nodes / (remaining_nodes + 1)) ** 2
        weights = []
        for node in candidate_nodes:
            distance_weight = bias_factor * distance_matrix[node][destination_node] - distance_matrix[current_node][node]
            momentum_weight = momentum_factor * (distance_matrix[current_node][node] / (distance_matrix[node][destination_node] + 1e-6))
            weights.append(distance_weight + momentum_weight)

        weights = [w - min(weights) + 1e-6 for w in weights]
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
