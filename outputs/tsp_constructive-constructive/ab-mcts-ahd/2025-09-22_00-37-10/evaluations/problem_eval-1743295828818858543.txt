def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to all remaining nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Dynamic weights: lookahead weight decreases, centrality weight increases
        lookahead_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))
        centrality_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))

        score = immediate_distance + lookahead_weight * lookahead_distance + centrality_weight * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
