def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with distance normalization
        distance_factor = immediate_distance / (sum(distance_matrix[current_node]) + 1e-6)
        weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1))) + 0.2 * distance_factor

        # Penalty for revisiting nodes to prevent cycles
        penalty = 0.1 if node in [current_node, destination_node] else 0.0
        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
