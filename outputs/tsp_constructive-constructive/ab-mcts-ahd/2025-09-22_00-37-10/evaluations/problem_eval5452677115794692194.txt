def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    alpha = 0.6 * (remaining_nodes / total_nodes) ** 2  # Quadratic decrease for exploration
    beta = 0.4 * (1 - (remaining_nodes / total_nodes) ** 0.5)  # Square-root increase for exploitation

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Novel centrality: weighted by inverse distance to current node
        centrality = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                weight = 1.0 / (1.0 + distance_matrix[node][other_node])
                centrality += weight * distance_matrix[node][other_node]
        centrality /= max(1, remaining_nodes - 1)

        # Novel lookahead: evaluate next two steps
        next_lookahead = float('inf')
        for next_node_candidate in unvisited_nodes:
            if next_node_candidate != node:
                next_lookahead = min(next_lookahead, distance_matrix[node][next_node_candidate] + distance_matrix[next_node_candidate][destination_node])

        # Combined score with novel components
        score = (immediate_distance + alpha * lookahead_distance + 0.2 * next_lookahead) / (1 + beta * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
