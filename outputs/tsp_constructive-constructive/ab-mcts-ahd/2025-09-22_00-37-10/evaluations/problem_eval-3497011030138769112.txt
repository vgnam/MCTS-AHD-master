def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate variance of distances to unvisited nodes
    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    mean_distance = sum(distances_to_unvisited) / remaining_nodes if remaining_nodes > 0 else 0
    variance = sum((d - mean_distance) ** 2 for d in distances_to_unvisited) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and variance
        weight = 0.5 + 0.5 * (1 - remaining_nodes / len(distance_matrix)) + 0.2 * variance

        # Penalize high variance in remaining distances
        score = immediate_distance - weight * lookahead_distance + 0.3 * variance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
