import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 + 0.5 * (1 - remaining_nodes / (remaining_nodes + 1))  # Dynamic weight based on progress

    candidate_nodes = []
    min_distance = float('inf')

    # Find nearest neighbors
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    # Calculate heuristic scores
    heuristic_scores = []
    for node in candidate_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        penalty = 0.1 * (1 / (1 + immediate_distance))  # Penalty for long immediate steps

        # Combined score with dynamic weight
        score = immediate_distance - weight * lookahead_distance + penalty
        heuristic_scores.append(score)

    # Normalize scores to probabilities (higher scores get lower probability)
    max_score = max(heuristic_scores)
    min_score = min(heuristic_scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in heuristic_scores]

    # Select node with weighted random choice
    next_node = random.choices(candidate_nodes, weights=normalized_scores, k=1)[0]

    return next_node
