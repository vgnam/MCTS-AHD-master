def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Dynamic weight based on remaining nodes and centrality
        dynamic_weight = (remaining_nodes / total_nodes) ** 1.5 * (1 + centrality / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 1))

        # Direction penalty: penalize nodes that are not in the general direction of the destination
        direction_vector = (distance_matrix[destination_node][current_node] - immediate_distance) / (distance_matrix[destination_node][current_node] + 1e-6)
        penalty = max(0, (1 - direction_vector) * immediate_distance)

        # Combined score
        score = immediate_distance + dynamic_weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
