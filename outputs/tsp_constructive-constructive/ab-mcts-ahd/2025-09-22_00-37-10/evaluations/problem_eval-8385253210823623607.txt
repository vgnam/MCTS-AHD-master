def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Calculate centroid of remaining nodes
    centroid = sum(unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        centroid_distance = abs(node - centroid)  # Euclidean distance approximation for simplicity

        # Dynamic weight factors
        immediate_weight = 0.4 + 0.6 * (remaining_nodes / (remaining_nodes + 1))
        lookahead_weight = 0.6 - 0.2 * (remaining_nodes / (remaining_nodes + 1))
        centroid_weight = 0.2 * (1 - remaining_nodes / (remaining_nodes + 1))

        # Penalty term for nodes far from centroid
        penalty = centroid_weight * centroid_distance

        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
