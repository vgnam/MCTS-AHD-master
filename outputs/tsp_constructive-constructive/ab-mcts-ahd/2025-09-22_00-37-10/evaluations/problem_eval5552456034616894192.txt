def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # including current_node

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Sigmoid-based weight adjustment
        progress = (total_nodes - remaining_nodes) / total_nodes
        weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid function centered at 0.5

        # Penalty for nodes already in the path (if applicable)
        penalty = 0
        if node in visited_path and len(visited_path) > 1:
            penalty = 0.5 * distance_matrix[visited_path[-2]][node]  # Penalize revisits

        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
