def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead weight: stronger when few nodes remain and closer to destination
        lookahead_weight = 0.5 + (0.5 * (1 - lookahead_distance / avg_distance_to_dest) if remaining_nodes <= 3 else 0.0)

        # Penalty for revisiting destination early
        penalty = 0.3 * immediate_distance if (remaining_nodes > 1 and node == destination_node) else 0

        # Additional factor: distance from current node to average of unvisited nodes
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        balance_factor = 0.2 * avg_distance_to_unvisited

        score = immediate_distance + lookahead_weight * lookahead_distance + penalty + balance_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
