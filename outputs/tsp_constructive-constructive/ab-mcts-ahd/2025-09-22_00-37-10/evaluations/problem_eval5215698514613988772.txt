def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 to include the current node
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        detour_penalty = max(0, (lookahead_distance - distance_matrix[current_node][destination_node]) / (distance_matrix[current_node][destination_node] + 1e-10))
        dynamic_weight = 1.0 - (visited_ratio ** 2)  # Weight decreases as more nodes are visited

        score = immediate_distance + dynamic_weight * (lookahead_distance + detour_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
