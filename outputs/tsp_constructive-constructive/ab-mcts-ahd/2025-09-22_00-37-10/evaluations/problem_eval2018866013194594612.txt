def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    candidate_nodes = []
    min_distance = float('inf')

    # Find nearest neighbors
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    # Calculate temperature (inverse of remaining nodes ratio)
    temperature = len(unvisited_nodes) / len(distance_matrix)

    # Calculate scores with temperature adjustment
    scores = []
    for node in candidate_nodes:
        # Inverse distance component
        inv_distance = 1.0 / (distance_matrix[current_node][node] + 1e-6)

        # Temperature-adjusted heuristic estimate
        heuristic = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        temp_adjusted = (1.0 / (heuristic + 1e-6)) ** (1.0 / temperature)

        # Combined score with dynamic weights
        weight = 0.5 + 0.4 * temperature
        score = weight * inv_distance + (1.0 - weight) * temp_adjusted
        scores.append(score)

    # Normalize scores to probabilities
    total_score = sum(scores)
    probabilities = [s / total_score for s in scores]

    # Select node with weighted random choice
    next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]

    return next_node
