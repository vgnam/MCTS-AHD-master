def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight based on remaining nodes (sigmoid function)
    weight = 1 / (1 + math.exp(-0.5 * (remaining_nodes - 5)))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Penalize revisiting nodes (simple cycle prevention)
        if node == destination_node and remaining_nodes > 1:
            penalty = 1000
        else:
            penalty = 0

        score = immediate_distance - weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
