def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 0.5 if remaining_nodes > 2 else 0.3

        # Look-ahead mechanism: estimate detour potential
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += (distance_matrix[node][other_node] - distance_matrix[current_node][other_node])

        score = distance_to_current + weight * distance_to_destination + 0.2 * detour_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
