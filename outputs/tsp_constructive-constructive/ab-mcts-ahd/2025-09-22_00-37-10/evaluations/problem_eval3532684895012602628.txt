def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    candidate_nodes = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        bias_factor = 0.5 + 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1))) ** 2
        weighted_scores = []

        for node in candidate_nodes:
            immediate_distance = distance_matrix[current_node][node]
            lookahead_distance = distance_matrix[node][destination_node]
            score = -immediate_distance + bias_factor * lookahead_distance
            weighted_scores.append(score)

        weights = [s - min(weighted_scores) + 1e-6 for s in weighted_scores]
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
