def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Calculate centrality of current node (average distance to all unvisited nodes)
    centrality = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes and centrality
        weight_immediate = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))
        weight_lookahead = 0.2 + (0.8 * (remaining_nodes / (remaining_nodes + 1)))
        weight_centrality = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))

        score = (weight_immediate * immediate_distance) + (weight_lookahead * lookahead_distance) + (weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
