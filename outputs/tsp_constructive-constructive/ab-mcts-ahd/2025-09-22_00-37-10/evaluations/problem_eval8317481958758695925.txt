def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    # Adaptive weight scaling
    progress_factor = (total_nodes - remaining_nodes) / total_nodes
    immediate_weight = 0.6 * (1 - progress_factor) + 0.2
    lookahead_weight = 0.4 * progress_factor + 0.2

    # Node diversity consideration
    node_degrees = [sum(row) for row in distance_matrix]
    avg_degree = sum(node_degrees) / len(node_degrees)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Diversity bonus for less connected nodes
        diversity_bonus = (avg_degree - node_degrees[node]) / avg_degree
        score = (immediate_weight * immediate_distance +
                 lookahead_weight * lookahead_distance -
                 0.2 * diversity_bonus)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
