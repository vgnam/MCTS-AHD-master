def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    candidate_nodes = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        angular_deviation = abs(current_distance - dest_distance) / (current_distance + dest_distance)
        bias_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        score = current_distance + bias_factor * (dest_distance + angular_deviation * current_distance)

        if score < min_distance:
            min_distance = score
            candidate_nodes = [node]
        elif score == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        weights = [1.0 / (score + 1e-6) for score in [distance_matrix[current_node][node] + bias_factor * (distance_matrix[node][destination_node] + angular_deviation * distance_matrix[current_node][node]) for node in candidate_nodes]]
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
