def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / num_unvisited

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on distance variance and remaining nodes
        variance = (immediate_distance - avg_distance) ** 2
        weight = (num_unvisited ** 2) / (num_unvisited + variance + 1)

        # Score combines immediate and lookahead with adaptive weight
        score = immediate_distance + weight * lookahead_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
