def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes with non-linear scaling
        weight = 0.3 + 0.7 * (1 - (remaining_nodes / total_nodes) ** 0.5)

        # Adaptive bias factor based on distance ratio
        distance_ratio = immediate_distance / (lookahead_distance + 1e-6)
        bias_factor = 1 / (1 + distance_ratio)

        # Penalty for revisits with exponential decay
        penalty = 0.2 * (0.8 ** remaining_nodes)

        # Novelty: Probabilistic selection factor
        prob_factor = (remaining_nodes / total_nodes) ** 0.3

        # Combined score with novel components
        score = (immediate_distance * (1 - weight) + lookahead_distance * weight) * bias_factor - penalty

        # Add probabilistic element to encourage exploration
        score += prob_factor * np.random.normal(0, 0.1)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
