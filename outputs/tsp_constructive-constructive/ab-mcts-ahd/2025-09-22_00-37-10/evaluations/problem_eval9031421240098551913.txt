importance" metric that combines distance, centrality, and proximity factors, with a non-linear weight that prioritizes short-term gains early while gradually shifting focus to long-term planning.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead horizon based on remaining nodes
        horizon = max(1, remaining_nodes // 2)
        lookahead_horizon = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node) / horizon

        # Node importance metric
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        proximity_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / remaining_nodes
        node_importance = (centrality + proximity_penalty) / 2

        # Non-linear weight
        weight = 1.0 / (1.0 + (remaining_nodes ** 0.3))

        # Score calculation with novel components
        score = (immediate_distance + 0.5 * lookahead_horizon - 0.2 * node_importance) * weight

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
