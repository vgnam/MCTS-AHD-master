def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    path_history = {node: 0 for node in unvisited_nodes}  # Simplified path history tracking

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        unvisited_count = len(unvisited_nodes)
        bias_factor = unvisited_count / (unvisited_count + 1)
        diversity_term = 1 / (1 + path_history[node])  # Encourages less-visited nodes
        memory_term = 0.1  # Weight for path history penalty

        score = -current_distance + bias_factor * dest_distance + diversity_term * (unvisited_count) - memory_term * path_history[node]

        if score > best_score:
            best_score = score
            next_node = node

    # Update path history (simplified for demonstration)
    if next_node is not None:
        path_history[next_node] += 1

    return next_node
