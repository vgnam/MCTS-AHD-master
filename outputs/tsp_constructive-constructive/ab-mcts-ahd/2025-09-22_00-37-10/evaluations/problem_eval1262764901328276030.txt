import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    candidate_nodes = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance == 0:
            continue  # Skip self
        # Calculate angular deviation from destination path
        if current_node != destination_node and node != destination_node:
            vec_current = (distance_matrix[current_node][destination_node] - distance_matrix[node][destination_node],
                          distance_matrix[destination_node][current_node] - distance_matrix[destination_node][node])
            vec_dest = (distance_matrix[current_node][destination_node],
                        -distance_matrix[destination_node][current_node])
            if vec_current[0] != 0 or vec_current[1] != 0:
                dot_product = vec_current[0] * vec_dest[0] + vec_current[1] * vec_dest[1]
                mag_current = math.sqrt(vec_current[0]**2 + vec_current[1]**2)
                mag_dest = math.sqrt(vec_dest[0]**2 + vec_dest[1]**2)
                angle = math.acos(dot_product / (mag_current * mag_dest + 1e-6))
                angular_weight = 1.0 / (angle + 1e-6)
            else:
                angular_weight = 1.0
        else:
            angular_weight = 1.0
        # Combined score: distance + angular deviation penalty
        score = distance + (1.0 - angular_weight) * distance_matrix[current_node][destination_node]

        if score < min_score:
            min_score = score
            candidate_nodes = [node]
        elif score == min_score:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in candidate_nodes]
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
