def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes (inspired by No.1)
        weight = 0.5 + 0.5 * (1 - remaining_nodes / total_nodes)

        # Bias factor decreasing as nodes are visited (inspired by No.1)
        bias_factor = remaining_nodes / (remaining_nodes + 1)

        # Penalty for revisits (inspired by No.1)
        penalty = 0.1 * (1 / (remaining_nodes + 1))

        # Non-linear decay factor (inspired by No.2)
        decay_factor = (remaining_nodes / total_nodes) ** 2

        # Combined score: balance immediate and lookahead distances, penalize revisits
        score = immediate_distance - decay_factor * (weight * lookahead_distance * bias_factor) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
