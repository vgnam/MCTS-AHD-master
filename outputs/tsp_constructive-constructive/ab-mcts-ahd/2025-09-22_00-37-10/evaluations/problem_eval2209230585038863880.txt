def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead weight: stronger when few nodes remain
        lookahead_weight = -0.5 + (0.3 if remaining_nodes <= 3 else 0.0)

        # Penalty for revisiting destination early
        penalty = 0.2 * immediate_distance if (remaining_nodes > 1 and node == destination_node) else 0

        score = immediate_distance + lookahead_weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
