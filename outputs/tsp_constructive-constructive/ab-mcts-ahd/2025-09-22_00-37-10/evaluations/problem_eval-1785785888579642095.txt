def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        decay_factor = (remaining_nodes / total_nodes) ** 1.5  # Adjusted non-linear decay
        weight = decay_factor * (1.0 / (1.0 + remaining_nodes * 0.5))  # Reduced weight impact
        penalty = max(0, (immediate_distance - 1.5 * lookahead_distance) ** 2)  # Quadratic penalty
        score = (1 - weight) * immediate_distance + weight * lookahead_distance - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
