def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    avg_distance_to_unvisited = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    min_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and spatial distribution
        weight = (1.0 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))) * (avg_distance_to_unvisited / max_distance)

        # Penalize nodes that are too far or too close
        distance_penalty = (immediate_distance - avg_distance_to_unvisited) / (max_distance - min_distance + 1e-6)
        lookahead_penalty = (lookahead_distance - avg_distance_to_unvisited) / (max_distance - min_distance + 1e-6)

        score = (immediate_distance + lookahead_distance) - weight * (distance_penalty + lookahead_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
