def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight combining local neighborhood and global optimization
        local_factor = 1.0 / (1.0 + immediate_distance)  # Prefer nodes closer to current
        global_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2  # Emphasize global as tour progresses
        weight = 0.6 * local_factor + 0.4 * global_factor

        # Additional consideration for potential local sub-tours
        neighborhood_score = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                neighborhood_score += distance_matrix[node][neighbor]
        neighborhood_score /= max(1, len(unvisited_nodes) - 1)

        score = immediate_distance + weight * lookahead_distance + 0.2 * neighborhood_score

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
