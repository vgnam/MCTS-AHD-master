def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead horizon
        horizon = min(remaining_nodes, 5)
        lookahead_horizon = sum(sorted(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)[:horizon]) / horizon

        # Dynamic weight and clustering penalty
        weight = (len(unvisited_nodes) + 1) / (remaining_nodes + 1)
        clustering_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes ** 2)
        score = weight * immediate_distance + lookahead_horizon + 0.3 * clustering_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
