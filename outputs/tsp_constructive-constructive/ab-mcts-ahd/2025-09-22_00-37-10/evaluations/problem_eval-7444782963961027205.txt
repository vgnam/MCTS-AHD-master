importance in the graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

        # Dynamic weight combining remaining nodes and centrality
        weight = (1.0 / (1.0 + remaining_nodes)) * (0.5 + 0.5 * (centrality / (sum(distance_matrix[node]) / len(distance_matrix[node])) if len(distance_matrix[node]) > 0 else 0))

        score = immediate_distance - weight * lookahead_distance + (1 - weight) * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
