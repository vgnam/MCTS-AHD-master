def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    # Dynamic weight based on the number of unvisited nodes
    weight = 0.5 + 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))

    # Penalty factor for nodes with high historical costs
    penalty = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Apply penalty to the score
        score = immediate_distance - weight * lookahead_distance + penalty[node]

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
