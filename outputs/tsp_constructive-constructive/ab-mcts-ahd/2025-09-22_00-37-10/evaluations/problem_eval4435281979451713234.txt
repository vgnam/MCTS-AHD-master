def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = 1 - (len(unvisited_nodes) / total_nodes)

    if not unvisited_nodes:
        return destination_node

    centrality_scores = {node: sum(distance_matrix[node]) / (len(distance_matrix) - 1) for node in unvisited_nodes}

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        centrality_weight = (centrality_scores[node] - min(centrality_scores.values())) / (max(centrality_scores.values()) - min(centrality_scores.values()) + 1e-6)

        bias_factor = (1 - progress_ratio) * 0.6 + 0.4
        history_factor = 0.9 ** (total_nodes - len(unvisited_nodes))

        score = (1 - centrality_weight) * (0.6 * immediate_distance + 0.4 * lookahead_distance) + \
                centrality_weight * (0.3 * immediate_distance + 0.7 * lookahead_distance)
        score *= bias_factor * history_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
