import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    candidate_nodes = []
    min_distance = float('inf')

    # Find all nodes with minimum distance
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    # Calculate dynamic bias factor based on remaining path length and destination proximity
    remaining_nodes = len(unvisited_nodes)
    dest_distance = distance_matrix[current_node][destination_node]
    bias_factor = 0.5 + 0.5 * (1 - min(dest_distance / max(1, min_distance), 1)) * (1 - math.exp(-remaining_nodes / 10))

    if destination_node in candidate_nodes:
        weights = [bias_factor if node == destination_node else (1 - bias_factor) / (len(candidate_nodes) - 1) for node in candidate_nodes]
    else:
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in candidate_nodes]

    # Normalize weights
    weights = [w / sum(weights) for w in weights]

    # Occasionally perform local search to reconsider the nearest neighbor
    if random.random() < 0.1 and len(candidate_nodes) > 1:
        next_node = random.choice(candidate_nodes)
    else:
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]

    return next_node
