def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        if remaining_nodes > total_nodes / 2:
            weight = 0.7  # More emphasis on immediate distance when many nodes remain
        else:
            weight = 0.3  # More emphasis on lookahead distance as fewer nodes remain

        # Normalized score with penalty for revisiting nodes
        penalty = 1.0 if node == destination_node else 1.0
        score = (immediate_distance - weight * lookahead_distance) * penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
