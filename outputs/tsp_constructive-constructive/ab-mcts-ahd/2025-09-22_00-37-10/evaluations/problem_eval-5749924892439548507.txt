def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    current_centrality = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1)) + 0.3 * (current_centrality / sum(sum(distance_matrix) for _ in range(len(distance_matrix))) * len(distance_matrix))

        penalty = 0
        if immediate_distance < current_centrality * 0.2:
            penalty = immediate_distance * 0.5

        score = immediate_distance + weight * lookahead_distance - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
