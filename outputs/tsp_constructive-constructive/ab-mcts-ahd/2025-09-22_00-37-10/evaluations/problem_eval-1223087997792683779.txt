def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Non-linear scaling factor with penalty for revisited nodes
        weight = (remaining_nodes ** 1.5) / (1.0 + remaining_nodes * 0.8)
        penalty = 0.1 * (1.0 / (1.0 + remaining_nodes))  # Reduce penalty as tour progresses

        score = immediate_distance + weight * lookahead_distance - penalty * (1.0 if node in unvisited_nodes else 0.0)
        scores.append((node, score))

    # Rank nodes by score and select with probability based on rank
    ranked_nodes = sorted(scores, key=lambda x: x[1])
    probabilities = [1.0 / (i + 1) for i in range(len(ranked_nodes))]
    probabilities = [p / sum(probabilities) for p in probabilities]

    selected_index = np.random.choice(len(ranked_nodes), p=probabilities)
    next_node = ranked_nodes[selected_index][0]

    return next_node
