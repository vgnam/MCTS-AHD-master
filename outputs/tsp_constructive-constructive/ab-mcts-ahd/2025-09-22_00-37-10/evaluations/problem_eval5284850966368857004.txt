import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_inverse_score = 0.0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        dynamic_weight = min(0.5, 0.3 * (immediate_distance / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))))
        combined_score = immediate_distance + dynamic_weight * lookahead_distance
        inverse_score = 1.0 / (combined_score + 1e-6)  # Avoid division by zero
        scores.append((node, inverse_score))
        total_inverse_score += inverse_score

    if total_inverse_score == 0:
        return random.choice(unvisited_nodes)

    rand_val = random.random() * total_inverse_score
    cumulative = 0.0
    for node, inverse_score in scores:
        cumulative += inverse_score
        if rand_val <= cumulative:
            return node

    return next_node
