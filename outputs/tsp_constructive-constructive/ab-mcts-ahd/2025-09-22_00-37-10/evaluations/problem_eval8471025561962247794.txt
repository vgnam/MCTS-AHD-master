def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))

    # Initialize or update node performance tracking (simplified reinforcement learning)
    if not hasattr(select_next_node, 'node_bias'):
        select_next_node.node_bias = {node: 1.0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight with historical bias
        weight = base_weight * select_next_node.node_bias[node]
        score = immediate_distance + weight * lookahead_distance

        if score < best_score:
            best_score = score
            next_node = node

    # Update bias for the selected node (simplified reinforcement)
    if next_node is not None:
        select_next_node.node_bias[next_node] *= 1.1  # Reward frequent selection

    return next_node
