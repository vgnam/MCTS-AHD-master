import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    candidate_nodes = []
    max_score = -float('inf')

    for node in unvisited_nodes:
        dist_to_current = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]

        # Heuristic for path reduction: favor nodes that reduce the total path length
        path_reduction = (distance_matrix[current_node][destination_node] -
                          (dist_to_current + dist_to_dest))

        # Dynamic weight combining distance and path reduction
        score = (1.0 / (dist_to_current + 1e-6)) * (1.0 / (dist_to_dest + 1e-6)) * (1 + path_reduction)

        if score > max_score:
            max_score = score
            candidate_nodes = [node]
        elif score == max_score:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        weights = []
        for node in candidate_nodes:
            dist_to_current = distance_matrix[current_node][node]
            dist_to_dest = distance_matrix[node][destination_node]
            path_reduction = (distance_matrix[current_node][destination_node] -
                              (dist_to_current + dist_to_dest))
            weight = (1.0 / (dist_to_current + 1e-6)) * (1.0 / (dist_to_dest + 1e-6)) * (1 + path_reduction)
            weights.append(weight)
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
