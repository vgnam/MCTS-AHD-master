def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    scaling_factor = (remaining_nodes ** 0.5) / (1 + avg_distance)

    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weight = scaling_factor * (1 / (1 + remaining_nodes * 0.3))
        score = immediate_distance + weight * lookahead_distance
        candidates.append((node, score))

    if not candidates:
        return random.choice(unvisited_nodes)

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:min(3, len(candidates))]
    selected_node = random.choices([c[0] for c in top_candidates], weights=[1/s for s in [c[1] for c in top_candidates]])[0]

    return next_node
