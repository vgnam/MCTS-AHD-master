def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        dynamic_weight = 1.0 / (remaining_nodes + 1)
        score = immediate_distance + dynamic_weight * lookahead_distance
        scores.append(score)

    # Calculate softmax probabilities
    exp_scores = [math.exp(-score) for score in scores]
    sum_exp = sum(exp_scores)
    probabilities = [exp / sum_exp for exp in exp_scores]

    # Select node based on probabilities
    selected_index = np.random.choice(len(unvisited_nodes), p=probabilities)
    next_node = unvisited_nodes[selected_index]

    return next_node
