def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Dynamic bias factor: emphasizes global optimization early, refines locally later
        progress_ratio = (total_unvisited - len(unvisited_nodes) + 1) / total_unvisited
        bias_factor = 1 - (progress_ratio ** 2)  # Non-linear decay

        # Weighted score: prioritize both immediate distance and progress toward destination
        score = -current_distance + bias_factor * (1 / (1 + dest_distance))  # Inverse distance for destination

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
