def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight based on remaining nodes and historical performance
    weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))
    weight *= (1 + 0.1 * (sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)))

    # Penalize nodes that frequently lead to poor lookahead
    penalty = {}
    for node in unvisited_nodes:
        penalty[node] = 0.1 * (distance_matrix[node][destination_node] / sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        score = immediate_distance + weight * lookahead_distance - penalty[node]

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
