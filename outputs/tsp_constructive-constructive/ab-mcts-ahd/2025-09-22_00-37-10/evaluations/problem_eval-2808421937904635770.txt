def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        decay_factor = remaining_nodes / total_nodes  # Linear decay
        weight = 1.0 - decay_factor  # Prioritize long-term efficiency
        penalty = max(0, immediate_distance - 1.5 * lookahead_distance)  # Less aggressive penalty
        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
