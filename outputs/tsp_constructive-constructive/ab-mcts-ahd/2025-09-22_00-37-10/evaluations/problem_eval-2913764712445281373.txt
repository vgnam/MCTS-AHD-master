def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 * (1.0 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))) / (1.0 + remaining_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Penalty for revisiting nearby nodes (avoid cycles)
        penalty = 0
        if immediate_distance < min(distance_matrix[node][other] for other in unvisited_nodes if other != node):
            penalty = immediate_distance * 0.2

        score = immediate_distance + weight * lookahead_distance + centrality + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
