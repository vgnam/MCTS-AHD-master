def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights based on remaining nodes and historical performance
    gamma = 0.6 * (remaining_nodes / total_nodes) + 0.2 * (1 - remaining_nodes / total_nodes)
    delta = 0.4 * (1 - remaining_nodes / total_nodes) + 0.3 * (remaining_nodes / total_nodes)

    # Track historical performance (simplified as average detour reduction)
    historical_performance = 0.0
    if remaining_nodes < total_nodes:
        historical_performance = sum(distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        detour = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node) / max(1, remaining_nodes - 1)

        # Score combines immediate distance, detour, centrality, and historical performance
        score = -immediate_distance + gamma * centrality - delta * detour + 0.1 * historical_performance

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
