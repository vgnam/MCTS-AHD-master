import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    candidate_nodes = []
    weights = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0 and n != current_node)

        # Calculate weight: inverse distance, degree, and destination bias
        destination_bias = 1.0 / (distance_matrix[node][destination_node] + 1e-6)
        weight = (1.0 / (distance + 1e-6)) * (degree + 1) * destination_bias
        weights.append(weight)
        candidate_nodes.append(node)

    if not candidate_nodes:
        return destination_node

    # Normalize weights and select
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    next_node = random.choices(candidate_nodes, weights=normalized_weights, k=1)[0]

    return next_node
