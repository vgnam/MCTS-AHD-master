def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.5  # Controls the rate of weight adjustment

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        dynamic_weight = 1.0 / (1 + math.exp(-decay_factor * remaining_nodes))  # Sigmoid-based weight
        revisit_penalty = 1.0 / (1 + distance_matrix[current_node][node])  # Penalize revisiting nodes
        score = immediate_distance + dynamic_weight * lookahead_distance - revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
