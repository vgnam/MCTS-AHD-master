def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for destination distance
        weight = 0.2 + 0.8 * (1 - (distance_to_destination / sum(distance_matrix[node][n] for n in unvisited_nodes) if unvisited_nodes else 1))

        # Penalty for nodes too far from current node
        penalty = 1.5 if distance_to_current > 2 * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited else 1

        score = penalty * (distance_to_current + weight * distance_to_destination)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
