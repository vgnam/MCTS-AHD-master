def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Dynamic weights based on remaining nodes
        weight_immediate = 0.6 if num_unvisited > 1 else 1.0
        weight_lookahead = 0.3 if num_unvisited > 1 else 0.0
        weight_centrality = 0.1 if num_unvisited > 1 else 0.0

        score = (weight_immediate * immediate_distance) - (weight_lookahead * lookahead_distance) + (weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
