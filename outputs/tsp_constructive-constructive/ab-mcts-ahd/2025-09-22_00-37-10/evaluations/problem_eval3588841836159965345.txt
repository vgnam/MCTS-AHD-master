def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        bias_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        score = -current_distance + bias_factor * dest_distance

        # Lookahead: Evaluate the next best option for the subsequent step
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            next_best_distance = min(distance_matrix[node][n] for n in remaining_nodes)
            score -= 0.2 * next_best_distance  # Penalize high next-step distances

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
