def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with non-linear scaling
        progress = (total_nodes - remaining_nodes) / total_nodes
        weight = 0.3 + 0.7 * (progress ** 2)

        # Penalty for nodes already close to the current path
        penalty = 0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                penalty += distance_matrix[node][neighbor] * 0.1

        score = immediate_distance + weight * lookahead_distance - penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
