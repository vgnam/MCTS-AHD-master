import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Novelty factor: penalize nodes that have been visited frequently in partial tours
        novelty_weight = math.log(1 + sum(row[node] for row in distance_matrix) / total_nodes)

        # Dynamic weight: logarithmic decay based on remaining nodes
        weight = 1.0 / (1.0 + math.log(1 + remaining_nodes))

        # Combined score with novelty factor
        score = immediate_distance + weight * lookahead_distance + novelty_weight

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
