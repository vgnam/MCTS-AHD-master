def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_unvisited = remaining_nodes + 1  # Include current node

    # Dynamic weight adjustment based on remaining nodes and heuristic estimate
    base_weight = 0.3 * (1.0 + (0.7 * (remaining_nodes / total_unvisited)))
    heuristic_penalty = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / (total_unvisited ** 1.5)
    weight = base_weight * (1.0 + heuristic_penalty / (distance_matrix[current_node][destination_node] + 1e-6))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        detour_penalty = max(0, immediate_distance + lookahead_distance - distance_matrix[current_node][destination_node])
        score = immediate_distance + weight * (lookahead_distance + 0.5 * detour_penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
