def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)

        # Dynamic weight based on remaining nodes (like No.1)
        weight = 0.5 + 0.5 * (1 - remaining_nodes / len(distance_matrix))

        # Bias factor decreasing as nodes are visited (like No.1)
        bias_factor = remaining_nodes / (remaining_nodes + 1)

        # Penalty for potential dead-end nodes (like No.2)
        penalty = 0.2 * (immediate_distance + lookahead_distance) if remaining_nodes == 1 else 0

        # Combined score: prioritize immediate distance, balance lookahead, and penalize dead-ends
        score = immediate_distance + bias_factor * (weight * lookahead_distance) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
