def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        progress = (total_nodes - remaining_nodes) / total_nodes
        weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid centered at 0.5

        # Node density factor: higher penalty if node is isolated
        node_density = sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] < 1.5 * immediate_distance)
        density_penalty = 1 / (1 + node_density)  # Penalize sparse regions

        # Penalty term based on distance ratio
        distance_ratio = immediate_distance / lookahead_distance if lookahead_distance > 0 else 1
        penalty = max(0, (distance_ratio - 1) * immediate_distance)

        # Combined score calculation
        score = immediate_distance + weight * lookahead_distance + density_penalty * penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
