def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1  # +1 to account for the current node

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        distance_to_dest = distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment
        weight = 0.5 + (0.5 * (remaining_nodes / total_nodes)) * (1 - (distance_to_dest / (distance_matrix.max() + 1e-10)))

        # Novel scoring mechanism
        score = (1 - weight) * immediate_distance + weight * lookahead_distance
        score += 0.1 * (remaining_nodes / total_nodes) * (1 - (immediate_distance / (distance_matrix.max() + 1e-10)))

        # Add probabilistic exploration
        if next_node is None or (score > best_score) or (random.random() < 0.1):
            best_score = score
            next_node = node

    return next_node
