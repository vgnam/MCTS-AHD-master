def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_distance = float('inf')
    candidate_nodes = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        if immediate_distance < min_distance:
            min_distance = immediate_distance
            candidate_nodes = [node]
        elif immediate_distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        weights = []
        for node in candidate_nodes:
            immediate_distance = distance_matrix[current_node][node]
            lookahead_distance = distance_matrix[node][destination_node]
            weight = 0.5 + 0.5 * (1 - remaining_nodes / len(distance_matrix))
            penalty = 0.1 * (1 / (remaining_nodes + 1))
            score = immediate_distance - weight * lookahead_distance + penalty
            weights.append(1.0 / (score + 1e-6))
        weights = [w / sum(weights) for w in weights]
        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
