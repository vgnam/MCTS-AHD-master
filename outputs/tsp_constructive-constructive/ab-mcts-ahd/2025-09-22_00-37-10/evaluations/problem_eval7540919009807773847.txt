import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    candidate_nodes = []

    # Step 1: Find the nearest nodes
    min_distance = float('inf')
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    # Step 2: Apply penalty based on detour to destination
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        adjusted_weights = []
        for node in candidate_nodes:
            detour_penalty = distance_matrix[node][destination_node] - dest_distance
            adjusted_distance = distance_matrix[current_node][node] + max(0, detour_penalty)
            adjusted_weights.append(1.0 / (adjusted_distance + 1e-6))
    else:
        adjusted_weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in candidate_nodes]

    # Step 3: Weighted random selection
    adjusted_weights = [w / sum(adjusted_weights) for w in adjusted_weights]
    next_node = random.choices(candidate_nodes, weights=adjusted_weights, k=1)[0]

    return next_node
