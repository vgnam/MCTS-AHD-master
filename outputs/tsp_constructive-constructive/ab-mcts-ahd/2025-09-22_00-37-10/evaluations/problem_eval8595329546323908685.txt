def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustment (similar to No.1)
    weight = 0.5 + 0.5 * (1 - remaining_nodes / total_nodes)

    # Bias factor decreasing as nodes are visited (similar to No.1)
    bias_factor = remaining_nodes / (remaining_nodes + 1)

    # Penalty for revisits (similar to No.1)
    penalty = 0.1 * (1 / (remaining_nodes + 1))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes (similar to No.2)
        centrality = 0.0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += distance_matrix[node][other_node]
        centrality /= max(1, remaining_nodes - 1)  # Avoid division by zero

        # Combined score: prioritize immediate distance, balance lookahead, penalize revisits, and consider centrality
        score = (immediate_distance + bias_factor * (weight * lookahead_distance) - penalty) / (1 + centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
