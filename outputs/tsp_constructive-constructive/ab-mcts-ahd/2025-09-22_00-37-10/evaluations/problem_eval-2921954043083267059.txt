importance of immediate vs. lookahead distances while penalizing large angular deviations between current and destination paths.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        angular_deviation = abs(immediate_distance - lookahead_distance) / (immediate_distance + lookahead_distance)
        decay_factor = (remaining_nodes / total_nodes) ** 2
        weight = decay_factor * (1.0 / (1.0 + remaining_nodes))
        bias_factor = (remaining_nodes / total_nodes) ** 2
        score = immediate_distance - weight * lookahead_distance + bias_factor * (lookahead_distance - angular_deviation * immediate_distance)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
