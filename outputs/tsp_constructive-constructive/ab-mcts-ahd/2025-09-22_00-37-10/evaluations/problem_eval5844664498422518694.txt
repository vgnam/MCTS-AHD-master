def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    # Precompute average distance to remaining nodes for each candidate
    avg_distances = {}
    for node in unvisited_nodes:
        total_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        avg_distances[node] = total_dist / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Precompute node centrality (inverse of average distance to all nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_dist = sum(distance_matrix[node][other] for other in range(len(distance_matrix)))
        centrality[node] = 1 / (total_dist + 1)  # +1 to avoid division by zero

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead factor based on average remaining distances
        lookahead_factor = 0.5 + 0.4 * (avg_distances[node] / (sum(avg_distances.values()) / len(avg_distances) + 1))

        # Adaptive penalty that grows with unvisited nodes
        penalty = 0.1 * len(unvisited_nodes) * (immediate_distance + lookahead_distance) if len(unvisited_nodes) > 1 else 0

        # Combine all factors with centrality weighting
        score = (1 - centrality[node]) * immediate_distance + \
                lookahead_factor * lookahead_distance + \
                penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
