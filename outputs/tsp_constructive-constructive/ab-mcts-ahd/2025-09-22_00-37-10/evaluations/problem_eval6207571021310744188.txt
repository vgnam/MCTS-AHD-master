def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and a diversity factor
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
        diversity_factor = 1.0 - (sum(distance_matrix[node]) / (total_nodes * max(distance_matrix[node]))) if total_nodes > 0 else 0.0
        score = immediate_distance + weight * lookahead_distance + diversity_factor * immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
