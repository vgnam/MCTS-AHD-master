import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    scores = []
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + math.exp(-0.1 * remaining_nodes))  # Sigmoid-based exploration factor

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        weight = exploration_factor * (1.0 / (1.0 + remaining_nodes))  # Dynamic weight with exploration
        score = immediate_distance - weight * lookahead_distance
        scores.append((node, score))

    # Softmax to convert scores to probabilities
    max_score = max(score[1] for score in scores)
    exp_scores = [math.exp(score[1] - max_score) for score in scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [exp_score / sum_exp_scores for exp_score in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([score[0] for score in scores], weights=probabilities, k=1)[0]
    return next_node
