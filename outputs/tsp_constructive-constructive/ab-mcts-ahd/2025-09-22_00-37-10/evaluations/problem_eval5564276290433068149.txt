def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    history_factor = 0.3  # Penalty for recent node visits
    time_decay = len(unvisited_nodes) / (len(unvisited_nodes) + 2)  # Dynamic decay factor

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Penalize nodes that were recently visited
        if node in recent_nodes:  # Assuming recent_nodes is a global or passed list
            penalty = history_factor * current_distance
        else:
            penalty = 0

        # Dynamic bias: prioritize destination proximity early, then shift to distance
        bias_factor = time_decay * 0.7 + (1 - time_decay) * 0.3
        score = -current_distance + bias_factor * dest_distance - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
