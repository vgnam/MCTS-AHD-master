def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight adjustment
    immediate_weight = 0.6 * (remaining_nodes / total_nodes)
    lookahead_weight = 0.4 * (1 - (remaining_nodes / total_nodes))

    # Calculate centroid of remaining nodes
    centroid = sum(unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Centrality penalty: nodes closer to centroid get lower penalty
        centrality_penalty = abs(node - centroid) / (centroid + 1e-6)  # Avoid division by zero

        # Combined score with centrality penalty
        score = immediate_weight * immediate_distance + lookahead_weight * lookahead_distance + 0.2 * centrality_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
