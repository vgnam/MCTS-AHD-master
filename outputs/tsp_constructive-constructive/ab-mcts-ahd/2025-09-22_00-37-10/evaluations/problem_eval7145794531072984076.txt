importance metric, with a non-linear decay factor that prioritizes local optimization early while gradually incorporating global considerations, and a probabilistic selection mechanism that balances exploration and exploitation based on relative node scores.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    # Calculate node importance (centrality-like metric)
    node_importance = {}
    for node in unvisited_nodes:
        importance = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)
        node_importance[node] = importance

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Adaptive weighting based on remaining nodes
        weight = 0.7 * (remaining_nodes / total_nodes) + 0.3 * (1 - remaining_nodes / total_nodes)

        # Non-linear decay factor with exponential component
        decay_factor = (remaining_nodes / total_nodes) ** 3 * math.exp(-remaining_nodes / total_nodes)

        # Node selection score combining multiple factors
        score = (node_importance[node] * weight * decay_factor) / (immediate_distance + 1e-6) + (1 - weight) * (1 / (lookahead_distance + 1e-6))

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic selection based on relative scores
    if remaining_nodes > 1:
        scores = []
        for node in unvisited_nodes:
            immediate_distance = distance_matrix[current_node][node]
            lookahead_distance = distance_matrix[node][destination_node]
            weight = 0.7 * (remaining_nodes / total_nodes) + 0.3 * (1 - remaining_nodes / total_nodes)
            decay_factor = (remaining_nodes / total_nodes) ** 3 * math.exp(-remaining_nodes / total_nodes)
            score = (node_importance[node] * weight * decay_factor) / (immediate_distance + 1e-6) + (1 - weight) * (1 / (lookahead_distance + 1e-6))
            scores.append(score)

        total_score = sum(scores)
        if total_score > 0:
            probs = [s / total_score for s in scores]
            next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
