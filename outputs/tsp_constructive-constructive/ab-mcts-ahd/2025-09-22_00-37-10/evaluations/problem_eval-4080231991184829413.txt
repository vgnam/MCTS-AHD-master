def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Dynamic weight: balances immediate, lookahead, and centrality
        weight_immediate = 1.0 / (1.0 + remaining_nodes)
        weight_lookahead = 1.0 - weight_immediate
        weight_centrality = 0.5 * (1.0 - (remaining_nodes / len(distance_matrix)))

        score = (weight_immediate * immediate_distance +
                 weight_lookahead * lookahead_distance +
                 weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
