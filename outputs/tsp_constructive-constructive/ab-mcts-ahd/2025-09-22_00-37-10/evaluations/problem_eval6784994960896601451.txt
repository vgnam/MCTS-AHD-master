def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality /= max(1, len(unvisited_nodes) - 1)  # Avoid division by zero

        # Dynamic weight adjustment based on progress and centrality
        weight = 0.7 - 0.3 * visited_ratio  # Decrease weight as more nodes are visited
        weight += 0.1 * (centrality / max(distance_matrix[node][destination_node], 1))  # Adjust based on centrality

        score = immediate_distance * weight + lookahead_distance * (1 - weight)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
