def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 / (1.0 + math.exp(-(remaining_nodes - 5)))  # Sigmoid adjustment for dynamic weighting

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        penalty = 1.0 if lookahead_distance < 0.5 * distance_matrix[current_node][destination_node] else 0.0  # Penalize nodes too close to destination early
        score = immediate_distance + weight * lookahead_distance + penalty * immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
