import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    temperature = 0.5  # Initial temperature for probabilistic selection
    cooling_rate = 0.95  # Rate at which temperature decreases

    next_node = None
    min_distance = float('inf')
    candidate_nodes = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            candidate_nodes = [node]
        elif distance == min_distance:
            candidate_nodes.append(node)

    if len(candidate_nodes) > 1:
        # Calculate bias towards destination node
        destination_bias = [1.0 / (distance_matrix[node][destination_node] + 1e-6) for node in candidate_nodes]
        destination_bias = [b / sum(destination_bias) for b in destination_bias]

        # Combine distance and destination bias with temperature
        weights = [
            (1.0 / (distance_matrix[current_node][node] + 1e-6)) * destination_bias[i] * temperature
            for i, node in enumerate(candidate_nodes)
        ]
        weights = [w / sum(weights) for w in weights]

        next_node = random.choices(candidate_nodes, weights=weights, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    # Update temperature for next iteration
    temperature *= cooling_rate

    return next_node
