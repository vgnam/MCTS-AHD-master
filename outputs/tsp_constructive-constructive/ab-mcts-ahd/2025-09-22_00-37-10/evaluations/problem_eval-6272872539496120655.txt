def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality of current node (average distance to all unvisited nodes)
    centrality = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on centrality and remaining nodes
        weight = 0.3 + (0.7 * (1 - (remaining_nodes / (remaining_nodes + 5)))) * (centrality / max(distance_matrix[current_node][node] for node in unvisited_nodes if distance_matrix[current_node][node] > 0))

        # Novel scoring: balance immediate, lookahead, and centrality
        score = (0.5 * immediate_distance + 0.3 * lookahead_distance + 0.2 * centrality) * (1 - weight)

        # Probabilistic selection: favor higher scores as tour progresses
        if score > best_score or (score == best_score and remaining_nodes < 3):
            best_score = score
            next_node = node

    return next_node
