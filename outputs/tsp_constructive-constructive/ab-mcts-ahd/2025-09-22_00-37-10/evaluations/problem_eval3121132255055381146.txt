def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Adaptive weighting based on remaining nodes
        weight = 0.5 + 0.3 * (len(unvisited_nodes) / len(distance_matrix))

        # Penalty for potential dead-end nodes
        penalty = 0.2 * (immediate_distance + lookahead_distance) if len(unvisited_nodes) == 1 else 0

        score = immediate_distance + weight * lookahead_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
