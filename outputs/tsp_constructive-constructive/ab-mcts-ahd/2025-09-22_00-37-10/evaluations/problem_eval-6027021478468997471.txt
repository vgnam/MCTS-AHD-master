def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_reciprocal = 0.0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
        score = immediate_distance + weight * lookahead_distance
        reciprocal_score = 1.0 / (score + 1e-6)  # Avoid division by zero
        scores.append((node, reciprocal_score))
        total_reciprocal += reciprocal_score

    if total_reciprocal == 0:
        return unvisited_nodes[0]  # Fallback if all scores are zero

    probabilities = [(node, score / total_reciprocal) for node, score in scores]
    rand_val = random.random()
    cumulative_prob = 0.0

    for node, prob in probabilities:
        cumulative_prob += prob
        if rand_val <= cumulative_prob:
            return node

    return next_node
