def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to other unvisited nodes
        centrality = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += distance_matrix[node][other_node]
        centrality /= (remaining_nodes - 1) if remaining_nodes > 1 else 1

        # Dynamic bias factor decays over time
        bias_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2

        # Combined score: prioritize immediate distance, destination proximity, and centrality
        score = -current_distance + bias_factor * (dest_distance + centrality)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
