def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    total_nodes = len(distance_matrix)
    exploration_factor = (len(unvisited_nodes) / total_nodes) ** 2

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to all other nodes
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        normalized_centrality = node_centrality / (sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1)))

        score = (-current_distance + 0.7 * dest_distance) * (1 - exploration_factor) + normalized_centrality * exploration_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
