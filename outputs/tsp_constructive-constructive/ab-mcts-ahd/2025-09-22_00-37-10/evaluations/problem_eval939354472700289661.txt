def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        lookahead_distance = distance_matrix[node][destination_node]

        # Dynamic weight from No.2
        weight = 1.0 / (1.0 + remaining_nodes)

        # Non-linear decay factor from No.1
        decay_factor = (remaining_nodes / total_nodes) ** 2

        # Bias factor from No.3
        bias_factor = remaining_nodes / (remaining_nodes + 1)

        # Penalty for nodes too far from current relative to lookahead
        penalty = max(0, immediate_distance - 2 * lookahead_distance)

        # Combined score with adaptive weighting
        score = immediate_distance - decay_factor * (weight * lookahead_distance * bias_factor) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
