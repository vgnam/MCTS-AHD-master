def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_cost = float('inf')

    for node in unvisited_nodes:
        # Current cost to node and back to destination
        current_cost = distance_matrix[current_node][node] + distance_matrix[node][destination_node]

        # Lookahead: Evaluate the next best step from this node
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            next_best_cost = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
            total_cost = current_cost + next_best_cost
        else:
            total_cost = current_cost

        if total_cost < min_total_cost:
            min_total_cost = total_cost
            next_node = node

    if destination_node in unvisited_nodes and len(unvisited_nodes) == 1:
        next_node = destination_node

    return next_node
