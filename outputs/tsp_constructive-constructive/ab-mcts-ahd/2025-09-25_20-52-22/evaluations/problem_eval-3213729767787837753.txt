def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_distance = float('inf')
    candidate_nodes = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node
        candidate_nodes.append((node, distance))

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance:
            next_node = destination_node

    if len(candidate_nodes) > 1:
        candidate_nodes = [(node, dist) for node, dist in candidate_nodes if node != next_node]
        if candidate_nodes:
            total_distance = sum(dist for _, dist in candidate_nodes)
            probabilities = [(1 - (dist / total_distance)) for _, dist in candidate_nodes]
            probabilities = [p / sum(probabilities) for p in probabilities]
            next_node = np.random.choice([node for node, _ in candidate_nodes], p=probabilities)

    return next_node
