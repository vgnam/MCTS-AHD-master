def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate centrality for each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node]) / (total_nodes - 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes and centrality
        local_weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))
        global_weight = 1 - local_weight
        exploration_weight = 0.3 * (1 - centrality[node] / max(centrality.values())) if max(centrality.values()) != 0 else 0

        # Calculate score with exploration factor
        total_score = (local_weight / (distance_to_current + 1e-6)) + \
                      (global_weight / (distance_to_destination + 1e-6)) + \
                      (exploration_weight * (1 / (centrality[node] + 1e-6)))

        # Penalize nodes that are too close to the destination (unless few nodes remain)
        if remaining_nodes > 3:
            total_score *= (1 - 0.2 * (distance_to_destination / max(distance_matrix[node])))

        if total_score > best_score:
            best_score = total_score
            next_node = node

    return next_node
