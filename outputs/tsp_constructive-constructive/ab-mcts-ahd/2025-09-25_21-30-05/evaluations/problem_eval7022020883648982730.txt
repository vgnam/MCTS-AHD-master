def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 + 0.4 * (1 - remaining_nodes / (remaining_nodes + 1))  # Dynamic weight adjustment

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to other unvisited nodes for connectivity heuristic
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Combine distance-based and connectivity-based scoring
        total_score = (1 / (distance_to_current + 1e-6)) + weight_factor * (1 / (distance_to_destination + 1e-6)) + (0.3 / (avg_distance + 1e-6))

        if total_score > best_score:
            best_score = total_score
            next_node = node

    return next_node
