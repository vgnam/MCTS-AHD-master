def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))  # Dynamic weight based on remaining nodes
    destination_distance = distance_matrix[current_node][destination_node]
    penalty_threshold = 1.5 * destination_distance  # Penalty for nodes too far from destination

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = max(0, distance_to_destination - penalty_threshold)  # Apply penalty if too far
        total_score = (distance_to_current * (weight_factor * distance_to_destination)) + (0.3 * penalty)
        if total_score < best_score:
            best_score = total_score
            next_node = node
    return next_node
