def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1.0 + (1.0 / (remaining_nodes + 1))  # Weight increases as fewer nodes remain
    best_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_destination = distance_to_destination / (sum(distance_matrix[node]) / len(distance_matrix[node]))  # Normalize by average distance
        total_score = distance_to_current * (dynamic_weight * normalized_destination)
        if total_score < best_score:
            best_score = total_score
            next_node = node
    return next_node
