def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        transformed_distance = distance_to_current * (1 + 0.1 * (distance_to_destination / distance_matrix.max()))
        dynamic_weight = 1 / (1 + np.exp(-0.5 * (remaining_nodes - total_nodes / 2)))
        penalty = 0.2 * (1 - dynamic_weight) if node in unvisited_nodes else 0
        total_score = transformed_distance + (dynamic_weight * distance_to_destination) + penalty + np.random.uniform(0, 0.01)
        if total_score < best_score:
            best_score = total_score
            next_node = node
    return next_node
