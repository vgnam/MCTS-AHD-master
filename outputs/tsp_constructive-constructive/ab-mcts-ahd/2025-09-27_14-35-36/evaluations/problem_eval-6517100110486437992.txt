def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            weight_explore = 1.0 / (1.0 + remaining_nodes)
            weight_exploit = 1.0 - weight_explore
            weighted_mean = (weight_explore * distance_to_node) + (weight_exploit * distance_to_dest)
            penalty = math.exp(distance_to_node / distance_to_dest)
            score = weighted_mean * penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
