def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    visited_nodes = set()
    exploration_factor = 0.8
    decay_rate = 0.9

    total_distance = sum([distance_matrix[current_node][node] for node in unvisited_nodes])
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic priority score combining proximity, cumulative distance, and exploration-exploitation balance
        normalized_distance = distance_to_node / total_distance if total_distance > 0 else 0
        penalty = 1.0 + (1.5 * (node in visited_nodes) * pow(decay_rate, visited_nodes.count(node)))

        score = (exploration_factor * (distance_to_dest / (distance_to_node + 1e-6)) / (penalty + normalized_distance))

        if score > best_score:
            best_score = score
            next_node = node

    # Check if destination is closer than the selected node
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    visited_nodes.add(next_node)

    return next_node
