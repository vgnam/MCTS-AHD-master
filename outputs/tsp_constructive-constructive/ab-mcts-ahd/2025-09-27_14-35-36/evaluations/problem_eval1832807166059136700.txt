def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    visited_nodes = set()
    cumulative_distance = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Reduced penalty for revisiting nodes
        if node in visited_nodes:
            penalty = 1.2  # Lower penalty than original
        else:
            penalty = 1.0

        # Hybrid score combining proximity to destination and minimal path length increase
        score = (distance_to_dest * penalty) / (distance_to_node + 1)

        if score > best_score:
            best_score = score
            next_node = node

    # Early emphasis on reaching the destination
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if cumulative_distance == 0 and dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    visited_nodes.add(next_node)
    cumulative_distance += distance_matrix[current_node][next_node]

    return next_node
