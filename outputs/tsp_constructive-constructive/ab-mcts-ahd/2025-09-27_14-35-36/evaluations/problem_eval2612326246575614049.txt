def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes_factor = len(unvisited_nodes) / total_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            proximity_weight = 1 / distance_to_node
            predictive_weight = 1 / (distance_to_dest + (distance_to_node * remaining_nodes_factor))
            distance_ratio = distance_to_node / (distance_to_dest + 1e-10)
            score = (proximity_weight * 0.6 + predictive_weight * 0.4) * (1 / (1 + distance_ratio))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.85:
            next_node = destination_node

    return next_node
