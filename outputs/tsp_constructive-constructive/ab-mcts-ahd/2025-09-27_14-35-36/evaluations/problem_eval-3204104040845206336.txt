def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    unvisited_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        remaining_nodes_factor = (1 - unvisited_count / total_nodes) ** 2
        proximity_weight = 1 / (1 + distance_to_node)
        destination_influence = (unvisited_count / (unvisited_count + 1)) * (distance_to_dest / (1 + distance_to_node))
        score = (proximity_weight + destination_influence) * (1 / (1 + distance_to_node ** 2)) * (1 - remaining_nodes_factor + 0.5)
        scores.append((node, score))

    total_score = sum(score for node, score in scores)
    probabilities = [score / total_score for node, score in scores]

    next_node = random.choices([node for node, _ in scores], probabilities, k=1)[0]
    return next_node
