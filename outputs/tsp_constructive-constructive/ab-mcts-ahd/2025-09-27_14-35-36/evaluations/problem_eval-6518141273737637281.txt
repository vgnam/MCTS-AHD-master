import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    alpha = 0.7  # Weight for proximity to current node
    beta = 0.3   # Weight for potential path reduction

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_score = (1 / (1 + distance_to_node)) ** alpha
        reduction_score = (distance_matrix[current_node][destination_node] - distance_to_dest) ** beta
        score = proximity_score * reduction_score

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.7 or random.random() < 0.2:
            next_node = destination_node

    return next_node
