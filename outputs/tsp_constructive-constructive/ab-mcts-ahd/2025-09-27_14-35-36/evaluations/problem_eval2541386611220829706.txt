def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            proximity_factor = 1 / distance_to_node
            destination_factor = 1 / (distance_to_dest + 1e-6)

            centrality = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node)
            centrality_factor = centrality / (remaining_nodes - 1) if remaining_nodes > 1 else 1.0

            score = (proximity_factor * 0.4 + destination_factor * 0.3 + centrality_factor * 0.3) * (remaining_nodes / total_nodes)

            if node == destination_node:
                score *= 1.5

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.9:
            next_node = destination_node

    if remaining_nodes > 2:
        scores = []
        for node in unvisited_nodes:
            distance_to_node = distance_matrix[current_node][node]
            distance_to_dest = distance_matrix[node][destination_node]
            score = (1 / distance_to_node) * 0.6 + (1 / distance_to_dest) * 0.4
            scores.append(score)

        total_score = sum(scores)
        if total_score > 0:
            probabilities = [s / total_score for s in scores]
            next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]

    return next_node
