import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1 + (1 / (remaining_nodes + 1))  # Adjusts based on remaining nodes

    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        total_distance = distance_to_node + distance_to_dest

        penalty = 1 + (distance_to_node / (sum(distance_matrix[node]) / len(distance_matrix[node])))
        score = (dynamic_weight / total_distance) * distance_to_dest / penalty
        scores.append(score)

    # Convert scores to probabilities
    total_score = sum(scores)
    probabilities = [score / total_score for score in scores]

    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
