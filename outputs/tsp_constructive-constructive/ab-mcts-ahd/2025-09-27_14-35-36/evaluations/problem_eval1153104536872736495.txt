def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    node_list = list(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_nodes_factor = len(unvisited_nodes) / total_nodes

    for node in node_list:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            # Calculate node centrality (inverse of sum of distances to all other nodes)
            centrality = 1 / sum(distance_matrix[node])
            # Dynamic weight based on remaining path length and centrality
            dynamic_weight = (1 + centrality) * (1 - remaining_nodes_factor)
            # Novel scoring function combining distance and dynamic weight
            score = (1 / distance_to_node) * dynamic_weight + (1 / distance_to_dest) * (1 - dynamic_weight)

        scores.append(score)

    # Normalize scores to probabilities
    exp_scores = [math.exp(s) for s in scores]
    sum_exp = sum(exp_scores)
    probabilities = [e / sum_exp for e in exp_scores]

    # Select node with highest probability, with small chance to explore alternatives
    if random.random() < 0.1 and len(probabilities) > 1:
        # Explore alternative paths when probability is close
        sorted_indices = sorted(range(len(probabilities)), key=lambda i: probabilities[i], reverse=True)
        next_node = node_list[random.choice(sorted_indices[:2])]
    else:
        next_node = node_list[probabilities.index(max(probabilities))]

    # Special case: prioritize destination if it's closer than the best option by a significant margin
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        best_distance = distance_matrix[current_node][next_node]
        if dest_distance < best_distance * 0.75:
            next_node = destination_node

    return next_node
