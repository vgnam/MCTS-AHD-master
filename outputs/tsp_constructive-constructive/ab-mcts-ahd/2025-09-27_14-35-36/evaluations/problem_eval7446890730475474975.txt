def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        future_cost = (distance_to_node + distance_to_dest) / (remaining_nodes + 1)
        weight = remaining_nodes / (remaining_nodes + 20)  # Adjusted weight factor
        score = weight * (1 / future_cost) + (1 - weight) * (1 / (1 + distance_to_node))

        if score > best_score:
            best_score = score
            next_node = node

    early_return_bonus = 0.15 if remaining_nodes < len(distance_matrix) / 2 else 0
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance * (1 - early_return_bonus) < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
