def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = (distance_to_dest / distance_to_node) * (1 / (1 + distance_to_node))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        nearest_distance = min([distance_matrix[current_node][node] for node in unvisited_nodes])
        if distance_matrix[current_node][destination_node] < nearest_distance * 0.7:
            next_node = destination_node
        else:
            lookahead = min([distance_matrix[node][destination_node] for node in unvisited_nodes if node != destination_node])
            if lookahead < nearest_distance:
                next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    return next_node
