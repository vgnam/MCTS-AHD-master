def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visited_count=None):
    if not unvisited_nodes:
        return destination_node

    if visited_count is None:
        visited_count = {node: 0 for node in distance_matrix.keys()}

    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            return float('-inf')

        base_weight = 0.8 if node in unvisited_nodes else 1.2
        dynamic_weight = base_weight * (1 + 0.1 * visited_count[node])
        harmonic_mean = 2 / ((1 / distance_to_node) + (1 / (distance_to_node + distance_to_dest)) + (1 / dynamic_weight))
        penalty = (1 / distance_to_node) * (1 + 0.5 * visited_count[node])
        return harmonic_mean / penalty

    next_node = max(unvisited_nodes, key=lambda node: weighted_score(node))
    visited_count[next_node] += 1
    return next_node
