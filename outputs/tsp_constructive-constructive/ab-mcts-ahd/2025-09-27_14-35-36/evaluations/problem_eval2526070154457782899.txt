import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weighted_nodes = []
    exploration_factor = 0.3
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = (1 / (1 + distance_to_node)) ** 2
        destination_influence = (1 / (1 + distance_to_dest)) ** 0.5
        exploration_bias = random.uniform(0.5, 1.5)
        score = (proximity_weight * 0.6 + destination_influence * 0.3) * exploration_bias
        weighted_nodes.append((node, score))

    total_score = sum(score for _, score in weighted_nodes)
    probabilities = [score / total_score for _, score in weighted_nodes]

    next_node = random.choices([node for node, _ in weighted_nodes], weights=probabilities, k=1)[0]
    return next_node
