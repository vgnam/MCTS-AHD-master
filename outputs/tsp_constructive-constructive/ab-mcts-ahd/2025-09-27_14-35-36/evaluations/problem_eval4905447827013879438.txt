def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weighting based on progress and exploration
        progress_factor = (distance_to_dest / (distance_matrix[current_node][destination_node] + 1e-10))
        exploration_factor = (1 - (1 / (total_unvisited + 1)))

        score = (1 / (distance_to_node + 1e-10)) * (1 + progress_factor) * (1 - exploration_factor)

        if score > best_score:
            best_score = score
            next_node = node

    # Check if destination is a better option
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
