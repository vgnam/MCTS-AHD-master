def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    decay_factor = remaining_nodes / (remaining_nodes + 1)  # Exponential decay for destination

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            weighted_distance = distance * (0.5 ** decay_factor)  # Exponential decay
        else:
            weighted_distance = distance * (1 + 0.1 * remaining_nodes)  # Linear increase
        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
