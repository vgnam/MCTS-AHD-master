import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weighting with sigmoid transition
        progress = total_unvisited / total_nodes
        weight_factor = 1 / (1 + math.exp(-10 * (progress - 0.5)))

        # Exploration bonus (favors less visited nodes)
        exploration_bonus = math.log(total_nodes / (total_unvisited + 1)) + 1

        # Combined score calculation
        score = (1 / (distance_to_node * weight_factor + distance_to_dest * (1 - weight_factor))) * exploration_bonus
        scores.append((node, score))

    total_score = sum(score for node, score in scores)
    probabilities = [score / total_score for node, score in scores]

    next_node = random.choices([node for node, _ in scores], probabilities, k=1)[0]
    return next_node
