def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    exploration_weights = []
    num_unvisited = len(unvisited_nodes)
    base_exploration = 0.5 / (1 + num_unvisited)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Local search optimization component
        local_score = (distance_to_dest / (1 + distance_to_node)) * (1 + base_exploration)

        # Reinforcement learning-inspired exploration
        exploration_weight = base_exploration * (1 - (distance_to_node / max(distance_matrix[current_node])))
        exploration_weights.append(exploration_weight)

        # Hybrid score
        score = local_score + exploration_weight
        scores.append(score)

    # Probabilistic selection to escape local optima
    if exploration_weights:
        total_weight = sum(exploration_weights)
        probabilities = [w / total_weight for w in exploration_weights]
        selected_index = np.random.choice(len(unvisited_nodes), p=probabilities)
        next_node = unvisited_nodes[selected_index]
    else:
        next_node = max(unvisited_nodes, key=lambda x: scores[unvisited_nodes.index(x)])

    # Penalty for revisiting nodes (if applicable)
    if next_node in unvisited_nodes:
        unvisited_nodes.remove(next_node)

    return next_node
