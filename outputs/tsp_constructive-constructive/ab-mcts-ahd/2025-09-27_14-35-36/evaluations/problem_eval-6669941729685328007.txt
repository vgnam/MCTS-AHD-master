def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_distance = float('-inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance > max_distance:
            max_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance <= max_distance:
            next_node = destination_node
        else:
            # Probabilistic selection: higher probability for the farthest node, but destination can still be chosen
            prob_farthest = 0.7 * (max_distance / (max_distance + dest_distance))
            prob_destination = 0.3 * (dest_distance / (max_distance + dest_distance))
            if random.random() < prob_farthest:
                next_node = next_node
            else:
                next_node = destination_node

    return next_node
