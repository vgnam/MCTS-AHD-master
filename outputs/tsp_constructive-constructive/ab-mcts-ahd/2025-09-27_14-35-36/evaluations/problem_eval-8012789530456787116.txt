importance" (proximity to unvisited nodes) and a memory component to avoid revisiting recently explored nodes, creating a balance between exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def dynamic_weighted_distance(node):
        base_distance = distance_matrix[current_node][node]
        importance_factor = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 1.0
        revisit_penalty = 0.1 if node in unvisited_nodes else 0.3 + 0.2 * (1.0 - importance_factor)
        return base_distance * (1.0 - revisit_penalty)

    memory = set()
    for node in unvisited_nodes:
        if node in memory:
            continue
        memory.add(node)
    next_node = min(unvisited_nodes, key=lambda node: dynamic_weighted_distance(node))
    return next_node
