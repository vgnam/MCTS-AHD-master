def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        penalty = 0.1 if node in recent_nodes else 0
        score = distance + penalty
        next_node = node
        min_score = score

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        weight = remaining_nodes / (remaining_nodes + 1)
        adjusted_dest_distance = dest_distance * (1 + weight * (1 - math.log2(remaining_nodes + 1)))
        if adjusted_dest_distance < min_score:
            next_node = destination_node

    recent_nodes.add(current_node)
    if len(recent_nodes) > 3:
        recent_nodes.pop()

    return next_node
