import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining path length
        remaining_weight = 1 / (1 + math.exp(-(total_unvisited - 5)))
        exploration_weight = 0.5 + 0.2 * remaining_weight

        # Node degree heuristic (prioritize nodes with fewer connections)
        node_degree = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0)
        degree_score = 1 / (1 + node_degree)

        # Combined score with dynamic weights
        score = (exploration_weight * (1 / (distance_to_node + 1))) + \
                ((1 - exploration_weight) * (1 / (distance_to_dest + 1))) + \
                (0.3 * degree_score)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
