def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)

    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            return float('-inf')

        weight = 0.9 if node in unvisited_nodes else 1.1
        harmonic_mean = 2 / ((1 / distance_to_node) + (1 / distance_to_dest))
        penalty = 1 / distance_to_node
        score = harmonic_mean * penalty * (1 / (1 + distance_to_node * remaining_nodes_factor)) * (1 / weight)
        return score

    next_node = max(unvisited_nodes, key=lambda node: weighted_score(node))

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.9:
            next_node = destination_node

    return next_node
