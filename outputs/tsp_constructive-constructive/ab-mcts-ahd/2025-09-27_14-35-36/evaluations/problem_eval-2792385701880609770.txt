def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    current_path_length = sum(distance_matrix[current_node][next_node] for next_node in unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        friction_factor = 1 / (1 + (remaining_nodes ** 0.5) * (1 + current_path_length / (distance_to_node + 1e-6)))
        score = (1 / (1 + distance_to_node)) * friction_factor + (1 / (1 + distance_to_dest)) * (1 - friction_factor)

        if score > best_score:
            best_score = score
            next_node = node

    if next_node is None:
        next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.6:
            next_node = destination_node

    return next_node
