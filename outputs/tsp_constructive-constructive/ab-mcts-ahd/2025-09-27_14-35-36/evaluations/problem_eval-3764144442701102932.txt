def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)
    penalty_factor = 1 + (distance_matrix[current_node][destination_node] / sum(distance_matrix[current_node][node] for node in unvisited_nodes)) * remaining_nodes_factor

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = (1 / (distance_to_node + 1)) * (1 / (distance_to_dest * penalty_factor + 1))
        if score > best_score:
            best_score = score
            next_node = node

    closest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if distance_matrix[current_node][closest_node] * 0.8 < distance_matrix[current_node][next_node]:
        next_node = closest_node

    return next_node
