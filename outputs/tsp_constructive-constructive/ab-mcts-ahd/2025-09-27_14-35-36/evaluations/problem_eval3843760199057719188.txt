importance of long-term efficiency as more nodes are visited.}

{Design idea: Balancing immediate proximity and long-term efficiency using a modified harmonic mean, adaptive weighting, and a penalty factor to select the next node, inspired by No.1 and No.2 algorithms.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    num_unvisited = len(unvisited_nodes)
    remaining_nodes_factor = num_unvisited / len(distance_matrix)
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        adaptive_weight = 1 / (1 + (num_unvisited / 10.0))
        if distance_to_node == 0:
            score = float('-inf')
        else:
            harmonic_mean = 2 / ((1 / distance_to_node) + (1 / distance_to_dest))
            penalty = 1 / distance_to_node
            score = harmonic_mean * penalty * adaptive_weight * (1 / (1 + distance_to_node * remaining_nodes_factor))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.85:
            next_node = destination_node

    return next_node
