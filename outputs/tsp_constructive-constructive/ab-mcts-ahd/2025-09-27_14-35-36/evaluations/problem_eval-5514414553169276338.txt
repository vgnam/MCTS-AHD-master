def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1 + (1 / (remaining_nodes + 1))  # Adjusts based on remaining nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        total_distance = distance_to_node + distance_to_dest

        # Penalize nodes that could increase the path's inefficiency
        penalty = 1 + (distance_to_node / (sum(distance_matrix[node]) / len(distance_matrix[node])))

        score = (dynamic_weight / total_distance) * distance_to_dest / penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 1.1:  # Slightly relaxed condition
            next_node = destination_node

    return next_node
