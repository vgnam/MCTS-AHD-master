def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            return float('-inf')

        revisit_factor = 1.0 - 0.2 if node in unvisited_nodes else 1.0 + 0.2
        harmonic_mean = 2 / ((1 / (distance_to_node * revisit_factor)) + (1 / distance_to_dest) + (1 / (distance_to_node + distance_to_dest)))
        penalty = 1 / (distance_to_node * revisit_factor)
        return harmonic_mean * penalty

    next_node = max(unvisited_nodes, key=lambda node: weighted_score(node))
    return next_node
