import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    decay_factor = 0.9
    novelty_bonus = 1.0
    total_unvisited = len(unvisited_nodes)
    scores = []

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weighting with decay and novelty
        proximity_score = (1 / (1 + distance_to_node)) * decay_factor ** (total_unvisited / len(unvisited_nodes))
        global_score = (distance_to_dest / (sum(distance_matrix[node]) + 1)) * novelty_bonus

        # Combine scores with randomness for exploration
        combined_score = (0.6 * proximity_score + 0.4 * global_score) * (1 + 0.1 * random.random())
        scores.append((node, combined_score))

    # Select node with highest score
    next_node = max(scores, key=lambda x: x[1])[0]

    # Special handling for destination if it's close
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < min(distance_matrix[current_node][n] for n in unvisited_nodes) * 0.7:
            next_node = destination_node

    return next_node
