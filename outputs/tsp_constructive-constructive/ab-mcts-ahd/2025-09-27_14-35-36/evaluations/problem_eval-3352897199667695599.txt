def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    node_list = list(unvisited_nodes)

    for node in node_list:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)

        # Dynamic penalty for revisiting nodes
        penalty = 1.0 / (1.0 + 0.1 * (remaining_nodes - node_list.index(node)))

        # Score combining distance and potential sub-path
        base_score = (distance_to_dest / distance_to_node) * penalty
        sub_path_score = 0.3 * (distance_to_node + distance_to_dest) / distance_matrix[current_node][destination_node]

        total_score = base_score + sub_path_score
        scores.append(total_score)

    # Normalize scores and select probabilistically
    if sum(scores) > 0:
        normalized_scores = [s / sum(scores) for s in scores]
        next_node = node_list[np.random.choice(len(node_list), p=normalized_scores)]
    else:
        next_node = node_list[np.random.choice(len(node_list))]

    # Special case: prioritize destination if it's nearby
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < 0.7 * distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
