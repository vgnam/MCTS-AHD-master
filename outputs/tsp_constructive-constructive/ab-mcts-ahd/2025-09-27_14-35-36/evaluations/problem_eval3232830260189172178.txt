def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    visited_penalty = {node: 1 for node in unvisited_nodes}  # Initialize penalty for each node

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        # Dynamic weighting factor based on remaining nodes and visited penalty
        weight = remaining_nodes / (remaining_nodes + distance_to_node + visited_penalty[node])
        score = weight * (distance_to_dest / distance_to_node) * (1 / (1 + distance_to_node))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    # Increase penalty for the selected node
    for node in unvisited_nodes:
        visited_penalty[node] += 0.1
    visited_penalty[next_node] += 1

    return next_node
