def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    unvisited_count = len(unvisited_nodes)
    min_distance = min([distance_matrix[current_node][node] for node in unvisited_nodes])

    avg_unvisited_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / unvisited_count if unvisited_count > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        normalized_proximity = 1 / (1 + distance_to_node)
        dest_alignment = (distance_to_node + distance_to_dest) / max(distance_to_node, 1)
        proximity_potential = (avg_unvisited_distance - distance_to_node) / max(avg_unvisited_distance, 1)

        weight_proximity = 0.5 + 0.2 * (unvisited_count / (unvisited_count + 1))
        weight_dest = 0.3 + 0.2 * (1 - (unvisited_count / (unvisited_count + 1)))
        weight_potential = 0.2

        score = (normalized_proximity * weight_proximity) + (dest_alignment * weight_dest) + (proximity_potential * weight_potential)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < min_distance * 0.5:
            next_node = destination_node

    return next_node
