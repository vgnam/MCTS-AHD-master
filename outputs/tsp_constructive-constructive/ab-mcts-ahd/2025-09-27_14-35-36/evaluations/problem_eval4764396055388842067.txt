def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    unvisited_count = len(unvisited_nodes)
    remaining_nodes_factor = unvisited_count / len(distance_matrix)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / unvisited_count if unvisited_count else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            proximity_weight = 1 / (1 + distance_to_node)
            adjusted_dest = (distance_to_dest ** 0.5) * (unvisited_count / (unvisited_count + 2))
            harmonic_mean = 2 / ((1 / distance_to_node) + (1 / distance_to_dest))
            penalty = (1 / distance_to_node) * (1 + (avg_distance / distance_to_node))
            score = (proximity_weight * 0.6) + (adjusted_dest * 0.2) + (harmonic_mean * penalty * 0.2) * (1 / (1 + distance_to_node * remaining_nodes_factor))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < avg_distance * 0.65:
            next_node = destination_node

    return next_node
