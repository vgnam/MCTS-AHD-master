def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    num_unvisited = len(unvisited_nodes)
    alpha = min(1.0, 0.2 * num_unvisited)  # Dynamic weighting factor
    recent_nodes = set()  # Track recently visited nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        immediate_proximity = 1 / (1 + distance_to_node)
        long_term_efficiency = distance_to_dest / distance_to_node
        penalty = 1 if node in recent_nodes else 0.5 ** min(distance_to_node + distance_to_dest, 20)
        score = alpha * immediate_proximity + (1 - alpha) * long_term_efficiency + penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
