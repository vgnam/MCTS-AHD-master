def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Combine scoring mechanisms from all three algorithms
        score1 = (1 / (distance_to_node + distance_to_dest)) * distance_to_dest
        score2 = (distance_to_dest / (distance_to_node + distance_to_dest)) * (1 / (1 + distance_to_node))
        score3 = (distance_to_dest / (distance_to_node + distance_to_dest)) * (1 / (1 + distance_to_node ** 2))

        # Normalize and combine scores
        combined_score = (score1 + score2 + score3) / 3

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        best_distance = distance_matrix[current_node][next_node]
        if dest_distance < best_distance * 0.7:  # Slightly stricter threshold
            next_node = destination_node

    return next_node
