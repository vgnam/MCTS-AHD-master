def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            # Calculate node centrality (average distance to other nodes)
            centrality = sum(distance_matrix[node]) / (total_nodes - 1)

            # Weighted combination of distance metrics
            distance_weight = (1 / distance_to_node) * (1 + 0.5 * (1 / centrality))
            path_weight = (1 / distance_to_dest) * (1 - 0.3 * remaining_nodes_factor)

            # Adaptive penalty based on remaining nodes
            penalty = 1 + 0.2 * (remaining_nodes_factor - 0.5)

            score = (distance_weight + path_weight) * penalty

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic selection when destination is not immediately accessible
    if destination_node in unvisited_nodes and len(unvisited_nodes) > 2:
        dest_distance = distance_matrix[current_node][destination_node]
        next_distance = distance_matrix[current_node][next_node]
        if dest_distance > next_distance * 1.2:
            # Randomly choose between next_node and destination with probability based on distance
            prob = 1 / (1 + math.exp((dest_distance - next_distance) / 10))
            if random.random() < prob:
                next_node = destination_node

    return next_node
