def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        exploration_weight = (1 - (remaining_nodes / (remaining_nodes + 5))) ** 2
        path_efficiency = (avg_distance / (distance_to_node + 1)) ** 0.5
        dest_alignment = 1 / (1 + distance_to_dest)

        score = (path_efficiency * dest_alignment) * (1 + exploration_weight)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if (dest_distance < distance_matrix[current_node][next_node] * 0.6 and remaining_nodes > 2) or \
           (remaining_nodes <= 2 and random.random() < 0.5):
            next_node = destination_node

    return next_node
