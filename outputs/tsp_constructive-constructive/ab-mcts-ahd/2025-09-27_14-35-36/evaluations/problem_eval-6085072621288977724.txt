def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 1.0 if len(unvisited_nodes) > 1 else 0.5

        # Heuristic score combining distance and destination proximity
        score = (weight * (1 / (distance_to_node + 1e-6))) + ((1 - weight) * (distance_to_dest / (distance_matrix[current_node][destination_node] + 1e-6)))

        # Add probabilistic element to avoid local optima
        if random.random() < 0.2 and len(unvisited_nodes) > 2:
            score *= 0.7

        if score > best_score:
            best_score = score
            next_node = node

    # Final check for destination proximity
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 1.2:
            next_node = destination_node

    return next_node
