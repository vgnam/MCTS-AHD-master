import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    centroid = np.mean([(node, distance_matrix[node][destination_node]) for node in unvisited_nodes], axis=0)[0]
    scores = {}
    remaining_nodes = len(unvisited_nodes)
    weight = (remaining_nodes + 5) / (remaining_nodes + 15)  # Adjusted weight factor
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        distance_to_centroid = abs(node - centroid)
        penalty = distance_to_node * (distance_to_centroid / (remaining_nodes + 1))
        score = weight * (1 / (1 + distance_to_node)) + (1 - weight) * (distance_to_dest / (1 + distance_to_node)) - penalty
        scores[node] = score

    total_score = sum(scores.values())
    probabilities = [scores[node] / total_score for node in unvisited_nodes]
    
    next_node = random.choices(list(unvisited_nodes), probabilities, k=1)[0]
    return next_node
