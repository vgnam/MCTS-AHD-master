def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centrality = (total_distance - distance_to_node) / total_distance if total_distance else 0
        priority_factor = (1 - (remaining_nodes / (remaining_nodes + 1))) * centrality + (remaining_nodes / (remaining_nodes + 1)) * (1 / distance_to_node)
        score = priority_factor * (1 / (1 + distance_to_node)) * (distance_to_dest / max(1, distance_matrix[current_node][destination_node]))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        margin = 0.6 + 0.2 * (remaining_nodes / (remaining_nodes + 1)) * (dest_distance / sum(distance_matrix[current_node][node] for node in unvisited_nodes))
        if dest_distance < distance_matrix[current_node][next_node] * margin:
            next_node = destination_node

    return next_node
