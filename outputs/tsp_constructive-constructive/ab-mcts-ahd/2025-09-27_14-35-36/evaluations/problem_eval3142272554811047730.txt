def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    current_distance_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        distance_increase_factor = (distance_to_node + distance_to_dest) / current_distance_to_dest
        potential_savings = (current_distance_to_dest - distance_to_dest) / remaining_nodes
        score = (1 / distance_increase_factor) + potential_savings

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] < 0.8 * distance_matrix[current_node][next_node]:
        next_node = destination_node

    return next_node
