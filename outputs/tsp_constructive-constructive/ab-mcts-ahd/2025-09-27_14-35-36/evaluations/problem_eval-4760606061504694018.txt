def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Weighted score combining distance and centrality
        score = 0.6 * distance_to_node + 0.4 * distance_to_dest + 0.2 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < best_score:
            next_node = destination_node

    return next_node
