def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    alpha = 0.7  # Weight for immediate distance
    beta = 0.3   # Weight for destination proximity

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        combined_distance = alpha * distance_to_node + beta * distance_to_dest

        # Additional factor: potential to reduce total path length
        potential_reduction = distance_matrix[current_node][destination_node] - distance_to_node
        score = (1 / combined_distance) * (1 + 0.1 * potential_reduction)

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic exploration: sometimes choose a non-optimal path
    if random.random() < 0.1 and destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < 1.2 * distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
