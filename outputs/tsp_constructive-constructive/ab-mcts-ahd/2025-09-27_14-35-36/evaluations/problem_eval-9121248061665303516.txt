import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    max_distance = max(distances) if distances else 1.0
    temperature = max(0.1, 1.0 - len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Annealing schedule

    def sigmoid(x, temp):
        return 1 / (1 + math.exp(-x / (temp * max_distance)))

    probabilities = [sigmoid(-d, temperature) + random.uniform(0, 0.1) for d in distances]
    total_probability = sum(probabilities)
    normalized_probabilities = [p / total_probability for p in probabilities]

    next_node = random.choices(list(unvisited_nodes), weights=normalized_probabilities, k=1)[0]
    return next_node
