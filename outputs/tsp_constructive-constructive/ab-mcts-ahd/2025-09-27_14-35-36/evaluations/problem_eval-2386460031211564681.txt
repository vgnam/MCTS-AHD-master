def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes_factor = len(unvisited_nodes) / (len(distance_matrix) + 1)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            detour_cost = distance_to_node + distance_to_dest - distance_matrix[current_node][destination_node]
            proximity_bonus = 1 / (1 + distance_to_dest * remaining_nodes_factor)
            penalty = (1 / distance_to_node) * (1 + (avg_distance / distance_to_node))
            score = (distance_to_node * 0.5 + detour_cost * 0.3) * proximity_bonus * penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.75:
            next_node = destination_node

    return next_node
