def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    penalties = [1 + (distance_matrix[current_node][node] / (sum(distance_matrix[node]) / len(distance_matrix[node]))) for node in unvisited_nodes]
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1 + (1 / (remaining_nodes + 1))

    scores = [dynamic_weight / (d * p) for d, p in zip(distances, penalties)]
    total_score = sum(scores)
    probabilities = [s / total_score for s in scores]

    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
