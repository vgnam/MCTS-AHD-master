def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic heuristic factor based on remaining unvisited nodes
    heuristic_factor = 0.5 + 0.4 * (len(unvisited_nodes) / len(distance_matrix))

    # Secondary heuristic: sum of distances to all nodes (node degree)
    node_degree = {node: sum(distance_matrix[node]) for node in unvisited_nodes}

    next_node = min(unvisited_nodes, key=lambda node: (heuristic_factor * distance_matrix[current_node][node] + (1 - heuristic_factor) * node_degree[node]))
    return next_node
