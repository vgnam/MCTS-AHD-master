def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    distances_to_node = [distance_matrix[current_node][node] for node in unvisited_nodes]
    distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    
    proximity_weights = [1 / (1 + d) for d in distances_to_node]
    destination_influences = [(unvisited_count / (unvisited_count + 1)) * (d_dest / (1 + d_node)) for d_node, d_dest in zip(distances_to_node, distances_to_dest)]
    
    scores = [0.6 * pw + 0.4 * di for pw, di in zip(proximity_weights, destination_influences)]
    total_score = sum(scores)
    selection_probabilities = [s / total_score for s in scores]

    next_node = random.choices(list(unvisited_nodes), weights=selection_probabilities, k=1)[0]
    return next_node
