def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            # Calculate node degree (number of connections)
            node_degree = sum(1 for d in distance_matrix[node] if d > 0 and d < float('inf'))

            # Novel scaling factor for distance to destination
            dest_scaling = (1 - remaining_ratio) * distance_to_dest

            # Dynamic priority adjustment
            priority = (remaining_nodes ** 0.5) / (1 + distance_to_node)

            # Combined penalty term
            penalty = (1 / distance_to_node) * (1 + node_degree / total_nodes)

            score = priority * penalty * (1 / (1 + dest_scaling))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        # Probabilistic override based on remaining nodes
        prob_threshold = 0.1 + (0.9 * (1 - remaining_ratio))
        if random.random() < prob_threshold:
            next_node = destination_node

    return next_node
