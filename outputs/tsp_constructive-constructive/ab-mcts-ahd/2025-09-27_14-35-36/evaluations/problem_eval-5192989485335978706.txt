def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    unvisited_count = len(unvisited_nodes)
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / unvisited_count if unvisited_count > 0 else 0
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / unvisited_count) ** 0.5 if unvisited_count > 1 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = 1 / (1 + distance_to_node)
        dest_weight = (1 - (distance_to_node / (avg_distance + std_dev))) * (unvisited_count / (unvisited_count + 4))
        score = (proximity_weight * 0.7) + (dest_weight * 0.3)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        adjusted_dest_distance = dest_distance * (unvisited_count / (unvisited_count + 3))
        if adjusted_dest_distance < min(distances):
            next_node = destination_node

    return next_node
