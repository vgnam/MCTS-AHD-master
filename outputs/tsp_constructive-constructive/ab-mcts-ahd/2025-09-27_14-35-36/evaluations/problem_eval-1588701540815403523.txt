import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    avg_distance = np.mean([distance_matrix[current_node][node] for node in unvisited_nodes])
    weighted_nodes = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = 1 / (1 + distance_to_node)
        destination_influence = 1 / (1 + distance_to_dest)
        coverage_factor = (distance_to_node / avg_distance) if avg_distance > 0 else 1
        score = (proximity_weight * destination_influence) * (1 + coverage_factor)
        weighted_nodes.append((node, score))

    total_score = sum(score for _, score in weighted_nodes)
    probabilities = [score / total_score for _, score in weighted_nodes]

    next_node = random.choices([node for node, _ in weighted_nodes], weights=probabilities, k=1)[0]
    return next_node
