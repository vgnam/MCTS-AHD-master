import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    node_density = remaining_nodes / total_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            # Novel distance metric combining direct and detour distances
            combined_distance = math.sqrt(distance_to_node * distance_to_dest)

            # Node density adjustment
            density_factor = 1 + (node_density * 0.5)

            # Sigmoid-based score to smooth selection
            sigmoid_input = - (combined_distance / (1 + distance_to_node * node_density))
            score = 1 / (1 + math.exp(sigmoid_input))

            # Additional penalty for high remaining nodes
            if remaining_nodes > total_nodes / 2:
                score *= 0.8

        if score > best_score:
            best_score = score
            next_node = node

    # Special handling for destination when it's close enough
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.9:
            next_node = destination_node

    return next_node
