def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    visited_recently = [current_node]  # Track recently visited nodes
    max_recent_penalty = 5  # Maximum penalty for recently visited nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][u] for u in unvisited_nodes) / len(unvisited_nodes)
        recent_penalty = sum(distance_matrix[node][r] for r in visited_recently[:max_recent_penalty])
        score = (distance_to_node) / (distance_to_node + avg_distance_to_unvisited - recent_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    visited_recently.append(next_node)
    return next_node
