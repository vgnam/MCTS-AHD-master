def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate centroid of unvisited nodes
    centroid_x = sum(distance_matrix[node][0] for node in unvisited_nodes) / remaining_nodes
    centroid_y = sum(distance_matrix[node][1] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        distance_to_centroid = ((distance_matrix[node][0] - centroid_x) ** 2 + (distance_matrix[node][1] - centroid_y) ** 2) ** 0.5
        penalty_factor = distance_to_dest / (1 + 0.1 * remaining_nodes + distance_to_centroid)  # Dynamic penalty based on distance_to_dest and distance_to_centroid
        score = distance_to_dest / (distance_to_node + penalty_factor)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
