def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Adaptive weighting combining distance and remaining nodes
        exploration_weight = (remaining_nodes / (remaining_nodes + 1)) ** 2
        exploitation_weight = 1 - exploration_weight

        # Score combines normalized distance and destination proximity
        normalized_distance = distance_to_node / total_distance if total_distance > 0 else 1
        dest_proximity = 1 / (1 + distance_to_dest)

        score = (exploration_weight * (1 - normalized_distance) +
                 exploitation_weight * dest_proximity)

        if score > best_score:
            best_score = score
            next_node = node

    # Dynamic threshold for destination prioritization
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        threshold = 0.7 * (distance_matrix[current_node][next_node] + distance_to_dest)
        if dest_distance < threshold:
            next_node = destination_node

    return next_node
