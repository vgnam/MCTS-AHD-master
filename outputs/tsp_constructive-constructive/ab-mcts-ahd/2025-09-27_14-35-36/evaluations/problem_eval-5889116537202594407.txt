def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    scores = []
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    temperature = 1.0 / (1 + len(unvisited_nodes))  # Decreases as nodes are visited

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = (1 / (1 + distance_to_node)) * (1 / (1 + distance_to_dest)) + (0.3 * (distance_to_node / avg_distance))
        scores.append(score)

    # Apply Boltzmann distribution for probabilistic selection
    exp_scores = [math.exp(score / temperature) for score in scores]
    probabilities = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    # Dynamic destination prioritization
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < avg_distance * 0.6:
            next_node = destination_node

    return next_node
