def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            return float('-inf')

        proximity_weight = 1 / (1 + distance_to_node)
        dest_weight = (distance_to_dest ** 0.5) * (len(unvisited_nodes) / (len(unvisited_nodes) + 2))
        penalty = 1 / distance_to_node

        harmonic_mean = 3 / ((1 / proximity_weight) + (1 / dest_weight) + (1 / (penalty * 2)))
        return harmonic_mean * penalty

    next_node = max(unvisited_nodes, key=lambda node: weighted_score(node))
    return next_node
