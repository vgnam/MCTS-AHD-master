def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    alpha = 0.7  # Weight for local distance
    beta = 0.3   # Weight for global progress

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic score calculation with local and global considerations
        local_factor = 1 / (distance_to_node + 1e-6)  # Avoid division by zero
        global_factor = distance_to_dest / (1 + distance_to_node)
        score = (alpha * local_factor) + (beta * global_factor)

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic override for destination node
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        candidate_distance = distance_matrix[current_node][next_node]
        improvement_ratio = candidate_distance / (dest_distance + 1e-6)

        if improvement_ratio > 1.2:  # 20% better than current best
            next_node = destination_node
        elif improvement_ratio > 1.0:  # 10% better, apply probability
            if np.random.rand() < 0.3:  # 30% chance to override
                next_node = destination_node

    return next_node
