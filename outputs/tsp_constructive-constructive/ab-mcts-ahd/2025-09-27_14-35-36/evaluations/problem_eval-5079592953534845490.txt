def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    accumulated_distance = sum([distance_matrix[current_node][node] for node in set(distance_matrix.keys()) if node != current_node])
    total_distance = distance_matrix[current_node][destination_node]
    weight_factor = 1.0 if accumulated_distance == 0 else (total_distance / accumulated_distance)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        violation_factor = 1 - (distance_to_node + distance_to_dest - distance_matrix[current_node][destination_node]) / distance_to_node if distance_to_node != 0 else 1

        if distance_to_node == 0:
            angle_factor = 1.0
        else:
            cos_angle = (distance_to_dest**2 + distance_to_node**2 - total_distance**2) / (2 * distance_to_dest * distance_to_node)
            cos_angle = max(-1.0, min(1.0, cos_angle))
            angle_factor = 1 - (1 - cos_angle) / 2

        penalty = accumulated_distance / (accumulated_distance + 1)
        score = (distance_to_dest / distance_to_node) * angle_factor * violation_factor * (1 / (1 + distance_to_node)) * weight_factor * (1 - penalty)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        nearest_distance = min([distance_matrix[current_node][node] for node in unvisited_nodes])
        if dest_distance < nearest_distance * 0.7:
            next_node = destination_node

    return next_node
