def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_distance(node):
        base_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        revisit_factor = 1.0 - (0.1 / (destination_distance + 1e-6)) if node in unvisited_nodes else 1.0 + (0.1 / (destination_distance + 1e-6))
        return base_distance * revisit_factor

    next_node = min(unvisited_nodes, key=lambda node: weighted_distance(node))
    return next_node
