def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weighted_nodes = []
    unvisited_count = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = 1 / (1 + distance_to_node)
        adjusted_dest = (distance_to_dest ** 0.5) * (unvisited_count / (unvisited_count + 2))
        score = proximity_weight * adjusted_dest
        weighted_nodes.append((node, score))

    total_score = sum(score for _, score in weighted_nodes)
    probabilities = [score / total_score for _, score in weighted_nodes]

    next_node = random.choices([node for node, _ in weighted_nodes], weights=probabilities, k=1)[0]

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < avg_distance * 0.7:
            next_node = destination_node

    return next_node
