def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    num_unvisited = len(unvisited_nodes)
    current_avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited if num_unvisited else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        exploration_factor = (1 / (1 + num_unvisited)) * (1 / (1 + current_avg_distance))
        distance_ratio = distance_to_dest / (distance_to_node + 1e-6)
        normalized_distance = distance_to_node / (current_avg_distance + 1e-6)

        score = distance_ratio * (1 - normalized_distance) * exploration_factor

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        min_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes)
        if dest_distance < min_distance * 0.7:
            next_node = destination_node

    return next_node
