def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate cumulative distance for tie-breaking
    cumulative_distances = {node: distance_matrix[current_node][node] for node in unvisited_nodes}
    min_distance = min(cumulative_distances.values())
    closest_nodes = [node for node, dist in cumulative_distances.items() if dist == min_distance]

    # If there's a tie, choose the node with the smallest cumulative distance traveled
    if len(closest_nodes) > 1:
        next_node = min(closest_nodes, key=lambda node: sum(distance_matrix[i][node] for i in set(unvisited_nodes) - {node}))
    else:
        next_node = closest_nodes[0]

    return next_node
