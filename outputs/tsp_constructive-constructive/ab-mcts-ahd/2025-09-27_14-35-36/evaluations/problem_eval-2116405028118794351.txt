def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_distances = {node: sum(distance_matrix[node][other] for other in unvisited_nodes) for node in unvisited_nodes}
    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        avg_distance = total_distances[node] / len(unvisited_nodes) if unvisited_nodes else 0

        # New scoring: balance distance to current node, average distance to remaining nodes, and penalty for distance to destination
        score = (1 / (distance_to_node + 1e-10)) * (1 / (avg_distance + 1e-10)) * (1 / (distance_to_dest + 1e-10))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
