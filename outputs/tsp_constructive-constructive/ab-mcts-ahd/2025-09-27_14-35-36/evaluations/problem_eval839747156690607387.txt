def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    dest_distance = distance_matrix[current_node][destination_node]

    # Calculate centroid of unvisited nodes for distribution awareness
    centroid_x, centroid_y = 0, 0
    for node in unvisited_nodes:
        centroid_x += distance_matrix[node][0]
        centroid_y += distance_matrix[node][1]
    centroid_x /= len(unvisited_nodes)
    centroid_y /= len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Adaptive penalty based on node's position relative to centroid
        node_x, node_y = distance_matrix[node][0], distance_matrix[node][1]
        penalty = 1 + 0.5 * (abs(node_x - centroid_x) + abs(node_y - centroid_y))

        # Score combines distance, destination proximity, and distribution penalty
        score = (1 / (1 + distance_to_node)) * (distance_to_dest / (1 + distance_to_node)) / penalty

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic selection based on normalized scores
    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        node_x, node_y = distance_matrix[node][0], distance_matrix[node][1]
        penalty = 1 + 0.5 * (abs(node_x - centroid_x) + abs(node_y - centroid_y))
        scores.append((1 / (1 + distance_to_node)) * (distance_to_dest / (1 + distance_to_node)) / penalty)

    if scores:
        total_score = sum(scores)
        if total_score > 0:
            probs = [s / total_score for s in scores]
            next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    # Special case for destination if sufficiently close
    if destination_node in unvisited_nodes:
        if dest_distance < distance_matrix[current_node][next_node] * 0.7:
            next_node = destination_node

    return next_node
