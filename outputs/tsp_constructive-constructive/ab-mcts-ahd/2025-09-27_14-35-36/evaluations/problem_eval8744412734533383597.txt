def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 0

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        weight = (10 - remaining_nodes) / 10
        exploitation_weight = 0.3 + 0.7 * (1 - weight)
        exploration_weight = 1 - exploitation_weight

        score = (exploitation_weight * (1 / (1 + distance_to_node)) +
                 exploration_weight * (1 / (1 + distance_to_dest)))

        if node == destination_node:
            score *= 1.2

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < avg_distance * 0.8:
            next_node = destination_node
        elif remaining_nodes < 5 and random.random() < 0.3:
            next_node = destination_node

    return next_node
