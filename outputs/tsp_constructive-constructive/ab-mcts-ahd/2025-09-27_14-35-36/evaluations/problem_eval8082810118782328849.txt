def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = (remaining_nodes / (remaining_nodes + 1)) ** 2

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum([distance_matrix[node][n] for n in unvisited_nodes if n != node]) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        score = (dynamic_weight / (1 + distance_to_node)) * (distance_to_dest / (1 + distance_to_dest)) * (1 + avg_distance_to_unvisited)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.85:
            if remaining_nodes > 1 and np.random.rand() < 0.3:
                next_node = destination_node

    return next_node
