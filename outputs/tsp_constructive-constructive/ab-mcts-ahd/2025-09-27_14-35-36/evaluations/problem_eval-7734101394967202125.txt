def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        total_distance = distance_to_node + distance_to_dest
        
        # Calculate connectivity penalty for the node
        connectivity = sum(distance_matrix[node][n] == min(distance_matrix[node]) for n in unvisited_nodes)
        connectivity_penalty = connectivity * 0.05
        
        # Calculate longest remaining edge reward
        longest_edge = max(distance_matrix[node][n] for n in unvisited_nodes if n != destination_node)
        longest_edge_reward = 0.02 * (1.0 / longest_edge) if longest_edge > 0 else 0.0
        
        # Dynamic adjustment factor based on remaining nodes
        adjustment = 1.0 / (1.0 + 0.1 * remaining_nodes)

        # Weighted score combining inverse distance, penalty for remaining nodes, connectivity penalty, and longest edge reward
        score = (1.0 / total_distance) * adjustment - (0.05 * remaining_nodes) - connectivity_penalty + longest_edge_reward

        if score > best_score:
            best_score = score
            next_node = node

    # Special handling for destination node
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.7:  # More aggressive threshold
            next_node = destination_node

    return next_node
