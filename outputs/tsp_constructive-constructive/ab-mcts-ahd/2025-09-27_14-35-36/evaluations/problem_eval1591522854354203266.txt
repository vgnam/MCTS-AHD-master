def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if current_node != destination_node:
            deviation = abs((distance_matrix[current_node][destination_node] - distance_to_current - distance_to_dest))
            normalized_deviation = deviation / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] != 0 else 0
        else:
            normalized_deviation = 0

        progress_factor = remaining_nodes / total_nodes
        dynamic_weight = 0.5 * (1 - progress_factor) + 0.1 * progress_factor

        score = distance_to_current + distance_to_dest + dynamic_weight * normalized_deviation

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
