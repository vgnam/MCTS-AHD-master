import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = (remaining_nodes + 5) / (remaining_nodes + 15)  # Adjusted weight factor

    nodes_with_scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = weight * (1 / (1 + distance_to_node)) + (1 - weight) * (distance_to_dest / (1 + distance_to_node))
        nodes_with_scores.append((node, score))

    nodes_with_scores.sort(key=lambda x: x[1], reverse=True)
    rank_weights = [1 / (i + 1) for i in range(len(nodes_with_scores))]  # Rank-based weights
    total_weight = sum(rank_weights)
    probabilities = [w / total_weight for w in rank_weights]

    next_node = random.choices([node for node, _ in nodes_with_scores], weights=probabilities)[0]
    return next_node
