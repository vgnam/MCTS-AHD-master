def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.6  # Proximity weight
    beta = 0.3   # Destination alignment weight
    gamma = 0.1  # Distance penalty weight

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Proximity component
        proximity_score = alpha * (1 / (1 + distance_to_node))

        # Destination alignment component
        alignment_score = beta * (distance_to_dest / (distance_to_node + distance_to_dest))

        # Distance penalty to reduce detours
        penalty = gamma * (distance_to_node / sum(distance_matrix[current_node]))

        # Dynamic adjustment based on remaining nodes
        adjustment_factor = (remaining_nodes / (remaining_nodes + distance_to_node)) ** 2
        total_score = (proximity_score + alignment_score - penalty) * adjustment_factor

        if total_score > best_score:
            best_score = total_score
            next_node = node

    # Special case: prioritize destination if it's the last node or provides significant savings
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if remaining_nodes == 1 or dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
