def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    local_density_penalty_factor = 1.5

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        local_density = sum(distance_matrix[node][other_node] < 2 * distance_to_node for other_node in unvisited_nodes) / total_nodes
        proximity_score = (1 - (distance_to_node / (max(distance_matrix[current_node]) + 1))) * (1 - (distance_to_dest / (max(distance_matrix[node]) + 1)))
        density_adjusted_score = proximity_score / (1 + local_density * local_density_penalty_factor)
        score = density_adjusted_score * (distance_to_dest / (distance_to_node + 1))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
