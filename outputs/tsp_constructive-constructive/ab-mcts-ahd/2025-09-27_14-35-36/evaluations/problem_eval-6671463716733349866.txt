def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        heuristic_value = 1 / (distance_to_node + 1)

        # Dynamic weight adjustment based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight_heuristic = 0.7 + (0.3 * (remaining_nodes / (remaining_nodes + 1)))
        weight_distance = 1 - weight_heuristic

        # Penalty for deviating too far from destination
        deviation_penalty = (distance_to_dest / max(distance_matrix[node])) if max(distance_matrix[node]) != 0 else 0

        # Normalized score with penalty
        score = (heuristic_value * weight_heuristic) + (0.3 * (1 / (distance_to_node + 1))) - deviation_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
