import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    threshold = np.mean(distances) * 0.7
    candidates = [node for node, dist in zip(unvisited_nodes, distances) if dist <= threshold]

    if not candidates:
        candidates = list(unvisited_nodes)

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in candidates:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        weight = remaining_nodes / (remaining_nodes + distance_to_node)
        score = weight * (distance_to_dest / distance_to_node) * (1 / (1 + distance_to_node))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes and next_node is not None:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
