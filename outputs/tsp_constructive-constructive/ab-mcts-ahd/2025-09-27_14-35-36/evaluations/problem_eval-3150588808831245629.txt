def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    penalty_factor = (remaining_nodes ** 2) / (remaining_nodes + 1)  # Quadratic penalty for long detours

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weighting with penalty for long detours
        weight = remaining_nodes / (remaining_nodes + distance_to_node)
        detour_penalty = 1 - (distance_to_node / (distance_matrix[current_node][destination_node] + 1e-6))
        score = weight * (distance_to_dest / distance_to_node) * (1 / (1 + distance_to_node)) * (1 - penalty_factor * detour_penalty)

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic selection based on normalized scores
    if len(unvisited_nodes) > 1:
        scores = []
        for node in unvisited_nodes:
            distance_to_node = distance_matrix[current_node][node]
            distance_to_dest = distance_matrix[node][destination_node]
            weight = remaining_nodes / (remaining_nodes + distance_to_node)
            detour_penalty = 1 - (distance_to_node / (distance_matrix[current_node][destination_node] + 1e-6))
            score = weight * (distance_to_dest / distance_to_node) * (1 / (1 + distance_to_node)) * (1 - penalty_factor * detour_penalty)
            scores.append(score)

        total_score = sum(scores)
        if total_score > 0:
            normalized_scores = [s / total_score for s in scores]
            next_node = random.choices(unvisited_nodes, weights=normalized_scores, k=1)[0]

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
