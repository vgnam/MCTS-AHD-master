def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    num_unvisited = len(unvisited_nodes)
    alpha = max(0.2, 1.0 - 0.1 * num_unvisited)  # Dynamic weighting factor

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        immediate_proximity = 1 / (1 + distance_to_node)
        long_term_efficiency = 1 / (1 + distance_to_dest)
        score = alpha * immediate_proximity + (1 - alpha) * long_term_efficiency

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * (0.9 - 0.05 * num_unvisited):
            next_node = destination_node

    return next_node
