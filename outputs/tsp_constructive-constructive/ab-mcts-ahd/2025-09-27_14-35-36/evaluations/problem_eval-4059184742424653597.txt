def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weights = []
    visited_nodes = set()

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if node in visited_nodes:
            penalty = 1.5
        else:
            penalty = 1.0

        proximity_weight = 1 / (1 + distance_to_node)
        destination_influence = 0.8 * (distance_to_dest / (distance_to_node + 1))

        weight = (proximity_weight + destination_influence) * penalty
        weights.append(weight)

    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    next_node = random.choices(list(unvisited_nodes), weights=normalized_weights, k=1)[0]

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    visited_nodes.add(next_node)

    return next_node
