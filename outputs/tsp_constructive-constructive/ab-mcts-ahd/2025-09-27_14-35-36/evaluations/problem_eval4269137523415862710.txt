def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    remaining_nodes = len(unvisited_nodes)
    weight = 1 - (remaining_nodes / (remaining_nodes + 2))

    weighted_distances = [weight * (1 / (1 + d)) + (1 - weight) * (distance_matrix[node][destination_node] / (d + distance_matrix[node][destination_node]))
                         for d, node in zip(distances, unvisited_nodes)]

    probabilities = np.array(weighted_distances) ** -1
    probabilities /= probabilities.sum()

    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
