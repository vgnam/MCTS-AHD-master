def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    visited_nodes = set()

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Weighted score based on proximity to current node and destination
        if node in visited_nodes:
            penalty = 1.5  # Penalty for revisiting nodes
        else:
            penalty = 1.0

        proximity_weight = 1 / (1 + distance_to_node)
        destination_influence = 0.8 * (distance_to_dest / (distance_to_node + 1))

        score = (proximity_weight + destination_influence) * penalty

        if score > best_score:
            best_score = score
            next_node = node

    # Check if destination is closer than the selected node
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    visited_nodes.add(next_node)

    return next_node
