def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Adaptive weighting factor based on remaining nodes
        alpha = 1.0 - (0.5 * (remaining_nodes / (remaining_nodes + 1)))
        beta = 1.0 - alpha

        # Hybrid scoring function
        score = (alpha / (1 + distance_to_node)) + (beta * (1 / (1 + distance_to_dest)))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)

        # Fallback to destination if remaining path is nearly complete
        if dest_distance < (remaining_distance / (remaining_nodes + 1)) * 0.7:
            next_node = destination_node

    return next_node
