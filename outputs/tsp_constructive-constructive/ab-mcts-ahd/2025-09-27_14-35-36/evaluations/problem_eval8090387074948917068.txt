def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1 - (total_unvisited / (total_unvisited + 1))  # Normalized progress (0 to 1)

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weighting: favor proximity early, destination later
        weight = 0.5 + 0.5 * progress  # Linear transition from 0.5 to 1.0
        score = (1 / (distance_to_node + weight * distance_to_dest)) * (1 + 0.5 * progress)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * (1 + 0.3 * progress):
            next_node = destination_node

    return next_node
