importance based on the decreasing number of unvisited nodes and incorporates a penalty for path congestion to avoid cycles.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    unvisited_count = len(unvisited_nodes)
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = 1 / (1 + distance_to_node)
        dest_weight = (1 - (distance_to_dest / max(distance_matrix[node]) * 0.5)) * (unvisited_count / (unvisited_count + 1))
        congestion_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / unvisited_count
        score = (proximity_weight * 0.6) + (dest_weight * 0.4) - congestion_penalty * 0.05

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
