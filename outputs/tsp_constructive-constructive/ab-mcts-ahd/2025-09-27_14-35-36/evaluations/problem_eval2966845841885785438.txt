import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    dest_distance = distance_matrix[current_node][destination_node]
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    nearest_distance = distance_matrix[current_node][nearest_node]

    if dest_distance < nearest_distance * 0.8:
        next_node = destination_node
    else:
        weighted_nodes = [(node, distance_matrix[current_node][node]) for node in unvisited_nodes]
        total_weight = sum(1 / (d + 1) for _, d in weighted_nodes)  # Avoid division by zero
        probabilities = [(1 / (d + 1)) / total_weight for _, d in weighted_nodes]
        next_node = random.choices([node for node, _ in weighted_nodes], weights=probabilities, k=1)[0]

    return next_node
