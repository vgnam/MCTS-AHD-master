def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    min_distance = min([distance_matrix[current_node][node] for node in unvisited_nodes])

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = 1 / (1 + distance_to_node)
        destination_attractiveness = max(0, 1 - (distance_to_dest / max(distance_to_dest, 1)))
        density_factor = len(unvisited_nodes) / (sum(distance_matrix[node][n] for n in unvisited_nodes) + 1)

        score = (0.5 * proximity_weight + 0.3 * destination_attractiveness + 0.2 * density_factor) * (1 - (distance_to_node / (min_distance + 1)))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < min_distance * 0.7:
            next_node = destination_node

    return next_node
