def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            score = float('-inf')
        else:
            normalized_distance = distance_to_node / max(distance_matrix[current_node])
            normalized_dest_distance = distance_to_dest / max(distance_matrix[node])
            dynamic_penalty = 1 / (1 + distance_to_dest)
            score = (0.6 * normalized_distance) + (0.4 * normalized_dest_distance) - dynamic_penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
