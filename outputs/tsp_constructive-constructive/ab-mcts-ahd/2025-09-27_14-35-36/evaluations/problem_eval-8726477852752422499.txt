def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        exploration_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        proximity_weight = 1 - (distance_to_node / total_path_length)
        alignment_weight = 1 / (1 + distance_to_dest)

        score = (exploration_weight * 0.4 + proximity_weight * 0.4 + alignment_weight * 0.2) * (1 / (1 + distance_to_node))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        dest_prob = 1 - (remaining_nodes / (remaining_nodes + 3))
        if dest_distance < distance_matrix[current_node][next_node] * 0.8 or random.random() < dest_prob:
            next_node = destination_node

    return next_node
