import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    avg_distance_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    avg_distance_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    weights = []
    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]
        ratio_current = dist_current / avg_distance_current
        ratio_dest = dist_dest / avg_distance_dest
        weight = math.exp(-(ratio_current + ratio_dest) / 2)
        weights.append(weight)

    total_weight = sum(weights)
    normalized_weights = [weight / total_weight for weight in weights]
    next_node = random.choices(list(unvisited_nodes), weights=normalized_weights, k=1)[0]
    return next_node
