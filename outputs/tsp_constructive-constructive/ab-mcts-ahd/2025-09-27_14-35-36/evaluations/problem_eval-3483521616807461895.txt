def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, previous_node=None):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            if previous_node is not None:
                proximity_to_previous = distance_matrix[current_node][previous_node]
                weight = 1 / (proximity_to_previous + 1)
            else:
                weight = 1
            harmonic_mean = 3 / ((1 / distance_to_node) + (1 / distance_to_dest) + (1 / (weight + 1)))
            penalty = 1 / distance_to_node
            score = harmonic_mean * penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
