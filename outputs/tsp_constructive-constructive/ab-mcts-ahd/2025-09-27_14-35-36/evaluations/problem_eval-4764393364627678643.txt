import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, revisit_penalty=0.1, exploration_prob=0.2):
    if not unvisited_nodes:
        return destination_node

    def weighted_distance(node):
        base_distance = distance_matrix[current_node][node]
        revisit_factor = 1.0 - revisit_penalty if node in unvisited_nodes else 1.0 + revisit_penalty
        return base_distance * revisit_factor

    if random.random() < exploration_prob:
        next_node = random.choice(list(unvisited_nodes))
    else:
        next_node = min(unvisited_nodes, key=lambda node: weighted_distance(node))
    return next_node
