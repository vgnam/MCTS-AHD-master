def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    # Calculate centrality scores for all nodes
    centrality_scores = {}
    for node in unvisited_nodes:
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        centrality_scores[node] = centrality

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            # Novel detour resistance factor
            detour_factor = (1 + (distance_to_node + distance_to_dest) / (2 * avg_distance)) ** -1
            # Weighted combination of metrics
            score = (0.4 * (1 / distance_to_node) + 0.3 * (1 / distance_to_dest) + 0.3 * (1 / centrality_scores[node])) * detour_factor * (1 - remaining_nodes_factor)

        if score > best_score:
            best_score = score
            next_node = node

    # Enhanced destination prioritization
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        threshold = 0.75 if remaining_nodes_factor > 0.5 else 0.9
        if dest_distance < distance_matrix[current_node][next_node] * threshold:
            next_node = destination_node

    return next_node
