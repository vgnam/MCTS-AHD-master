import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    mean_dist = np.mean(distances)
    std_dist = np.std(distances)

    # Dynamic threshold combining mean and standard deviation
    threshold = mean_dist - (0.5 * std_dist) if std_dist != 0 else mean_dist * 0.7
    candidates = [node for node, dist in zip(unvisited_nodes, distances) if dist <= threshold]

    if not candidates:
        # Probabilistic selection when no candidates meet threshold
        probs = [1 / (dist + 1e-10) for dist in distances]  # Avoid division by zero
        probs = np.array(probs) / np.sum(probs)
        next_node = np.random.choice(unvisited_nodes, p=probs)
    else:
        # Select closest among candidates
        next_node = min(candidates, key=lambda node: distance_matrix[current_node][node])

    return next_node
