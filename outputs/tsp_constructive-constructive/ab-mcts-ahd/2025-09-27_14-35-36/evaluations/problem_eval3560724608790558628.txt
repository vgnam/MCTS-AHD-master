def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = (remaining_nodes / total_nodes) ** 2
    exploitation_weight = 1 - exploration_weight

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        normalized_distance = distance_to_node / max(distance_matrix[current_node])
        normalized_dest = distance_to_dest / max(distance_matrix[node])

        score = (exploration_weight * (1 / (1 + normalized_distance)) +
                 exploitation_weight * (1 / (1 + normalized_dest)))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        threshold = 0.7 * (1 - (remaining_nodes / total_nodes))
        if dest_distance < distance_matrix[current_node][next_node] * threshold:
            next_node = destination_node

    return next_node
