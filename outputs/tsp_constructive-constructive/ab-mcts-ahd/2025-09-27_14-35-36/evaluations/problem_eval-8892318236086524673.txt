def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_start = distance_matrix[node][destination_node]
        exploration_weight = 1 / (1 + remaining_nodes)
        exploitation_weight = 1 - exploration_weight

        # Novel scoring mechanism combining distance, potential, and stochasticity
        if node == destination_node:
            score = exploitation_weight * (1 / (1 + distance_to_node)) + exploration_weight * 2
        else:
            score = exploitation_weight * (1 / (1 + distance_to_node)) + exploration_weight * (1 / (1 + distance_to_start))
            score *= (0.9 + 0.2 * (remaining_nodes / (remaining_nodes + 1)))

        if score > best_score:
            best_score = score
            next_node = node

    # Reconsider destination node if it becomes significantly better
    if destination_node in unvisited_nodes:
        destination_score = (1 / (1 + distance_matrix[current_node][destination_node])) * 2
        if destination_score * 1.2 > best_score:
            next_node = destination_node

    return next_node
