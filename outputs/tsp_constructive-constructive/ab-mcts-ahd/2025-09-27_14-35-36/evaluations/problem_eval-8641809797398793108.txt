def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    visits = {node: 0 for node in unvisited_nodes}
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            harmonic_mean = 2 / ((1 / distance_to_node) + (1 / distance_to_dest))
            penalty = 1 / distance_to_node * (1 + visits[node])
            score = harmonic_mean * (1 / penalty) * (1 / (1 + distance_to_node * remaining_nodes_factor))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.9:
            next_node = destination_node

    visits[next_node] = visits.get(next_node, 0) + 1
    return next_node
