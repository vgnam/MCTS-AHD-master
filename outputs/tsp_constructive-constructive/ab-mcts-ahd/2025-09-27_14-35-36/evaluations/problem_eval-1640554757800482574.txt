def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        total_distance = distance_to_node + distance_to_dest
        weight = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight adjustment
        score = (1 - weight) * (1 / total_distance) + weight * (distance_to_dest / total_distance)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.7:  # More aggressive destination preference
            next_node = destination_node

    return next_node
