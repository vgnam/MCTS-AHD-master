def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    current_distance = distance_matrix[current_node][destination_node]
    estimated_optimal = min([distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes]) if unvisited_nodes else 0
    weight_factor = 1.0 if estimated_optimal == 0 else (current_distance / estimated_optimal)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            angle_factor = 1.0
        else:
            cos_angle = (distance_to_dest**2 + distance_to_node**2 - current_distance**2) / (2 * distance_to_dest * distance_to_node)
            cos_angle = max(-1.0, min(1.0, cos_angle))
            angle_factor = cos_angle

        score = angle_factor * (1 / (1 + distance_to_node)) * weight_factor

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        nearest_distance = min([distance_matrix[current_node][node] for node in unvisited_nodes])
        if dest_distance < nearest_distance * 0.7:
            next_node = destination_node

    return next_node
