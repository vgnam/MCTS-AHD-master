importance of proximity to both the current node and the destination as fewer nodes remain, while also conditionally prioritizing the destination node if it is close enough.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    num_unvisited = len(unvisited_nodes)
    
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        adaptive_weight = num_unvisited / 20.0
        proximity_weight = (1 - adaptive_weight) * (1 / (1 + distance_to_node))
        destination_influence = adaptive_weight * (1 / (1 + distance_to_dest))
        score = proximity_weight + destination_influence

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.6:
            next_node = destination_node

    return next_node
