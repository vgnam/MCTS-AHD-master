import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    straight_line_distance = distance_matrix[current_node][destination_node]
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic penalty based on path deviation
        path_deviation = max(0, (distance_to_node + distance_to_dest) - straight_line_distance)
        deviation_penalty = 1 / (1 + path_deviation)

        # Connectivity score (number of unvisited neighbors)
        connectivity = sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] > 0)

        # Combined score with probabilistic element
        base_score = (1 / distance_to_node) * (1 / (1 + distance_to_dest)) * deviation_penalty * connectivity
        exploration_bonus = random.uniform(0.8, 1.2)
        score = base_score * exploration_bonus

        if score > best_score:
            best_score = score
            next_node = node

    # Special consideration for destination if significantly closer
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
