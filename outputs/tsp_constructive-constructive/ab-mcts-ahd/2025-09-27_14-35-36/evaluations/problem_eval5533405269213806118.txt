import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    stochastic_factor = random.uniform(0.8, 1.2)  # Introduce randomness to exploration

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        unvisited_neighbors = [n for n in unvisited_nodes if n in distance_matrix[node] and n != node]
        penalty = len(unvisited_neighbors) * 0.2 * stochastic_factor
        score = (distance_to_dest / (distance_to_node + distance_to_dest)) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance * stochastic_factor < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
