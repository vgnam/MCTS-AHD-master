def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic exploration-exploitation balance using sigmoid
        exploration_weight = 1 / (1 + math.exp(-(remaining_nodes - total_nodes/2)/3))
        exploitation_weight = 1 - exploration_weight

        # Modified harmonic mean with dynamic weights
        score = (exploration_weight * (1 / (1 + distance_to_node)) +
                 exploitation_weight * (1 / (1 + distance_to_dest)))

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic selection with small chance to explore
    if random.random() < 0.1 and len(unvisited_nodes) > 2:
        next_node = random.choice(list(unvisited_nodes))

    # Destination heuristic with relaxed threshold
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.8:
            next_node = destination_node

    return next_node
