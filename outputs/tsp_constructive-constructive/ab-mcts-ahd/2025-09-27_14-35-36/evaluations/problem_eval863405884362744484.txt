def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    cumulative_distance = 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Decay factor for cumulative distance
        decay_factor = 0.95 ** cumulative_distance

        # Penalty for revisiting nodes
        penalty = 1.0 if node not in visited_nodes else 1.5

        # Score combining proximity, cumulative distance with decay, and penalty
        score = (distance_to_dest / distance_to_node) * decay_factor * penalty

        if score > best_score:
            best_score = score
            next_node = node

    # Check if destination is closer than the selected node
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    visited_nodes.add(next_node)
    cumulative_distance += distance_matrix[current_node][next_node]

    return next_node
