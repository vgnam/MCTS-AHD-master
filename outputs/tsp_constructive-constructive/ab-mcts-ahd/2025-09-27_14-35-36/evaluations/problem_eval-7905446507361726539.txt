import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    temperature = max(10 / (len(distance_matrix) - len(unvisited_nodes) + 1), 1)  # Dynamic temperature adjustment
    penalty_factor = 1.5  # Penalty factor for shorter distances to avoid cycles
    penalties = [penalty_factor if min(distances) == d else 1 for d in distances]
    probabilities = [math.exp(-d * p / temperature) for d, p in zip(distances, penalties)]
    total_probability = sum(probabilities)
    normalized_probabilities = [p / total_probability for p in probabilities]

    next_node = random.choices(list(unvisited_nodes), weights=normalized_probabilities, k=1)[0]
    return next_node
