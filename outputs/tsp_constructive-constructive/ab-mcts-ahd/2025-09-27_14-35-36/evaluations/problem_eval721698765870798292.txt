import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    distances_to_node = [distance_matrix[current_node][node] for node in unvisited_nodes]
    distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    
    proximity_weights = [1 / (d + 1) for d in distances_to_node]
    destination_influences = [(unvisited_count / (unvisited_count + 1)) * (d / (d + 1)) for d in distances_to_dest]
    combined_scores = [(pw * 0.6) + (di * 0.4) for pw, di in zip(proximity_weights, destination_influences)]

    total_score = sum(combined_scores)
    normalized_weights = [score / total_score for score in combined_scores]

    next_node = random.choices(list(unvisited_nodes), weights=normalized_weights, k=1)[0]
    return next_node
