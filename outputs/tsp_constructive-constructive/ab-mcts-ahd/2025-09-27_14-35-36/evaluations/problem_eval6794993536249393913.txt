def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)
    weight = (remaining_nodes + 5) / (remaining_nodes + 20)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = weight * (1 / (1 + distance_to_node)) + (1 - weight) * (distance_to_dest / (1 + distance_to_node))
        scores.append((node, score))

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        best_score = max(score for node, score in scores)
        if dest_distance < best_score * 0.7:
            return destination_node

    total_score = sum(score for node, score in scores)
    probabilities = [score / total_score for node, score in scores]

    next_node = random.choices([node for node, _ in scores], probabilities, k=1)[0]
    return next_node
