def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    penalty_factor = 0.1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        potential_savings = 1 / (1 + distance_matrix[current_node][destination_node] - distance_to_dest)
        weight = (remaining_nodes + 5) / (remaining_nodes + 15)
        penalty = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if distance_matrix[node][neighbor] < 2 * distance_to_node) * penalty_factor
        score = weight * (1 / (1 + distance_to_node + penalty)) + (1 - weight) * potential_savings

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.7:
            next_node = destination_node

    return next_node
