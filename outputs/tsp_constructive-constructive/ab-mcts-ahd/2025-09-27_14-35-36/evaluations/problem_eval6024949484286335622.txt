def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    unvisited_count = len(unvisited_nodes)
    total_unvisited = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / unvisited_count if unvisited_count else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_weight = 1 / (1 + distance_to_node)
        centrality_penalty = sum(1 / (1 + distance_matrix[node][other]) for other in unvisited_nodes if other != node) / (unvisited_count - 1) if unvisited_count > 1 else 0
        adjusted_dest = (distance_to_dest / distance_to_node) * (total_unvisited / (total_unvisited + distance_to_dest))
        score = (proximity_weight * 0.4) + (adjusted_dest * 0.4) - (centrality_penalty * 0.2)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.6:
            next_node = destination_node

    return next_node
