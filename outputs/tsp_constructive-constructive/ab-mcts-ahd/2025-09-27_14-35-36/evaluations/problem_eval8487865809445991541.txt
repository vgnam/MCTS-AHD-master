def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            proximity_weight = 0.5 / (1 + distance_to_node)
            destination_weight = 0.5 / (1 + distance_to_dest)
            centrality = sum(distance_matrix[node]) / (total_nodes - 1)
            selection_probability = 1 / (1 + centrality * remaining_nodes_factor)
            score = (proximity_weight + destination_weight) * selection_probability

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        threshold = 0.75 * (1 - remaining_nodes_factor)
        if dest_distance < distance_matrix[current_node][next_node] * threshold:
            next_node = destination_node

    return next_node
