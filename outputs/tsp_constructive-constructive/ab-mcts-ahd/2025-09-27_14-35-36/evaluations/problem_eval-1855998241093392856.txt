def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            return float('-inf')

        exploration_factor = 0.5 if node in unvisited_nodes else -0.5
        utility_score = (1 / (1 + distance_to_node)) + (1 / (1 + distance_to_dest))
        score = utility_score * (1 + exploration_factor)
        penalty = -1 * (1 / (1 + distance_to_node))
        return score + penalty

    next_node = max(unvisited_nodes, key=lambda node: weighted_score(node))
    return next_node
