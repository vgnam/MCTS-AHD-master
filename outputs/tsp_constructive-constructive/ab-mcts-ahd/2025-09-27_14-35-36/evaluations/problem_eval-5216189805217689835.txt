def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    visits = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        penalty = visits[node] * 0.1  # Introduce a penalty factor for revisited nodes
        score = (distance_to_dest / distance_to_node) * (1 / (1 + distance_to_node + penalty))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.7:  # Tighter margin for destination override
            next_node = destination_node

    visits[next_node] = visits.get(next_node, 0) + 1
    return next_node
