def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            scores.append((node, float('-inf')))
            continue

        normalized_distance = distance_to_node / avg_distance if avg_distance > 0 else 1
        normalized_dest = distance_to_dest / (sum(distance_matrix[dest][node] for dest in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 1)

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        priority_factor = (1 - len(unvisited_nodes) / len(distance_matrix)) * 0.7 + 0.3

        score = (1 / (normalized_distance + normalized_dest)) * (1 - centrality) * priority_factor
        score *= (1 - 0.5 * (distance_to_node / sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)))

        scores.append((node, score))

    if destination_node in unvisited_nodes:
        dest_score = max(score for node, score in scores if node != destination_node) * 1.2
        scores.append((destination_node, dest_score))

    scores.sort(key=lambda x: x[1], reverse=True)
    return next_node
