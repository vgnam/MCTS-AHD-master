def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    # Calculate centroid of unvisited nodes
    centroid = [0.0, 0.0]
    if unvisited_nodes:
        for node in unvisited_nodes:
            centroid[0] += node[0]
            centroid[1] += node[1]
        centroid[0] /= len(unvisited_nodes)
        centroid[1] /= len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Calculate distance to centroid
        distance_to_centroid = ((node[0] - centroid[0])**2 + (node[1] - centroid[1])**2)**0.5

        # Dynamic weight factor based on centroid proximity
        weight_factor = 1 + (1 / (1 + distance_to_centroid))

        # Modified score with probabilistic component
        score = (1 / (1 + distance_to_node)) * (distance_to_dest ** 0.5) * weight_factor + (0.3 * (distance_to_node / avg_distance))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < avg_distance * 0.6:  # Adaptive threshold
            next_node = destination_node

    return next_node
