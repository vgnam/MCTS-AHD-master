import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    alpha = 0.7  # Weight for immediate distance
    beta = 0.3   # Weight for future potential

    for node in unvisited_nodes:
        # Immediate distance factor
        distance_to_node = distance_matrix[current_node][node]
        immediate_score = 1 / (1 + distance_to_node)

        # Future potential factor (predictive lookahead)
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_future_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            future_score = 1 / (1 + avg_future_distance)
        else:
            future_score = 1

        # Combined score with random perturbation
        score = alpha * immediate_score + beta * future_score
        score *= (1 + 0.1 * random.random())  # Add small randomness

        if score > best_score:
            best_score = score
            next_node = node

    # Special handling for destination node
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        nearest_unvisited = min(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)

        # More aggressive threshold for destination prioritization
        if dest_distance < nearest_unvisited * 0.6 or (len(unvisited_nodes) == 1 and dest_distance < nearest_unvisited * 1.2):
            next_node = destination_node

    return next_node
