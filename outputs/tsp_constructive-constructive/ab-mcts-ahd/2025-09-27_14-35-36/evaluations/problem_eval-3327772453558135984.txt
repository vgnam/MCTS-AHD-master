import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    probabilities = [1 / (distance + 1e-10) for distance in distances]
    total_prob = sum(probabilities)
    normalized_probabilities = [p / total_prob for p in probabilities]

    # Introduce a small random factor to maintain exploration
    exploration_factor = 0.1
    adjusted_probabilities = [(1 - exploration_factor) * p + exploration_factor * random.random() for p in normalized_probabilities]

    next_node = random.choices(list(unvisited_nodes), weights=adjusted_probabilities, k=1)[0]
    return next_node
