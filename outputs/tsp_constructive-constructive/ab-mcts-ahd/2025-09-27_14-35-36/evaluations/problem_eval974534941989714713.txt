def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes_factor = len(unvisited_nodes) / len(distance_matrix)
    total_unvisited = len(unvisited_nodes)
    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances_to_unvisited) / total_unvisited if total_unvisited else 0
    std_dev = (sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / total_unvisited) ** 0.5 if total_unvisited > 1 else 0

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            score = float('-inf')
        else:
            geometric_mean = (distance_to_node * distance_to_dest) ** 0.5
            detour_resistance = 1 / (1 + (distance_to_node + distance_to_dest - geometric_mean) ** 2)
            distance_ratio = distance_to_node / (distance_to_node + distance_to_dest)
            variance_penalty = 1 / (1 + (std_dev / distance_to_node) ** 1.5)
            score = (geometric_mean * distance_ratio * detour_resistance * variance_penalty) * (1 / (1 + distance_to_node * remaining_nodes_factor))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.75:
            next_node = destination_node

    return next_node
