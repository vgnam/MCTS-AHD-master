def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited
    urgency_factor = num_unvisited * (1.0 + avg_distance / distance_matrix[current_node][destination_node])

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = distance_to_node + urgency_factor * distance_to_dest
        if score < best_score:
            best_score = score
            next_node = node

    # Add a small random perturbation to explore alternative paths
    if num_unvisited > 1 and random.random() < 0.1:
        candidates = [node for node in unvisited_nodes if node != next_node]
        next_node = random.choice(candidates)

    return next_node
