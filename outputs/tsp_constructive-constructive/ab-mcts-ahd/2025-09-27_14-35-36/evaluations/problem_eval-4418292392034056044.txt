def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def centrality(node):
        return sum(distance_matrix[node]) / len(distance_matrix[node])

    def weighted_score(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            return float('-inf')

        weight = 0.8 if node in unvisited_nodes else 1.2
        geometric_mean = (distance_to_node * distance_to_dest * centrality(node)) ** (1/3)
        penalty = 1 / (distance_to_node ** 0.75)
        return geometric_mean * penalty * weight

    candidates = unvisited_nodes.copy()
    if len(candidates) > 3:
        candidates = sorted(candidates, key=lambda x: distance_matrix[current_node][x])[:3]

    next_node = max(candidates, key=lambda node: weighted_score(node))
    return next_node
