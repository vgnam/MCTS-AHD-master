def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        weight_factor = 1 / (1 + 2 * (1 - (remaining_nodes / len(distance_matrix))))  # Aggressively adjusted weight factor
        score = distance_to_node + weight_factor * distance_to_dest

        if score < best_score:  # Minimizing instead of maximizing score
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < best_score:
            next_node = destination_node

    return next_node
