import random
import statistics

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    decay_factor = 0.8  # Adjusts influence of recent selections
    recent_nodes = []  # Track recent selections to apply decay

    if random.random() < 0.3:  # 30% chance to use random selection
        next_node = random.choice(list(unvisited_nodes))
    else:  # 70% chance to use a modified nearest neighbor
        candidates = []
        for node in unvisited_nodes:
            distance_to_current = distance_matrix[current_node][node]
            distance_to_destination = distance_matrix[node][destination_node]
            # Apply decay factor to recent selections
            decay_adjustment = decay_factor ** recent_nodes.count(node) if node in recent_nodes else 1
            harmonic_mean = (2 * distance_to_current * distance_to_destination) / (distance_to_current + distance_to_destination + 0.1)
            candidates.append((node, harmonic_mean * decay_adjustment))

        next_node = min(candidates, key=lambda x: x[1])[0]
        recent_nodes.append(next_node)

    return next_node
