import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic temperature adjustment
    temperature = len(unvisited_nodes) ** 0.5

    # Distance penalty term
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    distance_penalty = [max(0, (distance - avg_distance) / avg_distance) for distance in distances]

    # Momentum term (direction towards destination)
    dest_distance = distance_matrix[current_node][destination_node]
    momentum = [abs(distance_matrix[node][destination_node] - dest_distance) for node in unvisited_nodes]

    # Combined scoring function
    scores = [
        math.exp(-(distance + 0.5 * penalty + 0.3 * m) / temperature)
        for distance, penalty, m in zip(distances, distance_penalty, momentum)
    ]

    # Normalize and select
    total_score = sum(scores)
    probabilities = [score / total_score for score in scores]
    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]

    return next_node
