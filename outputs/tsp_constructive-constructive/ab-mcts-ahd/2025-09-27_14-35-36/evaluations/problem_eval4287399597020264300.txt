def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and path cost
        weight = (remaining_nodes / (remaining_nodes + 1)) * (1 / (1 + distance_to_node))

        # Lookahead factor: estimate future cost
        lookahead_factor = 0
        if remaining_nodes > 1:
            avg_future_cost = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
            lookahead_factor = 1 / (1 + avg_future_cost)

        # Probabilistic score with penalty for high expected future cost
        score = weight * (1 / (1 + distance_to_node)) + (1 - weight) * lookahead_factor

        # Penalize nodes that are expected to increase total path length
        if distance_to_node > distance_matrix[current_node][next_node] if next_node else float('inf'):
            score *= 0.7

        if score > best_score:
            best_score = score
            next_node = node

    # Early return to destination if it significantly reduces total path
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < distance_matrix[current_node][next_node] * 0.7:
            next_node = destination_node

    return next_node
