"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    best_score = float('-inf')\n    visited_nodes = set()\n\n    for node in unvisited_nodes:\n        distance_to_node = distance_matrix[current_node][node]\n        distance_to_dest = distance_matrix[node][destination_node]\n\n        # Weighted score based on proximity to current node and destination\n        if node in visited_nodes:\n            penalty = 1.5  # Penalty for revisiting nodes\n        else:\n            penalty = 1.0\n\n        proximity_weight = 1 / (1 + distance_to_node)\n        destination_influence = 0.8 * (distance_to_dest / (distance_to_node + 1))\n\n        score = (proximity_weight + destination_influence) * penalty\n\n        if score > best_score:\n            best_score = score\n            next_node = node\n\n    # Check if destination is closer than the selected node\n    if destination_node in unvisited_nodes:\n        dest_distance = distance_matrix[current_node][destination_node]\n        if dest_distance < distance_matrix[current_node][next_node]:\n            next_node = destination_node\n\n    visited_nodes.add(next_node)\n\n    return next_node"