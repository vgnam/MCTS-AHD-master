def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Calculate node centrality as the average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight based on remaining nodes (higher weight for immediate distance when few nodes remain)
        weight = 0.8 if len(unvisited_nodes) > 2 else 1.2

        score = (weight * immediate_distance) - (0.5 * future_savings) + (0.3 * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
