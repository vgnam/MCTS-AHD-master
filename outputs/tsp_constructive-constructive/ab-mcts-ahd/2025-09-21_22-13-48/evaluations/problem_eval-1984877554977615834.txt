def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Weight decreases as nodes are visited

        # Centrality factor: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Combined score with centrality consideration
        score = weight * immediate_distance - (1 - weight) * future_savings + 0.3 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
