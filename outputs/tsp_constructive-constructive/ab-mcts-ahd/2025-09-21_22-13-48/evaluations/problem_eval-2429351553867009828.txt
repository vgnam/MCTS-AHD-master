def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if total_unvisited > 1:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1)
        else:
            avg_distance = 0

        # Dynamic weighting factor based on remaining unvisited nodes
        weight_factor = 0.2 + 0.8 * (1 / (total_unvisited + 1))
        # Penalize high immediate distances if revisiting is likely
        penalty = 0.1 * immediate_distance if total_unvisited < len(distance_matrix) / 2 else 0
        score = immediate_distance + weight_factor * avg_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
