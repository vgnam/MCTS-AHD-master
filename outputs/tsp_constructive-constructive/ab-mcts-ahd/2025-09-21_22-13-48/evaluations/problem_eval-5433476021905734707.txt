def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate average distance to unvisited nodes
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment: favor immediate distance more when fewer nodes are left
        weight = 1.0 - (0.5 * (remaining_nodes / (remaining_nodes + 1)))

        # Incorporate average distance for global perspective
        score = (immediate_distance - weight * future_savings) + (0.3 * (immediate_distance - avg_distance))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
