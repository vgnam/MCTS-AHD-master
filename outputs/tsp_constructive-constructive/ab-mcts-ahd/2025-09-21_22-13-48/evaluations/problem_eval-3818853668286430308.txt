importance when more nodes remain, ensuring a balanced exploration of short-term and long-term efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment
        if total_unvisited <= 2:
            weight_immediate = 1.5
            weight_future = 0.3
        else:
            weight_immediate = 1.0
            weight_future = 0.5

        score = (weight_immediate * immediate_distance) - (weight_future * future_savings)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
