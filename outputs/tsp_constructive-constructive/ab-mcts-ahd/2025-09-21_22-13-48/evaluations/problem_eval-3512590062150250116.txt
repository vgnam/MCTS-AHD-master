import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        # Dynamic weight: favors nodes closer to destination but allows exploration
        weight = (1.0 / (distance_to_current + 1e-6)) * (1.0 / (distance_to_destination + 1e-6))
        candidates.append((node, weight))

    # Select node based on weighted probability
    nodes, weights = zip(*candidates)
    next_node = random.choices(nodes, weights=weights, k=1)[0]
    return next_node
