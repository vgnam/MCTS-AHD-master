def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weighted_scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        heuristic_factor = 1.0 / (1.0 + distance_to_destination)  # Higher weight for nodes closer to destination
        weighted_score = distance_to_current * heuristic_factor
        weighted_scores.append((node, weighted_score))

    # Select the node with the minimal weighted score
    next_node = min(weighted_scores, key=lambda x: x[1])[0]
    return next_node
