def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Normalize future savings by remaining unvisited nodes
        dynamic_weight = 0.5 * (1.0 / len(unvisited_nodes)) if unvisited_nodes else 0.0
        penalty = 0.1 * (distance_matrix[node][destination_node] - future_savings) if future_savings < 0 else 0.0

        # Weighted score with dynamic adjustments
        score = immediate_distance - dynamic_weight * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
