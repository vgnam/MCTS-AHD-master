def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    distance_weight = 0.6 + 0.2 * (remaining_nodes / (remaining_nodes + 1))
    savings_weight = 0.4 - 0.2 * (remaining_nodes / (remaining_nodes + 1))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        centrality_score = 1.0 / (1.0 + centrality)

        score = (distance_weight * immediate_distance -
                 savings_weight * future_savings +
                 0.2 * centrality_score)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
