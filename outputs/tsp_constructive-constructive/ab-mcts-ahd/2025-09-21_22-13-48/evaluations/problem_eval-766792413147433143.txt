def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 1.0 - 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Smooth transition from 1.0 to 0.5

        # Logarithmic scaling for future savings to emphasize significant reductions
        if future_savings > 0:
            scaled_savings = future_savings * (1 + 0.1 * np.log1p(future_savings))
        else:
            scaled_savings = future_savings

        score = immediate_distance - weight * scaled_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
