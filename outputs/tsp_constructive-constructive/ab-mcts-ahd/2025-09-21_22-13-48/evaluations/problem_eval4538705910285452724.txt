def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if remaining_nodes > 1:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
        else:
            avg_distance = 0

        # Dynamic weight based on remaining nodes
        weight = 0.3 if remaining_nodes > 5 else 0.1 if remaining_nodes > 2 else 0.05

        # Penalty for revisiting nodes (simulated here as a small constant)
        revisit_penalty = 0.05 * immediate_distance

        score = immediate_distance + weight * avg_distance + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
