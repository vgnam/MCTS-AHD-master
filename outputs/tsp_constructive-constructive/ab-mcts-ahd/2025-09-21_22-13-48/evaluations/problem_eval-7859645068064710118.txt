def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    distance_weight = 0.7 + 0.2 * (remaining_nodes / (remaining_nodes + 1))  # Linear decay for distance
    revisit_weight = 0.1 + 0.2 * (remaining_nodes / (remaining_nodes + 1)) ** 2  # Quadratic decay for revisits

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        revisit_penalty = 1.0 if node in unvisited_nodes else 0.0

        # Calculate node centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        centrality_score = centrality  # Direct centrality to favor more distant nodes

        score = (distance_weight * immediate_distance -
                 revisit_weight * revisit_penalty +
                 0.2 * centrality_score)  # Added centrality factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
