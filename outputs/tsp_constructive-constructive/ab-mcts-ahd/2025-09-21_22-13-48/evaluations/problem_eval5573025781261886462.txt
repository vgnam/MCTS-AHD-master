def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_unvisited_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        dynamic_weight = 1.0 - 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Adjust weight based on remaining nodes

        score = immediate_distance - dynamic_weight * future_savings + 0.3 * total_unvisited_distance  # Incorporate average distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
