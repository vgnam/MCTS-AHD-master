def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    decay_factor = 0.9  # Adjusts the influence of average distance over iterations

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        if unvisited_nodes:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
            weighted_avg = avg_distance * (decay_factor ** (len(unvisited_nodes) - 1))  # Decay over iterations
        else:
            weighted_avg = 0

        # Penalty for revisiting nodes (simulates cycle avoidance)
        penalty = 0.1 if node in unvisited_nodes else 0

        score = immediate_distance + 0.2 * weighted_avg + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
