def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting based on remaining unvisited nodes
        weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        weighted_score = immediate_distance - weight_factor * future_savings

        # Penalty for nodes too close to current node to avoid revisits
        if immediate_distance < 0.1 * max(distance_matrix[current_node][n] for n in unvisited_nodes if n != node):
            weighted_score += 0.5 * immediate_distance

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
