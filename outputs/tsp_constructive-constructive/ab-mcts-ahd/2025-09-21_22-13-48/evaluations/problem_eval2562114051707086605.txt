def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1.0 if remaining_nodes <= 2 else 0.5 + 0.5 * (remaining_nodes / len(distance_matrix))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Non-linear transformation and penalty for proximity
        penalty = 0.1 * immediate_distance if immediate_distance < 0.1 * distance_matrix[current_node][destination_node] else 0
        score = immediate_distance - dynamic_weight * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
