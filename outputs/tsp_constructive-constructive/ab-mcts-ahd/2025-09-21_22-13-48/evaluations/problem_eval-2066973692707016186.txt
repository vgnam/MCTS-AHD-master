def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if unvisited_nodes:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        else:
            avg_distance = 0

        # Dynamic weighting based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid function to adjust weight

        # Penalty for revisiting nodes (simulated here for demonstration)
        penalty = 0.1 if node in [n for n in unvisited_nodes if n != node] else 0

        score = immediate_distance + weight * avg_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
