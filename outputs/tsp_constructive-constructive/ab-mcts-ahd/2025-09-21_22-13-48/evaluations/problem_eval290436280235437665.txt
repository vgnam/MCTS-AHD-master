def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - immediate_distance
        dynamic_weight = 1.0 / (1.0 + 0.1 * current_to_dest)  # Weight adapts to proximity to destination

        score = immediate_distance + dynamic_weight * future_savings  # Non-linear blending

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
