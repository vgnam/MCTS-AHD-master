def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weighting based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 if remaining_nodes > 5 else 0.2

    # Penalty for revisiting nodes (avoid cycles)
    penalty = 10 if current_node in unvisited_nodes else 0

    best_score = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0
        score = immediate_distance + weight_factor * avg_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node
            candidates = [(node, score)]
        elif score == best_score:
            candidates.append((node, score))

    # Probabilistic selection among top candidates
    if candidates:
        total_score = sum(score for _, score in candidates)
        probabilities = [score / total_score for _, score in candidates]
        next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]

    return next_node
