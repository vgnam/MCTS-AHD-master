def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    total_unvisited = num_unvisited + 1  # Include current node

    # Dynamic weight based on progress (favors immediate distance early, future savings late)
    weight_immediate = 1.0 - (num_unvisited / total_unvisited) * 0.5
    weight_future = 0.5 + (num_unvisited / total_unvisited) * 0.5

    # Compute average distance to unvisited nodes for additional context
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Normalize future savings by average distance to avoid scale bias
        normalized_future = future_savings / avg_distance if avg_distance != 0 else 0

        # Weighted score with dynamic weights and normalized future savings
        score = weight_immediate * immediate_distance - weight_future * normalized_future

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
