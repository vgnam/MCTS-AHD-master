def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining nodes
        weight = 0.5 + (0.5 * (1.0 - (1.0 / (total_unvisited + 1))))

        # Weighted score combining immediate and future considerations
        score = (immediate_distance * weight) - (future_savings * (1.0 - weight))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
