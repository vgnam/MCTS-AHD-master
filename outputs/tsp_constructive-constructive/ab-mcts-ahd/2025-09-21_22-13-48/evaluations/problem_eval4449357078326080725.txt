defaults to the destination node if no unvisited nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node
        elif distance == min_distance:
            # If multiple nodes have the same minimal distance, choose the one with the most unvisited neighbors
            if len(set(unvisited_nodes) & set([i for i in range(len(distance_matrix)) if distance_matrix[node][i] > 0])) > \
               len(set(unvisited_nodes) & set([i for i in range(len(distance_matrix)) if distance_matrix[next_node][i] > 0])):
                next_node = node

    return next_node
