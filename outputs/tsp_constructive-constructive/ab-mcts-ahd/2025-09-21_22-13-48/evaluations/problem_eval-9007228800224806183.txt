def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting based on remaining nodes and node centrality
        weight = 1.0 - (0.5 * (1.0 - 1.0 / (num_unvisited + 1)))
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])  # Average distance to all nodes
        score = immediate_distance - weight * future_savings + 0.3 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
