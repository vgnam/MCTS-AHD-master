def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    normalization_factor = len(unvisited_nodes) ** 0.5  # Adjusts weight based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting and penalty for potential detours
        weight = 1.0 - 0.3 * (future_savings / (immediate_distance + 1e-6))  # Avoid division by zero
        score = immediate_distance - weight * future_savings

        # Penalty for nodes that could create suboptimal detours
        if immediate_distance > 2 * distance_matrix[current_node][destination_node]:
            score += 0.5 * immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
