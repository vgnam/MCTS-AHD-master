def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)  # Decreases over time
    scores = []
    nodes = []

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if remaining_nodes > 1:
            distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
            avg_distance = sum(distances_to_unvisited) / (remaining_nodes - 1)
            variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)

            # Calculate node centrality (number of connections to unvisited nodes)
            centrality = sum(1 for other in unvisited_nodes if distance_matrix[node][other] > 0 and other != node)

            # Weighted score with dynamic temperature
            score = (immediate_distance + 0.4 * avg_distance + 0.1 * variance) / (1.0 + centrality * temperature)
        else:
            score = immediate_distance

        scores.append(score)
        nodes.append(node)

    # Probabilistic selection based on scores
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]  # Invert for lower scores being better
    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]

    next_node = np.random.choice(nodes, p=probabilities) if remaining_nodes > 1 else nodes[np.argmin(scores)]

    return next_node
