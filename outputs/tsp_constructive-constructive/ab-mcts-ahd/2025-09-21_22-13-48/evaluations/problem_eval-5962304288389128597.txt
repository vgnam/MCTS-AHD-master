def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 for current node

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight for future savings based on remaining nodes
        weight = 0.5 + 0.5 * (remaining_nodes / total_nodes)

        # Non-linear transformation of future savings
        transformed_savings = future_savings ** 1.5 if future_savings > 0 else future_savings

        score = immediate_distance - weight * transformed_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
