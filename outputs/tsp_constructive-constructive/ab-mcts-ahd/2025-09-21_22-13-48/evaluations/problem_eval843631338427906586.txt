def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        dynamic_weight = 0.5 * (1 + (1 / (remaining_nodes + 1)))  # Adjusts weight based on remaining nodes
        normalized_score = (immediate_distance / max(immediate_distance, 1)) - dynamic_weight * (future_savings / max(future_savings, 1))  # Normalized score

        if normalized_score < best_score:
            best_score = normalized_score
            next_node = node

    return next_node
