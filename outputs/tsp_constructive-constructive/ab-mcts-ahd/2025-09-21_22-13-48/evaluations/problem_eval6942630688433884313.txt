def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_immediate = max(0.5, 1.0 - (remaining_nodes / len(distance_matrix)))
    weight_future = 1.0 - weight_immediate

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        centrality = sum(distance_matrix[node]) / len(distance_matrix)
        adjusted_score = (weight_immediate * immediate_distance) - (weight_future * future_savings) + (0.2 * centrality)

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node

    return next_node
