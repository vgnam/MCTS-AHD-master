def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    # Calculate dynamic weight based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 1.0 if remaining_nodes <= 2 else 0.7
    weight_future = 0.5 if remaining_nodes <= 2 else 1.3

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = weight_immediate * immediate_distance - weight_future * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
