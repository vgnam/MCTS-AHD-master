def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    alpha = 0.7  # Weight for current distance (higher = more exploitation)
    beta = 0.3   # Weight for destination distance (higher = more exploration)
    threshold = 1.5  # Dynamic threshold multiplier for filtering

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        score = alpha * current_dist + beta * dest_dist

        # Apply dynamic threshold filtering
        if current_dist > threshold * min(distance_matrix[current_node][n] for n in unvisited_nodes):
            continue

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
