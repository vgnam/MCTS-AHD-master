def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining nodes
        weight = 0.5 * (num_unvisited / (num_unvisited + 1))  # Decays as nodes are visited

        # Normalize future savings by average remaining distance
        avg_remaining_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1) if num_unvisited > 1 else 0
        normalized_savings = future_savings / avg_remaining_distance if avg_remaining_distance > 0 else 0

        # Centrality score: higher if node is closer to other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Combined score: immediate distance + weighted normalized savings - centrality
        score = immediate_distance + weight * normalized_savings - 0.3 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
