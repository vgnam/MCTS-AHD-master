def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)
        weight = 0.2 * (1 + 1 / remaining_nodes)  # Dynamic weight based on remaining nodes
        revisit_penalty = 0.1 * (1 if node == current_node else 0)  # Penalty for revisiting
        score = immediate_distance + weight * avg_distance + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
