def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes are visited

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if remaining_nodes > 1:
            distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
            min_distance = min(distances_to_unvisited)
            max_distance = max(distances_to_unvisited)
            avg_distance = sum(distances_to_unvisited) / len(distances_to_unvisited)
            score = immediate_distance + dynamic_weight * (0.3 * avg_distance + 0.3 * min_distance + 0.4 * max_distance)
        else:
            score = immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
