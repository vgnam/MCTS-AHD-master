def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    # Sigmoid function to adjust weights dynamically
    weight_factor = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
    immediate_weight = 1.0 - 0.8 * weight_factor
    future_weight = 0.2 + 0.8 * weight_factor

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = immediate_weight * immediate_distance - future_weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
