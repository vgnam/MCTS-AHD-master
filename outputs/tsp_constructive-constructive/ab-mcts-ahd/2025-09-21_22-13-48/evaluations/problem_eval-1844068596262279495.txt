def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        dynamic_weight = 0.5 + 0.5 * (total_unvisited / (total_unvisited + 1))  # Adjusts between 0.5 and 1.0

        # Centrality factor: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        score = immediate_distance - dynamic_weight * future_savings + 0.2 * centrality  # Balanced score

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
