def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if unvisited_nodes:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        else:
            avg_distance = 0

        # Dynamic weight based on remaining unvisited nodes
        dynamic_weight = 0.3 * (total_unvisited / (total_unvisited + 1)) + 0.1
        score = immediate_distance + dynamic_weight * avg_distance

        # Penalize revisits (simplified example)
        if node in distance_matrix and current_node in distance_matrix[node]:
            revisit_penalty = distance_matrix[node][current_node] * 0.1
            score += revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
