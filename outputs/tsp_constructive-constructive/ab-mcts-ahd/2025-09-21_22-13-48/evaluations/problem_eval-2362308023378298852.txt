import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    log_factor = math.log(num_unvisited + 1)  # Avoid log(0)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight: increases as unvisited nodes decrease
        dynamic_weight = 0.5 * (1 + 1 / (1 + log_factor))

        # Penalize nodes that increase immediate distance beyond a threshold
        if immediate_distance > distance_matrix[current_node][destination_node] * 1.2:
            penalty = immediate_distance * 0.3
        else:
            penalty = 0

        score = immediate_distance - dynamic_weight * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
