def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_weight = 0.0
    weights = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = (1.0 / (distance_to_current + 1e-6)) * (1.0 / (distance_to_destination + 1e-6))
        weights.append(weight)
        total_weight += weight

    if total_weight == 0:
        return min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    rand_val = random.random() * total_weight
    cumulative_weight = 0.0

    for i, node in enumerate(unvisited_nodes):
        cumulative_weight += weights[i]
        if rand_val <= cumulative_weight:
            return node

    return next_node
