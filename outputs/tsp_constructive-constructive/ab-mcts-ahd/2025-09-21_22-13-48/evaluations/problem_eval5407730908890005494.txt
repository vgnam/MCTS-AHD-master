def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        score = current_distance + 0.5 * dest_distance  # Weighted sum to balance proximity and destination alignment

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            # Additional tie-breaker: choose the node with the better balance between current and destination distances
            if (current_distance / dest_distance) < (distance_matrix[current_node][next_node] / distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
