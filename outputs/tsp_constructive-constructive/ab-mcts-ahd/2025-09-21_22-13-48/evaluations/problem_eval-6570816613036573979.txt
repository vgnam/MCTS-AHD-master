def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting factor based on proximity to destination
        proximity_factor = 1.0 - (distance_matrix[current_node][destination_node] / (sum(distance_matrix[current_node]) + 1e-6))
        dynamic_weight = 0.4 * (1.0 + proximity_factor)

        # Penalty for nodes too far from current node
        penalty = 0.2 * max(0, immediate_distance - 2 * distance_matrix[current_node][destination_node])

        score = immediate_distance - dynamic_weight * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
