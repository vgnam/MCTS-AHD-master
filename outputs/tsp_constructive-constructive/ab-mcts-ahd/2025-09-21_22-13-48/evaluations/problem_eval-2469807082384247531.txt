def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 + (remaining_nodes / (remaining_nodes + 1))  # Adjusts weight based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Penalize nodes too close to current_node to avoid backtracking
        if immediate_distance < 0.1 * distance_matrix[current_node][destination_node]:
            score = immediate_distance + 2 * future_savings  # Stronger future savings bias
        else:
            score = immediate_distance - dynamic_weight * future_savings  # Dynamic weighted combination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
