def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    exploration_factor = len(unvisited_nodes) / total_nodes
    immediate_weight = 1.0 - exploration_factor  # More immediate focus as more nodes are left
    future_weight = 0.5 * exploration_factor  # More future focus as fewer nodes are left

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Sigmoid adjustment to smooth the transition
        sigmoid_factor = 1 / (1 + math.exp(-5 * (exploration_factor - 0.5)))  # Centered around 50% unvisited
        adjusted_immediate = immediate_distance * (1 + sigmoid_factor)
        adjusted_future = future_savings * (1 - sigmoid_factor)

        score = immediate_weight * adjusted_immediate - future_weight * adjusted_future

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
