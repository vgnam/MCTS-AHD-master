def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0
        dynamic_weight = 0.3 / (1 + remaining_nodes * 0.1)  # Adjusts weight based on remaining nodes
        penalty = 0.1 * distance_matrix[node][destination_node] if remaining_nodes < 3 else 0  # Penalizes nodes close to destination early
        score = immediate_distance + dynamic_weight * avg_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
