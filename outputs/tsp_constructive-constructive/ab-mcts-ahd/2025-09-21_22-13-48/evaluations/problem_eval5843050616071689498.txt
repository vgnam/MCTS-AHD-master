def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    immediate_weight = max(0.3, 1.0 - 0.7 * (total_unvisited / (total_unvisited + 1)))
    future_weight = 1.0 - immediate_weight

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        detour_penalty = max(0, immediate_distance - 1.5 * distance_matrix[current_node][destination_node])
        score = immediate_weight * immediate_distance - future_weight * future_savings + 0.2 * detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
