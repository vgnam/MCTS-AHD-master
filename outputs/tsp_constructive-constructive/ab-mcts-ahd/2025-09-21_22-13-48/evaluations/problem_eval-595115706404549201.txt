def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining nodes (0.3 to 0.7)
        dynamic_weight = 0.3 + 0.4 * (remaining_nodes / len(unvisited_nodes))

        # Penalize nodes that increase path length
        if immediate_distance > distance_matrix[current_node][destination_node]:
            penalty = immediate_distance - distance_matrix[current_node][destination_node]
        else:
            penalty = 0

        score = immediate_distance - dynamic_weight * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
