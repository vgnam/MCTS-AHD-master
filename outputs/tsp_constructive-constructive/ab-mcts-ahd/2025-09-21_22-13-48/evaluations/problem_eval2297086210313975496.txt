def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    decay_factor = 0.3 if len(unvisited_nodes) > 2 else 0.7  # Adjust based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if unvisited_nodes:
            future_cost = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        else:
            future_cost = 0

        # Penalize revisits to encourage diversity
        revisit_penalty = 0.1 if node in unvisited_nodes else 0
        score = immediate_distance + decay_factor * future_cost + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
