def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        # Dynamically adjust weights based on the number of remaining unvisited nodes
        weight_local = 0.7 if total_unvisited > 5 else 0.3
        weight_global = 1 - weight_local
        # Calculate a weighted score combining local and global distances
        score = (weight_local * local_distance) + (weight_global * global_distance)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            # If scores are equal, prefer the node closer to the destination
            if global_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
