def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Calculate centrality as the average distance to all other nodes
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Dynamic weighting: higher centrality reduces future savings weight
        weight_factor = 1.0 - (centrality / (2 * sum(distance_matrix[node])))
        score = immediate_distance - weight_factor * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
