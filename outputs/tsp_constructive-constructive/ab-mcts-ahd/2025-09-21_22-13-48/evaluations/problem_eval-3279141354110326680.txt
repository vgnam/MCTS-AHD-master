def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 if remaining_nodes <= 3 else 0.2  # Adjust weight dynamically

    best_score = float('inf')
    next_node = None

    avg_immediate_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        penalty = max(0, immediate_distance - 1.5 * avg_immediate_distance)  # Penalize excessively long jumps
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0
        score = immediate_distance + weight_factor * avg_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
