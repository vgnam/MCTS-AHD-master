def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    log_scale = max(1, math.log(remaining_nodes + 1))  # Avoid log(0)
    weight_immediate = 1.0 / log_scale
    weight_future = 0.5 * log_scale

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Penalize revisiting the starting node if not necessary
        if node == destination_node and remaining_nodes > 1:
            immediate_distance *= 1.5  # Penalty factor

        score = weight_immediate * immediate_distance - weight_future * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
