def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.2 * (0.9 ** (remaining_nodes - 1))  # Dynamic weight

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0
        destination_penalty = 0.1 * distance_matrix[node][destination_node]  # Penalty for nodes close to destination
        score = immediate_distance + weight_factor * avg_distance + destination_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
