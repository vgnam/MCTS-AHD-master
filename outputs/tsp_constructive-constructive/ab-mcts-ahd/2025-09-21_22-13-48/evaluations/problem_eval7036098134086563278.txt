def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 1.0 / (1.0 + math.exp(-0.1 * (num_unvisited - 5)))

        # Adjust weight based on average distance of unvisited nodes
        avg_unvisited_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited
        weight *= (1.0 + 0.2 * (avg_unvisited_distance / distance_matrix[current_node][destination_node]))

        score = immediate_distance - weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
