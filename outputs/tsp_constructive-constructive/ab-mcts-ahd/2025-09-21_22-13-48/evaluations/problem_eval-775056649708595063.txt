def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_ratio = len(unvisited_nodes) / total_unvisited if total_unvisited > 0 else 0
    dynamic_weight = 1.0 / (1.0 + math.exp(5 * (remaining_ratio - 0.5)))  # Sigmoid function

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = (1 - dynamic_weight) * immediate_distance + dynamic_weight * (0.5 * future_savings)

        # Local search: consider nearby nodes
        nearby_nodes = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] < immediate_distance * 1.5]
        if nearby_nodes:
            avg_nearby_distance = sum(distance_matrix[node][n] for n in nearby_nodes) / len(nearby_nodes)
            score += 0.2 * avg_nearby_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
