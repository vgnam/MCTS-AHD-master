def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_possible_savings = current_to_dest  # Maximum possible future savings
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - immediate_distance

        # Dynamic weight based on distance to destination
        if current_to_dest > 0:
            weight = 0.5 * (1 - (distance_matrix[node][destination_node] / current_to_dest))
        else:
            weight = 0.5

        score = immediate_distance - weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
