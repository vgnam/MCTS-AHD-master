import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment based on proximity to destination
        proximity_weight = 0.5 if distance_matrix[node][destination_node] < sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) else 0.2

        score = (1.5 * immediate_distance) + (proximity_weight * future_savings)
        scores.append((node, score))

    # Probabilistic selection based on normalized scores
    scores.sort(key=lambda x: x[1])
    probabilities = [1.0 / (i + 1) for i in range(len(scores))]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]
    return next_node
