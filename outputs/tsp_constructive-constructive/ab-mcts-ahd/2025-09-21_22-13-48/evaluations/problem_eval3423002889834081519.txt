def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 1.0 - 0.3 * (remaining_nodes / len(distance_matrix))  # Decreases as more nodes are visited
    weight_future = 0.5 + 0.3 * (remaining_nodes / len(distance_matrix))  # Increases as more nodes are visited

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        penalty = max(0, future_savings)  # Penalize nodes that increase distance to destination
        score = (weight_immediate * immediate_distance) - (weight_future * future_savings) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
