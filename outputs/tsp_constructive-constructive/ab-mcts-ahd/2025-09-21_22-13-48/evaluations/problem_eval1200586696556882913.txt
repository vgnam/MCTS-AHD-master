def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting: prioritize immediate distance when few nodes remain
        weight = 0.3 if remaining_nodes <= 3 else 0.5
        score = immediate_distance - weight * future_savings

        # Additional heuristic: penalize nodes that are too far from the average distance to unvisited nodes
        avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
        distance_penalty = abs(immediate_distance - avg_distance) * 0.2
        score += distance_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
