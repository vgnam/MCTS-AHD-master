def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    progress_ratio = visited_nodes / total_nodes
    weight_factor = 1.0 - 0.7 * progress_ratio  # Dynamically adjusts weight between 0.3 and 1.0

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = weight_factor * immediate_distance - (1.0 - weight_factor) * future_savings  # Dynamic weighted combination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
