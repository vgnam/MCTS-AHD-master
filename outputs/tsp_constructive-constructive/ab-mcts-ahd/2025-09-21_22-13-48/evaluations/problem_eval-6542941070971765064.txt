def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    adaptive_weight = 0.3 * (1.0 - (remaining_nodes / (remaining_nodes + 1)))  # Adjusts based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = 2.0 * immediate_distance - 0.5 * future_savings + adaptive_weight * (distance_matrix[current_node][destination_node] - distance_matrix[node][destination_node])

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
