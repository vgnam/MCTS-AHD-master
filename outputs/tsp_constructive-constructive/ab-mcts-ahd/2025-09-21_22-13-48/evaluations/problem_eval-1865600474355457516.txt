def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        weight = 1.0 / (1.0 + math.exp(-(remaining_nodes - 5) / 2.0))  # Adjust threshold and slope as needed
        score = immediate_distance - weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
