def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weights based on remaining unvisited nodes
        weight_immediate = 1.0 / num_unvisited
        weight_future = 1.0 / (1 + math.log(num_unvisited + 1))  # Avoid log(0)

        score = weight_immediate * immediate_distance - weight_future * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
