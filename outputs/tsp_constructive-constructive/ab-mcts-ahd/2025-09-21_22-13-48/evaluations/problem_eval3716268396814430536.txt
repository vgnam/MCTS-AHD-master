def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 * (1 + (remaining_nodes / (remaining_nodes + 1)))  # Adjusts weight based on remaining nodes

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        normalized_savings = future_savings / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] != 0 else 0

        # Centrality factor: prioritize nodes with lower average distance to unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_factor = 1 / (1 + centrality)  # Higher centrality reduces the factor

        score = immediate_distance - dynamic_weight * normalized_savings + centrality_factor * immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
