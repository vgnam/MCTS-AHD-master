def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visit_counts=None, exploration_weight=0.3):
    if not unvisited_nodes:
        return destination_node

    if visit_counts is None:
        visit_counts = {node: 0 for node in unvisited_nodes}

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        visit_bias = 1.0 / (1.0 + visit_counts.get(node, 0))  # Inverse of visit count
        score = (1 - exploration_weight) * distance + exploration_weight * (destination_distance * visit_bias)
        candidates.append((node, score))

    # Select node with the lowest score (prioritizes minimal distance and exploration)
    next_node = min(candidates, key=lambda x: x[1])[0]
    return next_node
