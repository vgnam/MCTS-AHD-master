def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        if total_unvisited > 5:
            weight = 1.0  # Prioritize immediate distance when many nodes remain
        else:
            weight = 0.7  # Shift to balance when fewer nodes remain

        score = immediate_distance - weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
