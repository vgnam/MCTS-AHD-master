def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight for future savings based on remaining nodes
        weight = 1.0 / (1.0 + math.exp(-(remaining_nodes - 3)))  # Sigmoid adjustment

        # Penalty for nodes too close to destination
        penalty = 0.0
        if distance_matrix[node][destination_node] < 0.5 * distance_matrix[current_node][destination_node]:
            penalty = 0.3 * immediate_distance

        score = immediate_distance - weight * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
