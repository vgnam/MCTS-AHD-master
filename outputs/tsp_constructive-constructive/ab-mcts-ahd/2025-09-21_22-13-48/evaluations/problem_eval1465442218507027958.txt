def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + 0.1 * remaining_nodes)  # Dynamic weight based on remaining nodes
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        dead_end_penalty = 0.0

        # Penalize nodes that might create dead-end paths
        if remaining_nodes > 1:
            next_unvisited = [n for n in unvisited_nodes if n != node]
            min_next_distance = min(distance_matrix[node][n] for n in next_unvisited)
            dead_end_penalty = 0.3 * min_next_distance

        combined_score = distance_to_current + weight_factor * distance_to_destination + dead_end_penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node
        elif combined_score == min_score:
            if distance_to_current < distance_matrix[next_node][current_node]:
                next_node = node

    return next_node
