import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight for future savings based on remaining nodes
        weight = 0.7 * (1 - remaining_nodes / (remaining_nodes + 2))

        # Novelty factor: encourage exploration of less visited nodes
        novelty = 0.3 * (1 / (remaining_nodes + 1))

        # Penalty for revisiting nodes
        penalty = 0.2 if current_node == node else 0.0

        # Normalize scores
        normalized_immediate = immediate_distance / max(1, max(distance_matrix[current_node]))
        normalized_future = future_savings / max(1, max(distance_matrix[node]))

        # Probabilistic score with novelty
        score = normalized_immediate - weight * normalized_future + penalty - novelty

        if score < best_score:
            best_score = score
            next_node = node

    # Randomly select with probability inversely proportional to score
    if random.random() < 0.3 and remaining_nodes > 1:
        candidates = [node for node in unvisited_nodes if node != next_node]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
