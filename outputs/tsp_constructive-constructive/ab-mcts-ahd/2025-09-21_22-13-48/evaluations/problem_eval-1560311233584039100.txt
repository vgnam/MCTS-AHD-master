def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting based on the ratio of immediate distance to future savings
        if future_savings != 0:
            weight = min(1.0, max(0.3, immediate_distance / future_savings))
        else:
            weight = 1.0

        # Centrality factor: prioritize nodes with higher connectivity
        centrality = sum(1 for d in distance_matrix[node] if d != float('inf')) / len(distance_matrix[node])

        score = immediate_distance - weight * future_savings + (1 - centrality) * 0.2

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
