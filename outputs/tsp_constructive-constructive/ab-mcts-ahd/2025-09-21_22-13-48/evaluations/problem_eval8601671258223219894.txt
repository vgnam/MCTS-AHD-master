import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight for future savings based on remaining nodes
        weight = 0.5 * math.log(remaining_nodes + 1) / math.log(len(distance_matrix) + 1)

        # Modified scoring with dynamic weight
        score = immediate_distance - weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
