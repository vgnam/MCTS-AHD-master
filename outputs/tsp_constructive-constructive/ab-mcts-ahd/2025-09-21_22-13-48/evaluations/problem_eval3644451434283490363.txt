def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight for future savings based on remaining nodes
        dynamic_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))

        # Penalize nodes with high outbound distances to reduce detours
        outbound_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        score = immediate_distance - dynamic_weight * future_savings + 0.2 * outbound_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
