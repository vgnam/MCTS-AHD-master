def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + distance_to_destination
        scores.append(combined_score)

    # Apply softmax to convert scores into probabilities
    exp_scores = np.exp(-np.array(scores))  # Inverse to prefer lower scores
    probabilities = exp_scores / np.sum(exp_scores)

    # Randomly select a node based on probabilities
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
