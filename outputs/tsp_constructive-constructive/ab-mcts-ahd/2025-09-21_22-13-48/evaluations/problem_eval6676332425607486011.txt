def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight_factor = 1.0 - 0.3 * (remaining_nodes / len(distance_matrix))
        score = immediate_distance - weight_factor * future_savings

        # Additional heuristic: penalize nodes that are too close to the destination early
        if remaining_nodes > 1 and distance_matrix[node][destination_node] < 0.5 * sum(distance_matrix[destination_node]) / len(distance_matrix):
            score += 0.3 * immediate_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
