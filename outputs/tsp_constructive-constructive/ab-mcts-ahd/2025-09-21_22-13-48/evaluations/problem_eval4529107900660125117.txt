def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight adjustment
    weight_immediate = 1.0 - (remaining_nodes / total_nodes) * 0.5
    weight_future = 0.5 + (remaining_nodes / total_nodes) * 0.5

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Centrality measure: average distance to all other nodes
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        normalized_centrality = centrality / max(sum(distance_matrix[i]) / (total_nodes - 1) for i in unvisited_nodes + [current_node])

        # Combined score with dynamic weights and centrality
        score = (weight_immediate * immediate_distance) - (weight_future * future_savings) + (0.2 * normalized_centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
