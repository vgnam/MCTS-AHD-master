def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight for future savings, inversely proportional to remaining nodes
        weight = 1.0 / (1.0 + 0.1 * remaining_nodes)

        # Centrality factor: higher for nodes closer to the centroid of unvisited nodes
        centroid = sum(unvisited_nodes) / len(unvisited_nodes)
        centrality = -abs(node - centroid)  # Negative to minimize distance from centroid

        score = immediate_distance - weight * future_savings + 0.2 * centrality

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
