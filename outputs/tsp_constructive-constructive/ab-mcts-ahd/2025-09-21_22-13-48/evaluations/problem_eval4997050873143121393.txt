def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.3 * (remaining_nodes / (remaining_nodes + 1))  # Decreases as nodes are visited

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0
        distance_to_dest = distance_matrix[node][destination_node]

        # Penalty for nodes too far from destination
        penalty = 0.1 * (distance_to_dest - immediate_distance) if distance_to_dest > immediate_distance else 0
        score = immediate_distance + dynamic_weight * avg_distance + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
