def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Calculate centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / remaining_nodes

        # Dynamic weight adjustment based on remaining nodes
        weight = 1.0 - (0.5 / (remaining_nodes + 1))  # Decreases as nodes are visited

        # Penalize nodes too close to current_node to avoid backtracking
        penalty = 0.1 * immediate_distance if immediate_distance < min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) else 0

        score = weight * immediate_distance - 0.5 * future_savings + 0.3 * centrality + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
