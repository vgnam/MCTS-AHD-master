def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_future = 0.7 * (1 - remaining_nodes / (remaining_nodes + 1))  # Dynamic weight adjustment

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes)  # Node centrality in remaining graph
        score = immediate_distance - weight_future * future_savings + 0.3 * centrality_score

        if score < best_score:
            best_score = score
            next_node = node
        elif score == best_score:
            if (distance_matrix[node][destination_node] + centrality_score) < (distance_matrix[next_node][destination_node] + centrality_score):
                next_node = node

    return next_node
