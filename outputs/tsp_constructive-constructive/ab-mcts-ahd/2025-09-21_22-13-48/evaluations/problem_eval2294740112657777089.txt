def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight adjustment
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Additional heuristic: average distance to remaining nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)
        adjusted_future_savings = future_savings * (1.0 + 0.2 * (1.0 - avg_distance / distance_matrix[current_node][destination_node]))

        score = immediate_distance * (1.0 + weight_factor) - 0.5 * adjusted_future_savings * (1.0 - weight_factor)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
