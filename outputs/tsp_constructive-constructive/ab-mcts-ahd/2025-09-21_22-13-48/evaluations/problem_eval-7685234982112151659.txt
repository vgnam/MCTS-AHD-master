def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    # Dynamic adjustment factor based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes are visited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted score combining local and global proximity
        score = (1 - exploration_factor) * distance_to_current + exploration_factor * distance_to_destination

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            # Additional tie-breaker: choose node with better average distance to all remaining nodes
            avg_current = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
            avg_next = sum(distance_matrix[next_node][n] for n in unvisited_nodes) / remaining_nodes
            if avg_current < avg_next:
                next_node = node

    return next_node
