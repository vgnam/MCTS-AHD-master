def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_to_destination = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - immediate_distance

        # Dynamic weighting based on proximity to destination
        if current_to_destination < 2 * immediate_distance:
            weight = 0.7  # Closer to destination, prioritize future savings
        else:
            weight = 0.3  # Farther away, prioritize immediate distance

        score = immediate_distance - weight * future_savings

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
