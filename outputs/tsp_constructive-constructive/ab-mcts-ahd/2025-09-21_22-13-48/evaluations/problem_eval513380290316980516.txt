def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight factor based on remaining nodes
        weight_factor = 1.0 - (0.5 / (1.0 + remaining_nodes))

        # Penalty term for high immediate distance relative to average
        avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
        penalty = max(0, (immediate_distance - avg_distance) * 0.2)

        score = immediate_distance - weight_factor * future_savings + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
