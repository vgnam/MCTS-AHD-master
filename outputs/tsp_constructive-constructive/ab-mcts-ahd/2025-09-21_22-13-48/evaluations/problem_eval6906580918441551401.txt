def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.3 * (1.0 + 1.0 / (1.0 + remaining_nodes))  # Weight increases as remaining nodes decrease

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = immediate_distance - dynamic_weight * future_savings  # Dynamic weighted combination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
