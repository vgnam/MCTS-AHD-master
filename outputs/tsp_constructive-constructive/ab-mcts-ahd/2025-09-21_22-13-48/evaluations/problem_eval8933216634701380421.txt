def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        dynamic_weight = 1.0 / (1.0 + destination_distance)  # Prioritize nodes closer to destination
        score = immediate_distance * (1.0 + dynamic_weight)  # Balance immediate and dynamic factors

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
