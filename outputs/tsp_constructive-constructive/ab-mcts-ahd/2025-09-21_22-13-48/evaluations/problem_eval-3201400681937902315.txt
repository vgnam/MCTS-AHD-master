def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + math.exp(-0.5 * (remaining_nodes - 5)))  # Sigmoid-based dynamic weighting

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        score = immediate_distance * weight_factor - (1 - weight_factor) * future_savings  # Dynamic weighted combination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
