def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 0

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining nodes
        weight = 1.0 - 0.3 * (remaining_nodes / len(distance_matrix))
        score = immediate_distance - weight * future_savings

        # Adjust score by average distance to balance selection
        if avg_distance > 0:
            score = (score + (immediate_distance / avg_distance)) / 2

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
