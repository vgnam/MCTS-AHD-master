def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting factor based on remaining nodes
        weight_factor = 1.0 / (1.0 + 0.2 * remaining_nodes)

        # Penalize nodes too close to current node to avoid revisiting
        proximity_penalty = 0.3 if immediate_distance < 0.1 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]) else 0.0

        score = immediate_distance - (0.5 + weight_factor) * future_savings + proximity_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
