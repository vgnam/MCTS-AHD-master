def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weighting: prioritize future savings when closer to destination
        if immediate_distance < 0.5 * distance_matrix[current_node][destination_node]:
            weight = 0.7  # Higher weight for future savings when close to destination
        else:
            weight = 0.3  # Lower weight for future savings when far from destination

        score = immediate_distance - weight * future_savings  # Dynamic weighted combination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
