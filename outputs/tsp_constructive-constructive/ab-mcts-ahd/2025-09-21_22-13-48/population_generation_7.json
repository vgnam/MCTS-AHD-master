[
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance to the node and potential future savings (reduced distance to the destination), prioritizing immediate distance (weight 1.0) over future savings (weight 0.5). It iterates through unvisited nodes, computes a weighted score, and chooses the node with the lowest score, ensuring a trade-off between short-term and long-term efficiency.",
          "thought": "This algorithm selects the next node by considering the trade-off between the immediate distance to the next node and the potential savings in future travel distances, using a weighted combination of both factors to balance local optimality and global efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]\n        score = immediate_distance - 0.5 * future_savings  # Weighted combination\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.5107,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically adjusts the weight between immediate distance and future savings, prioritizing closer nodes when few unvisited nodes remain (higher weight on `immediate_distance`) and balancing future savings when more nodes are left (lower weight on `future_savings`). The `weight_factor` scales inversely with remaining nodes, and the `score` combines these factors in a weighted sum, favoring shorter-term gains when progress is slow. The `select_next_node` function iterates through unvisited nodes to find the one minimizing this score, ensuring a balance between proximity and long-term efficiency.",
          "thought": "The new algorithm introduces a dynamic weight adjustment mechanism that prioritizes immediate distance with a higher weight when the remaining nodes are few, while balancing future savings more when many nodes are left, using a novel weighted score combining distance and savings with a variable coefficient.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    weight_factor = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight adjustment\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]\n        score = immediate_distance * (1.0 + weight_factor) - 0.5 * future_savings * (1.0 - weight_factor)  # Dynamic weighted combination\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.58843,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm balances immediate distance (weight 1.0) with future savings (weight 0.8) to prioritize short-term efficiency while still considering long-term savings, selecting the next node by minimizing a weighted score combining immediate distance and the difference between future savings and current distance.",
          "thought": "The new algorithm prioritizes immediate distance (weight 1.0) over future savings (weight 0.8) to balance short-term efficiency with long-term savings, ensuring a more aggressive focus on immediate gains while still considering future savings.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]\n        score = immediate_distance - 0.8 * future_savings  # Adjusted weighted combination\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.65741,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node to visit by prioritizing the unvisited node closest to the current node, breaking ties by choosing the node that is closer to the destination. It uses the distance matrix to compare distances, ensuring the path is locally optimal at each step. The `destination_node` is returned if no unvisited nodes remain.",
          "thought": "The algorithm selects the next node to visit by choosing the unvisited node closest to the current node, prioritizing nodes that are closer to the destination node if multiple nodes have the same minimal distance to the current node.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_distance = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        if distance < min_distance:\n            min_distance = distance\n            next_node = node\n        elif distance == min_distance:\n            # If multiple nodes have the same minimal distance, choose the one closer to the destination\n            if distance_matrix[node][destination_node] < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance to the current node while also considering the average distance to unvisited nodes (weighted by 0.2), balancing short-term and long-term travel costs. The immediate distance is given higher priority (directly added to the score), while the average distance acts as a secondary, exploratory factor. The code iterates through unvisited nodes, computes the score, and selects the node with the lowest combined score. If no unvisited nodes remain, it returns the destination node.",
          "thought": "The new algorithm prioritizes selecting the next node by considering the immediate distance to the current node and the average distance from the node to all other unvisited nodes, with the latter weighted by 0.2 to balance exploration and exploitation.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        if unvisited_nodes:\n            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)\n        else:\n            avg_distance = 0\n        score = immediate_distance + 0.2 * avg_distance\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 7.39065,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance (weight 1.0) and distance to the destination (weight 0.5), prioritizing shorter paths while breaking ties by choosing nodes closer to the destination. It ensures efficiency by evaluating each unvisited node's score and updating the best choice iteratively.",
          "thought": "The new algorithm combines the immediate distance prioritization of No.1 with the weighted balancing of No.2, selecting the next node by minimizing a score that considers immediate distance (weight 1.0) and the distance to the destination (weight 0.5), while also breaking ties by choosing the node closer to the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        score = immediate_distance + 0.5 * destination_distance  # Weighted combination\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n        elif score == best_score:\n            if destination_distance < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 7.45266,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes selecting the next node by balancing immediate distance to the current node (higher priority) and the cumulative distance from the node to all other unvisited nodes (lower priority, weighted by 0.3). It evaluates each unvisited node using a weighted sum of these distances and chooses the one with the lowest score. The function returns the destination node if no unvisited nodes remain.",
          "thought": "The new algorithm prioritizes nodes by considering the immediate distance to the current node and the cumulative distance from the current node to the unvisited nodes, ensuring a balance between local and global path optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        cumulative_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)\n        score = immediate_distance + 0.3 * cumulative_distance  # Weighted combination\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 13.69296,
          "other_inf": null
     }
]