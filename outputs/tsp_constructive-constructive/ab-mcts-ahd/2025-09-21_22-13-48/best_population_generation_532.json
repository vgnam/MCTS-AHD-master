"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    weight_immediate = 1.0 - (0.5 / (1.0 + remaining_nodes))  # Dynamic weight adjustment\n    weight_future = 0.5 + (0.5 / (1.0 + remaining_nodes))\n\n    best_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]\n        score = weight_immediate * immediate_distance - weight_future * future_savings  # Adaptive weighted combination\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node"