def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        sum_future_dist = sum(future_dists)
        avg_future_dist = sum_future_dist / len(remaining_nodes)
        variance_future_dist = sum((d - avg_future_dist) ** 2 for d in future_dists) / len(remaining_nodes)

        if avg_future_dist == 0:
            return current_dist

        stability_weight = 1.0 / (1.0 + variance_future_dist)
        efficiency_weight = 1.0 - stability_weight
        weighted_score = (efficiency_weight * current_dist) + (stability_weight * avg_future_dist)

        return weighted_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
