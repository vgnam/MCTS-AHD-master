import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, exploration_factor=0.7):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Dynamic adjustment based on remaining nodes and exploration factor
        dynamic_weight = (len(remaining_nodes) / len(unvisited_nodes)) ** exploration_factor
        return current_dist + dynamic_weight * (avg_future_dist - min_future_dist)

    candidates = list(unvisited_nodes)
    weights = [1.0 / evaluate_node(node) for node in candidates]
    next_node = random.choices(candidates, weights=weights, k=1)[0]
    return next_node
