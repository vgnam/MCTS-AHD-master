def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate future flexibility and savings
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Dynamic weights based on remaining nodes' density
        num_remaining = len(remaining_nodes)
        weight_current = 0.6 if num_remaining > 5 else 0.8
        weight_flex = 0.2 if num_remaining > 5 else 0.1
        weight_savings = 0.2 if num_remaining > 5 else 0.1

        # Compute weighted score
        score = (weight_current * current_dist) + (weight_flex * max_future_dist) - (weight_savings * min_future_dist)
        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
