importance based on remaining nodes, ensuring balance between greedy and strategic decisions.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        weight = len(remaining_nodes) / len(unvisited_nodes)

        proximity_weight = 0.7 + 0.2 * weight
        centrality_weight = 0.2 * (1 - weight)

        return (proximity_weight * current_dist +
                centrality_weight * centrality +
                (1 - proximity_weight - centrality_weight) * sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes))

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
