def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    remaining_nodes = unvisited_nodes - {destination_node}
    total_nodes = len(unvisited_nodes) + 1

    if not remaining_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        future_nodes = remaining_nodes - {node}

        if not future_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in future_nodes]
        mean_future_dist = sum(future_dists) / len(future_dists)
        variance_future_dist = sum((d - mean_future_dist) ** 2 for d in future_dists) / len(future_dists)

        remaining_ratio = len(future_nodes) / total_nodes
        sigmoid_weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

        proximity_weight = 0.5 + 0.5 * sigmoid_weight
        uncertainty_weight = 0.5 - 0.5 * sigmoid_weight

        return (proximity_weight * current_dist +
                uncertainty_weight * (current_dist + mean_future_dist) +
                0.2 * variance_future_dist)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
