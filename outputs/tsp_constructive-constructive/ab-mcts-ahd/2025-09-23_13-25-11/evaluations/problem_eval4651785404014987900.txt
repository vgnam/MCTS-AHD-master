def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        centrality = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        exploration_ratio = len(remaining_nodes) / len(unvisited_nodes)
        proximity_pressure = (1 - exploration_ratio) ** 2

        weight_centrality = 0.5 * (exploration_ratio) + 0.5 * (centrality / max(centrality, 1e-6))
        weight_future = (1 - exploration_ratio) * proximity_pressure

        score = (1 - weight_centrality - weight_future) * current_dist + weight_centrality * centrality + weight_future * avg_future_dist
        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
