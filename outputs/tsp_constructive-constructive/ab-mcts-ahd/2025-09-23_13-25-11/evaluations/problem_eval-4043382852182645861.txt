def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    current_phase = len(unvisited_nodes) / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Dynamic weight using sigmoid function
        sigmoid_weight = 1 / (1 + math.exp(-10 * (current_phase - 0.5)))
        weight_current = 0.3 + 0.4 * (1 - sigmoid_weight)
        weight_future = 0.3 + 0.4 * sigmoid_weight

        # Penalty for revisiting nodes (simplified)
        revisit_penalty = 0.1 if node in unvisited_nodes else 0

        # Diversity term based on node's position
        diversity_term = (node % 3) * 0.05

        return (weight_current * current_dist +
                weight_future * avg_future_dist +
                revisit_penalty +
                diversity_term)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
