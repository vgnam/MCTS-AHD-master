def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_distance(node):
        current_to_next = distance_matrix[current_node][node]
        next_to_dest = distance_matrix[node][destination_node]

        # Calculate the average distance of unvisited nodes to the next node
        avg_nearby_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weighting based on remaining unvisited nodes
        weight = 0.5 + (0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))

        return current_to_next + weight * next_to_dest + 0.2 * avg_nearby_distance

    next_node = min(unvisited_nodes, key=weighted_distance)
    return next_node
