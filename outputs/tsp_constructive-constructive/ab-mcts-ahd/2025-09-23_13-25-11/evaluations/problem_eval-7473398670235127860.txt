def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        max_future_dist = max(future_dists)
        min_future_dist = min(future_dists)
        variance = (max_future_dist - min_future_dist) / (max_future_dist + 1e-10)

        tour_progress = 1 - len(remaining_nodes) / len(unvisited_nodes)
        decay_factor = 0.5 ** tour_progress

        normalized_score = (current_dist * (1 - decay_factor) + max_future_dist * decay_factor) / (1 + variance * (1 - decay_factor))
        normalized_score -= (max_future_dist - min_future_dist) * decay_factor

        return normalized_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
