def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining = len(unvisited_nodes)
    weight = 1 / (1 + math.exp((remaining - 5) / 2))  # Sigmoid adjustment

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist * 0.9  # Small penalty for last node

        min_future_dist = min(distance_matrix[node][other] for other in unvisited_nodes - {node})
        revisit_penalty = 1 + 0.1 * (len(unvisited_nodes) / (len(distance_matrix) - 1))  # Penalty for revisiting

        return weight * current_dist + (1 - weight) * min_future_dist * revisit_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
