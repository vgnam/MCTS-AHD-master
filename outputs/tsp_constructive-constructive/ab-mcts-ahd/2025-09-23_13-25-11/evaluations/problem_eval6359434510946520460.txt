def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_distance(node):
        current_to_next = distance_matrix[current_node][node]
        next_to_dest = distance_matrix[node][destination_node]
        dynamic_weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        return current_to_next + dynamic_weight * next_to_dest

    candidates = sorted(unvisited_nodes, key=weighted_distance)
    if len(candidates) > 1:
        top_candidate = candidates[0]
        next_candidate = candidates[1]
        prob = 0.7 if weighted_distance(top_candidate) < 1.5 * weighted_distance(next_candidate) else 0.5
        next_node = top_candidate if np.random.rand() < prob else next_candidate
    else:
        next_node = candidates[0]
    return next_node
