def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    k = 0.5  # Sigmoid steepness factor
    x = remaining_nodes / total_nodes
    weight_current = 1 / (1 + np.exp(-k * (x - 0.5)))
    weight_future = 1 - weight_current

    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        degree_penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / len(unvisited_nodes)
        diversity_term = np.random.uniform(0, 0.1)
        return (weight_current * current_dist + weight_future * future_dist) * (1 + degree_penalty) + diversity_term

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
