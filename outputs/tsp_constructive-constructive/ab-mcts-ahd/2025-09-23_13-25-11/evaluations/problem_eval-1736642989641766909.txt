def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_unvisited = len(unvisited_nodes)
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        max_future_dist = max(future_dists)
        min_future_dist = min(future_dists)
        variance = (max_future_dist - min_future_dist) / (max_future_dist + 1e-10)
        weight_current = max(0.2, 0.6 * (total_unvisited / (total_unvisited + 1)))
        weight_future = 1 - weight_current
        combined_score = weight_current * current_dist + weight_future * avg_future_dist
        normalized_score = combined_score / (1 + variance)
        return normalized_score
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
