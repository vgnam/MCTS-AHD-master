def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        proximity_factor = sum(distance_matrix[node][other] for other in remaining_nodes) / (len(remaining_nodes) ** 2)
        exploration_factor = (len(remaining_nodes) / len(unvisited_nodes)) * proximity_factor

        normalized_cost = (current_dist + 0.6 * avg_future_dist + 0.4 * exploration_factor) / (1 + proximity_factor)
        return normalized_cost

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
