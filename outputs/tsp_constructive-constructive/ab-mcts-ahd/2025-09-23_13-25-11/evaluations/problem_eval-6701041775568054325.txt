def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes (excluding self)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

        # Calculate regret: difference between best and second-best immediate choices
        immediate_dists = [distance_matrix[current_node][n] for n in unvisited_nodes if n != node]
        if len(immediate_dists) >= 2:
            sorted_dists = sorted(immediate_dists)
            regret = sorted_dists[1] - sorted_dists[0]
        else:
            regret = 0

        # Dynamic weights: favor centrality and regret when few nodes remain
        weight_centrality = 0.3 + 0.7 * (1 - remaining_ratio)
        weight_regret = 0.2 + 0.8 * (1 - remaining_ratio)

        penalty = 1.0 if node == current_node else 0.0
        return (current_dist + future_dist +
                weight_centrality * centrality +
                weight_regret * regret +
                penalty)

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
