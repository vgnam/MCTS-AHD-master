def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.6 + 0.4 * (remaining_nodes / total_nodes)
    weight_current = base_weight
    weight_future = 1 - base_weight

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        std_future_dist = (sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)) ** 0.5

        penalty = 0
        if len(unvisited_nodes) > 2:
            penalty = 0.1 * (distance_matrix[current_node][node] / max(distance_matrix[current_node][n] for n in unvisited_nodes))

        return (weight_current * current_dist + weight_future * avg_future_dist) + penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
