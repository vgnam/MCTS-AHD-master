def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        max_future_dist = max(future_dists)
        avg_future_dist = sum(future_dists) / len(future_dists)
        variance_future_dist = sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)

        # Dynamic weighting based on tour progress
        progress = (len(unvisited_nodes) - 1) / len(unvisited_nodes)
        weight_current = 0.6 + 0.4 * progress
        weight_max = 0.2 + 0.2 * progress
        weight_var = 0.2 - 0.1 * progress

        return (weight_current * current_dist +
                weight_max * max_future_dist +
                weight_var * variance_future_dist)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
