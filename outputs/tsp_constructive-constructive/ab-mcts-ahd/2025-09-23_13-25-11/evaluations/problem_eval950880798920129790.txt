def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        future_impact = (current_dist - min_future_dist) if remaining_nodes else 0
        connectivity = len([n for n in remaining_nodes if distance_matrix[node][n] < 2 * min_future_dist])
        isolation_penalty = 1 if connectivity < 2 else 0
        dynamic_weight = 0.7 * (1 - remaining_ratio) + 0.3 * (1 - remaining_ratio ** 2)
        return dynamic_weight * current_dist + (1 - dynamic_weight) * future_impact + isolation_penalty * 10
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
