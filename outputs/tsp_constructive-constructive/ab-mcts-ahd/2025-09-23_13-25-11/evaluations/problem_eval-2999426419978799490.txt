def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        future_dist_variance = sum((distance_matrix[node][other] - avg_future_dist) ** 2 for other in remaining_nodes) / len(remaining_nodes)
        exploration_weight = 0.5 + 0.5 * (1 - len(remaining_nodes) / len(unvisited_nodes))
        return current_dist + exploration_weight * (avg_future_dist + 0.1 * future_dist_variance)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
