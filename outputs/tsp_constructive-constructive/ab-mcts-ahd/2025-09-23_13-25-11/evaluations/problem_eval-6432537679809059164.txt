def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Dynamic weighting based on remaining nodes
        remaining_ratio = len(remaining_nodes) / len(unvisited_nodes)
        weight_current = 0.5 + 0.5 * remaining_ratio
        weight_future = 0.5 - 0.3 * remaining_ratio

        # Future flexibility: max distance to remaining nodes
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)

        # Potential savings: min distance to remaining nodes
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Lookahead: evaluate the next step's best option
        next_step_remaining = remaining_nodes - {min(remaining_nodes, key=lambda x: distance_matrix[node][x])}
        if next_step_remaining:
            next_step_max = max(distance_matrix[min(remaining_nodes, key=lambda x: distance_matrix[node][x])][other] for other in next_step_remaining)
        else:
            next_step_max = 0

        # Weighted sum with dynamic weights and lookahead
        return (weight_current * current_dist +
                weight_future * max_future_dist +
                0.2 * min_future_dist +
                0.3 * next_step_max)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
