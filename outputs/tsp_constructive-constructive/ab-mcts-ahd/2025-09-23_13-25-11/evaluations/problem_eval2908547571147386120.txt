def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    scaling_factor = 0.5 * (1 - 0.3 * (remaining_nodes / (remaining_nodes + 1)))  # Dynamic scaling

    def weighted_distance(node):
        current_to_next = distance_matrix[current_node][node]
        next_to_dest = distance_matrix[node][destination_node]
        random_factor = 0.1 * (random.random() - 0.5)  # Small random perturbation
        return current_to_next + scaling_factor * next_to_dest + random_factor

    next_node = min(unvisited_nodes, key=weighted_distance)
    return next_node
