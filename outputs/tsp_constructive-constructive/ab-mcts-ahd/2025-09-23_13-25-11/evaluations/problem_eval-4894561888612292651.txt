def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)

    def heuristic_weight(node):
        immediate_cost = distance_matrix[current_node][node]
        estimated_remaining_cost = distance_matrix[node][destination_node]
        weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        proximity_weight = 0.6 + 0.4 * (1 - (current_to_dest / max_distance)) if max_distance > 0 else 0.6
        return (proximity_weight * immediate_cost +
                (1 - proximity_weight) * (immediate_cost + weight * estimated_remaining_cost))

    next_node = min(unvisited_nodes, key=heuristic_weight)
    return next_node
