def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        scaling_factor = len(remaining_nodes) / len(unvisited_nodes)
        dynamic_weight = 0.7 * scaling_factor
        total_remaining_dist = sum(min(distance_matrix[other][next_other] for next_other in remaining_nodes - {other}) for other in remaining_nodes)
        return current_dist + dynamic_weight * min_future_dist + 0.2 * total_remaining_dist / len(remaining_nodes)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
