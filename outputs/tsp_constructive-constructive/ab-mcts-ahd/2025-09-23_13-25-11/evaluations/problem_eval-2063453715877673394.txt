def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    exploration_weight = max(0.1, 0.5 - 0.4 * (unvisited_count / len(distance_matrix)))
    weight_immediate = 0.3 + 0.4 * (1 - min(unvisited_count / (len(distance_matrix) - 1), 1))
    weight_future = 1 - weight_immediate

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return immediate_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_term = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) if sum(distance_matrix[node]) > 0 else 0
        penalty = 0.1 * immediate_dist if unvisited_count <= 3 else 0
        return weight_immediate * immediate_dist + weight_future * (immediate_dist - avg_future_dist) + exploration_weight * exploration_term + penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
