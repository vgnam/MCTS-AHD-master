def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 - (remaining_nodes / total_nodes)
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in unvisited_nodes - {node})
        centrality_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        score = current_dist + temperature * min_future_dist - 0.1 * centrality_penalty
        return score
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
