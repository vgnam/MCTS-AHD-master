def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def weighted_distance(node):
        current_to_next = distance_matrix[current_node][node]
        next_to_dest = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_to_next
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        dest_dist = distance_matrix[node][destination_node]
        weight = 0.5 + 0.45 * (1 - (dest_dist / (dest_dist + current_to_next)))
        return weight * current_to_next + (1 - weight) * (next_to_dest + 0.3 * min_future_dist)
    next_node = min(unvisited_nodes, key=weighted_distance)
    return next_node
