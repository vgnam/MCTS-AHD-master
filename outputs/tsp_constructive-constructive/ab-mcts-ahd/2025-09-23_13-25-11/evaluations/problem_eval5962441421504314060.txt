def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    adjustment_factor = 1.0 / (1.0 + remaining_count)  # Decreases as unvisited nodes decrease

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist * (1.0 - adjustment_factor)  # Prefer direct return if few nodes left

        remaining_nodes = unvisited_nodes - {node}
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        penalty = sum(1 for other in remaining_nodes if distance_matrix[node][other] > distance_matrix[current_node][other])  # Penalize long future steps
        total_score = current_dist + adjustment_factor * avg_future_dist + penalty
        return total_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
