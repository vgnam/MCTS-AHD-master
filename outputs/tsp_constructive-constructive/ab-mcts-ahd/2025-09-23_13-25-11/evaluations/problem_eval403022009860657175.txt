def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    base_weight = remaining_nodes / total_nodes
    exploration_factor = (total_nodes - remaining_nodes) / total_nodes
    current_weight = base_weight * (1 - exploration_factor)
    future_weight = 1 - current_weight
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        remaining_after_visit = unvisited_nodes - {node}
        future_distances = [distance_matrix[node][other] for other in remaining_after_visit]
        avg_future_dist = sum(future_distances) / len(future_distances) if future_distances else 0
        centrality = sum(1 for other in remaining_after_visit if distance_matrix[node][other] < avg_future_dist) / len(remaining_after_visit) if remaining_after_visit else 0
        return current_weight * current_dist + future_weight * avg_future_dist * (1 + exploration_factor * centrality)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
