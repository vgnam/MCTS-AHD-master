def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        sum_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum_future_dist / len(remaining_nodes)
        if avg_future_dist == 0:
            return current_dist
        normalized_future = sum_future_dist / (len(remaining_nodes) * max(distance_matrix[node][other] for other in remaining_nodes))
        dynamic_weight = 1.0 / (1.0 + (current_dist / avg_future_dist) ** 2)
        return (1 - dynamic_weight) * current_dist + dynamic_weight * (1 - normalized_future) * sum_future_dist
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
