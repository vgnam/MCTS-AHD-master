def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dest_dist = distance_matrix[node][destination_node]

        remaining_factor = len(remaining_nodes) / (len(unvisited_nodes) + 1)
        weight = 0.6 * (1 - remaining_factor) + 0.4 * (dest_dist / (dest_dist + current_dist))

        return weight * current_dist + (1 - weight) * (0.7 * avg_future_dist + 0.3 * dest_dist)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
