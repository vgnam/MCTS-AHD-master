def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist + 0.4 * distance_matrix[node][destination_node]
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dest_penalty = 0.2 * (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node])
        dynamic_factor = 0.5 if len(remaining_nodes) > 3 else 0.3
        return current_dist + dynamic_factor * max_future_dist + 0.6 * avg_future_dist + dest_penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
