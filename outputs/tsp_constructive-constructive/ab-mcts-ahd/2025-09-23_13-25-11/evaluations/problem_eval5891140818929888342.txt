def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    num_unvisited = len(unvisited_nodes)
    weight = (num_unvisited ** 2) / (num_unvisited ** 2 + distance_matrix[current_node][destination_node] ** 2)
    candidates = []
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        total_cost = weight * local_cost + (1 - weight) * global_cost
        candidates.append((node, total_cost))
    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:max(1, len(candidates) // 2)]
    selected_node, _ = top_candidates[random.randint(0, len(top_candidates) - 1)]
    return next_node
