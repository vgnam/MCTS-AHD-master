def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    weight_current = 0.7
    weight_min_future = 0.2
    weight_avg_future = 0.1
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_remaining_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        return weight_current * current_dist + weight_min_future * min_future_dist + weight_avg_future * avg_remaining_dist
    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node) if node != destination_node else float('inf'))
    return next_node
