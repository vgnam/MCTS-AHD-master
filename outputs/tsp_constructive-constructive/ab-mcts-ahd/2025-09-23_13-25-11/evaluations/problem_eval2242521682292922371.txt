def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes else 1.0
    weight_immediate = 0.6 - 0.2 * (1 - remaining_ratio)
    weight_future = 1 - weight_immediate

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        harmonic_future = 2 * min_future_dist * avg_future_dist / (min_future_dist + avg_future_dist)
        return weight_immediate * current_dist + weight_future * harmonic_future

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
