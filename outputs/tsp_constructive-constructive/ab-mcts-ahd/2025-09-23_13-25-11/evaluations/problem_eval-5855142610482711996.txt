def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    weight_immediate = 0.5 * (remaining_count / (remaining_count + 1))
    weight_future = 0.5 * (1 / (remaining_count + 1))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        return weight_immediate * current_dist + weight_future * max_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
