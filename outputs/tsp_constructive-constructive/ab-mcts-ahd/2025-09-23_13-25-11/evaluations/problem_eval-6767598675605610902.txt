def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Fixed immediate weight and dynamic future weight
        immediate_weight = 0.6
        future_weight = 0.4

        # Lookahead factor: average distance to remaining nodes
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Additional heuristic: minimum distance to any remaining node
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Combined score with fixed immediate weight and dynamic future consideration
        score = immediate_weight * current_dist + future_weight * (0.7 * avg_future_dist + 0.3 * min_future_dist)
        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
