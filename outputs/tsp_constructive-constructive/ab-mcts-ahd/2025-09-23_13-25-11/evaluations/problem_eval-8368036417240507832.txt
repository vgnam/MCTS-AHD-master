def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    path_progress = (total_nodes - len(unvisited_nodes)) / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist + distance_matrix[node][destination_node]

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_factor = (len(remaining_nodes) / total_nodes) * (1 - path_progress)

        weight_current = 0.6 - 0.2 * path_progress
        weight_avg = 0.3 + 0.1 * path_progress
        weight_explore = 0.1 + 0.1 * path_progress

        return (weight_current * current_dist +
                weight_avg * avg_future_dist +
                weight_explore * exploration_factor)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
