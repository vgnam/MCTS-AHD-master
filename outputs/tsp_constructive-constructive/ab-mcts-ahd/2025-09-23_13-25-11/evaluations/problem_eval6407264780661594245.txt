def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        std_dev_future_dist = (sum((x - avg_future_dist) ** 2 for x in future_dists) / len(future_dists)) ** 0.5

        dynamic_weight = 1.0 / (len(remaining_nodes) ** 0.5) if len(remaining_nodes) > 1 else 1.0
        exploration_factor = (avg_future_dist + std_dev_future_dist) * dynamic_weight

        return current_dist + exploration_factor

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
