def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        return current_dist + 0.5 * avg_future_dist

    scores = {node: evaluate_node(node) for node in unvisited_nodes}
    total_score = sum(scores.values())
    probabilities = {node: (total_score - score) / total_score for node, score in scores.items()}
    next_node = random.choices(list(probabilities.keys()), weights=probabilities.values(), k=1)[0]
    return next_node
