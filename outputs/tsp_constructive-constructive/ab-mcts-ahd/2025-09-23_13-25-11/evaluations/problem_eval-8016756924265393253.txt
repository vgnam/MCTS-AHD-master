def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        sum_future_dist = sum(future_dists)
        variance_penalty = 0.1 * (max(future_dists) - min(future_dists)) if len(future_dists) > 1 else 0
        adaptability = (current_dist / sum_future_dist) if sum_future_dist > 0 else 0
        return 0.7 * current_dist + 0.3 * adaptability + variance_penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
