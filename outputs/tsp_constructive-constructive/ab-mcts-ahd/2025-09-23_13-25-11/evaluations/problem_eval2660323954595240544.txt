def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    node_visit_counts = {}
    for node in unvisited_nodes:
        node_visit_counts[node] = node_visit_counts.get(node, 0) + 1

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist + 0.5 * distance_matrix[node][destination_node]

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dest_penalty = 0.3 * (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node])

        novelty_bonus = -0.2 * node_visit_counts[node]
        reward = current_dist + 0.6 * avg_future_dist + dest_penalty + novelty_bonus

        return reward

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
