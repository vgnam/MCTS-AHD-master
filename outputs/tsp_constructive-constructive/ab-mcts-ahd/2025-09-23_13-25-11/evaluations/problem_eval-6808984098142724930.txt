def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        # Calculate centrality of the current node
        avg_dist_to_unvisited = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality_weight = avg_dist_to_unvisited / max(distance_matrix[current_node].values())

        # Lookahead: evaluate the best next step after 'node'
        next_step_options = remaining_nodes - {node}
        if next_step_options:
            best_next_step = min(next_step_options, key=lambda n: distance_matrix[node][n])
            lookahead_dist = distance_matrix[node][best_next_step]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weight combining centrality, immediate distance, and lookahead
        weight = (len(remaining_nodes) / len(unvisited_nodes)) * (1 - centrality_weight)
        return (1 - weight) * current_dist + weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
