def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        remaining_nodes = unvisited_nodes - {node}
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_unvisited = len(unvisited_nodes)
        weight_current = 0.7 * (total_unvisited / (total_unvisited + 1))
        weight_future = 0.3 * (1 / (total_unvisited + 1))
        return weight_current * current_dist + weight_future * avg_future_dist
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
