def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.9 ** (1 - remaining_nodes / total_nodes))  # Decreasing temperature

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes_after = unvisited_nodes - {node}

        if not remaining_nodes_after:
            return current_dist

        # Calculate average future distance
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes_after) / len(remaining_nodes_after)

        # Calculate centrality penalty (higher centrality = higher penalty)
        centrality_penalty = sum(distance_matrix[node][other] for other in remaining_nodes_after) / len(remaining_nodes_after)

        # Weighted sum with temperature adjustment
        weight_current = (remaining_nodes / total_nodes) ** temperature
        weight_future = (1 - weight_current) ** (1 / temperature)

        return weight_current * current_dist + weight_future * avg_future_dist + 0.1 * centrality_penalty

    # Probabilistic selection based on softmax with temperature
    scores = [evaluate_node(node) for node in unvisited_nodes]
    exp_scores = [math.exp(score / temperature) for score in scores]
    probabilities = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
