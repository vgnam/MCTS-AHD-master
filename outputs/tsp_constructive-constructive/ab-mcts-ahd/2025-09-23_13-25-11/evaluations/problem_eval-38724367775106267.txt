def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        min_future_dist = min(future_dists)
        avg_future_dist = sum(future_dists) / len(future_dists)
        variance_future_dist = sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)

        weight = len(remaining_nodes) / len(unvisited_nodes)
        normalized_evaluation = (1 - weight) * current_dist + weight * avg_future_dist
        penalty = variance_future_dist / (1 + min_future_dist)

        return (normalized_evaluation + penalty) / (1 + min_future_dist)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
