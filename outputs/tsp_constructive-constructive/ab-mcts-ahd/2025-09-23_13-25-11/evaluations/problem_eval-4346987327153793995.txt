def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        path_potential = (current_dist + min_future_dist) / (1 + max_future_dist - min_future_dist) if (max_future_dist != min_future_dist) else 1

        weight = len(remaining_nodes) / len(unvisited_nodes)
        proximity_weight = 0.6 * (1 - (current_to_dest / max_distance)) if max_distance > 0 else 0.6
        centrality_weight = 0.2 * (1 - weight)
        potential_weight = 0.2

        return (proximity_weight * current_dist +
                centrality_weight * centrality +
                potential_weight * path_potential)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
