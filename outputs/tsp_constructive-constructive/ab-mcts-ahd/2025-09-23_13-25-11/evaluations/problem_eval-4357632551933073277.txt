def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        weight = (len(unvisited_nodes) / (len(unvisited_nodes) + 1)) ** 2
        avg_current_dist = sum(distance_matrix[current_node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        combined_dist = (1 - weight) * current_dist + weight * (min_future_dist + avg_future_dist)
        normalized_dist = combined_dist / (avg_current_dist + 1e-6)
        selection_prob = 1 / (normalized_dist + 1e-6)

        return selection_prob

    next_node = max(unvisited_nodes, key=evaluate_node)
    return next_node
