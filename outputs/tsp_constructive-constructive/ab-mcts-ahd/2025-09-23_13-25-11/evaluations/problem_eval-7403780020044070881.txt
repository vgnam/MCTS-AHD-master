def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Dynamic weight adjustment
        weight_factor = 1 / len(remaining_nodes) if len(remaining_nodes) > 1 else 1.0
        immediate_weight = 0.7 - 0.3 * weight_factor
        future_weight = 1.0 - immediate_weight

        # Future connectivity metrics
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Novel: Regret factor - difference between current and best possible future
        best_future_node = min(remaining_nodes, key=lambda x: min(distance_matrix[x][other] for other in remaining_nodes - {x}))
        regret_factor = min(distance_matrix[node][best_future_node], distance_matrix[current_node][best_future_node])

        # Combined score with novel regret integration
        score = (immediate_weight * current_dist +
                 future_weight * (0.5 * avg_future_dist + 0.3 * min_future_dist + 0.2 * regret_factor))
        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
