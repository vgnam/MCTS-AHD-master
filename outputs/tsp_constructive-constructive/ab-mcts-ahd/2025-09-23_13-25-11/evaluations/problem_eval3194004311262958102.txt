def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        min_future_dist = min(future_dists)
        variance_future_dist = sum((x - min_future_dist) ** 2 for x in future_dists) / len(future_dists)

        weight_current = 0.6 + 0.4 * (len(remaining_nodes) / len(unvisited_nodes))
        weight_future = 1.0 - weight_current
        penalty = 0.2 * variance_future_dist / (min_future_dist + 1e-10)

        return weight_current * current_dist + weight_future * min_future_dist + penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
