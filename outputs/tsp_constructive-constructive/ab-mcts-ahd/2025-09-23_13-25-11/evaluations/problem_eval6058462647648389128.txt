def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        avg_neighbor_dist = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / len(distance_matrix)
        centrality_weight = 1 / (1 + avg_neighbor_dist)

        base_weight = 0.5 + 0.4 * (len(remaining_nodes) / len(unvisited_nodes))
        weighted_current = base_weight * current_dist
        weighted_future = (1 - base_weight) * avg_future_dist
        weighted_centrality = centrality_weight * avg_neighbor_dist

        return weighted_current + weighted_future + weighted_centrality

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
