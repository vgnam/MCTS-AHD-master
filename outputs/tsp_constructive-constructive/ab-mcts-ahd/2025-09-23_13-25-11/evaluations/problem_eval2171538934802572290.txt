def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_unvisited = len(unvisited_nodes)

        exploration_factor = min(1.0, 0.3 + 0.7 * (1 - 1 / total_unvisited))
        immediate_weight = 0.6 * exploration_factor
        future_weight = 0.4 * (1 - exploration_factor)

        score = immediate_weight * current_dist + future_weight * avg_future_dist

        # Add probabilistic element based on normalized score
        normalized_score = score / (current_dist + avg_future_dist) if (current_dist + avg_future_dist) > 0 else 0.5
        return normalized_score

    # Select node with highest normalized score
    next_node = max(unvisited_nodes, key=evaluate_node)
    return next_node
