def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        # Calculate node centrality
        centrality = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Calculate node influence: centrality weighted by distance to farthest remaining node
        farthest_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        influence = centrality * farthest_dist

        # Dynamic exploration ratio with logarithmic scaling
        exploration_ratio = math.log(len(remaining_nodes) + 1) / math.log(len(unvisited_nodes) + 1)

        # Hybrid score: immediate distance, influence, and exploration-adjusted centrality
        score = (0.3 * current_dist +
                 0.4 * influence +
                 0.3 * (1 - exploration_ratio) * centrality)

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
