def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    weight_current = remaining_nodes / total_nodes
    weight_future = 1 - weight_current
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in unvisited_nodes - {node})
        lookahead_dist = sum(sorted(distance_matrix[node][other] for other in unvisited_nodes - {node})[:2]) if len(unvisited_nodes) > 2 else min_future_dist
        return weight_current * current_dist + weight_future * (0.6 * min_future_dist + 0.4 * lookahead_dist)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
