def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_fraction = 1 - (len(unvisited_nodes) / total_nodes)
    proximity_weight = 0.9 - 0.7 * visited_fraction
    adaptability_weight = 0.1 + 0.7 * visited_fraction

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        return proximity_weight * current_dist + adaptability_weight * (current_dist - min_future_dist)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
