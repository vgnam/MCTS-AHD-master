def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = len(unvisited_nodes) - 1
        if remaining_nodes == 0:
            return current_dist
        future_weight = 0.2 + 0.5 * (1 - remaining_nodes / len(unvisited_nodes))
        min_future_dist = min(distance_matrix[node][other] for other in unvisited_nodes - {node})
        revisit_penalty = 0.1 if node in unvisited_nodes else 0
        return current_dist + future_weight * min_future_dist + revisit_penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
