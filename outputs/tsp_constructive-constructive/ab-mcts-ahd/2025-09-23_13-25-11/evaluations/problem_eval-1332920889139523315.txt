def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return -current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_factor = len(remaining_nodes) / len(unvisited_nodes)
        dynamic_weight = 1 / len(remaining_nodes)
        future_weight = 0.3 + 0.2 * dynamic_weight
        exploration_weight = 0.1 + 0.1 * dynamic_weight
        penalty = 0.4 if node in recently_visited else 0.0
        score = - (0.6 * current_dist + future_weight * avg_future_dist + exploration_weight * exploration_factor + penalty)
        return score
    recently_visited = set()
    next_node = max(unvisited_nodes, key=evaluate_node)
    recently_visited.add(next_node)
    return next_node
