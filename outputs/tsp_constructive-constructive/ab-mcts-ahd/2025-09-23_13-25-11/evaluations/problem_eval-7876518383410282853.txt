import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, iteration=0):
    if not unvisited_nodes:
        return destination_node

    # Dynamic temperature adjustment
    temperature = max(0.1, temperature * 0.99 ** iteration)

    def heuristic_weight(node):
        immediate_cost = distance_matrix[current_node][node]
        estimated_remaining_cost = distance_matrix[node][destination_node]

        # Probabilistic adjustment based on temperature
        if random.random() < temperature:
            # Explore: favor nodes with higher remaining cost variance
            remaining_variance = sum(abs(distance_matrix[node][n] - estimated_remaining_cost)
                                  for n in unvisited_nodes if n != node)
            return immediate_cost + 0.4 * estimated_remaining_cost + 0.2 * remaining_variance
        else:
            # Exploit: favor nodes closer to destination
            return immediate_cost + 0.5 * estimated_remaining_cost

    next_node = min(unvisited_nodes, key=heuristic_weight)
    return next_node
