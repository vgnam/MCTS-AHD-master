def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes else 1.0
    weight_future = 0.6 + 0.3 * (1 - remaining_ratio)  # Increase future weight as nodes deplete

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        harmonic_mean = 2 * current_dist * min_future_dist / (current_dist + min_future_dist)
        return (1 - weight_future) * current_dist + weight_future * harmonic_mean

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
