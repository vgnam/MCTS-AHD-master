import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_possible_distance = sum(distance_matrix[node][next_node] for node, next_node in zip(unvisited_nodes[:-1], unvisited_nodes[1:])) + distance_matrix[unvisited_nodes[-1]][destination_node] if unvisited_nodes else 0

    def weight_function(node):
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        total_distance = distance_to_node + distance_from_node

        deviation = (total_distance - current_to_dest) / (max_possible_distance - current_to_dest) if (max_possible_distance - current_to_dest) > 0 else 0
        weight = 0.5 * (1 + math.tanh(5 * deviation))  # Hyperbolic tangent for smooth transition

        return weight * distance_to_node + (1 - weight) * distance_from_node

    next_node = min(unvisited_nodes, key=weight_function)
    return next_node
