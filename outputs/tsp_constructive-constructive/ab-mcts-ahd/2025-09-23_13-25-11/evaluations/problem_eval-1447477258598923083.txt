def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = (len(unvisited_nodes) / total_nodes) ** 2 if total_nodes > 0 else 0
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        future_nodes = unvisited_nodes - {node}
        min_future_dist = min(distance_matrix[node][other] for other in future_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in future_nodes)
        weight_immediate = remaining_ratio * 0.7
        weight_min_future = (1 - remaining_ratio) * 0.2
        weight_max_future = (1 - remaining_ratio) * 0.1
        penalty = 0.1 * (1 - remaining_ratio) if node in unvisited_nodes else 0
        return (weight_immediate * current_dist +
                weight_min_future * min_future_dist +
                weight_max_future * max_future_dist +
                penalty)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
