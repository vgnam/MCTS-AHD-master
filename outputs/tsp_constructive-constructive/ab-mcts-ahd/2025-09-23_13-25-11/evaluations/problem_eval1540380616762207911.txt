def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    dynamic_weight = 0.7 if remaining_count <= total_nodes // 2 else 0.5

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        penalty = max(0, (avg_future_dist - min(future_dists)) / max(future_dists, 1e-6))

        return dynamic_weight * current_dist + (1 - dynamic_weight) * avg_future_dist + 0.2 * penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
