def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    exploration_weight = max(0.1, 0.5 - 0.4 * (unvisited_count / len(distance_matrix)))

    def heuristic_weight(node):
        immediate_cost = distance_matrix[current_node][node]
        estimated_remaining_cost = distance_matrix[node][destination_node]
        exploration_term = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) if sum(distance_matrix[node]) > 0 else 0
        return immediate_cost + exploration_weight * estimated_remaining_cost + 0.2 * exploration_term

    next_node = min(unvisited_nodes, key=heuristic_weight)
    return next_node
