def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        diversity_score = (sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)) ** 0.5

        remaining_count = len(remaining_nodes)
        exploration_weight = 1 / (1 + (remaining_count ** 0.3))
        diversity_weight = 0.5 * exploration_weight

        return (1 - exploration_weight - diversity_weight) * current_dist + exploration_weight * avg_future_dist + diversity_weight * diversity_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
