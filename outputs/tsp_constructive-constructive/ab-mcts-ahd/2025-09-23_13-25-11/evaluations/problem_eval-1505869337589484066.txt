def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        exploration_bonus = 0.2 * (avg_future_dist - current_dist)
        dynamic_weight = 0.5 + 0.1 * (len(remaining_nodes) / len(unvisited_nodes))

        return (dynamic_weight * current_dist +
                (1 - dynamic_weight) * (current_dist - min_future_dist) +
                exploration_bonus)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
