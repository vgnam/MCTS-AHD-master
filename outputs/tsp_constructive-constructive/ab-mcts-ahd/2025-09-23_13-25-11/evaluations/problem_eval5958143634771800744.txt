def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    tour_progress = 1 - (remaining_count / total_nodes)

    # Dynamic weight adjustment using sigmoid function
    weight_immediate = 1 / (1 + math.exp(-10 * (tour_progress - 0.5)))
    weight_future = 1 - weight_immediate

    # Additional factor: average distance of remaining nodes
    remaining_dists = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_remaining_dist = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Normalized factors for better comparison
        norm_current = current_dist / (avg_remaining_dist + 1e-6)
        norm_future = min_future_dist / (avg_remaining_dist + 1e-6)

        # Combined score with additional normalization
        return (weight_immediate * norm_current + weight_future * norm_future) * (1 + 0.1 * tour_progress)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
