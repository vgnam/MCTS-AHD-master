def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        remaining_count = len(remaining_nodes)
        dynamic_weight = 0.5 * (1 + (remaining_count / len(unvisited_nodes)))
        penalty = 0.5 if min_future_dist > 2 * sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes) else 0
        return (dynamic_weight * current_dist) + ((1 - dynamic_weight) * min_future_dist) + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
