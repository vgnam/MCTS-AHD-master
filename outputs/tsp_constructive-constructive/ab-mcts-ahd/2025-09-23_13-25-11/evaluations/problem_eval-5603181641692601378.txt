def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        remaining_nodes = unvisited_nodes - {node}
        density_factor = 1 / len(remaining_nodes) if remaining_nodes else 1
        proximity_weight = 0.5 + 0.5 * (1 - (current_to_dest / max_distance)) if max_distance > 0 else 0.5
        weight = 0.4 + 0.6 * density_factor
        return (proximity_weight * (weight * current_dist + (1 - weight) * future_dist) +
                (1 - proximity_weight) * (0.7 * current_dist + 0.3 * future_dist))

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
