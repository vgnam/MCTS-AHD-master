def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, historical_efficiency=None):
    if not unvisited_nodes:
        return destination_node

    if historical_efficiency is None:
        historical_efficiency = 1.0  # Default efficiency if not provided

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dest_dist = distance_matrix[node][destination_node]

        proximity_factor = 1 - (dest_dist / (dest_dist + current_dist + 1e-10))
        base_weight = 0.6 + 0.4 * proximity_factor
        adjusted_weight = base_weight * historical_efficiency

        return adjusted_weight * current_dist + (1 - adjusted_weight) * avg_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
