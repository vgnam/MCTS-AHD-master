def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_bonus = 1.0 / (1.0 + total_unvisited) if total_unvisited > 0 else 0.0

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist + 0.5 * distance_matrix[node][destination_node]

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dest_heuristic = 0.4 * (1.0 - distance_matrix[node][destination_node] / (sum(distance_matrix[current_node][other] for other in unvisited_nodes) + 1e-6))

        exploration_term = exploration_bonus * (1.0 - (len(remaining_nodes) / total_unvisited))

        return current_dist + 0.6 * avg_future_dist + dest_heuristic + exploration_term

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
