def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    scaling_factor = 0.5 * (1 + 1 / (1 + remaining_nodes))  # Adapts based on remaining nodes
    def weighted_distance(node):
        current_to_next = distance_matrix[current_node][node]
        next_to_dest = distance_matrix[node][destination_node]
        penalty = 1e6 if node == current_node else 0  # Penalize revisiting current node
        return current_to_next + scaling_factor * next_to_dest + penalty
    next_node = min(unvisited_nodes, key=weighted_distance)
    return next_node
