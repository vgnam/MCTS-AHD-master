def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    penalty = 0.2 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] + penalty * distance_matrix[node][destination_node])
    if len(unvisited_nodes) > 1:
        farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        farthest_distance = distance_matrix[current_node][farthest_node]
        if distance_matrix[current_node][next_node] < farthest_distance * 0.5:
            next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
