def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    if not unvisited_nodes:
        return destination_node

    avg_unvisited_dist = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 1

    def weight_function(node):
        distance_ratio = current_to_dest / (avg_unvisited_dist + 1e-6)
        scaling_factor = 1 / (1 + distance_ratio ** 2)
        proximity_weight = 0.5 + 0.5 * (1 - scaling_factor)
        return (proximity_weight * distance_matrix[current_node][node] +
                (1 - proximity_weight) * distance_matrix[node][destination_node] ** 1.5)

    next_node = min(unvisited_nodes, key=weight_function)
    return next_node
