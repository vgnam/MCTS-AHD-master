def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate average future distance from node to remaining nodes
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Dynamic weight: exploration decays as remaining nodes decrease
        exploration_weight = (len(remaining_nodes) / len(unvisited_nodes)) ** 2

        # Penalize revisits to recently visited nodes (simplified heuristic)
        revisit_penalty = 0.1 if node in unvisited_nodes and len(unvisited_nodes) > 2 else 0

        # Combine factors: prioritize future potential but avoid cycles
        return (1 - exploration_weight) * current_dist + exploration_weight * avg_future_dist + revisit_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
