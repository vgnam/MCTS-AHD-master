def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    exploration_weight = max(0.1, 0.5 - 0.4 * (unvisited_count / len(distance_matrix)))
    penalty_decay = 0.9 ** (len(distance_matrix) - unvisited_count)
    visit_penalties = {node: 0 for node in distance_matrix}

    def heuristic_weight(node):
        immediate_cost = distance_matrix[current_node][node]
        estimated_remaining_cost = distance_matrix[node][destination_node]
        exploration_term = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) if sum(distance_matrix[node]) > 0 else 0
        penalty_term = visit_penalties[node] * penalty_decay
        return immediate_cost + exploration_weight * estimated_remaining_cost + 0.2 * exploration_term + penalty_term

    costs = [heuristic_weight(node) for node in unvisited_nodes]
    total_cost = sum(costs)
    probabilities = [(total_cost - cost) / total_cost for cost in costs]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    visit_penalties[next_node] += 1
    return next_node
