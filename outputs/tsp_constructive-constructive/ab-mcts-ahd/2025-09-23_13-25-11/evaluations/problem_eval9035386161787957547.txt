def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_remaining_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        density_factor = 1 / len(remaining_nodes) if remaining_nodes else 1
        dist_ratio = current_dist / (avg_remaining_dist + 1e-6)

        weight_immediate = 0.5 + 0.5 * (1 - density_factor) * dist_ratio
        weight_potential = 0.5 - 0.5 * (1 - density_factor) * dist_ratio

        centrality = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        return (weight_immediate * current_dist +
                weight_potential * (max_future_dist - min_future_dist) +
                0.2 * centrality)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
