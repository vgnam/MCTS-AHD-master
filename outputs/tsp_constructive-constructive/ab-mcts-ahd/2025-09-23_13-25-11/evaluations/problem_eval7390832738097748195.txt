def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_factor = len(remaining_nodes) / len(unvisited_nodes)

        connectivity = sum(1 for other in remaining_nodes if distance_matrix[node][other] < 1.5 * avg_future_dist) / len(remaining_nodes)
        penalty = (1 - remaining_ratio) * 0.5

        return current_dist + (0.6 - 0.2 * penalty) * avg_future_dist + (0.4 + 0.2 * penalty) * (exploration_factor * connectivity)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
