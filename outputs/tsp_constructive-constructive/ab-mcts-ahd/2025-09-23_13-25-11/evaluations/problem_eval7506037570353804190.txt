def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    dynamic_weight = 0.6 + 0.3 * remaining_ratio
    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return immediate_dist
        sum_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes)
        ratio = immediate_dist / sum_future_dist if sum_future_dist > 0 else float('inf')
        return dynamic_weight * ratio + (1 - dynamic_weight) * immediate_dist
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
