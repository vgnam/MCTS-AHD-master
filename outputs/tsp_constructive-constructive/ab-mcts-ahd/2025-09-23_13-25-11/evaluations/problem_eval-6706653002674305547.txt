def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    current_centrality = sum(distance_matrix[current_node]) / total_nodes
    weight_immediate = 0.7 - 0.3 * (remaining_nodes / total_nodes)
    weight_future = 0.3 - 0.1 * (current_centrality / max(distance_matrix[current_node]))
    weight_centrality = 1 - weight_immediate - weight_future
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes_set = unvisited_nodes - {node}
        if not remaining_nodes_set:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes_set) / len(remaining_nodes_set)
        node_centrality = sum(distance_matrix[node]) / total_nodes
        return (weight_immediate * current_dist +
                weight_future * avg_future_dist +
                weight_centrality * node_centrality)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
