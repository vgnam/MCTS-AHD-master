def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        weight_future = 0.7 * (num_unvisited / (num_unvisited + 5))
        weight_current = 0.3 * (1 - (num_unvisited / (num_unvisited + 5)))
        weight_centrality = 0.2 * (1 - (num_unvisited / (num_unvisited + 5)))

        return (weight_current * current_dist +
                weight_future * (current_dist - avg_future_dist) +
                weight_centrality * centrality)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
