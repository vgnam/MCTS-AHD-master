def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    future_weight = 0.5 * (1 + 1 / (1 + remaining_nodes))  # Dynamically adjusts future weight

    def heuristic(node):
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        penalty = 0.1 * (immediate_distance + future_distance) if (immediate_distance + future_distance) > 2 * min(distance_matrix[current_node]) else 0
        return immediate_distance + future_weight * future_distance + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
