def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return -current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_factor = len(remaining_nodes) / len(unvisited_nodes)
        weight_current = 0.6
        weight_avg = 0.2
        weight_explore = 0.2
        dynamic_weight_explore = weight_explore * (1 + (1 - len(remaining_nodes) / len(unvisited_nodes)))
        return - (weight_current * current_dist + weight_avg * avg_future_dist + dynamic_weight_explore * exploration_factor)
    next_node = max(unvisited_nodes, key=evaluate_node)
    return next_node
