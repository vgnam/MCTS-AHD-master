def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        variability_penalty = (max_future_dist - min_future_dist) / (avg_future_dist + 1e-10)
        total_nodes = len(unvisited_nodes) + 1
        dynamic_weight = 1 / total_nodes
        weighted_current = 0.7 - dynamic_weight
        weighted_avg = 0.2 + dynamic_weight * 0.5
        weighted_min = 0.1 + dynamic_weight * 0.3
        return (weighted_current * current_dist +
                weighted_avg * avg_future_dist +
                weighted_min * min_future_dist +
                0.1 * variability_penalty)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
