def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    weight_current = remaining_nodes / total_nodes
    weight_future = 1 - weight_current
    novelty_weight = 0.2 * (1 - (remaining_nodes / total_nodes))  # Increased novelty as fewer nodes remain

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        avg_novelty = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / len(distance_matrix)
        return (weight_current * current_dist +
                weight_future * avg_future_dist +
                novelty_weight * avg_novelty)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
