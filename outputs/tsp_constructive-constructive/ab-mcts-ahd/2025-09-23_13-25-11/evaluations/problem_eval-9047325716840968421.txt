def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate average future distances to all nodes (not just remaining)
        avg_future_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        # Dynamic weight adjustment based on remaining nodes and centrality
        total_unvisited = len(unvisited_nodes)
        weight_immediate = max(0.1, 0.5 * (total_unvisited / len(distance_matrix)) + 0.5 * (1 - centrality / sum(distance_matrix[node])))
        weight_future = 1.0 - weight_immediate

        # Scaled destination proximity based on remaining nodes
        dest_proximity = distance_matrix[node][destination_node]
        if total_unvisited <= 2:
            dest_scale = 1.0
        elif total_unvisited <= 4:
            dest_scale = 0.7
        else:
            dest_scale = 0.4

        # Path momentum: favor nodes that align with recent direction (simplified)
        if len(unvisited_nodes) < len(distance_matrix) - 1:
            last_node = next(iter(unvisited_nodes - remaining_nodes))
            direction_vector = distance_matrix[current_node][node] - distance_matrix[current_node][last_node]
            momentum_term = abs(direction_vector) * 0.1
        else:
            momentum_term = 0

        return (weight_immediate * current_dist) + (weight_future * avg_future_dist) + (dest_scale * dest_proximity) + momentum_term

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
