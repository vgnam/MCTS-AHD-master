def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 / (remaining_nodes + 1)  # Weight decreases as nodes are visited

    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        proximity_penalty = 0.1 if future_dist < 0.5 * distance_matrix[current_node][destination_node] else 0
        return current_dist + dynamic_weight * future_dist + proximity_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
