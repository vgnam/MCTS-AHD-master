def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    weight_future = remaining_nodes / total_nodes
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        future_distances = [distance_matrix[node][other] for other in unvisited_nodes - {node}]
        min_future_dist = min(future_distances)
        variance_future = sum((d - min_future_dist) ** 2 for d in future_distances) / len(future_distances)
        return current_dist + weight_future * min_future_dist + 0.1 * variance_future
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
