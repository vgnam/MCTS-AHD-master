def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate connectivity (number of direct connections to remaining nodes)
        connectivity = sum(1 for other in remaining_nodes if distance_matrix[node][other] < float('inf'))

        # Calculate potential dead-end penalty (nodes with few connections to remaining nodes)
        dead_end_penalty = 1 / (1 + connectivity)

        # Calculate adaptability as the difference between current distance and average future distance
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        adaptability = current_dist - avg_future_dist

        # Dynamic weight based on remaining nodes and connectivity
        exploration_weight = 0.7 * (len(remaining_nodes) / len(unvisited_nodes)) + 0.3 * (connectivity / len(remaining_nodes))

        # Combine metrics with dynamic weighting
        score = (1 - exploration_weight) * current_dist + exploration_weight * adaptability
        score += 0.2 * dead_end_penalty  # Penalize dead-ends more when few connections exist

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
