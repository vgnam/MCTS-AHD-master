def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        dest_proximity = distance_matrix[node][destination_node]

        weight_factor = 0.5 + 0.4 * (1 - dest_proximity / max(distance_matrix[destination_node].values()))
        weighted_current = weight_factor * current_dist
        weighted_future = (1 - weight_factor) * min_future_dist

        return weighted_current + weighted_future

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
