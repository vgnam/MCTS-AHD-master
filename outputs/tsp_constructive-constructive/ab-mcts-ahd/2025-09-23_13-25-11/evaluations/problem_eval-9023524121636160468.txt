def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.7 - 0.3 * (1 - remaining_nodes / total_nodes)
    current_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)
    proximity_weight = 0.6 + 0.4 * (1 - (current_to_dest / max_distance)) if max_distance > 0 else 0.6
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        return (proximity_weight * weight_immediate * current_dist +
                (1 - proximity_weight) * (1 - weight_immediate) * avg_future_dist)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
