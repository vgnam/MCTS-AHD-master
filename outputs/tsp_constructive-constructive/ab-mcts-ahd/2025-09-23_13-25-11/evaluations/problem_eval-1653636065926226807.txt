def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    num_unvisited = len(unvisited_nodes)
    if num_unvisited == 1:
        return unvisited_nodes.pop()
    unvisited_list = list(unvisited_nodes)
    centroid = sum(unvisited_list) / len(unvisited_list)
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        centroid_dist = abs(node - centroid)
        weight_current = 0.5 * (0.8 ** num_unvisited)
        weight_future = 0.3 * (1 - (0.8 ** num_unvisited))
        weight_centroid = 0.2 * (0.9 ** num_unvisited)
        return (weight_current * current_dist +
                weight_future * (current_dist - min_future_dist) +
                weight_centroid * centroid_dist)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
