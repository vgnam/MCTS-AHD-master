def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    adaptive_weight = 1.0 + remaining_ratio  # Increase weight as remaining nodes decrease

    def score(node):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        combined_dist = current_dist + adaptive_weight * future_dist
        return combined_dist

    scores = [score(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)

    if min_score == max_score:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        normalized_scores = [(max_score - s) / (max_score - min_score) for s in scores]
        sum_scores = sum(normalized_scores)
        probabilities = [s / sum_scores for s in normalized_scores]

    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
