def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate centrality as average distance to unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

        # Calculate path diversity as variance of distances from current node to unvisited nodes
        distances = [distance_matrix[current_node][other] for other in unvisited_nodes]
        mean_dist = sum(distances) / len(distances)
        diversity = sum((d - mean_dist) ** 2 for d in distances) / len(distances) if len(distances) > 1 else 0

        # Dynamic weight adjustments
        proximity_weight = 0.6 + 0.4 * (1 - (current_to_dest / max_distance)) if max_distance > 0 else 0.6
        centrality_weight = 0.2 * (1 - (len(remaining_nodes) / len(unvisited_nodes)))
        diversity_weight = 0.2 * (diversity / (max_distance ** 2)) if max_distance > 0 else 0.2

        # Normalize weights to sum to 1
        total_weight = proximity_weight + centrality_weight + diversity_weight
        if total_weight > 0:
            proximity_weight /= total_weight
            centrality_weight /= total_weight
            diversity_weight /= total_weight

        return (proximity_weight * current_dist +
                centrality_weight * centrality +
                diversity_weight * diversity)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
