import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-(remaining_count - 5)))  # Sigmoid adjustment

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        immediate_weight = 0.6 * (1 - weight_factor)
        future_weight = 0.4 * weight_factor

        return immediate_weight * current_dist + future_weight * min_future_dist + 0.1 * avg_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
