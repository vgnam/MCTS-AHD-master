def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_unvisited = len(unvisited_nodes)

        # Linear weight adjustment: immediate distance dominates early, future distance later
        weight_immediate = max(0.2, 0.4 * (total_unvisited / len(distance_matrix)))
        weight_future = 1.0 - weight_immediate

        # Quadratic penalty for nodes far from destination when few nodes remain
        if total_unvisited <= 2:
            dest_penalty = (distance_matrix[node][destination_node] ** 2) * 0.3
        else:
            dest_penalty = 0

        return (weight_immediate * current_dist) + (weight_future * avg_future_dist) + dest_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
