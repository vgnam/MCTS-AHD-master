def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        total_remaining = len(remaining_nodes)
        weight_factor = 1.0 / (1.0 + math.log(total_remaining + 1)) if total_remaining > 0 else 0.0
        dynamic_weight = 0.5 + 0.3 * weight_factor

        return dynamic_weight * current_dist + (1 - dynamic_weight) * min_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
