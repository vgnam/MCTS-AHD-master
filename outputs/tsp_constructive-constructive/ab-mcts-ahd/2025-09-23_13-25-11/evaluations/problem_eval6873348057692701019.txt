def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        density_factor = len(remaining_nodes) / (len(distance_matrix) - 1)
        weight = 0.5 + 0.5 * (1 - density_factor)
        return weight * current_dist + (1 - weight) * (0.3 * avg_future_dist)
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
