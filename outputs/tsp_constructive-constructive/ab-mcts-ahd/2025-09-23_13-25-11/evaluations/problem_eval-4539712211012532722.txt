def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return -current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_factor = len(remaining_nodes) / len(unvisited_nodes)

        proximity_to_dest = distance_matrix[node][destination_node]
        dynamic_weight = 1 / (1 + math.exp(-proximity_to_dest))

        weighted_score = (0.6 - 0.3 * dynamic_weight) * current_dist + \
                         (0.3 + 0.2 * dynamic_weight) * avg_future_dist + \
                         (0.1 + 0.1 * dynamic_weight) * exploration_factor

        return -weighted_score

    next_node = max(unvisited_nodes, key=evaluate_node)
    return next_node
