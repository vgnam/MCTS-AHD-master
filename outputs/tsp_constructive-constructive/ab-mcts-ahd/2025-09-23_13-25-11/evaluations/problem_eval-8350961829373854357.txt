def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    weight_future = remaining_nodes / total_nodes
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        remaining = unvisited_nodes - {node}
        if len(remaining) == 1:
            next_node = remaining.pop()
            return current_dist + distance_matrix[node][next_node]
        sorted_future_dists = sorted(distance_matrix[node][other] for other in remaining)
        min_future_dist = sorted_future_dists[0]
        second_min_future_dist = sorted_future_dists[1]
        return current_dist + weight_future * (min_future_dist + 0.5 * second_min_future_dist)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
