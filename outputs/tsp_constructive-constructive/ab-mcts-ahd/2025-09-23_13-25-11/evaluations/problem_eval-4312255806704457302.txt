def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    local_weight = 0.8 if remaining_count <= 2 else 0.4
    global_weight = 0.6 if remaining_count <= 2 else 0.3

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        weighted_score = (current_dist * local_weight) + \
                         (max_future_dist * global_weight) + \
                         (avg_future_dist * (1 - local_weight - global_weight))
        return weighted_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
