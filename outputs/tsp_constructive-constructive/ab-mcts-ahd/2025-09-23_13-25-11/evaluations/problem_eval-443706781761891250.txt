def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    weight = 1 / (len(unvisited_nodes) + 1)  # Dynamic weight adjustment
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if not unvisited_nodes - {node}:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in unvisited_nodes - {node})
        return weight * current_dist + (1 - weight) * min_future_dist
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
