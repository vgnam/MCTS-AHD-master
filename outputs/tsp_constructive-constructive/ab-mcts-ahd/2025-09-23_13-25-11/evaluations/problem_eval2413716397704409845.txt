def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    unvisited_count = len(unvisited_nodes)
    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return immediate_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        exploration_term = distance_matrix[node][destination_node] / sum(distance_matrix[node]) if sum(distance_matrix[node]) > 0 else 0
        penalty = 0.2 * immediate_dist if unvisited_count <= 3 else 0
        return 0.4 * immediate_dist + 0.3 * min_future_dist + 0.2 * exploration_term + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
