def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes)
    centroid_weight = max(0.1, 0.4 - (0.3 * (1 - len(unvisited_nodes) / total_nodes)))

    def heuristic(node):
        dist_current = distance_matrix[current_node][node]
        dist_destination = distance_matrix[node][destination_node]

        centroid = sum(unvisited_nodes) / len(unvisited_nodes)
        centroid_influence = abs(node - centroid)

        density_penalty = sum(1 for n in unvisited_nodes if abs(n - node) < 2) / len(unvisited_nodes)

        return (0.5 - centroid_weight) * dist_current + \
               (0.3 + centroid_weight * 0.3) * dist_destination + \
               centroid_weight * centroid_influence - \
               0.2 * density_penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
