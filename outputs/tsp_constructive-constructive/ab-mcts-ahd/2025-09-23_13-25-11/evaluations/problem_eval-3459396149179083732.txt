def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_count = len(unvisited_nodes)
    weight_local = 0.3 if remaining_count > 2 else 0.5
    weight_future = 0.7 if remaining_count > 2 else 0.5
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        penalty = avg_future_dist * 0.2
        return weight_local * current_dist + weight_future * min_future_dist + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
