def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    max_nodes = len(distance_matrix)

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    weight_factor = sigmoid(10 * (remaining_count / max_nodes - 0.5))
    current_weight = 0.6 + 0.2 * weight_factor
    future_weight = 0.4 - 0.2 * weight_factor

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        return current_weight * current_dist + future_weight * (0.7 * min_future_dist + 0.3 * avg_future_dist)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
