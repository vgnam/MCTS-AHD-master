def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def calculate_cost(node):
        current_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            average_future_cost = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            total_cost = current_cost + future_cost + 0.5 * average_future_cost
        else:
            total_cost = current_cost + future_cost
        return total_cost
    next_node = min(unvisited_nodes, key=calculate_cost)
    return next_node
