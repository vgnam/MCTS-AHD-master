def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        avg_total_dist = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / len(distance_matrix)

        remaining_ratio = len(remaining_nodes) / len(unvisited_nodes)
        weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))
        centrality_weight = 0.5 if avg_total_dist < avg_future_dist else 0.3

        return (1 - centrality_weight) * (weight * current_dist + (1 - weight) * avg_future_dist) + centrality_weight * avg_total_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
