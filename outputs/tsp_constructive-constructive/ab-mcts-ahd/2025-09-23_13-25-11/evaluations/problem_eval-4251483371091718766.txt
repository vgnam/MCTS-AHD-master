def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_count = len(unvisited_nodes)
    weight_immediate = 0.4 + 0.4 * (1 - min(remaining_count / (len(distance_matrix) - 1), 1))
    weight_adapt = 1 - weight_immediate
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        penalty = 0.2 * current_dist if remaining_count <= 2 else 0
        return weight_immediate * current_dist + weight_adapt * (current_dist - max_future_dist) + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
