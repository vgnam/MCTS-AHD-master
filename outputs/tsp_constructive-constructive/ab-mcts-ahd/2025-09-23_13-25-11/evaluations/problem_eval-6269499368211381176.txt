def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return -current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        exploration_factor = len(remaining_nodes) / len(unvisited_nodes)

        # Dynamic weight adjustment
        total_nodes = len(unvisited_nodes) + 1
        weight_current = 0.5 * (0.5 + 0.5 * (len(remaining_nodes) / total_nodes))
        weight_avg = 0.3 * (0.5 + 0.5 * (len(remaining_nodes) / total_nodes))
        weight_max = 0.1 * (0.5 + 0.5 * (len(remaining_nodes) / total_nodes))
        weight_explore = 0.1 * (2 - 2 * (len(remaining_nodes) / total_nodes))

        return - (weight_current * current_dist + weight_avg * avg_future_dist + weight_max * max_future_dist + weight_explore * exploration_factor)

    # Probabilistic selection
    candidates = list(unvisited_nodes)
    scores = [evaluate_node(node) for node in candidates]
    probabilities = np.exp(scores) / np.sum(np.exp(scores))
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
