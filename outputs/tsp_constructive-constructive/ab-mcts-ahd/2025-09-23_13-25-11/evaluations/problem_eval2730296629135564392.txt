def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate average future distance
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Calculate exploration urgency (inverse of remaining nodes)
        exploration_urgency = 1 / len(remaining_nodes) if remaining_nodes else 0

        # Calculate connectivity score (sum of distances to remaining nodes)
        connectivity_score = sum(distance_matrix[node][other] for other in remaining_nodes)

        # Dynamic weight adjustment
        weight_current = 0.6 if len(remaining_nodes) > 1 else 0.8
        weight_future = 0.3 if len(remaining_nodes) > 1 else 0.1
        weight_connectivity = 0.1 if len(remaining_nodes) > 1 else 0.1

        return (weight_current * current_dist +
                weight_future * avg_future_dist +
                weight_connectivity * connectivity_score +
                exploration_urgency)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
