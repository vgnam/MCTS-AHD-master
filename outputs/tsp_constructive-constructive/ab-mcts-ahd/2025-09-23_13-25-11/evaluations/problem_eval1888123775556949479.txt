def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        variance_future_dist = sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)

        # Calculate current node's centrality (average distance to all unvisited nodes)
        current_centrality = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight adjustment based on remaining nodes and centrality
        weight = 0.5 + 0.2 * (1 - len(remaining_nodes) / len(unvisited_nodes)) + 0.3 * (current_centrality / (current_centrality + 1e-6))

        # Penalty for nodes too close to current node to avoid clustering
        penalty = 0.2 * current_dist if current_dist < 0.5 * current_centrality else 0

        return weight * current_dist + (1 - weight) * avg_future_dist + 0.1 * variance_future_dist - penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
