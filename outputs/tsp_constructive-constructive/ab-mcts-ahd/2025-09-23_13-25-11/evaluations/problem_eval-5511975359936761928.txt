def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_weight = 0.3
    unvisited_count = len(unvisited_nodes)

    def heuristic_weight(node):
        immediate_cost = distance_matrix[current_node][node]
        estimated_remaining_cost = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix) if len(distance_matrix) > 0 else 0
        exploration_term = (distance_matrix[node][destination_node] / centrality) if centrality > 0 else 0
        penalty = 1.5 if node in unvisited_nodes and distance_matrix[current_node][node] > sum(distance_matrix[current_node]) / len(distance_matrix) else 0
        return immediate_cost + exploration_weight * estimated_remaining_cost + 0.3 * exploration_term + penalty

    next_node = min(unvisited_nodes, key=heuristic_weight)
    return next_node
