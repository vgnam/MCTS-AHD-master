def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_unvisited = len(unvisited_nodes)

        # Calculate dynamic threshold
        min_dist = min(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_dist = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        threshold = min_dist + 0.3 * (max_dist - min_dist) * (1 - 1 / total_unvisited)

        # Adjust weights based on threshold
        if current_dist <= threshold:
            immediate_weight = 0.7 + 0.3 * (1 - 1 / total_unvisited)
            future_weight = 0.3 - 0.3 * (1 - 1 / total_unvisited)
        else:
            immediate_weight = 0.3 + 0.2 * (1 - 1 / total_unvisited)
            future_weight = 0.7 - 0.2 * (1 - 1 / total_unvisited)

        return immediate_weight * current_dist + future_weight * avg_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
