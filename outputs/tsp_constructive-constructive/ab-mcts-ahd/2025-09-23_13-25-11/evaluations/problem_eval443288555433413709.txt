def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        centrality = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_weight = 0.3 * (centrality / max(centrality, 1e-6))

        return 0.7 * current_dist + exploration_weight * centrality

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
