def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate average future distance to remaining nodes
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Dynamic weighting based on remaining nodes count
        weight_current = 0.7 if len(remaining_nodes) > 3 else 0.5
        weight_future = 1.0 - weight_current

        # Normalize scores to ensure comparability
        max_current_dist = max(distance_matrix[current_node][n] for n in unvisited_nodes)
        max_avg_future_dist = max(
            sum(distance_matrix[n][other] for other in remaining_nodes) / len(remaining_nodes)
            for n in unvisited_nodes
        )

        normalized_current = current_dist / max_current_dist if max_current_dist != 0 else 0
        normalized_future = avg_future_dist / max_avg_future_dist if max_avg_future_dist != 0 else 0

        return weight_current * normalized_current + weight_future * normalized_future

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
