def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Dynamic temperature based on remaining nodes (decreases as progress is made)
        temperature = max(0.1, 1.0 - 0.2 * (1 / len(remaining_nodes)))

        # Connectivity potential: weighted combination of average and max future distances
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        connectivity_potential = 0.7 * avg_future_dist + 0.3 * max_future_dist

        # Dynamic weight adjustment with probabilistic component
        weight_factor = 1 / len(remaining_nodes) if len(remaining_nodes) > 1 else 1.0
        immediate_weight = 0.5 - 0.2 * weight_factor
        future_weight = 1.0 - immediate_weight

        # Combined score with temperature scaling
        score = immediate_weight * current_dist + future_weight * connectivity_potential
        return score * (1 + temperature * (random.random() - 0.5))

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
