def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_possible_dist = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        node_degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < float('inf'))
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / node_degree if node_degree > 0 else 0

        proximity_weight = 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
        centrality_weight = 0.3 * (1 - proximity_weight)
        future_weight = 0.2 * (1 - (len(remaining_nodes) / len(unvisited_nodes)))

        min_future = min(distance_matrix[node][other] for other in remaining_nodes)
        max_future = max(distance_matrix[node][other] for other in remaining_nodes)

        return (proximity_weight * current_dist +
                centrality_weight * centrality +
                future_weight * (min_future + max_future) / 2)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
