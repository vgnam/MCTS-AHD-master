def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_count / total_nodes)
    current_weight = 0.8 - 0.6 * progress

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        heuristic = 0.5 * min_future_dist + 0.5 * avg_future_dist

        penalty = 0.1 * (1 / (1 + distance_matrix[node][destination_node])) if remaining_count > 2 else 0

        return (current_weight * current_dist) + ((1 - current_weight) * heuristic) + penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
