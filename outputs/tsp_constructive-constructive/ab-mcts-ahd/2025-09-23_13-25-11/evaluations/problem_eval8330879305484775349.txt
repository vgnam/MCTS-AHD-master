def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes)
    proximity_weight = 0.6 + 0.2 * (total_nodes / (total_nodes + 1))  # Dynamic weighting
    adaptability_weight = 1.0 - proximity_weight

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        future_dists = sorted([distance_matrix[node][other] for other in remaining_nodes], reverse=True)
        top_future_avg = sum(future_dists[:3]) / 3  # Average of top 3 future distances
        return proximity_weight * current_dist + adaptability_weight * top_future_avg

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
