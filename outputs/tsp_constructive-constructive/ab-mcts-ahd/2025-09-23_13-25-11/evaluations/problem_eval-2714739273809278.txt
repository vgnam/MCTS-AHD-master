def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_dist_to_all = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes

        weight_current = 0.5 * (0.8 ** num_unvisited)
        weight_future = 0.3 * (1 - (0.8 ** num_unvisited))
        weight_centrality = 0.2 * (1 - (0.95 ** num_unvisited))

        destination_penalty = 1.0 if num_unvisited > total_nodes / 2 else 1.2

        return (weight_current * current_dist +
                weight_future * avg_future_dist +
                weight_centrality * total_dist_to_all) * destination_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
