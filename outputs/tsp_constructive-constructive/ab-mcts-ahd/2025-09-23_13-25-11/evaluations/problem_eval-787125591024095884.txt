def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 0.6 - 0.2 * (remaining_nodes / (remaining_nodes + 1)) ** 2
    weight_future = 0.4 + 0.2 * (remaining_nodes / (remaining_nodes + 1)) ** 2
    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        avg_future_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(len(unvisited_nodes) - 1, 1)
        historical_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n in unvisited_nodes and distance_matrix[node][n] > avg_future_dist) / max(len(unvisited_nodes) - 1, 1)
        return weight_proximity * current_dist + weight_future * (avg_future_dist + historical_penalty)
    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
