def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    def dynamic_weighted_distance(node):
        current_to_next = distance_matrix[current_node][node]
        next_to_dest = distance_matrix[node][destination_node]
        scaling_factor = 0.5 * (1 - (remaining_nodes / len(distance_matrix)))
        return current_to_next + scaling_factor * next_to_dest
    next_node = min(unvisited_nodes, key=dynamic_weighted_distance)
    return next_node
