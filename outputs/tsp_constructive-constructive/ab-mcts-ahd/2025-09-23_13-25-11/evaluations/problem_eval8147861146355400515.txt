def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    current_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max((distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes), default=1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        centrality = 1 / (1 + avg_future_dist) if avg_future_dist > 0 else 1
        proximity_weight = 0.5 + 0.5 * centrality

        outlier_penalty = 1 + (current_dist - avg_future_dist) / (max_distance + 1e-6) if max_distance > 0 else 1

        return (proximity_weight * current_dist +
                (1 - proximity_weight) * (current_dist + min_future_dist)) * outlier_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
