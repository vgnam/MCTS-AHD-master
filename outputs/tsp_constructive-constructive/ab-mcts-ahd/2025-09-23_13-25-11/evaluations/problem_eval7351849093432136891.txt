def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        centrality = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        exploration_ratio = len(remaining_nodes) / len(unvisited_nodes)
        proximity_pressure = 1 - exploration_ratio

        score = (0.5 * current_dist +
                 0.3 * (1 - exploration_ratio) * centrality +
                 0.2 * (exploration_ratio * proximity_pressure * avg_future_dist))

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
