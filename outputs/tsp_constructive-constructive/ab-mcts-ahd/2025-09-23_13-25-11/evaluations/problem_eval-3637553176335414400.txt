def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    temperature = 1.0 - remaining_ratio
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        future_impact = (current_dist - min_future_dist) if remaining_nodes else 0
        regret = max(0, current_dist - min(distance_matrix[current_node][other] for other in unvisited_nodes))
        weighted_score = (0.3 * current_dist + 0.7 * future_impact) + regret
        return weighted_score / (temperature + 1e-6)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
