def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        weight = 1.0 / len(remaining_nodes) if len(remaining_nodes) > 1 else 1.0
        return current_dist + weight * max_future_dist + (1 - weight) * avg_future_dist
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
