def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    local_weight = 0.6 * remaining_ratio + 0.4
    global_weight = 1.0 - local_weight
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        penalty = max(0, current_dist - 2 * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))
        return local_weight * current_dist + global_weight * max_future_dist + 0.2 * penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
