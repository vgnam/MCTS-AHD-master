def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate potential regret: difference between choosing this node and the next best
        next_best_dist = min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)
        regret = current_dist - next_best_dist if next_best_dist < current_dist else 0

        # Rolling average of recent future distances to predict future gains
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_unvisited = len(unvisited_nodes)

        # Dynamic weight adjustment: higher regret increases immediate preference
        weight_immediate = max(0.1, 0.7 - 0.1 * regret)
        weight_future = 1.0 - weight_immediate

        # Early destination bias: penalize nodes far from destination if more than half nodes remain
        if total_unvisited > len(distance_matrix) / 2:
            dest_bias = distance_matrix[node][destination_node] * 0.1
        else:
            dest_bias = 0

        return (weight_immediate * current_dist) + (weight_future * avg_future_dist) + dest_bias

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
