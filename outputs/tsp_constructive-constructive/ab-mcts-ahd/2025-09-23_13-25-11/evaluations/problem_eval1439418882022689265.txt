def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate average future distance
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Calculate neighborhood connectivity (number of nearby nodes)
        neighborhood_size = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * current_dist)

        # Dynamic weight adjustment
        density_factor = 1 / len(remaining_nodes)
        connectivity_factor = min(1, neighborhood_size / len(unvisited_nodes))
        weight = 0.6 + 0.2 * density_factor + 0.2 * connectivity_factor

        # Multi-stage evaluation
        proximity_score = weight * current_dist
        future_score = (1 - weight) * avg_future_dist
        connectivity_score = 0.1 * (1 - connectivity_factor)  # Penalize sparse areas

        return proximity_score + future_score + connectivity_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
