def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        avg_future_dist = sum(future_dists) / len(future_dists)
        variance_future_dist = sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)
        dynamic_weight = len(unvisited_nodes) / (len(unvisited_nodes) + len(remaining_nodes))
        exploration_term = variance_future_dist * (1 - dynamic_weight)
        return current_dist + dynamic_weight * avg_future_dist + exploration_term
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
