def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Calculate centrality (average distance to all nodes)
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes

        # Sigmoid-based weight transition
        sigmoid = 1 / (1 + math.exp(-(num_unvisited - total_nodes/2)/5))
        weight_current = 0.5 * (1 - sigmoid) + 0.2 * sigmoid
        weight_future = 0.3 * (1 - sigmoid) + 0.6 * sigmoid

        return (weight_current * current_dist +
                weight_future * avg_future_dist +
                0.2 * min_future_dist +
                0.1 * centrality)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
