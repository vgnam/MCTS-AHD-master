def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        penalty = 1000.0 * (1.0 - remaining_ratio) if node == current_node else 0.0  # Dynamic penalty
        return current_dist + 0.3 * future_dist + penalty  # Fixed weight for future_dist

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
