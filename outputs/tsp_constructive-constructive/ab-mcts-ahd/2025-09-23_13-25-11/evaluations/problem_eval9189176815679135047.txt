def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        density_factor = 1 / len(remaining_nodes)

        # Novel mechanism: proximity bias based on relative position
        proximity_bias = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        proximity_bias = 1 / (1 + proximity_bias) if proximity_bias > 0 else 1

        # Dynamic weight adjustment with proximity bias
        weight = 0.6 + 0.4 * density_factor * proximity_bias
        weight = max(0.4, min(0.8, weight))  # Clamp between 0.4 and 0.8

        return weight * current_dist + (1 - weight) * avg_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
