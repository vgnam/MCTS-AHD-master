def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_unvisited = len(unvisited_nodes)
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        max_remaining_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        weight_current = 0.6 * (total_unvisited / len(unvisited_nodes))
        weight_adapt = 0.4 * (1 - (total_unvisited / len(unvisited_nodes)))
        penalty = 0.1 * (max_remaining_dist - min_future_dist)
        return weight_current * current_dist + weight_adapt * (current_dist - min_future_dist) + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
