def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        centrality_score = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dynamic_weight = 0.7 if len(unvisited_nodes) > len(distance_matrix) / 2 else 0.8
        return dynamic_weight * current_dist + (1 - dynamic_weight) * centrality_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
