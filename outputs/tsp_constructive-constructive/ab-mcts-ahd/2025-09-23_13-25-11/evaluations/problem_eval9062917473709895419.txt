def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1
    weight_current = 0.5 * (remaining_count / total_nodes)
    weight_avg = 0.3 * (remaining_count / total_nodes)
    weight_max = 0.1 * (remaining_count / total_nodes)
    weight_explore = 0.1 * (1 - remaining_count / total_nodes)
    weight_opportunity = 0.1

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return -current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)
        exploration_factor = len(remaining_nodes) / total_nodes

        # Calculate opportunity cost: potential savings by choosing this node
        opportunity_cost = sum(min(distance_matrix[node][other], distance_matrix[current_node][other]) for other in remaining_nodes) / len(remaining_nodes)

        # Calculate local density: average distance to remaining nodes
        local_density = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        return - (weight_current * current_dist +
                 weight_avg * avg_future_dist +
                 weight_max * max_future_dist +
                 weight_explore * exploration_factor +
                 weight_opportunity * opportunity_cost +
                 0.1 * local_density)

    next_node = max(unvisited_nodes, key=evaluate_node)
    return next_node
