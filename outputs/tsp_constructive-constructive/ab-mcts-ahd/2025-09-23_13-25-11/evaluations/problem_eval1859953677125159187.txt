def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        exploration_factor = 0.5 + 0.5 * (1 - remaining_ratio)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        penalty = 1 + 0.5 * (1 - remaining_ratio)

        return (current_dist * (1 - exploration_factor)) + (avg_future_dist * exploration_factor) * penalty

    candidates = list(unvisited_nodes)
    scores = [evaluate_node(node) for node in candidates]

    if scores:
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - score) / (max_score - min_score + 1e-9) for score in scores]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
