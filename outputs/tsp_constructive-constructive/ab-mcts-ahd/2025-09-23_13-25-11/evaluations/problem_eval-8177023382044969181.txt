def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Calculate average future distance
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Dynamic penalty for revisiting nodes (higher penalty if revisiting)
        penalty = 0.1 * (1 / len(remaining_nodes))

        # Dynamic weight adjustment
        total_unvisited = len(unvisited_nodes)
        immediate_weight = 0.5 + 0.5 * (1 - 1 / total_unvisited)
        future_weight = 0.5 - 0.5 * (1 - 1 / total_unvisited)

        # Heuristic: estimate total path cost if this node is chosen
        estimated_total_cost = current_dist + avg_future_dist

        # Combine weighted distances with penalty
        return immediate_weight * current_dist + future_weight * avg_future_dist + penalty * estimated_total_cost

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
