def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 1 / (1 + remaining_nodes)
    weight_global = remaining_nodes / (1 + remaining_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_after_node = unvisited_nodes - {node}
        if not remaining_after_node:
            return current_dist

        future_cost_savings = sum(distance_matrix[node][other] for other in remaining_after_node) / len(remaining_after_node)
        global_cost = current_dist - future_cost_savings

        centrality = sum(distance_matrix[node][other] for other in remaining_after_node) / len(remaining_after_node)
        exploration_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1)) + 0.5 * (centrality / max(centrality, 1e-6))

        return (1 - exploration_weight) * current_dist + exploration_weight * global_cost

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
