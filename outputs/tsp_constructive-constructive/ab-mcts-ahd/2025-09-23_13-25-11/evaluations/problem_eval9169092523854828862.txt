def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    weight_immediate = 0.5 - 0.3 * (remaining_count / (total_nodes - 1))
    weight_connectivity = 1 - weight_immediate
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        connectivity_score = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        penalty = 0.3 * current_dist * (1 - remaining_count / total_nodes)
        return weight_immediate * current_dist + weight_connectivity * connectivity_score + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
