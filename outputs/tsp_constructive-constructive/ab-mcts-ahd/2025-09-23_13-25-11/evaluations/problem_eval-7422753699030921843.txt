def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        total_nodes = len(unvisited_nodes) + 1
        remaining_ratio = len(remaining_nodes) / total_nodes
        weight = remaining_ratio ** 2

        decay_factor = 0.5 ** (1 - remaining_ratio)
        normalized_evaluation = (1 - weight) * current_dist + weight * min_future_dist
        return normalized_evaluation * decay_factor

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
