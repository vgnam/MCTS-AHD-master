def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    if num_unvisited == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - num_unvisited) / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        max_future_dist = max(distance_matrix[node][other] for other in remaining_nodes)

        weight_current = 1 / (1 + math.exp(5 * (visited_ratio - 0.5)))
        weight_future = 1 - weight_current
        penalty = 0.2 * (max_future_dist / avg_future_dist)

        return weight_current * current_dist + weight_future * avg_future_dist * penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
