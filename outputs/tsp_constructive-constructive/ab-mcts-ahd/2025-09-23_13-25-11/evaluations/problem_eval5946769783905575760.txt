def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    weight_current = remaining_nodes / total_nodes
    weight_future = 1 - weight_current
    avg_dist = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes else 0
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        min_future_dist = min(future_dists)
        avg_future_dist = sum(future_dists) / len(future_dists)
        variance_future_dist = sum((d - avg_future_dist) ** 2 for d in future_dists) / len(future_dists)
        future_score = (min_future_dist + avg_future_dist + variance_future_dist) / 3
        return weight_current * current_dist + weight_future * future_score
    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node) if node != destination_node else float('inf'))
    return next_node
