def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        min_future_dist = min(future_dists)
        max_future_dist = max(future_dists)
        variance = (max_future_dist - min_future_dist) if future_dists else 0
        penalty = 0.2 * variance
        return 0.3 * current_dist + 0.7 * (current_dist - min_future_dist) + penalty
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
