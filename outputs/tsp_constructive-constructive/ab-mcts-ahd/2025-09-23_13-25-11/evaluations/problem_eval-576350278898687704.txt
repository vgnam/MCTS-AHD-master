import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Sigmoid-based weight transition
        transition = 1 / (1 + math.exp(-(num_unvisited - 10)))
        weight_current = 0.5 * (1 - transition)
        weight_future = 0.5 * transition

        return weight_current * current_dist + weight_future * min_future_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
