def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def heuristic(node):
        dist_current = distance_matrix[current_node][node]
        future_dist_sum = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) + 1
        weighted_dist = dist_current / future_dist_sum

        centroid = sum(unvisited_nodes) / len(unvisited_nodes)
        centroid_influence = abs(node - centroid)

        return 0.4 * weighted_dist + 0.3 * centroid_influence + 0.3 * (distance_matrix[node][destination_node] / len(unvisited_nodes))

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
