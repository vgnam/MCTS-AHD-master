def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes else 1.0
    weight_future = 0.5 + 0.3 * (1 - remaining_ratio)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        harmonic_mean = 2 * current_dist * avg_future_dist / (current_dist + avg_future_dist)
        return (1 - weight_future) * current_dist + weight_future * harmonic_mean

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
