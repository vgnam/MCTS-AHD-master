def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance component
        current_dist = distance_matrix[current_node][node]

        # Future distance components
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        # Minimum future distance
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        # Global future distance (average of all remaining distances)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Dynamic weight calculation
        density_factor = 1 / len(remaining_nodes)
        proximity_weight = 0.5 + 0.4 * (1 - density_factor)
        future_weight = 1 - proximity_weight

        # Historical adjustment factor (simulated as a function of path length)
        historical_factor = 0.1 + 0.8 * (1 / (1 + len(unvisited_nodes)))

        # Combined evaluation score
        score = (proximity_weight * current_dist +
                 future_weight * (min_future_dist + avg_future_dist) / 2)
        return score * (1 - historical_factor)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
