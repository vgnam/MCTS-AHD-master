def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        # Calculate node centrality (inverse average distance to remaining nodes)
        centrality = 1 / (sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes) + 1e-6)

        # Calculate future distance predictability (variance of future distances)
        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        predictability = 1 / (sum((d - (sum(future_dists) / len(future_dists))) ** 2 for d in future_dists) / len(future_dists) + 1e-6)

        # Dynamic probability weight: increases as tour progresses
        tour_progress = 1 - (len(remaining_nodes) / len(unvisited_nodes))
        prob_weight = (tour_progress ** 2) * 0.5  # Squared to amplify effect

        # Node potential: combines centrality and predictability with probabilistic weight
        node_potential = (centrality + predictability) * (1 + prob_weight)

        # Hybrid score: combines immediate distance and node potential
        score = (0.3 * current_dist + 0.7 * node_potential)

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
