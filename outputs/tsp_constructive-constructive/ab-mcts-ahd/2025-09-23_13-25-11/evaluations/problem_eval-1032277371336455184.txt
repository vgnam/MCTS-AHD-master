def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    dynamic_penalty = 0.2 / max(remaining_nodes, 1)  # Scale penalty inversely with remaining nodes
    next_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] - dynamic_penalty * distance_matrix[node][destination_node])
    return next_node
