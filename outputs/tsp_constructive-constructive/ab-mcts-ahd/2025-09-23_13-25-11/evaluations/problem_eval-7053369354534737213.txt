def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Dynamic weighting based on remaining nodes (sigmoid function)
        remaining_ratio = len(remaining_nodes) / (len(unvisited_nodes) + 1)
        weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

        # Penalty for nodes close to destination early in the tour
        penalty = 0
        if len(remaining_nodes) > 0.5 * len(unvisited_nodes):
            penalty = 0.2 * distance_matrix[node][destination_node]

        return (1 - weight) * current_dist + weight * avg_future_dist + penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
