def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        total_unvisited = len(unvisited_nodes)
        phase_factor = 1 / (1 + math.exp(-5 * (total_unvisited / len(distance_matrix))))  # Sigmoid transition
        immediate_weight = 0.7 * phase_factor
        future_weight = 0.3 * (1 - phase_factor)
        novelty_factor = 1 / (1 + sum(1 for n in path if n == node))  # Encourage less visited nodes
        return (immediate_weight * current_dist + future_weight * avg_future_dist) * novelty_factor
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
