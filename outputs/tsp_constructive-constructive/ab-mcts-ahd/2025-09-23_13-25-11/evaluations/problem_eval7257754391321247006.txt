def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist

        future_dists = [distance_matrix[node][other] for other in remaining_nodes]
        min_future_dist = min(future_dists)
        max_future_dist = max(future_dists)
        avg_future_dist = sum(future_dists) / len(future_dists)
        adaptability = (current_dist - max_future_dist) * 0.6 + (avg_future_dist - min_future_dist) * 0.4

        significance = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        exploration_phase = len(remaining_nodes) / (len(unvisited_nodes) + 1)
        weight = 0.7 * (1 - exploration_phase) + 0.3 * (significance / max(significance, 1e-6))

        return (1 - weight) * current_dist + weight * adaptability

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
