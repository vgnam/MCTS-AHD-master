def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = unvisited_count / total_nodes if total_nodes > 0 else 0

    def heuristic(node):
        immediate_dist = distance_matrix[current_node][node]
        future_dist = distance_matrix[node][destination_node]
        exploration_term = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) if sum(distance_matrix[node]) > 0 else 0
        penalty = 0.1 * immediate_dist if unvisited_count <= 3 else 0
        dynamic_weight = 1.0 - 0.5 * remaining_ratio
        return immediate_dist + dynamic_weight * future_dist + 0.2 * exploration_term + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
