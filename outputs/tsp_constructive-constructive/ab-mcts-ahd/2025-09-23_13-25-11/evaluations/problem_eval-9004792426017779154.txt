def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        min_future_dist = min(distance_matrix[node][other] for other in remaining_nodes)
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        progress_ratio = (len(unvisited_nodes) - len(remaining_nodes)) / len(unvisited_nodes)
        sigmoid_weight = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
        dynamic_weight = 0.5 + 0.4 * sigmoid_weight
        return current_dist + dynamic_weight * (0.4 * min_future_dist + 0.6 * avg_future_dist)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
