def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_attractiveness(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            return current_dist
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        weight = 0.7 if len(remaining_nodes) > len(unvisited_nodes) / 2 else 0.3
        attractiveness = (weight * current_dist + (1 - weight) * avg_future_dist) ** -1
        return attractiveness

    attractiveness_scores = {node: calculate_attractiveness(node) for node in unvisited_nodes}
    total_attractiveness = sum(attractiveness_scores.values())
    probabilities = {node: score / total_attractiveness for node, score in attractiveness_scores.items()}
    next_node = random.choices(list(probabilities.keys()), weights=probabilities.values(), k=1)[0]
    return next_node
