def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if not remaining_nodes:
            return current_dist

        # Dynamic weighting based on remaining nodes
        remaining_count = len(remaining_nodes)
        total_nodes = len(distance_matrix)
        adaptability_weight = 0.7 * (remaining_count / total_nodes) + 0.3
        proximity_weight = 1.0 - adaptability_weight

        # Calculate average future distance
        avg_future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        # Combine factors with dynamic weights
        score = (proximity_weight * current_dist +
                 adaptability_weight * avg_future_dist +
                 0.2 * centrality)  # Centrality has fixed minor influence

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
