[
     {
          "algorithm": "The algorithm combines a nearest-neighbor heuristic (70% weight) with a global measure (30% weight) that balances centrality (inverse sum of all distances) and inverse average distance to unvisited nodes. It prioritizes local proximity (via nearest neighbor) while incorporating limited global considerations to avoid myopia, with the hybrid score ensuring a trade-off between immediate and long-term optimization.",
          "thought": "The new algorithm combines the nearest neighbor heuristic from No.2 with a refined global measure that considers both centrality and inverse global distance, inspired by No.1, to balance local and global optimization with a hybrid score (70% local, 30% global).",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    global_measure = lambda node: 0.7 * (1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)) + 0.3 * (1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10))\n    hybrid_score = lambda node: 0.7 * distance_matrix[current_node][node] + 0.3 * global_measure(node)\n    next_node = min(unvisited_nodes, key=hybrid_score)\n    return next_node",
          "objective": 6.52706,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing local distance (highest priority) and combining it with a weighted sum of global distance (0.3 weight), centrality (0.7 weight), and inverse global distance (0.2 weight), where centrality is calculated as the inverse of the sum of distances to all nodes (to favor globally central nodes). The function first checks if all nodes are visited and returns the destination if true; otherwise, it evaluates each unvisited node based on the weighted score and selects the one with the minimum score.",
          "thought": "The new algorithm selects the next node by prioritizing nodes that are both nearby and globally central, balancing local distance (highest priority) with a weighted sum of global distance (0.3 weight) and centrality (0.7 weight), while also considering the inverse of the sum of distances to unvisited nodes as a secondary global factor.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    def calculate_score(node):\n        if not unvisited_nodes:\n            return distance_matrix[current_node][node]\n        local_distance = distance_matrix[current_node][node]\n        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)\n        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)\n        inverse_global = 1 / (global_distance + 1e-10)\n        return local_distance + 0.3 * global_distance + 0.7 * centrality + 0.2 * inverse_global\n    next_node = min(unvisited_nodes, key=calculate_score)\n    return next_node",
          "objective": 6.61123,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances local (nearest-neighbor) and global (centrality and unvisited-distance) factors, adjusting weights based on the remaining unvisited nodes' density. Local weight increases as the tour progresses, prioritizing nearest neighbors early, while global factors (centrality and average unvisited distance) gain importance later. The hybrid score combines these factors with dynamic weights, ensuring a smooth transition between local and global optimization.",
          "thought": "The new algorithm modifies the hybrid approach by incorporating a dynamic weight adjustment mechanism that balances local (nearest-neighbor) and global (centrality and unvisited-distance) factors, where weights adapt based on the remaining unvisited nodes' density, ensuring a smoother transition between local and global optimization as the tour progresses.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    # Calculate dynamic weights based on remaining unvisited nodes\n    total_nodes = len(distance_matrix)\n    remaining_ratio = len(unvisited_nodes) / total_nodes\n    local_weight = 0.7 + 0.3 * (1 - remaining_ratio)  # Increase local weight as tour progresses\n    global_weight = 1 - local_weight\n\n    # Nearest-neighbor component\n    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n\n    # Global components\n    def centrality(node):\n        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)\n\n    def unvisited_avg_distance(node):\n        return 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)\n\n    # Hybrid score with dynamic weights\n    hybrid_score = lambda node: (\n        local_weight * distance_matrix[current_node][node] +\n        global_weight * (0.6 * centrality(node) + 0.4 * unvisited_avg_distance(node))\n    )\n\n    next_node = min(unvisited_nodes, key=hybrid_score)\n    return next_node",
          "objective": 6.62032,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm balances global centrality (80% weight) and local proximity (20% weight) to select the next node in TSP. It prioritizes nodes with higher centrality (inverse of total distances to all nodes) while slightly favoring nearby nodes to avoid premature local optima. The `global_centrality` function combines these factors, and the next node is chosen via `min` over unvisited nodes.",
          "thought": "The new algorithm prioritizes a global centrality measure (80% weight) that considers the inverse of the sum of distances to all nodes, combined with a limited local proximity factor (20% weight) to ensure balanced exploration and exploitation, avoiding premature convergence to local optima.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    global_centrality = lambda node: 0.8 * (1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)) + 0.2 * (distance_matrix[current_node][node])\n    next_node = min(unvisited_nodes, key=global_centrality)\n    return next_node",
          "objective": 6.81635,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm balances global centrality (60% weight) and local proximity (40% weight), selecting the next node by minimizing a hybrid score that combines the inverse of total distances (global centrality) and the direct distance from the current node (local proximity). The code prioritizes nodes that are globally central (lower total distances to all other nodes) while slightly favoring closer neighbors to avoid excessive detours. The `hybrid_score` function computes this weighted combination, and the algorithm iteratively selects the node with the minimum score from the unvisited nodes.",
          "thought": "The new algorithm prioritizes global centrality (60% weight) over local proximity (40% weight), using the inverse of total distances as the primary metric while incorporating a small local distance consideration to prevent excessive detours.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    global_centrality = lambda node: 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)\n    hybrid_score = lambda node: 0.4 * distance_matrix[current_node][node] + 0.6 * global_centrality(node)\n    next_node = min(unvisited_nodes, key=hybrid_score)\n    return next_node",
          "objective": 6.95824,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines local distance with a weighted balance of global distance, centrality, and inverse global distance, prioritizing nodes that are both close (local distance) and globally central (higher weights for centrality and inverse global distance). The score function multiplies local distance by a weighted sum of global metrics (1.0 for global distance, 0.5 for centrality, and 0.2 for inverse global), with centrality and inverse global given higher priority than global distance. The next node is selected as the unvisited node with the minimum score.",
          "thought": "The new algorithm combines local distance with a weighted balance of global distance, centrality, and inverse global distance, inspired by No.1, but uses a multiplicative scoring approach like No.2 to prioritize nodes that are both close and globally central.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    def score(node):\n        local_distance = distance_matrix[current_node][node]\n        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)\n        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)\n        inverse_global = 1 / (global_distance + 1e-10)\n        return local_distance * (1.0 + 0.3 * global_distance + 0.5 * centrality + 0.2 * inverse_global)\n    next_node = min(unvisited_nodes, key=score)\n    return next_node",
          "objective": 6.95963,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm implements a **nearest neighbor heuristic** for TSP, prioritizing the closest unvisited node from the current position to minimize incremental path length. The `select_next_node` function evaluates all unvisited nodes based on the `distance_matrix`, selecting the one with the smallest distance to the `current_node`. If no unvisited nodes remain, it returns the `destination_node`. The heuristic prioritizes proximity over global optimality, making it computationally efficient but not guaranteed to find the shortest possible tour.",
          "thought": "The algorithm selects the next node to visit by choosing the unvisited node closest to the current node, aiming to minimize the total path length incrementally.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor selection (70% weight) with a dynamic global measure (30% weight) that balances inverse centrality (sum of all distances) and inverse average distance to unvisited nodes, while using a decreasing dynamic weight to shift from local to global optimization and penalizing excessive detours. The hybrid score prioritizes the nearest neighbor early in the search (high dynamic weight) but increasingly considers global properties (centrality and average distance) as more nodes are visited, with a small penalty for paths significantly detouring from the direct route to the destination.",
          "thought": "The new algorithm combines nearest-neighbor selection (70% weight) with a dynamic global measure (30% weight) that balances inverse centrality (sum of all distances) and inverse average distance to unvisited nodes, while incorporating a dynamic weight that decreases as nodes are visited to transition from local to global optimization, with a small penalty for excessive detours.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_nodes = len(unvisited_nodes) + 1\n    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0\n    dynamic_weight = 0.7 * remaining_ratio + 0.3\n\n    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n\n    penalty_threshold = 1.5 * distance_matrix[current_node][destination_node]\n    penalty = lambda node: max(0, (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) - penalty_threshold)\n\n    global_measure = lambda node: 0.7 * (1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)) + 0.3 * (1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10))\n\n    hybrid_score = lambda node: (\n        dynamic_weight * distance_matrix[current_node][node] +\n        (1 - dynamic_weight) * global_measure(node) +\n        0.1 * penalty(node)\n    )\n\n    next_node = min(unvisited_nodes, key=hybrid_score)\n    return next_node",
          "objective": 7.00774,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing the one that maximizes the difference between the distance from the current node and the distance to the destination, balancing immediate distance with global path optimization. It uses a lambda function to compute `-distance_matrix[current_node][node] + distance_matrix[node][destination_node]`, where the negative sign ensures higher distances from the current node are favored, while the positive term minimizes the distance to the destination. The `max` function then selects the node with the highest computed value, ensuring a trade-off between local and global objectives.",
          "thought": "The new algorithm prioritizes selecting the next node by maximizing the immediate distance from the current node and minimizing the distance from that node to the destination, emphasizing global path optimization over local efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    next_node = max(unvisited_nodes, key=lambda node: -distance_matrix[current_node][node] + distance_matrix[node][destination_node])\n    return next_node",
          "objective": 7.07913,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances nearest-neighbor selection (60% weight) and global centrality (40% weight), where centrality is inversely proportional to the sum of distances to all nodes. As the tour progresses, the dynamic weight adjusts based on the remaining unvisited nodes, prioritizing local optimization early and global optimization later. The hybrid score combines distance to the current node and node centrality, ensuring a trade-off between immediate proximity and long-term tour efficiency.",
          "thought": "The new algorithm modifies the hybrid approach by incorporating a dynamic weighting mechanism that adjusts based on the remaining unvisited nodes, combining nearest-neighbor selection (60% weight) with a global centrality measure (40% weight), where centrality is calculated as the inverse of the sum of distances to all nodes, scaled by the percentage of unvisited nodes to emphasize balance between local and global optimization as the tour progresses.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    dynamic_weight = remaining_nodes / total_nodes\n    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    centrality = lambda node: 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)\n    global_measure = centrality\n    hybrid_score = lambda node: (1 - dynamic_weight) * distance_matrix[current_node][node] + dynamic_weight * global_measure(node)\n    next_node = min(unvisited_nodes, key=hybrid_score)\n    return next_node",
          "objective": 7.08672,
          "other_inf": null
     }
]