def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    local_weight = 1.0 - visited_ratio
    global_weight = visited_ratio

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)
        penalty = 0.2 * variance
        return (local_weight * distance_matrix[current_node][node] +
                0.5 * global_weight * avg_distance +
                penalty)

    scores = [calculate_score(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]

    temperature = 1.0 - visited_ratio
    probabilities = [np.exp(s / temperature) for s in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
