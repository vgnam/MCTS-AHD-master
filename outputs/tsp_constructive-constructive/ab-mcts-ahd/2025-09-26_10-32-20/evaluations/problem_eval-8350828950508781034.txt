def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        if not unvisited_nodes:
            return local_distance
        max_distance = max(distance_matrix[node][n] for n in unvisited_nodes)
        remaining_nodes = len(unvisited_nodes)
        weight_factor = 2 ** (-remaining_nodes / 10)  # Exponential decay for dynamic weighting
        return (1 - weight_factor) * local_distance + weight_factor * max_distance
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
