importance metric based on historical visit frequency and centrality, with a novel penalty mechanism that scales with both revisit frequency and remaining tour progress.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    temperature = 1 - 2 * remaining_ratio

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def node_importance(node):
        visit_history = sum(1 for n in range(total_nodes) if distance_matrix[current_node][n] == distance_matrix[node][n])
        return (centrality(node) * (1 + visit_history)) ** (1 / (1 + temperature))

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    local_weight = sigmoid(temperature)
    global_weight = 1 - local_weight
    revisit_penalty = 0.2 * (1 - remaining_ratio) ** 2

    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * node_importance(node) +
        revisit_penalty * (1 / (1 + node_importance(node)))
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
