def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)
    weight_immediate = 0.5 + 0.4 * progress
    weight_future = 0.2 + 0.6 * progress

    def calculate_weighted_score(node):
        immediate_distance = distance_matrix[current_node][node]
        future_savings = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        return (weight_immediate * immediate_distance) + (weight_future * future_savings)

    next_node = min(unvisited_nodes, key=calculate_weighted_score)
    return next_node
