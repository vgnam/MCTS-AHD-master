def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    closest_to_farthest = min(unvisited_nodes, key=lambda node: distance_matrix[farthest_node][node])
    dist_farthest = distance_matrix[current_node][farthest_node]
    dist_closest = distance_matrix[current_node][closest_to_farthest]
    if dist_farthest == 0:
        return farthest_node
    prob_farthest = 1 / dist_farthest
    prob_closest = dist_closest / dist_farthest
    total_prob = prob_farthest + prob_closest
    rand_val = random.random()
    if rand_val < (prob_farthest / total_prob):
        next_node = farthest_node
    else:
        next_node = closest_to_farthest
    return next_node
