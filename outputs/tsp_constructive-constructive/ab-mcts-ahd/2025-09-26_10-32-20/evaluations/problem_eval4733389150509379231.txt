import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    progress = 1 - (len(unvisited_nodes) / total_nodes)
    exploration_factor = 0.1 + 0.9 * (1 - (len(unvisited_nodes) / total_nodes))

    weight_local = 1 / (1 + math.exp(-10 * (progress - 0.5)))
    weight_global = 1 - weight_local

    penalty = lambda node: 0.2 * sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)
    exploration_bonus = lambda node: (1 - distance_matrix[node][current_node] / max(max(row) for row in distance_matrix)) * exploration_factor

    hybrid_score = lambda node: (
        weight_local * distance_matrix[current_node][node] +
        weight_global * distance_matrix[node][destination_node] +
        penalty(node) -
        exploration_bonus(node)
    )

    try:
        next_node = min(unvisited_nodes, key=hybrid_score)
    except ValueError:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
