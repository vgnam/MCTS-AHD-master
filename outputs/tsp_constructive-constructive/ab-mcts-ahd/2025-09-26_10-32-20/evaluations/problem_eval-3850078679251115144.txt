def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    local_weight = 0.6 + 0.4 * (1 - remaining_ratio)
    global_weight = 1 - local_weight

    recent_visits = {}
    for node in unvisited_nodes:
        recent_visits[node] = 1 if node in recent_visits else 0

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        visit_penalty = recent_visits.get(node, 0) * 0.5
        return (local_weight * (1 / (local_distance + 1e-10)) + global_weight * (0.6 * centrality + 0.4 * (1 / (global_distance + 1e-10)))) * (1 - visit_penalty)

    candidates = list(unvisited_nodes)
    if len(candidates) > 3:
        candidates = sorted(candidates, key=calculate_score, reverse=True)[:3]
    next_node = max(candidates, key=lambda x: calculate_score(x) + (0.1 * (1 / (distance_matrix[current_node][x] + 1e-10))))
    return next_node
