def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate current path length approximation
    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes)

    # Dynamic weight adjustment using sigmoid
    weight_local = 1 / (1 + math.exp(-0.1 * (current_path_length - 100)))
    weight_global = 1 - weight_local

    # Calculate hybrid score with dynamic weights
    hybrid_score = lambda node: weight_local * distance_matrix[current_node][node] + weight_global * distance_matrix[node][destination_node]

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
