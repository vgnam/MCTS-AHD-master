def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes + 1)

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        global_dist = distance_matrix[node][destination_node]
        weighted_cost = (1 - weight_factor) * (0.6 * global_dist + 0.3 * local_dist + 0.1 * centrality) + weight_factor * (0.5 * global_dist + 0.4 * local_dist + 0.1 * centrality)
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
