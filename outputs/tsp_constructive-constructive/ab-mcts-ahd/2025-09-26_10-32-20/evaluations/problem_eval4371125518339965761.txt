def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1  # +1 to include current_node
    dynamic_weight = 0.6 * (remaining_nodes / total_nodes) + 0.4 * (1 - remaining_nodes / total_nodes)

    threshold = 1.2 * distance_matrix[current_node][destination_node]

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        penalty = max(0, (local_cost + global_cost) - threshold)
        return dynamic_weight * local_cost + (1 - dynamic_weight) * global_cost + penalty

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
