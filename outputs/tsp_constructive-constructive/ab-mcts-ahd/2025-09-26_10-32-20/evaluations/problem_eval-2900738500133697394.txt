import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)
    global_weight = 1.0 - temperature

    def hybrid_score(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        return (1 - global_weight) * local_dist + global_weight * global_dist

    scores = [hybrid_score(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)

    if max_score == min_score:
        return random.choice(unvisited_nodes)

    normalized_scores = [(max_score - s) / (max_score - min_score) for s in scores]
    probabilities = [math.exp(ns / temperature) for ns in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
