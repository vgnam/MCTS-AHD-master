import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on path progress
    progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
    weight_local = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid transition
    weight_global = 1 - weight_local

    # Penalty for revisiting nodes (avoid loops)
    penalty = 0.1 * (1 / (1 + math.exp(-5 * (progress - 0.3))))

    # Hybrid score with dynamic weights and penalty
    hybrid_score = lambda node: (
        weight_local * distance_matrix[current_node][node] +
        weight_global * distance_matrix[node][destination_node] +
        penalty * (1 if node in unvisited_nodes else 0)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
