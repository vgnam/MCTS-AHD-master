def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 10)))  # Dynamic exploration factor

    def hybrid_score(node):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        random_component = 0.1 * distance_to_current * (1 + 0.5 * (destination_node - current_node))  # Simplified random-like component
        return (1 - exploration_factor) * distance_to_current + exploration_factor * distance_to_dest + random_component

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
