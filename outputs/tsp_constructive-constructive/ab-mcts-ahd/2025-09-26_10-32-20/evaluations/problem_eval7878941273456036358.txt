def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    dynamic_weight = 0.7 * remaining_ratio + 0.3  # Weight decreases as nodes are visited

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])

    penalty_threshold = 1.5 * distance_matrix[current_node][destination_node]
    penalty = lambda node: max(0, (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) - penalty_threshold)

    hybrid_score = lambda node: (
        dynamic_weight * distance_matrix[current_node][node] +
        (1 - dynamic_weight) * distance_matrix[node][destination_node] +
        0.1 * penalty(node)  # Penalize nodes causing excessive detours
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
