def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    dynamic_weight = 0.6 * (remaining_nodes / total_nodes) + 0.4 * (1 - remaining_nodes / total_nodes)

    threshold = 1.2 * distance_matrix[current_node][destination_node]

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        inverse_global = 1 / (global_distance + 1e-10)
        penalty = max(0, local_distance - threshold)
        return dynamic_weight * (local_distance + penalty) + (1 - dynamic_weight) * (0.5 * centrality + 0.5 * inverse_global)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
