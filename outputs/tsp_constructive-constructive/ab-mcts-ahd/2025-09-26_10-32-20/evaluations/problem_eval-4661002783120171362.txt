def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid adjustment

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])

    hybrid_score = lambda node: (
        (1 - weight_factor) * distance_matrix[current_node][node] +
        weight_factor * distance_matrix[node][destination_node]
    )

    next_node = min(unvisited_nodes, key=hybrid_score)

    # Penalize revisiting nodes to avoid cycles
    if next_node in unvisited_nodes and distance_matrix[current_node][next_node] == 0:
        unvisited_nodes.remove(next_node)
        return select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix)

    return next_node
