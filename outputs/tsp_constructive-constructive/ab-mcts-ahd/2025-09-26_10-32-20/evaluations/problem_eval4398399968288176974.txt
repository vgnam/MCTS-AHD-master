def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    phase = remaining_nodes / total_nodes

    if phase > 0.7:
        weight_local = 0.7
        weight_centrality = 0.2
        weight_global = 0.1
        weight_history = 0.0
    elif 0.3 < phase <= 0.7:
        weight_local = 0.5
        weight_centrality = 0.3
        weight_global = 0.15
        weight_history = 0.05
    else:
        weight_local = 0.4
        weight_centrality = 0.3
        weight_global = 0.2
        weight_history = 0.1

    node_penalties = {node: 0 for node in unvisited_nodes}

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        inverse_global = 1 / (global_distance + 1e-10)
        proximity_pressure = (1 - phase) * local_distance
        history_penalty = node_penalties.get(node, 0)

        return (weight_local * local_distance) + (weight_centrality * centrality) + (weight_global * inverse_global) - (weight_history * history_penalty) + proximity_pressure

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
