def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes > 3:
        local_weight = 0.6
        global_weight = 0.4
    else:
        local_weight = 0.3
        global_weight = 0.7

    # Calculate variance of distances to unvisited nodes for normalization
    mean_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    variance = sum((distance_matrix[current_node][node] - mean_distance) ** 2 for node in unvisited_nodes) / remaining_nodes
    normalization_factor = 1 / (1 + variance) if variance > 0 else 1

    next_node = min(unvisited_nodes, key=lambda node:
        local_weight * distance_matrix[current_node][node] +
        global_weight * distance_matrix[node][destination_node] +
        (0.2 * sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)) * normalization_factor
    )
    return next_node
