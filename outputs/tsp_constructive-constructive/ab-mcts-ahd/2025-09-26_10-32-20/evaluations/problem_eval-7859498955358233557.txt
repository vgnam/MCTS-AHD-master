def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    local_weight = 1.0 - 0.7 * visited_ratio
    global_weight = 0.7 + 0.3 * visited_ratio

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)
        penalty = 0.4 * variance
        centrality_bonus = 0.5 * (1 / (avg_distance + 1e-6))
        return (local_weight * distance_matrix[current_node][node] +
                global_weight * avg_distance +
                penalty -
                centrality_bonus)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
