def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    phase_factor = 1 - remaining_ratio
    local_weight = 0.6 + 0.4 * phase_factor
    global_weight = 1 - local_weight

    def connectivity(node):
        direct = sum(distance_matrix[node][n] for n in range(total_nodes))
        indirect = sum(min(distance_matrix[node][k] + distance_matrix[k][n] for k in range(total_nodes))
                      for n in range(total_nodes) if n != node)
        return 1 / (direct + indirect + 1e-10)

    def penalty(node):
        return 1 if node in unvisited_nodes else 1.5

    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * connectivity(node) +
        penalty(node)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
