def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    sigmoid_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid adjustment for dynamic weighting

    # Calculate probabilities for each node
    probabilities = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        score = (1 - sigmoid_weight) * local_dist + sigmoid_weight * global_dist
        probabilities.append(1 / (score + 1e-6))  # Invert and normalize to avoid division by zero

    # Normalize probabilities
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    # Select node based on probability
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
