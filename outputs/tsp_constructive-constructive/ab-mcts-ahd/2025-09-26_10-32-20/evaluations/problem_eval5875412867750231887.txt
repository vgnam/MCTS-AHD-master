def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_local = 0.4 + 0.3 * (remaining_nodes / len(distance_matrix))
    weight_global = 0.3 + 0.2 * (remaining_nodes / len(distance_matrix))
    weight_centrality = 0.2 + 0.3 * (remaining_nodes / len(distance_matrix))
    weight_coherence = 0.1 + 0.2 * (remaining_nodes / len(distance_matrix))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        inverse_global = 1 / (global_distance + 1e-10)
        return (weight_local * local_distance) + (weight_global * global_distance) + (weight_centrality * centrality) - (weight_coherence * coherence) + (0.1 * inverse_global)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
