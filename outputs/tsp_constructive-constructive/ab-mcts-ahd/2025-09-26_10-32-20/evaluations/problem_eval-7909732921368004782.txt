def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    progress = len(unvisited_nodes) / (len(unvisited_nodes) + 1) if unvisited_nodes else 0
    local_weight = 1 / (1 + math.exp(5 * (progress - 0.5)))
    global_weight = 1 - local_weight

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        lookahead_cost = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        return local_weight * local_cost + global_weight * (0.7 * global_cost + 0.3 * lookahead_cost)

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
