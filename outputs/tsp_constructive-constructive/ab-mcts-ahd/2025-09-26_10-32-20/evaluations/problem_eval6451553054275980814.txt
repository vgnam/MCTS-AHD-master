import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid adjustment

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        penalty = max(0, (local_cost + global_cost) - 2 * distance_matrix[current_node][destination_node])
        return dynamic_weight * local_cost + (1 - dynamic_weight) * global_cost + 0.2 * penalty

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
