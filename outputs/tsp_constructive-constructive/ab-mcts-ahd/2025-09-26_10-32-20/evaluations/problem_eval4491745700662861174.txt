def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        immediate_distance = distance_matrix[current_node][node]
        long_term_distance = distance_matrix[node][destination_node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        connectivity = sum(1 / (distance_matrix[node][n] + 1e-10) for n in unvisited_nodes) / len(unvisited_nodes)

        progress_factor = (len(unvisited_nodes) / len(distance_matrix)) ** 2
        weight_immediate = 1.0 - progress_factor
        weight_long_term = progress_factor
        weight_centrality = 0.3 * (1 - progress_factor)
        weight_connectivity = 0.2 * progress_factor

        return (weight_immediate * immediate_distance +
                weight_long_term * long_term_distance -
                weight_centrality * centrality +
                weight_connectivity * connectivity)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
