def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])
    current_path_length = sum(distance_matrix[current_node][destination_node] for _ in range(len(unvisited_nodes)))
    local_weight = 0.5 + 0.2 * (current_path_length / len(unvisited_nodes)) if unvisited_nodes else 0.5
    global_weight = 1 - local_weight
    hybrid_score = lambda node: local_weight * distance_matrix[current_node][node] + global_weight * distance_matrix[node][destination_node]
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
