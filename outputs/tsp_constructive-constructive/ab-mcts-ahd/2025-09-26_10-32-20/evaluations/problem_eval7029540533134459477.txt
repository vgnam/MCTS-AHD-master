def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    time_factor = 1 - remaining_ratio

    # Adaptive weights based on time and node characteristics
    proximity_weight = 0.6 * (1 - time_factor) + 0.2
    centrality_weight = 0.4 * time_factor + 0.1
    destination_weight = 0.5 * (1 - time_factor) + 0.3

    def centrality(node):
        return sum(distance_matrix[node][n] for n in range(total_nodes)) ** -1

    def destination_alignment(node):
        if node == destination_node:
            return 0
        return distance_matrix[node][destination_node] / max(distance_matrix[destination_node][n] for n in range(total_nodes))

    hybrid_score = lambda node: (
        proximity_weight * distance_matrix[current_node][node] +
        centrality_weight * centrality(node) +
        destination_weight * destination_alignment(node)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
