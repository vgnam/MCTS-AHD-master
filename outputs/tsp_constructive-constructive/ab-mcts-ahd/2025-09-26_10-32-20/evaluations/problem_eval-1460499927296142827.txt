import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate progress ratio (0 to 1) based on remaining nodes
    total_nodes = len(unvisited_nodes) + 1
    progress = 1 - (len(unvisited_nodes) / total_nodes)

    # Temperature-based exploration: decreases as progress increases
    temperature = 1.0 - progress

    # Penalty term to avoid revisiting nearby nodes
    penalty = lambda node: 0.3 * sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)

    # Hybrid score with dynamic weights and penalty
    hybrid_score = lambda node: (
        (1 - progress) * distance_matrix[current_node][node] +
        progress * distance_matrix[node][destination_node] +
        penalty(node)
    )

    # Calculate Boltzmann probabilities
    scores = [hybrid_score(node) for node in unvisited_nodes]
    min_score = min(scores)
    normalized_scores = [math.exp(-(score - min_score) / temperature) for score in scores]
    total_weight = sum(normalized_scores)

    # Select node probabilistically
    if total_weight > 0:
        probabilities = [score / total_weight for score in normalized_scores]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
