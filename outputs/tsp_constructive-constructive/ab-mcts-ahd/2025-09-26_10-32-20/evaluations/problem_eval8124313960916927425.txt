import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_weighted_score(node, penalty_factor=0.5):
        immediate_distance = distance_matrix[current_node][node]
        future_savings = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        penalty = penalty_factor * (1 / (1 + future_savings)) if future_savings > 0 else 0
        return immediate_distance + 0.3 * future_savings + penalty

    candidates = unvisited_nodes.copy()
    scores = [calculate_weighted_score(node) for node in candidates]
    min_score = min(scores)
    best_nodes = [node for node, score in zip(candidates, scores) if score == min_score]

    if len(best_nodes) > 1:
        return random.choice(best_nodes)
    else:
        return next_node
