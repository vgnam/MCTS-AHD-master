def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress_factor = (remaining_nodes + 1) ** -0.5  # Non-linear progress scaling
    straight_line_dist = distance_matrix[current_node][destination_node]

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        density = len([n for n in unvisited_nodes if distance_matrix[node][n] < straight_line_dist * 0.5]) / (remaining_nodes + 1)
        path_deviation = abs(local_dist - straight_line_dist) / (straight_line_dist + 1e-10)

        weighted_cost = (1 - progress_factor) * (0.6 * local_dist + 0.2 * centrality + 0.1 * density + 0.1 * path_deviation) + progress_factor * distance_matrix[node][destination_node]
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
