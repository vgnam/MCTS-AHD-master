def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - 0.1 * remaining_nodes)  # Decrease temperature as nodes are visited
    weight = max(0.3, 0.8 - 0.05 * remaining_nodes)  # Original weight adjustment

    # Compute weighted distances and apply temperature scaling
    scores = []
    for node in unvisited_nodes:
        score = weight * distance_matrix[current_node][node] + (1 - weight) * distance_matrix[node][destination_node]
        scores.append(score / temperature)

    # Softmax to get probabilities
    exp_scores = np.exp(scores - np.max(scores))  # Numerical stability
    probabilities = exp_scores / np.sum(exp_scores)

    # Select node probabilistically
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
