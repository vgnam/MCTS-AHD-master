def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Dynamic temperature parameter
    temperature = 1.0 - (1.0 / (1.0 + math.exp(-5 * (visited_ratio - 0.5))))

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        # Calculate hub penalty
        in_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][current_node])
        out_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][destination_node])
        hub_penalty = 0.3 * (in_degree + out_degree)

        # Calculate local and global components
        local_component = distance_matrix[current_node][node]
        global_component = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weighting
        weighted_score = (temperature * local_component + (1 - temperature) * global_component) + hub_penalty

        return weighted_score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
