def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate entropy factor
    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
    max_total_distance = max(sum(row) for row in distance_matrix)
    entropy_factor = 1 - (avg_distance / max_total_distance) if max_total_distance != 0 else 1

    # Dynamic weight adjustment
    weight_local = 0.6 * entropy_factor + 0.2 * (remaining_nodes / total_nodes)
    weight_global = 0.4 * (1 - entropy_factor) + 0.2 * (remaining_nodes / total_nodes)

    next_node = min(unvisited_nodes, key=lambda node: weight_local * distance_matrix[current_node][node] + weight_global * distance_matrix[node][destination_node])
    return next_node
