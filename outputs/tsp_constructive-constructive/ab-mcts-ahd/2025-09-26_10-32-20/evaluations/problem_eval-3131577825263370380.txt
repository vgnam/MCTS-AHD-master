def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate path momentum and local efficiency
    max_total_distance = max(sum(row) for row in distance_matrix)
    path_momentum = 0
    if len(distance_matrix) > 1:
        prev_node = current_node - 1 if current_node > 0 else len(distance_matrix) - 1
        path_momentum = -distance_matrix[prev_node][current_node] / max_total_distance

    # Dynamic weight adjustment emphasizing local efficiency
    weight_local = 0.6 + 0.2 * (remaining_nodes / total_nodes) + 0.2 * path_momentum
    weight_momentum = 0.4 * (1 - remaining_nodes / total_nodes) + 0.3 * path_momentum

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        local_term = weight_local * local_distance * (1 - 0.3 * path_momentum)
        momentum_term = weight_momentum * (1 / (1 + local_distance)) * (1 + 0.5 * path_momentum)
        return local_term - momentum_term

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
