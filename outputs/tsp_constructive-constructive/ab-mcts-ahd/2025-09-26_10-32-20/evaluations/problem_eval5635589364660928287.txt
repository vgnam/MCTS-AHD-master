def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    base_weight_local = 0.6
    base_weight_centrality = 0.3
    base_weight_coherence = 0.1

    visit_frequency = [0] * total_nodes
    for node in unvisited_nodes:
        visit_frequency[node] += 1

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        global_density = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes)) / total_nodes
        coherence = (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)) / (sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes)

        dynamic_weight_local = base_weight_local * (1 - 0.5 * (visit_frequency[node] / (sum(visit_frequency) + 1e-10)))
        dynamic_weight_centrality = base_weight_centrality * (1 + 0.5 * progress)
        dynamic_weight_coherence = base_weight_coherence * (1 + 0.3 * progress)

        return (dynamic_weight_local * local_distance) + (dynamic_weight_centrality * centrality) - (dynamic_weight_coherence * coherence) + (0.1 * global_density)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
