def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_distance = distance_matrix[current_node][destination_node]
    max_distance = max(distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes)

    if max_distance == 0:
        weight = 0.5
    else:
        normalized_distance = remaining_distance / max_distance
        weight = 1 / (1 + math.exp(-10 * (normalized_distance - 0.5)))

    hybrid_score = lambda node: weight * distance_matrix[current_node][node] + (1 - weight) * distance_matrix[node][destination_node]
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
