def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    global_weight = 0.7 + 0.3 * (1 - remaining_ratio)
    local_weight = 1 - global_weight

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def global_distance(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    def inverse_global(node):
        return 1 / (global_distance(node) + 1e-10)

    hybrid_score = lambda node: (
        global_weight * (0.6 * centrality(node) + 0.3 * global_distance(node) + 0.1 * inverse_global(node)) +
        local_weight * distance_matrix[current_node][node]
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
