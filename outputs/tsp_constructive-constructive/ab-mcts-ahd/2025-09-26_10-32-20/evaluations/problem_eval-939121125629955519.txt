import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    phase = 1 - remaining_ratio

    # Sigmoid-based dynamic weighting
    k = 10.0  # Steepness of the sigmoid
    local_weight = 1 / (1 + math.exp(-k * (phase - 0.5)))
    global_weight = 1 - local_weight

    def look_ahead(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def inverse_global(node):
        global_dist = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        return 1 / (global_dist + 1e-10)

    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * (0.5 * centrality(node) + 0.3 * inverse_global(node) + 0.2 * look_ahead(node))
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
