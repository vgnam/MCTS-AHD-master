def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    remaining_ratio = remaining_nodes / total_nodes

    weight_local = 0.6 * (1 + remaining_ratio)
    weight_centrality = 0.3 * (1 - remaining_ratio)
    weight_progress = 0.1 * (1 - remaining_ratio)
    weight_revisit = 0.2 * (1 - remaining_ratio)

    def calculate_score(node):
        direct_distance = distance_matrix[current_node][node]
        centrality = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes))
        progress = (total_nodes - remaining_nodes) / total_nodes
        revisit_penalty = 1 if node in unvisited_nodes else 0.5

        return (weight_local * direct_distance) + (weight_centrality * centrality) - (weight_progress * progress) + (weight_revisit * revisit_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
