def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    global_weight = 0.3 + 0.4 * (1 - remaining_ratio)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        return 0.3 * local_distance + global_weight * (0.6 * centrality + 0.4 * (1 / (global_distance + 1e-10)))

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
