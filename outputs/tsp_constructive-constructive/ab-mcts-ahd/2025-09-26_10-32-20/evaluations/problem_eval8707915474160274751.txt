def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Avoid division by zero
    immediate_weight = 0.7 + 0.2 * (1 - remaining_ratio)  # Increase immediate weight as nodes decrease
    long_term_weight = 0.3 - 0.2 * (1 - remaining_ratio)  # Decrease long-term weight as nodes decrease

    def dynamic_score(node):
        immediate_distance = distance_matrix[current_node][node]
        long_term_distance = distance_matrix[node][destination_node]
        revisit_penalty = 1.0 if node in unvisited_nodes else 1.5  # Penalize revisits
        return (immediate_weight * immediate_distance + long_term_weight * long_term_distance) * revisit_penalty

    next_node = min(unvisited_nodes, key=dynamic_score)
    return next_node
