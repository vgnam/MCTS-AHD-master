def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustment: prioritize local connectivity when few nodes remain
    if remaining_nodes <= total_nodes * 0.3:
        local_weight = 0.8
    elif remaining_nodes <= total_nodes * 0.6:
        local_weight = 0.6
    else:
        local_weight = 0.4

    global_weight = 1.0 - local_weight

    hybrid_score = lambda node: local_weight * distance_matrix[current_node][node] + global_weight * distance_matrix[node][destination_node]
    next_node = min(unvisited_nodes, key=hybrid_score)

    return next_node
