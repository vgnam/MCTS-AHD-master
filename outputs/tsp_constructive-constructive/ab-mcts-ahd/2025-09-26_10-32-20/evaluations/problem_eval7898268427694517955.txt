import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = math.log(remaining_nodes + 1) / (remaining_nodes + 1)  # Dynamic temperature

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        visibility = math.exp(-local_distance / temperature)  # Visibility metric
        connectivity = math.exp(-global_distance / temperature)
        return temperature * local_distance + (1 - temperature) * global_distance + visibility * connectivity

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
