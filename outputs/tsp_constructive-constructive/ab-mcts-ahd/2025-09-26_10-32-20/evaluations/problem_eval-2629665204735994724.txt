importance).
2. Balancing immediate proximity (as in nearest neighbor) with broader network considerations.
3. Using weighted criteria to prioritize relevant nodes while ensuring efficiency.

**Design Idea:**
{The new algorithm integrates local distance (60% weight) and global centrality (average distance to unvisited nodes, 40% weight) to select the next node, ensuring a trade-off between immediate proximity and long-term tour efficiency.}

**Implementation:**
```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_weight(node):
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        return 0.6 * distance_matrix[current_node][node] + 0.4 * avg_distance

    next_node = min(unvisited_nodes, key=calculate_weight)
    return next_node
