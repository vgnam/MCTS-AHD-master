def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    exploration_factor = 1.0 / (1.0 + len(unvisited_nodes))
    max_distance = max(max(row) for row in distance_matrix)
    normalized_local = lambda node: distance_matrix[current_node][node] / max_distance
    normalized_global = lambda node: distance_matrix[node][destination_node] / max_distance
    hybrid_score = lambda node: (0.7 - exploration_factor * 0.3) * normalized_local(node) + (0.3 + exploration_factor * 0.4) * normalized_global(node) + exploration_factor * (normalized_local(node) * normalized_global(node))
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
