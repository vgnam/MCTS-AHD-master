def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    local_weight = 1.0 - visited_ratio
    global_weight = visited_ratio

    # Compute eigenvector centrality for each node
    centrality = {}
    n = len(distance_matrix)
    for node in range(n):
        centrality[node] = 1.0  # Initialize
    for _ in range(10):  # Iterative approximation
        for node in range(n):
            centrality[node] = sum(distance_matrix[node][j] * centrality[j] for j in range(n))

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)
        penalty = 0.3 * variance
        centrality_score = centrality[node] * 0.5  # Weight centrality
        return (local_weight * distance_matrix[current_node][node] +
                0.4 * global_weight * avg_distance +
                penalty -
                centrality_score)

    # Probabilistic selection based on scores
    scores = [calculate_score(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]  # Invert and normalize
    probabilities = [s / sum(normalized_scores) for s in normalized_scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
