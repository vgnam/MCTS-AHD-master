importance.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Predefined priority list (example: [node1, node2, ...])
    priority_list = [0, 1, 2, 3, 4]  # Adjust based on node indices

    def weighted_score(node):
        distance = distance_matrix[current_node][node]
        priority = len(priority_list) - priority_list.index(node) if node in priority_list else 0
        return distance * 0.7 + priority * 0.3  # Weighted combination

    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
