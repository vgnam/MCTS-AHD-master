def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    exploration_factor = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        inverse_global = 1 / (global_distance + 1e-10)

        # Dynamic weighting with exploration factor
        local_weight = 0.7 * (1 - exploration_factor)
        global_weight = 0.3 + 0.7 * exploration_factor

        # Add penalty for nodes with high historical selection frequency
        selection_penalty = 1 + (sum(1 for n in path_history if n == node) / len(path_history)) if path_history else 0

        return (local_weight * local_distance + global_weight * (0.6 * centrality + 0.4 * inverse_global)) * selection_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
