def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1.0 - visited_ratio
    exploitation_weight = visited_ratio

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        curiosity = (1.0 / (1.0 + avg_distance)) * exploration_weight
        stability = (1.0 / (1.0 + variance)) * exploitation_weight

        return (0.6 * distance_matrix[current_node][node] +
                0.3 * avg_distance +
                0.1 * curiosity +
                0.2 * stability)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
