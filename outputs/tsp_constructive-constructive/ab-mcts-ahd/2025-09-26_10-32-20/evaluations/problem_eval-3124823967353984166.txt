def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        # Dynamic weight based on remaining nodes' density
        density_weight = len(unvisited_nodes) / len(distance_matrix)
        immediate_cost = distance_matrix[current_node][node]
        future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Normalized score combining immediate and future costs
        score = (1 - density_weight) * immediate_cost + density_weight * future_cost
        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
