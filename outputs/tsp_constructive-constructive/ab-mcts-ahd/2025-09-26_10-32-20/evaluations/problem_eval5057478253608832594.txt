def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.7 if remaining_nodes > 5 else 0.3
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])
    penalty = 0.1 * sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    hybrid_score = lambda node: (dynamic_weight * distance_matrix[current_node][node] +
                                (1 - dynamic_weight) * distance_matrix[node][destination_node] -
                                penalty * (distance_matrix[current_node][node] > 0.5 * max(distance_matrix[current_node].values())))
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
