def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)

    def calculate_score(node):
        immediate_distance = distance_matrix[current_node][node]
        if not unvisited_nodes:
            return immediate_distance

        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        penalty = sum(distance_matrix[n][node] for n in unvisited_nodes) / remaining_nodes  # Penalty for high connectivity
        weight = 1.0 / (remaining_nodes ** 2)  # Non-linear weight adjustment

        return immediate_distance + weight * (avg_distance - penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
