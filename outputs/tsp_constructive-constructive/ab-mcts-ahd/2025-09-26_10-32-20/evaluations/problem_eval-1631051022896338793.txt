def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes

    # Dynamic weights with exploration bonus
    local_weight = 0.5 + 0.5 * (1 - remaining_ratio)
    global_weight = 0.5 * remaining_ratio
    exploration_bonus = 0.3 * (1 - remaining_ratio) ** 2  # Quadratic decay for exploration

    # Nearest-neighbor component
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Global components
    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def unvisited_avg_distance(node):
        return 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)

    # Exploration bonus term
    def exploration_term(node):
        return exploration_bonus * (1 - distance_matrix[current_node][node] / max(distance_matrix[current_node][n] for n in unvisited_nodes))

    # Hybrid score with dynamic weights
    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * (0.7 * centrality(node) + 0.3 * unvisited_avg_distance(node)) +
        exploration_term(node)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
