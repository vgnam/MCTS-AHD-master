def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        weight = 1.0 / (remaining_nodes ** 1.5)  # Steeper decay
        local_distance = distance_matrix[current_node][node]
        penalty = 0.3 * (local_distance > 1.5 * avg_distance)  # Penalize overly distant nodes
        return local_distance + weight * avg_distance + penalty
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
