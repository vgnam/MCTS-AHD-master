import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    decay_factor = math.exp(-remaining_ratio)

    weight_local = 0.6 * decay_factor + 0.4
    weight_global = 0.8 * decay_factor + 0.6

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        return (weight_local * local_distance) + (weight_global * (avg_distance / centrality))

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
