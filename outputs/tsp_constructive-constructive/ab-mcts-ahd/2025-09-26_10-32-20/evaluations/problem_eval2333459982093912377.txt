def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = (1 - visited_ratio) ** 2
    exploitation_weight = visited_ratio ** 1.5

    momentum_factor = 0.3 * (1 - visited_ratio) if len(unvisited_nodes) > 1 else 0

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        penalty = 0.3 * (variance ** 1.2) * (1 - visited_ratio)
        local_term = exploration_weight * distance_matrix[current_node][node]
        global_term = exploitation_weight * avg_distance

        momentum_term = 0
        if len(unvisited_nodes) > 1:
            last_node = unvisited_nodes[-1] if hasattr(unvisited_nodes, '__getitem__') else list(unvisited_nodes)[-1]
            momentum_term = momentum_factor * distance_matrix[last_node][node]

        return local_term + global_term + penalty - momentum_term

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
