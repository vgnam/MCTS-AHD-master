def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = min(0.9, max(0.1, 0.5 + 0.2 * (remaining_nodes / (remaining_nodes + 1))))

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        direction_cost = distance_matrix[current_node][destination_node] - distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        return dynamic_weight * (0.4 * local_cost + 0.6 * global_cost) + (1 - dynamic_weight) * (0.3 * direction_cost + 0.7 * centrality)

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
