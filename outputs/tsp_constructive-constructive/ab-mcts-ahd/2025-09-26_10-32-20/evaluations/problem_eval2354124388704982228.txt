import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weights using sigmoid function
    sigmoid = 1 / (1 + math.exp(-10 * (progress - 0.5)))
    local_weight = 0.6 + 0.4 * sigmoid
    global_weight = 0.4 - 0.4 * sigmoid

    # Penalty for revisiting destination early
    penalty = 0.2 if remaining_nodes > total_nodes // 2 else 0

    next_node = min(unvisited_nodes, key=lambda node:
                    (distance_matrix[current_node][node] * local_weight +
                     distance_matrix[node][destination_node] * global_weight +
                     penalty * distance_matrix[current_node][destination_node]))
    return next_node
