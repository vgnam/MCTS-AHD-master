def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.6 if remaining_nodes <= 2 else 0.4

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])

    penalty_factor = 1.0 + (0.1 * (remaining_nodes / len(unvisited_nodes))) if remaining_nodes > 0 else 1.0

    hybrid_score = lambda node: (dynamic_weight * distance_matrix[current_node][node] +
                                (1 - dynamic_weight) * distance_matrix[node][destination_node]) * penalty_factor

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
