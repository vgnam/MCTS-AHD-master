import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight using sigmoid function for smooth transition
    sigmoid_input = (remaining_nodes - total_nodes / 2) / (total_nodes / 4)
    local_weight = 1 / (1 + math.exp(-sigmoid_input))

    # Calculate hybrid score with frequency penalty
    visit_frequency = {node: 0 for node in distance_matrix}
    for node in unvisited_nodes:
        visit_frequency[node] += 1

    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        (1 - local_weight) * distance_matrix[node][destination_node] +
        0.1 * visit_frequency[node]  # Penalize frequently visited nodes
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
