import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    temperature = 1.0 - visited_ratio  # Decreases as more nodes are visited

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        # Proximity component (exploitation)
        proximity = distance_matrix[current_node][node]

        # Connectivity component (exploration)
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)

        # Temperature-adjusted randomness
        randomness = random.uniform(0, 1) * temperature

        # Dynamic weight balancing
        weight_proximity = 0.6 + 0.4 * visited_ratio
        weight_connectivity = 0.4 - 0.4 * visited_ratio

        return (weight_proximity * proximity) + (weight_connectivity * connectivity) + randomness

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
