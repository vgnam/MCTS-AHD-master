def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_coherence = 0.7 - 0.4 * (remaining_nodes / len(distance_matrix))
    weight_local = 0.3 + 0.2 * (remaining_nodes / len(distance_matrix))
    weight_centrality = 0.2 + 0.1 * (remaining_nodes / len(distance_matrix))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        coherence = np.var(distances_to_unvisited) if distances_to_unvisited else 0

        memory_penalty = 0.1 * (1 - (node not in unvisited_nodes[-3:])) if len(unvisited_nodes) > 3 else 0

        score = (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence) + memory_penalty
        return score

    if np.random.rand() < 0.1:
        next_node = np.random.choice(unvisited_nodes)
    else:
        next_node = min(unvisited_nodes, key=calculate_score)

    return next_node
