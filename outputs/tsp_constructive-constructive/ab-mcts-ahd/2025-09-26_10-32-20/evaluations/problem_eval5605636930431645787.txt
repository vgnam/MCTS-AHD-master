def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    temperature = remaining_ratio ** 2

    def local_score(node):
        return distance_matrix[current_node][node] + 0.3 * distance_matrix[node][destination_node]

    def global_score(node):
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        unvisited_avg = 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)
        return 0.7 * centrality + 0.3 * unvisited_avg

    def combined_score(node):
        local = local_score(node)
        global_val = global_score(node)
        return (1 - temperature) * local + temperature * global_val

    if temperature > 0.5:
        probabilities = [math.exp(-combined_score(node) / temperature) for node in unvisited_nodes]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=combined_score)

    return next_node
