def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid transition

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        detour_penalty = (local_dist + global_dist - distance_matrix[current_node][destination_node]) * random.uniform(0.8, 1.2)
        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < max(distance_matrix[node]) * 0.5)
        weighted_cost = (1 - exploration_weight) * local_dist + exploration_weight * global_dist + detour_penalty - centrality
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
