importance in the graph.

**Design idea:**
{The new algorithm combines nearest neighbor with dynamic weight adjustments, prioritizing proximity early in the tour and gradually incorporating centrality and adaptive weights to balance local and global optimization.}

**Implementation:**
```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes

    weight_local = 0.6 - 0.3 * (1 - remaining_ratio)
    weight_centrality = 0.4 + 0.3 * (1 - remaining_ratio)
    weight_adaptive = 0.2 + 0.1 * (1 - remaining_ratio)

    def calculate_score(node):
        direct_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        adaptive_factor = sum(distance_matrix[node][n] for n in unvisited_nodes) / (len(unvisited_nodes) + 1e-10)
        return (weight_local * direct_distance) + (weight_centrality * centrality) + (weight_adaptive * adaptive_factor)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
