import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weights using sigmoid transitions
    def sigmoid(x, k=10):
        return 1 / (1 + math.exp(-k * (x - 0.5)))

    phase = sigmoid(progress)
    weight_local = 0.5 + 0.5 * phase
    weight_centrality = 0.3 * (0.7 ** (1 - phase))
    weight_coherence = 0.2 + 0.8 * phase

    # Memory mechanism to penalize recently visited nodes
    memory_penalty = 0.1 * (1 - phase)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence) + (memory_penalty * (1 if node in unvisited_nodes[-3:] else 0))

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
