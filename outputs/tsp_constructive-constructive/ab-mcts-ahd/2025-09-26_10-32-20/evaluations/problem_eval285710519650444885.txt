def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.4 - 0.2 * progress
    weight_global = 0.3 + 0.5 * progress
    weight_centrality = 0.5 - 0.2 * progress
    weight_coherence = 0.2 + 0.3 * progress

    recently_visited = set()
    if total_nodes > 5:
        recently_visited = {node for node in range(total_nodes) if node not in unvisited_nodes and node != current_node}

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        recency_penalty = 0.1 if node in recently_visited else 0
        return (weight_local * local_distance +
                weight_global * global_distance +
                weight_centrality * centrality -
                weight_coherence * coherence +
                recency_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
