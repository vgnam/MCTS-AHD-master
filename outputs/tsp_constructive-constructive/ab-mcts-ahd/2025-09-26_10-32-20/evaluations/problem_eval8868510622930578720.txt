def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def adaptive_weight(x):
        return 1 / (1 + math.exp(-x))

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        normalized_local = local_dist / (distance_matrix[current_node][destination_node] + 1e-6)
        weight = adaptive_weight(normalized_local - 0.5)
        score = weight * local_dist + (1 - weight) * global_dist

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
