def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes

    # Calculate entropy-based scaling factor
    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
    max_row_sum = max(sum(row) for row in distance_matrix) if max(sum(row) for row in distance_matrix) != 0 else 1
    entropy_factor = 1 - (avg_distance / max_row_sum)

    # Dynamic weight adjustment
    weight_local = 0.5 * (1 - remaining_ratio) + 0.2 * entropy_factor
    weight_centrality = 0.3 * (1 - remaining_ratio) + 0.2 * (1 - entropy_factor)
    weight_coherence = 0.4 * (1 - remaining_ratio) + 0.3 * entropy_factor

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)

        local_term = weight_local * (local_distance / (1 + entropy_factor))
        centrality_term = weight_centrality * (centrality * (1 + entropy_factor))
        coherence_term = weight_coherence * (coherence / (1 + entropy_factor))

        return local_term + centrality_term - coherence_term

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
