def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    visited_ratio = (total_nodes - remaining_nodes) / total_nodes

    # Entropy calculation
    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0
    max_total_distance = max(sum(row) for row in distance_matrix)
    entropy_factor = 1 - (avg_distance / max_total_distance) if max_total_distance != 0 else 1

    # Dynamic weight adjustment
    weight_local = 0.4 * (1 - entropy_factor) + 0.3 * (1 - visited_ratio)
    weight_global = 0.3 * entropy_factor + 0.5 * visited_ratio

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)

        # Variance penalty
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance_node = sum(distances_to_unvisited) / len(unvisited_nodes) if unvisited_nodes else 0
        variance = sum((d - avg_distance_node) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes) if unvisited_nodes else 0
        penalty = 0.3 * variance

        return (weight_local * local_distance +
                weight_global * (0.6 * centrality + 0.4 * coherence) +
                penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
