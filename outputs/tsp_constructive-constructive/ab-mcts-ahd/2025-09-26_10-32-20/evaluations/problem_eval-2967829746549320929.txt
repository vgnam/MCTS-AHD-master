def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    closest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    farthest_distance = distance_matrix[current_node][farthest_node]
    closest_distance = distance_matrix[current_node][closest_node]

    if farthest_distance == closest_distance:
        return farthest_node

    prob_farthest = np.exp(-(farthest_distance - closest_distance) / farthest_distance)
    if np.random.rand() < prob_farthest:
        return farthest_node
    else:
        return next_node
