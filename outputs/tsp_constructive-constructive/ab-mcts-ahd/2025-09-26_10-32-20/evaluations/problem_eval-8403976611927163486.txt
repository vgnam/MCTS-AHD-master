def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    base_weight_local = 0.5
    base_weight_centrality = 0.3
    base_weight_coherence = 0.2

    dynamic_scaling = 1.0 + 0.5 * (0.5 - abs(progress - 0.5)) ** 2

    weight_local = base_weight_local * (0.8 ** progress) * dynamic_scaling
    weight_centrality = base_weight_centrality * (0.7 ** progress) * dynamic_scaling
    weight_coherence = base_weight_coherence * (0.6 ** progress) * dynamic_scaling

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        exploration_bonus = 1.0 + 0.1 * (1 - progress) if node in unvisited_nodes else 0.0

        score = (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)
        return score * exploration_bonus

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
