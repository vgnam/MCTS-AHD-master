def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.9 ** remaining_nodes  # Exponential decay for weight adjustment
    weight = max(0.3, decay_factor * 0.8)  # Apply decay to initial weight
    # Add randomness to escape local optima
    if remaining_nodes > 2:
        exploration_factor = 0.1 * (1 - weight)
        next_node = min(
            unvisited_nodes,
            key=lambda node: weight * distance_matrix[current_node][node] +
                             (1 - weight) * distance_matrix[node][destination_node] +
                             exploration_factor * (distance_matrix[current_node][node] + distance_matrix[node][destination_node])
        )
    else:
        next_node = min(
            unvisited_nodes,
            key=lambda node: distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        )
    return next_node
