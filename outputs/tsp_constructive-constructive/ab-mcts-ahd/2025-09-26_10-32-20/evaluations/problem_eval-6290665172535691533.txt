def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    remaining_ratio = remaining_nodes / total_nodes

    weight_local = 0.6 * (1 - remaining_ratio)
    weight_centrality = 0.3 + 0.2 * (1 - remaining_ratio)
    weight_connectivity = 0.1 + 0.4 * (1 - remaining_ratio)

    def calculate_score(node):
        direct_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        connectivity_penalty = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        return (weight_local * direct_distance) + (weight_centrality * centrality) + (weight_connectivity * connectivity_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
