def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 to include current node
    progress = 1 - (remaining_nodes / total_nodes)
    weight_local = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid transition
    weight_global = 1 - weight_local

    # Penalty for nodes too close to current node
    penalty = lambda node: max(0, 1 - (distance_matrix[current_node][node] / max(distance_matrix[current_node])))

    # Hybrid score with dynamic weights and penalty
    hybrid_score = lambda node: (weight_local * distance_matrix[current_node][node] +
                                weight_global * distance_matrix[node][destination_node]) * (1 + penalty(node))

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
