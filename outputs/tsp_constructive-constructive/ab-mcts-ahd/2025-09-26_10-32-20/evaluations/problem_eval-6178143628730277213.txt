def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weight calculation with novel mechanisms
    weight_local = 0.5 * (1 + math.tanh(5 * (0.5 - progress)))
    weight_centrality = 0.3 * math.exp(-5 * progress)
    weight_coherence = 0.2 * (1 - (progress - 0.5)**2)

    # Precompute node centralities for efficiency
    node_centralities = {}
    for node in range(total_nodes):
        node_centralities[node] = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = node_centralities[node]
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
