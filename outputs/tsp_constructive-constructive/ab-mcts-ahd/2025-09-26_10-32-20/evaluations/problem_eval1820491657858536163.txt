def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    local_weight = 0.6 * (1 - remaining_ratio)
    global_weight = 0.4 + 0.6 * remaining_ratio

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def continuity_penalty(node):
        if not distance_matrix[current_node]:
            return 0
        avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
        return (distance_matrix[current_node][node] - avg_distance) ** 2

    hybrid_score = lambda node: (
        local_weight * (distance_matrix[current_node][node] + 0.5 * continuity_penalty(node)) +
        global_weight * (centrality(node) + 0.3 * (1 - remaining_ratio))
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
