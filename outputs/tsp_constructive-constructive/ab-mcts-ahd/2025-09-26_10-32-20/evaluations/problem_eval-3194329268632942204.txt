def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1.0 - visited_ratio
    exploitation_weight = visited_ratio * 0.5
    novelty_weight = visited_ratio * 0.3

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        distances_to_all = [distance_matrix[node][n] for n in range(len(distance_matrix))]
        global_centrality = sum(distances_to_all) / len(distance_matrix)

        if unvisited_nodes:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
            avg_unvisited_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
            variance = sum((d - avg_unvisited_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)
            novelty_factor = variance * novelty_weight
        else:
            novelty_factor = 0

        return (exploration_weight * local_distance +
                exploitation_weight * global_centrality -
                novelty_factor)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
