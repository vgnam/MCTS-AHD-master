def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    remaining_ratio = remaining_nodes / total_nodes

    # Adaptive weight scaling with exponential decay for local proximity
    weight_local = 0.8 * (0.5 ** (1 - remaining_ratio))
    weight_centrality = 0.3 * (1 - (remaining_ratio ** 2))
    weight_progress = 0.2 * (1 - (remaining_ratio ** 3))

    def calculate_score(node):
        # Harmonic mean-based centrality
        direct_distance = distance_matrix[current_node][node]
        node_degrees = [sum(distance_matrix[node][n] for n in range(total_nodes)) for n in range(total_nodes)]
        harmonic_centrality = total_nodes / sum(1/(d + 1e-10) for d in node_degrees)

        # Progress-dependent penalty with transition
        progress = (total_nodes - remaining_nodes) / total_nodes
        progress_penalty = progress ** 2 if progress < 0.7 else progress

        # Node diversity factor
        diversity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 2 * direct_distance) / len(unvisited_nodes)

        return (weight_local * direct_distance) + (weight_centrality * harmonic_centrality) - (weight_progress * progress_penalty) - (0.1 * diversity)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
