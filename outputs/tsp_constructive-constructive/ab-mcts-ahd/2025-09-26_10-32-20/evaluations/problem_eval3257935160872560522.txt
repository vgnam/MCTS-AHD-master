def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / (remaining_nodes + 1)) if remaining_nodes else 0
    weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])

    hybrid_score = lambda node: weight * distance_matrix[current_node][node] + (1 - weight) * distance_matrix[node][destination_node]

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
