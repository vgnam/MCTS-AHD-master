importance metric that combines distance, centrality, and a novel "path coherence" factor to encourage smooth transitions while penalizing revisits, with weights that adapt based on both remaining nodes and path history.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    local_weight = 0.5 + 0.5 * (1 - remaining_ratio)
    global_weight = 1 - local_weight
    revisit_penalty = 0.15 * (1 - remaining_ratio)

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def path_coherence(node):
        if current_node == -1:
            return 1.0
        avg_distance = sum(distance_matrix[current_node][n] for n in range(total_nodes)) / total_nodes
        return 1 / (1 + abs(distance_matrix[current_node][node] - avg_distance) / (avg_distance + 1e-10))

    def revisit_count(node):
        return sum(1 for n in range(total_nodes) if distance_matrix[current_node][n] == distance_matrix[node][n])

    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * (0.7 * centrality(node) + 0.3 * path_coherence(node)) -
        revisit_penalty * revisit_count(node)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
