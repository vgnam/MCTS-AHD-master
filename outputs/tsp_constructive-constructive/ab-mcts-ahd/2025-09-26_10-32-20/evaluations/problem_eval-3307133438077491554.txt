def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    def calculate_score(node):
        immediate_distance = distance_matrix[current_node][node]

        if not unvisited_nodes:
            return immediate_distance

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / remaining_nodes
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / remaining_nodes

        # Dynamic weight using sigmoid function for smooth transition
        weight = 1 / (1 + math.exp(0.5 * (remaining_nodes - 10)))

        # Penalize high variance to avoid long-term inefficiencies
        penalty = 0.1 * variance
        return immediate_distance + weight * avg_distance + penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
