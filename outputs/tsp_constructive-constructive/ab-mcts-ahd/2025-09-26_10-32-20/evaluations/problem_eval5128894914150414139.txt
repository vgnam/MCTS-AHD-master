importance score based on centrality and proximity, and uses a decaying exploration factor to balance exploitation and exploration over time. It also penalizes nodes that disrupt the path's global efficiency with a more aggressive threshold scaling.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    exploration_factor = 0.7 * (remaining_nodes / total_nodes) ** 2 + 0.3

    def importance_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        return 0.5 * local_cost + 0.3 * global_cost + 0.2 * centrality

    def selection_probability(node):
        score = importance_score(node)
        threshold = 1.3 * distance_matrix[current_node][destination_node]
        penalty = max(0, (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) - threshold) ** 2
        return (1 - exploration_factor) * (1 / (1 + score)) + exploration_factor * (1 / (1 + penalty))

    probabilities = [selection_probability(node) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]

    return next_node
