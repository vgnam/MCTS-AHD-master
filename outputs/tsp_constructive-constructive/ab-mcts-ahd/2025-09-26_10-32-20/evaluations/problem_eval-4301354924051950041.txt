def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    def quadratic_decay(x):
        return 1 - (x ** 2)

    weight_local = 0.8 * math.exp(-2 * progress)
    weight_centrality = 0.3 * sigmoid(4 * progress - 2)
    weight_coherence = 0.2 * quadratic_decay(2 * progress - 1)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        coherence = sum(remaining_distances) / len(remaining_distances) if remaining_distances else 0
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
