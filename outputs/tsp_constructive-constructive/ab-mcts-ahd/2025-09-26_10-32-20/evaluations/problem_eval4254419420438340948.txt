importance of destination proximity and current-node distance based on the remaining path length, using a novel scoring function that combines linear and exponential components to balance exploration and goal-directedness more effectively.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_dest = 0.7 + 0.2 * (1 - remaining_nodes / len(distance_matrix))
    weight_current = 0.3 - 0.2 * (1 - remaining_nodes / len(distance_matrix))

    next_node = max(unvisited_nodes, key=lambda node: - (weight_dest * distance_matrix[node][destination_node] + weight_current * distance_matrix[current_node][node] + 0.1 * (distance_matrix[node][destination_node] ** 0.5)))
    return next_node
