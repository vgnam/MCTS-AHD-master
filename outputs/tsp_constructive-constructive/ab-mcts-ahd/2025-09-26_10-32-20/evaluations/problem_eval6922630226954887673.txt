def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Phase-based weight adjustment
    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    phase = 1 - remaining_ratio

    if phase < 0.5:  # Early phase: prioritize local distance
        local_weight = 0.8
        global_weight = 0.2
    else:  # Late phase: prioritize global centrality
        local_weight = 0.3
        global_weight = 0.7

    # Local component: nearest neighbor
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Global components
    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def unvisited_avg_distance(node):
        return 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)

    # Hybrid score with phase-dependent weights
    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * (0.7 * centrality(node) + 0.3 * unvisited_avg_distance(node))
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
