def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_local = 0.5 + 0.1 * (remaining_nodes / len(distance_matrix))
    weight_centrality = 0.3 - 0.1 * (remaining_nodes / len(distance_matrix))
    weight_coherence = 0.4 - 0.2 * (remaining_nodes / len(distance_matrix))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        nearest_neighbor = min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])
        farthest_insertion = max(unvisited_nodes, key=lambda n: distance_matrix[n][destination_node])
        hybrid_score = 0.6 * (node == nearest_neighbor) + 0.4 * (node == farthest_insertion)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence) + hybrid_score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
