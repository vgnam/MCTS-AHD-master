importance later with reduced randomness.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes

    weight_local = 0.7 - 0.4 * remaining_ratio
    weight_centrality = 0.2 + 0.3 * remaining_ratio
    weight_coherence = 0.1 + 0.4 * remaining_ratio

    temperature = 1.0 - 0.8 * (1 - remaining_ratio)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    scores = {node: calculate_score(node) for node in unvisited_nodes}
    probabilities = {node: np.exp(-scores[node] / temperature) for node in scores}
    total_prob = sum(probabilities.values())
    probabilities = {node: prob / total_prob for node, prob in probabilities.items()}

    next_node = np.random.choice(list(probabilities.keys()), p=list(probabilities.values()))
    return next_node
