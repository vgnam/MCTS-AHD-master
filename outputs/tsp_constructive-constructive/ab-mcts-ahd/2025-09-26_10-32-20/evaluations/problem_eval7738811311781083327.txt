def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 0.6 * (1 - visited_ratio) ** 2
    exploitation_weight = 0.4 * visited_ratio

    def calculate_connectivity_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances) / len(unvisited_nodes)

        connectivity_score = (exploration_weight * (1 / (1 + avg_distance))) + (exploitation_weight * (1 / (1 + variance)))
        distance_penalty = 0.2 * distance_matrix[current_node][node]

        return connectivity_score - distance_penalty

    next_node = max(unvisited_nodes, key=calculate_connectivity_score)
    return next_node
