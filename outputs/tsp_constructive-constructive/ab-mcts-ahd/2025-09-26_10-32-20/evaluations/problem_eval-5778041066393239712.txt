import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        remaining_nodes = len(unvisited_nodes)

        # Refined logarithmic weight factor
        weight_factor = 1 - math.log(remaining_nodes + 1) / (math.log(remaining_nodes + 1) + 1)

        # Penalty for revisiting nodes (optional)
        penalty = 0.1 * (1 if node in unvisited_nodes else 0)

        return (1 - weight_factor) * local_distance + weight_factor * global_distance + penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
