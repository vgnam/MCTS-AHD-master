def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        exploration_factor = 0.5 * (1 - remaining_nodes / (remaining_nodes + 1))
        weight = (1.0 / (remaining_nodes + 1)) * (1 + exploration_factor)
        penalty = 0.1 * (1 / (distance_matrix[current_node][node] + 1e-6)) if node in unvisited_nodes else 0
        return distance_matrix[current_node][node] + weight * avg_distance - penalty
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
