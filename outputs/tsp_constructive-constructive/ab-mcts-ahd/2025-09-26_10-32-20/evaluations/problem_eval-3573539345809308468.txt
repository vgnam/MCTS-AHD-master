def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        inverse_global = 1 / (global_distance + 1e-10)
        return local_distance + 0.3 * global_distance + 0.7 * centrality + 0.2 * inverse_global
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
