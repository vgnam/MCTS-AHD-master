def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    quadratic_factor = remaining_ratio ** 2
    local_weight = 0.4 + 0.2 * quadratic_factor
    global_weight = 1 - local_weight

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    def improved_centrality(node):
        return sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes))

    def improved_unvisited_avg_distance(node):
        return sum(1 / (distance_matrix[node][n] + 1e-10) for n in unvisited_nodes) / len(unvisited_nodes)

    hybrid_score = lambda node: (
        local_weight * (0.7 * distance_matrix[current_node][node] + 0.3 * distance_matrix[node][destination_node]) +
        global_weight * (0.6 * improved_centrality(node) + 0.4 * improved_unvisited_avg_distance(node))
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
