def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0

    dynamic_weight = 0.6 * (1 - progress_ratio) + 0.4 * progress_ratio

    max_allowed_detour = 1.5 * distance_matrix[current_node][destination_node]

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        detour_penalty = max(0, (local_cost + global_cost - max_allowed_detour) / max_allowed_detour)
        return dynamic_weight * local_cost + (1 - dynamic_weight) * global_cost + detour_penalty

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
