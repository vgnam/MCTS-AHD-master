def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Adaptive weight normalization
    weight_coherence = 0.5 + 0.4 * (1 - remaining_nodes / total_nodes)
    weight_local = 0.3 + 0.4 * (remaining_nodes / total_nodes)
    weight_centrality = 0.2 + 0.3 * (remaining_nodes / total_nodes)

    # Dynamic coherence penalty
    coherence_penalty = (total_nodes - remaining_nodes) / total_nodes

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        # Weighted sum with coherence penalty
        score = (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence * coherence_penalty)
        return score

    # Probabilistic selection based on softmax
    scores = [calculate_score(node) for node in unvisited_nodes]
    exp_scores = [math.exp(-s) for s in scores]
    sum_exp = sum(exp_scores)
    probabilities = [e / sum_exp for e in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
