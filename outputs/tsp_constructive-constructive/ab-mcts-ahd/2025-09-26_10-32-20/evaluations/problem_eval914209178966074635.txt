def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + math.exp(-(remaining_nodes - len(distance_matrix)/2) / 5.0))  # Sigmoid transition

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        inverse_avg = 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)
        global_dist = distance_matrix[node][destination_node]

        # Dynamic weights based on exploration factor
        local_weight = 0.6 + 0.4 * (1 - exploration_factor)
        centrality_weight = 0.2 * exploration_factor
        inverse_avg_weight = 0.2 * (1 - exploration_factor)
        global_weight = 0.2 + 0.8 * exploration_factor

        weighted_cost = (local_weight * local_dist +
                         centrality_weight * centrality +
                         inverse_avg_weight * inverse_avg +
                         global_weight * global_dist)
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
