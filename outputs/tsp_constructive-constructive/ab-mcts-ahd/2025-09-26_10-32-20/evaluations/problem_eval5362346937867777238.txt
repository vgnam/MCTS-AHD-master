importance score based on both local and global costs, adjusted by a decaying exploration factor, and penalizes nodes that disrupt the path's efficiency beyond a dynamic threshold.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    exploration_factor = 0.8 ** (total_nodes - remaining_nodes)  # Decays exponentially

    def node_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        dynamic_threshold = 1.1 * distance_matrix[current_node][destination_node] * (1 + 0.5 * (remaining_nodes / total_nodes))
        penalty = max(0, (local_cost + global_cost) - dynamic_threshold) ** 2
        return (exploration_factor * local_cost + (1 - exploration_factor) * global_cost) * (1 + penalty)

    scores = [node_score(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in scores]  # Inverted for selection

    import random
    next_node = random.choices(unvisited_nodes, weights=normalized_scores, k=1)[0]
    return next_node
