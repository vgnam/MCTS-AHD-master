def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 to include the current node

    # Dynamic weight adjustment: prioritize global optimization as nodes are visited
    local_weight = 0.3 * (remaining_nodes / total_nodes)
    global_weight = 0.7 * (1 - remaining_nodes / total_nodes)

    # Calculate hybrid score with dynamic weights
    hybrid_score = lambda node: local_weight * distance_matrix[current_node][node] + global_weight * distance_matrix[node][destination_node]

    # Additional heuristic: consider the average distance to unvisited nodes for global optimization
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    adjusted_score = lambda node: hybrid_score(node) + 0.1 * abs(distance_matrix[node][destination_node] - avg_distance)

    next_node = min(unvisited_nodes, key=adjusted_score)
    return next_node
