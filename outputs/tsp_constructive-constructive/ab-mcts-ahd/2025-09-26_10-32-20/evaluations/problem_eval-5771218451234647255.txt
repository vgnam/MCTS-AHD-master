importance" factor based on historical visit patterns, while maintaining a clear separation of weight calculation, score computation, and node selection for improved optimization.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    progress_ratio = 1 - len(unvisited_nodes) / total_nodes
    local_weight = 0.7 * (1 - progress_ratio)
    global_weight = 0.3 * progress_ratio
    importance_weight = 0.2 * progress_ratio

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        inverse_global = 1 / (global_distance + 1e-10)
        node_importance = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes)) / total_nodes

        return (local_weight * local_distance +
                global_weight * (0.6 * centrality + 0.4 * inverse_global) +
                importance_weight * node_importance)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
