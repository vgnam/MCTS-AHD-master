def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.6 - 0.2 * progress_factor
    weight_centrality = 0.3 + 0.1 * progress_factor
    weight_global = 0.1 - 0.05 * progress_factor

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        inverse_global = 1 / (global_distance + 1e-10)
        return (weight_local * local_distance) + (weight_centrality * centrality) + (weight_global * inverse_global)

    candidates = sorted(unvisited_nodes, key=calculate_score)[:3]
    if len(candidates) > 1:
        next_node = candidates[np.random.choice(len(candidates), p=[0.6, 0.3, 0.1])]
    else:
        next_node = candidates[0]
    return next_node
