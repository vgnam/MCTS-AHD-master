def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 1 / (1 + remaining_nodes)  # Decays as nodes are visited
    local_weight = time_decay
    global_weight = 1 - time_decay
    centrality_weight = 0.3 * (1 - time_decay)  # Emphasizes centrality in later stages

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes)  # Higher centrality means node is close to many others

        return (local_weight * distance_matrix[current_node][node] +
                global_weight * avg_distance -
                centrality_weight * centrality)  # Penalize nodes that are too central (potential detours)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
