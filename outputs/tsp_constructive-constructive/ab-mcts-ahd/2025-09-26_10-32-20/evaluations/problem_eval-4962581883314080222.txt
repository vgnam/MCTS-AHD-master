import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    weight_local = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))
    weight_global = 1 - weight_local

    # Nearest neighbor component
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Global components: centrality and coverage
    centrality = lambda node: 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
    coverage = lambda node: sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)

    # Penalty for recently visited nodes
    penalty = lambda node: sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(len(distance_matrix)) if n in unvisited_nodes)

    # Hybrid score with dynamic weights and penalty
    hybrid_score = lambda node: (
        weight_local * distance_matrix[current_node][node] +
        weight_global * (0.6 * centrality(node) + 0.4 * coverage(node)) -
        0.2 * penalty(node)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
