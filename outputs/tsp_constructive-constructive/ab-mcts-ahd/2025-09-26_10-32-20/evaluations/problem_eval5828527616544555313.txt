importance), and a dynamic penalty for nodes with high variance in distances to unvisited nodes, while also incorporating a momentum term to favor recently visited nodes' neighbors.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    local_weight = 1.0 - visited_ratio
    global_weight = visited_ratio

    # Compute PageRank-like centrality for each node
    def compute_centrality():
        centrality = {node: 1.0 / total_nodes for node in range(total_nodes)}
        damping = 0.85
        for _ in range(10):  # Iterations for convergence
            new_centrality = {node: (1 - damping) / total_nodes for node in range(total_nodes)}
            for node in range(total_nodes):
                for neighbor in range(total_nodes):
                    if neighbor != node:
                        new_centrality[neighbor] += damping * centrality[node] / sum(1 for n in range(total_nodes) if n != node)
            centrality = new_centrality
        return centrality

    centrality = compute_centrality()

    # Track recently visited nodes (simplified momentum)
    recent_nodes = set()
    if hasattr(select_next_node, 'last_node'):
        recent_nodes.add(select_next_node.last_node)
    select_next_node.last_node = current_node

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)
        penalty = 0.3 * variance

        # Momentum term: favor neighbors of recently visited nodes
        momentum_bonus = 0.5 if node in recent_nodes else 0.0

        return (local_weight * distance_matrix[current_node][node] +
                0.4 * global_weight * avg_distance +
                0.2 * centrality[node] +
                penalty -
                momentum_bonus)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
