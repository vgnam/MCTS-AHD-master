def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        remaining_nodes = len(unvisited_nodes)
        weight_factor = 1 - (1 / (1 + remaining_nodes))  # Dynamic weight based on unvisited nodes
        return (1 - weight_factor) * local_distance + weight_factor * global_distance

    scores = [calculate_score(node) for node in unvisited_nodes]
    temperature = 1.0 / (1 + len(unvisited_nodes))  # Dynamic temperature decay
    probabilities = [math.exp(-score / temperature) for score in scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
