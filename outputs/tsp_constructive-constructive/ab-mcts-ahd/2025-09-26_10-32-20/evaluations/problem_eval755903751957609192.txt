def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 0
    local_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))
    global_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))
    penalty = lambda node: 0.1 * (1 if node == current_node else 0)
    hybrid_score = lambda node: (local_weight * distance_matrix[current_node][node] +
                                 global_weight * distance_matrix[node][destination_node] +
                                 penalty(node))
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
