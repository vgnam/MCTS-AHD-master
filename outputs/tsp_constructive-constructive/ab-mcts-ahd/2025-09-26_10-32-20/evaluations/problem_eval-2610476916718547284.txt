def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    dynamic_weight = 0.6 * remaining_ratio + 0.4 * (1 - remaining_ratio)

    def calculate_weight(node):
        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
        revisit_penalty = 1.5 if node in unvisited_nodes and node != destination_node else 1.0
        return (dynamic_weight * distance_matrix[current_node][node] +
                (1 - dynamic_weight) * avg_distance) * revisit_penalty

    next_node = min(unvisited_nodes, key=calculate_weight)
    return next_node
