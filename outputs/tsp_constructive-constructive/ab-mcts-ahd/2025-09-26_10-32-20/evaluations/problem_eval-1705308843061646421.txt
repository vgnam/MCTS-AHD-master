def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 1.0 / (remaining_nodes + 1)  # Faster decay for early stages

    def path_potential(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        remaining_influence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)
        stochastic_factor = (local_dist + global_dist) * (0.5 + 0.5 * time_decay)  # Randomness decays with time
        return (1 - time_decay) * local_dist + time_decay * global_dist + remaining_influence + stochastic_factor

    next_node = min(unvisited_nodes, key=path_potential)
    return next_node
