def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    weight_local = 0.6 - 0.3 * (1 - remaining_ratio)
    weight_centrality = 0.4 + 0.3 * (1 - remaining_ratio)
    weight_penalty = 0.1 * (1 - remaining_ratio)

    # Track selection frequency (simplified for example)
    selection_counts = {node: 1 for node in range(total_nodes)}
    if hasattr(select_next_node, 'selection_counts'):
        selection_counts = select_next_node.selection_counts
    else:
        select_next_node.selection_counts = selection_counts

    def calculate_score(node):
        direct_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        visibility = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / (len(unvisited_nodes) + 1e-10)
        penalty = selection_counts[node] / (sum(selection_counts.values()) + 1e-10)
        return (weight_local * direct_distance) + (weight_centrality * centrality) + (weight_penalty * penalty) + (0.05 * visibility)

    next_node = min(unvisited_nodes, key=calculate_score)
    select_next_node.selection_counts[next_node] += 1
    return next_node
