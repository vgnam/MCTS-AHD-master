important later, and coherence follows a bell curve.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    local_weight = 0.7 - 0.5 * progress
    centrality_weight = 0.1 + 0.4 * progress
    coherence_weight = 0.2 + 0.4 * (0.5 - abs(progress - 0.5))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (local_weight * local_distance) + (centrality_weight * centrality) - (coherence_weight * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
