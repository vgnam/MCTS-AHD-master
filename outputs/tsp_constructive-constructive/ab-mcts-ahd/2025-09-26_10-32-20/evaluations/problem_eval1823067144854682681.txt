def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    # Calculate entropy and path momentum
    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes if unvisited_nodes else 0
    max_total_distance = max(sum(row) for row in distance_matrix) if distance_matrix else 0
    entropy_factor = 1 - (avg_distance / max_total_distance) if max_total_distance != 0 else 1

    # Path momentum calculation
    if total_nodes > 1:
        prev_node = current_node - 1 if current_node > 0 else total_nodes - 1
        path_momentum = -distance_matrix[prev_node][current_node] / max_total_distance if max_total_distance != 0 else 0
    else:
        path_momentum = 0

    # Dynamic weight adjustment
    weight_distance = 0.4 * (1 - entropy_factor) + 0.2 * (remaining_nodes / total_nodes) + 0.3 * path_momentum
    weight_centrality = 0.3 * (1 - entropy_factor) + 0.1 * (remaining_nodes / total_nodes) + 0.4 * path_momentum
    weight_novelty = 0.3 * entropy_factor + 0.5 * (remaining_nodes / total_nodes) + 0.2 * path_momentum

    def calculate_score(node):
        distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

        # Novelty calculation: rewards unique connectivity patterns
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_distance * 1.2)
        novelty = connectivity / (remaining_nodes if remaining_nodes > 0 else 1)

        # Adaptive scaling with momentum
        distance_term = weight_distance * (distance / (1 + entropy_factor)) * (1 - 0.4 * path_momentum)
        centrality_term = weight_centrality * (centrality * (1 + entropy_factor)) * (1 + 0.5 * path_momentum)
        novelty_term = weight_novelty * (novelty * (1 + entropy_factor)) * (1 + 0.3 * path_momentum)

        return distance_term + centrality_term + novelty_term * (1 + 0.6 * entropy_factor)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
