def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    exploration_factor = min(1.0, remaining_nodes / (total_nodes / 2))

    weight_local = 0.6 - 0.3 * (1 - remaining_ratio) + 0.2 * exploration_factor
    weight_centrality = 0.3 + 0.2 * (1 - remaining_ratio) + 0.3 * exploration_factor
    weight_coherence = 0.1 + 0.4 * (1 - remaining_ratio) - 0.1 * exploration_factor

    def calculate_score(node):
        direct_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        unvisited_connections = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        penalty = 0.1 if node in unvisited_nodes else 0.0

        score = (weight_local * direct_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)
        score += 0.05 * unvisited_connections - penalty
        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
