def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    weight_local = max(0.5, 0.7 - (0.2 * (remaining_nodes / len(distance_matrix))))
    weight_global = 1 - weight_local
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_insertion = max(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])
    global_measure = lambda node: 0.5 * (1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)) + 0.5 * (1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10))
    hybrid_score = lambda node: weight_local * (0.6 * distance_matrix[current_node][node] + 0.4 * distance_matrix[node][destination_node]) + weight_global * global_measure(node)
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
