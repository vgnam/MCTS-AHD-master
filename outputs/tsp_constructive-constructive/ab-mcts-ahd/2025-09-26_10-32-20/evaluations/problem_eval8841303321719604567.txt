importance later (lower weights), and incorporate an exploration bonus that rewards nodes with greater distance from the current node, with the exploration factor increasing as the algorithm progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)
    exploration_factor = 0.1 + 0.9 * progress

    weight_local = 0.5 - 0.2 * progress
    weight_centrality = 0.4 + 0.2 * progress
    weight_coherence = 0.1 + 0.2 * abs(progress - 0.5)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        exploration_bonus = (1 - distance_matrix[node][current_node] / max(max(row) for row in distance_matrix)) * exploration_factor
        return (weight_local * local_distance) - (weight_centrality * centrality) + (weight_coherence * coherence) + (0.5 * exploration_bonus)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
