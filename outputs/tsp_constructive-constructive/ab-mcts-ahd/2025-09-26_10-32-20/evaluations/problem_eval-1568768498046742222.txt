def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    def calculate_centrality(node):
        return sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes

    avg_centrality = sum(calculate_centrality(n) for n in unvisited_nodes) / len(unvisited_nodes)

    weight_local = 0.2 + 0.5 * (progress ** 2)
    weight_centrality = 0.7 - 0.4 * (progress ** 1.5) * (calculate_centrality(current_node) / avg_centrality)
    weight_novelty = 0.3 * (1 - progress) * (1 - progress)
    weight_exploration = 0.3 + 0.4 * (1 - progress)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = calculate_centrality(node)
        novelty = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        exploration = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        return (weight_local * local_distance) - (weight_centrality * centrality) + (weight_novelty * novelty) - (weight_exploration * exploration)

    scores = [calculate_score(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(s - min_score) / (max_score - min_score + 1e-6) for s in scores]

    if sum(normalized_scores) > 0:
        next_node = random.choices(unvisited_nodes, weights=normalized_scores, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    return next_node
