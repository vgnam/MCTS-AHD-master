def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    phase_factor = min(1.0, remaining_nodes / (len(distance_matrix) * 0.5))  # Phase transition based on remaining nodes

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        global_dist = distance_matrix[node][destination_node]
        path_diversity = sum(distance_matrix[node][n] for n in unvisited_nodes) / (len(unvisited_nodes) + 1e-10)

        # Dynamic weight adjustment
        local_weight = 0.6 * phase_factor + 0.1
        centrality_weight = 0.2 * phase_factor + 0.1
        global_weight = 0.3 * (1 - phase_factor) + 0.2
        diversity_weight = 0.1 * (1 - phase_factor)

        weighted_cost = (local_weight * local_dist +
                         centrality_weight * centrality +
                         global_weight * global_dist +
                         diversity_weight * path_diversity)
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
