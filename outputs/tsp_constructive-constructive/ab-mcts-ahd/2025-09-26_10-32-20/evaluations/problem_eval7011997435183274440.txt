def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    local_weight = 1 / (1 + remaining_nodes)
    global_weight = 1 - local_weight
    proximity_factor = 0.5 * (1 + (remaining_nodes / (remaining_nodes + 1)))

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        local_score = distance_matrix[current_node][node]
        global_score = avg_distance * proximity_factor
        return (local_weight * local_score) + (global_weight * global_score)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
