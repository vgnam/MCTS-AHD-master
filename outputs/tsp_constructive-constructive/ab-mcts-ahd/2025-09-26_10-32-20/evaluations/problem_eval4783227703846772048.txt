import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    # Calculate node degrees (number of connections within unvisited nodes)
    node_degrees = {node: sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0 and n != node)
                    for node in unvisited_nodes}

    # Historical path entropy (simplified as inverse of average distance to unvisited nodes)
    historical_entropy = {node: (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) ** -1
                          for node in unvisited_nodes}

    # Adaptive weights with degree and entropy influence
    weight_local = 0.3 + 0.4 * (progress ** 2) * (1 + 0.1 * max(node_degrees.values()) if node_degrees else 1)
    weight_centrality = 0.6 - 0.3 * (progress ** 1.5) * (1 - 0.2 * historical_entropy.get(current_node, 1))
    weight_coherence = 0.4 - 0.2 * abs(progress - 0.5) * (1 + 0.3 * historical_entropy.get(current_node, 1))
    weight_exploration = 0.2 + 0.3 * (1 - progress) * (1 - 0.1 * node_degrees.get(current_node, 0))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        exploration = (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) * (1 - 0.2 * node_degrees.get(node, 0))
        return (weight_local * local_distance) - (weight_centrality * centrality) + (weight_coherence * coherence) - (weight_exploration * exploration)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
