def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    local_weight = 0.7 + 0.3 * (1 - remaining_ratio)
    global_weight = 1 - local_weight

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def unvisited_avg_distance(node):
        return 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)

    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    closest_to_farthest = min(unvisited_nodes, key=lambda node: distance_matrix[farthest_node][node])

    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * (0.6 * centrality(node) + 0.4 * unvisited_avg_distance(node))
    )

    if hybrid_score(closest_to_farthest) < hybrid_score(farthest_node):
        next_node = closest_to_farthest
    else:
        next_node = farthest_node
    return next_node
