def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weight adjustments with momentum
    momentum = 0.9 * (0.9 ** progress)
    weight_local = 0.5 * (0.8 ** progress)
    weight_centrality = 0.3 + 0.2 * (0.7 ** progress) * (1 - abs(progress - 0.5))
    weight_coherence = 0.2 + 0.7 * (0.6 ** progress)

    # Initialize or update node scores with momentum
    if not hasattr(select_next_node, 'node_scores'):
        select_next_node.node_scores = {n: 0 for n in range(total_nodes)}

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        # Update node score with momentum
        new_score = (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)
        select_next_node.node_scores[node] = momentum * select_next_node.node_scores[node] + (1 - momentum) * new_score

        return select_next_node.node_scores[node]

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
