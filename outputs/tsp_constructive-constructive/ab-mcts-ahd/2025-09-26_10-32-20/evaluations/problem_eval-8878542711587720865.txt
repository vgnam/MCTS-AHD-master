def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.4 + 0.6 * (1 - progress ** 2)
    weight_centrality = 0.3 * (0.6 ** (1 - progress))
    weight_coherence = 0.3 + 0.7 * progress ** 1.5

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(1 / (distance_matrix[node][n] + 1e-10) for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        normalized_centrality = centrality / (sum(1 / (sum(distance_matrix[n][m] for m in range(total_nodes)) + 1e-10) for n in unvisited_nodes) + 1e-10)
        return (weight_local * local_distance) + (weight_centrality * normalized_centrality) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
