def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
    max_total_distance = max(sum(row) for row in distance_matrix)
    entropy_factor = 1 - (avg_distance / max_total_distance) if max_total_distance != 0 else 1

    if len(distance_matrix) > 1:
        prev_node = current_node - 1 if current_node > 0 else len(distance_matrix) - 1
        path_momentum = -distance_matrix[prev_node][current_node] / max_total_distance
    else:
        path_momentum = 0

    phase_threshold = 0.3 + 0.4 * entropy_factor
    if progress < phase_threshold:
        phase = "local"
    elif progress < 0.7:
        phase = "transition"
    else:
        phase = "global"

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        neighborhood_diversity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        cohesion = (centrality + neighborhood_diversity) / 2

        if phase == "local":
            score = local_distance * (1 - 0.5 * path_momentum)
        elif phase == "transition":
            score = (0.6 * local_distance + 0.4 * cohesion) * (1 + 0.3 * path_momentum)
        else:
            score = (0.3 * local_distance + 0.7 * cohesion) * (1 + 0.5 * path_momentum)

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
