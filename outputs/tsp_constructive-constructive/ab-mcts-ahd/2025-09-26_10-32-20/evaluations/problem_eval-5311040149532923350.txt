def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_decay = 0.7 ** visited_ratio
    exploitation_weight = 0.6 * (1 - exploration_decay)
    exploration_weight = 0.4 * exploration_decay

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        reward = -distance_matrix[current_node][node] + 0.5 * (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node])
        exploitation_term = exploitation_weight * reward
        variance_penalty = 0.3 * variance
        decay_penalty = 0.1 * (1 - exploration_decay) * distance_matrix[current_node][node]

        return -exploitation_term + variance_penalty + decay_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
