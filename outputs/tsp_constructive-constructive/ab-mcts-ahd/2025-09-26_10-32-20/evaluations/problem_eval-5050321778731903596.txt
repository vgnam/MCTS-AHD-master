def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    local_weight = 0.9 ** (1.0 / (1.0 + remaining_nodes))
    global_weight = 1 - local_weight

    # Calculate node centrality: average distance to all other unvisited nodes
    centrality = {}
    for node in unvisited_nodes:
        if remaining_nodes > 1:
            centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
        else:
            centrality[node] = 0

    # Hybrid score combines local, global, and centrality factors
    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * distance_matrix[node][destination_node] +
        0.1 * centrality[node]  # Centrality factor
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
