def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 / (remaining_nodes + 1)  # Early exploration, later exploitation
    novelty_factor = 1.0 - exploration_weight  # Higher novelty in early stages

    def path_potential(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        novelty_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) * novelty_factor
        exploration_score = local_dist * exploration_weight
        exploitation_score = global_dist * (1 - exploration_weight)
        return exploration_score + exploitation_score + novelty_score

    next_node = min(unvisited_nodes, key=path_potential)
    return next_node
