def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1.0 - visited_ratio
    exploitation_weight = visited_ratio

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        centrality = 1.0 / (1.0 + avg_distance)  # Higher centrality for lower avg_distance

        local_score = distance_matrix[current_node][node]
        global_score = centrality

        return (exploration_weight * global_score +
                exploitation_weight * local_score)

    if exploration_weight > 0.5:
        next_node = max(unvisited_nodes, key=calculate_score)  # Early: prioritize central nodes
    else:
        next_node = min(unvisited_nodes, key=calculate_score)  # Late: prioritize local proximity

    return next_node
