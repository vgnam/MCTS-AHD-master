def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.6 - 0.4 * progress
    weight_centrality = 0.4 * (0.6 ** progress)
    weight_coherence = 0.1 + 0.9 * progress
    exploration_factor = 0.3 * (1 - progress)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    scores = [calculate_score(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-10) for score in scores]

    if progress < 0.5:
        probabilities = [exploration_factor + (1 - exploration_factor) * prob for prob in normalized_scores]
    else:
        probabilities = normalized_scores

    probabilities = [p / sum(probabilities) for p in probabilities]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
