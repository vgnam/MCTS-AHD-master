def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    adaptive_factor = 0.5 ** (1.0 / (remaining_nodes + 1))  # Exponential decay for weight

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        detour_penalty = max(0, (local_dist + global_dist) - 1.5 * distance_matrix[current_node][destination_node])
        weighted_cost = (1 - adaptive_factor) * local_dist + adaptive_factor * global_dist + detour_penalty
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
