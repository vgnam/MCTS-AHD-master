def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid function to adjust weight dynamically

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        min_distance = min(distance_matrix[node][n] for n in unvisited_nodes)
        return weight * distance_matrix[current_node][node] + (1 - weight) * min_distance

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
