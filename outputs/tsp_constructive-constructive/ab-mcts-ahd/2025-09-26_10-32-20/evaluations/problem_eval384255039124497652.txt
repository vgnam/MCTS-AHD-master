def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.6 * (1 - progress**2)
    weight_centrality = 0.3 * progress**1.5
    weight_coherence = 0.1 * (1 - (2 * progress - 1)**2)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes))
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        harmonic_score = 3 / (1/local_distance + 1/centrality + 1/coherence)
        return weight_local * local_distance + weight_centrality * centrality - weight_coherence * harmonic_score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
