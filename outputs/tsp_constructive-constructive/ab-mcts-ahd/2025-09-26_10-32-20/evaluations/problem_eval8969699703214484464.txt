def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.5 - 0.2 * progress
    weight_coherence = 0.3 + 0.2 * (0.5 - abs(progress - 0.5))
    weight_dest = 0.2 + 0.3 * progress

    def calculate_score(node):
        local_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        coherence_term = (local_dist + dest_dist)
        return (weight_local * local_dist) + (weight_coherence * coherence_term) + (weight_dest * dest_dist)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
