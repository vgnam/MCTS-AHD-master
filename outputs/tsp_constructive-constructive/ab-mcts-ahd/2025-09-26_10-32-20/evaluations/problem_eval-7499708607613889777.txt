import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate progress ratio (0 to 1) based on remaining nodes
    total_nodes = len(unvisited_nodes) + 1
    progress = 1 - (len(unvisited_nodes) / total_nodes)

    # Exponential weight adjustment
    weight_local = math.exp(-5 * progress)
    weight_global = math.exp(-5 * (1 - progress))

    # Distance-based penalty to avoid revisits
    penalty = lambda node: 0.3 * min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)

    # Hybrid score with dynamic weights and penalty
    hybrid_score = lambda node: (
        weight_local * distance_matrix[current_node][node] +
        weight_global * distance_matrix[node][destination_node] +
        penalty(node)
    )

    # Select node with lowest hybrid score, fallback to random if no valid candidates
    try:
        next_node = min(unvisited_nodes, key=hybrid_score)
    except ValueError:
        next_node = random.choice(unvisited_nodes)

    return next_node
