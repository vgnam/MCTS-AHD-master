def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    density_weight = 1.0 / (1.0 + total_unvisited)  # Higher density reduces weight

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        if not unvisited_nodes:
            return local_distance

        # Normalized global distance: average distance to remaining nodes, scaled by density
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        normalized_avg = avg_distance / (sum(sum(row) for row in distance_matrix) / (len(distance_matrix) ** 2))

        # Dynamic weighting: blend local and global based on remaining nodes
        return local_distance + (1.0 - density_weight) * normalized_avg

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
