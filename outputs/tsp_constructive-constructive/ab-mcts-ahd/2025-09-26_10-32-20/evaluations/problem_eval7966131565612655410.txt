def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight based on remaining nodes

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        max_distance = max(distance_matrix[node][n] for n in unvisited_nodes)
        cycle_penalty = 0.5 if node in [current_node, destination_node] else 0.0  # Penalty for potential cycles

        return (1 - weight) * distance_matrix[current_node][node] + weight * max_distance + cycle_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
