def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    # Calculate dynamic thresholds based on node diversity
    diversity = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
    threshold_local = max(1, diversity * 0.5)
    threshold_centrality = 1.5 - 0.5 * (progress ** 0.5)

    # Adaptive weights with logarithmic and exponential scaling
    weight_local = 0.6 * (1 - progress) + 0.2 * (1 - (1 - progress) ** 2)
    weight_centrality = 0.3 * (1 + progress) + 0.2 * (1 - (1 - progress) ** 0.5)
    weight_coherence = 0.1 * (1 - progress ** 2)

    def calculate_score(node):
        # Local distance with threshold adjustment
        local_distance = distance_matrix[current_node][node] / threshold_local

        # Logarithmic centrality scaling
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        centrality = math.log(centrality + 1) / threshold_centrality

        # Exponential coherence decay
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        coherence = coherence * (1 - progress ** 2)

        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
