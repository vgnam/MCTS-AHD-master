def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.5 * (0.7 ** progress)
    weight_centrality = 0.4 * (0.6 ** progress) + 0.4 * (0.5 - abs(progress - 0.5))
    weight_coherence = 0.1 + 0.8 * (0.6 - abs(progress - 0.5))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        entropy = -sum((distance_matrix[node][n] / (sum(distance_matrix[node]) + 1e-10)) * np.log(distance_matrix[node][n] + 1e-10) for n in unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * (coherence + 0.3 * entropy))

    scores = [calculate_score(node) for node in unvisited_nodes]
    probabilities = np.exp(-np.array(scores) / np.sum(scores))
    probabilities /= probabilities.sum()
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
