importance later (lower weight), ensuring a smooth transition from global exploration to local optimization.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.5 - 0.3 * progress
    weight_coherence = 0.7 - 0.4 * abs(progress - 0.5)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
