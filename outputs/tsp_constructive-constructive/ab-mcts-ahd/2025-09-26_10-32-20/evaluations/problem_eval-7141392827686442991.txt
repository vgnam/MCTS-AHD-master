import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic phase transition with probabilistic threshold
    phase_threshold = 1 / (1 + math.exp(-10 * (progress - 0.5)))
    use_local_phase = (phase_threshold > 0.5) if remaining_nodes > total_nodes // 2 else (phase_threshold < 0.5)

    # Cubic progression for weight adjustments
    weight_local = 0.6 - 0.5 * (progress ** 3) if use_local_phase else 0.2 + 0.3 * (progress ** 3)
    weight_centrality = 0.4 + 0.5 * (progress ** 3) if use_local_phase else 0.8 - 0.7 * (progress ** 3)
    weight_coherence = 0.3 * (progress ** 3)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        # Memory-based coherence term
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        memory_factor = sum(distance_matrix[node][n] for n in range(total_nodes) if n not in unvisited_nodes and n != current_node) / (total_nodes - remaining_nodes + 1e-10)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence) + (0.1 * memory_factor)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
