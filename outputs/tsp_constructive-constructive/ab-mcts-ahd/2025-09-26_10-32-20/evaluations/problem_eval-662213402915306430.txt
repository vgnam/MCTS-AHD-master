def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    exploration_pressure = 1 - remaining_ratio ** 2
    local_weight = 0.5 + 0.4 * exploration_pressure
    global_weight = 1 - local_weight

    def node_significance(node):
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        unvisited_avg = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        return (centrality * 0.7 + (1/unvisited_avg) * 0.3) ** (1 + exploration_pressure)

    hybrid_score = lambda node: (
        local_weight * (0.7 * distance_matrix[current_node][node] + 0.3 * distance_matrix[node][destination_node]) +
        global_weight * node_significance(node)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
