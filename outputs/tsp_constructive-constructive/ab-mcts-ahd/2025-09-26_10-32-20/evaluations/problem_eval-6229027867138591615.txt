def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weights based on progress and remaining nodes
    weight_local = 0.5 - 0.3 * progress
    weight_centrality = 0.3 + 0.2 * progress
    weight_popularity = 0.2 + 0.1 * progress
    weight_coherence = 0.4 - 0.2 * progress

    # Track node popularity (simplified for demonstration)
    node_popularity = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        node_popularity[node] = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.7 * sum(distance_matrix[node]) / len(distance_matrix[node]))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

        # Novel coherence metric: average distance to unvisited nodes weighted by their density
        coherence = 0
        if unvisited_nodes:
            coherence = sum(distance_matrix[node][n] * (1 - distance_matrix[node][n] / (max(distance_matrix[node]) + 1e-10))
                          for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        popularity = node_popularity.get(node, 0)
        return (weight_local * local_distance +
                weight_centrality * centrality +
                weight_popularity * popularity -
                weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
