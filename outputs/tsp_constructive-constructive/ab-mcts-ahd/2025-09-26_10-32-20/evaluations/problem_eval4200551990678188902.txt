import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    decay_factor = math.exp(-remaining_ratio)

    weight_local = 0.7 * decay_factor + 0.3
    weight_centrality = 0.4 * decay_factor + 0.2
    weight_coherence = 0.1 * decay_factor + 0.4

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        local_global_balance = (local_distance * centrality) ** 0.5
        return (weight_local * local_distance) + (weight_centrality * local_global_balance) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
