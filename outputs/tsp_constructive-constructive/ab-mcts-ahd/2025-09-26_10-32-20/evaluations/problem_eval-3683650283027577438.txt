def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    def sigmoid(x, k=1):
        return 1 / (1 + np.exp(-k * x))

    weight_local = 0.7 * (1 - sigmoid(progress - 0.5, 5))
    weight_centrality = 0.2 * sigmoid(progress, 3) + 0.2 * (1 - sigmoid(abs(progress - 0.5), 4))
    weight_coherence = 0.1 * (1 - sigmoid(progress - 0.5, 2))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence_stability = np.std([distance_matrix[node][n] for n in unvisited_nodes if n != node])
        return (weight_local * local_distance) + (weight_centrality * centrality) + (weight_coherence * coherence_stability)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
