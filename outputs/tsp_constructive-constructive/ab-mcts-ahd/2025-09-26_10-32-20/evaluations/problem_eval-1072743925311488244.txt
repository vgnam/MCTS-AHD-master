def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.7 * (remaining_nodes / (remaining_nodes + 1))  # Scale weight dynamically

    next_node = min(
        unvisited_nodes,
        key=lambda node: (
            dynamic_weight * distance_matrix[current_node][node] +
            (1 - dynamic_weight) * distance_matrix[node][destination_node]
        ) + (0.1 * sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))  # Penalize revisits
    )
    return next_node
