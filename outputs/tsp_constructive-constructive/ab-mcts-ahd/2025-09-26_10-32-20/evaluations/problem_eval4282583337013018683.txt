def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_decay = 0.9 ** visited_ratio
    exploitation_base = 0.5 * (1 + visited_ratio)

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        connectivity = len([d for d in distances_to_unvisited if d < avg_distance]) / len(unvisited_nodes)

        exploration_term = exploration_decay * distance_matrix[current_node][node]
        exploitation_term = exploitation_base * connectivity
        centrality_penalty = 0.4 * (1 - connectivity)

        return exploration_term + exploitation_term + centrality_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
