importance" metric based on the ratio of incoming and outgoing connections, while also adjusting exploration/exploitation weights non-linearly and penalizing high-degree nodes to balance tour quality and computational efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 0.8 * (1 - visited_ratio) ** 2
    exploitation_weight = 0.2 * (visited_ratio ** 1.5)

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        in_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_distance)
        out_degree = len(unvisited_nodes) - in_degree
        importance_ratio = in_degree / (out_degree + 1) if out_degree > 0 else 1.0

        exploration_term = exploration_weight * distance_matrix[current_node][node]
        exploitation_term = exploitation_weight * (avg_distance * importance_ratio)
        variance_penalty = 0.4 * variance * (1 - importance_ratio)

        return exploration_term + exploitation_term + variance_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
