importance, with novel scoring functions that incorporate path diversity and future potential.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    progress_factor = 1 - remaining_ratio
    exploration_weight = 0.5 * (1 - progress_factor) + 0.2
    exploitation_weight = 0.5 * progress_factor + 0.3

    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    def node_importance(node):
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        diversity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > distance_matrix[current_node][node])
        return centrality * (1 + 0.1 * diversity)

    def future_potential(node):
        avg_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        min_to_dest = min(distance_matrix[node][n] for n in unvisited_nodes)
        return (1 / (avg_unvisited + 1e-10)) * (1 - min_to_dest / sum(distance_matrix[destination_node]))

    hybrid_score = lambda node: (
        exploration_weight * (0.4 * distance_matrix[current_node][node] + 0.3 * distance_matrix[node][destination_node] + 0.3 * (1 - progress_factor)) +
        exploitation_weight * (0.6 * node_importance(node) + 0.4 * future_potential(node))
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
