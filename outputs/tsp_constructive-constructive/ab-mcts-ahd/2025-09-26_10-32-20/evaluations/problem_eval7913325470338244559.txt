def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.6 - 0.4 * progress
    weight_centrality = 0.2 + 0.6 * progress
    weight_frequency = 0.2 * (1 - progress)

    node_frequencies = {node: 1 / (sum(distance_matrix[node]) + 1e-10) for node in unvisited_nodes}

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node]) + 1e-10)
        frequency_score = node_frequencies[node]
        return (weight_local * local_distance) - (weight_centrality * centrality) + (weight_frequency * frequency_score)

    if remaining_nodes > total_nodes * 0.7:
        next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])
    else:
        next_node = min(unvisited_nodes, key=calculate_score)

    return next_node
