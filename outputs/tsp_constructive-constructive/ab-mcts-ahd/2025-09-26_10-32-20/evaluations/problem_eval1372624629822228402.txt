def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_local = 0.6 + 0.3 * (remaining_nodes / len(distance_matrix))
    weight_centrality = 0.3
    weight_coherence = 0.1 + 0.4 * (1 - remaining_nodes / len(distance_matrix))

    def calculate_weight(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    weights = [calculate_weight(node) for node in unvisited_nodes]
    exp_weights = [math.exp(w) for w in weights]
    probs = [w / sum(exp_weights) for w in exp_weights]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
