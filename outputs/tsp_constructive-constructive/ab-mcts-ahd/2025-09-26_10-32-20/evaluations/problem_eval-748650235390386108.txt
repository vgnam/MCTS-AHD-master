importance estimation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    weight_local = 0.6 - 0.4 * progress
    weight_centrality = 0.3 + 0.2 * progress
    weight_coherence = 0.1 + 0.4 * progress

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes)) / total_nodes
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
