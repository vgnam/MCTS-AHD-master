def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    temperature = 0.8 * (remaining_nodes / total_nodes) + 0.2

    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    median_distance = sorted(distances_to_unvisited)[len(distances_to_unvisited) // 2] if distances_to_unvisited else 0
    dynamic_threshold = 1.3 * median_distance

    def novelty_bonus(node):
        dist = distance_matrix[current_node][node]
        return max(0, 1 - abs(dist - dynamic_threshold) / dynamic_threshold)

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        penalty = max(0, (local_cost + global_cost) - dynamic_threshold)
        novelty = novelty_bonus(node)
        return (0.5 * local_cost + 0.3 * global_cost + 0.2 * novelty) * (1 - temperature) + (0.3 * local_cost + 0.5 * global_cost + 0.2 * novelty) * temperature + 1.5 * penalty

    scores = [hybrid_score(node) for node in unvisited_nodes]
    probabilities = [math.exp(-score / temperature) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]

    return next_node
