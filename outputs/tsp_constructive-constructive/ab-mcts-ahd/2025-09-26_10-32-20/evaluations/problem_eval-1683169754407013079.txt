def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = 1.0 / (1.0 + len(unvisited_nodes))
    diversity_penalty = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    hybrid_score = lambda node: (
        (0.5 + exploration_factor * 0.5) * distance_matrix[current_node][node] +
        (0.5 - exploration_factor * 0.5) * distance_matrix[node][destination_node] +
        exploration_factor * diversity_penalty -
        exploration_factor * distance_matrix[current_node][node] * distance_matrix[node][destination_node] / (distance_matrix[current_node][destination_node] + 1e-6)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
