def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        dynamic_weight = 0.7 + (0.3 * (remaining_nodes / total_nodes))
        penalty = 1.0 if node in unvisited_nodes else 1.5
        return (distance_matrix[current_node][node] + dynamic_weight * avg_distance) * penalty
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
