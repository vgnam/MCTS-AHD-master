import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate progress ratio (0 to 1)
    total_nodes = len(unvisited_nodes) + 1
    progress = 1 - (len(unvisited_nodes) / total_nodes)

    # Dynamic friction coefficient (0 to 1) using sigmoid with progress
    friction = 1 / (1 + math.exp(-12 * (progress - 0.5)))

    # Repulsion field: penalize nodes too close to recently visited
    repulsion = lambda node: sum(
        1 / (1 + distance_matrix[current_node][n]) if distance_matrix[current_node][n] < 0.3 * distance_matrix[current_node][node] else 0
        for n in unvisited_nodes if n != node
    )

    # Adaptive weight for local vs global distance
    weight_local = math.exp(-2 * progress)
    weight_global = 1 - weight_local

    # Composite score with friction, repulsion, and adaptive weights
    score = lambda node: (
        (1 - friction) * (weight_local * distance_matrix[current_node][node] +
                          weight_global * distance_matrix[node][destination_node]) +
        friction * repulsion(node)
    )

    # Select node with lowest score, fallback to nearest neighbor
    try:
        next_node = min(unvisited_nodes, key=score)
    except ValueError:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
