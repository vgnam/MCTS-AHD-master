def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.4  # Weight for immediate distance
    beta = 0.3   # Weight for future savings
    gamma = 0.3   # Exploration factor weight

    def calculate_weighted_score(node):
        immediate_distance = distance_matrix[current_node][node]
        future_savings = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        exploration_factor = len(unvisited_nodes) / (distance_matrix[current_node][node] + 1e-6)
        return alpha * immediate_distance + beta * future_savings + gamma * exploration_factor

    next_node = min(unvisited_nodes, key=calculate_weighted_score)
    return next_node
