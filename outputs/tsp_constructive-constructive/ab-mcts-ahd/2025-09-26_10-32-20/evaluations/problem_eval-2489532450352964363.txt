def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    base_weight_local = 0.5 * (0.9 ** progress)
    base_weight_centrality = 0.3 * (0.8 ** (1 - progress)) + 0.2 * (1 - abs(progress - 0.5))
    base_weight_coherence = 0.2 + 0.7 * (0.6 ** (1 - progress))

    distance_penalty = 1 + (progress * 0.5)
    coherence_reinforcement = 1 - (0.3 * progress)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node] * distance_penalty
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        coherence = coherence * coherence_reinforcement

        weighted_local = base_weight_local * local_distance
        weighted_centrality = base_weight_centrality * centrality
        weighted_coherence = base_weight_coherence * coherence

        return weighted_local + weighted_centrality - weighted_coherence

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
