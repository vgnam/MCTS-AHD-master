importance scoring that combines local distance, global connectivity, and adaptive neighborhood influence, using a weighted harmonic mean to balance exploration and exploitation with progressive weight adjustment based on tour progress and node centrality.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    local_weight = 0.5 + 0.5 * (1 - remaining_ratio)
    global_weight = 1 - local_weight

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_connectivity = sum(1 / (distance_matrix[node][n] + 1e-10) for n in unvisited_nodes)
        neighborhood_influence = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        centrality = 1 / (neighborhood_influence + 1e-10)

        local_term = local_distance
        global_term = (0.4 * global_connectivity + 0.6 * centrality)

        if remaining_ratio > 0.7:
            return local_weight * local_term + global_weight * global_term
        else:
            harmonic_mean = 2 / (1/local_term + 1/global_term)
            return harmonic_mean

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
