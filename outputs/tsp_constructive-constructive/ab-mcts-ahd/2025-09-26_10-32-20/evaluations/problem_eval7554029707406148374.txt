def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    closest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    farthest_dist = distance_matrix[current_node][farthest_node]
    closest_dist = distance_matrix[current_node][closest_node]

    avg_dist = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    diversity_weight = (farthest_dist / avg_dist) ** 2

    if diversity_weight > 1.5:
        next_node = farthest_node
    else:
        next_node = closest_node if closest_dist < farthest_dist else farthest_node

    return next_node
