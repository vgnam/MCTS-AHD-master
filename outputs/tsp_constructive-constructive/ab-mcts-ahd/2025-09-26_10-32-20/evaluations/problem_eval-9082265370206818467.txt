def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes + 1)
    exploration_rate = max(0.1, 1.0 - weight_factor)  # Higher early on, decays

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        detour_penalty = (local_dist + global_dist - distance_matrix[current_node][destination_node]) * (1.0 / remaining_nodes)

        # Probabilistic adjustment: favor local early, global later
        adjusted_cost = (exploration_rate * local_dist + (1 - exploration_rate) * global_dist) + detour_penalty
        return adjusted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
