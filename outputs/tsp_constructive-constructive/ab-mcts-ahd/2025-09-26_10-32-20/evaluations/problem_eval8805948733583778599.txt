import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Fixed weight ratio (70% local, 30% global)
    weight_local = 0.7
    weight_global = 0.3

    # Progress-based penalty scaling
    total_nodes = len(unvisited_nodes) + 1
    progress = 1 - (len(unvisited_nodes) / total_nodes)
    penalty_factor = 0.3 * (1 - progress)

    # Penalty term to avoid revisiting nearby nodes
    penalty = lambda node: penalty_factor * sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)

    # Hybrid score with static weights and adaptive penalty
    hybrid_score = lambda node: (
        weight_local * distance_matrix[current_node][node] +
        weight_global * distance_matrix[node][destination_node] +
        penalty(node)
    )

    # Select node with lowest hybrid score, fallback to nearest neighbor if no valid candidates
    try:
        next_node = min(unvisited_nodes, key=hybrid_score)
    except ValueError:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
