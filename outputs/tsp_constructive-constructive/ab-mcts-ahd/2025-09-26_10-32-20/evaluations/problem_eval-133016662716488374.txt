import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = remaining_nodes / total_nodes
    dynamic_weight = math.log(1 + progress_ratio * 9) / math.log(10)

    base_threshold = distance_matrix[current_node][destination_node]
    adaptive_threshold = base_threshold * (1 + 0.5 * (1 - progress_ratio))

    def hybrid_score(node):
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node]
        total_cost = local_cost + global_cost
        penalty = max(0, (total_cost - adaptive_threshold) ** 1.5)
        return dynamic_weight * local_cost + (1 - dynamic_weight) * global_cost + penalty

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
