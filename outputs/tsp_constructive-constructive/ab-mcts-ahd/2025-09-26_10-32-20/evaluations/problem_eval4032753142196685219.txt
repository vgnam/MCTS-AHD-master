def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 for current_node
    dynamic_weight = 1 / (1 + math.exp(-0.1 * (total_nodes - remaining_nodes)))

    local_weight = 0.7 * (1 - dynamic_weight)
    global_weight = 0.3 + dynamic_weight

    def hybrid_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        out_degree_penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < local_distance)
        return local_weight * local_distance + global_weight * global_distance + out_degree_penalty

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
