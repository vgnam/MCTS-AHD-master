def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate path progress factor
    progress = 1 - (remaining_nodes / total_nodes)

    # Calculate node diversity metric
    diversity = sum(sum(distance_matrix[n]) for n in unvisited_nodes) / (remaining_nodes * total_nodes)

    # Dynamic weight adjustment with novel flexibility metric
    flexibility = (1 - progress) * diversity
    weight_local = 0.4 * (1 - flexibility) + 0.2 * progress
    weight_global = 0.3 * flexibility + 0.3 * (1 - progress)
    weight_temporal = 0.5 * flexibility - 0.1 * progress

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_connectivity = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes))
        temporal_coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)

        # Novel scoring mechanism with adaptive scaling
        local_term = weight_local * (local_distance / (1 + flexibility))
        global_term = weight_global * (global_connectivity * (1 + flexibility))
        temporal_term = weight_temporal * (1 / (temporal_coherence + 1e-10))

        return local_term + global_term - temporal_term

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
