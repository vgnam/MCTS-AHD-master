def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_destination = 0.7
    weight_local = 0.2 + 0.1 * progress
    weight_coherence = 0.1 + 0.2 * progress

    def calculate_score(node):
        destination_distance = distance_matrix[node][destination_node]
        local_distance = distance_matrix[current_node][node]
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_destination * (-destination_distance)) + (weight_local * (-local_distance)) + (weight_coherence * (-coherence))

    next_node = max(unvisited_nodes, key=calculate_score)
    return next_node
