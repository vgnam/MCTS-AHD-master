import math
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    phase = 1 - remaining_ratio

    # Hyperbolic tangent-based dynamic weighting
    k = 5.0  # Steepness of the tanh function
    local_weight = (1 + math.tanh(k * (phase - 0.5))) / 2
    global_weight = 1 - local_weight

    # Exploration factor (decays with progress)
    exploration = math.exp(-phase * 5)

    def look_ahead(node):
        return sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    # Path potential: combines centrality with path distance variance
    def path_potential(node):
        if not unvisited_nodes:
            return 0
        distances = [distance_matrix[node][n] for n in unvisited_nodes]
        mean_dist = np.mean(distances)
        variance = np.var(distances) if len(distances) > 1 else 0
        return centrality(node) * (1 + variance / (mean_dist + 1e-10))

    # Hybrid score with exploration factor
    hybrid_score = lambda node: (
        local_weight * distance_matrix[current_node][node] +
        global_weight * (0.5 * path_potential(node) + 0.3 * look_ahead(node) + 0.2 * exploration)
    )

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
