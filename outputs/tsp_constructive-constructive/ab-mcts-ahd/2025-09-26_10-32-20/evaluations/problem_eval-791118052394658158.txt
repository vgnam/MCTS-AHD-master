def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        farthest_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight adjustment
        progress = 1 - len(unvisited_nodes) / len(distance_matrix)
        weight_centrality = 0.2 + 0.3 * progress
        weight_global = 0.1 + 0.2 * progress

        return -farthest_distance + weight_centrality * centrality + weight_global * global_distance

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
