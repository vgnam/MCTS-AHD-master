def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - remaining_nodes) / total_nodes
    penalty_factor = 1 + 0.5 * (1 - visited_ratio)

    local_weight = 0.4 * (1 - visited_ratio) + 0.1 * penalty_factor
    centrality_weight = 0.3 * visited_ratio + 0.2 * penalty_factor
    coherence_weight = 0.3 * visited_ratio + 0.2 * penalty_factor

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        revisit_penalty = 1 / (1 + distance_matrix[current_node][node] * penalty_factor)
        return (local_weight * local_distance +
                centrality_weight * centrality -
                coherence_weight * coherence -
                revisit_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
