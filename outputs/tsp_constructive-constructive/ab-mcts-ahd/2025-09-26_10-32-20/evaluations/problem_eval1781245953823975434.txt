def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    base_weight_local = 0.2 + 0.3 * progress
    base_weight_centrality = 0.5 - 0.2 * progress
    base_weight_coherence = 0.3 + 0.2 * progress

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        centrality_trend = (centrality - sum(1 / (sum(distance_matrix[n][m] for m in range(total_nodes)) + 1e-10) for n in unvisited_nodes) / len(unvisited_nodes)) ** 2
        local_variance = (local_distance - sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) ** 2

        adjusted_weight_local = base_weight_local * (1 + 0.5 * local_variance)
        adjusted_weight_centrality = base_weight_centrality * (1 + 0.3 * centrality_trend)

        return (adjusted_weight_local * local_distance) + (adjusted_weight_centrality * centrality) - (base_weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
