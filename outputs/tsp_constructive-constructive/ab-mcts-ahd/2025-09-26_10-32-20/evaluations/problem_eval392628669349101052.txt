def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
    max_total_distance = max(sum(row) for row in distance_matrix)
    entropy_factor = 1 - (avg_distance / max_total_distance) if max_total_distance != 0 else 1

    if len(distance_matrix) > 1:
        prev_node = current_node - 1 if current_node > 0 else len(distance_matrix) - 1
        path_momentum = -distance_matrix[prev_node][current_node] / max_total_distance
    else:
        path_momentum = 0

    weight_local = 0.6 * (1 - progress) + 0.2 * entropy_factor + 0.2 * path_momentum
    weight_connectivity = 0.3 * progress + 0.4 * (1 - entropy_factor) + 0.1 * path_momentum
    weight_coherence = 0.2 + 0.3 * (0.5 - abs(progress - 0.5)) + 0.2 * entropy_factor

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        connectivity = sum(1 / (distance_matrix[node][n] + 1e-10) for n in range(total_nodes))
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        local_term = weight_local * (local_distance / (1 + entropy_factor)) * (1 - 0.3 * path_momentum)
        connectivity_term = weight_connectivity * (connectivity / (1 + entropy_factor)) * (1 + 0.5 * path_momentum)
        coherence_term = weight_coherence * (coherence / (1 + entropy_factor)) * (1 + 0.2 * path_momentum)

        return local_term - connectivity_term - coherence_term * (1 + 0.3 * entropy_factor)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
