def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    exploration_factor = 0.1 + 0.9 * (1 - remaining_ratio)
    local_weight = 0.6 + 0.4 * (1 - remaining_ratio)
    global_weight = 1 - local_weight

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        exploration_bonus = (1 - distance_matrix[node][current_node] / max(max(row) for row in distance_matrix)) * exploration_factor
        return (local_weight * local_distance +
                global_weight * (0.6 * centrality + 0.3 * global_distance + 0.1 * exploration_bonus))

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
