def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    local_weight = 0.3
    global_weight = 0.7

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        max_distance = max(distances_to_unvisited)
        penalty = 0.3 * max_distance  # Penalize high max distance
        return (local_weight * distance_matrix[current_node][node] +
                global_weight * avg_distance +
                penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
