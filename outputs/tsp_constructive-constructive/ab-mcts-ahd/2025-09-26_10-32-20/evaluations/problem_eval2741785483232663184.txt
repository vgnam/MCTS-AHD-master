def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Dynamic temperature coefficient based on centrality
    if not hasattr(select_next_node, 'node_degrees'):
        select_next_node.node_degrees = {node: sum(1 for d in distance_matrix[node] if d > 0) for node in range(len(distance_matrix))}

    avg_degree = sum(select_next_node.node_degrees.values()) / len(select_next_node.node_degrees)
    centrality_factor = select_next_node.node_degrees[current_node] / avg_degree if avg_degree > 0 else 1.0
    temperature = 0.5 * (1 - visited_ratio) * centrality_factor

    # Initialize history if needed
    if not hasattr(select_next_node, 'node_history'):
        select_next_node.node_history = {node: 0 for node in unvisited_nodes}
    if not hasattr(select_next_node, 'last_selected'):
        select_next_node.last_selected = None

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        # Connection strength metric
        connection_strength = (1 / (1 + distance_matrix[current_node][node])) * (select_next_node.node_degrees[node] / avg_degree)

        # Dynamic exploration/exploitation
        exploration_term = temperature * (1 / (1 + select_next_node.node_history.get(node, 0)))
        exploitation_term = (1 - temperature) * connection_strength

        # Momentum term with adaptive weight
        momentum_weight = 0.3 * (1 - visited_ratio)
        momentum_term = 0 if select_next_node.last_selected is None else momentum_weight * (1 / (1 + distance_matrix[select_next_node.last_selected][node]))

        # Local search component (activated in final 30% of tour)
        local_search_bonus = 0
        if visited_ratio > 0.7:
            local_search_bonus = 0.2 * (1 / (1 + distance_matrix[current_node][node]))

        return exploration_term + exploitation_term + momentum_term + local_search_bonus

    next_node = max(unvisited_nodes, key=calculate_score)
    select_next_node.node_history[next_node] = select_next_node.node_history.get(next_node, 0) + 1
    select_next_node.last_selected = next_node
    return next_node
