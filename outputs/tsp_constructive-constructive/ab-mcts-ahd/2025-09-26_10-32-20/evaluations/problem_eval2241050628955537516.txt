def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weight adaptation with nonlinear progress functions
    weight_local = 0.4 * (1 - progress) + 0.2 * (progress ** 2)
    weight_centrality = 0.3 * (progress ** 1.5) + 0.2 * (1 - progress)
    weight_coherence = 0.2 * (1 - abs(progress - 0.5)) + 0.1 * (progress ** 1.2)
    weight_exploration = 0.3 * (1 - progress) + 0.4 * (progress ** 0.5)
    weight_degree = 0.1 * (progress ** 1.5)

    # Temperature for probabilistic selection
    temperature = 1.0 - 0.8 * progress

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]

        # Node degree centrality
        degree_centrality = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0) / (total_nodes - 1)

        # Memory-based coherence
        visited_nodes = [n for n in range(total_nodes) if n not in unvisited_nodes and n != current_node]
        coherence = (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) +
                    sum(distance_matrix[node][n] for n in visited_nodes if n != node)) / total_nodes

        exploration = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        score = (weight_local * local_distance -
                weight_centrality * degree_centrality +
                weight_coherence * coherence -
                weight_exploration * exploration -
                weight_degree * degree_centrality)

        return score

    # Probabilistic selection with temperature
    scores = [calculate_score(node) for node in unvisited_nodes]
    exp_scores = [math.exp(score / temperature) for score in scores]
    sum_exp = sum(exp_scores)
    probs = [exp / sum_exp for exp in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
