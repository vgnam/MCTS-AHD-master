def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (sum((distance_matrix[current_node][n] - distance_matrix[current_node][current_node]) ** 2 for n in unvisited_nodes) / remaining_nodes) ** 0.5

    if remaining_nodes > 0.7 * total_nodes:
        weight_local = 0.8
        weight_centrality = 0.2
        weight_coherence = 0.0
    elif remaining_nodes > 0.3 * total_nodes:
        weight_local = 0.5
        weight_centrality = 0.4
        weight_coherence = 0.1
    else:
        weight_local = 0.2
        weight_centrality = 0.3
        weight_coherence = 0.5

    def calculate_weight(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence) + exploration_factor

    next_node = min(unvisited_nodes, key=calculate_weight)
    return next_node
