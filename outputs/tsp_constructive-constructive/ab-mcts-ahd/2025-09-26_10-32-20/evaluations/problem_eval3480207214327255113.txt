def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        immediate_dist = distance_matrix[current_node][node]
        if not unvisited_nodes:
            return immediate_dist

        remaining_nodes = len(unvisited_nodes)
        max_dist = max(distance_matrix[node][n] for n in unvisited_nodes)
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Dynamic weights based on remaining nodes
        weight_immediate = 1.0 - 0.5 * (remaining_nodes / len(distance_matrix))  # Decaying weight for immediate distance
        weight_max = 0.3 * (remaining_nodes / len(distance_matrix))  # Increasing weight for max distance
        weight_avg = 0.2 * (remaining_nodes / len(distance_matrix))  # Increasing weight for avg distance

        return (weight_immediate * immediate_dist +
                weight_max * max_dist +
                weight_avg * avg_dist)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
