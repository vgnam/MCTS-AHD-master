def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weight adjustments with progress momentum
    progress_momentum = 0.3 if progress < 0.5 else 0.7
    weight_local = 0.6 * (1 - progress) + progress_momentum
    weight_centrality = 0.2 + 0.6 * progress
    weight_coherence = 0.2 + 0.6 * (1 - abs(progress - 0.5))

    # Sigmoid function for smoother transitions
    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        # Apply sigmoid to weights for smoother transitions
        adjusted_local = sigmoid(weight_local * local_distance)
        adjusted_centrality = sigmoid(weight_centrality * centrality)
        adjusted_coherence = sigmoid(weight_coherence * coherence)

        return (adjusted_local * local_distance) + (adjusted_centrality * centrality) - (adjusted_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
