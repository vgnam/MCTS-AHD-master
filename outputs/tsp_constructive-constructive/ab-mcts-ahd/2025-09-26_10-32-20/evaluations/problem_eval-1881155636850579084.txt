def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    time_decay = 1.0 / (remaining_nodes + 1)

    def path_score(node):
        local_dist = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        remaining_influence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)
        stochastic_factor = (local_dist + centrality + coherence) * (0.5 + 0.5 * time_decay)

        weight_local = 0.7 * (1 - time_decay)
        weight_centrality = 0.2 + 0.4 * time_decay
        weight_coherence = 0.1 + 0.4 * time_decay

        return (weight_local * local_dist) + (weight_centrality * centrality) - (weight_coherence * coherence) + remaining_influence + stochastic_factor

    next_node = min(unvisited_nodes, key=path_score)
    return next_node
