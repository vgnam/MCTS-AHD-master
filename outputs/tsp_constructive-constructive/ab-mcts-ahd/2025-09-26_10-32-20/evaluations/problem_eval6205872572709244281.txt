def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    weight_local = 0.5 + 0.4 * (1 - remaining_ratio)
    weight_centrality = 0.2 + 0.3 * (1 - remaining_ratio)
    weight_inverse_global = 0.3 + 0.3 * (1 - remaining_ratio)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        inverse_global = 1 / (global_distance + 1e-10)
        return (weight_local * local_distance) + (weight_centrality * centrality) + (weight_inverse_global * inverse_global)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
