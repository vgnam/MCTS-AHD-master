def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    local_weight = 0.5 * (1 - remaining_ratio)
    destination_weight = 0.5 + 0.3 * (1 - remaining_ratio)
    centrality_weight = 0.3 + 0.5 * remaining_ratio

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        return (destination_weight * destination_distance +
                centrality_weight * centrality -
                local_weight * local_distance)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
