def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * total_nodes)
    entropy_factor = 1 - (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / (remaining_nodes * avg_distance)) if avg_distance != 0 else 1
    dynamic_weight = 0.4 * (1 - entropy_factor) + 0.3 * (remaining_nodes / total_nodes)
    momentum_penalty = 1.0 if remaining_nodes > total_nodes / 2 else 1.2
    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0
        return (local_distance + dynamic_weight * avg_future_distance) * momentum_penalty
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
