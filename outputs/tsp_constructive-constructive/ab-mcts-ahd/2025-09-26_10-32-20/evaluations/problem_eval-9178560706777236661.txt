def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploitation_weight = 0.3 + 0.5 * visited_ratio
    exploration_weight = 0.5 * (0.5 ** visited_ratio)
    proximity_bias = 0.3

    if not hasattr(select_next_node, 'node_history'):
        select_next_node.node_history = {node: 0 for node in unvisited_nodes}
    if not hasattr(select_next_node, 'last_selected'):
        select_next_node.last_selected = None

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_all = [distance_matrix[node][n] for n in range(len(distance_matrix))]
        avg_distance = sum(distances_to_all) / len(distances_to_all)
        centrality_bonus = 1 / (1 + avg_distance)

        exploration_bonus = exploration_weight * (1 / (1 + select_next_node.node_history.get(node, 0)))
        exploitation_reward = exploitation_weight * (1 / (1 + distance_matrix[current_node][node]))
        proximity_term = proximity_bias * (1 / (1 + distance_matrix[current_node][node]))

        return exploration_bonus + exploitation_reward + proximity_term + centrality_bonus

    next_node = max(unvisited_nodes, key=calculate_score)
    select_next_node.node_history[next_node] = select_next_node.node_history.get(next_node, 0) + 1
    select_next_node.last_selected = next_node
    return next_node
