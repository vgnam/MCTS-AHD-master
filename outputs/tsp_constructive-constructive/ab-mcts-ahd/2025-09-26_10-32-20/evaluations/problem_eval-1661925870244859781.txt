importance, favoring exploration early and optimization later while adapting to the current path structure.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    weight_local = 0.2 + 0.6 * (1 - progress)
    weight_significance = 0.5 + 0.3 * progress
    weight_coherence = 0.3 + 0.4 * (1 - abs(progress - 0.5))

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        significance = sum(1 / (1 + distance_matrix[node][n]) for n in range(total_nodes)) / total_nodes
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return (weight_local * local_distance) - (weight_significance * significance) + (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
