import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        # Dynamic weight using sigmoid function
        sigmoid_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))

        # Penalty for revisiting nodes (if applicable)
        penalty = 1.0 if node == destination_node and remaining_nodes == 1 else 0.0

        # Decay factor for average distance
        decay_factor = 1.0 / (1 + math.log(remaining_nodes + 1))

        # Average distance to remaining nodes with decay
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) * decay_factor

        # Combined score
        return distance_matrix[current_node][node] + sigmoid_weight * avg_distance + penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
