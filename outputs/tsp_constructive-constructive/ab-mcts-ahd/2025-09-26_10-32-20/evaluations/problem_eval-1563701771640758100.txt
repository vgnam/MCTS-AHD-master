import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        total_nodes = len(distance_matrix)
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        remaining_nodes = len(unvisited_nodes)
        weight_factor = 1 - math.log(remaining_nodes + 1) / (math.log(remaining_nodes + 1) + 1)
        return (1 - weight_factor) * local_distance + weight_factor * (0.5 * global_distance + 0.5 * centrality)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
