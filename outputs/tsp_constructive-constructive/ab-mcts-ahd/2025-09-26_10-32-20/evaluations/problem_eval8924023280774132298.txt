def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    progress_factor = 1 - remaining_ratio

    # Dynamic weight adjustment based on tour progress and local neighborhood
    local_weight = 0.5 + 0.5 * (1 - progress_factor)
    global_weight = 1 - local_weight

    # Probabilistic selection to balance exploration and exploitation
    exploration_prob = 0.2 * (1 - progress_factor)

    def centrality(node):
        return 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

    def neighborhood_density(node):
        k_nearest = 3
        neighbors = sorted(range(total_nodes), key=lambda n: distance_matrix[node][n])[1:k_nearest+1]
        return sum(distance_matrix[node][n] for n in neighbors) / k_nearest

    def hybrid_score(node):
        local_score = distance_matrix[current_node][node] * (1 + 0.1 * neighborhood_density(node))
        global_score = centrality(node) * (1 - 0.2 * progress_factor)
        return local_weight * local_score + global_weight * global_score

    if np.random.random() < exploration_prob:
        next_node = np.random.choice(list(unvisited_nodes))
    else:
        next_node = min(unvisited_nodes, key=hybrid_score)

    return next_node
