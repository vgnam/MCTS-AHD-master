importance scores derived from local distance, centrality, and coherence, with additional penalty terms for revisiting nodes and adaptive weighting factors that emphasize global optimization as the path progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weight adjustments
    weight_local = 0.6 - 0.4 * (remaining_nodes / total_nodes)
    weight_centrality = 0.3 + 0.2 * (remaining_nodes / total_nodes)
    weight_coherence = 0.1 + 0.4 * (remaining_nodes / total_nodes)
    weight_penalty = 0.1 * (1 - remaining_nodes / total_nodes)

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

        # Additional penalty for revisiting nodes
        revisit_penalty = 1 if node in unvisited_nodes else 0.5

        return (weight_local * local_distance +
                weight_centrality * centrality -
                weight_coherence * coherence +
                weight_penalty * revisit_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
