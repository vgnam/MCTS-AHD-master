def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    current_to_dest = distance_matrix[current_node][destination_node]
    weight_factor = 1 / (1 + math.exp(-0.1 * current_to_dest))  # Sigmoid-based dynamic weight
    penalty = {node: 1.0 if node in unvisited_nodes else 1e6 for node in unvisited_nodes}  # Penalty for revisited nodes
    next_node = min(unvisited_nodes, key=lambda node: weight_factor * distance_matrix[current_node][node] + (1 - weight_factor) * distance_matrix[node][destination_node] + penalty[node])
    return next_node
