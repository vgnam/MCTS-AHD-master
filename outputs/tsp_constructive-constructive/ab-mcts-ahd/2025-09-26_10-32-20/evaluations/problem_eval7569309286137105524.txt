def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    # Weighted balance: 70% nearest neighbor, 30% farthest insertion
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    # Select node based on weighted probability
    if distance_matrix[current_node][nearest_node] <= distance_matrix[current_node][farthest_node] * 0.3:
        return nearest_node
    else:
        return next_node
