def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 0.4 * (1 - visited_ratio)
    exploitation_weight = 0.6 * visited_ratio

    current_to_dest = distance_matrix[current_node][destination_node]
    risk_factor = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        proximity_bonus = 0.3 * (current_to_dest - distance_matrix[node][destination_node]) / (current_to_dest + 1e-6)
        risk_penalty = 0.5 * (distance_matrix[current_node][node] - risk_factor) ** 2

        exploration_term = exploration_weight * distance_matrix[current_node][node]
        exploitation_term = exploitation_weight * avg_distance
        variance_penalty = 0.2 * variance

        return exploration_term + exploitation_term + variance_penalty - proximity_bonus + risk_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
