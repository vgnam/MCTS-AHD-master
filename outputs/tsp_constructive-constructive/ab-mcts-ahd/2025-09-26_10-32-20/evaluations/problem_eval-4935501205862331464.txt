def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    global_centrality = 0.6 * (1 / (sum(distance_matrix[current_node][n] for n in range(len(distance_matrix))) + 1e-10))
    global_remaining = 0.4 * (1 / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10))
    global_measure = global_centrality + global_remaining
    hybrid_score = lambda node: 0.6 * distance_matrix[current_node][node] + 0.4 * global_measure
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
