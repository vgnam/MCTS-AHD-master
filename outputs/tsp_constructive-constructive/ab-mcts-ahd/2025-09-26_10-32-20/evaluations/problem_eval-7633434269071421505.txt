def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploitation_weight = 0.6 * visited_ratio
    centrality_weight = 0.3 * (1 - visited_ratio)
    proximity_weight = 0.1

    def calculate_score(node):
        if not unvisited_nodes:
            return distance_matrix[current_node][node]

        centrality = 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        avg_distance = sum(distances_to_unvisited) / len(unvisited_nodes)
        variance = sum((d - avg_distance) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)

        proximity = distance_matrix[current_node][node]
        exploitation = distance_matrix[node][destination_node]

        return (centrality_weight * centrality
                - proximity_weight * proximity
                - exploitation_weight * exploitation
                - 0.1 * variance)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
