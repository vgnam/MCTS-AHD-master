def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    # Dynamic weight adjustment using hyperbolic tangent for smoother transitions
    weight_local = 0.5 + 0.4 * np.tanh(5 * (0.5 - progress))
    weight_centrality = 0.3 + 0.2 * np.tanh(5 * (progress - 0.5))
    weight_coherence = 0.2 + 0.3 * np.tanh(5 * (progress - 0.7))

    # Memory-based coherence factor considering both immediate and long-term relationships
    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]

        # Global centrality based on average distance to all nodes
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)

        # Coherence considering both unvisited neighbors and historical relationships
        unvisited_coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        historical_coherence = sum(distance_matrix[node][n] for n in range(total_nodes) if n not in unvisited_nodes) / (total_nodes - len(unvisited_nodes) + 1e-10)
        coherence = 0.7 * unvisited_coherence + 0.3 * historical_coherence

        # Dynamic score combining all factors with progress-adjusted weights
        return (weight_local * local_distance) + (weight_centrality * centrality) - (weight_coherence * coherence)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
