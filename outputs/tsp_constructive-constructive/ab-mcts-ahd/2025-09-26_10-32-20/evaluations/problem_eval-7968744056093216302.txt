import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_ratio = remaining_nodes / total_nodes
    decay_factor = math.exp(-remaining_ratio)

    weight_local = 0.3 * decay_factor + 0.1
    weight_global = 0.6 * decay_factor + 0.3

    hybrid_score = lambda node: (weight_local * distance_matrix[current_node][node]) + (weight_global * distance_matrix[node][destination_node])
    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
