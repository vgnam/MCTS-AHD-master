def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    phase_factor = 1.0 / (remaining_nodes + 1)  # Phase-dependent weight
    global_weight = phase_factor ** 2  # Emphasize global distance later
    local_weight = 1 - global_weight

    def cost_function(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        detour_penalty = (local_dist + global_dist - distance_matrix[current_node][destination_node]) * (1 + phase_factor)
        weighted_cost = local_weight * local_dist + global_weight * global_dist + detour_penalty
        return weighted_cost

    next_node = min(unvisited_nodes, key=cost_function)
    return next_node
