def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on remaining path length and node density
    remaining_nodes = len(unvisited_nodes) + 1
    remaining_distance = distance_matrix[current_node][destination_node]
    weight = 0.5 + 0.4 * (remaining_distance / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6))

    # Calculate scores with dynamic weight
    scores = []
    for node in unvisited_nodes:
        local_score = distance_matrix[current_node][node]
        global_score = distance_matrix[node][destination_node]
        combined_score = weight * local_score + (1 - weight) * global_score
        scores.append(combined_score)

    # Normalize scores and apply softmax for probabilistic selection
    max_score = max(scores) if scores else 0
    exp_scores = [math.exp(score - max_score) for score in scores]
    sum_exp = sum(exp_scores)
    probs = [exp / sum_exp for exp in exp_scores]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
