def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Adaptive weights based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    w_local = 0.6 + 0.2 * remaining_ratio  # Increase local focus as nodes remain
    w_global = 0.4 - 0.2 * remaining_ratio  # Reduce global focus as nodes remain
    w_recent = 0.2 * (1 - remaining_ratio)  # Penalize recent visits

    # Nearest neighbor component
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Global centrality (inverse sum of all distances)
    centrality = lambda node: 1 / (sum(distance_matrix[node][n] for n in range(len(distance_matrix))) + 1e-10)

    # Local density (inverse average distance to unvisited nodes)
    density = lambda node: 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-10)

    # Recent visit penalty (simplified example)
    recent_penalty = lambda node: 1 if node == current_node else 0  # Placeholder for actual recent visits tracking

    # Hybrid score with adaptive weights
    hybrid_score = lambda node: (w_local * distance_matrix[current_node][node] +
                                w_global * (0.6 * centrality(node) + 0.4 * density(node)) +
                                w_recent * recent_penalty(node))

    next_node = min(unvisited_nodes, key=hybrid_score)
    return next_node
