def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_ratio = remaining_nodes / total_nodes

    # Dynamic weights with sigmoid transition
    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    exploration_phase = sigmoid(10 * (exploration_ratio - 0.5))
    weight_local = 0.7 * (1 - exploration_phase) + 0.3 * exploration_phase
    weight_exploration = 0.3 * (1 - exploration_phase) + 0.7 * exploration_phase

    def calculate_exploration_potential(node):
        centrality = 1 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-10)
        coherence = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        return centrality * 0.6 + coherence * 0.4

    def calculate_score(node):
        local_distance = distance_matrix[current_node][node]
        exploration_potential = calculate_exploration_potential(node)
        return (weight_local * local_distance) + (weight_exploration * exploration_potential)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
