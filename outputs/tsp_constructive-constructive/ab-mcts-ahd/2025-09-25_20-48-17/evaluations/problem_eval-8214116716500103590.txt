def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        weight = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight based on remaining nodes
        penalty = max(0, distance_to_dest - 2 * distance_matrix[current_node][destination_node])  # Penalty for distant nodes
        score = distance_to_node + weight * distance_to_dest + penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
