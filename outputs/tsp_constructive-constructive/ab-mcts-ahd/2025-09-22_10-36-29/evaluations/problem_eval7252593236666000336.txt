def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        distances.append((node, distance))

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if all(d[1] > dest_distance for d in distances if d[0] != destination_node):
            return destination_node

    weights = []
    total_weight = 0.0
    for node, distance in distances:
        if distance == 0:
            weight = 1e6
        else:
            weight = 1.0 / distance
        weights.append((node, weight))
        total_weight += weight

    if total_weight == 0:
        return min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    prob = random.random() * total_weight
    cumulative_weight = 0.0
    for node, weight in weights:
        cumulative_weight += weight
        if prob <= cumulative_weight:
            return node

    return next_node
