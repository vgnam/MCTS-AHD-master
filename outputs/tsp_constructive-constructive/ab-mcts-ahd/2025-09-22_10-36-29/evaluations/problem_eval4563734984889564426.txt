def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    weights = []

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        if node == destination_node:
            candidates.append(node)
            weights.append(1.0 / (current_dist + 1e-6))
            continue

        remaining_nodes = unvisited_nodes - {node}
        if not remaining_nodes:
            next_dist = distance_matrix[node][destination_node]
        else:
            next_dist = min(distance_matrix[node][other] for other in remaining_nodes)

        total_cost = current_dist + next_dist
        candidates.append(node)
        weights.append(1.0 / (total_cost + 1e-6))

    selected_index = np.random.choice(len(candidates), p=np.array(weights) / np.sum(weights))
    return next_node
