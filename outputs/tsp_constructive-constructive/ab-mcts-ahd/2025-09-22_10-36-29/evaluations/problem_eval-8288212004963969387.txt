def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    candidates = []
    weights = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        score = current_distance + 0.5 * avg_future_distance
        candidates.append(node)
        weights.append(1 / (score + 1e-6))  # Avoid division by zero

    if not candidates:
        return destination_node

    selected = random.choices(candidates, weights=weights, k=1)[0]
    return next_node
