def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    weights = []

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        if node == destination_node:
            candidates.append(node)
            weights.append(1.0)  # Highest priority for destination
        else:
            remaining_nodes = unvisited_nodes - {node}
            if not remaining_nodes:
                future_dist = distance_matrix[node][destination_node]
            else:
                future_dist = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
            heuristic_score = current_dist + 0.5 * future_dist
            candidates.append(node)
            weights.append(1.0 / heuristic_score)

    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
