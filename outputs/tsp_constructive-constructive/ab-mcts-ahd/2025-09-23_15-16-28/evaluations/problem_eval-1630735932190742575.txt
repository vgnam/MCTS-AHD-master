def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    phase = remaining_nodes / total_nodes

    # Phase-based weight adjustment
    if phase > 0.7:  # Early phase: focus on current node proximity
        weight_current = 0.5
        weight_destination = 0.3
        weight_centrality = 0.2
    elif 0.3 < phase <= 0.7:  # Mid phase: balance proximity and destination
        weight_current = 0.4
        weight_destination = 0.4
        weight_centrality = 0.2
    else:  # Late phase: prioritize destination proximity
        weight_current = 0.3
        weight_destination = 0.5
        weight_centrality = 0.2

    # Adaptive centrality based on node density
    node_density = total_nodes / (sum(distance_matrix[current_node]) + 1e-6)
    centrality_factor = 1 + 0.1 * node_density

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate adaptive centrality
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        centrality *= centrality_factor

        # Calculate heuristic with phase-based weights
        heuristic = (weight_current * distance_to_current +
                     weight_destination * distance_to_destination +
                     weight_centrality * centrality)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
