def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_fraction = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalized fraction of unvisited nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 + 0.5 * (1 - remaining_fraction)  # Weight increases as more nodes are visited
        revisit_penalty = 1.0 if node == current_node else 0.0  # Penalty for revisiting (optional)
        score = current_distance + dynamic_weight * destination_distance + revisit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
