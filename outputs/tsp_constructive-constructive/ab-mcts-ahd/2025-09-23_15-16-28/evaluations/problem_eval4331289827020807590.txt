def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        w1 = 0.5 + (0.5 * (1 - remaining_nodes / len(unvisited_nodes)))
        w2 = 0.5 - (0.5 * (1 - remaining_nodes / len(unvisited_nodes)))

        # Penalize nodes that are too close to current node
        penalty = 0.2 if distance_to_current < 0.1 * distance_matrix[current_node][destination_node] else 0

        weighted_sum = w1 * distance_to_current + w2 * distance_to_destination + penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
