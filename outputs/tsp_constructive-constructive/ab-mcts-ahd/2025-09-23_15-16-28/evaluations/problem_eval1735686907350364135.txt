def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_cost = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1 / (1 + remaining_nodes ** 0.5)  # Adjusted dynamic weight

    # Track visitation frequency (simplified for demonstration)
    visitation_counts = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        visitation_penalty = visitation_counts[node] ** 1.5  # Penalize frequent visits

        # Combine distance and visitation penalty
        weighted_cost = distance_to_current + weight_factor * (distance_to_destination + visitation_penalty)

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            next_node = node

    # Update visitation count for the selected node (simplified)
    if next_node is not None:
        visitation_counts[next_node] += 1

    return next_node
