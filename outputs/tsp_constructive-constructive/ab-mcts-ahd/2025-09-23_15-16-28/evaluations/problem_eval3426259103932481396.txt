def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    scale_factor = 0.5 * (1 + 1 / (remaining_nodes + 1))  # Dynamic scaling
    diversity_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2  # Encourages exploration

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = max(0, distance_to_current - 2 * distance_matrix[current_node][destination_node])  # Penalty for distant nodes
        proximity_diversity = (distance_to_current / (sum(distance_matrix[current_node]) / len(distance_matrix))) * diversity_factor  # Novel term
        combined_score = distance_to_current + scale_factor * distance_to_destination + penalty + proximity_diversity

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
