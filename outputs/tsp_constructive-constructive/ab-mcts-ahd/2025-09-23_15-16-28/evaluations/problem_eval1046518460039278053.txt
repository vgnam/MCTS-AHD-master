def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    total_unvisited = len(unvisited_nodes)
    base_weight_current = 0.7
    base_weight_destination = 0.3

    # Dynamic weight adjustment based on remaining nodes
    if total_unvisited > 1:
        dynamic_weight_current = base_weight_current * (1 + (1 / total_unvisited))
        dynamic_weight_destination = base_weight_destination * (1 - (1 / total_unvisited))
    else:
        dynamic_weight_current = base_weight_current
        dynamic_weight_destination = base_weight_destination

    # Penalty for nodes that deviate significantly from the straight-line path
    straight_line_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        detour_penalty = max(0, (distance_to_current + distance_to_destination) - straight_line_distance) * 0.2

        weighted_sum = (dynamic_weight_current * distance_to_current) + \
                      (dynamic_weight_destination * distance_to_destination) + \
                      detour_penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
