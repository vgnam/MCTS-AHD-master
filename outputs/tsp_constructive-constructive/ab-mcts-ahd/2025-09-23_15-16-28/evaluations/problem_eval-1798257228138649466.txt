def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + total_unvisited)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Estimate future cost by considering average distance to remaining nodes
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        future_cost = sum(distance_matrix[node][n] for n in remaining_nodes) / (len(remaining_nodes) + 1) if remaining_nodes else 0

        # Combine current, remaining, and future costs with dynamic weights
        score = (1 - weight_factor) * distance_to_current + weight_factor * (0.5 * distance_to_destination + 0.5 * future_cost)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
