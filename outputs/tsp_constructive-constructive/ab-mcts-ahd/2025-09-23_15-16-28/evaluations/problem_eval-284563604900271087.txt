def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            distance_ratio = 1.0
        else:
            distance_ratio = distance_to_current / distance_to_destination

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / (remaining_nodes - 1) if remaining_nodes > 1 else 1.0

        harmonic_mean = 2 * (distance_ratio * centrality) / (distance_ratio + centrality) if (distance_ratio + centrality) > 0 else 0

        exploration_weight = 1.0 / (1.0 + remaining_nodes)
        exploitation_weight = 1.0 - exploration_weight

        score = (exploitation_weight * harmonic_mean) + (exploration_weight * (1.0 / (1.0 + distance_to_current)))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
