def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_utility = -float('inf')

    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 / (1.0 + remaining_nodes)
    exploitation_weight = 1.0 - exploration_weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        normalized_distance_to_current = distance_to_current / max(1, sum(distance_matrix[current_node][n] for n in unvisited_nodes))
        normalized_distance_to_destination = distance_to_destination / max(1, sum(distance_matrix[n][destination_node] for n in unvisited_nodes))

        sigmoid_input = (exploitation_weight * normalized_distance_to_destination) - (exploration_weight * normalized_distance_to_current)
        sigmoid_output = 1 / (1 + math.exp(-sigmoid_input))

        utility = (1 - sigmoid_output) * normalized_distance_to_current + sigmoid_output * normalized_distance_to_destination

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
