def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Initialize or update historical selection frequency (simplified for example)
    if not hasattr(select_next_node, 'selection_counts'):
        select_next_node.selection_counts = {node: 1 for node in range(total_nodes)}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Novelty factor based on inverse selection frequency
        novelty = 1.0 / select_next_node.selection_counts[node]

        # Non-linear weight adjustment with remaining nodes
        weight_current = 0.4 * (remaining_nodes / total_nodes) ** 2
        weight_destination = 0.5 * (1 - (remaining_nodes / total_nodes) ** 3)
        weight_novelty = 0.1 + 0.3 * (remaining_nodes / total_nodes)

        # Combined heuristic with novelty
        heuristic = (weight_current * distance_to_current +
                     weight_destination * distance_to_destination +
                     weight_novelty * novelty)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    # Update selection count for the chosen node
    if next_node is not None:
        select_next_node.selection_counts[next_node] += 1

    return next_node
