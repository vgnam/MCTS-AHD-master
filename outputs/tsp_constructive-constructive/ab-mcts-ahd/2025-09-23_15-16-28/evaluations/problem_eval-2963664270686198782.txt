def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all unvisited nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight based on remaining nodes and centrality
        remaining_nodes = len(unvisited_nodes)
        weight = 0.5 if remaining_nodes > 2 else 0.7  # More emphasis on centrality in later stages

        # Weighted harmonic mean to balance proximity and centrality
        proximity_factor = 1 / (distance_to_current + 1e-6)  # Avoid division by zero
        centrality_factor = 1 / (centrality + 1e-6)
        combined_score = (weight * proximity_factor + (1 - weight) * centrality_factor) / (weight / proximity_factor + (1 - weight) / centrality_factor)

        # Lookahead factor: anticipate future constraints
        lookahead_factor = 0.2 * distance_to_destination if remaining_nodes > 1 else 0.5 * distance_to_destination

        # Final score combines all factors
        score = combined_score - lookahead_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
