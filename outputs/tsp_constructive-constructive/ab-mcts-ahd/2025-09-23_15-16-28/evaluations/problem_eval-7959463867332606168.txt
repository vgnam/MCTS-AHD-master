def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Fixed weights with dynamic centrality
        weight_current = 0.1
        weight_destination = 0.7
        weight_centrality = min(0.2, 0.2 + 0.02 * (1 - remaining_nodes / len(distance_matrix)))

        # Combine with dynamic weights
        heuristic = weight_current * distance_to_current + weight_destination * distance_to_destination + weight_centrality * centrality

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
