def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_combined_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_current = max(0.3, 0.5 - 0.05 * (remaining_nodes / len(distance_matrix)))
        weight_destination = max(0.3, 0.4 + 0.05 * (remaining_nodes / len(distance_matrix)))

        # Combine weighted sum with max distance for balancing
        sum_distance = weight_current * distance_to_current + weight_destination * distance_to_destination
        max_distance = max(distance_to_current, distance_to_destination)
        combined_heuristic = sum_distance + 0.2 * max_distance  # Adjust factor for max distance influence

        if combined_heuristic < min_combined_heuristic:
            min_combined_heuristic = combined_heuristic
            next_node = node

    return next_node
