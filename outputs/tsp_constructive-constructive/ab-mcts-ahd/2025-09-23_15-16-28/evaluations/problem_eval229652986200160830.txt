def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    distance_to_destination = distance_matrix[current_node][destination_node]

    # Historical visit influence (simulated as a decaying factor)
    historical_factor = 0.3 * (1 - len(unvisited_nodes) / (len(distance_matrix) - 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest_from_node = distance_matrix[node][destination_node]

        # Dynamic weight balancing with historical influence
        weight = 0.5 * (1 + (distance_to_destination - distance_to_current) / (distance_to_destination + distance_to_current + 1e-6))
        weight = weight * (1 - historical_factor) + historical_factor * (distance_to_dest_from_node / (distance_to_dest_from_node + distance_to_current + 1e-6))

        # Detour resistance term: penalizes nodes that deviate too far from the path
        detour_resistance = max(0, (distance_to_current + distance_to_dest_from_node) - 1.2 * (distance_to_destination + distance_to_current))
        score = weight * distance_to_current + (1 - weight) * distance_to_dest_from_node + detour_resistance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
