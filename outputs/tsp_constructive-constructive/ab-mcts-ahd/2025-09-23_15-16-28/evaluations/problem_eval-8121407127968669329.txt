def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = (total_unvisited + 1) / (len(distance_matrix) + 1)  # Normalized tour progress
    scaling_factor = 1 - (progress_factor ** 2)  # Exponential decay for scaling

    # Calculate centroid of unvisited nodes
    centroid = sum(unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distance_to_centroid = abs(node - centroid)  # Simplified centroid distance

        # Dynamic weighting with non-linear progress adjustment
        weighted_distance = (scaling_factor * distance_to_destination +
                            (1 - scaling_factor) * distance_to_current)

        # Penalty for nodes far from centroid and long distances
        penalty = 0.3 * distance_to_centroid + 0.2 * max(distance_to_current, distance_to_destination)

        combined_distance = weighted_distance + penalty

        if combined_distance < min_weighted_distance:
            min_weighted_distance = combined_distance
            next_node = node

    return next_node
