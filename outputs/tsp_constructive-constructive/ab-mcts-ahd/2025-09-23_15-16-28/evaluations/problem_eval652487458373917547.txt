def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 2))
    n = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / (n - 1)

        # Weighted distance combines proximity, destination potential, and centrality
        weighted_distance = (
            (1 - progress_factor) * distance_to_current +
            progress_factor * (distance_to_current + distance_to_destination) +
            0.2 * centrality  # Centrality factor adjusted for balance
        )

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
