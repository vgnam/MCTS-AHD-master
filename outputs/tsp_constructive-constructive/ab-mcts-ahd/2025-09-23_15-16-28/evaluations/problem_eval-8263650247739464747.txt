def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + total_unvisited)  # Higher weight for global efficiency as unvisited nodes decrease

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        weighted_distance = (1 - weight_factor) * distance_to_current + weight_factor * (distance_to_destination + centrality)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
