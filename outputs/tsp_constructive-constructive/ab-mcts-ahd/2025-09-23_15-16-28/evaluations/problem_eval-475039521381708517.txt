def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting factor based on remaining unvisited nodes
        weight_factor = 1.0 / (1 + remaining_nodes)

        # Modified score: balances current proximity and centrality in remaining set
        score = (distance_to_current * (distance_to_destination ** 2)) * (1 - weight_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
