def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    progress = (len(unvisited_nodes) + 1) / (len(unvisited_nodes) + 1)  # Normalized progress (0 to 1)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        product_distance = immediate_distance * future_distance
        normalized_savings = product_distance / (immediate_distance + future_distance) if (immediate_distance + future_distance) != 0 else 0

        weighted_score = (1 - progress) * immediate_distance + progress * normalized_savings

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
