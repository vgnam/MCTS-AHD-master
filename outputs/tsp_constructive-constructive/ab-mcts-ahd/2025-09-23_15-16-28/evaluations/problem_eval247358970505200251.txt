def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_utility = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_unvisited = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_current == 0 or distance_to_destination == 0:
            utility = float('inf')
        else:
            weight_factor = (remaining_nodes / total_unvisited) ** 2
            normalized_penalty = (distance_to_current + distance_to_destination) / (distance_to_current * distance_to_destination)
            alignment_bonus = (1 / distance_to_destination) * weight_factor
            utility = alignment_bonus - normalized_penalty

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
