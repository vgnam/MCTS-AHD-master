def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        # Novel scoring mechanism: combines local and global factors with non-linear weighting
        local_factor = distance_to_current * (1 - progress)
        global_factor = distance_to_destination * progress
        hybrid_factor = (distance_to_current + distance_to_destination) * (1 - (remaining_nodes / total_nodes) ** 2)

        score = local_factor + global_factor + hybrid_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
