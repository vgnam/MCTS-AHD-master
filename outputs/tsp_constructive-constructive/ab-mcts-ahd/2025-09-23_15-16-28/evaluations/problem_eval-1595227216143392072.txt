def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    candidates = []
    remaining_nodes = len(unvisited_nodes)
    temperature = max(1.0, remaining_nodes / 10.0)  # Higher early, lower later

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted sum with probabilistic element
        score = (0.6 * distance_to_current + 0.4 * distance_to_destination) * (1.0 + temperature * (random.random() - 0.5))

        candidates.append((node, score))

    # Select node with minimum score
    next_node = min(candidates, key=lambda x: x[1])[0]
    return next_node
