def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_score = float('inf')
    next_node = None
    progress = 1 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Inverted progress (1 to 0)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        global_potential = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        centrality = len([n for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][n]])

        weighted_score = (1 - progress) * immediate_distance + \
                         progress * (0.6 * future_distance + 0.4 * global_potential) - \
                         0.2 * centrality

        if weighted_score < min_total_score:
            min_total_score = weighted_score
            next_node = node

    return next_node
