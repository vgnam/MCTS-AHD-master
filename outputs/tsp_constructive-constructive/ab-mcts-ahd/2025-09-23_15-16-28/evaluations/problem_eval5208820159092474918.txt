def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')

    total_nodes = len(unvisited_nodes) + 1
    position_factor = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Calculate average distance of unvisited nodes to current node
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on position and distance deviation
        if position_factor < 0.4:
            weight_current = 0.6 - 0.2 * (distance_to_current / avg_distance)
            weight_future = 0.4 + 0.2 * (distance_to_current / avg_distance)
        elif position_factor < 0.6:
            weight_current = 0.5 - 0.1 * (distance_to_current / avg_distance)
            weight_future = 0.5 + 0.1 * (distance_to_current / avg_distance)
        else:
            weight_current = 0.7 - 0.1 * (distance_to_current / avg_distance)
            weight_future = 0.3 + 0.1 * (distance_to_current / avg_distance)

        # Normalize weights to sum to 1
        weight_sum = weight_current + weight_future
        weight_current /= weight_sum
        weight_future /= weight_sum

        weighted_score = (weight_current * distance_to_current) + (weight_future * distance_to_destination)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
