def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = remaining_nodes / total_nodes

    # Dynamic weight adjustment using sigmoid function
    weight_adjustment = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
    proximity_weight = 0.7 + 0.3 * weight_adjustment
    advancement_weight = 0.3 - 0.3 * weight_adjustment

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = proximity_weight * distance_to_current + advancement_weight * distance_to_dest

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
