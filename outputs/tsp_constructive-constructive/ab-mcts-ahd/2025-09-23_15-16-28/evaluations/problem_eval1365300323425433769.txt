def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_score = float('inf')
    alpha = 0.7  # Weight for immediate efficiency (distance to current)
    beta = 0.3   # Weight for long-term efficiency (distance to destination)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate a score balancing immediate and long-term efficiency
        score = alpha * distance_to_current + beta * distance_to_destination

        # Optional: Add a third factor to prioritize nodes that are central in the remaining unvisited nodes
        if len(unvisited_nodes) > 1:
            avg_distance_to_others = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
            score += 0.1 * avg_distance_to_others  # Small weight to discourage outliers

        if score < min_total_score:
            min_total_score = score
            next_node = node

    return next_node
