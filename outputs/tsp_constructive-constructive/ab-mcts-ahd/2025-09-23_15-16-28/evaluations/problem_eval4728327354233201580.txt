def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    avg_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited

    # Dynamic weight using sigmoid function
    weight_factor = 1 / (1 + math.exp(-0.5 * (total_unvisited - 5)))  # Adjust midpoint as needed

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalty for nodes that are potential bottlenecks (high remaining distance)
        penalty = max(0, distance_to_destination - 1.5 * avg_remaining_distance)

        weighted_distance = (1 - weight_factor) * distance_to_current + weight_factor * (distance_to_destination + penalty)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
