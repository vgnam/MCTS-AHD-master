def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustment based on remaining nodes
        weight_current = max(0.3, 0.4 - 0.05 * (remaining_nodes / len(distance_matrix)))
        weight_destination = max(0.3, 0.3 + 0.05 * (remaining_nodes / len(distance_matrix)))
        weight_centrality = 0.3
        weight_memory = 0.1

        # Memory component: penalize nodes recently visited
        memory_penalty = 0
        if hasattr(select_next_node, 'last_visited') and node in select_next_node.last_visited:
            memory_penalty = 0.5

        # Combine with dynamic weights and memory penalty
        heuristic = (weight_current * distance_to_current +
                    weight_destination * distance_to_destination +
                    weight_centrality * centrality) + weight_memory * memory_penalty

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    # Update memory (simplified for demonstration)
    if not hasattr(select_next_node, 'last_visited'):
        select_next_node.last_visited = set()
    select_next_node.last_visited.add(next_node)
    if len(select_next_node.last_visited) > 2:  # Keep memory size limited
        select_next_node.last_visited.remove(next(iter(select_next_node.last_visited)))

    return next_node
