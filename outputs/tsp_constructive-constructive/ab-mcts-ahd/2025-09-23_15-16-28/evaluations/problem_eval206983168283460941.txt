def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        weight = remaining_nodes / (remaining_nodes + 1)
        score = (1 - weight) * distance_to_current + weight * distance_to_destination

        # Lookahead mechanism: evaluate potential future paths
        if remaining_nodes > 1:
            future_unvisited = unvisited_nodes - {node}
            future_current = node
            future_min_distance = min(distance_matrix[future_current][n] for n in future_unvisited)
            score += 0.3 * future_min_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
