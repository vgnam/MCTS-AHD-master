def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    threshold = float('inf')

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 + (0.4 * (remaining_nodes / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)

        if max_distance >= threshold:
            continue

        proximity_score = (1 - dynamic_weight) * (1 / (distance_to_current + 1e-10))
        connectivity_score = dynamic_weight * (1 / (distance_to_destination + 1e-10))
        total_score = proximity_score + connectivity_score

        if total_score > best_score:
            best_score = total_score
            next_node = node
            threshold = max_distance * 1.1

    return next_node
