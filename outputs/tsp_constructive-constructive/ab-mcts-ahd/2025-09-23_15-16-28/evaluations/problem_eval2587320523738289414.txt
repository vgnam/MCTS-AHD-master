def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        # Dynamic weight based on remaining nodes and progress
        weight = 1.0 - (remaining_nodes / total_nodes)
        proximity = distance_matrix[current_node][node]
        progress = distance_matrix[node][destination_node]

        # Lookahead factor: consider the next best step
        if remaining_nodes > 1:
            lookahead_nodes = [n for n in unvisited_nodes if n != node]
            next_proximity = min(distance_matrix[node][n] for n in lookahead_nodes)
            lookahead_factor = next_proximity / max(distance_matrix[node][n] for n in lookahead_nodes)
        else:
            lookahead_factor = 0

        # Combined score with dynamic weighting and lookahead
        score = (weight * proximity) + ((1 - weight) * progress) + (0.3 * lookahead_factor * progress)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
