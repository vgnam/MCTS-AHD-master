def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.5 ** (1 / remaining_nodes)  # Exponential decay based on remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        base_score = distance_to_current * distance_to_destination * decay_factor

        # Penalty term to discourage revisiting nodes (simplified for this example)
        penalty = 0.1 * (1 if node in [current_node, destination_node] else 0)
        weighted_score = base_score + penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
