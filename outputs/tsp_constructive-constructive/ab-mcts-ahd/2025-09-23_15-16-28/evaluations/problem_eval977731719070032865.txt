def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to all other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Adaptive weight based on remaining nodes and current node's centrality
        adaptive_weight = (0.5 + 0.5 * (1 - total_unvisited / (total_unvisited + 1))) * (1 - centrality / max(1, sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited))

        # Novel priority score combining distance and centrality
        priority_score = (distance_to_current + distance_to_destination) + adaptive_weight * (distance_to_current * distance_to_destination) / max(1, centrality)

        if priority_score < min_score:
            min_score = priority_score
            next_node = node

    return next_node
