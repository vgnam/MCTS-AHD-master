def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight_current = 1.0 / (1.0 + remaining_nodes)
        weight_future = 1.0 - weight_current

        weighted_distance = (weight_current * distance_to_current) + (weight_future * distance_to_destination)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
