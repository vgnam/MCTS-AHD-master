def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    current_to_dest_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        current_weight = 0.5 + 0.2 * (remaining_nodes / (remaining_nodes + 1))
        destination_weight = 1 - current_weight

        # Adaptive penalty for nodes significantly farther from destination
        penalty = 1.0
        if destination_distance > 1.5 * current_to_dest_distance:
            penalty = 1.2

        # Score calculation with penalty
        score = (current_weight * current_distance + destination_weight * destination_distance) * penalty

        # Bonus for nodes close to both current and destination when few nodes remain
        if remaining_nodes <= 3:
            score -= 0.1 * (current_distance + destination_distance)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
