def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Path memory: track visited nodes to penalize revisits
    visited_nodes = set(distance_matrix.keys()) - set(unvisited_nodes)
    path_memory = {node: 1.0 for node in unvisited_nodes}

    # Adjust path memory weights based on visit frequency
    for node in unvisited_nodes:
        for visited in visited_nodes:
            if distance_matrix[visited][node] < min(distance_matrix[visited][n] for n in unvisited_nodes if n != node):
                path_memory[node] *= 0.9  # Penalize nodes frequently visited in early stages

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic centrality: considers both immediate and long-term connectivity
        immediate_centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        long_term_centrality = sum(distance_matrix[node][other] for other in distance_matrix.keys() if other != node) / (total_nodes - 1)
        centrality = 0.6 * immediate_centrality + 0.4 * long_term_centrality

        # Adaptive weight scaling with stage-dependent factors
        progress_ratio = (total_nodes - remaining_nodes) / total_nodes
        weight_current = 0.5 - 0.3 * progress_ratio
        weight_destination = 0.4 + 0.3 * progress_ratio
        weight_centrality = 0.2 * (1 - progress_ratio)
        weight_memory = 0.1 * (1 - progress_ratio)

        # Combine with dynamic weights and path memory
        heuristic = (weight_current * distance_to_current +
                     weight_destination * distance_to_destination +
                     weight_centrality * centrality +
                     weight_memory * path_memory[node])

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
