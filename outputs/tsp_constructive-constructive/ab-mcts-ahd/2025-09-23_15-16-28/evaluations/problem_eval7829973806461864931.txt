def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + total_unvisited)  # Decreases as unvisited nodes decrease
    novelty_weight = 0.7  # Higher weight for novelty in early stages
    distances = []
    novelty_scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        novelty_score = 1.0 / (1.0 + distance_to_current + distance_to_destination)  # Novelty inversely proportional to combined distance
        novelty_scores.append(novelty_score)
        distances.append((distance_to_current, distance_to_destination))

    # Normalize novelty scores
    max_novelty = max(novelty_scores) if novelty_scores else 1.0
    normalized_novelty = [n / max_novelty for n in novelty_scores]

    # Calculate selection probabilities
    probabilities = []
    for i, (d_current, d_dest) in enumerate(distances):
        weighted_distance = (1 - novelty_weight) * d_current + novelty_weight * d_dest
        novelty_contribution = novelty_weight * normalized_novelty[i]
        score = weighted_distance + novelty_contribution
        probabilities.append(np.exp(-score / temperature))

    # Normalize probabilities
    sum_prob = sum(probabilities)
    probabilities = [p / sum_prob for p in probabilities]

    # Select next node based on probabilities
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
