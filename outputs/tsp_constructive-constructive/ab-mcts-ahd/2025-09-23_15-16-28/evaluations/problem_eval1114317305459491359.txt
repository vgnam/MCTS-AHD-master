def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    min_score = float('inf')
    next_node = None

    # Calculate centroid of unvisited nodes
    centroid_x = sum(node[0] for node in unvisited_nodes) / total_unvisited if unvisited_nodes else 0
    centroid_y = sum(node[1] for node in unvisited_nodes) / total_unvisited if unvisited_nodes else 0
    centroid = (centroid_x, centroid_y)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate distance to centroid
        distance_to_centroid = ((node[0] - centroid[0])**2 + (node[1] - centroid[1])**2)**0.5

        # Dynamic weight based on unvisited nodes and centroid influence
        weight_current = 1.0 / total_unvisited if total_unvisited > 1 else 1.0
        weight_destination = 1.0 - weight_current
        weight_centroid = 0.5 * (1.0 / (total_unvisited + 1))  # Additional centroid influence

        combined_score = (weight_current * distance_to_current +
                          weight_destination * distance_to_destination +
                          weight_centroid * distance_to_centroid)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
