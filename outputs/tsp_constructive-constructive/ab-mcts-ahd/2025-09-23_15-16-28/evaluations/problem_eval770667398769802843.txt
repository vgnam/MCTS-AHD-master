def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    progress_threshold = 0.7  # Threshold for considering progress toward destination

    for node in unvisited_nodes:
        # Normalized distances
        norm_dist_to_current = distance_matrix[current_node][node] / max(distance_matrix[current_node])
        norm_dist_to_dest = distance_matrix[node][destination_node] / max(distance_matrix[node])

        # Dynamic weight adjustment
        if norm_dist_to_dest < progress_threshold:
            weight = 0.3  # Favor nodes that accelerate progress
        else:
            weight = 0.7  # Favor nodes closer to current position

        # Combined score
        score = -weight * norm_dist_to_current - (1 - weight) * norm_dist_to_dest

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
