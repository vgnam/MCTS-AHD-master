def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    visited_nodes = total_nodes - remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate dynamic centrality considering both visited and unvisited nodes
        all_nodes = set(range(total_nodes))
        unvisited = set(unvisited_nodes)
        visited = all_nodes - unvisited
        centrality = sum(distance_matrix[node][other] for other in all_nodes if other != node) / max(1, total_nodes - 1)

        # Non-linear weight adjustment
        weight_current = max(0.2, 0.5 * (remaining_nodes / total_nodes) ** 2)
        weight_destination = min(0.7, 0.3 + 0.4 * (visited_nodes / total_nodes))
        weight_centrality = 1.0 - weight_current - weight_destination

        # Reinforcement for destination weights as tour progresses
        if visited_nodes > total_nodes // 2:
            weight_destination *= 1.2
            weight_current *= 0.8

        # Combine with dynamic weights
        heuristic = weight_current * distance_to_current + weight_destination * distance_to_destination + weight_centrality * centrality

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
