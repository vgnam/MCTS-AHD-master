def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 0.3 * (remaining_nodes / (remaining_nodes + 1))
    exploitation_weight = 0.7 * (1 - exploration_weight)

    # Calculate average distance metrics
    avg_to_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    avg_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic scoring combining exploration and exploitation
        exploration_score = -distance_to_current / (avg_to_current + 1e-6)
        exploitation_score = -distance_to_destination / (avg_to_destination + 1e-6)

        # Adaptive phase-based weighting
        phase_factor = min(1.0, 2 * (remaining_nodes / (remaining_nodes + 1)))
        weighted_score = (exploration_weight * exploration_score + exploitation_weight * exploitation_score) * phase_factor

        # Add penalty for potential revisits (simplified)
        if remaining_nodes > 1:
            weighted_score -= 0.1 * (distance_to_current + distance_to_destination)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
