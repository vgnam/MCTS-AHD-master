def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_value = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalized distance ratio (avoids extreme values)
        if distance_to_current + distance_to_destination == 0:
            ratio = 0
        else:
            ratio = (distance_to_current / distance_to_destination) + (distance_to_destination / distance_to_current)

        # Dynamic penalty factor (increases with fewer unvisited nodes)
        penalty_factor = 1 + (1 / (len(unvisited_nodes) + 1))

        weighted_value = ratio * penalty_factor

        if weighted_value < min_weighted_value:
            min_weighted_value = weighted_value
            next_node = node

    return next_node
