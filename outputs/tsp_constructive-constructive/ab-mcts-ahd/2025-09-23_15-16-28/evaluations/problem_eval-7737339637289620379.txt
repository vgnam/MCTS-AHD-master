def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)

        # Dynamic weight based on phase (early: focus on max_distance, late: focus on sum)
        phase_weight = 1.0 if remaining_nodes > len(unvisited_nodes) / 2 else 0.5

        # Penalty for nodes close to destination to avoid early clustering
        penalty = 0.1 if distance_to_destination < 0.3 * max_distance else 0.0

        # Score combines weighted max_distance and sum, with penalty
        score = (phase_weight * max_distance + (1 - phase_weight) * (distance_to_current + distance_to_destination)) * (1 + penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
