def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')

    # Calculate average distances to current and destination nodes
    avg_to_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    avg_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    # Dynamic weights based on average distances
    weight_to_current = avg_to_destination / (avg_to_current + avg_to_destination)
    weight_to_destination = avg_to_current / (avg_to_current + avg_to_destination)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted sum with dynamic coefficients
        weighted_distance = (weight_to_current * distance_to_current) + (weight_to_destination * distance_to_destination)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
