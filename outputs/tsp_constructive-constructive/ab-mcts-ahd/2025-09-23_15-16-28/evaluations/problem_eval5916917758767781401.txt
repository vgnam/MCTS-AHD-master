def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_distance = float('inf')
    decay_factor = 0.7

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        total_distance = distance_to_current + decay_factor * distance_to_destination

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Local search: evaluate neighboring nodes to refine selection
    for neighbor in unvisited_nodes:
        if neighbor != next_node:
            temp_distance = distance_matrix[current_node][neighbor] + distance_matrix[neighbor][next_node] + distance_matrix[next_node][destination_node]
            if temp_distance < min_total_distance:
                min_total_distance = temp_distance
                next_node = neighbor

    return next_node
