def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            weight_current = 0.6 - (0.2 * (remaining_nodes / total_nodes))
            weight_dest = 0.4 + (0.2 * (remaining_nodes / total_nodes))
            penalty = 0.1 * (1 - (distance_to_dest / max(distance_matrix[node]))) if max(distance_matrix[node]) != 0 else 0
        else:
            weight_current = 0.5
            weight_dest = 0.5
            penalty = 0

        score = (weight_current * distance_to_current) + (weight_dest * distance_to_dest) - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
