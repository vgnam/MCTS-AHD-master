def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to other unvisited nodes (connectivity)
        connectivity = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Phase-based weight calculation
        phase_factor = remaining_nodes / total_nodes
        if phase_factor > 0.7:
            # Early phase: prioritize proximity to current node
            weight_current = 0.5 + 0.2 * phase_factor
            weight_destination = 0.3 - 0.1 * phase_factor
            weight_connectivity = 0.2
        elif 0.3 < phase_factor <= 0.7:
            # Mid phase: balance current and destination
            weight_current = 0.4
            weight_destination = 0.4
            weight_connectivity = 0.2
        else:
            # Late phase: prioritize destination proximity
            weight_current = 0.3
            weight_destination = 0.5 + 0.2 * (1 - phase_factor)
            weight_connectivity = 0.2

        # Normalize weights
        total_weight = weight_current + weight_destination + weight_connectivity
        weight_current /= total_weight
        weight_destination /= total_weight
        weight_connectivity /= total_weight

        # Combine with dynamic weights
        heuristic = (weight_current * distance_to_current +
                     weight_destination * distance_to_destination +
                     weight_connectivity * connectivity)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
