def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 1.0 / (1 + remaining_nodes)
        euclidean_score = (distance_to_current ** 2 + distance_to_destination ** 2) ** 0.5
        manhattan_score = distance_to_current + distance_to_destination
        combined_score = (1 - weight) * euclidean_score + weight * manhattan_score

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
