def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    scale_factor = 0.5 * (1 + 1 / (remaining_nodes + 1))  # Dynamic scaling

    # Calculate average distance to other nodes for centrality
    centrality_weights = {}
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
        centrality_weights[node] = avg_distance

    # Calculate average distance of current path
    avg_path_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = max(0, distance_to_current - 1.5 * avg_path_distance)  # Adaptive penalty
        centrality_score = centrality_weights[node]  # Lower centrality is better

        combined_score = distance_to_current + scale_factor * distance_to_destination + penalty + 0.3 * centrality_score

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
