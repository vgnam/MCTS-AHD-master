def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        # Base distances
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality calculation (average distance to other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, remaining_nodes - 1)

        # Exploration factor: encourages visiting less central nodes early, more central nodes later
        exploration_factor = 1 - (centrality / max(distance_matrix[node])) if max(distance_matrix[node]) > 0 else 0
        exploration_weight = 0.3 * (1 - remaining_nodes / total_nodes)  # Increases as path progresses

        # Dynamic weight adjustment
        weight_current = max(0.3, 0.5 - 0.15 * (remaining_nodes / total_nodes))
        weight_destination = max(0.3, 0.4 + 0.15 * (remaining_nodes / total_nodes))
        weight_centrality = 0.2

        # Combined heuristic with exploration factor
        heuristic = (weight_current * distance_to_current +
                    weight_destination * distance_to_destination +
                    weight_centrality * centrality +
                    exploration_weight * exploration_factor)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
