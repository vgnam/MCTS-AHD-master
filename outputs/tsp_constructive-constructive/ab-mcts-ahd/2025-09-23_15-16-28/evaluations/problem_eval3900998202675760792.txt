def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.6
    adjustment_factor = 0.4 * (remaining_nodes / (remaining_nodes + 1))

    # Calculate average distance of unvisited nodes to the destination
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Adjust weight based on the ratio of current distance to average distance
        distance_ratio = distance_to_destination / avg_distance if avg_distance != 0 else 1.0
        adjusted_weight = base_weight * (1 + adjustment_factor * (1 - distance_ratio))

        weighted_distance = (adjusted_weight * distance_to_current) + ((1 - adjusted_weight) * distance_to_destination)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
