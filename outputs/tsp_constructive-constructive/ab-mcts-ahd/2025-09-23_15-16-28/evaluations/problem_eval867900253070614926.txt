def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 1.0 / (remaining_nodes ** 0.3)  # Slower decay than original

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 1

        # Weighted distance with centrality and dynamic decay
        weighted_distance = (distance_to_current * distance_to_destination) / (centrality * decay_factor)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
