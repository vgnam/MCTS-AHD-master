def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight adjustment based on remaining nodes
    weight = 1 / (1 + math.exp(-(remaining_nodes - len(distance_matrix)/2)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        # Normalize distances
        normalized_current = distance_to_current / max_distance
        normalized_destination = distance_to_destination / max_distance

        # Incorporate path diversity by considering average distance to remaining nodes
        avg_remaining_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        normalized_avg = avg_remaining_distance / max_distance

        # Combined score with dynamic weight and diversity factor
        score = (weight * normalized_current) + ((1 - weight) * normalized_destination) + (0.2 * normalized_avg)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
