def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        # Dynamic weight adjustment
        weight_current = max(0.3, 0.4 - 0.05 * (remaining_nodes / len(distance_matrix)))
        weight_destination = max(0.3, 0.2 + 0.05 * (remaining_nodes / len(distance_matrix)))

        # Normalized components
        normalized_current = distance_to_current / max_distance
        normalized_destination = distance_to_destination / max_distance
        potential_future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes

        # Weighted score
        weighted_score = (weight_current * normalized_current) + (weight_destination * normalized_destination) + (0.4 * potential_future_cost / max_distance)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
