defined as the difference between the direct distance to the destination and the distance through the candidate node. The heuristic dynamically adjusts weights based on the number of unvisited nodes, favoring closer nodes when few remain and prioritizing savings when more nodes are left.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_heuristic_value = -float('inf')
    num_unvisited = len(unvisited_nodes)
    direct_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        savings = direct_distance - (distance_to_current + distance_to_destination)

        weight_current = 1 / (1 + num_unvisited)
        weight_savings = 1 - weight_current
        heuristic_value = weight_current * distance_to_current + weight_savings * savings

        if heuristic_value > max_heuristic_value:
            max_heuristic_value = heuristic_value
            next_node = node

    return next_node
