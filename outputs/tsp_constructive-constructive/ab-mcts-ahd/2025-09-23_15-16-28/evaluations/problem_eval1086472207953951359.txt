def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on path length and node count
        node_density = 1 / (len(unvisited_nodes) + 1)
        dynamic_weight = min(0.7, 0.3 + node_density * 0.4)

        # Exponential decay for future distances
        future_weight = 0.5 * (0.8 ** (len(unvisited_nodes) - 1))
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        variance_penalty = sum((distance_matrix[node][n] - avg_future_distance) ** 2 for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Novel scoring mechanism
        score = (1 - dynamic_weight) * distance_to_current + dynamic_weight * (future_weight * avg_future_distance + (1 - future_weight) * distance_to_destination) + 0.2 * variance_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
