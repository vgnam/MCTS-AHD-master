def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_ratio = (len(unvisited_nodes) + 1) / (total_unvisited + 1)  # Normalized progress (0 to 1)
    weight_factor = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))  # Sigmoid function for smooth transition

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to all other unvisited nodes)
        centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Novel scoring equation combining distance, centrality, and weighted progress
        distance_score = weight_factor * distance_to_destination + (1 - weight_factor) * distance_to_current
        novelty_score = 0.3 * centrality_score  # Higher centrality nodes get novelty bonus
        combined_score = distance_score + novelty_score

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
