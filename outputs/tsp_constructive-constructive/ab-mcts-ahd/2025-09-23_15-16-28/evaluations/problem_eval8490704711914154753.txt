importance of the distance to the destination as fewer nodes remain, while also considering the minimum of the two distances to balance exploration and local optimization, ensuring a tighter bound on the path's total length.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    threshold = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.3 if remaining_nodes > 2 else 0.7

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weighted_sum = (weight_factor * distance_to_destination) + ((1 - weight_factor) * distance_to_current)
        min_distance = min(distance_to_current, distance_to_destination)

        if min_distance < threshold and weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node
            threshold = min_distance

    return next_node
