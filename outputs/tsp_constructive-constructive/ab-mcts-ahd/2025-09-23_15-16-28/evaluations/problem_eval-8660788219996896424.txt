def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality as the average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Combine distance and centrality with a weighted heuristic
        heuristic = 0.5 * distance_to_current + 0.3 * distance_to_destination + 0.2 * centrality

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
