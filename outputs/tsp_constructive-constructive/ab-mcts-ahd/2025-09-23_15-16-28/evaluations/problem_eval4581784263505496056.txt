def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance to destination for unvisited nodes
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Product distance component
        product_distance = distance_to_current * distance_to_destination

        # Dynamic weight component
        if distance_to_destination == 0:
            weight = 1.0
        else:
            weight = 1.0 / distance_to_destination

        # Adaptive scaling factor
        if avg_distance == 0:
            scaling_factor = 1.0
        else:
            scaling_factor = distance_to_destination / avg_distance

        # Combined score
        score = product_distance * weight * scaling_factor * (1.0 / (1.0 + remaining_nodes))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
