def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Dynamic weight: prioritize centrality early, destination later
        weight_centrality = remaining_nodes / (remaining_nodes + 2)
        weight_destination = 1 - weight_centrality

        # Combine weighted scores
        score = (weight_centrality * centrality +
                (1 - weight_centrality) * (weight_destination * distance_to_destination +
                                          (1 - weight_destination) * distance_to_current))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
