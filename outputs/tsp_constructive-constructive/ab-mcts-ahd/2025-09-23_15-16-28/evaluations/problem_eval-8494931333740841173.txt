def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = num_unvisited + 1  # Assuming current_node is already visited
    visited_ratio = 1 - (num_unvisited / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with logarithmic scaling
        weight_current = 1 / (1 + num_unvisited)
        weight_destination = 1 - weight_current
        weight_destination *= (1 + math.log(1 + visited_ratio))  # Emphasize long-term savings

        weighted_sum = weight_current * distance_to_current + weight_destination * distance_to_destination

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
