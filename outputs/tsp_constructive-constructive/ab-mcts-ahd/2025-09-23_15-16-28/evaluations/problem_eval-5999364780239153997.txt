importance to the distance to the current node early in the tour and more to the product later, creating a different balance between proximity and long-term savings.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_product = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = total_unvisited / (total_unvisited + 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        product_distance = distance_to_current * distance_to_destination
        weighted_product = (1 - progress_factor) * product_distance + progress_factor * distance_to_current

        if weighted_product < min_weighted_product:
            min_weighted_product = weighted_product
            next_node = node

    return next_node
