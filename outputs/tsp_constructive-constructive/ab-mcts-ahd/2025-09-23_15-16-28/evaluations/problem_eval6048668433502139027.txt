def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    distance_to_destination = distance_matrix[current_node][destination_node]

    # Dynamic weight factor using sigmoid function
    sigmoid_input = (total_unvisited / len(distance_matrix)) * 10 - 5
    weight_factor = 1 / (1 + math.exp(-sigmoid_input))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        weighted_distance = (1 - weight_factor) * distance_to_current + weight_factor * remaining_distance

        # Penalize nodes that are too close to the current node to avoid cycles
        if distance_to_current < distance_to_destination * 0.2:
            weighted_distance *= 1.5

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
