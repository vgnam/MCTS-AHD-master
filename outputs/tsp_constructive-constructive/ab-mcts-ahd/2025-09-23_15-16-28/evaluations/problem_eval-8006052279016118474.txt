def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        dynamic_weight = (1 + math.log(remaining_nodes + 1)) / (1 + current_path_length)
        penalty = 1 + (node in visited_history) * (1 / remaining_nodes)
        weighted_distance = (distance_to_current * distance_to_destination * dynamic_weight) / (remaining_nodes ** 0.5) * penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    visited_history.add(next_node)
    return next_node
