def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weights based on path progress and remaining nodes
        current_weight = 0.4 + 0.3 * (remaining_nodes / (remaining_nodes + 1))
        destination_weight = 1.2 - current_weight

        # Penalty for nodes too far from destination and bonus for path efficiency
        efficiency_factor = (current_distance + destination_distance) / (current_to_dest + 1e-6)
        score = (current_weight * current_distance) + (destination_weight * destination_distance * efficiency_factor)

        # Additional penalty for nodes that disrupt path efficiency
        if destination_distance > 1.3 * current_to_dest:
            score *= 1.5

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
