def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment: prioritize distance_to_current when far from destination
        weight = 0.7 if distance_matrix[current_node][destination_node] > sum(distance_matrix[0]) / len(distance_matrix) else 0.3
        weighted_sum = weight * distance_to_current + (1 - weight) * distance_to_destination

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
