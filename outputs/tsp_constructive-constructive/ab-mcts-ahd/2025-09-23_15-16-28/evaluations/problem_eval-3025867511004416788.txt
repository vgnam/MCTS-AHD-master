def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 1))
    exponent = 1.0 + 2.0 * progress_factor  # Exponent increases with progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        direct_distance = distance_matrix[current_node][destination_node]
        path_efficiency = direct_distance / (distance_to_current + distance_to_destination)

        # Weighted score combines proximity and path efficiency with progress-dependent exponent
        weighted_score = (distance_to_current ** exponent) + (1.0 - path_efficiency ** exponent)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
