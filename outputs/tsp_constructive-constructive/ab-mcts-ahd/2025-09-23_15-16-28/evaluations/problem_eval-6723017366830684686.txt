def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and node centrality
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        weight = (remaining_nodes / (remaining_nodes + 1)) * (1 + centrality_penalty / total_nodes)

        # Penalize revisiting nodes that are not the destination
        revisit_penalty = 1 if node != destination_node else 0
        score = (1 - weight) * distance_to_current + weight * distance_to_destination + revisit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
