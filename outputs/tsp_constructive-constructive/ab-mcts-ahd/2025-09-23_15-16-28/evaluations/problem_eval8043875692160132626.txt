def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        product_distance = distance_to_current * distance_to_destination
        normalized_product = product_distance / max_distance
        weight = remaining_nodes / (remaining_nodes + 1)
        path_progress = 1 - (remaining_nodes / len(distance_matrix))

        score = (1 - weight) * distance_to_current + weight * (normalized_product + distance_to_destination) * (1 + path_progress)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
