def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    weight_factor = 0.5 * (1.0 / (1.0 + total_unvisited)) + 0.5 * progress_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        path_deviation_penalty = distance_matrix[current_node][destination_node] - distance_to_current - distance_to_destination
        weighted_distance = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination + 0.2 * path_deviation_penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
