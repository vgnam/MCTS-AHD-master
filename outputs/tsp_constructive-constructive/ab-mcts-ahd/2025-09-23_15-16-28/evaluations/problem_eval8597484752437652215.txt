def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality of the node (average distance to other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Dynamic weight adjustment: prioritize centrality as remaining nodes decrease
        weight_current = 0.5 * (remaining_nodes / (remaining_nodes + 1))
        weight_destination = 0.5 - (0.4 * (remaining_nodes / (remaining_nodes + 1)))
        weight_centrality = 0.1 * (1 - remaining_nodes / (remaining_nodes + 1))

        weighted_sum = (weight_current * distance_to_current +
                        weight_destination * distance_to_destination +
                        weight_centrality * centrality)

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
