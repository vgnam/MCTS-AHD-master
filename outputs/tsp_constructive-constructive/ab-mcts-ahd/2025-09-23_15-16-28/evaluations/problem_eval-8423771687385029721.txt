def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    num_unvisited = len(unvisited_nodes)
    current_iteration = num_unvisited  # Higher iterations prioritize future efficiency

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes and iteration count
        weight_current = 0.5 + 0.1 * (current_iteration / num_unvisited)
        weight_future = 0.5 - 0.1 * (current_iteration / num_unvisited)

        # Add node centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1)
        weighted_distance = (weight_current * distance_to_current +
                            weight_future * distance_to_destination +
                            0.1 * centrality)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
