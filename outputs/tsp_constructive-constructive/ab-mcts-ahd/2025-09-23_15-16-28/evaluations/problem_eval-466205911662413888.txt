def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        # Calculate average distance to remaining unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Dynamic weights: prioritize current proximity, with global perspective decaying as nodes are visited
        weight_current = 0.7
        weight_global = 0.3 * (num_unvisited / len(distance_matrix))  # Decay global weight as tour progresses

        weighted_distance = (weight_current * distance_to_current) + (weight_global * avg_distance)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
