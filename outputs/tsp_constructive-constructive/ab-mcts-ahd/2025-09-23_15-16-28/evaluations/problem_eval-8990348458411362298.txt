def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_distance = float('inf')

    remaining_nodes = len(unvisited_nodes)
    learning_rate = 0.1  # Decay factor for novelty term
    novelty_decay = learning_rate ** (1.0 / remaining_nodes) if remaining_nodes > 0 else 0.0

    # Initialize novelty scores (simplified for example; in practice, track visitation history)
    novelty_scores = {node: 1.0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        novelty_term = novelty_scores[node] * novelty_decay

        # Dynamic weights: prioritize local, then global, then novelty
        weight_local = remaining_nodes / (1.0 + remaining_nodes)
        weight_global = 1.0 - weight_local
        weight_novelty = 0.5 * weight_global  # Novelty becomes more influential as global term decreases

        total_distance = (weight_local * distance_to_current +
                          weight_global * distance_to_destination +
                          weight_novelty * novelty_term)

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
