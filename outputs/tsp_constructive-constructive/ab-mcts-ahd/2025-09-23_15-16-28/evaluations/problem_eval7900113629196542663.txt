def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with penalty and bonus terms
        weight = remaining_nodes / (remaining_nodes + 1)
        penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        bonus = distance_matrix[current_node][destination_node] - distance_to_destination

        score = (1 - weight) * distance_to_current + weight * distance_to_destination + penalty - bonus

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
