importance, where weights for distance to current and destination nodes are dynamically adjusted using a sigmoid function of the remaining nodes, while incorporating a novelty measure that rewards nodes with high average distance to all other nodes, creating a balance between proximity and exploration.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate novelty (average distance to all other unvisited nodes)
        novelty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Adaptive weight scaling using sigmoid function
        alpha = 0.1
        weight_current = 1 / (1 + math.exp(-alpha * (remaining_nodes - len(distance_matrix)/2)))
        weight_destination = 1 - weight_current
        weight_novelty = 0.3

        # Combine with adaptive weights
        heuristic = weight_current * distance_to_current + weight_destination * distance_to_destination + weight_novelty * novelty

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
