def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 1))  # Normalized progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            avg_distance_to_unvisited = 0.0
        else:
            avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        long_term_savings = distance_to_destination + avg_distance_to_unvisited
        weighted_score = (1 - progress_factor) * distance_to_current + progress_factor * long_term_savings

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
