def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    total_unvisited = len(unvisited_nodes)

    # Dynamic weight adjustment based on path progress and node density
    remaining_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = sum(sum(row) for row in distance_matrix) / (len(distance_matrix) * len(distance_matrix))

    # Adjust weights: favor destination guidance as path nears completion, balance centrality and proximity
    proximity_weight = max(0.3, 0.5 * (1 - remaining_path_length / avg_distance))
    destination_weight = min(0.5, 0.3 + 0.2 * (remaining_path_length / avg_distance))
    centrality_weight = 1 - proximity_weight - destination_weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality with adjusted normalization
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Apply dynamic weights
        heuristic = (proximity_weight * distance_to_current +
                     destination_weight * distance_to_destination +
                     centrality_weight * centrality)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
