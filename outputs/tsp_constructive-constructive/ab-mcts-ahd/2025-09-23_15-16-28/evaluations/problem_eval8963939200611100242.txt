def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    node_density = total_nodes / (sum(sum(row) for row in distance_matrix) / (total_nodes * total_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        normalized_ratio = ratio / max_distance

        centrality = sum(distance_matrix[node]) / total_nodes
        dynamic_centrality = centrality * (1 + (1 - node_density))

        if remaining_nodes <= total_nodes / 3:
            weight_cost = 0.2
            weight_ratio = 0.2
            weight_centrality = 0.6
        else:
            weight_cost = 0.4
            weight_ratio = 0.4
            weight_centrality = 0.2

        memory_penalty = 1.0 if node in unvisited_nodes else 1.5

        score = (weight_cost * distance_to_current +
                weight_ratio * normalized_ratio +
                weight_centrality * dynamic_centrality) * memory_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
