def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_score = float('inf')
    next_node = None
    progress = 1 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Inverted progress (1 to 0)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        weighted_distance = (1 - progress) * immediate_distance + progress * (future_distance + 0.5 * avg_distance_to_remaining)
        penalty = 0.3 * avg_distance_to_remaining  # Penalize nodes with high average distances

        total_score = weighted_distance + penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
