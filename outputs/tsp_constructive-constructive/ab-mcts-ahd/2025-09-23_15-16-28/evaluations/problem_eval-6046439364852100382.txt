importance and a progressive emphasis on destination proximity, while maintaining a dynamic centrality component that responds to the distribution of unvisited nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality with spatial distribution consideration
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        centrality *= (1 + 0.5 * (1 - progress))  # Increase importance as tour progresses

        # Adaptive weight scaling
        weight_current = max(0.2, 0.5 * (1 - progress**2))  # Quadratic decay
        weight_destination = min(0.6, 0.3 + 0.3 * progress)  # Linear increase
        weight_centrality = 0.4 + 0.2 * progress  # Progressive emphasis

        # Normalize weights
        total_weight = weight_current + weight_destination + weight_centrality
        weight_current /= total_weight
        weight_destination /= total_weight
        weight_centrality /= total_weight

        # Combine with adaptive weights
        heuristic = (weight_current * distance_to_current +
                    weight_destination * distance_to_destination +
                    weight_centrality * centrality)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
