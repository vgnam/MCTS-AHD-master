def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_ratio = 1.0 / (1.0 + num_unvisited)
    weight_distance = 1.0 - weight_ratio

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited
        score = weight_ratio * ratio + weight_distance * distance_to_current + 0.3 * centrality_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
