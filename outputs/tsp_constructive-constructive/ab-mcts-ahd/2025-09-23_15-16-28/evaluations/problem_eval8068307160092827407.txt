def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    max_utility = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weighting: prioritize destination proximity as nodes decrease
        weight = (remaining_nodes / (remaining_nodes + 1)) if remaining_nodes > 0 else 1.0
        weighted_score = distance_to_current + weight * distance_to_dest

        utility = 1 / weighted_score  # Higher utility for lower scores

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
