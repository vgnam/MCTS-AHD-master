def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    distance_to_destination = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest_from_node = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight balancing: favors destination when far, current when close
        weight = 0.5 * (1 + (distance_to_destination - distance_to_current) / (distance_to_destination + distance_to_current + 1e-6))

        # Penalize nodes that are too far from current or too central (too many close options)
        penalty = max(0, distance_to_current - 1.5 * distance_to_destination) + 0.1 * centrality

        # Score combines weighted distances and penalties
        score = weight * distance_to_current + (1 - weight) * distance_to_dest_from_node + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
