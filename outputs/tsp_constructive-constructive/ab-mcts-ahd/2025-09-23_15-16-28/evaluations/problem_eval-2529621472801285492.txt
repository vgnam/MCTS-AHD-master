def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on node position and remaining nodes
        position_weight = (num_unvisited - unvisited_nodes.index(node)) / num_unvisited
        distance_weight = 1 - position_weight

        # Penalty for revisiting nodes to avoid cycles
        revisit_penalty = 1 if node in unvisited_nodes else 1.5

        weighted_score = (position_weight * distance_to_current +
                         distance_weight * distance_to_destination) * revisit_penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
