def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic scaling factor based on remaining nodes
        scaling_factor = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))

        # Penalty term for nodes that deviate from the current path direction
        direction_penalty = 0.2 * abs(distance_to_current - distance_to_destination)

        combined_score = distance_to_current + scaling_factor * distance_to_destination + direction_penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
