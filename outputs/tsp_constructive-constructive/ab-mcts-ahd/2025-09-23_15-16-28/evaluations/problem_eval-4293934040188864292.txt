def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_utility = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalized distance ratio
        normalized_ratio = (distance_to_current / distance_to_destination) if distance_to_destination != 0 else 0

        # Adaptive weight based on remaining path length
        weight = 1.0 / (1.0 + remaining_nodes)
        utility = (1.0 - normalized_ratio) * (1.0 - weight) + (1.0 / (1.0 + distance_to_destination)) * weight

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
