def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    num_unvisited = len(unvisited_nodes)

    # Precompute node centrality (average distance to all other nodes)
    node_centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        node_centrality[node] = total_distance / (num_unvisited - 1) if num_unvisited > 1 else 0

    max_centrality = max(node_centrality.values()) if node_centrality else 1.0

    for node in unvisited_nodes:
        # Dynamic weights based on exploration/exploitation phase
        exploration_weight = min(0.8, 0.2 + (1 - num_unvisited / len(distance_matrix)) * 0.6)
        exploitation_weight = 1.0 - exploration_weight

        # Sigmoid-weighted distance function
        local_distance = distance_matrix[current_node][node]
        global_distance = node_centrality[node]

        # Normalize distances
        norm_local = local_distance / max(distance_matrix[current_node][n] for n in unvisited_nodes) if unvisited_nodes else 1.0
        norm_global = global_distance / max_centrality if max_centrality > 0 else 0.5

        # Sigmoid function for smooth transition
        sigmoid = lambda x: 1 / (1 + math.exp(-x))
        weighted_local = sigmoid((norm_local - 0.5) * 10)  # Higher weight for closer nodes
        weighted_global = sigmoid((norm_global - 0.5) * 10)  # Higher weight for more central nodes

        # Combined score
        score = (exploitation_weight * weighted_local) + (exploration_weight * weighted_global)

        # Add probabilistic element based on centrality
        if random.random() < (global_distance / (max_centrality + 1e-6)):
            score *= 1.2  # Increase score for central nodes with probability

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
