def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    phase_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))
    next_node = None
    max_utility = -float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if phase_factor > 0.5:
            utility = (distance_to_current / (1 + distance_to_destination)) * (1 - phase_factor)
        else:
            utility = (distance_to_destination / (1 + distance_to_current)) * phase_factor

        alignment_penalty = (distance_to_current + distance_to_destination) / (distance_matrix[current_node][destination_node] + 1e-6)
        utility *= (1 - alignment_penalty)

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
