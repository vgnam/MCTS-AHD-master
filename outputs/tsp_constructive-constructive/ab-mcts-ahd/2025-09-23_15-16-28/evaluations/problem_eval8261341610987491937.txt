def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        product_distance = distance_to_current * distance_to_destination
        normalized_product = product_distance / max_distance

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        weight_current = max(0.4, 0.5 - 0.1 * (remaining_nodes / len(distance_matrix)))
        weight_destination = max(0.4, 0.3 + 0.1 * (remaining_nodes / len(distance_matrix)))
        weight_product = 0.2
        weight_centrality = 0.1

        score = (weight_current * distance_to_current +
                weight_destination * distance_to_destination +
                weight_product * normalized_product +
                weight_centrality * centrality)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
