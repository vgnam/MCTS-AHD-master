def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    alpha = 0.5  # Base weight for distance to current node
    beta = 0.3   # Base weight for distance to destination node
    gamma = 0.2  # Weight for exploration penalty

    # Dynamic adjustment factor based on tour progress
    progress = 1 - (len(unvisited_nodes) / len(distance_matrix))
    adjustment = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid function

    # Calculate average distance to already visited nodes
    visited_nodes = [node for node in range(len(distance_matrix)) if node not in unvisited_nodes and node != current_node]
    avg_distances = {}
    for node in unvisited_nodes:
        if visited_nodes:
            avg_distances[node] = sum(distance_matrix[node][v] for v in visited_nodes) / len(visited_nodes)
        else:
            avg_distances[node] = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        exploration_penalty = gamma * avg_distances[node]

        # Adjust weights dynamically
        dynamic_alpha = alpha * (1 - adjustment)
        dynamic_beta = beta * adjustment

        weighted_sum = dynamic_alpha * distance_to_current + dynamic_beta * distance_to_destination + exploration_penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
