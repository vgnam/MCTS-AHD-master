def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight_current = 0.8 - 0.5 * (1 - total_unvisited / len(unvisited_nodes))
        weight_destination = 1 - weight_current

        # Penalize nodes too close to current node to avoid loops
        proximity_penalty = 0.1 * (1 / (current_distance + 1e-6))

        # Bonus for nodes far from destination to encourage exploration
        exploration_bonus = 0.2 * (destination_distance / max(distance_matrix[node]))

        score = (weight_current * current_distance + weight_destination * destination_distance) - proximity_penalty + exploration_bonus

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
