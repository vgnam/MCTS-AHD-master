def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight for destination distance
        dest_weight = 1.0 / (total_unvisited + 1)  # +1 to avoid division by zero

        # Penalty for high centrality (sum of distances to all other nodes)
        centrality_penalty = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Score combines weighted destination distance, current distance, and centrality penalty
        score = (destination_distance ** dest_weight) * (current_distance ** 0.5) + (centrality_penalty * 0.1)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
