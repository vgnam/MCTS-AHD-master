def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        normalized_distance = distance_to_current / (distance_to_destination + 1e-6)
        detour_risk = (distance_to_current + distance_to_destination) / (distance_matrix[current_node][destination_node] + 1e-6)
        node_centrality = centrality[node] / (max(centrality.values()) + 1e-6) if centrality else 0

        # Dynamic weights based on progress and centrality
        proximity_weight = progress_factor * (1 - node_centrality)
        detour_weight = (1 - progress_factor) * node_centrality
        centrality_weight = 0.3 * (1 - progress_factor)

        score = (proximity_weight * normalized_distance +
                 detour_weight * detour_risk +
                 centrality_weight * node_centrality)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
