def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_factor = (total_unvisited ** 0.5) / ((total_unvisited ** 0.5) + 1)  # Non-linear decay

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Add bonus term for local optimization when few nodes remain
        bonus = 0.1 * (1 - (total_unvisited / len(distance_matrix))) if total_unvisited < 3 else 0
        weighted_distance = weight_factor * distance_to_current + (1 - weight_factor) * distance_to_destination - bonus

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
