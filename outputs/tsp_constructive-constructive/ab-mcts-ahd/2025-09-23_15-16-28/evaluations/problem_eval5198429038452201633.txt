def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 to account for current_node
    weight_factor = 0.7 ** (remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalize revisiting nodes to avoid cycles
        revisit_penalty = 1.0 if node == destination_node else 1.0

        # Heuristic: consider average distance of unvisited nodes to current and destination
        avg_distance_to_current = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / remaining_nodes
        avg_distance_to_destination = sum(distance_matrix[n][destination_node] for n in unvisited_nodes) / remaining_nodes
        heuristic_factor = (distance_to_current / avg_distance_to_current) + (distance_to_destination / avg_distance_to_destination)

        weighted_distance = (weight_factor * distance_to_current) + ((1 - weight_factor) * distance_to_destination)
        weighted_distance *= heuristic_factor * revisit_penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
