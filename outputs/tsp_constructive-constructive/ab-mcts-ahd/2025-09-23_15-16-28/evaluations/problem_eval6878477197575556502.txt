def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Precompute a global ranking of unvisited nodes based on distance to destination
    ranked_nodes = sorted(unvisited_nodes, key=lambda x: distance_matrix[x][destination_node])

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Novelty factor: inversely proportional to the node's position in the global ranking
        novelty_factor = 1.0 / (i + 1)

        # Dynamic weight based on remaining nodes and novelty
        weight = (1.0 / (1.0 + remaining_nodes)) * novelty_factor

        # Score combines immediate distance, long-term savings, and novelty
        score = (distance_to_current + distance_to_destination) * weight

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
