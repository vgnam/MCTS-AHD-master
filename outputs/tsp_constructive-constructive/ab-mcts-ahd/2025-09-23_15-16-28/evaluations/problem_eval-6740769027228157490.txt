def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    total_unvisited = len(unvisited_nodes)
    exploration_factor = 1 - (total_unvisited / (total_unvisited + 1))  # Encourages exploration as unvisited nodes decrease

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weighted_sum = (exploration_factor * distance_to_current) + ((1 - exploration_factor) * distance_to_destination)

        # Penalize nodes that are frequently revisited to encourage diversity
        if node in unvisited_nodes and node != current_node:
            weighted_sum *= (1 + (1 / (total_unvisited + 1)))

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
