def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # Include current node
    visited_ratio = 1.0 - (len(unvisited_nodes) / total_nodes)
    min_weighted_sum = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        weight = visited_ratio ** 2  # Higher weight as more nodes are visited
        weighted_sum = distance_to_current + (distance_to_destination * weight)

        # Penalize nodes that are too close to the destination early
        if visited_ratio < 0.3 and distance_to_destination < 0.5 * distance_matrix[current_node][destination_node]:
            weighted_sum *= 1.5

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
