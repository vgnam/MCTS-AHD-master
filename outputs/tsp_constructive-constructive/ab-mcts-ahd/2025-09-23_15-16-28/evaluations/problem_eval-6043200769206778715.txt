def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    node_frequencies = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_current = distance_to_current / max(distance_matrix[current_node])
        normalized_destination = distance_to_destination / max(distance_matrix[destination_node])
        weighted_sum = 0.6 * normalized_current + 0.4 * normalized_destination

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node
        elif weighted_sum == min_weighted_sum:
            if node_frequencies[node] < node_frequencies[next_node]:
                next_node = node

    node_frequencies[next_node] += 1
    return next_node
