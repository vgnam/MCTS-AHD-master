def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]

        # Calculate average and variance of future distances
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        variance_penalty = sum((distance_matrix[node][n] - avg_future_distance) ** 2 for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Weighted balance: prioritize immediate distance with strong variance penalty
        score = 0.6 * distance_to_current + 0.3 * variance_penalty + 0.1 * avg_future_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
