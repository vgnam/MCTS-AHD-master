def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + total_unvisited)  # Higher weight for centrality as unvisited nodes decrease
    centrality_weights = {node: sum(distance_matrix[node]) / (len(distance_matrix) - 1) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality = centrality_weights[node]
        score = (1 - weight_factor) * distance_to_current + weight_factor * (distance_to_destination + centrality)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
