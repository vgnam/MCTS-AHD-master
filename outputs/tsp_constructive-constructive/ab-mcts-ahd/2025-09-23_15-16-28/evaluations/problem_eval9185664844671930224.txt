def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 0.5 * (1 - visited_ratio) + 0.2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        normalized_ratio = ratio / max_distance
        potential_future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        heuristic_score = (1 - exploration_weight) * normalized_ratio + exploration_weight * (potential_future_cost / max_distance)

        if heuristic_score < min_score:
            min_score = heuristic_score
            next_node = node

    return next_node
