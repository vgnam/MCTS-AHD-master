def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_unvisited_distance = total_unvisited_distance / len(unvisited_nodes) if unvisited_nodes else 0

    best_score = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        dynamic_weight = distance_to_destination / (avg_unvisited_distance + 1e-10)

        if remaining_nodes > 1:
            weight_current = 0.7 - (0.1 * (remaining_nodes / len(unvisited_nodes)))
            weight_dest = 0.3 + (0.1 * (remaining_nodes / len(unvisited_nodes)))
        else:
            weight_current = 0.5
            weight_dest = 0.5

        combined_score = weight_current * (dynamic_weight * distance_to_current) + weight_dest * ((1 - dynamic_weight) * distance_to_destination)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
