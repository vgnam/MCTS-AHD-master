importance of the distance to the destination as the number of remaining nodes decreases, while also incorporating a penalty for nodes that are too far from either the current node or the destination, ensuring a balance between proximity and completeness.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    threshold = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.3 if remaining_nodes > 2 else 0.7

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weighted_sum = (weight_factor * distance_to_destination) + ((1 - weight_factor) * distance_to_current)
        penalty = max(distance_to_current, distance_to_destination) * 0.2

        adjusted_weighted_sum = weighted_sum + penalty

        if adjusted_weighted_sum < min_weighted_sum:
            min_weighted_sum = adjusted_weighted_sum
            next_node = node

    return next_node
