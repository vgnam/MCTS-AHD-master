def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    num_unvisited = len(unvisited_nodes)
    dynamic_weight = 0.5 + 0.5 * (1 - num_unvisited / (num_unvisited + 1))  # Adapts based on remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        normalized_distance_to_current = distance_to_current / max_distance
        normalized_distance_to_destination = distance_to_destination / max_distance

        # Entropy-based weighting for exploration
        entropy_weight = 1 - (1 / (1 + math.exp(-0.1 * (num_unvisited - 1))))

        # Combine dynamic weight and entropy
        score = (dynamic_weight * normalized_distance_to_current) + \
                ((1 - dynamic_weight) * normalized_distance_to_destination * entropy_weight)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
