def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.8 ** (remaining_nodes / (remaining_nodes + 1))
    centrality_factor = 0.3 * (remaining_nodes / (remaining_nodes + 2))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        weighted_score = (weight_factor * distance_to_current) + \
                         ((1 - weight_factor) * (0.6 * distance_to_destination + 0.4 * avg_distance_to_remaining))

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
