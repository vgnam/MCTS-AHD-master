def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        product_distance = distance_to_current * distance_to_destination
        normalized_savings = product_distance / (distance_to_current + distance_to_destination)

        proximity_weight = (1 - progress_factor) * (1 / (1 + distance_to_current))
        savings_weight = progress_factor * (normalized_savings / (1 + normalized_savings))

        weighted_score = (proximity_weight * distance_to_current + savings_weight * normalized_savings) / (remaining_nodes ** 0.5)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
