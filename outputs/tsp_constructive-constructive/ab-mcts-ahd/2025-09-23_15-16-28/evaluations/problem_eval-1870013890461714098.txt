def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = min(1.0, 0.5 * math.log(remaining_nodes + 1))
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead evaluation: consider the next step's potential
        lookahead_value = 0
        if remaining_nodes > 1:
            temp_unvisited = unvisited_nodes.copy()
            temp_unvisited.remove(node)
            next_candidate = select_next_node(node, destination_node, temp_unvisited, distance_matrix)
            lookahead_value = distance_matrix[node][next_candidate]

        combined_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination + 0.1 * lookahead_value

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
