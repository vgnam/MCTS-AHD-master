import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_combined_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_factor = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid function centered at 5 nodes
        current_weight = 0.5 + 0.4 * weight_factor  # Adjusts between 0.5 and 0.9
        destination_weight = 1.0 - current_weight

        # Penalize nodes that are neither close nor beneficial
        penalty = 0.2 if (distance_to_current > 0.7 * max(distance_matrix[current_node]) and
                         distance_to_destination > 0.7 * max(distance_matrix[node])) else 0

        combined_score = (current_weight * distance_to_current +
                          destination_weight * distance_to_destination +
                          penalty)

        if combined_score < min_combined_score:
            min_combined_score = combined_score
            next_node = node

    return next_node
