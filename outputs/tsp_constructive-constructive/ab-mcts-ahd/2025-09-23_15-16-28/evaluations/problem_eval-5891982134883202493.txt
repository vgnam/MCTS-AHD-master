def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    threshold = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate harmonic mean for threshold adjustment
        if (distance_to_current + distance_to_destination) == 0:
            harmonic_mean = float('inf')
        else:
            harmonic_mean = 2 / ((1 / distance_to_current) + (1 / distance_to_destination))

        # Introduce a penalty for nodes that increase the path length significantly
        penalty = 1 + (distance_to_current + distance_to_destination) / (distance_matrix[current_node][destination_node] + 1e-6)
        weighted_sum = (0.4 * distance_to_current + 0.6 * distance_to_destination) * penalty

        if harmonic_mean < threshold and weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node
            threshold = harmonic_mean

    return next_node
