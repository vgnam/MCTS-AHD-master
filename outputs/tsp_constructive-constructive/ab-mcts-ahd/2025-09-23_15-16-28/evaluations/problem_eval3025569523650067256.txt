def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 2))  # Adjusted progress scaling

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distance_current_to_destination = distance_matrix[current_node][destination_node]

        if distance_to_destination == 0:
            weight = 1.0
        else:
            weight = (1.0 / distance_to_destination) * (1.0 + progress_factor)

        # Penalize nodes that are not aligned with the current direction
        direction_penalty = 1.0 + (distance_to_current - distance_current_to_destination) / max(1.0, distance_current_to_destination)

        weighted_score = (1 - progress_factor) * distance_to_current + progress_factor * (distance_to_current * weight * direction_penalty)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
