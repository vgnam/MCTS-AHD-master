def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        product_distance = distance_to_current * distance_to_destination
        normalized_product = product_distance / max_distance
        avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        variance_penalty = sum((distance_matrix[node][n] - avg_future_distance) ** 2 for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        weight = remaining_nodes / (remaining_nodes + 1)
        score = weight * (0.5 * normalized_product + 0.5 * (distance_to_current + distance_to_destination)) + (1 - weight) * (0.4 * distance_to_current + 0.4 * avg_future_distance + 0.2 * variance_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
