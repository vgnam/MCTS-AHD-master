def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        # Dynamic weight adjustment
        weight_current = 0.7 - (0.5 * (1 / (1 + num_unvisited)))  # Decreases as nodes decrease
        weight_destination = 0.2 + (0.1 * (1 / (1 + num_unvisited)))  # Increases as nodes decrease
        weight_centrality = 0.1

        # Novel score combining proximity and centrality
        weighted_score = (weight_current * distance_to_current) + \
                         (weight_destination * distance_to_destination) + \
                         (weight_centrality * centrality)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
