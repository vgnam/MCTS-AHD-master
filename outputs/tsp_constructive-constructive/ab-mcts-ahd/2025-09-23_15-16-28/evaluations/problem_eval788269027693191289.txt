def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for distance_to_current based on remaining nodes
        weight = 0.5 + 0.5 * (total_unvisited / (total_unvisited + 1))  # Normalized weight

        # Penalty for nodes too close to destination
        penalty = 0.2 * (1 - (distance_to_destination / max(distance_matrix[node]))) if distance_to_destination < 0.3 * max(distance_matrix[node]) else 0

        weighted_sum = weight * distance_to_current + (1 - weight) * distance_to_destination + penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
