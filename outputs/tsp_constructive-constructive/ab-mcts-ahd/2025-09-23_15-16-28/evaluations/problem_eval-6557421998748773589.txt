def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        local_weight = 0.5 if remaining_nodes > 5 else 0.3
        global_weight = 0.5 if remaining_nodes > 5 else 0.7
        variance_weight = 0.1 if remaining_nodes > 5 else 0.2

        # Calculate average and variance of future distances
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / len(future_distances) if future_distances else 0
        variance_penalty = sum((d - avg_future_distance) ** 2 for d in future_distances) / len(future_distances) if future_distances else 0

        # Additional penalty for nodes that are outliers in future distances
        outlier_penalty = 0
        for d in future_distances:
            if abs(d - avg_future_distance) > 1.5 * (variance_penalty ** 0.5 if variance_penalty > 0 else 0):
                outlier_penalty += 1

        # Combine components with dynamic weights
        score = (local_weight * distance_to_current +
                 global_weight * avg_future_distance +
                 variance_weight * variance_penalty +
                 0.1 * outlier_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
