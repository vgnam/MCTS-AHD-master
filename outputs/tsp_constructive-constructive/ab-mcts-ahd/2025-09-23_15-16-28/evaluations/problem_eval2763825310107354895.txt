def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    time_factor = 1 - (len(unvisited_nodes) / total_nodes)  # Decays from 1 to 0

    for node in unvisited_nodes:
        # Base distance components
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Node degree (simplified as sum of distances to all unvisited nodes)
        node_degree = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        # Anticipation term: predicts future path efficiency
        anticipation = (distance_to_current + distance_to_destination) / (1 + node_degree)

        # Dynamic weight with time factor
        weight = 0.5 + 0.5 * time_factor  # Gradually shifts from 0.5 to 1.0

        # Hybrid score combining all factors
        score = (1 - weight) * (distance_to_current + distance_to_destination) + \
                weight * anticipation + \
                0.2 * node_degree  # Small penalty for high-degree nodes

        # Probabilistic selection in early stages
        if len(unvisited_nodes) >= total_nodes // 2 or random.random() < 0.3:
            score += random.uniform(-0.1, 0.1) * max(distance_to_current, distance_to_destination)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
