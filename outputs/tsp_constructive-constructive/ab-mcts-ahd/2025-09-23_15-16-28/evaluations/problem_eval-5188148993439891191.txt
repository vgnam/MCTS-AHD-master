def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        normalized_ratio = ratio / max_distance
        product_distance = distance_to_current * distance_to_destination
        potential_future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes
        weighted_score = (0.5 * normalized_ratio) + (0.3 * (product_distance / (max_distance ** 2))) + (0.2 * (potential_future_cost / max_distance))

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
