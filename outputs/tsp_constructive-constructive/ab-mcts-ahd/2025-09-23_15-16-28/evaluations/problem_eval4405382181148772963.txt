def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        product_distance = distance_to_current * distance_to_destination
        normalized_product = product_distance / max_distance
        sum_distance = distance_to_current + distance_to_destination

        if remaining_nodes > 1:
            centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
            penalty = centrality * (1 - (remaining_nodes / len(distance_matrix)))
            weighted_score = (0.6 * normalized_product + 0.4 * sum_distance) * (1 + penalty)
        else:
            weighted_score = normalized_product + sum_distance

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
