def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_current == 0:
            score = float('inf')
        else:
            # Dynamic weighting: balance progress toward destination and local efficiency
            progress_weight = 0.7
            efficiency_weight = 0.3
            score = (progress_weight * distance_to_destination - efficiency_weight * distance_to_current) / (distance_to_current + 1e-10)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
