def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visit_frequency=None, temperature=1.0):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 1

    if visit_frequency is None:
        visit_frequency = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = visit_frequency.get(node, 0) * (temperature ** 2)
        proximity_bonus = 1 / (1 + distance_to_current)
        weighted_distance = (distance_to_current * distance_to_destination) / (remaining_nodes ** 0.5 * avg_distance)
        weighted_distance *= (1 - proximity_bonus) + penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
