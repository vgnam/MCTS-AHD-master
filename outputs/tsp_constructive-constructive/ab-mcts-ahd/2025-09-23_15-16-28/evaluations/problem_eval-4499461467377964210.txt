def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes ** 2) if remaining_nodes > 0 else 1.0

    # Calculate node density around current node
    if remaining_nodes > 1:
        avg_distance_to_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
        node_density = 1.0 / (avg_distance_to_current + 1e-6)  # Avoid division by zero
    else:
        node_density = 1.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Combine proximity, destination distance, and node density
        if remaining_nodes <= 3:
            score = (distance_to_current * 0.4 + distance_to_destination * 0.4) * (1 - weight_factor) + node_density * weight_factor
        else:
            score = distance_to_current * 0.3 + distance_to_destination * 0.3 + node_density * 0.4

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
