def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_score = float('inf')
    base_decay = 0.7
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic decay factor based on remaining nodes
        decay_factor = base_decay * (1 - (remaining_nodes / (remaining_nodes + 1)))

        # Centrality score: average distance to other unvisited nodes
        centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Combined score: immediate distance + weighted future distance + centrality
        total_score = distance_to_current + decay_factor * distance_to_destination + 0.3 * centrality_score

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
