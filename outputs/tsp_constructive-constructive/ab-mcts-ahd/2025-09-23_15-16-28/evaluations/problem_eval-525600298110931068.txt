def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')

    # Calculate dynamic weight based on proximity to destination
    distance_to_destination = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)
    dynamic_weight = 1 / (1 + math.exp(-(distance_to_destination - max_distance / 2) / (max_distance / 5)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead: evaluate next node's connectivity to destination
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            next_node_candidate = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_cost = distance_matrix[node][next_node_candidate] + distance_matrix[next_node_candidate][destination_node]
        else:
            lookahead_cost = 0

        # Weighted heuristic with dynamic adjustment and lookahead
        weighted_distance = (1 - dynamic_weight) * distance_to_current + dynamic_weight * (distance_to_destination + 0.3 * lookahead_cost)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
