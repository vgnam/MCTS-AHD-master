def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    remaining_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining distance and unvisited nodes
        dynamic_weight = 1 - (remaining_distance / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6))
        dynamic_weight = min(max(dynamic_weight, 0.2), 0.8)  # Clamp between 0.2 and 0.8

        # Score combines distance to current, distance to destination, and node centrality
        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        weighted_sum = (1 - dynamic_weight) * distance_to_current + dynamic_weight * distance_to_destination
        score = weighted_sum * (1 + 0.1 * (node_centrality / (distance_to_destination + 1e-6)))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
