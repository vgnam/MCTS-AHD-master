def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)

    # Dynamic weight adjustment based on remaining nodes
    weight_immediate = 0.6 + (0.4 * (1 - total_unvisited / len(distance_matrix)))
    weight_future = 0.4 - (0.2 * (1 - total_unvisited / len(distance_matrix)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted heuristic with dynamic adjustments
        weighted_distance = weight_immediate * distance_to_current + weight_future * distance_to_destination

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
