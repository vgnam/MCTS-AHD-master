def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and progress
        progress_weight = (remaining_nodes / (remaining_nodes + 1)) ** 2
        distance_weight = 1 - progress_weight

        # Heuristic: favor nodes that are closer to the destination and reduce future path length
        potential_reduction = distance_to_current + distance_to_destination - distance_matrix[current_node][destination_node]
        heuristic_factor = max(0, potential_reduction)

        # Combined score with heuristic influence
        score = (distance_weight * distance_to_current +
                 progress_weight * distance_to_destination +
                 0.5 * heuristic_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
