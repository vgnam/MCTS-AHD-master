def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        normalized_centrality = centrality / max_distance

        weight_immediate = 0.5
        weight_destination = 0.3
        weight_centrality = 0.2

        score = (weight_immediate * (distance_to_current / max_distance)) + (weight_destination * (distance_to_destination / max_distance)) + (weight_centrality * normalized_centrality)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
