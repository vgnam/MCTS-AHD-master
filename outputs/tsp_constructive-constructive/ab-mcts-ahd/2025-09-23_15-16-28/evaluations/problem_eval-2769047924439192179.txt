def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_product = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting factor based on current path progress
        progress_factor = 1 + (distance_to_current / (distance_to_current + distance_to_destination + 1e-6))

        # Weighted product of distances
        weighted_product = (distance_to_current * distance_to_destination) * progress_factor

        if weighted_product < min_weighted_product:
            min_weighted_product = weighted_product
            next_node = node

    return next_node
