def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with stronger emphasis on destination proximity
        current_weight = 0.3 + 0.1 * (remaining_nodes / (remaining_nodes + 1))
        destination_weight = 1 - current_weight

        # Score calculation with more aggressive penalization and conditional bonus
        score = (current_weight * current_distance) + (destination_weight * destination_distance)
        if destination_distance > 2 * distance_matrix[current_node][destination_node]:
            score *= 1.5  # More aggressive penalization
        elif current_distance < 0.5 * distance_matrix[current_node][destination_node]:
            score *= 0.8  # Bonus for very close nodes

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
