def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_product = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 1))  # Normalized progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        product_distance = distance_to_current * distance_to_destination
        normalized_product = (product_distance) / (distance_to_current + distance_to_destination + 1e-6)  # Avoid division by zero
        weighted_product = (1 - progress_factor) * distance_to_current + progress_factor * normalized_product

        if weighted_product < min_weighted_product:
            min_weighted_product = weighted_product
            next_node = node

    return next_node
