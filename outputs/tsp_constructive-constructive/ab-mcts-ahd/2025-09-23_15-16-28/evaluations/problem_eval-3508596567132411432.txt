def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on proximity to destination
        proximity_factor = destination_distance / sum(distance_matrix[destination_node]) if sum(distance_matrix[destination_node]) != 0 else 0
        dynamic_weight = 0.3 + 0.7 * (1 - proximity_factor)

        weighted_sum = current_distance + dynamic_weight * destination_distance

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
