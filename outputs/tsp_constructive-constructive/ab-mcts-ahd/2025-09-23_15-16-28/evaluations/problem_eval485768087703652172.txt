def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    alpha = 0.5  # Base weight for distance to current node
    beta = 0.3   # Base weight for distance to destination node
    gamma = 0.2  # Weight for average distance to remaining unvisited nodes

    # Calculate average distance to all unvisited nodes
    avg_distance = sum(distance_matrix[node][unvisited] for node in unvisited_nodes for unvisited in unvisited_nodes) / (len(unvisited_nodes) ** 2) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distance_to_avg = distance_matrix[node][node] if node in unvisited_nodes else 0  # Placeholder for node's contribution to avg

        # Adjust weights dynamically based on remaining nodes
        adjusted_alpha = alpha + (gamma * (distance_to_avg / (avg_distance + 1e-6)))
        adjusted_beta = beta - (gamma * (distance_to_avg / (avg_distance + 1e-6)))

        weighted_sum = adjusted_alpha * distance_to_current + adjusted_beta * distance_to_destination

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
