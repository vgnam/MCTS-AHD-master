def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_utility = -float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        product_distance = distance_to_current * distance_to_destination
        normalized_savings = product_distance / (distance_to_current + distance_to_destination)

        node_degree = sum(distance_matrix[node]) / len(distance_matrix[node])
        proximity_weight = (1 - progress_factor) * (1 / (1 + distance_to_current))
        savings_weight = progress_factor * (normalized_savings / (1 + normalized_savings))
        centrality_weight = 0.5 * (node_degree / max(distance_matrix[node]))

        utility = (proximity_weight * (1 / (1 + distance_to_current)) +
                  savings_weight * (1 / (1 + normalized_savings)) +
                  centrality_weight * (1 / (1 + node_degree))) * (1 + (1 / (1 + distance_to_destination)))

        if utility > max_utility:
            max_utility = utility
            next_node = node

    return next_node
