def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.5
    adjustment_factor = 0.5 * (remaining_nodes / (remaining_nodes + 1))

    # Calculate centrality scores for each unvisited node
    centrality_scores = {}
    for node in unvisited_nodes:
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality_scores[node] = centrality

    max_centrality = max(centrality_scores.values()) if centrality_scores else 1.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalize centrality score
        normalized_centrality = centrality_scores[node] / max_centrality if max_centrality != 0 else 0.0

        # Adjust weight based on centrality and remaining nodes
        adjusted_weight = base_weight * (1 + adjustment_factor * normalized_centrality)

        weighted_distance = (adjusted_weight * distance_to_current) + ((1 - adjusted_weight) * distance_to_destination)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
