def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_distance = float('inf')
    base_decay_factor = 0.7
    dynamic_adjustment = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Increases as unvisited nodes decrease
    decay_factor = base_decay_factor * dynamic_adjustment

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        total_distance = distance_to_current + decay_factor * distance_to_destination

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
