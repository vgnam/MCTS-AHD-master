def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight for future distance based on remaining nodes
        future_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))

        # Penalty for nodes too far from current node
        if immediate_distance > 2 * distance_matrix[current_node][destination_node]:
            penalty = immediate_distance * 0.2
        else:
            penalty = 0

        score = immediate_distance + future_weight * future_distance + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
