def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    # Dynamic weight adjustment based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.7 if remaining_nodes > 2 else 0.9
    weight_future = 1 - weight_immediate

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Combined heuristic: weighted sum with min-max consideration
        weighted_score = weight_immediate * distance_to_current + weight_future * distance_to_destination
        max_distance = max(distance_to_current, distance_to_destination)
        combined_score = weighted_score + 0.3 * max_distance  # Penalize worst-case scenarios

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
