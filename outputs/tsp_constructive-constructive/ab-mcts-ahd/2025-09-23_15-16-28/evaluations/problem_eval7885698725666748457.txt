def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average and variance of future distances
        future_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_future_distance = sum(future_distances) / len(future_distances) if future_distances else 0
        variance_penalty = sum((d - avg_future_distance) ** 2 for d in future_distances) / len(future_distances) if future_distances else 0

        # Combine weighted components: immediate distance (30%), future distance (40%), variance penalty (10%), and sum of distances (20%)
        score = 0.3 * distance_to_current + 0.4 * avg_future_distance + 0.1 * variance_penalty + 0.2 * (distance_to_current + distance_to_destination)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
