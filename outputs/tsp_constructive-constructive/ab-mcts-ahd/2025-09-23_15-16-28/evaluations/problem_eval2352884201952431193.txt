import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.3 * (1 + np.tanh(remaining_nodes / 10))  # Smooth dynamic weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = max(0, (distance_to_current - 1.5 * distance_matrix[current_node][destination_node]) ** 2)  # Quadratic penalty
        score = distance_to_current + dynamic_weight * distance_to_destination + penalty
        scores.append(score)

    # Normalize scores and apply softmax for probabilistic selection
    exp_scores = np.exp(-np.array(scores))
    probabilities = exp_scores / np.sum(exp_scores)
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
