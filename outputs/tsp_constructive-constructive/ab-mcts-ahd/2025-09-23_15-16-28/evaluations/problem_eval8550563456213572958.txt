def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        weighted_ratio = 0.6 * ratio
        weighted_distance = 0.4 * distance_to_current

        # Dynamically adjust weights based on the number of unvisited nodes
        weight_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        weight_distance = 1 - weight_ratio

        score = (weight_ratio * weighted_ratio) + (weight_distance * weighted_distance)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
