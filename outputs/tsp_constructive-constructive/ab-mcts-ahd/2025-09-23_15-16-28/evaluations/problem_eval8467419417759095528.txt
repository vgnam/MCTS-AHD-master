def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality penalty: average distance to all unvisited nodes
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / num_unvisited

        # Dynamic scaling factor: increases as unvisited nodes decrease
        scaling_factor = 1 + (1 / (1 + num_unvisited))

        # Weighted sum with centrality penalty and dynamic scaling
        weighted_sum = (distance_to_current + distance_to_destination) * scaling_factor + centrality_penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
