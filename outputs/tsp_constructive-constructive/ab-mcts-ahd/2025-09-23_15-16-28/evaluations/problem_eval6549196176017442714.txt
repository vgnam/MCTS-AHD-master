def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_factor = total_unvisited / (total_unvisited + 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node]) / (len(distance_matrix[node]) - 1)

        # Penalty for recently visited nodes (simulated by higher centrality)
        weighted_distance = weight_factor * distance_to_destination + (1 - weight_factor) * distance_to_current
        combined_score = weighted_distance + 0.3 * centrality + 0.2 * max(distance_to_current, distance_to_destination)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
