def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic centrality weight based on remaining nodes
    weight_centrality = 0.3 + 0.4 * (remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalized centrality with distance-based scaling
        centrality = sum(distance_matrix[node][other] ** 0.7 for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Proximity-based penalty to avoid revisits
        proximity_penalty = 1.0 / (1.0 + distance_to_current)

        # Dynamic weight adjustment with proximity scaling
        weight_current = 0.5 - 0.2 * (remaining_nodes / total_nodes)
        weight_destination = 0.5 + 0.2 * (remaining_nodes / total_nodes)

        # Combine with normalization and penalty
        heuristic = (weight_current * distance_to_current + weight_destination * distance_to_destination) * proximity_penalty + weight_centrality * centrality

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
