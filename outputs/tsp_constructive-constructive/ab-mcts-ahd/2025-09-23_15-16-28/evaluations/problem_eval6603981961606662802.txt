def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Adapts based on remaining nodes
        penalty = 0.1 * (1 if node in unvisited_nodes else 0)  # Penalty for revisiting
        score = immediate_distance + dynamic_weight * future_distance - penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
