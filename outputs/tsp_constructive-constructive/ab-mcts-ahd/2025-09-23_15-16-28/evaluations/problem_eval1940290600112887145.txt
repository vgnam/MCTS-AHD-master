def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight based on remaining nodes (0.3 to 0.7)
    weight_factor = 0.3 + 0.4 * (remaining_nodes / len(distance_matrix))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Penalize nodes that are too distant from the destination
        if destination_distance > 1.5 * distance_matrix[current_node][destination_node]:
            weighted_sum = current_distance + weight_factor * destination_distance * 1.2
        else:
            weighted_sum = current_distance + weight_factor * destination_distance

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
