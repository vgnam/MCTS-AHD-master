def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate hub factor: average distance to all unvisited nodes
        hub_factor = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Dynamic weights: prioritize hub factor when few nodes remain
        weight_current = 0.5 * (remaining_nodes / (remaining_nodes + 1))
        weight_destination = 0.5 * (remaining_nodes / (remaining_nodes + 1))
        weight_hub = 1 - (weight_current + weight_destination)

        weighted_score = (weight_current * distance_to_current +
                          weight_destination * distance_to_destination +
                          weight_hub * hub_factor)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
