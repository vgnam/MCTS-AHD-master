def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality (normalized by max possible distance)
        max_distance = max(distance_matrix[node][other] for other in range(total_nodes) if other != node)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, max_distance * (len(unvisited_nodes) - 1))

        # Adaptive exponential weight adjustment
        progress = 1 - (remaining_nodes / total_nodes)
        weight_current = 0.5 * (0.6 ** progress)
        weight_destination = 0.3 * (1.2 ** progress)
        weight_centrality = 0.2

        # Dynamic exploration factor
        exploration_factor = 1 + (1 - progress) * 0.5

        # Combine with adaptive weights
        heuristic = (weight_current * distance_to_current +
                     weight_destination * distance_to_destination +
                     weight_centrality * centrality) * exploration_factor

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
