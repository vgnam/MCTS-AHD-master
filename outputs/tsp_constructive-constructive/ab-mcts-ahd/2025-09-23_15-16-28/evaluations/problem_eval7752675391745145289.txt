def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight = 0.4 if remaining_nodes > 2 else 0.7  # More emphasis on destination distance in early stages

        # Combine weighted balance with min-max strategy
        combined_score = weight * distance_to_destination + (1 - weight) * distance_to_current
        max_distance = max(distance_to_current, distance_to_destination)

        # Calculate average distance for tiebreaker
        avg_distance = (distance_to_current + distance_to_destination) / 2

        # Final score balances both approaches with average distance as tiebreaker
        score = 0.6 * combined_score + 0.3 * max_distance + 0.1 * avg_distance

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
