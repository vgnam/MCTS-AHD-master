def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weighted_distances = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            weight = 1.0
        else:
            weight = 1.0 / distance_to_destination

        weighted_distance = distance_to_current * (distance_to_destination * weight * (1.0 / (1.0 + remaining_nodes)))
        weighted_distances.append((node, weighted_distance))

    if not weighted_distances:
        return destination_node

    min_weighted_distance = min(dist for _, dist in weighted_distances)
    max_weighted_distance = max(dist for _, dist in weighted_distances)
    temperature = max_weighted_distance - min_weighted_distance

    if temperature == 0:
        return min(weighted_distances, key=lambda x: x[1])[0]

    probabilities = []
    for node, dist in weighted_distances:
        exponent = (min_weighted_distance - dist) / temperature
        probabilities.append((node, math.exp(exponent)))

    total_probability = sum(prob for _, prob in probabilities)
    normalized_probabilities = [(node, prob / total_probability) for node, prob in probabilities]

    rand_val = random.random()
    cumulative_prob = 0.0
    for node, prob in normalized_probabilities:
        cumulative_prob += prob
        if rand_val <= cumulative_prob:
            return node

    return next_node
