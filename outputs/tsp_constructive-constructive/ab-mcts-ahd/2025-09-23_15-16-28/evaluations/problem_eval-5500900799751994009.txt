def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        weight_factor = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        weighted_sum = weight_factor * distance_to_current + (1 - weight_factor) * distance_to_destination

        # Penalty term for nodes that have been recently visited
        if node in recently_visited and len(recently_visited) > 0:
            weighted_sum *= 1.5

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    # Track recently visited nodes (simplified for demonstration)
    if next_node is not None:
        recently_visited.append(next_node)
        if len(recently_visited) > 3:
            recently_visited.pop(0)

    return next_node
