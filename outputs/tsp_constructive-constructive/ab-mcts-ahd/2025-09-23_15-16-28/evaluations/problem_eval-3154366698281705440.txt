def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_distance_to_dest = distance_matrix[current_node][destination_node]
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on distance to destination
        weight_current = 0.5 if total_distance_to_dest > 100 else 0.3
        weight_destination = 1.0 - weight_current

        # Normalized score using sigmoid function
        combined_score = (1 / (1 + math.exp(-distance_to_destination))) * weight_destination + \
                         (1 / (1 + math.exp(-distance_to_current))) * weight_current

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
