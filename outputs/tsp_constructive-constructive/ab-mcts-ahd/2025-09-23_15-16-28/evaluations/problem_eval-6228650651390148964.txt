def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_metric = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality of each node in the unvisited set
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

    # Dynamic scaling factor based on remaining nodes and average distance
    total_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 1
    scaling_factor = (remaining_nodes ** 0.3) * (1 / (1 + avg_distance))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        node_centrality = centrality[node]

        # Hybrid metric combining distance and centrality
        weighted_metric = (distance_to_current * distance_to_destination) / (node_centrality * scaling_factor)

        if weighted_metric < min_weighted_metric:
            min_weighted_metric = weighted_metric
            next_node = node

    return next_node
