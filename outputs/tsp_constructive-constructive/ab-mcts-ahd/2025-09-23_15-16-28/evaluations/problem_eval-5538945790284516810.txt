importance, where weights are adjusted based on remaining nodes and a novel importance metric combining centrality and distance diversity, with a focus on early exploitation and late exploration.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Calculate distance diversity (novel mechanism)
        distance_diversity = sum(abs(distance_matrix[node][other] - distance_matrix[current_node][other]) for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weight adjustment based on remaining nodes and phase
        exploration_phase = remaining_nodes / total_nodes
        weight_current = 0.5 + 0.4 * (1 - exploration_phase)
        weight_destination = 0.3 + 0.6 * (1 - exploration_phase)
        weight_centrality = 0.2 * exploration_phase
        weight_diversity = 0.1 * (1 - exploration_phase)

        # Combine with dynamic weights
        heuristic = (weight_current * distance_to_current +
                     weight_destination * distance_to_destination +
                     weight_centrality * centrality +
                     weight_diversity * distance_diversity)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
