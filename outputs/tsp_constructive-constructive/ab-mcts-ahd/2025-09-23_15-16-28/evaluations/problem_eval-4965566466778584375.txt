def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    max_utility = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)

        if remaining_nodes == 1:
            utility_score = -distance_to_current
        else:
            avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            utility_score = (0.5 * (1 - distance_to_current / max(distance_matrix[current_node])) +
                            0.3 * (1 - distance_to_destination / max(distance_matrix[node])) +
                            0.2 * (1 - avg_distance_to_unvisited / max(distance_matrix[node])))

        if utility_score > max_utility:
            max_utility = utility_score
            next_node = node

    return next_node
