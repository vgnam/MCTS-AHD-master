def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1 / (1 + remaining_nodes)  # Dynamic weight based on remaining nodes

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic scoring with weighted balance and exploration penalty
        score = (weight_factor * distance_to_current) + ((1 - weight_factor) * distance_to_destination)
        score += 0.1 * distance_matrix[current_node][node]  # Small penalty for revisiting

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
