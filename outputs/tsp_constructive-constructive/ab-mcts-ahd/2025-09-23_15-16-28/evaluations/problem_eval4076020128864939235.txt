def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    avg_current_dist = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited if total_unvisited > 0 else 0
    graph_centrality = {node: sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited for node in unvisited_nodes}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        weight_current = 0.6 - 0.5 * (total_unvisited / len(unvisited_nodes))
        exploration_term = 1.0 / (1.0 + graph_centrality[node])
        diversity_factor = 1.0 + 0.2 * (1.0 - (current_distance / (avg_current_dist + 1e-6)))
        score = (weight_current * current_distance + (1 - weight_current) * destination_distance) * exploration_term * diversity_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
