def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to remaining unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Weighted sum: prioritize proximity but consider global perspective
        weight_current = 0.6 if num_unvisited > 1 else 1.0  # More focus on current proximity when few nodes left
        weight_destination = 0.4 if num_unvisited > 1 else 0.0  # Less focus on destination when many nodes left
        weighted_distance = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (0.2 * avg_distance)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
