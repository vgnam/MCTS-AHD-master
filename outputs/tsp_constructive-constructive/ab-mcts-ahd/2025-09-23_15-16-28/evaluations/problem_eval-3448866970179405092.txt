def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_combined_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on the relative distances
        weight_current = 0.5 + 0.1 * (distance_to_current / (distance_to_current + distance_to_destination))
        weight_destination = 0.5 - 0.1 * (distance_to_destination / (distance_to_current + distance_to_destination))

        # Combined score with min function to balance extremes
        combined_score = weight_current * distance_to_current + weight_destination * distance_to_destination + 0.4 * min(distance_to_current, distance_to_destination)

        if combined_score < min_combined_score:
            min_combined_score = combined_score
            next_node = node

    return next_node
