def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Calculate variability: standard deviation of distances to unvisited nodes
        distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        mean_distance = sum(distances) / len(distances) if distances else 0
        variability = (sum((d - mean_distance) ** 2 for d in distances) / len(distances)) ** 0.5 if distances else 0

        # Dynamic weight based on centrality and variability
        weight = (1 - (remaining_nodes / (remaining_nodes + 1))) * (1 + variability / (centrality + 1e-6))

        # Score combines max distance, sum of distances, centrality, and variability
        score = weight * max_distance + (1 - weight) * (distance_to_current + distance_to_destination) + 0.1 * centrality + 0.05 * variability

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
