def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    current_dest_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes and current progress
        current_weight = 0.6 - 0.3 * (remaining_nodes / (remaining_nodes + 1))
        dest_weight = 1 - current_weight

        # Novelty factor: penalize nodes that create long detours or isolate remaining nodes
        novelty_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour = current_distance + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]
                if detour > 0.3 * current_dest_distance:
                    novelty_penalty += detour * 0.1

        # Calculate score with adaptive penalties
        score = (current_weight * current_distance) + (dest_weight * dest_distance) + novelty_penalty
        if dest_distance > 1.3 * current_dest_distance:
            score *= 1.5  # Stronger penalty for nodes significantly farther from destination

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
