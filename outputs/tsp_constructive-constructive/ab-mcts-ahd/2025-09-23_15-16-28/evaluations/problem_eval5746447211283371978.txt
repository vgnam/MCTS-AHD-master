def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 to include the current node

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting factor based on remaining nodes
        remaining_factor = (1.0 / (1.0 + math.log(total_nodes))) if total_nodes > 1 else 1.0

        # Centrality measure: average distance to all other nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 1.0

        # Combined score with dynamic weighting
        score = (current_distance ** (1.0 + remaining_factor)) * (destination_distance ** (0.5 * remaining_factor)) * (centrality ** 0.2)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
