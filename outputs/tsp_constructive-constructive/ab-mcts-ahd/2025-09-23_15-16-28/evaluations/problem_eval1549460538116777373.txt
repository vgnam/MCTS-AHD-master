def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_factor = total_unvisited / (total_unvisited + 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Dynamic weights
        weight_current = 0.5 * weight_factor
        weight_destination = 0.5 * (1 - weight_factor)
        weight_centrality = 0.2

        # Combine with dynamic weights
        heuristic = weight_current * distance_to_current + weight_destination * distance_to_destination + weight_centrality * centrality

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
