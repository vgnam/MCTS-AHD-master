def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 0.7 if remaining_nodes > 1 else 0.3  # Favor destination early, balance later
        weighted_sum = (1 - weight) * distance_to_current + weight * distance_to_destination

        # Penalty for dead-end nodes (nodes with no remaining connections)
        penalty = 0
        if remaining_nodes > 1:
            remaining_connections = sum(1 for n in unvisited_nodes if n != node)
            if remaining_connections == 0:
                penalty = float('inf')

        score = weighted_sum + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
