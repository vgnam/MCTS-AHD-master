def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        normalized_ratio = ratio / max_distance
        centrality = sum(distance_matrix[node]) / total_nodes
        product_distance = distance_to_current * distance_to_destination

        if remaining_nodes <= total_nodes / 2:
            weight = 0.4
            score = weight * product_distance + 0.3 * normalized_ratio + 0.3 * centrality
        else:
            weight = 0.5
            score = weight * product_distance + 0.3 * normalized_ratio + 0.2 * centrality

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
