def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_total_distance = float('inf')

    # Inverse weight: prioritize proximity early, then shift to future efficiency
    remaining_nodes = len(unvisited_nodes)
    weight = remaining_nodes / (1.0 + remaining_nodes) if remaining_nodes > 0 else 0.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted sum with inverse weighting
        total_distance = weight * distance_to_current + (1 - weight) * distance_to_destination

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
