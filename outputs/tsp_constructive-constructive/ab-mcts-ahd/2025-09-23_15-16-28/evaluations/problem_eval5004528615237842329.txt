def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_value = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        sum_distance = distance_to_current + distance_to_destination
        product_distance = distance_to_current * distance_to_destination

        # Fixed weights with dynamic adjustment based on unvisited nodes
        base_weight_product = 0.7
        base_weight_sum = 0.3
        adjustment_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 2)
        weight_product = base_weight_product + adjustment_factor * (1 - base_weight_product)
        weight_sum = base_weight_sum - adjustment_factor * base_weight_sum

        weighted_value = (weight_sum * sum_distance) + (weight_product * product_distance)

        if weighted_value < min_weighted_value:
            min_weighted_value = weighted_value
            next_node = node

    return next_node
