def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_weighted_value = float('inf')
    next_node = None
    decay_factor = 0.7  # Adjusts the influence of future savings

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node]

        # Calculate average distance to destination for normalization
        avg_future_distance = sum(distance_matrix[node][dest] for dest in unvisited_nodes if dest != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Weighted value combining current distance and normalized future savings
        weighted_value = current_distance + decay_factor * (avg_future_distance - future_savings)

        if weighted_value < min_weighted_value:
            min_weighted_value = weighted_value
            next_node = node

    return next_node
