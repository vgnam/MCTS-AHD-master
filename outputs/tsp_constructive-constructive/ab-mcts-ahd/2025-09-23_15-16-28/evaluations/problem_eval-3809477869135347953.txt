def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        ratio = distance_to_current / distance_to_destination
        normalized_ratio = ratio / max_distance
        potential_future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes

        # Calculate centrality as the average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        normalized_centrality = centrality / max_distance

        # Dynamic weight adjustment based on remaining nodes
        weight_ratio = 0.5 + 0.5 * (remaining_nodes / len(distance_matrix))
        weight_centrality = 1 - weight_ratio

        weighted_score = (weight_ratio * normalized_ratio) + (weight_centrality * normalized_centrality) + (0.4 * potential_future_cost / max_distance)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
