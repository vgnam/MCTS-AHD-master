def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    alpha = 0.6  # Higher weight for distance to current node
    beta = 0.4   # Lower weight for distance to destination
    gamma = 0.8  # Stronger penalty for variance

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate variance of distances to remaining unvisited nodes
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        if remaining_distances:
            variance = sum((x - sum(remaining_distances)/len(remaining_distances))**2 for x in remaining_distances) / len(remaining_distances)
        else:
            variance = 0

        # Weighted sum with variance penalty
        score = (alpha * distance_to_current + beta * distance_to_destination) + gamma * variance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
