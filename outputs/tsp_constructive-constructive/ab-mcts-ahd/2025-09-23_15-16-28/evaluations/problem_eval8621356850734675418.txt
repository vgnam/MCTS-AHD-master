def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    max_distance = max(max(row) for row in distance_matrix)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            return node

        # Dynamic weight based on position in tour
        progress = (total_nodes - len(unvisited_nodes)) / total_nodes
        weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid function for smooth transition

        # Heuristic for revisiting nodes with high potential
        potential_gain = (distance_to_current + distance_to_destination) - distance_matrix[current_node][destination_node]
        normalized_gain = potential_gain / max_distance

        score = (weight * (distance_to_current / max_distance)) + ((1 - weight) * (distance_to_destination / max_distance)) - normalized_gain

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
