def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_heuristic = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_current = max(0.2, 0.6 - 0.1 * (remaining_nodes / len(distance_matrix)))
        weight_destination = max(0.4, 0.5 + 0.1 * (remaining_nodes / len(distance_matrix)))

        # Additional term: average distance to all unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Combine with dynamic weights and additional term
        heuristic = (weight_current * distance_to_current +
                    weight_destination * distance_to_destination +
                    0.2 * avg_distance)

        if heuristic < min_heuristic:
            min_heuristic = heuristic
            next_node = node

    return next_node
