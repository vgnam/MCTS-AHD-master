def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited if total_unvisited > 0 else 0

    # Calculate centrality for each node (simplified measure: average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited if total_unvisited > 1 else 0

    # Normalize centrality for scoring
    max_centrality = max(centrality.values()) if centrality else 1
    min_centrality = min(centrality.values()) if centrality else 0
    normalized_centrality = {node: (centrality[node] - min_centrality) / (max_centrality - min_centrality + 1e-6) for node in unvisited_nodes}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining path length and centrality
        remaining_factor = total_unvisited / len(unvisited_nodes)
        centrality_factor = normalized_centrality[node]
        weight_current = 0.6 * (1 - remaining_factor) + 0.4 * centrality_factor

        # Novelty score: balance between local and global progress with centrality adjustment
        distance_penalty = (current_distance - avg_distance) ** 2 if current_distance > 1.3 * avg_distance else 0
        novelty_score = 0.5 * current_distance + 0.3 * destination_distance + 0.2 * (1 - centrality_factor) * distance_penalty

        # Combine with dynamic weight
        score = weight_current * current_distance + (1 - weight_current) * novelty_score

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
