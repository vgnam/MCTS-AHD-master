def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_distance = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Calculate direction vector from current to destination
    direction_vector = (destination_node - current_node) if isinstance(current_node, (int, float)) else 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate direction deviation penalty
        deviation = abs((node - current_node) - direction_vector) if isinstance(node, (int, float)) else 0
        deviation_penalty = deviation * (1.0 / num_unvisited)  # Higher penalty for early nodes

        # Dynamic weights based on exploration phase
        exploration_weight = min(0.5, 0.1 * (10 - num_unvisited))  # Increase exploration as nodes decrease
        local_weight = 1.0 - exploration_weight

        # Weighted sum with deviation penalty
        weighted_distance = (local_weight * distance_to_current) + (exploration_weight * distance_to_destination) - deviation_penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
