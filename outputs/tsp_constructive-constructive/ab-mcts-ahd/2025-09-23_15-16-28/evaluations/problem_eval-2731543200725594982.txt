importance based on its centrality in the unvisited subgraph, with a progress-dependent weight factor that evolves from proximity-focused to centrality-focused selection as the tour progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (total_unvisited / (total_unvisited + 1))  # Normalized progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to other unvisited nodes)
        centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1)

        # Weighted combination of distance and centrality
        weighted_score = (1 - progress_factor) * distance_to_current + progress_factor * (0.6 * centrality_score + 0.4 * distance_to_destination)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
