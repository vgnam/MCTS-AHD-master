def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_sum = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_current = 0.8 - (0.1 * (remaining_nodes / len(distance_matrix)))
        weight_destination = 0.2 + (0.1 * (remaining_nodes / len(distance_matrix)))

        # Penalty for revisiting nodes in the near future
        penalty = 0.05 * sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        weighted_sum = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
