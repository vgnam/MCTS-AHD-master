def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    # Normalize distances to [0, 1] and apply Boltzmann distribution
    temperature = 1.0  # Can be adjusted for exploration vs. exploitation
    probabilities = [math.exp(-(d - min_distance) / temperature) for d in distances]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
