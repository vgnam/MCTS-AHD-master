def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    temperature = 0.5  # Controls randomness (higher = more exploration)
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist, max_dist = min(distances), max(distances)
    if min_dist == max_dist:
        return unvisited_nodes[0]  # Avoid division by zero
    normalized = [(max_dist - d) / (max_dist - min_dist) for d in distances]  # Invert and normalize
    probabilities = [1.0 / (1.0 + math.exp(-(x * temperature))) for x in normalized]  # Sigmoid transformation
    probabilities = [p / sum(probabilities) for p in probabilities]  # Normalize to sum to 1
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
