importance, to balance proximity and priority, ensuring all nodes are visited before returning to the destination.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        score = 1 / (distance + 1e-10) * (node + 1)  # Node index as a proxy for importance
        if score > max_score:
            max_score = score
            next_node = node
    if next_node is None:
        return destination_node
    return next_node
