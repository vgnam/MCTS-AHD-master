def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))  # Dynamic weight based on remaining nodes
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        estimated_remaining_cost = distance_matrix[node][destination_node]
        score = (weight * immediate_cost) + ((1 - weight) * estimated_remaining_cost)
        if score < min_score:
            min_score = score
            next_node = node
    if next_node is None:
        return destination_node
    return next_node
