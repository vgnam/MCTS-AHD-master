def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.6  # Weight for immediate distance (adjustable)
    beta = 0.4   # Weight for distance to destination (adjustable)

    min_score = float('inf')
    next_node = None

    # Calculate average distance of unvisited nodes to the destination
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Normalize distances
        norm_immediate = immediate_distance / max(1, max(distance_matrix[current_node][n] for n in unvisited_nodes))
        norm_dest = distance_to_dest / max(1, avg_distance)

        # Calculate weighted score
        score = alpha * norm_immediate + beta * norm_dest

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        return destination_node
    return next_node
