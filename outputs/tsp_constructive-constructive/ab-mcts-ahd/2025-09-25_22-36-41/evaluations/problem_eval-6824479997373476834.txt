def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_weighted_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        if not unvisited_nodes - {node}:
            remaining_distance = distance_matrix[node][destination_node]
        else:
            remaining_distance = sum(distance_matrix[node][n] for n in unvisited_nodes - {node}) / len(unvisited_nodes - {node})

        direction_factor = 1.0
        if len(unvisited_nodes) > 1:
            current_direction = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node]
            candidate_direction = (distance_matrix[node][destination_node] - remaining_distance) / distance_matrix[node][destination_node]
            direction_factor = 1.0 + 0.3 * (1 - abs(current_direction - candidate_direction))

        weighted_cost = immediate_distance + 0.5 * remaining_distance + 0.2 * direction_factor

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            next_node = node

    if next_node is None:
        return destination_node

    return next_node
