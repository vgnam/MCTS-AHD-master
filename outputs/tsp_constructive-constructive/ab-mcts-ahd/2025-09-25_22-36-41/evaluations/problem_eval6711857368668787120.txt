importance, ensuring efficient path construction.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = len(unvisited_nodes)  # Example heuristic: number of remaining nodes
        score = distance + (1 / (heuristic + 1))  # Weighted score
        if score < min_score:
            min_score = score
            next_node = node
    if next_node is None:
        return destination_node
    return next_node
