def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate node centrality (average distance to all nodes)
    centrality = {}
    all_nodes = set(unvisited_nodes) | {current_node}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in all_nodes if other != node)
        centrality[node] = total_distance / (len(all_nodes) - 1) if len(all_nodes) > 1 else 0

    # Combine distance and centrality with weights
    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Normalize centrality (higher centrality is better)
        normalized_centrality = centrality[node] / (max(centrality.values()) if max(centrality.values()) != 0 else 1)
        scores[node] = 0.4 * distance + 0.6 * normalized_centrality

    # Select node with minimum score (distance + centrality)
    next_node = min(scores, key=scores.get)
    return next_node
