def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weight based on remaining nodes (prioritize centrality early)
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = max(0.3, min(0.7, 0.5 + 0.03 * (remaining_nodes - 1)))

    # Calculate node centrality (average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Calculate penalty for nodes too close to destination (more aggressive)
    penalty = {}
    for node in unvisited_nodes:
        penalty[node] = 1 / (1 + 0.5 * distance_matrix[node][destination_node])

    # Combine factors with dynamic weight
    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        normalized_centrality = 1 / (1 + centrality[node]) if centrality[node] != 0 else 1
        scores[node] = (dynamic_weight * normalized_centrality +
                        (1 - dynamic_weight) * distance +
                        0.3 * penalty[node])

    # Select node with minimum score
    next_node = min(scores, key=scores.get)
    return next_node
