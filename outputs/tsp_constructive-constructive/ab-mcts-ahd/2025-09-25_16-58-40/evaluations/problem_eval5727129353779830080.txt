def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    dynamic_weight = 0.7 if len(unvisited_nodes) > len(distance_matrix) / 2 else 0.8
    scores = {}

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        normalized_centrality = 1 / (1 + centrality) if centrality != 0 else 1
        scores[node] = dynamic_weight * distance + (1 - dynamic_weight) * normalized_centrality

    next_node = min(scores, key=scores.get)
    return next_node
