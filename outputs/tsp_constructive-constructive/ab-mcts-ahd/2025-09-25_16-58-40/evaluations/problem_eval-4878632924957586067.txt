def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weights based on tour progress
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = max(0.3, min(0.7, 0.5 + 0.05 * (remaining_nodes - 1)))

    # Calculate node centrality (average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Look-ahead factor: estimate impact on future path
    lookahead = {}
    for node in unvisited_nodes:
        future_distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        lookahead[node] = sum(sorted(future_distances)[:3]) if len(future_distances) >= 3 else 0

    # Penalty for nodes too close to destination
    penalty = {}
    for node in unvisited_nodes:
        penalty[node] = 1 / (1 + distance_matrix[node][destination_node])

    # Combine factors with dynamic weights
    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        normalized_centrality = 1 / (1 + centrality[node]) if centrality[node] != 0 else 1
        normalized_lookahead = 1 / (1 + lookahead[node]) if lookahead[node] != 0 else 1
        scores[node] = (dynamic_weight * distance +
                        (1 - dynamic_weight) * (0.6 * normalized_centrality + 0.4 * normalized_lookahead) +
                        0.3 * penalty[node])

    # Select node with minimum score
    next_node = min(scores, key=scores.get)
    return next_node
