def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate node centrality (average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Dynamic weight adjustment based on remaining tour length
    remaining_nodes = len(unvisited_nodes)
    weight_distance = 0.7 * (remaining_nodes / (remaining_nodes + 10))  # Decreases as tour progresses
    weight_centrality = 0.3 * (10 / (remaining_nodes + 10))  # Increases as tour progresses

    # Combine distance and centrality with dynamic weights and penalty
    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        normalized_centrality = 1 / (1 + centrality[node]) if centrality[node] != 0 else 1
        penalty = (1 - normalized_centrality) ** 2  # Penalize high centrality nodes
        scores[node] = weight_distance * distance + weight_centrality * normalized_centrality + penalty

    # Select node with minimum score (distance + centrality + penalty)
    next_node = min(scores, key=scores.get)
    return next_node
