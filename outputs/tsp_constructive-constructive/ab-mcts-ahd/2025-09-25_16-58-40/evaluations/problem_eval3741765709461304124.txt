def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = max(0.1, min(0.9, 0.5 + 0.03 * (remaining_nodes - 1)))

    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / max(1, len(unvisited_nodes) - 1)

    detour_penalty = {}
    for node in unvisited_nodes:
        detour = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        detour_penalty[node] = 1 / (1 + detour) if detour > 0 else 1

    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        normalized_centrality = 1 / (1 + centrality[node]) if centrality[node] != 0 else 1
        scores[node] = (exploration_factor * distance +
                        (1 - exploration_factor) * normalized_centrality +
                        0.3 * detour_penalty[node])

    next_node = min(scores, key=scores.get)
    return next_node
