"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    # Calculate dynamic weight for centrality based on remaining nodes\n    remaining_nodes = len(unvisited_nodes)\n    dynamic_weight = max(0.1, min(0.9, 0.6 - 0.05 * (remaining_nodes - 1)))\n\n    # Calculate node centrality (average distance to other nodes)\n    centrality = {}\n    for node in unvisited_nodes:\n        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)\n        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0\n\n    # Calculate penalty for nodes too close to destination\n    penalty = {}\n    for node in unvisited_nodes:\n        penalty[node] = 1 / (1 + distance_matrix[node][destination_node])\n\n    # Combine factors with weights\n    scores = {}\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        normalized_centrality = 1 / (1 + centrality[node]) if centrality[node] != 0 else 1\n        scores[node] = (0.4 * distance +\n                        (0.3 * (1 - dynamic_weight) + 0.3 * dynamic_weight) * normalized_centrality +\n                        0.3 * penalty[node])\n\n    # Select node with minimum score\n    next_node = min(scores, key=scores.get)\n    return next_node"