def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    density_factor = remaining_nodes / total_nodes  # Normalized density of unvisited nodes

    for node in unvisited_nodes:
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        weight = 1 / (1 + remaining_nodes)  # Prioritize global as progress increases
        historical_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes  # Penalize high-historical nodes
        score = (1 - weight) * local_distance + weight * global_distance + density_factor * historical_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
