"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    best_score = float('inf')\n\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = [n for n in unvisited_nodes if n != node]\n            min_remaining_distance = min(distance_matrix[node][n] for n in remaining_nodes)\n            avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)\n            dynamic_penalty_weight = 1.0 / (len(unvisited_nodes) ** 0.5)\n            penalty = max(0, (current_distance - 3 * min_remaining_distance) / avg_remaining_distance) if avg_remaining_distance != 0 else 0\n            score = 1.2 * current_distance + 0.3 * min_remaining_distance + dynamic_penalty_weight * penalty - 0.3 * avg_remaining_distance\n        else:\n            score = current_distance\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node"