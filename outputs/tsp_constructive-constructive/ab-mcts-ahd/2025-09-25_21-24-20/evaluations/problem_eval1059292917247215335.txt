def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / (remaining_nodes + 1)))  # Temperature decreases as nodes are visited
    best_score = float('inf')
    next_node = None
    scores = []

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        potential_to_destination = distance_matrix[node][destination_node]
        balance_factor = 1 - (remaining_nodes / (remaining_nodes + 1))  # Adapts based on remaining nodes
        score = (balance_factor * distance_to_node) + ((1 - balance_factor) * potential_to_destination)
        scores.append((node, score))

    # Apply temperature-based probabilistic selection
    if scores:
        min_score = min(score[1] for score in scores)
        max_score = max(score[1] for score in scores)
        normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]
        probabilities = [math.exp(-temp * s) for _, s in normalized_scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]

    return next_node
