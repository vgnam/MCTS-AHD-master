def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance of unvisited nodes to current node
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        potential_to_destination = distance_matrix[node][destination_node]

        # Dynamic threshold based on average distance
        threshold = avg_distance * (1 - (remaining_nodes / (remaining_nodes + 1)))

        # Score combining distance to node and potential to destination, adjusted by threshold
        score = (distance_to_node + potential_to_destination) / (1 + abs(distance_to_node - threshold))

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
