def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if immediate_distance == 0:
            continue

        # Estimate long-term efficiency by average distance to remaining nodes
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            avg_remaining_distance = sum(
                distance_matrix[node][other] for other in remaining_nodes
            ) / len(remaining_nodes)
        else:
            avg_remaining_distance = 0

        # Dynamic weighting: balance immediate and long-term efficiency
        weight_immediate = 0.7
        weight_long_term = 0.3
        score = (weight_immediate * immediate_distance) + (weight_long_term * avg_remaining_distance)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
