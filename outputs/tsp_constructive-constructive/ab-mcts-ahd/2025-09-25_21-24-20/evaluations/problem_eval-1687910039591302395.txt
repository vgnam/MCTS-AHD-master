import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        potential_to_destination = distance_matrix[node][destination_node]
        decay_rate = math.exp(-remaining_nodes / total_nodes)
        balance_factor = decay_rate
        penalty = 0.1 * (total_nodes - remaining_nodes) / total_nodes  # Dynamic penalty for revisiting
        score = (balance_factor * distance_to_node) + ((1 - balance_factor) * potential_to_destination) + penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
