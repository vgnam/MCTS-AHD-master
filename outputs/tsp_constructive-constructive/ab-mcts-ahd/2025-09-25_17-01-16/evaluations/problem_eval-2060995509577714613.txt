def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight factor combining remaining nodes and destination proximity
        progress_factor = (remaining_nodes / total_nodes) ** 1.5
        centrality_factor = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)
        weight_factor = progress_factor * (1 - 0.5 * (centrality_factor / max(1, max(distance_matrix[node]))))

        score = -current_distance * (1 + weight_factor) + weight_factor * destination_distance

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
