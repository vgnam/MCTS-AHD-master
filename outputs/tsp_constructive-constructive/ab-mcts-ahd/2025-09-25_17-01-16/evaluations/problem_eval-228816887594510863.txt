def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Non-linear weight adjustment based on remaining nodes
        weight = 0.3 + 0.7 * (1.0 - (remaining_nodes / total_nodes) ** 2)

        # Adaptive bias: prioritize nodes closer to current but farther from destination
        bias = (distance_to_destination / (distance_to_current + 1e-6)) ** 0.5
        score = -distance_to_current + weight * distance_to_destination * bias

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
