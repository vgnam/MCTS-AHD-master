def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node]) / (len(distance_matrix[node]) - 1)

        # Dynamic weight: balance between remaining nodes and centrality
        weight = (remaining_nodes / total_nodes) * (1 - (centrality / max(sum(distance_matrix[current_node]) / (len(distance_matrix[current_node]) - 1), 1)))

        total_distance = distance_to_current + (weight * estimated_distance_to_destination) + (0.5 * centrality)

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
