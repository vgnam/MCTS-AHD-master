def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Adaptive weights
        locality_weight = 0.6 + 0.2 * (1 - remaining_nodes / len(unvisited_nodes + [current_node]))
        progress_weight = 0.3 * (remaining_nodes / len(unvisited_nodes + [current_node]))
        hub_weight = 0.1 * (remaining_nodes / len(unvisited_nodes + [current_node]))

        # Exploration bonus for high-connectivity nodes
        exploration_bonus = 0.0
        if remaining_nodes > 3:
            exploration_bonus = -0.1 * hub_score / len(unvisited_nodes)

        # Distance decay factor for final nodes
        distance_decay = 1.0
        if remaining_nodes <= 2:
            distance_decay = 0.8

        # Penalty for excessive distance
        penalty = 0.0
        avg_distance = sum(distance_matrix[current_node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        if distance_to_current > 1.3 * avg_distance:
            penalty = 0.2 * distance_to_current

        total_score = (locality_weight * distance_to_current * distance_decay +
                       progress_weight * distance_to_destination +
                       hub_weight * hub_score +
                       exploration_bonus +
                       penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
