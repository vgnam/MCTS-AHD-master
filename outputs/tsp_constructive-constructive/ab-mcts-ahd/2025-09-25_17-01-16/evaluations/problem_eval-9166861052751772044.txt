def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_sum = float('inf')
    remaining_nodes = len(unvisited_nodes)
    selection_frequency = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        weight_immediate = 0.5 * (1 / (1 + remaining_nodes))
        weight_estimated = 0.5 * (remaining_nodes / (1 + remaining_nodes))
        penalty = 0.1 * selection_frequency[node]
        weighted_sum = (weight_immediate * distance_to_current +
                       weight_estimated * estimated_distance_to_destination +
                       penalty)

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    if next_node is not None:
        selection_frequency[next_node] += 1

    return next_node
