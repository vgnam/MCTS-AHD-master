def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    weight = remaining_nodes / total_nodes

    # Calculate node centrality: average distance to all other nodes
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (remaining_nodes - 1)

    # Dynamic weight adjustment based on current node's centrality
    if current_node in centrality:
        weight *= (1 + centrality[current_node] / max(centrality.values(), default=1))

    # Enhanced penalty system with memory
    penalty = {node: 0 for node in unvisited_nodes}
    if hasattr(select_next_node, 'penalty_memory'):
        for node in unvisited_nodes:
            if node in select_next_node.penalty_memory:
                penalty[node] = select_next_node.penalty_memory[node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        score = -current_distance + weight * destination_distance - penalty[node] + 0.5 * centrality[node]

        if score > best_score:
            best_score = score
            next_node = node

    if next_node is not None:
        penalty[next_node] += 0.1
        if not hasattr(select_next_node, 'penalty_memory'):
            select_next_node.penalty_memory = {}
        select_next_node.penalty_memory[next_node] = penalty[next_node]

    return next_node
