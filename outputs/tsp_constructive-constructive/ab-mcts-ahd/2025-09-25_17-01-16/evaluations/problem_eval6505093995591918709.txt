def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Inverse dynamic weighting: prioritize destination early, then shift to immediate steps
        weight = 1 - (remaining_nodes / total_nodes)
        total_distance = (weight * distance_to_current) + ((1 - weight) * estimated_distance_to_destination)

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
