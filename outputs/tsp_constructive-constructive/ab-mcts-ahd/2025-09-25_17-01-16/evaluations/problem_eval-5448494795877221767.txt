def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight = 0.5 * (1 + (total_unvisited / (total_unvisited + 1)))  # Dynamic weight based on remaining nodes

    # Additional adaptive factor based on historical performance (simplified example)
    # In practice, this could be based on the ratio of the current path length to the optimal known path
    historical_factor = 0.7 if total_unvisited > len(unvisited_nodes) / 2 else 0.3

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        weighted_distance = (weight * historical_factor * distance_to_current +
                           (1 - weight) * (1 - historical_factor) * estimated_distance_to_destination)

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
