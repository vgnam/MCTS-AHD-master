def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight_factor = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        total_score = weight_factor * distance_to_destination + (1 - weight_factor) * distance_to_current

        # Penalty for nodes that were previously considered but not chosen
        if node in previously_considered and node != next_node:
            total_score *= 1.1

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    # Track considered nodes for penalty
    previously_considered.add(next_node)
    return next_node
