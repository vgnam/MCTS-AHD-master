import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        if distance_to_destination == 0:
            ratio = float('inf')
        else:
            ratio = distance_to_current / distance_to_destination

        dynamic_factor = 1 / (1 + math.exp(-(total_unvisited - len(unvisited_nodes) + 1)))
        proximity_weight = (1 - dynamic_factor) * 0.7
        progress_weight = dynamic_factor * 0.2
        hub_weight = 0.1

        cycle_penalty = 1.0 if node in unvisited_nodes and node != destination_node else 0.0

        score = (proximity_weight * distance_to_current +
                progress_weight * ratio +
                hub_weight * hub_score) + cycle_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
