def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    alpha = 0.3 * (1 + (remaining_nodes / total_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes

        # Quadratic penalty for revisits
        penalty = (1.0 - (remaining_nodes / total_nodes)) ** 2 if node != destination_node else 0.0

        # Weighted score combining local, global, and centrality considerations
        score = (1 - alpha) * distance_to_current + alpha * distance_to_destination + centrality + penalty * distance_to_current

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
