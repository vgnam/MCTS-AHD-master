def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    next_node = None
    best_score = float('-inf')
    alpha = 0.7  # Base weight for proximity
    beta = 0.2  # Base weight for destination
    gamma = 0.1  # Base weight for novelty

    # Calculate path performance metrics
    avg_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    max_path_length = max(distance_matrix[current_node][node] for node in unvisited_nodes)

    # Dynamic weight adjustment based on path performance
    if avg_path_length > 1.2 * max_path_length:
        alpha = 0.6
        beta = 0.3
        gamma = 0.1
    elif avg_path_length < 0.8 * max_path_length:
        alpha = 0.4
        beta = 0.4
        gamma = 0.2

    # Calculate attraction field for each node
    attraction_field = {}
    for node in unvisited_nodes:
        # Proximity component
        proximity = 1 / (1 + distance_matrix[current_node][node])

        # Destination component
        destination_component = 1 / (1 + distance_matrix[node][destination_node])

        # Novelty component (reward nodes with unique connections)
        novelty = sum(1 for other in unvisited_nodes
                    if distance_matrix[node][other] > 1.5 * distance_matrix[current_node][node]) / len(unvisited_nodes)

        # Attraction field calculation
        attraction_field[node] = (alpha * proximity +
                                beta * destination_component +
                                gamma * novelty)

        # Add path history penalty
        if len(unvisited_nodes) > 2:
            path_history = sum(1 for other in unvisited_nodes
                             if distance_matrix[node][other] < 0.7 * distance_matrix[current_node][node]) / len(unvisited_nodes)
            attraction_field[node] -= 0.1 * path_history

    # Select node with highest attraction field
    next_node = max(attraction_field.items(), key=lambda x: x[1])[0]

    return next_node
