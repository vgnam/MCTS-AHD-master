import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    temperature = 0.1 + 0.9 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        nearby_nodes = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * min(distance_matrix[node][other] for other in unvisited_nodes if other != node)]
        cluster_score = -len(nearby_nodes) * sum(distance_matrix[node][n] for n in nearby_nodes) / (len(nearby_nodes) + 1e-6)
        total_score = 0.5 * distance_to_current + 2.0 * distance_to_destination + 1.0 * cluster_score
        scores.append((node, total_score))

    if not scores:
        return None

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score / temperature) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
