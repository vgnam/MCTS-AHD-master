def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight as in No.2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead penalty: estimate future impact
        future_penalty = 0.0
        for future_node in unvisited_nodes:
            if future_node != node:
                future_penalty += distance_matrix[node][future_node] * (1 - weight_factor)

        # Combined penalty: No.2's penalty + lookahead
        penalty = 0.1 * (distance_to_current / (estimated_distance_to_destination + 1e-6)) + 0.05 * future_penalty

        # Balanced cost function
        total_distance = (1 - weight_factor) * distance_to_current + weight_factor * estimated_distance_to_destination + penalty

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
