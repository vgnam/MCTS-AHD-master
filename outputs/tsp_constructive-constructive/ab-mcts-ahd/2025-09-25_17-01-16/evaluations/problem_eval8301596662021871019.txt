importance as the tour progresses, and uses a penalty for nodes that are too far from the current path to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weights based on remaining nodes
        if remaining_nodes > 3:
            locality_weight = 0.6
            progress_weight = 0.3
            hub_weight = 0.1
        else:
            locality_weight = 0.4
            progress_weight = 0.4
            hub_weight = 0.2

        # Penalty for nodes too far from current path
        path_penalty = 0.05 * (distance_to_current + distance_to_destination)

        total_score = (locality_weight * distance_to_current +
                       progress_weight * distance_to_destination +
                       hub_weight * hub_score) + path_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
