def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes]
        median_distance_to_unvisited = sorted(distances_to_unvisited)[len(distances_to_unvisited) // 2]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic penalty for nodes with high average distances
        penalty = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if remaining_nodes > 1 else 0

        # Adaptive weights
        weight_current = 0.6 + (0.2 * (remaining_nodes / len(unvisited_nodes)))  # Increases as nodes remain
        weight_median = 0.2 + (0.1 * (1 - remaining_nodes / len(unvisited_nodes)))  # Decreases as nodes remain
        weight_dest = 0.2 + (0.2 * (remaining_nodes / len(unvisited_nodes)))  # Increases as nodes remain

        total_score = (distance_to_current * weight_current) + (median_distance_to_unvisited * weight_median) + (distance_to_destination * weight_dest) + penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
