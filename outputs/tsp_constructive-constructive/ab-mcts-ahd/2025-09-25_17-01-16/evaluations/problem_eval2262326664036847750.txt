def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    # Dynamic threshold: tighter constraints early, more flexibility later
    threshold_factor = (total_nodes - remaining_nodes) / total_nodes
    threshold = threshold_factor * distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate total distance with threshold adjustment
        total_distance = distance_to_current + estimated_distance_to_destination

        # Apply threshold: prioritize nodes within the threshold
        if total_distance <= threshold and total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # If no node within threshold, relax constraints and select the closest
    if next_node is None:
        for node in unvisited_nodes:
            distance_to_current = distance_matrix[current_node][node]
            if distance_to_current < min_total_distance:
                min_total_distance = distance_to_current
                next_node = node

    return next_node
