def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight for destination proximity based on remaining nodes
        weight = 0.5 * (1 + 1 / (1 + unvisited_count))  # Weight decreases as nodes are visited

        # Penalize nodes with higher historical usage (simulated by randomness for this example)
        usage_penalty = 0.1 * (0.5 + random.random())  # Random penalty for demonstration

        score = -current_distance + weight * destination_distance - usage_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
