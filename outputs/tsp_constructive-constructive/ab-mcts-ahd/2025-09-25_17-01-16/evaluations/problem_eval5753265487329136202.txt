def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][other] ** 2 for other in unvisited_nodes) / len(unvisited_nodes)
        alignment = (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 1.0

        proximity_weight = 1.0 / (1.0 + remaining_nodes) if remaining_nodes > 0 else 0.0
        centrality_weight = 0.5 * (1.0 - proximity_weight)
        alignment_weight = 0.4 * (1.0 + (distance_to_current / distance_matrix[current_node][destination_node]) if distance_matrix[current_node][destination_node] > 0 else 0.0)

        total_score = (distance_to_current * proximity_weight) + (centrality * centrality_weight) + (alignment * alignment_weight)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
