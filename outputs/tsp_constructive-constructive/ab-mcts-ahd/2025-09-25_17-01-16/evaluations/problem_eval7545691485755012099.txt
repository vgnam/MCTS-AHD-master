def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    # Dynamic temperature based on remaining nodes and historical performance
    temperature = 1.0 / (1.0 + 0.2 * remaining_nodes)

    # Adaptive lookahead factor
    lookahead_factor = 1.0 - (0.5 * (remaining_nodes / len(distance_matrix)))

    # Historical performance adjustment (simulated here)
    historical_quality = 0.7 if remaining_nodes > len(distance_matrix) // 2 else 0.9
    temperature *= historical_quality

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Novel scoring equation combining distance, lookahead, and temperature
        score = (-current_distance * (1 - lookahead_factor)) + \
                (destination_distance ** temperature) * lookahead_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
