def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        progress = 1.0 - (remaining_nodes / len(unvisited_nodes))
        weight = 1.0 / (1.0 + math.exp(-10 * (progress - 0.5)))

        # Local search heuristic near the end
        if remaining_nodes <= 3:
            weight *= 1.5

        score = -distance_to_current + weight * distance_to_destination

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
