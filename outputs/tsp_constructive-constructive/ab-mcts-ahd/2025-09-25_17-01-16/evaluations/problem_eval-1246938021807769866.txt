importance metrics derived from the distance matrix.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node importance as the average distance to all other nodes
        node_importance = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Dynamic weighting factor based on remaining unvisited nodes
        remaining_nodes = len(unvisited_nodes)
        weight_factor = 1 / (1 + remaining_nodes) if remaining_nodes > 0 else 1

        # Combined score with dynamic weighting
        total_score = (1 - weight_factor) * distance_to_current + weight_factor * estimated_distance_to_destination
        total_score += 0.1 * node_importance  # Incorporate node importance

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
