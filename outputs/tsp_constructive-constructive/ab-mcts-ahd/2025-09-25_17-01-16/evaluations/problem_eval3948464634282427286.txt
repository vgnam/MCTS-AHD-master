def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weighting based on remaining nodes
        locality_weight = 0.3 if remaining_nodes > 3 else 0.6
        progress_weight = 0.6 if remaining_nodes > 3 else 0.3
        hub_weight = 0.1 if remaining_nodes > 3 else 0.1

        # Penalty for nodes too far from current
        penalty = 0.0
        penalty_threshold = 2.0 if remaining_nodes > 3 else 1.5
        if distance_to_current > penalty_threshold * sum(distance_matrix[current_node][other] for other in unvisited_nodes) / len(unvisited_nodes):
            penalty = 0.5 * distance_to_current

        total_score = (locality_weight * distance_to_current +
                       progress_weight * distance_to_destination +
                       hub_weight * hub_score +
                       penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
