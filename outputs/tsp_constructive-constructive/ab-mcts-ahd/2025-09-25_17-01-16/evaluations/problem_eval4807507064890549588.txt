def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes and centrality
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        weight = 0.5 * (1.0 - (remaining_nodes / total_nodes) ** 3) + 0.3 * (centrality / max(distance_matrix[node]))

        # Probabilistic bias: prioritize nodes with high potential gain
        potential_gain = (distance_to_destination - distance_to_current) / (distance_to_current + 1e-6)
        score = -distance_to_current + weight * potential_gain * (1 + 0.2 * (remaining_nodes / total_nodes))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
