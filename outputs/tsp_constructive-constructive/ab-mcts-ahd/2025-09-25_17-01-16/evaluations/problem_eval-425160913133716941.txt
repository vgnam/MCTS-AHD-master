def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weighting factor: prioritize centrality when many nodes remain, prioritize distance_to_current when few remain
        weight_factor = (0.7 * (num_unvisited / len(distance_matrix))) + 0.3

        weighted_score = (weight_factor * centrality) + ((1 - weight_factor) * distance_to_current) + (0.2 * estimated_distance_to_destination)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
