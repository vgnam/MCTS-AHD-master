def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        # Dynamic scaling factor based on remaining nodes and current distance to destination
        scaling_factor = (1.0 + (current_to_dest / (current_to_node + 1e-6))) / (1.0 + 0.2 * remaining_nodes)

        # Penalize nodes that are too far from current but reward those closer to destination
        score = current_to_node * (1.0 + scaling_factor) - node_to_dest * (1.0 - scaling_factor)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
