def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Phase-based weighting
        phase_proximity = max(0.5, 0.9 - 0.4 * (remaining_nodes / total_nodes))
        phase_hub = min(0.5, 0.1 + 0.2 * (1 - remaining_nodes / total_nodes))
        phase_destination = 0.2 + 0.3 * (1 - remaining_nodes / total_nodes)

        # Connectivity-based hub score
        hub_score = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node)

        # Adaptive penalty for long paths
        path_penalty = (distance_to_current + distance_to_destination) * (1 - phase_proximity)

        total_score = (phase_proximity * distance_to_current +
                      phase_hub * hub_score +
                      phase_destination * distance_to_destination +
                      path_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
