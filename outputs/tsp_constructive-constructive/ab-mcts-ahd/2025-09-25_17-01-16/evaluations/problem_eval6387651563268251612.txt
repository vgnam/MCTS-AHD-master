def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic logarithmic weighting based on remaining nodes
        if remaining_nodes > 1:
            log_factor = 1 / (1 + math.log(remaining_nodes + 1))
            total_score = (distance_to_current * log_factor) + (estimated_distance_to_destination * (1 - log_factor))
        else:
            total_score = distance_to_current  # Prioritize closest node when few remain

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
