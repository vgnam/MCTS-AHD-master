def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_score = float('inf')
    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Avoid division by zero

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting factor based on remaining nodes
        weight_factor = remaining_ratio
        weighted_score = (weight_factor * distance_to_current) + ((1 - weight_factor) * avg_distance_to_unvisited)

        # Penalize nodes too close to destination to avoid premature convergence
        if distance_to_destination < (0.5 * avg_distance_to_unvisited):
            weighted_score *= 1.5

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
