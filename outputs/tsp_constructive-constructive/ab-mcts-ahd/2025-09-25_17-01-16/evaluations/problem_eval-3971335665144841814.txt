def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Normalize centrality term
        max_possible_avg = max(distance_matrix[node][other] for other in unvisited_nodes) if unvisited_nodes else 0
        normalized_centrality = avg_distance_to_unvisited / max_possible_avg if max_possible_avg else 0

        # Dynamic weight based on remaining nodes
        weight = (remaining_nodes / (remaining_nodes + 1)) ** 2

        # Balanced scoring with penalty exponent
        total_score = (1 - weight) * distance_to_current + weight * (normalized_centrality ** 1.25)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
