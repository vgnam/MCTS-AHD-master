def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        if remaining_nodes <= 3:
            weight = 0.9  # Prioritize current distance when few nodes left
        else:
            weight = 0.7  # Balance proximity and destination distance

        # Penalty term to avoid revisiting nodes with high historical scores
        penalty = 0.1 if node in unvisited_nodes else 0.0

        score = (1 - weight) * current_distance + weight * destination_distance - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
