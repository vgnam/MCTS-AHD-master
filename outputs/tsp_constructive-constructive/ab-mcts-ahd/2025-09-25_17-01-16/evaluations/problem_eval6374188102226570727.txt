defined intervals, while also incorporating a probabilistic element to escape local optima by occasionally selecting nodes with higher estimated distances.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    phase_factor = 0.7 if remaining_nodes / total_nodes > 0.5 else 0.3  # Alternate between phases

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic phase-based weighting
        if remaining_nodes / total_nodes > 0.5:
            # Early phase: prioritize immediate steps
            total_distance = distance_to_current + (phase_factor * estimated_distance_to_destination)
        else:
            # Late phase: prioritize long-term optimization
            total_distance = (1 - phase_factor) * distance_to_current + estimated_distance_to_destination

        # Add probabilistic element to escape local optima
        if random.random() < 0.2 and node != destination_node:
            total_distance *= 1.5  # Occasionally penalize non-destination nodes

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
