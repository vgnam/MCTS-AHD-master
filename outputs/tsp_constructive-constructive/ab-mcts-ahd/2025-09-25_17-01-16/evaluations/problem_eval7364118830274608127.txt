importance as nodes decrease), hub centrality (low priority or ignored when few nodes remain), and penalizes excessively distant nodes (scaled by remaining nodes) using a sophisticated weighted scoring system that combines the strengths of the three existing algorithms.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weighting based on remaining nodes
        locality_weight = 0.8 if remaining_nodes > 2 else 0.95
        progress_weight = 0.15 if remaining_nodes > 2 else 0.05
        hub_weight = 0.05 if remaining_nodes > 2 else 0.0

        # Penalty for nodes too far from current
        penalty = 0.0
        avg_distance = sum(distance_matrix[current_node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        if distance_to_current > 1.5 * avg_distance:
            penalty = 0.4 * distance_to_current

        total_score = (locality_weight * distance_to_current +
                       progress_weight * distance_to_destination +
                       hub_weight * hub_score +
                       penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
