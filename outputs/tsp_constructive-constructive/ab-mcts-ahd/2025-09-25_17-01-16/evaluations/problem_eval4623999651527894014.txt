def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting: higher emphasis on destination awareness as remaining nodes decrease
        weight = 0.8 if remaining_nodes > 3 else 0.5
        score = -0.7 * current_distance + weight * destination_distance

        # Stronger penalty for revisiting nearby nodes when few nodes remain
        if remaining_nodes <= 2:
            score -= 0.3 * current_distance

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
