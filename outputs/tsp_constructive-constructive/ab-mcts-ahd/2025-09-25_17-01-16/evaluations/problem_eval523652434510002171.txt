def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Adjusts based on remaining nodes

        # Penalize nodes that create dead-ends or loops
        if len(unvisited_nodes) > 1:
            loop_penalty = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) / 10
        else:
            loop_penalty = 0

        # Normalize scores to ensure fair comparison
        normalized_current = current_distance / max(1, max(distance_matrix[current_node]))
        normalized_destination = destination_distance / max(1, max(distance_matrix[destination_node]))

        total_score = dynamic_weight * normalized_current + (1 - dynamic_weight) * normalized_destination - loop_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
