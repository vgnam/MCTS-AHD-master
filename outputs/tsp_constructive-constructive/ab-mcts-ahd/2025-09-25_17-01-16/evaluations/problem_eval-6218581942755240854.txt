importance metric based on centrality, and employs a revisit penalty that scales with the number of remaining nodes to prevent early cycles while encouraging exploration.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    max_remaining = max(1, remaining_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Non-linear dynamic weight that accelerates as nodes decrease
        dynamic_weight = 0.2 + 0.8 * (1 - (remaining_nodes / max_remaining) ** 2)

        # Node importance based on average distance to other unvisited nodes
        if remaining_nodes > 1:
            node_importance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
        else:
            node_importance = 0

        # Scaling revisit penalty with remaining nodes to encourage exploration early
        penalty = 1.0 + 0.5 * (1 if node == current_node else 0) * (1 - remaining_nodes / max_remaining)

        # Combine all components with adaptive normalization
        total_score = (immediate_distance + dynamic_weight * future_distance) / (1 + 0.1 * node_importance) + penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
