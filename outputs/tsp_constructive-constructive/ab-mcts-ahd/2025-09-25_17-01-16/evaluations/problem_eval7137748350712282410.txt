def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_value = float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + 0.2 * remaining_nodes)  # Adjusted decay rate
    centrality_factor = 0.5 * (1.0 - (remaining_nodes / len(distance_matrix)))  # Normalized centrality

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_others = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        value = (0.5 * distance_to_current) + \
                (0.3 * (distance_to_destination ** weight_factor)) + \
                (0.2 * centrality_factor * avg_distance_to_others)  # Added centrality term

        if value < min_value:
            min_value = value
            next_node = node

    return next_node
