def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)
    remaining_ratio = total_unvisited / len(unvisited_nodes) if unvisited_nodes else 0
    decay_factor = max(0.1, remaining_ratio)  # Ensures minimum weight for local optimization

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        weighted_distance = (1 - decay_factor) * distance_to_current + decay_factor * estimated_distance_to_destination

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
