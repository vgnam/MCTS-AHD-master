def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    max_remaining = max(1, remaining_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 * (1 - math.exp(-0.5 * (1 - remaining_nodes / max_remaining)))  # Exponential decay for future prioritization
        penalty = 1.0 + 0.5 * (1 if node == current_node else 0) * (1.0 / remaining_nodes)  # Scaled revisit penalty
        total_score = immediate_distance + dynamic_weight * future_distance + penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
