importance of hub centrality and revisit penalties to optimize path efficiency and avoid loops.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weights based on remaining unvisited nodes
        distance_weight = 1.2 * (num_unvisited / (num_unvisited + 1))
        destination_weight = 0.8 * (num_unvisited / (num_unvisited + 1))
        hub_weight = 0.6 + (0.4 * (1 - num_unvisited / len(unvisited_nodes)))
        revisit_penalty = 1.5 * (1 + (num_unvisited / len(unvisited_nodes)))

        total_score = (distance_weight * distance_to_current +
                      destination_weight * distance_to_destination +
                      hub_weight * hub_score +
                      revisit_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
