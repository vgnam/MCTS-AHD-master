def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        weight = 0.7 if remaining_nodes > 2 else 0.3
        weighted_score = distance_to_current + weight * distance_to_destination

        # Penalize nodes that were skipped in previous steps (simulated here)
        if node in unvisited_nodes and node != destination_node:
            weighted_score += 0.2 * distance_matrix[current_node][node]

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
