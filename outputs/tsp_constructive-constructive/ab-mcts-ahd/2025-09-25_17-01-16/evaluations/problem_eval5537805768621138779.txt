def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes and path length
        weight = 0.7 if remaining_nodes > len(unvisited_nodes) / 2 else 0.3
        score = (current_distance / max_distance) * (1 - weight) - (destination_distance / max_distance) * weight

        # Penalty for nodes very close to the current node when few nodes remain
        if remaining_nodes < 3:
            score += 0.15 * (current_distance / max_distance)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
