def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 to include the current node

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting factor with static base
        weight = (remaining_nodes / total_nodes) * 0.7 + 0.3  # Balanced between static and dynamic
        total_distance = distance_to_current + (weight * estimated_distance_to_destination)

        # Lookahead: Consider the next step's potential
        if remaining_nodes > 1:
            temp_unvisited = unvisited_nodes.copy()
            temp_unvisited.remove(node)
            lookahead_node = None
            min_lookahead_distance = float('inf')
            for next_node_candidate in temp_unvisited:
                lookahead_distance = distance_matrix[node][next_node_candidate] + distance_matrix[next_node_candidate][destination_node]
                if lookahead_distance < min_lookahead_distance:
                    min_lookahead_distance = lookahead_distance
            total_distance += 0.2 * min_lookahead_distance  # Reduce weight of lookahead

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
