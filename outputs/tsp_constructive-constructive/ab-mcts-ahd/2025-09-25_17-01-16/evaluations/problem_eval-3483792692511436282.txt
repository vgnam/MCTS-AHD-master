def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]

        # Dynamic weight based on remaining nodes
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))

        # Secondary heuristic: average distance to unvisited nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        secondary_factor = 0.3 * avg_distance

        score = immediate_distance + (weight * future_savings) + secondary_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
