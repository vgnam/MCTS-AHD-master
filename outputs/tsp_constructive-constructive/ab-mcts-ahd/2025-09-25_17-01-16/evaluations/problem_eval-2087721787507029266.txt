def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and logarithmic scaling
        progress_factor = (total_nodes - remaining_nodes) / total_nodes
        log_factor = 1 + (1 / (1 + progress_factor)) * (remaining_nodes ** 0.5)
        weight = 0.3 + 0.7 * (1 - (remaining_nodes / total_nodes) ** log_factor)

        # Score combines distance and weighted future potential
        score = -distance_to_current * (1 + 0.5 * weight) + weight * distance_to_destination

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
