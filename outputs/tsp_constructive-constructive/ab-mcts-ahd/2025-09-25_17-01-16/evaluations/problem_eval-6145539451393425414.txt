def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.3 + 0.7 * (remaining_nodes / (remaining_nodes + 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality as a weighted sum of closeness and betweenness
        node_degree = sum(1 for neighbor in range(len(distance_matrix)) if distance_matrix[node][neighbor] > 0)
        centrality = (1 / (distance_to_current + 1e-6)) + (node_degree / len(distance_matrix))

        # Novel revisit penalty scales with distance and node degree
        revisit_penalty = (distance_to_current ** 2) * (node_degree / len(distance_matrix))

        # Score combines distance, centrality, and revisit penalty
        score = (distance_to_current + exploration_factor * distance_to_destination) / centrality + revisit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
