def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining distance
        if remaining_distance < distance_matrix[current_node][destination_node] / 2:
            weight_proximity = 0.7
            weight_alignment = 0.3
        else:
            weight_proximity = 0.5
            weight_alignment = 0.5

        # Penalty for revisiting nodes that were recently visited (simulated here)
        penalty = 0.2 if node in [current_node] else 0.0

        total_score = (weight_proximity * distance_to_current + weight_alignment * distance_to_destination) * (1 + penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
