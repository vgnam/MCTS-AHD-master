def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_sum = float('inf')
    total_nodes = len(unvisited_nodes) + 1  # Including current node
    remaining_nodes = len(unvisited_nodes)
    ratio = remaining_nodes / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        weight = 1 / (1 + ratio)  # Dynamic weight based on node ratio
        weighted_sum = (1 - weight) * distance_to_current + weight * estimated_distance_to_destination

        # Penalty for nodes with high estimated distance to destination
        penalty = 0.1 * estimated_distance_to_destination
        weighted_sum += penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
