import random
    import math

    next_node = None
    total_unvisited = len(unvisited_nodes)
    weight = 0.5 * (1 + (total_unvisited / (total_unvisited + 1)))  # Dynamic weight based on remaining nodes
    candidates = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        weighted_distance = weight * distance_to_current + (1 - weight) * estimated_distance_to_destination

        # Penalize nodes that are too close to the current node to encourage diversity
        penalty = 0.1 * distance_to_current if distance_to_current < 0.2 * max(distance_matrix[current_node]) else 0
        adjusted_distance = weighted_distance + penalty

        candidates.append((node, adjusted_distance))

    # Select the top 3 candidates and choose randomly to add diversity
    top_candidates = sorted(candidates, key=lambda x: x[1])[:3]
    if top_candidates:
        next_node = random.choice(top_candidates)[0]

    return next_node
