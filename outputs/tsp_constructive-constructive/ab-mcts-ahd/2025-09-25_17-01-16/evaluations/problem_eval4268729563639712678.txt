def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    # Dynamic weights based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    weight_current = 0.5 + 0.1 * (remaining_nodes / len(distance_matrix))  # Decreases as more nodes are visited
    weight_destination = 0.3 + 0.2 * (1 - remaining_nodes / len(distance_matrix))  # Increases as more nodes are visited
    weight_hub = 0.2  # Fixed but balanced

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Normalize scores to ensure balanced contribution
        max_distance = max(max(row) for row in distance_matrix)
        normalized_current = distance_to_current / max_distance
        normalized_destination = distance_to_destination / max_distance
        normalized_hub = hub_score / (max_distance * (remaining_nodes - 1)) if remaining_nodes > 1 else 0

        total_score = weight_current * normalized_current + weight_destination * normalized_destination + weight_hub * normalized_hub

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
