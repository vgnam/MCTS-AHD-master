def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + total_unvisited)  # Decreasing temperature over time
    weight = 0.5 * (1 + temperature)  # Dynamic weight based on temperature

    probabilities = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        weighted_distance = weight * distance_to_current + (1 - weight) * estimated_distance_to_destination
        probabilities.append(weighted_distance)

    # Normalize probabilities using softmax with temperature
    exp_probs = [math.exp(-prob / temperature) for prob in probabilities]
    sum_exp_probs = sum(exp_probs)
    normalized_probs = [exp_prob / sum_exp_probs for exp_prob in exp_probs]

    # Select node based on normalized probabilities
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
