def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes]
        avg_distance_to_unvisited = sum(distances_to_unvisited) / len(unvisited_nodes)
        max_distance_to_unvisited = max(distances_to_unvisited) if remaining_nodes > 0 else 0

        # Dynamic weight with logarithmic scaling
        weight = 1 - (remaining_nodes / (remaining_nodes + 1)) ** 0.5

        # Novel scoring function with outlier penalty
        total_score = (1 - weight) * distance_to_current + weight * (avg_distance_to_unvisited ** 1.2)
        total_score += 0.3 * (max_distance_to_unvisited - avg_distance_to_unvisited) ** 1.3

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
