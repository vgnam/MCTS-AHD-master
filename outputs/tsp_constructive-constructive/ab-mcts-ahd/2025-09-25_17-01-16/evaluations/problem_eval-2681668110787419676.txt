import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Adaptive temperature based on path history and remaining nodes
    path_length_factor = 1.0 / (len(distance_matrix) - len(unvisited_nodes) + 1)
    temperature = len(unvisited_nodes) * path_length_factor

    # Calculate node density for weight adjustment
    node_density = len(unvisited_nodes) / len(distance_matrix)

    # Calculate weights with adaptive adjustments
    distance_weight = 0.6 - 0.1 * node_density
    destination_weight = 0.4 - 0.1 * node_density
    connectivity_weight = 0.2 + 0.2 * node_density

    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate connectivity score
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
            connectivity = sum(1 for other in remaining_nodes if distance_matrix[node][other] < avg_distance) / len(remaining_nodes)
            path_diversity = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
            connectivity_score = connectivity * path_diversity
        else:
            connectivity_score = 0

        # Calculate composite score with adaptive weights
        total_score = (distance_weight * distance_to_current +
                      destination_weight * distance_to_destination +
                      connectivity_weight * connectivity_score)
        scores.append((node, total_score))

    # Normalize scores and apply temperature-based selection
    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score / temperature) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
