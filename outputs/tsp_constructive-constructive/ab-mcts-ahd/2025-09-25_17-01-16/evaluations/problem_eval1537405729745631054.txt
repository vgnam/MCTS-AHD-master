import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment with sigmoid function
        weight = 1 / (1 + math.exp(-5 * (remaining_nodes / total_nodes - 0.5)))

        # Node potential combining distance and destination impact
        potential = distance_to_destination / (distance_to_current + 1e-6)

        # Decay factor to emphasize global considerations
        decay = (remaining_nodes / total_nodes) ** 3

        # Probabilistic score with exploration-exploitation tradeoff
        score = (1 - weight) * (-distance_to_current) + weight * (potential ** 0.5) * decay

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
