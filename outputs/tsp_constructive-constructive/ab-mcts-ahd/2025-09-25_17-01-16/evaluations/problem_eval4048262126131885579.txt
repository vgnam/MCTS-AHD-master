def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_unvisited_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        dynamic_alpha = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Adjusts alpha based on remaining nodes
        total_score = dynamic_alpha * distance_to_current + (1 - dynamic_alpha) * estimated_distance_to_destination
        total_score += 0.2 * (distance_to_current - total_unvisited_distance)  # Penalizes deviation from average distance

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
