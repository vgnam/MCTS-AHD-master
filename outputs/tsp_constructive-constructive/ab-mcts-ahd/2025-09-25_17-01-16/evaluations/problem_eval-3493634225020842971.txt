def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment using sigmoid function
        weight = 1 / (1 + math.exp(-5 * (remaining_nodes / total_nodes - 0.5)))

        # Global potential factor: average distance to all remaining nodes
        global_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Exploration bonus: encourages visiting nodes with high potential
        exploration_bonus = global_potential * (1 - (remaining_nodes / total_nodes))

        # Combined score with dynamic components
        score = -distance_to_current + weight * (distance_to_destination + exploration_bonus)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
