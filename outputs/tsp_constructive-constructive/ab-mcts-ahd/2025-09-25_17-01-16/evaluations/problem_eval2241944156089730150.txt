importance of immediate vs. future distances, incorporating a heuristic to favor nodes that balance proximity and potential future utility, while penalizing revisits with a non-linear penalty to discourage cycles.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    max_remaining = max(1, remaining_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjusts based on remaining nodes and relative importance of immediate vs. future
        dynamic_weight = 0.2 + 0.8 * (1 - (remaining_nodes / max_remaining) ** 2)
        # Non-linear penalty for revisits to discourage cycles
        penalty = 1.0 + 0.5 * (1 if node == current_node else 0) ** 2

        # Heuristic to favor nodes that balance immediate and future distances
        balance_heuristic = abs(immediate_distance - future_distance) / (immediate_distance + future_distance + 1e-6)
        total_score = immediate_distance + dynamic_weight * future_distance + penalty + balance_heuristic

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
