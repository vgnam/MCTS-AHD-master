def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    # Dynamic weight adjustment
    weight_current = 0.6 + 0.2 * remaining_ratio
    weight_dest = 0.1 + 0.2 * (1 - remaining_ratio)
    weight_hub = 0.05 + 0.1 * (1 - remaining_ratio)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Penalty for potential cycles (nodes already visited)
        cycle_penalty = 1 if node in visited_nodes else 0

        total_score = (weight_current * distance_to_current +
                      weight_dest * distance_to_destination +
                      weight_hub * hub_score) + cycle_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
