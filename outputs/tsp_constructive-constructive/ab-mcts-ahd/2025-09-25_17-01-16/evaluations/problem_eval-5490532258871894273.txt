def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Non-linear dynamic weight using sigmoid function
        weight = 1 / (1 + math.exp(-0.1 * (remaining_nodes - 5)))

        # Lookahead mechanism: evaluate next potential node
        if remaining_nodes > 1:
            next_unvisited = [n for n in unvisited_nodes if n != node]
            next_node_candidate = min(next_unvisited, key=lambda x: distance_matrix[node][x])
            lookahead_cost = distance_matrix[node][next_node_candidate]
        else:
            lookahead_cost = 0

        # Hybrid cost function
        total_distance = (1 - weight) * distance_to_current + weight * estimated_distance_to_destination + 0.2 * lookahead_cost

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
