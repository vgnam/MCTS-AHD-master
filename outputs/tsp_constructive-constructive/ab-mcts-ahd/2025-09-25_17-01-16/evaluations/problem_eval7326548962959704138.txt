def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    weight = (remaining_nodes / total_nodes) ** 2  # Exponential decay in weight
    visit_frequency = {node: 0 for node in unvisited_nodes}
    locality_penalty = {}

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Calculate locality-based penalty
        locality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        locality_penalty[node] = locality / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Score with frequency-based adjustment
        score = -current_distance + weight * destination_distance - locality_penalty[node] - (0.2 * visit_frequency[node])

        if score > best_score:
            best_score = score
            next_node = node

    if next_node is not None:
        visit_frequency[next_node] += 1

    # Probabilistic selection to add stochasticity
    if remaining_nodes > 1 and random.random() < 0.3:  # 30% chance to explore
        candidates = [n for n in unvisited_nodes if n != next_node]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
