import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes]
        avg_distance_to_unvisited = sum(distances_to_unvisited) / len(unvisited_nodes)
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            ratio = float('inf')
        else:
            ratio = distance_to_current / distance_to_destination

        variance = sum((d - avg_distance_to_unvisited) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)
        decay_factor = math.exp(-remaining_nodes / len(unvisited_nodes))
        weight = 1 / (1 + math.exp(-(remaining_nodes - 1)))

        total_score = (distance_to_current * (1 + decay_factor)) + (avg_distance_to_unvisited * weight) + (ratio * (1 + variance))

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
