def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    alpha = 0.7  # Weight for distance to current node
    beta = 0.3    # Weight for estimated distance to destination
    gamma = 1.2   # Exponential scaling factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate weighted and scaled score
        score = (alpha * (distance_to_current ** gamma) +
                 beta * (estimated_distance_to_destination ** (1/gamma)))

        # Penalize nodes that are too close to the current node
        if distance_to_current < 0.1 * max(distance_matrix[current_node]):
            score *= 1.5

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
