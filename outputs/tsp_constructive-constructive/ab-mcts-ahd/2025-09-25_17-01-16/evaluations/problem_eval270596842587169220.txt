def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weights based on remaining nodes
        weight_locality = 0.6 + (0.8 - 0.6) * (1.0 - remaining_nodes / len(unvisited_nodes))
        weight_progress = 0.3 + (0.5 - 0.3) * (1.0 - remaining_nodes / len(unvisited_nodes))
        weight_hub = 0.1

        # Penalize very close nodes
        penalty = 1.0 if current_distance < 0.1 * distance_matrix[current_node][destination_node] else 0.0
        score = -weight_locality * current_distance * (1.0 - penalty) + weight_progress * destination_distance - weight_hub * hub_score

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
