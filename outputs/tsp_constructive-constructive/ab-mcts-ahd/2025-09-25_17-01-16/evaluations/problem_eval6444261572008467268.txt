def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_distance = float('inf')
    total_unvisited = len(unvisited_nodes)

    if total_unvisited > len(unvisited_nodes) / 2:
        weight = 0.7  # Aggressive early focus on global optimization
    else:
        weight = 0.5  # Balanced approach later

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Penalize nodes too close to current node to avoid revisiting
        penalty = max(0, 1 - distance_to_current / (distance_matrix[current_node][destination_node] * 0.5))
        weighted_distance = weight * distance_to_current + (1 - weight) * estimated_distance_to_destination + penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
