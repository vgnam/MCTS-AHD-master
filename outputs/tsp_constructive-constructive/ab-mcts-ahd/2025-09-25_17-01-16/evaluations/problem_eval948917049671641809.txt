def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    distance_to_destination = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight based on proximity to destination
        proximity_weight = 1 / (1 + math.exp(-(distance_to_dest - 0.5 * max_distance)))
        weight_to_dest = 0.7 * (1 - proximity_weight) + 0.9 * proximity_weight
        weight_to_current = 1 - weight_to_dest

        # Penalty for nodes too far from current
        penalty = 0.2 if distance_to_current > 0.7 * max_distance else 0

        total_score = weight_to_dest * distance_to_dest + weight_to_current * distance_to_current + penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
