def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and distance to destination
        weight = 0.5 + (1.0 - 0.5) * (1.0 - remaining_nodes / len(unvisited_nodes))
        normalized_destination = distance_to_destination / (sum(distance_matrix[node]) + 1e-6)

        # Penalize nodes too close to current node to avoid revisiting
        penalty = 1.0 if distance_to_current < 0.1 * sum(distance_matrix[current_node]) else 0.0
        score = (-distance_to_current + weight * normalized_destination) * (1.0 - penalty)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
