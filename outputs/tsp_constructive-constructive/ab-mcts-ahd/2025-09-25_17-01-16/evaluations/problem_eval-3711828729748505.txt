def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, history=None, alpha=0.7):
    if history is None:
        history = []

    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    # Calculate moving average of recent steps' distances
    if history:
        avg_recent_distance = sum(history) / len(history)
    else:
        avg_recent_distance = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight factor with historical adjustment
        weight = (remaining_nodes / total_nodes) * (1 + alpha * (avg_recent_distance / (distance_to_current + 1e-6)))

        total_distance = distance_to_current + (weight * estimated_distance_to_destination)

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Update history with the current step's distance
    if next_node is not None:
        history.append(distance_matrix[current_node][next_node])

    return next_node
