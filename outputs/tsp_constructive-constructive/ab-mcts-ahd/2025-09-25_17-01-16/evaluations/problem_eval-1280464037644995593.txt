def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weight adjustment based on path potential
        dynamic_weight = 0.5 + 0.4 * (1 - len(unvisited_nodes) / len(distance_matrix))
        lookahead_factor = min(distance_matrix[node][other] for other in unvisited_nodes if other != node) if unvisited_nodes else 0
        revisit_penalty = 1 + 0.1 * (distance_to_current / max(distance_matrix[current_node]))

        total_score = (dynamic_weight * distance_to_current +
                       0.3 * distance_to_destination +
                       0.2 * hub_score -
                       0.1 * lookahead_factor +
                       revisit_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
