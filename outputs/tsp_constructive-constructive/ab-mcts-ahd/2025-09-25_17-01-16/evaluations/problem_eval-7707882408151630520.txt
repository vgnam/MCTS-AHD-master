import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1  # +1 for the current node

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function to smooth transition
        progress = (total_nodes - remaining_nodes) / total_nodes
        weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))  # Sigmoid centered at 0.5

        # Penalty for revisiting nodes that were previously considered but discarded
        penalty = 0
        if node in visited_history and len(visited_history) > 1:
            last_considered = visited_history[-2]
            if last_considered == node:
                penalty = 0.5 * distance_matrix[current_node][node]

        score = -current_distance + weight * destination_distance - penalty

        if score > best_score:
            best_score = score
            next_node = node

    # Update visited history (assumed to be maintained externally)
    if 'visited_history' not in globals():
        visited_history = []
    if next_node is not None:
        visited_history.append(next_node)

    return next_node
