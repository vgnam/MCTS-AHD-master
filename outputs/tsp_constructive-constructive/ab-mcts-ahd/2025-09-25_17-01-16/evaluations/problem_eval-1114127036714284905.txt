def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    avg_distance_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    current_to_destination = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        detour_penalty = (distance_to_current + estimated_distance_to_destination) / (current_to_destination + 1e-6)
        normalized_ratio = estimated_distance_to_destination / (avg_distance_to_destination + 1e-6)

        dynamic_weight = 1 - (remaining_nodes / (remaining_nodes + 1))
        total_score = (distance_to_current * normalized_ratio) + (detour_penalty * dynamic_weight)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
