def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_steps = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        normalized_avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / (len(unvisited_nodes) * max(distance_matrix[node][other] for other in unvisited_nodes) if unvisited_nodes else 1)
        distance_to_destination = distance_matrix[node][destination_node]

        weight_avg = 0.5 * (1 - (remaining_nodes / total_steps))  # Dynamic centrality weight
        weight_current = 0.3 * (remaining_nodes / total_steps)  # Decreasing proximity weight
        weight_dest = 0.2 * (1 - (distance_matrix[current_node][destination_node] / sum(distance_matrix[destination_node][other] for other in unvisited_nodes) if unvisited_nodes else 1))  # Adaptive destination weight

        total_score = (distance_to_current * weight_current) + (normalized_avg_distance * weight_avg) + (distance_to_destination * weight_dest)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
