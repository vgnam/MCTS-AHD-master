def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    weight_current = 1.0 + 0.3 * (num_unvisited / (1 + num_unvisited))
    weight_dest = 1.0 - 0.2 * (num_unvisited / (1 + num_unvisited))
    weight_hub = 0.2 + 0.4 * (num_unvisited / (1 + num_unvisited))
    backtrack_penalty = 0.5 + 0.5 * (1 - num_unvisited / (1 + num_unvisited))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_others = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1)
        hub_score = 1 / (1 + avg_distance_to_others)
        backtrack_cost = distance_matrix[node][current_node] if num_unvisited > 1 else 0
        total_score = (weight_current * distance_to_current +
                       weight_dest * distance_to_destination +
                       weight_hub * hub_score -
                       backtrack_penalty * backtrack_cost)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
