def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, alpha=0.5):
    next_node = None
    min_total_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalize distances to ensure fair comparison
        max_distance = max(distance_to_current, avg_distance_to_unvisited, distance_to_destination)
        if max_distance == 0:
            max_distance = 1  # Avoid division by zero
        normalized_distance_to_current = distance_to_current / max_distance
        normalized_avg_distance_to_unvisited = avg_distance_to_unvisited / max_distance
        normalized_distance_to_destination = distance_to_destination / max_distance

        total_score = normalized_distance_to_current + normalized_avg_distance_to_unvisited - alpha * normalized_distance_to_destination

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
