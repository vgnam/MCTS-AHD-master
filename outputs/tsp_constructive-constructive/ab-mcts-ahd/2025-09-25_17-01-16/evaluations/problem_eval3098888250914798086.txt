def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    second_min_total_distance = float('inf')
    second_best_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        weight = remaining_nodes / total_nodes
        total_distance = distance_to_current + (weight * estimated_distance_to_destination)

        if total_distance < min_total_distance:
            second_min_total_distance = min_total_distance
            second_best_node = next_node
            min_total_distance = total_distance
            next_node = node
        elif total_distance < second_min_total_distance:
            second_min_total_distance = total_distance
            second_best_node = node

    # Escape suboptimal paths by considering the second-best node if the best node leads to a potential dead-end
    if next_node is not None and second_best_node is not None:
        if distance_matrix[next_node][destination_node] > distance_matrix[second_best_node][destination_node]:
            next_node = second_best_node

    return next_node
