def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality (average distance to all unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        # Dynamic exploration/exploitation factor (sigmoid function)
        exploration_factor = 1 / (1 + math.exp(-(total_unvisited - 5)))

        # Weighted score: balance current distance, destination proximity, and centrality
        total_score = (exploration_factor * distance_to_current +
                      (1 - exploration_factor) * distance_to_destination +
                      0.3 * centrality)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
