def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate hub_score with dynamic weight
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        hub_weight = 0.3 + 0.2 * (1 - len(unvisited_nodes) / len(distance_matrix))  # Increase weight as nodes are visited

        # Penalize outliers (nodes with high deviation from average distance)
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        deviation = sum((distance_matrix[node][other] - avg_distance) ** 2 for other in unvisited_nodes if other != node) ** 0.5
        penalty = 0.1 * deviation

        total_score = distance_to_current + 0.5 * distance_to_destination + hub_weight * hub_score - penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
