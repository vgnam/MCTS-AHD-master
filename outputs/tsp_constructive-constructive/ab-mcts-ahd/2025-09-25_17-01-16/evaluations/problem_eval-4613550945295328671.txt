def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    base_weight = remaining_nodes / total_nodes
    proximity_bias = 0.5 * (1 - base_weight)
    penalty_scale = 1.0 / (remaining_nodes + 1)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Proximity to current node and destination node
        proximity_score = (1 - proximity_bias) * current_distance - proximity_bias * destination_distance

        # Dynamic penalty based on remaining nodes
        penalty = penalty_scale * (total_nodes - remaining_nodes)

        score = -proximity_score - penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
