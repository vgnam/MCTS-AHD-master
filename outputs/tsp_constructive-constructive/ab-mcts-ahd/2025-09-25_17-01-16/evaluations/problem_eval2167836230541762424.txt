def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weight adjustment based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight_adj = 1.0 / (1.0 + 0.1 * remaining_nodes)

        # Penalize outliers in distance distribution
        distances_to_current = [distance_matrix[current_node][other] for other in unvisited_nodes]
        mean_dist = sum(distances_to_current) / len(distances_to_current)
        std_dev = (sum((d - mean_dist) ** 2 for d in distances_to_current) / len(distances_to_current)) ** 0.5
        outlier_penalty = 0.0 if std_dev == 0 else (distance_to_current - mean_dist) / std_dev

        # Adaptive weights based on remaining nodes
        proximity_weight = 0.5 - 0.1 * (remaining_nodes / len(distance_matrix))
        destination_weight = 0.3 + 0.1 * (remaining_nodes / len(distance_matrix))
        hub_weight = 0.2

        total_score = (proximity_weight * distance_to_current +
                       destination_weight * distance_to_destination +
                       hub_weight * hub_score) * weight_adj + 0.1 * outlier_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
