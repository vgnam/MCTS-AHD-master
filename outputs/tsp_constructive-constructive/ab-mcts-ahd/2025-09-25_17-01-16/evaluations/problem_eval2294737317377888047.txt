def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Compute centroid of unvisited nodes
    centroid = []
    for i in range(len(distance_matrix)):
        avg_dist = sum(distance_matrix[i][node] for node in unvisited_nodes) / num_unvisited
        centroid.append(avg_dist)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / num_unvisited
        centroid_penalty = sum(abs(distance_matrix[node][i] - centroid[i]) for i in range(len(distance_matrix))) / len(distance_matrix)

        # Adaptive weights based on remaining nodes
        weight_current = 0.6 + 0.1 * (num_unvisited / len(distance_matrix))
        weight_destination = 0.3 + 0.1 * (num_unvisited / len(distance_matrix))
        weight_centrality = 0.1 - 0.05 * (num_unvisited / len(distance_matrix))

        total_score = (weight_current * distance_to_current +
                       weight_destination * distance_to_destination +
                       weight_centrality * centrality_score +
                       0.1 * centroid_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
