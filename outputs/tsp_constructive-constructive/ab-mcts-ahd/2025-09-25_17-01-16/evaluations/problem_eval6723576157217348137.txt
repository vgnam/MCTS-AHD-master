def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_bonus = 0.2 * (1 - remaining_nodes / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_score = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node)

        dynamic_weight = 0.5 + 0.3 * (1 - remaining_nodes / total_nodes)
        progress_weight = 0.3 + 0.2 * (remaining_nodes / total_nodes)
        centrality_weight = 0.2

        stagnation_penalty = 0.5 if node in unvisited_nodes and node != destination_node else 0.0

        total_score = (dynamic_weight * distance_to_current +
                      progress_weight * distance_to_destination +
                      centrality_weight * centrality_score +
                      exploration_bonus) + stagnation_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
