def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        if estimated_distance_to_destination == 0:
            ratio = float('inf')
        else:
            ratio = distance_to_current / estimated_distance_to_destination

        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        # Dynamic weight adjustment based on remaining nodes
        weight_proximity = 0.5 + (0.5 * (total_unvisited / (total_unvisited + 1)))
        weight_ratio = 0.5 + (0.5 * (1 / (total_unvisited + 1)))
        weight_penalty = 0.2 * (total_unvisited / (total_unvisited + 1))

        weighted_score = (weight_proximity * distance_to_current) + (weight_ratio * ratio) - (weight_penalty * avg_distance_to_unvisited)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
