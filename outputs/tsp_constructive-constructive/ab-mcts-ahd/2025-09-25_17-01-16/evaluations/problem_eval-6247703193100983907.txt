def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Calculate neighborhood density
    neighborhood = [node for node in unvisited_nodes if distance_matrix[current_node][node] < 1.2 * min(distance_matrix[current_node][other] for other in unvisited_nodes if other != current_node)]
    density = len(neighborhood) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Adaptive weighting based on density and remaining nodes
        locality_weight = 0.8 * (1 - density) if remaining_nodes > 3 else 0.95
        progress_weight = 0.2 * density if remaining_nodes > 3 else 0.05
        hub_weight = 0.1 * (1 - density) if remaining_nodes > 3 else 0.0

        # Dynamic penalty based on neighborhood characteristics
        penalty = 0.0
        if distance_to_current > 1.3 * sum(distance_matrix[current_node][other] for other in neighborhood) / len(neighborhood) if neighborhood else 0.3 * distance_to_current:
            penalty = 0.4 * distance_to_current * (1 - density)

        total_score = (locality_weight * distance_to_current +
                       progress_weight * distance_to_destination +
                       hub_weight * hub_score +
                       penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
