def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    # Dynamic alpha based on remaining nodes
    if remaining_nodes > len(distance_matrix) // 2:
        alpha = 0.3  # Favor long-term progress when many nodes remain
    else:
        alpha = 0.7  # Favor proximity when few nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Centrality score: average distance to all other unvisited nodes
        centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Combine distance and centrality
        total_score = alpha * distance_to_current + (1 - alpha) * estimated_distance_to_destination + 0.2 * centrality_score

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
