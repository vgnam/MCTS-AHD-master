import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate destination influence (exponential growth as tour progresses)
        progress = 1 - (total_unvisited / len(unvisited_nodes))
        destination_influence = math.exp(5 * progress)

        # Hybrid score combining local and global factors
        local_factor = distance_to_current
        global_factor = distance_to_destination / (1 + destination_influence)
        score = local_factor + global_factor

        # Apply adaptive smoothing based on remaining nodes
        smoothing = math.tanh(0.5 * total_unvisited)
        score = (1 - smoothing) * local_factor + smoothing * score

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
