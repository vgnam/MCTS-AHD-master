def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weight adjustment based on remaining unvisited nodes
        weight_current = 1.0 if num_unvisited > 1 else 0.7
        weight_destination = 0.5 if num_unvisited > 1 else 0.3
        weight_hub = 0.3 if num_unvisited > 1 else 0.2

        # Penalize nodes that are too far from the current node if few unvisited nodes remain
        if num_unvisited <= 2:
            distance_to_current *= 1.5

        total_score = (weight_current * distance_to_current +
                       weight_destination * distance_to_destination +
                       weight_hub * hub_score)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
