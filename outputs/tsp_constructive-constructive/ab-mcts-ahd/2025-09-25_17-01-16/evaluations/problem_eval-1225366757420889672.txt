def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        revisit_penalty = 1.5 if node in unvisited_nodes else 0.0

        # Dynamic weights based on remaining nodes
        weight_distance = 1.2 * (remaining_nodes / (remaining_nodes + 1))
        weight_destination = 0.8 * (remaining_nodes / (remaining_nodes + 1))
        weight_hub = 0.6 * (1 - remaining_nodes / (remaining_nodes + 1))
        weight_revisit = 1.5

        total_score = (weight_distance * distance_to_current +
                       weight_destination * distance_to_destination +
                       weight_hub * hub_score +
                       weight_revisit * revisit_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
