def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    if total_unvisited == 0:
        return destination_node

    # Calculate dynamic weights based on remaining nodes and centrality
    weight_local = 0.5 * (1 + (total_unvisited / (total_unvisited + 1)))
    weight_global = 1 - weight_local

    # Calculate average distance from current node to all unvisited nodes (centrality measure)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Penalize nodes that are too close to current node to avoid backtracking
        penalty = max(0, (avg_distance - distance_to_current) / avg_distance) if avg_distance > 0 else 0

        # Calculate weighted score with penalty
        score = (weight_local * distance_to_current + weight_global * estimated_distance_to_destination) * (1 + penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
