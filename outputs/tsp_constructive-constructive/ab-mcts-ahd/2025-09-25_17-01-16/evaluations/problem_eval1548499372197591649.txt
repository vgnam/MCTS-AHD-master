import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    temperature = remaining_ratio * 0.5 + 0.1

    if not unvisited_nodes:
        return None

    if len(unvisited_nodes) == 1:
        return unvisited_nodes[0]

    centroid = [sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
               for node in unvisited_nodes]
    centroid_node = unvisited_nodes[centroid.index(min(centroid))]

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centroid_bias = 1 / (1 + distance_matrix[node][centroid_node])

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            hub_score = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
            centrality = sum(1 for other in remaining_nodes if distance_matrix[node][other] < hub_score) / len(remaining_nodes)
            risk_score = centrality * hub_score
        else:
            risk_score = 0

        distance_weight = 0.7 * remaining_ratio + 0.3
        risk_weight = 0.3 * remaining_ratio + 0.1
        total_score = (distance_to_current + 0.6 * distance_to_destination) * distance_weight + risk_score * risk_weight + 0.5 * centroid_bias
        scores.append((node, total_score))

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score / temperature) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
