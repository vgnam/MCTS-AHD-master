def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Adaptive weights based on node density
        locality_weight = 0.8 - 0.2 * (remaining_nodes / len(distance_matrix))
        progress_weight = 0.3 + 0.2 * (remaining_nodes / len(distance_matrix))
        hub_weight = 0.1 * (remaining_nodes / len(distance_matrix))

        # Dynamic penalty threshold
        penalty = 0.0
        avg_distance = sum(distance_matrix[current_node][other] for other in unvisited_nodes) / remaining_nodes
        if distance_to_current > 1.2 * avg_distance + 0.3 * avg_distance * (1 - remaining_nodes / len(distance_matrix)):
            penalty = 0.4 * distance_to_current * (1 + (1 - remaining_nodes / len(distance_matrix)))

        total_score = (locality_weight * distance_to_current +
                       progress_weight * distance_to_destination +
                       hub_weight * hub_score +
                       penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
