def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_ratio = len(unvisited_nodes) / (len(distance_matrix))
    weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))  # Sigmoid-based dynamic weight

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        penalty = max(0, destination_distance - 2 * sum(distance_matrix[node]) / len(distance_matrix[node]))  # Penalty for distant nodes
        score = current_distance + weight * destination_distance + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
