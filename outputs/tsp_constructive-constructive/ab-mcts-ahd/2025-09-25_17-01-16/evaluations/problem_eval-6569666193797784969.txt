def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 / (1.0 + remaining_nodes) ** 2  # Stronger decay for exploration
    exploitation_weight = 1.0 - exploration_weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)  # Penalize non-central nodes

        # Dynamic weight adjustment based on remaining path length
        if remaining_nodes > 1:
            score = (exploitation_weight * distance_to_current +
                     exploration_weight * (distance_to_destination + centrality_penalty))
        else:
            score = distance_to_destination  # Directly head to destination when only one node remains

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
