importance score that combines distance, centrality, and a novel "exploration score" based on the node's average distance to unvisited nodes, while using a temperature-adjusted Boltzmann selection to balance exploitation and exploration, with higher temperatures favoring more diverse paths.}

import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    temperature = len(unvisited_nodes) / (len(distance_matrix) + 1)
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance_to_remaining = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
            exploration_score = avg_distance_to_remaining * (1 - (len(remaining_nodes) / len(unvisited_nodes)))
            centrality = sum(1 for other in remaining_nodes if distance_matrix[node][other] < avg_distance_to_remaining) / len(remaining_nodes)
            importance_score = (0.6 * distance_to_current) + (0.3 * distance_to_destination) + (0.1 * exploration_score) + (0.1 * centrality)
        else:
            importance_score = distance_to_current + distance_to_destination

        scores.append((node, importance_score))

    if not scores:
        return None

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score / temperature) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
