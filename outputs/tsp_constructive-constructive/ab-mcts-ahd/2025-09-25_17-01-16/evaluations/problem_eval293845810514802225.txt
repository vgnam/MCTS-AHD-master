def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    # Calculate average distance to current node for dynamic threshold
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting with threshold-based adjustment
        if remaining_nodes > 1:
            weight = 0.7 if distance_to_current < avg_distance * 0.8 else 0.3
            total_score = (distance_to_current * weight) + (estimated_distance_to_destination * (1 - weight))
        else:
            total_score = distance_to_current

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
