def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.5
    decay_rate = 0.1
    distance_penalty_threshold = 1.5

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        path_distance = distance_matrix[current_node][destination_node]

        if current_distance > distance_penalty_threshold * path_distance:
            score = -float('inf')
        else:
            weight_factor = base_weight * (1.0 / (1.0 + decay_rate * remaining_nodes))
            global_factor = (1 - weight_factor) * (1.0 / (1.0 + destination_distance))
            local_factor = weight_factor * (1.0 / (1.0 + current_distance))
            score = global_factor + local_factor

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
