def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        if remaining_nodes <= 2:
            weight = 0.9  # Prioritize proximity when few nodes left
        else:
            weight = 0.5  # Balance proximity and destination distance

        # Penalty for revisiting nodes (avoid cycles)
        if node in unvisited_nodes:
            penalty = 0
        else:
            penalty = 1000  # Large penalty to discourage revisiting

        score = (1 - weight) * current_distance + weight * destination_distance + penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
