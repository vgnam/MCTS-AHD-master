import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node_to_dest = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight based on progress (0 to 1) and centrality (normalized)
        progress = 1 - (distance_matrix[current_node][destination_node] / (sum(distance_matrix[destination_node][n] for n in unvisited_nodes) + 1e-6))
        weight_progress = 1 / (1 + math.exp(-5 * (progress - 0.5)))
        weight_centrality = 1 - weight_progress

        # Combine scores with adaptive weights
        combined_score = (distance_to_node + weight_progress * distance_from_node_to_dest +
                         weight_centrality * centrality)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
