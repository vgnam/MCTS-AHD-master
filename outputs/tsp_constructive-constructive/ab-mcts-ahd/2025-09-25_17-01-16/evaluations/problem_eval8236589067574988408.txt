def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (inverse of average distance to all other nodes)
        centrality = 1 / (sum(distance_matrix[node]) / total_nodes)

        # Dynamic weighting factor combining centrality and path progress
        progress_factor = (total_nodes - num_unvisited) / total_nodes
        weighting_factor = 1 + (centrality * 0.5) * (1 - progress_factor)

        # Harmonic mean of weighted distances
        weighted_distance = (distance_to_current * 2 * weighting_factor) + (estimated_distance_to_destination * 0.5)
        score = (2 * distance_to_current * estimated_distance_to_destination) / (weighted_distance + 1e-6)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
