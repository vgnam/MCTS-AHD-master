def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Dynamic weight adjustment
    proximity_weight = 0.9 - 0.3 * (1 - num_unvisited / len(distance_matrix))
    hub_weight = 0.1 + 0.3 * (1 - num_unvisited / len(distance_matrix))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Penalty for nodes too close to destination
        penalty = 0.2 if distance_matrix[node][destination_node] < 0.1 * max(max(row) for row in distance_matrix) else 0
        total_score = proximity_weight * distance_to_current + hub_weight * hub_score + penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
