def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting using sigmoid function
        weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Adjusts based on remaining nodes
        score = -current_distance + weight * destination_distance

        # Additional heuristic: penalize nodes that create long detours
        if remaining_nodes > 3:
            detour_penalty = max(0, current_distance - 1.5 * distance_matrix[current_node][destination_node])
            score -= 0.2 * detour_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
