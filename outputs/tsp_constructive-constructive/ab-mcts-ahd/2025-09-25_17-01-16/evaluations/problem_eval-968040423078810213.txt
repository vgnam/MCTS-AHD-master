def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    weight = 0.5 + 0.5 * (1 - remaining_ratio ** 2)  # Non-linear weight adjustment

    # Calculate average distance to unvisited nodes for normalization
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        normalized_current = current_distance / avg_distance if avg_distance != 0 else current_distance
        score = normalized_current + weight * (destination_distance / max(distance_matrix[node]))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
