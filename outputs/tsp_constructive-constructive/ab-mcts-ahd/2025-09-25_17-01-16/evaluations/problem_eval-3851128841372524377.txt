importance score derived from average distances to all other nodes to prioritize central or strategic locations.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    max_remaining = max(1, remaining_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic lookahead weight based on proximity to unvisited nodes
        proximity_weight = 0.2 + 0.8 * (1 - sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes * max_remaining))

        # Node importance score (lower average distance to other nodes is more important)
        node_importance = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)

        # Penalty for revisiting current node and for high importance nodes
        penalty = 1.0 + 0.2 * (1 if node == current_node else 0) + 0.1 * node_importance

        total_score = immediate_distance + proximity_weight * future_distance + penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
