defined as a combination of distance to the current node and a weighted distance to the destination, scaled by a factor that increases the influence of the destination as the number of remaining nodes grows, ensuring a smooth transition from local to global focus.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_utility = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    scaling_factor = 1.0 + 0.2 * remaining_nodes

    utilities = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        utility = (1.0 / (1.0 + distance_to_current)) * (distance_to_destination ** scaling_factor)
        utilities.append((node, utility))

    if not utilities:
        return None

    max_utility = max(utility for _, utility in utilities)
    min_utility = min(utility for _, utility in utilities)
    utility_range = max_utility - min_utility if max_utility != min_utility else 1.0

    probabilities = []
    for node, utility in utilities:
        normalized_utility = (utility - min_utility) / utility_range
        probabilities.append((node, normalized_utility))

    total_probability = sum(prob for _, prob in probabilities)
    if total_probability == 0:
        return unvisited_nodes[0]

    rand_val = random.random() * total_probability
    cumulative_prob = 0.0
    for node, prob in probabilities:
        cumulative_prob += prob
        if rand_val <= cumulative_prob:
            next_node = node
            break

    return next_node
