def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_path_length = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weights based on remaining path length
        current_weight = 0.6 + 0.1 * (remaining_nodes / len(unvisited_nodes))
        destination_weight = 0.3 - 0.1 * (remaining_nodes / len(unvisited_nodes))
        hub_weight = 0.1

        # Penalize outlier nodes
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        mean_distance = sum(distances_to_unvisited) / len(distances_to_unvisited) if distances_to_unvisited else 0
        std_dev = (sum((d - mean_distance) ** 2 for d in distances_to_unvisited) / len(distances_to_unvisited)) ** 0.5 if distances_to_unvisited else 0
        outlier_penalty = 0.2 * (distance_to_current - mean_distance) / (std_dev + 1e-6) if std_dev > 0 else 0

        total_score = (current_weight * distance_to_current +
                       destination_weight * distance_to_destination +
                       hub_weight * hub_score +
                       outlier_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
