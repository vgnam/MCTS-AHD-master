def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 1.0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes ratio
        weight = 0.6 if remaining_ratio > 0.5 else 0.3
        score = -current_distance + weight * destination_distance

        # Penalty for revisiting nodes
        if node in unvisited_nodes and len(unvisited_nodes) > 2:
            score -= 0.15 * current_distance

        # Bonus for nodes that bridge clusters (simplified as nodes with high destination distance)
        if destination_distance > 2 * sum(distance_matrix[node]) / len(distance_matrix[node]):
            score += 0.2 * destination_distance

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
