importance of each factor through a novel weighting mechanism that accounts for the number of unvisited nodes and the current node's centrality in the remaining graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes == 0:
        return destination_node

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes > 0:
            weight = (remaining_nodes ** 2) / (remaining_nodes ** 2 + 1)
            priority_factor = 1 - (distance_to_current / sum(distance_matrix[current_node]))
        else:
            weight = 1.0
            priority_factor = 0.0

        total_distance = (1 - weight) * distance_to_current + weight * estimated_distance_to_destination + priority_factor * distance_to_current

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
