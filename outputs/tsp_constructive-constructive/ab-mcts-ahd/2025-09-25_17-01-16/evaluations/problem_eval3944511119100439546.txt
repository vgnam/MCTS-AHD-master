def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    neighborhood_density = len(unvisited_nodes) / len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        hub_score = 1.0 / (1.0 + avg_distance_to_unvisited) if avg_distance_to_unvisited > 0 else 0

        novelty_score = sum(1 for other in unvisited_nodes if distance_matrix[node][other] > distance_to_destination * 1.2) / len(unvisited_nodes)

        proximity_weight = 0.25 * (0.7 + 0.3 * neighborhood_density)
        destination_weight = 0.6 * (0.9 + 0.1 * (1 - neighborhood_density))
        hub_weight = 0.15 * (0.5 + 0.5 * neighborhood_density)

        path_history_penalty = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < distance_to_destination * 0.8) / len(unvisited_nodes)

        total_score = (proximity_weight * distance_to_current +
                       destination_weight * distance_to_destination +
                       hub_weight * hub_score +
                       0.1 * novelty_score -
                       0.25 * path_history_penalty)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
