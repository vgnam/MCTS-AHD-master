def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    remaining_fraction = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Avoid division by zero

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights: prioritize distance_to_current early, then balance with distance_to_destination
        weight_current = 1.0 - 0.5 * remaining_fraction
        weight_destination = 0.5 + 0.5 * remaining_fraction

        # Penalize nodes too far from destination in later stages
        if remaining_fraction < 0.3:
            distance_to_destination *= 1.5

        score = weight_current * distance_to_current + weight_destination * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
