def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        proximity_weight = 0.6 if total_unvisited > 1 else 0.4
        progress_weight = 0.3 if total_unvisited > 1 else 0.5
        hub_weight = 0.1 if total_unvisited > 1 else 0.1

        # Hub score with penalty for revisiting
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        hub_score *= (1 + (0.1 * (1 / (total_unvisited + 1))))  # Penalty for revisiting

        # Total score with dynamic weights
        total_score = (proximity_weight * distance_to_current) + \
                     (progress_weight * distance_to_destination) + \
                     (hub_weight * hub_score)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
