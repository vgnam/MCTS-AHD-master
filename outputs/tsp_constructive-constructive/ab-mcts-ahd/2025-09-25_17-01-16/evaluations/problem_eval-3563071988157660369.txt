def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    if not unvisited_nodes:
        return destination_node

    # Calculate node centrality (hub potential)
    centrality_scores = {}
    for node in unvisited_nodes:
        centrality = sum(1.0 / (1.0 + distance_matrix[node][other]) for other in unvisited_nodes if other != node)
        centrality_scores[node] = centrality

    # Calculate average distance to current node
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic attractor mechanism
        attractor_score = (centrality_scores[node] * 0.5 +
                          (1.0 / (1.0 + distance_to_current)) * 0.3 +
                          (1.0 / (1.0 + distance_to_destination)) * 0.2)

        # Penalize nodes too far from average distance
        distance_penalty = max(0, (distance_to_current - avg_distance) * 0.4)

        total_score = attractor_score + distance_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
