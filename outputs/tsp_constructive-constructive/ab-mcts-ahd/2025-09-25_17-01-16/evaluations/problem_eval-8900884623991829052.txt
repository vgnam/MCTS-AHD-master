def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        distance_to_destination = distance_matrix[node][destination_node]

        weight_avg = 0.5  # Fixed weight for centrality
        weight_current = 0.3 * (remaining_nodes ** 0.5) if remaining_nodes > 0 else 0.0  # Scaled weight for proximity
        weight_dest = 0.2 * (remaining_nodes ** 0.5) if remaining_nodes > 0 else 0.0  # Scaled weight for destination

        total_score = (distance_to_current * weight_current) + (avg_distance_to_unvisited * weight_avg) + (distance_to_destination * weight_dest)
        normalized_score = total_score / (weight_current + weight_avg + weight_dest) if (weight_current + weight_avg + weight_dest) > 0 else total_score

        if normalized_score < min_total_score:
            min_total_score = normalized_score
            next_node = node

    return next_node
