import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    temperature = remaining_nodes / (len(distance_matrix) + 1)
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_except_current = [n for n in unvisited_nodes if n != node]
            hub_score = sum(distance_matrix[node][other] for other in remaining_nodes_except_current) / len(remaining_nodes_except_current)
            centrality = sum(1 for other in remaining_nodes_except_current if distance_matrix[node][other] < hub_score) / len(remaining_nodes_except_current)
            risk_score = centrality * hub_score
        else:
            risk_score = 0

        weight_distance = 1.0
        weight_destination = 0.5 + 0.1 * (1 - temperature)
        weight_risk = 0.3 * temperature

        total_score = weight_distance * distance_to_current + weight_destination * distance_to_destination + weight_risk * risk_score
        scores.append((node, total_score))

    if not scores:
        return None

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score / temperature) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
