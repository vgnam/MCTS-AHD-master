def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    max_remaining = max(1, remaining_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and current node's centrality
        centrality = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
        dynamic_weight = 0.2 + 0.8 * (1 - remaining_nodes / max_remaining) * (centrality / max(distance_matrix[current_node]))

        # Lookahead mechanism: estimate future path potential
        lookahead_potential = 0
        if remaining_nodes > 2:
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    lookahead_potential += distance_matrix[node][neighbor]

        # Penalty for revisiting current node and for high lookahead potential
        penalty = 1.0 + 0.3 * (1 if node == current_node else 0) + 0.1 * (lookahead_potential / max_remaining)

        total_score = immediate_distance + dynamic_weight * future_distance - 0.5 * lookahead_potential + penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
