def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality as the number of non-zero connections (excluding self)
        centrality = sum(1 for dist in distance_matrix[node] if dist > 0) - 1
        if centrality == 0:
            centrality = 1  # Avoid division by zero

        # Weighted score: prioritize nodes closer to current and destination, adjusted by centrality
        score = distance_to_current + estimated_distance_to_destination / centrality

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
