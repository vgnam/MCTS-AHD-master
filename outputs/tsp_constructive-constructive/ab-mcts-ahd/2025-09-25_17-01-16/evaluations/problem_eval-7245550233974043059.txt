import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node_to_dest = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to all other nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight based on distance to destination (sigmoid)
        weight = 1 / (1 + math.exp(-0.1 * (distance_from_node_to_dest - distance_to_node)))

        # Combined score using weighted harmonic mean of distance and centrality
        if distance_to_node == 0:
            combined_score = -centrality  # Avoid division by zero
        else:
            combined_score = (1 + weight) / (1/distance_to_node + weight/centrality)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
