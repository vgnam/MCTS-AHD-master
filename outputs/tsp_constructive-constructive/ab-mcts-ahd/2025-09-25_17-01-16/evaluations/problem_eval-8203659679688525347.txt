def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_distance = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
        total_distance = (weight * distance_to_current) + ((1 - weight) * estimated_distance_to_destination)

        # Penalize nodes that are too far or too close
        if distance_to_current > 2 * min(distance_matrix[current_node]) or estimated_distance_to_destination < 0.5 * min(distance_matrix[node]):
            total_distance += 1000  # Large penalty

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
