def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    max_score = -float('inf')
    dynamic_weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Adjusts weight based on remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = float('-inf')
        else:
            # Dynamic scoring with proximity and destination influence
            score = (dynamic_weight * distance_to_current) - (1 - dynamic_weight) * distance_to_destination

            # Penalize nodes that are too close to the destination
            if distance_to_destination < min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node):
                score -= 0.3 * distance_to_destination

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
