import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    temperature = len(unvisited_nodes) / (len(distance_matrix) + 1)
    momentum = 0.3 if len(unvisited_nodes) > len(distance_matrix) // 2 else 0.7
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            distances_to_remaining = [distance_matrix[node][other] for other in remaining_nodes]
            flow_score = (sum(distances_to_remaining) / len(remaining_nodes)) * (1 + (max(distances_to_remaining) - min(distances_to_remaining)) / (sum(distances_to_remaining) + 1e-6))

            diversity_bonus = sum(1 for other in remaining_nodes if distance_matrix[node][other] < distance_to_current) / len(remaining_nodes)
        else:
            flow_score = 0
            diversity_bonus = 0

        total_score = (distance_to_current * 0.6) + (distance_to_destination * 0.3) + (flow_score * 0.2) - (diversity_bonus * 0.1)
        scores.append((node, total_score))

    if not scores:
        return None

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score * momentum / temperature) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
