importance of proximity to the current node, destination, and hub centrality based on the current state of the tour (e.g., remaining unvisited nodes), while incorporating a penalty for revisiting nodes that are already part of the path to avoid cycles.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Adaptive weights based on remaining unvisited nodes
        current_weight = 0.6 + 0.1 * (1 - total_unvisited / len(distance_matrix))
        destination_weight = 0.3 - 0.1 * (1 - total_unvisited / len(distance_matrix))
        hub_weight = 0.1

        # Penalty for nodes already in the path (to avoid cycles)
        if node in unvisited_nodes and node != current_node:
            total_score = (current_weight * distance_to_current +
                          destination_weight * distance_to_destination +
                          hub_weight * hub_score)
        else:
            total_score = float('inf')

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
