def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weight based on remaining nodes and node's potential connectivity
        weight = (remaining_nodes ** 1.5) / (remaining_nodes + 1)

        # Novel scoring function with adaptive penalty
        penalty = (avg_distance_to_unvisited ** 2) / (remaining_nodes + 1)
        total_score = (1 - weight) * distance_to_current + weight * penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
