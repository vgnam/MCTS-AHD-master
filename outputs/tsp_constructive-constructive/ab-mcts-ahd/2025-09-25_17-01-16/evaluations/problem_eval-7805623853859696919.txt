def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    max_score = -float('inf')
    progress_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Decreases as unvisited nodes decrease

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            score = float('-inf')
        else:
            # Dynamic weighting: prioritize proximity early, then progress
            weight_proximity = 0.9 * progress_factor
            weight_progress = 1.0 - progress_factor
            score = (weight_proximity * distance_to_current) - (weight_progress * distance_to_destination)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
