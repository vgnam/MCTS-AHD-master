def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    # Calculate centroid of unvisited nodes
    centroid_node = None
    if unvisited_nodes:
        centroid_distances = {}
        for node in unvisited_nodes:
            centroid_distances[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes)
        centroid_node = min(centroid_distances, key=centroid_distances.get)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Exploration factor: distance to centroid of unvisited nodes
        exploration_factor = distance_matrix[node][centroid_node] if centroid_node else 0

        # Dynamic weights based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight_current = 0.5 + 0.1 * (remaining_nodes / (remaining_nodes + 1))  # Increase weight as nodes remain
        weight_destination = 0.3 + 0.1 * (1 / (remaining_nodes + 1))  # Decrease weight as nodes remain
        weight_exploration = 0.2

        total_score = weight_current * distance_to_current + weight_destination * distance_to_destination + weight_exploration * exploration_factor

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
