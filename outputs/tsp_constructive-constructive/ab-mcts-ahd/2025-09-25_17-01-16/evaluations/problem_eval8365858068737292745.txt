def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Dynamic weighting factors
        progress_factor = remaining_nodes / total_nodes
        centrality_weight = 0.5 * (1 - progress_factor)  # Higher weight early, lower later

        # Combined score with novel components
        total_score = (distance_to_current +
                      (progress_factor * estimated_distance_to_destination) +
                      (centrality_weight * centrality))

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
