def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    base_weight = 0.5 * (1 - remaining_ratio)
    exponential_weight = base_weight ** 2  # Exponential growth of destination influence
    lookahead_factor = 0.1 * (1 - remaining_ratio)  # Additional lookahead consideration

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Evaluate potential future steps (lookahead)
        future_distance = 0
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            future_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            future_distance = distance_matrix[node][future_node]

        score = current_distance + exponential_weight * destination_distance + lookahead_factor * future_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
