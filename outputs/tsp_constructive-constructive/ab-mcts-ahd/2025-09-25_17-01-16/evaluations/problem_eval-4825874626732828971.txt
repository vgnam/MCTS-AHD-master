import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if total_unvisited > 0:
            remaining_ratio = total_unvisited / total_nodes
            current_weight = 0.7 * (1 / (1 + math.exp(-10 * (remaining_ratio - 0.5))))
            destination_weight = 0.3 * (1 - current_weight)
            penalty = 0.1 * (distance_to_current + distance_to_destination) if (distance_to_current > 2 * distance_to_destination or distance_to_destination > 2 * distance_to_current) else 0
        else:
            current_weight = 0.7
            destination_weight = 0.3
            penalty = 0

        weighted_score = current_weight * distance_to_current + destination_weight * distance_to_destination + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
