importance of proximity to the current node versus progress toward the destination based on the current path length, using an adaptive score calculation that prioritizes balance between immediate and long-term efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        weight = 0.5 + (0.5 * (total_unvisited / (total_unvisited + 1)))
        score = (weight * distance_to_current) + ((1 - weight) * distance_to_destination)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
