def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 1 / (1 + math.exp(-(total_unvisited - 5)))  # Sigmoid function centered at 5
        score = -current_distance + weight * destination_distance

        # Novelty factor: penalize nodes that are frequently visited
        if node in visited_counts:
            score -= 0.2 * visited_counts[node]

        if score > best_score:
            best_score = score
            next_node = node

    # Update visited counts for novelty tracking
    if next_node in visited_counts:
        visited_counts[next_node] += 1
    else:
        visited_counts[next_node] = 1

    return next_node
