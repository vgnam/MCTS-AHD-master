def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    num_unvisited = len(unvisited_nodes)

    # Phase-based weight adjustments
    phase = min(1.0, (num_unvisited / len(distance_matrix)) ** 1.5)
    weight_current = 1.0 + 0.3 * phase
    weight_dest = 1.0 - 0.2 * phase
    weight_hub = 0.2 + 0.4 * (1 - phase) ** 2

    # Dynamic progress factor with non-linear scaling
    progress_factor = (num_unvisited / (num_unvisited + 1)) ** 1.5
    dest_factor = 1 + 0.5 * (1 - phase)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Hub centrality with path diversity consideration
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        hub_score *= (1 + 0.1 * len([n for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][n]]))

        # Phase-dependent score components
        local_score = weight_current * distance_to_current
        global_score = dest_factor * weight_dest * distance_to_destination
        hub_component = weight_hub * hub_score

        # Combined score with adaptive normalization
        normalization = 1 + 0.1 * (num_unvisited / len(distance_matrix))
        total_score = (local_score + global_score + hub_component) / normalization

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
