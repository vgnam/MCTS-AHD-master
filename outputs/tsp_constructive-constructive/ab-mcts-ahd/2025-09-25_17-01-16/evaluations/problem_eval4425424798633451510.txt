def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    weight = 0.5 * (1 + (total_unvisited / (total_unvisited + 1)))  # Base weight
    temperature = max(0.1, 1.0 - (1.0 - 0.1) * (total_unvisited / len(distance_matrix)))  # Decreasing temperature

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        local_score = weight * distance_to_current
        global_score = (1 - weight) * estimated_distance_to_destination
        combined_score = local_score + global_score
        probabilistic_bias = np.exp(-combined_score / temperature)  # Boltzmann-like selection
        weighted_score = combined_score / probabilistic_bias

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
