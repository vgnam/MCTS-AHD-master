def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_weighted_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]

        if estimated_distance_to_destination == 0:
            harmonic_mean = float('inf')
        else:
            harmonic_mean = 2 * distance_to_current * estimated_distance_to_destination / (distance_to_current + estimated_distance_to_destination)

        avg_distance_to_unvisited = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        cluster_penalty = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < avg_distance_to_unvisited * 0.7)

        weighted_score = harmonic_mean + (distance_to_current * 0.5) + (avg_distance_to_unvisited * 0.3) - (cluster_penalty * 0.2)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
