def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')

    # Compute heuristic factor: average of the smallest distances in the matrix
    smallest_distances = [min(row) for row in distance_matrix if any(row)]
    heuristic_factor = sum(smallest_distances) / len(smallest_distances) if smallest_distances else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted score: prioritize distance_to_current with heuristic influence
        total_score = 0.6 * distance_to_current + 0.3 * distance_to_destination + 0.1 * heuristic_factor

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
