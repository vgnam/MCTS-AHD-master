def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_score = float('inf')
    current_tour_length = sum(distance_matrix[current_node][destination_node] for _ in range(1))  # Placeholder for actual tour length

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_savings = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        dynamic_penalty = 0.5 * future_savings / (1 + current_tour_length)  # Inverse scaling with tour length
        score = immediate_distance + dynamic_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
