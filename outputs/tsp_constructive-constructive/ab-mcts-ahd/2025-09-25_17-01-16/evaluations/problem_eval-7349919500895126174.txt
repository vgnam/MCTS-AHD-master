import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1 / (1 + math.exp(-0.1 * (remaining_nodes - 5)))
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        nearby_nodes = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.2 * min(distance_matrix[node][other] for other in unvisited_nodes if other != node)]
        novelty_score = 1 / (len(nearby_nodes) + 1)
        total_score = (1.8 - 0.3 * dynamic_weight) * distance_to_current + (0.5 + 0.3 * dynamic_weight) * distance_to_destination + 0.4 * novelty_score
        scores.append((node, total_score))

    if not scores:
        return None

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [math.exp(-score) for _, score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
