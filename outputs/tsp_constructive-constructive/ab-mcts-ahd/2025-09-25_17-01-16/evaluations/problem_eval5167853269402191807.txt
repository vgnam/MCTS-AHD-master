def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    min_total_score = float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hub_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Dynamic weight adjustment
        weight_distance = 1.2 + (0.1 * remaining_nodes / len(distance_matrix))
        weight_hub = 0.6 + (0.1 * remaining_nodes / len(distance_matrix))
        weight_revisit = 1.5 + (0.5 * (1 - remaining_nodes / len(distance_matrix)))

        # Destination influence factor
        destination_influence = 0.8 * (remaining_nodes / len(distance_matrix))

        total_score = (weight_distance * distance_to_current +
                       destination_influence * distance_to_destination -
                       weight_hub * hub_score +
                       weight_revisit)

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    return next_node
