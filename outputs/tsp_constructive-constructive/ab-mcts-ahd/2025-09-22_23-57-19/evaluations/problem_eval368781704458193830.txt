import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1))))  # Dynamic temperature adjustment
    candidates = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + temperature * heuristic
        candidates.append((node, score))

    if not candidates:
        return unvisited_nodes.pop()

    # Probabilistic selection based on scores
    scores = [score for (node, score) in candidates]
    min_score = min(scores)
    max_score = max(scores)

    if max_score == min_score:
        return random.choice([node for (node, score) in candidates])

    probabilities = [(max_score - score) / (max_score - min_score) for (node, score) in candidates]
    probabilities = [p / sum(probabilities) for p in probabilities]  # Normalize

    next_node = random.choices([node for (node, score) in candidates], weights=probabilities, k=1)[0]

    if len(unvisited_nodes) > 2 and random.random() < temperature:
        # Allow exploration with a small probability
        alternative_nodes = [node for node in unvisited_nodes if node != next_node]
        if alternative_nodes:
            next_node = random.choice(alternative_nodes)

    return next_node
