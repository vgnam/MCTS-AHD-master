def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        future_cost = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        weighted_score = 0.6 * immediate_cost + 0.4 * future_cost
        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1])
    return next_node
