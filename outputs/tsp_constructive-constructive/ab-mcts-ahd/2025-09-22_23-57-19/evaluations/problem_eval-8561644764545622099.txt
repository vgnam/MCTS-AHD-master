def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    costs = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        costs.append((node, cost))

    costs.sort(key=lambda x: -x[1])
    max_cost = costs[0][1]

    if len(unvisited_nodes) > 2:
        weights = []
        for node, cost in costs:
            if node == destination_node:
                weight = max_cost * 2
            else:
                threshold = max_cost * (0.5 + 0.5 * (len(unvisited_nodes) / len(distance_matrix)))
                weight = (cost / threshold) ** 2 if cost <= threshold else 0.1
            weights.append(weight)

        total_weight = sum(weights)
        if total_weight > 0:
            normalized_weights = [w / total_weight for w in weights]
            next_node = random.choices([node for node, _ in costs], weights=normalized_weights, k=1)[0]
        else:
            next_node = costs[0][0]
    else:
        next_node = costs[0][0]
        for node, cost in costs[1:]:
            if distance_matrix[current_node][node] + distance_matrix[node][next_node] < distance_matrix[current_node][next_node]:
                next_node = node

    return next_node
