def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.3 + 0.7 * (1.0 - (remaining_nodes / len(distance_matrix)))

    dynamic_threshold = min_distance + (max_distance - min_distance) * exploration_factor

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        estimated_return_cost = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else 0
        total_cost = cost + estimated_return_cost * 0.5
        if cost <= dynamic_threshold:
            candidates.append((node, cost, total_cost))

    if candidates:
        candidates.sort(key=lambda x: x[2])
        best_node = candidates[0][0]
        if len(unvisited_nodes) > 2:
            threshold = min_distance * (1.0 + 0.2 * (remaining_nodes / len(distance_matrix)))
            for node, cost, total_cost in candidates[1:]:
                if total_cost <= threshold * 1.1:
                    best_node = node
                    break
        return best_node

    return next_node
