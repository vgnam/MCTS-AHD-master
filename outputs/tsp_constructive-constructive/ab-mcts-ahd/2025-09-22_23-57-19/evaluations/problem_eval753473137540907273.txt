def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    exploration_factor = 1.0 / len(unvisited_nodes) if len(unvisited_nodes) > 0 else 0.0

    min_cost = float('inf')
    next_node = None
    candidate_nodes = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        candidate_nodes.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    candidate_nodes = [(node, cost) for node, cost in candidate_nodes if cost <= min_cost * (1.5 + exploration_factor)]

    if not candidate_nodes:
        candidate_nodes = [(node, cost) for node, cost in candidate_nodes if cost <= avg_distance * 1.5]

    if not candidate_nodes:
        candidate_nodes = [(node, cost) for node, cost in candidate_nodes if cost <= min_cost * 2.0]

    if not candidate_nodes:
        candidate_nodes = [(node, cost) for node, cost in candidate_nodes if cost <= avg_distance * 2.0]

    if not candidate_nodes:
        return next_node

    candidate_nodes.sort(key=lambda x: x[1])
    selected_node, _ = candidate_nodes[0]

    if selected_node != destination_node and distance_matrix[current_node][selected_node] > avg_distance * 1.5:
        for node, cost in candidate_nodes[1:]:
            if cost < min_cost:
                selected_node = node
                break

    return next_node
