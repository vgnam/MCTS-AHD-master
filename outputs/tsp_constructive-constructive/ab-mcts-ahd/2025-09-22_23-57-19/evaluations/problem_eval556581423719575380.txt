def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        candidates = []
        weights = []

        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            if cost <= min_cost * 1.5 or cost <= avg_distance * 1.3:
                candidates.append(node)
                if node == destination_node:
                    weights.append(1.0 / (cost + 1e-6))
                else:
                    weights.append(1.0 / (cost + 1e-6) * 0.8)

        if candidates:
            total_weight = sum(weights)
            probabilities = [w / total_weight for w in weights]
            next_node = random.choices(candidates, weights=probabilities, k=1)[0]

    return next_node
