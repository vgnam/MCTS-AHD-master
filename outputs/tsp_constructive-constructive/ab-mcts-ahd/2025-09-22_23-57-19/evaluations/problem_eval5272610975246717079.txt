def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None
    best_score = float('-inf')

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic_value = distance_matrix[node][destination_node] if destination_node != node else 0
        weighted_score = -distance + dynamic_weight * heuristic_value

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            if distance_matrix[current_node][node] < min_cost * 1.5 or distance_matrix[current_node][node] < avg_distance * 1.5:
                next_node = node
                break

    if next_node != destination_node and distance_matrix[current_node][next_node] > avg_distance * 1.5:
        for node in unvisited_nodes:
            if node != next_node and distance_matrix[current_node][node] < min_cost:
                next_node = node
                break

    return next_node
