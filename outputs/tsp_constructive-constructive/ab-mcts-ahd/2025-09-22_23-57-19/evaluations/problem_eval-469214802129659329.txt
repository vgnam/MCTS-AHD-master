def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    exploration_threshold = 1.5 - (0.5 * (len(unvisited_nodes) / len(distance_matrix)))

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * exploration_threshold:
            candidates.append((node, cost))

    if not candidates:
        candidates = [(node, distance_matrix[current_node][node]) for node in unvisited_nodes]

    candidates.sort(key=lambda x: x[1])
    if len(candidates) > 1 and random.random() < 0.3:
        return random.choice(candidates[:2])[0]
    else:
        return next_node
