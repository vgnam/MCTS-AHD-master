def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    unvisited_list = list(unvisited_nodes)
    weights = []
    max_cost = -float('inf')

    for node in unvisited_list:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost

    for node in unvisited_list:
        cost = distance_matrix[current_node][node]
        future_cost = 0
        if len(unvisited_nodes) > 2:
            future_cost = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        weight = (cost / max_cost) * 0.7 + (future_cost / max_cost) * 0.3
        weights.append(weight)

    threshold = 0.3 + 0.4 * (len(unvisited_nodes) / len(distance_matrix))
    selected_nodes = [node for node, w in zip(unvisited_list, weights) if w >= threshold]
    if selected_nodes:
        return selected_nodes[0]

    return next_node
