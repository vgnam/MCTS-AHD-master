def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    if len(unvisited_nodes) == 2:
        return unvisited_nodes[0] if distance_matrix[current_node][unvisited_nodes[0]] < distance_matrix[current_node][unvisited_nodes[1]] else unvisited_nodes[1]

    max_distance = -float('inf')
    farthest_node = None
    for node in unvisited_nodes:
        if distance_matrix[current_node][node] > max_distance:
            max_distance = distance_matrix[current_node][node]
            farthest_node = node

    exploration_weight = 0.5 * (len(unvisited_nodes) / len(distance_matrix)) ** 2

    novelty_scores = {}
    for node in unvisited_nodes:
        novelty = (distance_matrix[current_node][node] / avg_distance) * (1 + exploration_weight)
        novelty_scores[node] = novelty

    next_node = farthest_node
    for node in unvisited_nodes:
        if node == farthest_node:
            continue
        if novelty_scores[node] > novelty_scores[next_node]:
            next_node = node

    return next_node
