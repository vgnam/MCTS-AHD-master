def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    threshold = 1.2 if len(unvisited_nodes) > 2 else 1.0
    for node in unvisited_nodes:
        if node == next_node:
            continue
        potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
        if potential_cost < min_cost * threshold:
            next_node = node
            break

    return next_node
