def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    temperature = max_distance / (len(unvisited_nodes) ** 1.5)
    weighted_distances = [math.exp(-d / temperature) for d in distances]

    total_weight = sum(weighted_distances)
    selection_probs = [w / total_weight for w in weighted_distances]

    candidates = list(unvisited_nodes)
    selected_node = random.choices(candidates, weights=selection_probs, k=1)[0]

    if len(unvisited_nodes) > 2:
        lookahead_nodes = [node for node in unvisited_nodes if node != selected_node]
        lookahead_costs = []
        for node in lookahead_nodes:
            cost = distance_matrix[current_node][node] + distance_matrix[node][selected_node]
            lookahead_costs.append(cost)

        if lookahead_costs:
            min_lookahead_cost = min(lookahead_costs)
            if min_lookahead_cost < distance_matrix[current_node][selected_node] * 1.1:
                best_lookahead_node = lookahead_nodes[lookahead_costs.index(min_lookahead_cost)]
                if distance_matrix[current_node][best_lookahead_node] < distance_matrix[current_node][selected_node]:
                    selected_node = best_lookahead_node

    return next_node
