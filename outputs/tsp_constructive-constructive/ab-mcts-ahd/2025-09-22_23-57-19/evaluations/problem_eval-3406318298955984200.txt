def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        current_cost = distance_matrix[current_node][node]
        future_cost = min(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        total_cost = 0.7 * current_cost + 0.3 * future_cost
        candidates.append((node, total_cost))

    candidates.sort(key=lambda x: x[1])
    best_node, best_cost = candidates[0]

    exploration_threshold = max(0.1, 0.3 - 0.01 * (len(unvisited_nodes) - 2))
    if random.random() < exploration_threshold and len(candidates) > 1:
        for node, cost in candidates[1:]:
            if cost <= best_cost * 1.2:
                best_node = node
                break

    return next_node
