defaults to the farthest unvisited node, ensuring diversity while maintaining efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

    max_cost = -float('inf')
    best_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            best_node = node

    if random.random() < 0.3:
        max_centrality = -float('inf')
        central_node = None
        for node in unvisited_nodes:
            if centrality[node] > max_centrality:
                max_centrality = centrality[node]
                central_node = node
        if central_node is not None and centrality[central_node] > 0.5 * max_cost:
            best_node = central_node

    return next_node
