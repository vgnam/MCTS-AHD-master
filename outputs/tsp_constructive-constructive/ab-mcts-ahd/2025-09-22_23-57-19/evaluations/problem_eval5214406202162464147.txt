def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_cost = min(distances)
    avg_distance = sum(distances) / len(distances)

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
    sigmoid_factor = 1 / (1 + math.exp(-10 * (phase_factor - 0.5)))

    node_scores = {}
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        dynamic_weight = sigmoid_factor * 0.7 + (1 - sigmoid_factor) * 0.3
        weighted_score = cost + dynamic_weight * (centrality / avg_distance)
        node_scores[node] = weighted_score

    sorted_nodes = sorted(node_scores.items(), key=lambda x: x[1])
    threshold = min_cost * (1 + 0.2 * (1 - phase_factor))
    candidate_nodes = [node for node, score in sorted_nodes if score <= threshold]

    if candidate_nodes:
        if len(candidate_nodes) > 1 and phase_factor > 0.6:
            probabilities = [1 / (score + 1e-6) for node, score in sorted_nodes if node in candidate_nodes]
            total_prob = sum(probabilities)
            probabilities = [p / total_prob for p in probabilities]
            next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]
        else:
            next_node = candidate_nodes[0]
    else:
        next_node = sorted_nodes[0][0]

    return next_node
