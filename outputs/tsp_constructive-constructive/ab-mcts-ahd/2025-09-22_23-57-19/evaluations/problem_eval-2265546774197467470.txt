def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    nearest_node = None
    min_cost = float('inf')
    avg_cost = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            nearest_node = node

    if nearest_node is None:
        return unvisited_nodes.pop()

    threshold = min_cost * (1.0 + 0.1 * (avg_cost / min_cost))
    candidates = [node for node in unvisited_nodes if node != nearest_node and distance_matrix[current_node][node] <= threshold]

    if candidates:
        novelty_scores = [(node, distance_matrix[current_node][node] + 0.3 * distance_matrix[node][nearest_node]) for node in candidates]
        novelty_scores.sort(key=lambda x: x[1])
        return novelty_scores[0][0]

    return next_node
