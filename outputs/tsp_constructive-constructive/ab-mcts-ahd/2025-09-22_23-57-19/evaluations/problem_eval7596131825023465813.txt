def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / remaining_nodes

    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + (1.0 / temperature) * heuristic
        scores.append(score)

    if not scores:
        return unvisited_nodes.pop()

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]

    probabilities = [np.exp(ns / temperature) for ns in normalized_scores]
    probabilities = [p / sum(probabilities) for p in probabilities]

    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    if remaining_nodes > 2:
        for candidate in unvisited_nodes:
            if candidate == next_node:
                continue
            lookahead_cost = distance_matrix[current_node][candidate] + distance_matrix[candidate][next_node]
            if lookahead_cost < min_score * 1.1:
                next_node = candidate
                break

    return next_node
