def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    threshold = 1.25 * (1 - 0.1 * (remaining_nodes / (remaining_nodes + 1)))

    max_cost = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < max_cost * threshold:
                next_node = node
                break

    if destination_node in unvisited_nodes:
        direct_cost = distance_matrix[current_node][destination_node]
        alternative_cost = distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]
        if alternative_cost > direct_cost * 1.25:
            next_node = destination_node

    return next_node
