def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    if phase_factor < 0.5:
        min_centrality = float('inf')
        next_node = None
        for node in unvisited_nodes:
            centrality = sum(distance_matrix[node]) / (total_nodes - 1)
            if centrality < min_centrality:
                min_centrality = centrality
                next_node = node
    else:
        max_cost = -float('inf')
        next_node = None
        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            if cost > max_cost:
                max_cost = cost
                next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        min_cost = min(distances)
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            centrality = sum(distance_matrix[node]) / (total_nodes - 1)
            weighted_score = cost + (1 - phase_factor) * (centrality / avg_distance)

            if cost < avg_distance * 1.2 and weighted_score < min_cost * 1.1:
                next_node = node
                break

    return next_node
