def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5

    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        candidates = []
        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            if (cost < min_cost * 1.2 or cost < avg_distance - std_dev) and centrality > avg_distance:
                candidates.append((node, cost))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            next_node = candidates[0][0]

    return next_node
