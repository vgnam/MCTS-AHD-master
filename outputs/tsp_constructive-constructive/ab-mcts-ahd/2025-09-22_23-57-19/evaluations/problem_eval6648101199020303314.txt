import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    weights = []
    costs = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        costs.append(cost)

    min_cost = min(costs)
    max_cost = max(costs)
    cost_range = max_cost - min_cost if max_cost != min_cost else 1

    threshold = 1.0 - (0.8 * (len(unvisited_nodes) / len(distance_matrix)))  # Dynamic threshold

    for cost in costs:
        normalized_cost = (cost - min_cost) / cost_range
        weight = max(0, 1 - normalized_cost) * threshold
        weights.append(weight)

    if sum(weights) == 0:
        weights = [1.0 / len(weights) for _ in weights]

    next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]
    return next_node
