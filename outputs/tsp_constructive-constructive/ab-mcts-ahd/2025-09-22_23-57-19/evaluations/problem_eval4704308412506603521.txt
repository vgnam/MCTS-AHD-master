import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    temperature = max(0.1, min_cost / avg_distance) if avg_distance > 0 else 1.0

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        candidates.append((node, cost))

    if not candidates:
        return unvisited_nodes.pop()

    candidates.sort(key=lambda x: x[1])
    best_cost = candidates[0][1]

    probabilities = []
    for node, cost in candidates:
        if cost <= best_cost * 1.2:
            prob = math.exp(-cost / (temperature * best_cost)) if best_cost > 0 else 1.0
            probabilities.append((node, prob))
        else:
            probabilities.append((node, 0.0))

    total_prob = sum(p for _, p in probabilities)
    if total_prob <= 0:
        return candidates[0][0]

    normalized_probs = [(node, p / total_prob) for node, p in probabilities]
    r = random.random()
    cumulative_prob = 0.0
    for node, prob in normalized_probs:
        cumulative_prob += prob
        if r <= cumulative_prob:
            return node

    return next_node
