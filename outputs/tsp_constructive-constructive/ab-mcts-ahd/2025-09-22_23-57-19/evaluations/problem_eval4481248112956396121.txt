def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    decay_factor = 0.9
    node_scores = {}
    for node in unvisited_nodes:
        distance_score = distance_matrix[current_node][node]
        frequency_score = decay_factor ** len(unvisited_nodes)
        node_scores[node] = distance_score * frequency_score

    next_node = max(node_scores, key=node_scores.get)
    return next_node
