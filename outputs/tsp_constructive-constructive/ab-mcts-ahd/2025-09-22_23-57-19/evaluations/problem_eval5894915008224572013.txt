import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        candidates = []
        exploration_factor = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            potential_cost = cost + distance_matrix[node][next_node]
            score = (1.0 - exploration_factor) * cost + exploration_factor * potential_cost
            candidates.append((node, score))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            threshold = min_cost * (1.0 + 0.1 * exploration_factor)
            filtered_candidates = [c for c in candidates if c[1] <= threshold]
            if filtered_candidates:
                probabilities = [1.0 / (i + 1) for i in range(len(filtered_candidates))]
                total = sum(probabilities)
                probabilities = [p / total for p in probabilities]
                selected = random.choices(filtered_candidates, weights=probabilities, k=1)[0]
                next_node = selected[0]

    return next_node
