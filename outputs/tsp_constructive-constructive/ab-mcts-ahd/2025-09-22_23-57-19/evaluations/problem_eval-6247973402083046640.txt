def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    entropy = len(unvisited_nodes) / sum(distances) if sum(distances) > 0 else 0

    min_cost = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        if cost < avg_distance * (1.2 + entropy) and cost < min_cost * (1.1 + entropy):
            candidates.append(node)

    if not candidates:
        return next_node

    if next_node in candidates:
        selection_prob = 0.7 + (0.3 * len(unvisited_nodes) / len(distance_matrix))
        if random.random() < selection_prob:
            return next_node

    return next_node
