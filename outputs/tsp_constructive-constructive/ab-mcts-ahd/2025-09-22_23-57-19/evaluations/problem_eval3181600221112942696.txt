def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    best_node = None
    novelty_scores = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            best_node = node

    if best_node is None:
        return unvisited_nodes.pop()

    for node in unvisited_nodes:
        if node == best_node:
            continue
        cost = distance_matrix[current_node][node]
        novelty = 1 / (1 + (distance_matrix[current_node][node] / avg_distance))
        novelty_scores[node] = novelty

    if novelty_scores:
        max_novelty = max(novelty_scores.values())
        for node, score in novelty_scores.items():
            if score == max_novelty and (distance_matrix[current_node][node] < min_cost * 1.2 or distance_matrix[current_node][node] < avg_distance * 1.2):
                best_node = node
                break

    return next_node
