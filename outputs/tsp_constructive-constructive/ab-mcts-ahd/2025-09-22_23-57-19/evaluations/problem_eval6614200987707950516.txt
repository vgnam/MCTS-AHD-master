def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    nearest_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            nearest_node = node

    if nearest_node is None:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * 1.2:
            candidates.append((node, cost))

    if not candidates:
        return nearest_node

    candidates.sort(key=lambda x: x[1])
    probabilities = [math.exp(-(c[1] - min_cost) / (min_cost * 0.1)) for c in candidates]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    selected_index = random.choices(range(len(candidates)), weights=normalized_probs, k=1)[0]
    return next_node
