def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_weighted_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        future_cost = distance_matrix[node][destination_node]
        weighted_cost = 0.7 * immediate_cost + 0.3 * future_cost

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            next_node = node

    return next_node
