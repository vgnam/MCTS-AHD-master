def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate local distance score and global centrality score
    distance_scores = {}
    centrality_scores = {}
    destination_proximity = {}

    for node in unvisited_nodes:
        distance_scores[node] = distance_matrix[current_node][node]
        centrality_scores[node] = sum(distance_matrix[node])  # Sum of distances to all other nodes
        destination_proximity[node] = distance_matrix[node][destination_node]  # Distance to destination

    # Dynamic temperature parameter (decreases as nodes are visited)
    temperature = 1.0 / (len(unvisited_nodes) + 1)

    # Normalize scores
    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_centrality = max(centrality_scores.values()) if centrality_scores else 1
    max_proximity = max(destination_proximity.values()) if destination_proximity else 1

    normalized_distance = {node: dist / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality_scores.items()}
    normalized_proximity = {node: prox / max_proximity if max_proximity else 0 for node, prox in destination_proximity.items()}

    # Combine scores with dynamic temperature
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        # Weighted combination of local distance, global centrality, and destination proximity
        score = (1 - temperature) * normalized_distance[node] + \
                temperature * (0.5 * normalized_centrality[node] + 0.5 * (1 - normalized_proximity[node]))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
