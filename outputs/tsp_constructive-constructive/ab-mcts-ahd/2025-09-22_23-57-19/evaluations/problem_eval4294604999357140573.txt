def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    temperature = max(0.1, 1.0 - len(unvisited_nodes) / len(distance_matrix))
    threshold_ratio = min_cost / avg_distance if avg_distance > 0 else 1.0

    if threshold_ratio < 0.8:
        escape_threshold = 1.2
    elif threshold_ratio < 1.2:
        escape_threshold = 1.35
    else:
        escape_threshold = 1.5

    next_node = min_node
    candidates = [node for node in unvisited_nodes if node != min_node]

    if candidates and len(unvisited_nodes) > 2:
        for node in candidates:
            cost = distance_matrix[current_node][node]
            if cost < min_cost * escape_threshold and random.random() < temperature:
                next_node = node
                break

    return next_node
