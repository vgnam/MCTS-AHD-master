importance score, using a sigmoid function to smoothly transition between exploration and exploitation based on a decaying temperature parameter. It also introduces a lookahead mechanism to evaluate potential paths, balancing immediate distance with long-term path quality.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temp = max(0.1, 1.0 - (0.5 / (1.0 + len(unvisited_nodes))))

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        avg_distance = sum(distance_matrix[current_node][node] for node in remaining_unvisited) / len(remaining_unvisited)

        if avg_distance > 0:
            normalized_ratio = (destination_distance / avg_distance) ** -1
            importance_score = 1.0 / (1.0 + destination_distance)
            prob_destination = (1.0 - (1.0 / (1.0 + temp))) * (0.7 * normalized_ratio + 0.3 * importance_score)
        else:
            prob_destination = 1.0

        prob_destination = min(prob_destination, 1.0)

        if prob_destination > temp:
            return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        lookahead_score = 0.0

        if len(unvisited_nodes) > 2:
            remaining = unvisited_nodes - {node}
            if destination_node in remaining:
                lookahead_score = 0.3 * (1.0 / (1.0 + distance_matrix[node][destination_node]))
            else:
                next_closest = min(remaining, key=lambda x: distance_matrix[node][x])
                lookahead_score = 0.3 * (1.0 / (1.0 + distance_matrix[node][next_closest]))

        combined_score = distance + (1.0 - temp) * (0.5 * (1.0 / (1.0 + distance)) + lookahead_score)

        if combined_score < min_distance:
            min_distance = combined_score
            next_node = node

    return next_node
