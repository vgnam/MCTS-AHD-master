def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        candidates.append((node, cost))

    candidates.sort(key=lambda x: -x[1])
    max_cost = candidates[0][1]

    if len(candidates) > 1:
        for i in range(1, len(candidates)):
            node, cost = candidates[i]
            if cost >= max_cost * 0.75:
                candidates[i] = (node, cost * (1 - (cost / max_cost)))
            else:
                candidates[i] = (node, cost * (1 + (max_cost / cost)))

    total_weight = sum(weight for _, weight in candidates)
    if total_weight > 0:
        weights = [weight / total_weight for _, weight in candidates]
        next_node = random.choices([node for node, _ in candidates], weights=weights, k=1)[0]
    else:
        next_node = candidates[0][0]

    return next_node
