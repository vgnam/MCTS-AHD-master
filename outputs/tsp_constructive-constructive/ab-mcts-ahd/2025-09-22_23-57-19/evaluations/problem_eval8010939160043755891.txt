import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])

    exploration_prob = min(1.0, 0.5 * (len(unvisited_nodes) / len(distance_matrix)))

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2 and random.random() < exploration_prob:
        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < min_cost * 1.3:
                candidates.append((node, centrality[node], cost))

        if candidates:
            candidates.sort(key=lambda x: (-x[1], x[2]))
            next_node = candidates[0][0]

    return next_node
