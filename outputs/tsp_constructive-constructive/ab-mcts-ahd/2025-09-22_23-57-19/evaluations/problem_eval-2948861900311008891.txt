def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1 + remaining_nodes)  # Decreases as progress continues
    weights = []
    total_weight = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance == 0:
            prob = 1.0  # Direct connection has maximum probability
        else:
            prob = np.exp(-distance * temperature)  # Exponential decay with temperature
        weights.append(prob)
        total_weight += prob

    if total_weight == 0:
        return unvisited_nodes[0]  # Fallback if all weights are zero

    weights = [w / total_weight for w in weights]  # Normalize probabilities
    next_node = np.random.choice(unvisited_nodes, p=weights)

    return next_node
