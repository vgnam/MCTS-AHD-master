def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    exploration_factor = 1.0 + (len(unvisited_nodes) / len(distance_matrix)) * 0.5

    candidates = []
    weights = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * 1.2 or cost <= avg_distance * exploration_factor:
            candidates.append(node)
            weights.append(1.0 / (cost + 1e-6))

    if not candidates:
        return unvisited_nodes.pop()

    if len(candidates) == 1:
        return candidates[0]

    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
