def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    cost_dict = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        cost_dict[node] = cost
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        total_cost = sum(cost_dict.values())
        avg_cost = total_cost / len(unvisited_nodes)
        dynamic_threshold = min_cost / avg_cost if avg_cost > 0 else 1.0
        exploration_factor = 1.0 / (1.0 + dynamic_threshold)

        weighted_nodes = []
        for node in unvisited_nodes:
            cost = cost_dict[node]
            weight = (1 - exploration_factor) * (min_cost / cost) + exploration_factor * (cost / avg_cost)
            weighted_nodes.append((node, weight))

        weighted_nodes.sort(key=lambda x: x[1])
        next_node = weighted_nodes[0][0]

    return next_node
