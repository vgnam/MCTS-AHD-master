def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5

    ranked_nodes = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    ranked_costs = [distance_matrix[current_node][node] for node in ranked_nodes]

    if len(ranked_nodes) > 2:
        threshold = avg_distance + std_dev
        candidates = [node for node in ranked_nodes if distance_matrix[current_node][node] <= threshold]

        if candidates:
            probabilities = [1 / (i + 1) for i in range(len(candidates))]
            total_prob = sum(probabilities)
            probabilities = [p / total_prob for p in probabilities]
            next_node = np.random.choice(candidates, p=probabilities)
        else:
            next_node = ranked_nodes[0]
    else:
        next_node = ranked_nodes[0]

    return next_node
