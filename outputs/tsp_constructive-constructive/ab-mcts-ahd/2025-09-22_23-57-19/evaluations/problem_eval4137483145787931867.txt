def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    threshold = 0.7 * (1 - (len(unvisited_nodes) / len(distance_matrix)))
    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        future_gain = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        score = cost + 0.3 * future_gain
        candidates.append((node, score))

    candidates.sort(key=lambda x: x[1], reverse=True)
    best_node, best_score = candidates[0]

    if len(unvisited_nodes) > 2:
        for node, score in candidates[1:]:
            if score > best_score * threshold and random.random() < 0.2:
                best_node = node
                break

    return next_node
