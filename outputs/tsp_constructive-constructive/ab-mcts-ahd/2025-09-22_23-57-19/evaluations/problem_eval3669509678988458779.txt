def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None
    nearest_node = None
    nearest_cost = float('inf')

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < nearest_cost:
            nearest_cost = cost
            nearest_node = node

    if nearest_node is None:
        return unvisited_nodes.pop()

    next_node = nearest_node

    if len(unvisited_nodes) > 2:
        regret = nearest_cost
        exploration_prob = min(1.0, 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1)) * (regret / nearest_cost))

        if random.random() < exploration_prob:
            candidates = []
            for node in unvisited_nodes:
                if node == nearest_node:
                    continue
                cost = distance_matrix[current_node][node]
                candidates.append((node, cost))

            if candidates:
                candidates.sort(key=lambda x: x[1])
                threshold = nearest_cost * (1.0 + 0.1 * len(unvisited_nodes) / 10)
                for node, cost in candidates:
                    if cost <= threshold:
                        next_node = node
                        break

    return next_node
