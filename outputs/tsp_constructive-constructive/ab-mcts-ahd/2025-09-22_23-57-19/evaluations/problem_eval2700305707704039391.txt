def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate proximity, distance, and centrality scores
    proximity_scores = {}
    distance_scores = {}
    centrality_scores = {}
    variance_penalties = {}

    for node in unvisited_nodes:
        proximity_scores[node] = 1 / (1 + distance_matrix[node][destination_node])
        distance_scores[node] = distance_matrix[current_node][node]

        # Centrality: average distance to all other unvisited nodes
        centrality_scores[node] = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Variance penalty: penalize nodes with high distance variance to encourage balanced selection
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        variance = sum((d - centrality_scores[node])**2 for d in distances_to_unvisited) / len(distances_to_unvisited) if distances_to_unvisited else 0
        variance_penalties[node] = 1 / (1 + variance)

    # Dynamic exploration factor (fraction of remaining nodes)
    exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))

    # Normalize scores
    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_proximity = max(proximity_scores.values()) if proximity_scores else 1
    max_centrality = max(centrality_scores.values()) if centrality_scores else 1

    normalized_distance = {node: dist / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_proximity = {node: prox / max_proximity if max_proximity else 0 for node, prox in proximity_scores.items()}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality_scores.items()}

    # Combine scores with dynamic weights
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        score = (0.4 * (1 - exploration_factor) * normalized_distance[node] +
                 0.4 * exploration_factor * normalized_proximity[node] +
                 0.2 * normalized_centrality[node] -
                 0.1 * variance_penalties[node])

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
