def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    exploration_rate = 0.3 * (0.9 ** (remaining_nodes - 1))
    dynamic_weight = 0.7 * (0.9 ** (remaining_nodes - 1))

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + dynamic_weight * heuristic
        candidates.append((node, score))

    if remaining_nodes > 2 and np.random.rand() < exploration_rate:
        candidates.sort(key=lambda x: x[1], reverse=True)
        next_node = candidates[0][0]
    else:
        candidates.sort(key=lambda x: x[1])
        next_node = candidates[0][0]

    if next_node is None:
        return unvisited_nodes.pop()

    return next_node
