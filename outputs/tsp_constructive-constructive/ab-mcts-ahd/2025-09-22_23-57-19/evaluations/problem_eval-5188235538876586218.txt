def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            exploration_factor = (avg_distance - cost) / avg_distance if avg_distance > 0 else 0
            weight = (1 - exploration_factor) * (1 / (cost + 1e-6)) + exploration_factor * (1 / (distance_matrix[node][next_node] + 1e-6))
            candidates.append((node, weight))

        candidates.sort(key=lambda x: -x[1])
        if candidates:
            next_node = candidates[0][0]

    return next_node
