def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    node_weights = []
    total_savings = 0

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        savings = distance_matrix[current_node][destination_node] - cost
        proximity_weight = 1 / (distance_matrix[node][destination_node] + 1e-6)
        weighted_savings = savings * proximity_weight
        node_weights.append((node, weighted_savings))
        total_savings += weighted_savings

    if not node_weights:
        return destination_node

    probabilities = [savings / total_savings for _, savings in node_weights]
    next_node = random.choices([node for node, _ in node_weights], weights=probabilities, k=1)[0]

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_savings = (distance_matrix[current_node][destination_node] -
                               distance_matrix[current_node][node] -
                               distance_matrix[node][next_node])
            if potential_savings > (distance_matrix[current_node][destination_node] - distance_matrix[current_node][next_node]) * 0.8:
                next_node = node
                break

    return next_node
