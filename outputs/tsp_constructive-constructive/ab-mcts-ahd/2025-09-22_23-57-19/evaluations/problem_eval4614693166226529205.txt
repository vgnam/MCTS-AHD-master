def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        candidates.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        escape_threshold = 1.3 * avg_distance
        escape_probabilities = []
        total_weight = 0.0

        for node, cost in candidates:
            if node == next_node:
                weight = 1.0  # Base weight for nearest neighbor
            else:
                normalized_cost = cost / avg_distance
                weight = 1.0 / (1.0 + math.exp(normalized_cost - 1.0))  # Sigmoid function
            escape_probabilities.append((node, weight))
            total_weight += weight

        if total_weight > 0:
            rand_val = random.random() * total_weight
            cumulative_weight = 0.0
            for node, weight in escape_probabilities:
                cumulative_weight += weight
                if rand_val <= cumulative_weight:
                    next_node = node
                    break

    return next_node
