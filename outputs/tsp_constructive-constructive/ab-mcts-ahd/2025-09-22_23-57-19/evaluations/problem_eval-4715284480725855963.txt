def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    scores = {}
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        dist_to_node = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        proximity_weight = 0.7 - (0.3 * (remaining_nodes - 1) / (remaining_nodes + 1))
        destination_weight = 0.3 + (0.3 * (remaining_nodes - 1) / (remaining_nodes + 1))

        # Penalty for revisiting nodes (if applicable)
        penalty = 1.0 if node in unvisited_nodes else 1.1

        # Exponential decay for long-term planning
        decay_factor = 2 ** (-1 / (remaining_nodes + 1))

        score = (dist_to_node * proximity_weight + dist_to_dest * destination_weight) * decay_factor * penalty
        scores[node] = score

    if scores:
        next_node = min(scores, key=scores.get)  # Minimize score for better balance
        return next_node

    return next_node
