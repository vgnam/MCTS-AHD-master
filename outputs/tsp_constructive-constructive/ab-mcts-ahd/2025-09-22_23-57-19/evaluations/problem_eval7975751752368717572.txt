def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic_value = distance_matrix[node][destination_node] if destination_node != node else 0
        dynamic_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))  # Adapts based on remaining nodes
        weighted_score = -distance + dynamic_weight * heuristic_value  # Maximize this score

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
