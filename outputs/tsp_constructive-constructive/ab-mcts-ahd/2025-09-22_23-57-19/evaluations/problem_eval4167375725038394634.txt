def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    remaining_nodes = len(unvisited_nodes)
    path_length_factor = max(0.5, 1.0 - (remaining_nodes / (remaining_nodes + len(distance_matrix))))

    dynamic_threshold = avg_distance * (1.5 + path_length_factor)

    candidate_nodes = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= dynamic_threshold:
            candidate_nodes.append((node, cost))

    if not candidate_nodes:
        return min_node

    node_degrees = [sum(1 for d in distance_matrix[node] if d > 0) for node, _ in candidate_nodes]
    avg_degree = sum(node_degrees) / len(node_degrees)

    weighted_scores = []
    for (node, cost), degree in zip(candidate_nodes, node_degrees):
        degree_factor = 1.0 if degree >= avg_degree else 0.7
        score = (1.0 / cost) * degree_factor
        weighted_scores.append((node, score))

    weighted_scores.sort(key=lambda x: -x[1])
    selected_node, _ = weighted_scores[0]

    return next_node
