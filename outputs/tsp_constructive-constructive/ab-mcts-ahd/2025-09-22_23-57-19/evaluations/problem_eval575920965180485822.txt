def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    max_distance = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] > max_distance:
            max_distance = distance_matrix[current_node][node]
            next_node = node

    if len(unvisited_nodes) > 2:
        exploration_factor = 1.0 / (len(unvisited_nodes) + 1)
        centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes}
        max_centrality = max(centrality.values()) if centrality else 1
        normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < avg_distance * 1.5 and cost > max_distance * 0.8 and normalized_centrality[node] > exploration_factor:
                next_node = node
                break

    return next_node
