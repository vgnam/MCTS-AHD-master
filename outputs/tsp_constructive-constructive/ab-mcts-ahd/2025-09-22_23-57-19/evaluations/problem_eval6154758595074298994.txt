def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    farthest_node = None
    max_cost = -float('inf')
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            farthest_node = node

    if farthest_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        temperature = len(distance_matrix) / len(unvisited_nodes)
        threshold = max_cost * (1 - 0.2 * (temperature ** 0.5))

        candidates = []
        for node in unvisited_nodes:
            if node == farthest_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][farthest_node]
            if potential_cost < threshold:
                candidates.append((node, potential_cost))

        if candidates:
            probabilities = [1 / (cost + 1e-6) for _, cost in candidates]
            total_prob = sum(probabilities)
            normalized_probs = [p / total_prob for p in probabilities]
            next_node = np.random.choice([node for node, _ in candidates], p=normalized_probs)
            return next_node

    return next_node
