def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    # Calculate centrality and distance scores
    centrality = {}
    distances = []
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        distances.append(distance_matrix[current_node][node])

    # Dynamic exploration factor (inverse of remaining nodes)
    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)

    # Normalize scores
    max_distance = max(distances) if distances else 1
    max_centrality = max(centrality.values()) if centrality else 1

    normalized_distance = {node: (max_distance - distance_matrix[current_node][node]) / max_distance if max_distance else 0 for node in unvisited_nodes}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    # Combine scores with dynamic exploration factor
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        score = (1 - exploration_factor) * normalized_distance[node] + exploration_factor * normalized_centrality[node]

        if score > best_score:
            best_score = score
            next_node = node

    # Dynamic threshold for exploration
    avg_distance = sum(distances) / len(distances) if distances else 0
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5 if len(distances) > 1 else 0

    if len(unvisited_nodes) > 2:
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= avg_distance + 1.3 * std_dev]
        if candidates:
            next_node = candidates[0]

    return next_node
