def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    # Calculate probabilities based on inverse distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)
    normalized_distances = [(max_dist - d + 1e-6) / (max_dist - min_dist + 1e-6) for d in distances]  # Avoid division by zero

    # Apply softmax to get probabilities
    exp_distances = [math.exp(d) for d in normalized_distances]
    total = sum(exp_distances)
    probabilities = [e / total for e in exp_distances]

    # Randomly select a node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
