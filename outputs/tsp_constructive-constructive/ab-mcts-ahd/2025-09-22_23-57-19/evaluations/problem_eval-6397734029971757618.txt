def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    exploration_factor = 0.3
    weights = []
    total_weight = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weight = (1 / (distance + 1e-10)) + exploration_factor * (distance / (sum(distance_matrix[current_node]) + 1e-10))
        weights.append(weight)
        total_weight += weight

    if total_weight == 0:
        return unvisited_nodes.pop()

    probabilities = [w / total_weight for w in weights]
    selected_node = np.random.choice(unvisited_nodes, p=probabilities)

    if selected_node is not None:
        return selected_node

    max_distance = -float('inf')
    farthest_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] > max_distance:
            max_distance = distance_matrix[current_node][node]
            farthest_node = node

    return next_node
