def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node]) / len(distance_matrix[node])

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        if distance_matrix[current_node][node] <= avg_distance + 1.3 * std_dev:
            candidates.append(node)

    if candidates:
        weights = []
        for node in candidates:
            distance_weight = 1 / (distance_matrix[current_node][node] + 1e-6)
            centrality_weight = centrality[node] / max(centrality.values()) if max(centrality.values()) > 0 else 1
            weights.append(0.6 * distance_weight + 0.4 * centrality_weight)

        total_weight = sum(weights)
        if total_weight > 0:
            weights = [w / total_weight for w in weights]
            next_node = random.choices(candidates, weights=weights, k=1)[0]

    else:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < avg_distance * 1.5 and cost < min_cost * 1.2:
                next_node = node
                break

    return next_node
