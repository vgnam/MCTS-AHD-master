def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        candidates.append((node, cost))

    candidates.sort(key=lambda x: x[1])
    min_cost = candidates[0][1]
    max_cost = candidates[-1][1]

    if len(unvisited_nodes) > 2:
        distances = [cost for _, cost in candidates]
        avg_distance = sum(distances) / len(distances)
        threshold = avg_distance * (0.9 + 0.2 * (max_cost / (avg_distance + 1e-6)))

        for node, cost in reversed(candidates):
            if cost > threshold:
                return node

        for node, cost in candidates:
            if cost < min_cost * 1.1 and cost < avg_distance * 1.3:
                return node

    return next_node
