def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes

    scores = {}
    for node in unvisited_nodes:
        dist_to_node = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        remaining_nodes = len(unvisited_nodes) - 1
        score = (dist_to_node * 0.7) + (centrality * 0.3 * (1 - phase_factor)) / (remaining_nodes + 1)
        scores[node] = score

    if scores:
        next_node = max(scores, key=scores.get)
        return next_node

    return next_node
