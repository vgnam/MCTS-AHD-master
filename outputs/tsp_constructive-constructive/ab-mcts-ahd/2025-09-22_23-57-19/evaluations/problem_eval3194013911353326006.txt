import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        if len(unvisited_nodes) == 1:
            return destination_node
        distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
        avg_distance = sum(distances) / len(distances)
        if distance_matrix[current_node][destination_node] < avg_distance * 1.5:
            return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        threshold = 1.2 + (1.6 * (len(unvisited_nodes) / len(distance_matrix)))
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] < avg_distance * threshold]
        if candidates:
            if random.random() < 0.7:  # 70% chance to pick the cheapest candidate
                return min_node
            else:
                return random.choice(candidates)

    return next_node
