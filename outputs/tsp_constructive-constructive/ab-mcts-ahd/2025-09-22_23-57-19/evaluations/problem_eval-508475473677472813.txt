def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
        threshold = min_cost + (remaining_distance / len(unvisited_nodes)) * 0.3

        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= threshold]
        if candidates:
            probabilities = [1 / (distance_matrix[current_node][node] + 1) for node in candidates]
            total_prob = sum(probabilities)
            probabilities = [p / total_prob for p in probabilities]
            next_node = random.choices(candidates, weights=probabilities, k=1)[0]
            return next_node

    return next_node
