def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    total_unvisited = len(unvisited_nodes)
    remaining_distance_to_dest = distance_matrix[current_node][destination_node]
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / (total_nodes - 1)

        # Adaptive weights based on tour progress and centrality
        progress_weight = 0.5 + 0.5 * (1 - total_unvisited / total_nodes)
        centrality_weight = 0.3 * (1 - progress_weight)

        score = (1 - progress_weight) * distance_to_current + \
                progress_weight * proximity_to_dest + \
                centrality_weight * (1 / (1 + centrality))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
