def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    remaining_nodes = len(unvisited_nodes)
    density_factor = 1 + (1 / (remaining_nodes + 1))
    destination_proximity = distance_matrix[current_node][destination_node] / (avg_distance + 1e-10)

    base_threshold = 1.2 * density_factor
    destination_influence = 0.5 * (1 - destination_proximity)
    dynamic_threshold = base_threshold + destination_influence

    candidate_nodes = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * dynamic_threshold:
            candidate_nodes.append(node)

    if not candidate_nodes:
        return min_node

    if remaining_nodes <= 3:
        probabilities = [1 / (distance_matrix[current_node][node] + 1e-10) for node in candidate_nodes]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min_node

    return next_node
