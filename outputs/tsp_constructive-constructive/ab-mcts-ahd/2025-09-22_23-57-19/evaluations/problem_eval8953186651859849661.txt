def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    max_distance = max(distances)
    farthest_node = unvisited_nodes[distances.index(max_distance)]

    if len(unvisited_nodes) == 2:
        return farthest_node

    probabilities = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        ratio = distance / max_distance if max_distance > 0 else 1.0
        prob = (1 - ratio) * (1 / (1 + math.exp(-5 * (ratio - 0.5))))
        probabilities.append(prob)

    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    selected_index = np.random.choice(len(unvisited_nodes), p=normalized_probs)
    next_node = unvisited_nodes[selected_index]

    if next_node == farthest_node or np.random.random() < 0.3:
        return next_node

    fallback_node = unvisited_nodes[distances.index(min(distances))]
    return next_node
