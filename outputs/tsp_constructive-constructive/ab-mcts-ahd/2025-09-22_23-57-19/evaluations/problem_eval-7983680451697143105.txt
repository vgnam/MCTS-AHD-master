import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) == 2:
        node1, node2 = unvisited_nodes
        cost1 = distance_matrix[current_node][node1] + distance_matrix[node1][node2]
        cost2 = distance_matrix[current_node][node2] + distance_matrix[node2][node1]
        return node1 if cost1 < cost2 else node2

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    threshold = avg_distance * 0.8

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= threshold:
            candidates.append((node, cost))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        selected = random.choices(
            candidates[:min(3, len(candidates))],
            weights=[1/(i+1) for i in range(min(3, len(candidates)))],
            k=1
        )[0][0]
        return selected

    return next_node
