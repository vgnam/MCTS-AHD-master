import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = max(0.1, 1.0 / math.log2(remaining_nodes + 1))

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + dynamic_weight * heuristic

        if score < min_score:
            min_score = min_score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if remaining_nodes > 2:
        detour_prob = min(0.5, 0.1 * (remaining_nodes - 2))
        if random.random() < detour_prob:
            for node in unvisited_nodes:
                if node == next_node:
                    continue
                potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
                if potential_cost < min_score * 1.2:
                    next_node = node
                    break

    return next_node
