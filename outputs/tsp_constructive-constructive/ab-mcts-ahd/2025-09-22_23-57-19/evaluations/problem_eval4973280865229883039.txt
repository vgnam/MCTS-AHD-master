def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate distance and modified centrality scores
    distance_scores = {}
    centrality_scores = {}
    for node in unvisited_nodes:
        distance_scores[node] = distance_matrix[current_node][node]

        # Modified centrality: sum of distances to all other nodes plus sum of inverse distances
        sum_dist = sum(distance_matrix[node])
        sum_inv_dist = sum(1.0 / (d + 1e-6) for d in distance_matrix[node] if d > 0)
        centrality_scores[node] = sum_dist + sum_inv_dist

    # Dynamic exploration factor with adaptive shift
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = min(0.8, 0.5 * (1.0 - (remaining_nodes / (remaining_nodes + 1))))

    # Normalize scores
    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_centrality = max(centrality_scores.values()) if centrality_scores else 1

    normalized_distance = {node: dist / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality_scores.items()}

    # Adaptive weighting: prioritize nodes that are both close and central
    adaptive_weight = 0.5 * (1.0 - (remaining_nodes / (remaining_nodes + 1)))
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        # Combined score with adaptive weighting
        score = (1 - exploration_factor) * normalized_distance[node] + exploration_factor * normalized_centrality[node]
        score += adaptive_weight * (normalized_distance[node] * normalized_centrality[node])

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
