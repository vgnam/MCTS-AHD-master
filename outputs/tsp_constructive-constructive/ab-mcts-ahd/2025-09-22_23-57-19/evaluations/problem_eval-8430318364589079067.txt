def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    farthest_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            farthest_node = node

    if farthest_node is None:
        return unvisited_nodes.pop()

    exploration_factor = 1.0 / len(unvisited_nodes)
    if random.random() < exploration_factor:
        candidate_nodes = [node for node in unvisited_nodes if node != farthest_node]
        if candidate_nodes:
            return random.choice(candidate_nodes)

    selection_probability = 0.8 ** (len(unvisited_nodes) / len(unvisited_nodes))
    if random.random() < selection_probability:
        return farthest_node

    candidate_nodes = [node for node in unvisited_nodes if node != farthest_node]
    if candidate_nodes:
        return random.choice(candidate_nodes)

    return next_node
