def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    max_distance = max(distances)

    ratio = max_distance / avg_distance if avg_distance != 0 else float('inf')

    threshold = 1.3 if ratio < 2 else 1.1 if ratio < 3 else 1.0

    candidate_nodes = []
    for node in unvisited_nodes:
        if distance_matrix[current_node][node] >= avg_distance * threshold:
            candidate_nodes.append(node)

    if not candidate_nodes:
        candidate_nodes = unvisited_nodes.copy()

    if len(candidate_nodes) > 1:
        probabilities = [distance_matrix[current_node][node] / sum(distance_matrix[current_node][n] for n in candidate_nodes) for node in candidate_nodes]
        next_node = random.choices(candidate_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = candidate_nodes[0]

    return next_node
