def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    unvisited_list = list(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_list) / len(unvisited_list)

    max_cost = -float('inf')
    next_node = None

    for node in unvisited_list:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    dynamic_threshold = max(1.1, avg_distance / max_cost * 1.5)

    if len(unvisited_nodes) > 2:
        for node in unvisited_list:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < max_cost * dynamic_threshold:
                next_node = node
                break

    return next_node
