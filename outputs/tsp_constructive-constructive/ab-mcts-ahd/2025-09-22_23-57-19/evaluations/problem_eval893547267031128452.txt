def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_cost_node = unvisited_nodes[distances.index(min_cost)]

    threshold_factor = 1.0 + (0.5 * (len(unvisited_nodes) / len(distance_matrix)))

    candidate_nodes = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * threshold_factor:
            candidate_nodes.append(node)

    if not candidate_nodes:
        candidate_nodes = unvisited_nodes.copy()

    utility_scores = []
    for node in candidate_nodes:
        cost = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        utility = (1.0 / (cost + 1e-6)) * (centrality / avg_distance)
        utility_scores.append(utility)

    if not utility_scores:
        return min_cost_node

    max_utility = max(utility_scores)
    best_nodes = [node for node, score in zip(candidate_nodes, utility_scores) if score == max_utility]

    if len(best_nodes) == 1:
        return best_nodes[0]
    else:
        return next_node
