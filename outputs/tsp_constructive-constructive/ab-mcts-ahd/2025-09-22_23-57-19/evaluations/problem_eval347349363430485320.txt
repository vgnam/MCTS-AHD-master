def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None
    current_degree = sum(1 for node in unvisited_nodes if distance_matrix[current_node][node] < float('inf'))

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = 1.2 * (1 + 0.1 * (current_degree - 1))
        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < min_cost * threshold:
                candidates.append((node, potential_cost))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            if len(candidates) > 1 and random.random() < 0.3 * (1 - len(unvisited_nodes) / len(distance_matrix)):
                next_node = random.choice(candidates[:2])[0]
            else:
                next_node = candidates[0][0]

    return next_node
