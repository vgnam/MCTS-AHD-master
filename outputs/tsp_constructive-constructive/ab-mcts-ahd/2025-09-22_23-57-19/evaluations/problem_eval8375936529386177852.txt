def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            candidates.append((node, cost))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            distances = [cost for _, cost in candidates]
            variance = sum((x - sum(distances)/len(distances))**2 for x in distances) / len(distances) if distances else 0
            scaling_factor = max(0.1, 1.0 + 0.1 * (variance / (min_cost + 1e-6)))
            threshold = min_cost * scaling_factor

            for node, cost in candidates:
                if cost <= threshold and (variance == 0 or (cost > min_cost and np.random.rand() < 0.3)):
                    next_node = node
                    break

    return next_node
