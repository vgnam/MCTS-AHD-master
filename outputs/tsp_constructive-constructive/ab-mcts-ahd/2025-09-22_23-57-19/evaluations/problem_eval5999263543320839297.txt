def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)

    candidate_nodes = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        proximity = 1 / (1 + distance_matrix[node][destination_node])
        cost_ratio = cost / (avg_distance + 1e-9)
        score = (1 - cost_ratio) * 0.6 + proximity * 0.4
        candidate_nodes.append((node, score))

    candidate_nodes.sort(key=lambda x: -x[1])
    next_node = candidate_nodes[0][0]

    if len(unvisited_nodes) > 2 and len(candidate_nodes) > 1:
        for node, score in candidate_nodes[1:]:
            if distance_matrix[current_node][node] < avg_distance * 1.2 and score > 0.7:
                next_node = node
                break

    return next_node
