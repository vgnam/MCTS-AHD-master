def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = []
    for node in unvisited_nodes:
        distances.append(distance_matrix[current_node][node])

    avg_distance = sum(distances) / len(distances) if distances else float('inf')
    threshold = avg_distance * (1.0 + 0.1 * (len(unvisited_nodes) - 2))

    max_cost = -1
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost and cost <= threshold:
            max_cost = cost
            next_node = node

    if next_node is None:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
