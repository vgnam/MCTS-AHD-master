def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    total_unvisited = len(unvisited_nodes)
    remaining_distance_to_dest = distance_matrix[current_node][destination_node]
    dynamic_weight = 0.3 + 0.7 * (1 - (total_unvisited / (total_unvisited + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        historical_cost = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        penalty = max(0, distance_to_current - 2 * remaining_distance_to_dest)
        score = distance_to_current + (dynamic_weight * proximity_to_dest) + (0.2 * historical_cost) + (0.5 * penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
