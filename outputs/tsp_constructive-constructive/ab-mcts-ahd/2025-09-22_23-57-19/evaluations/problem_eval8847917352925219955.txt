def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    exploration_factor = 1.0 - (0.8 * (1.0 / len(unvisited_nodes)))
    temperature = max_distance * exploration_factor

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= temperature:
            candidates.append((node, cost))

    if not candidates:
        candidates = [(node, distance_matrix[current_node][node]) for node in unvisited_nodes]

    if destination_node in [c[0] for c in candidates]:
        return destination_node

    total_cost = sum(c[1] for c in candidates)
    probabilities = [(1.0 - (cost / total_cost)) for cost in [c[1] for c in candidates]]

    if sum(probabilities) == 0:
        probabilities = [1.0 / len(probabilities)] * len(probabilities)

    selected_node = random.choices([c[0] for c in candidates], weights=probabilities, k=1)[0]

    if len(unvisited_nodes) > 2:
        future_cost = distance_matrix[selected_node][destination_node]
        if future_cost < min_distance * 1.5:
            return selected_node
        else:
            candidates.remove((selected_node, distance_matrix[current_node][selected_node]))
            if candidates:
                candidates.sort(key=lambda x: x[1])
                return candidates[0][0]

    return next_node
