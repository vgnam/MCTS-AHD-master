def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= 1.3 * avg_distance]

    if not candidates:
        candidates = unvisited_nodes.copy()

    temperature = 1.0 / (1.0 + len(unvisited_nodes))
    weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in candidates]
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    selected_index = random.choices(range(len(candidates)), weights=probabilities, k=1)[0]
    next_node = candidates[selected_index]

    return next_node
