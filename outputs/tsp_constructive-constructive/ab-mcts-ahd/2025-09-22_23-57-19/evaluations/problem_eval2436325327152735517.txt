def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = 0.5 + 0.5 * (len(unvisited_nodes) / len(distance_matrix))
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_distance = (distance_matrix[current_node][node] +
                               distance_matrix[node][destination_node])
            if potential_distance < min_distance * threshold:
                next_node = node
                break

    return next_node
