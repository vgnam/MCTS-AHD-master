def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.9 ** (remaining_nodes / len(unvisited_nodes))
    weight = 0.5 * (1 - decay_factor) ** 2

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        revisit_penalty = 1.0 if node in unvisited_nodes else 1.5
        score = distance + weight * heuristic * revisit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
