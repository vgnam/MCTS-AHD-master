def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    best_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        score = -cost + 0.5 * distance_matrix[node][destination_node]
        if score > best_score:
            best_score = score
            best_node = node

    if best_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == best_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][best_node]
            if potential_cost > distance_matrix[current_node][best_node] * 1.2:
                best_node = node
                break

    return next_node
