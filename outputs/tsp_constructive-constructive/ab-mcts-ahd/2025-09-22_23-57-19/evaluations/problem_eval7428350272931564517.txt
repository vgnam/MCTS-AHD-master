def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    scores = []
    total_unvisited = len(unvisited_nodes)
    remaining_distance_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        dynamic_weight = 0.3 + 0.7 * (1 - (total_unvisited / (total_unvisited + 1)))
        time_decay_factor = 0.9 ** (total_unvisited - len(unvisited_nodes))
        score = (distance_to_current + dynamic_weight * proximity_to_dest) * time_decay_factor
        scores.append((node, score))

    if not scores:
        return destination_node

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-10)) for node, score in scores]

    probabilities = [1 - normalized_score for node, normalized_score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
    return next_node
