def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate centrality scores for each unvisited node
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])

    # Dynamic weight factor (decays as nodes are visited)
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    weight_factor = 0.7 * (remaining_nodes / total_nodes)  # Higher weight for centrality when more nodes remain

    # Evaluate each node based on weighted distance and centrality
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        score = (1 - weight_factor) * (-distance) + weight_factor * centrality[node]  # Minimize distance, maximize centrality

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
