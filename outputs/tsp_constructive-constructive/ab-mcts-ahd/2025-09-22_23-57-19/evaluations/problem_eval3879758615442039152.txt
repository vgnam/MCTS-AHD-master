def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    min_cost = float('inf')
    nearest_node = None
    farthest_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            farthest_node = node
        if cost < min_cost:
            min_cost = cost
            nearest_node = node

    if nearest_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        normalized_factor = (len(unvisited_nodes) - 2) / len(unvisited_nodes)
        probability_threshold = 0.5 + 0.5 * normalized_factor

        if random.random() < probability_threshold:
            next_node = nearest_node
        else:
            next_node = farthest_node
    else:
        next_node = nearest_node

    return next_node
