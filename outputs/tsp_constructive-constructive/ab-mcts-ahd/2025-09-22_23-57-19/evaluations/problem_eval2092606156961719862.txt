def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        remaining_nodes = len(unvisited_nodes)
        threshold_weight = 1.0 / (1.0 + math.exp(-0.5 * (remaining_nodes - 5)))
        weighted_avg = avg_distance * (1.0 - threshold_weight) + min_cost * threshold_weight

        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < weighted_avg * 1.2:
                if random.random() < threshold_weight:
                    next_node = node
                    break

    return next_node
