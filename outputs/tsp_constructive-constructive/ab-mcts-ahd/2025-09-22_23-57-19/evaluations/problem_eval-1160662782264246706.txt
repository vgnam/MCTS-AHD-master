import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        future_cost = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        combined_cost = cost + 0.5 * future_cost
        candidates.append((node, combined_cost))

    candidates.sort(key=lambda x: x[1])
    best_node, best_cost = candidates[0]

    exploration_factor = min(0.3, (avg_distance - best_cost) / avg_distance) if avg_distance > 0 else 0.1
    if random.random() < exploration_factor:
        selected_node = random.choice([c[0] for c in candidates[1:min(3, len(candidates))]])
    else:
        selected_node = best_node

    return next_node
