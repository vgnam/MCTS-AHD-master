def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        total_cost = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
        avg_cost = total_cost / len(unvisited_nodes)
        dynamic_threshold = min_cost / avg_cost if avg_cost > 0 else 1.0
        threshold = min_cost * (1.0 + 0.2 * (len(unvisited_nodes) / len(distance_matrix)))

        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost <= threshold and potential_cost < min_cost * dynamic_threshold:
                candidates.append((node, potential_cost))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            next_node = candidates[0][0]

    return next_node
