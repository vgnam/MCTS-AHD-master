def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temp = max(0.1, 0.5 ** (1.0 / (1.0 + len(unvisited_nodes))))

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        distances = [distance_matrix[current_node][node] for node in remaining_unvisited]
        avg_distance = sum(distances) / len(distances)
        variance = sum((d - avg_distance) ** 2 for d in distances) / len(distances)

        if avg_distance > 0:
            normalized_ratio = (destination_distance / avg_distance) ** -1
            exploration_bias = variance / (avg_distance ** 2) if avg_distance > 0 else 0
            prob_destination = temp * (normalized_ratio + exploration_bias)
        else:
            prob_destination = 1.0

        prob_destination = min(prob_destination, 1.0)

        if prob_destination > temp:
            return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    return next_node
