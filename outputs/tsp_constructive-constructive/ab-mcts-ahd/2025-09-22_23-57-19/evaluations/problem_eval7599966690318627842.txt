def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    max_distance = max(distances)
    farthest_node = unvisited_nodes[distances.index(max_distance)]

    exploration_threshold = avg_distance * 1.2
    escape_probability = (len(unvisited_nodes) / len(distance_matrix)) * 0.5

    if random.random() < escape_probability:
        candidate_nodes = [node for node in unvisited_nodes if avg_distance * 0.8 <= distance_matrix[current_node][node] <= exploration_threshold]
        if candidate_nodes:
            return random.choice(candidate_nodes)

    return next_node
