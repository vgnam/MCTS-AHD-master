def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (remaining_nodes / (remaining_nodes + 1)))

    node_degrees = {node: sum(1 for n in unvisited_nodes if distance_matrix[node][n] < float('inf')) for node in unvisited_nodes}
    max_degree = max(node_degrees.values()) if node_degrees else 1

    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        degree_factor = 1 - (node_degrees[node] / max_degree)
        score = (1 - temperature) * distance + temperature * heuristic + degree_factor
        scores.append((node, score))

    if not scores:
        return unvisited_nodes.pop()

    scores.sort(key=lambda x: x[1])
    selected_probabilities = [math.exp(-s[1] / temperature) for s in scores]
    total_prob = sum(selected_probabilities)
    normalized_probs = [p / total_prob for p in selected_probabilities]

    next_node = random.choices([s[0] for s in scores], weights=normalized_probs, k=1)[0]

    if remaining_nodes > 2 and random.random() < 0.2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            candidate_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if candidate_cost < selected_probabilities[0] * 1.2:
                next_node = node
                break

    return next_node
