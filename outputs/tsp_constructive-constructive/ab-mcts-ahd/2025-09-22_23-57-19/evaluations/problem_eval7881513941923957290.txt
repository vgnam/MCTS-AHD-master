def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 0.5 * (remaining_nodes / len(unvisited_nodes)))

    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + (1 - temperature) * heuristic
        scores.append((node, score))

    if not scores:
        return unvisited_nodes.pop()

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (max_score - score + 1e-6) / (max_score - min_score + 1e-6)) for node, score in scores]

    total_weight = sum(weight for _, weight in normalized_scores)
    if total_weight == 0:
        total_weight = 1.0

    rand_val = random.random() * total_weight
    cumulative_weight = 0.0
    next_node = None

    for node, weight in normalized_scores:
        cumulative_weight += weight
        if rand_val <= cumulative_weight:
            next_node = node
            break

    if next_node is None:
        next_node = random.choice(unvisited_nodes)

    if len(unvisited_nodes) > 2 and random.random() < 0.3:
        local_neighborhood = random.sample(unvisited_nodes, min(3, len(unvisited_nodes)))
        best_local_node = None
        best_local_score = float('inf')

        for node in local_neighborhood:
            if node == next_node:
                continue
            local_score = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if local_score < best_local_score:
                best_local_score = local_score
                best_local_node = node

        if best_local_node is not None and best_local_score < min_score * 1.2:
            next_node = best_local_node

    return next_node
