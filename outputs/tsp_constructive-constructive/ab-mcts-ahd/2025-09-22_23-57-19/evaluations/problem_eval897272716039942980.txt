import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) <= 2:
        return min_node

    threshold = 1.5 * (1 - (len(unvisited_nodes) / len(distance_matrix)))

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * (1 + threshold):
            candidates.append((node, cost))

    if not candidates:
        return min_node

    if len(candidates) == 1:
        return candidates[0][0]

    if destination_node in [c[0] for c in candidates] and random.random() < 0.7:
        return destination_node

    selected_node, _ = random.choices(
        [c for c in candidates if c[0] != destination_node],
        weights=[1 / (1 + c[1]) for c in candidates if c[0] != destination_node],
        k=1
    )[0]

    return next_node
