def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    total_unvisited = len(unvisited_nodes)
    remaining_distance_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes) if unvisited_nodes else 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = distance_matrix[node][destination_node]
        dynamic_priority = 0.5 * (1 - (distance_to_current / (max_distance + 1))) + 0.5 * (1 - (proximity_to_dest / (remaining_distance_to_dest + 1)))
        normalized_score = (distance_to_current + 0.3 * proximity_to_dest) * (1 - dynamic_priority)

        if normalized_score < min_score:
            min_score = normalized_score
            next_node = node

    return next_node
