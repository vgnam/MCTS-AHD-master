def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    dynamic_threshold = avg_distance * (1.1 + 0.2 * (max_cost / avg_distance))

    for node in unvisited_nodes:
        if node == next_node:
            continue
        cost = distance_matrix[current_node][node]
        if cost < dynamic_threshold and cost < min_cost * 1.1:
            if random.random() < 0.3 * (avg_distance / cost):
                next_node = node
                break

    return next_node
