def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    avg_cost = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    # Calculate path-length awareness factor
    remaining_nodes = len(unvisited_nodes)
    path_length_factor = 1.0 / (1.0 + remaining_nodes)  # Decreases as path progresses

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            # Dynamic threshold adjusted by path-length factor
            threshold = avg_cost * (0.8 - 0.2 * path_length_factor) if max_cost > avg_cost * 1.2 else avg_cost * (0.7 - 0.1 * path_length_factor)
            if potential_cost < threshold:
                next_node = node
                break

    return next_node
