import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)
    temperature = max(0.1, 1.0 / (1.0 + math.exp(-(len(unvisited_nodes) - 10) / 5.0)))

    centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes}
    max_centrality = max(centrality.values()) if centrality else 1
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    min_cost = float('inf')
    next_node = None
    nearest_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            nearest_node = node

    if nearest_node is None:
        return unvisited_nodes.pop()

    candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= avg_distance + 1.3 * std_dev]
    if candidates:
        if random.random() < temperature:
            next_node = random.choice(candidates)
        else:
            next_node = nearest_node

        if random.random() < exploration_factor and len(unvisited_nodes) > 2:
            best_score = -float('inf')
            for node in candidates:
                distance_score = (max(distance_matrix[current_node][node], 1) - distance_matrix[current_node][node]) / max(distance_matrix[current_node][node], 1)
                score = (1 - exploration_factor) * distance_score + exploration_factor * normalized_centrality[node]
                if score > best_score:
                    best_score = score
                    next_node = node
    else:
        next_node = nearest_node

    return next_node
