def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        avg_distance = sum(distance_matrix[current_node][node] for node in remaining_unvisited) / len(remaining_unvisited)
        temp = 1.0 / (1.0 + math.exp(-0.5 * len(unvisited_nodes)))

        if avg_distance > 0:
            normalized_ratio = (destination_distance / avg_distance) ** -1
            prob_destination = temp * normalized_ratio * 0.5
        else:
            prob_destination = 1.0

        prob_destination = min(prob_destination, 1.0)

        if random.random() < prob_destination:
            return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    return next_node
