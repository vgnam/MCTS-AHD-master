def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost_to_current = distance_matrix[current_node][node]
        cost_to_dest = distance_matrix[node][destination_node]
        combined_cost = cost_to_current + 0.7 * cost_to_dest
        candidates.append((node, combined_cost))

    candidates.sort(key=lambda x: x[1])
    min_cost = candidates[0][1]
    max_cost = candidates[-1][1]

    weighted_candidates = []
    for node, cost in candidates:
        normalized_cost = (cost - min_cost) / (max_cost - min_cost + 1e-10)
        weight = 1 - normalized_cost
        weighted_candidates.append((node, weight))

    total_weight = sum(weight for _, weight in weighted_candidates)
    rand_val = random.random() * total_weight

    cumulative_weight = 0
    for node, weight in weighted_candidates:
        cumulative_weight += weight
        if rand_val <= cumulative_weight:
            return node

    return next_node
