def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    max_dist = max(distances)
    threshold = max_dist * (0.5 + 0.5 * (len(unvisited_nodes) / len(distance_matrix)))

    candidates = []
    for node, dist in zip(unvisited_nodes, distances):
        if dist >= threshold:
            candidates.append((node, dist))

    if not candidates:
        candidates = list(zip(unvisited_nodes, distances))

    total_dist = sum(dist for _, dist in candidates)
    probabilities = [dist / total_dist for _, dist in candidates]
    next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]

    return next_node
