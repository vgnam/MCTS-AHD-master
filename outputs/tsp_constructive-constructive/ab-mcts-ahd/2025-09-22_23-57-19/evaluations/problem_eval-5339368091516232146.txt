def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    max_cost = max(distances)

    if len(unvisited_nodes) > 2:
        temperature = 1.0 / len(unvisited_nodes) if len(unvisited_nodes) > 5 else 0.5
        probabilities = []
        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            normalized_cost = (cost - min_cost) / (max_cost - min_cost + 1e-6)
            probabilities.append(math.exp(-normalized_cost / temperature))

        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]

        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = unvisited_nodes[0]

    return next_node
