def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        candidates.append((node, cost))

    candidates.sort(key=lambda x: x[1])
    best_node, best_cost = candidates[0]

    if len(unvisited_nodes) > 2:
        for node, cost in candidates[1:]:
            if cost > best_cost * 1.25:
                prob = 0.5 * (1 - (cost - best_cost) / (distance_matrix.max() - best_cost))
                if random.random() < prob:
                    best_node = node
                    best_cost = cost
                    break

    return next_node
