def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        candidates.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        temperature = len(unvisited_nodes) / len(distance_matrix)
        weights = []
        for node, cost in candidates:
            if node == next_node:
                weights.append(0.1)
            else:
                potential_cost = cost + distance_matrix[node][next_node]
                weight = (1 - temperature) * (1 / cost) + temperature * (1 / potential_cost)
                weights.append(weight)

        total_weight = sum(weights)
        probabilities = [w / total_weight for w in weights]
        selected_index = np.random.choice(len(candidates), p=probabilities)
        next_node = candidates[selected_index][0]

    return next_node
