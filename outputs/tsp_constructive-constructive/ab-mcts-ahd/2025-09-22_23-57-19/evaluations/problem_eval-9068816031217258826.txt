def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    # Dynamic scaling factor based on remaining nodes
    scaling_factor = 1.2 + (0.1 * (len(unvisited_nodes) / len(distance_matrix)))

    # Initial threshold
    threshold = avg_distance * scaling_factor

    # Find farthest node
    max_cost = -float('inf')
    farthest_node = None
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            farthest_node = node

    # Probabilistic selection: favor closer nodes if threshold is exceeded
    if max_cost > threshold:
        # Bias selection toward closer nodes
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-10) for node in unvisited_nodes]
        total_weight = sum(weights)
        probs = [w / total_weight for w in weights]
        next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    else:
        next_node = farthest_node

    return next_node
