def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < min_cost * 1.2:
                candidates.append((node, potential_cost))

        if candidates:
            if random.random() < 0.1:  # 10% chance to pick a random candidate
                next_node = random.choice(candidates)[0]
            else:
                next_node = min(candidates, key=lambda x: x[1])[0]

    return next_node
