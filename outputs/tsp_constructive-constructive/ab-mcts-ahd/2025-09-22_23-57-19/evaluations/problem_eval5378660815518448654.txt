def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = []
    nodes = []

    for node in unvisited_nodes:
        distances.append(distance_matrix[current_node][node])
        nodes.append(node)

    total_distance = sum(distances)
    probabilities = [1 - (d / total_distance) for d in distances]

    if sum(probabilities) == 0:
        probabilities = [1 / len(probabilities)] * len(probabilities)
    else:
        probabilities = [p / sum(probabilities) for p in probabilities]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
