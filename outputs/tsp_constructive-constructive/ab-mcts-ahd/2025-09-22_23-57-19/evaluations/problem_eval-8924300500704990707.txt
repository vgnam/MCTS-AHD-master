def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        max_cost = -float('inf')
        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            if cost > max_cost:
                max_cost = cost

        for node in unvisited_nodes:
            if node == next_node:
                continue
            distance_to_current = distance_matrix[current_node][node]
            proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
            static_weight = 0.7
            score = distance_to_current + (static_weight * proximity_to_dest)

            if score < distance_matrix[current_node][next_node] + (static_weight * 1 / (1 + distance_matrix[next_node][destination_node])) and distance_to_current < max_cost * 1.1:
                next_node = node
                break

    return next_node
