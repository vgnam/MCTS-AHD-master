def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=0.5):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    candidates = []
    base_savings = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        savings = base_savings - cost
        candidates.append((node, savings, cost))

    if not candidates:
        return unvisited_nodes.pop()

    candidates.sort(key=lambda x: -x[1])
    top_candidates = [c for c in candidates if c[1] >= candidates[0][1] * 0.8]

    if len(unvisited_nodes) > 2:
        for node, savings, cost in candidates:
            for next_node, _, _ in candidates:
                if node == next_node:
                    continue
                potential_savings = base_savings - cost - distance_matrix[node][next_node]
                if potential_savings > savings * 0.9:
                    top_candidates.append((node, potential_savings, cost))

    if not top_candidates:
        return candidates[0][0]

    probabilities = [math.exp(c[1] / temperature) for c in top_candidates]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected = random.choices(top_candidates, weights=probabilities, k=1)[0]
    return next_node
