import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    cost_to_distance_ratios = [
        distance_matrix[current_node][node] / (distance_matrix[current_node][node] + distance_matrix[node][destination_node])
        for node in unvisited_nodes
    ]
    max_ratio = max(cost_to_distance_ratios)

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            ratio = cost_to_distance_ratios[unvisited_nodes.index(node)]
            if (cost < min_cost * 1.5 or cost < avg_distance * 1.5) and ratio > max_ratio * 0.7:
                next_node = node
                break

    if next_node != destination_node and distance_matrix[current_node][next_node] > avg_distance * 1.5:
        if random.random() < 0.3:
            candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] < min_cost * 1.2]
            if candidates:
                next_node = random.choice(candidates)

    return next_node
