def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])

    total_unvisited = len(unvisited_nodes)
    dynamic_weight = 0.5 + 0.5 * (1 - (total_unvisited / (total_unvisited + 1)))

    max_centrality = max(centrality.values()) if centrality else 1
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    scores = []
    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        score = distance_to_current + (dynamic_weight * proximity_to_dest) + (1 - dynamic_weight) * normalized_centrality[node]
        scores.append(score)
        candidates.append(node)

    if not scores:
        return unvisited_nodes.pop()

    next_node = candidates[scores.index(min(scores))]

    if len(unvisited_nodes) > 3:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < distance_matrix[current_node][next_node] * 1.1:
                next_node = node
                break

    return next_node
