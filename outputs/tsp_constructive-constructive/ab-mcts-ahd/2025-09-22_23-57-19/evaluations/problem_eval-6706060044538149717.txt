def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1 + remaining_nodes)  # Dynamic temperature adjustment
    candidates = []
    total_weight = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + (1 - temperature) * heuristic
        weight = math.exp(-score / temperature)
        candidates.append((node, weight))
        total_weight += weight

    if not candidates:
        return unvisited_nodes.pop()

    # Random selection biased by weights
    rand_val = random.random() * total_weight
    cumulative_weight = 0.0
    for node, weight in candidates:
        cumulative_weight += weight
        if rand_val <= cumulative_weight:
            next_node = node
            break

    # With probability proportional to temperature, allow exploration
    if random.random() < temperature:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
            score = cost + (1 - temperature) * heuristic
            if score < (distance_matrix[current_node][next_node] + (1 - temperature) * heuristic) * 1.2:
                next_node = node
                break

    return next_node
