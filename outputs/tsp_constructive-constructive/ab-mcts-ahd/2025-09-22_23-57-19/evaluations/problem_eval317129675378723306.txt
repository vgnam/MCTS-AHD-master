def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    exploration_factor = (len(unvisited_nodes) / (len(unvisited_nodes) + 1)) ** 2

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    dynamic_threshold = avg_distance * (0.2 + 0.5 * exploration_factor)
    candidates = []

    for node in unvisited_nodes:
        if node == next_node:
            continue
        potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
        if potential_cost < min_cost + dynamic_threshold:
            candidates.append((node, potential_cost))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        selected_node, _ = candidates[0]
        return selected_node

    return next_node
