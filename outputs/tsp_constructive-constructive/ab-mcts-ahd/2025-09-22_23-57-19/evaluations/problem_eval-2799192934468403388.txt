def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    heuristic_values = {node: distance_matrix[current_node][node] * (1 + len(unvisited_nodes) / len(distance_matrix)) for node in unvisited_nodes}
    next_node = min(unvisited_nodes, key=lambda node: heuristic_values[node])

    if next_node is not None:
        return next_node

    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
