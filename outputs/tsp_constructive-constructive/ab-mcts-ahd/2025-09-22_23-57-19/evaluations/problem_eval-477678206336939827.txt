def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_cost_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        threshold = avg_distance * (1.2 + 0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= threshold]

        if candidates:
            if len(candidates) > 1:
                weights = [1 / distance_matrix[current_node][node] for node in candidates]
                next_node = random.choices(candidates, weights=weights, k=1)[0]
            else:
                next_node = candidates[0]
        else:
            next_node = min_cost_node
    else:
        next_node = min_cost_node

    return next_node
