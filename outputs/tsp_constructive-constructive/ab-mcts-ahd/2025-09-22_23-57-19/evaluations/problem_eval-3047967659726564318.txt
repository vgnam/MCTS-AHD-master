def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    phase_factor = 1 / (1 + math.exp(-5 * (len(unvisited_nodes) / total_nodes - 0.5)))

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    max_distance = max(distances)

    attractiveness_scores = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        normalized_cost = cost / max_distance
        normalized_centrality = centrality / sum(distance_matrix[node][0])
        attractiveness = (1 - phase_factor) * (1 - normalized_cost) + phase_factor * normalized_centrality + random.uniform(0, 0.1)
        attractiveness_scores.append(attractiveness)

    best_node = unvisited_nodes[attractiveness_scores.index(max(attractiveness_scores))]

    if len(unvisited_nodes) > 2 and random.random() < 0.2 * (1 - phase_factor):
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] < avg_distance * 1.2]
        if candidates:
            best_node = random.choice(candidates)

    return next_node
