import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    scaling_factor = math.log(len(unvisited_nodes) + 1)
    weighted_threshold = min_distance + (max_distance - min_distance) * (1.0 / scaling_factor)

    max_proximity = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        proximity = -distance_matrix[current_node][node] + 0.5 * (distance_matrix[current_node][node] / weighted_threshold)
        if proximity > max_proximity:
            max_proximity = proximity
            next_node = node

    return next_node
