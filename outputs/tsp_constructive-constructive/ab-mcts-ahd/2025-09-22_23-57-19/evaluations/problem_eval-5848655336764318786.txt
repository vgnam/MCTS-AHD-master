def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        phase_factor = 1.0 + 0.5 * (len(unvisited_nodes) / len(distance_matrix))
        prob_threshold = phase_factor * (avg_distance / (min_cost + 1e-6))

        candidates = []
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            prob = prob_threshold * (avg_distance / (cost + 1e-6))
            if prob > 1.0:
                candidates.append((node, prob))

        if candidates:
            candidates.sort(key=lambda x: -x[1])
            next_node = candidates[0][0]

    return next_node
