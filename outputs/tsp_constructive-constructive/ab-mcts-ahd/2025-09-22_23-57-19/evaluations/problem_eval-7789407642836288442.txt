def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    weight = 0.5 + (0.4 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        savings = distance_matrix[current_node][destination_node] - cost
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        score = savings + (weight * proximity_to_dest)

        if score > max_score:
            max_score = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_savings = (distance_matrix[current_node][destination_node] -
                               distance_matrix[current_node][node] -
                               distance_matrix[node][next_node])
            if potential_savings > max_score * 0.8:
                next_node = node
                break

    return next_node
