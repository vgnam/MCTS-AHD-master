def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    farthest_node = None
    max_distance = -float('inf')

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] > max_distance:
            max_distance = distance_matrix[current_node][node]
            farthest_node = node

    if farthest_node is None:
        min_distance = float('inf')
        next_node = None
        for node in unvisited_nodes:
            if distance_matrix[current_node][node] < min_distance:
                min_distance = distance_matrix[current_node][node]
                next_node = node
        return next_node

    proximity_weight = 0.3
    exploration_weight = 0.7

    scores = {}
    for node in unvisited_nodes:
        distance_to_farthest = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = (exploration_weight * distance_to_farthest) - (proximity_weight * distance_to_destination)
        scores[node] = score

    best_node = max(scores.items(), key=lambda x: x[1])[0]
    return next_node
