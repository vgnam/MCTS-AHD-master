def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_distance = min(distances)
    node_degrees = [sum(row) for row in distance_matrix] if distance_matrix else [0] * len(unvisited_nodes)

    weighted_scores = []
    for i, node in enumerate(unvisited_nodes):
        distance = distances[i]
        degree = node_degrees[node]
        distance_score = 1 / (distance + 1e-6)
        degree_score = degree / (sum(node_degrees) + 1e-6)
        weighted_score = 0.7 * distance_score + 0.3 * degree_score
        weighted_scores.append(weighted_score)

    next_node = unvisited_nodes[weighted_scores.index(max(weighted_scores))]

    if len(unvisited_nodes) > 2:
        threshold_factor = 1.2 + 0.1 * (len(unvisited_nodes) / len(distance_matrix))
        for i, node in enumerate(unvisited_nodes):
            if node == next_node:
                continue
            distance = distances[i]
            if distance < avg_distance * threshold_factor and distance < min_distance * 1.2:
                if random.random() < 0.3 * (1 - len(unvisited_nodes) / len(distance_matrix)):
                    next_node = node
                    break

    return next_node
