def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)

    if min_cost == 0:
        return unvisited_nodes[distances.index(min_cost)]

    threshold = min(avg_distance * 1.3, min_cost * 1.1)

    candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= threshold]

    if not candidates:
        candidates = unvisited_nodes

    centrality = {node: sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] > 0) for node in candidates}
    max_centrality = max(centrality.values())
    high_centrality_nodes = [node for node in candidates if centrality[node] == max_centrality]

    if len(high_centrality_nodes) == 1:
        return high_centrality_nodes[0]

    selected_node = min(high_centrality_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
