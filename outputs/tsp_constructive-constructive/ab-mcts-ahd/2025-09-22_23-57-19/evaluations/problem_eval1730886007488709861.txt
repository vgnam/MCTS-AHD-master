def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    # Calculate probabilities based on inverse distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    max_dist = max(distances)
    min_dist = min(distances)
    normalized_distances = [(max_dist - d + 1e-6) / (max_dist - min_dist + 1e-6) for d in distances]
    probabilities = [d / sum(normalized_distances) for d in normalized_distances]

    # Select node with probability proportional to inverse distance
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    # Dynamic threshold adjustment based on remaining nodes
    threshold_factor = 0.5 + 0.5 * (len(unvisited_nodes) / len(distance_matrix))
    for node in unvisited_nodes:
        if node == next_node:
            continue
        potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
        if potential_cost < distance_matrix[current_node][next_node] * threshold_factor:
            next_node = node
            break

    return next_node
