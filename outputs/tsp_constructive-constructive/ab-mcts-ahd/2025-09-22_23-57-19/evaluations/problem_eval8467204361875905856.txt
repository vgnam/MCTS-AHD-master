def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        total_unvisited = len(unvisited_nodes)
        dynamic_weight = 0.5 + 0.5 * (1 - (total_unvisited / (total_unvisited + 1)))
        threshold = max_cost * (1 + 0.1 * (total_unvisited / len(distance_matrix)))

        for node in unvisited_nodes:
            if node == next_node:
                continue
            distance_to_current = distance_matrix[current_node][node]
            proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
            score = distance_to_current + (dynamic_weight * proximity_to_dest)

            if score < threshold:
                next_node = node
                break

    return next_node
