def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_ratio = -1
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        total_cost = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        ratio = cost / (total_cost + 1e-10)  # Avoid division by zero
        if ratio > max_ratio:
            max_ratio = ratio
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2 and len(unvisited_nodes) % 3 == 0:  # 60% threshold
        max_far_cost = -1
        far_node = None
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost > max_far_cost:
                max_far_cost = cost
                far_node = node
        if far_node is not None:
            next_node = far_node

    return next_node
