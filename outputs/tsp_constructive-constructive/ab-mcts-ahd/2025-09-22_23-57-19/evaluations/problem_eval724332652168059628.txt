def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    harmonic_mean = len(distances) / sum(1 / d for d in distances if d > 0)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= harmonic_mean * 1.5 and cost <= min_cost * 1.2:
            candidates.append((node, cost))

    if candidates and len(unvisited_nodes) > 2:
        candidates.sort(key=lambda x: x[1])
        next_node = candidates[0][0]

    return next_node
