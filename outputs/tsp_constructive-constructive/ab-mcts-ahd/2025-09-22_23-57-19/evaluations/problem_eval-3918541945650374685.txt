def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])

    max_centrality = max(centrality.values()) if centrality else 1
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)

    max_cost = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        score = (1 - exploration_factor) * (cost / (max(cost, 1))) + exploration_factor * normalized_centrality[node]
        if score > max_cost:
            max_cost = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost > distance_matrix[current_node][next_node] * 0.7:
                next_node = node
                break

    return next_node
