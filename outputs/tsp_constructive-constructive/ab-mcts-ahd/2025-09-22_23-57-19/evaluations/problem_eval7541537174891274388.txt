def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    decay_factor = 0.9 ** (total_nodes - len(unvisited_nodes))

    nearest_node = unvisited_nodes[distances.index(min_cost)]
    exploration_threshold = avg_distance * (2.0 + remaining_ratio) * decay_factor

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= exploration_threshold:
            candidates.append((node, cost))

    if not candidates:
        return nearest_node

    if len(candidates) == 1:
        return candidates[0][0]

    selected_node, _ = candidates[0]
    for node, cost in candidates[1:]:
        if cost < distance_matrix[current_node][selected_node]:
            selected_node = node

    return next_node
