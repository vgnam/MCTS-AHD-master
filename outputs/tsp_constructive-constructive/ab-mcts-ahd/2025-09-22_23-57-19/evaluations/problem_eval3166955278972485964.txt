def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    farthest_node = None
    node_scores = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            farthest_node = node
        node_scores[node] = cost

    if farthest_node is None:
        return unvisited_nodes.pop()

    temperature = max(0.1, 1.0 - (1.0 / len(unvisited_nodes)))
    probabilities = []

    for node in unvisited_nodes:
        if node == farthest_node:
            prob = 0.7 * temperature + 0.3 * (1 - temperature)
        else:
            prob = 0.3 * (1 - temperature) + 0.7 * (max_cost - distance_matrix[current_node][node]) / (max_cost * 1.5)
        probabilities.append(prob)

    probabilities = [p / sum(probabilities) for p in probabilities]
    selected_node = np.random.choice(list(unvisited_nodes), p=probabilities)

    return next_node
