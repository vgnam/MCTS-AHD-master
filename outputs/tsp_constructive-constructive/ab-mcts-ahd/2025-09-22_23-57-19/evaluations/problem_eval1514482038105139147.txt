def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
        avg_distance = sum(distances) / len(distances)
        min_cost = min(distances)
        phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes

        degree_centrality = {}
        for node in unvisited_nodes:
            degree_centrality[node] = sum(1 for d in distance_matrix[node] if d > 0)

        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            centrality = degree_centrality[node] / (total_nodes - 1)
            weighted_score = cost + (1 - phase_factor) * (centrality / avg_distance)

            if cost < avg_distance * 1.3 and weighted_score < min_cost * 1.1:
                next_node = node
                break

    return next_node
