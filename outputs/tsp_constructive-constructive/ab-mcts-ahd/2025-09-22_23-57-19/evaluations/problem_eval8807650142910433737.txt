def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    temperature = max(0.1, 1.0 / (len(unvisited_nodes) ** 0.5))
    dynamic_weight = 0.7 if len(unvisited_nodes) > 3 else 0.3

    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        proximity = 1 / (1 + distance_matrix[node][destination_node]) if destination_node != node else 0
        score = (1 - dynamic_weight) * distance + dynamic_weight * (1 - 0.5 * proximity)
        scores.append((node, score))

    if not scores:
        return unvisited_nodes.pop()

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

    probabilities = [exp(-normalized_score / temperature) for _, normalized_score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < (distance_matrix[current_node][next_node] * 1.2):
                next_node = node
                break

    return next_node
