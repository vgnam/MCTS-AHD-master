def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) <= 2:
        return min_node

    exploration_prob = 1 / (1 + math.exp(-(len(unvisited_nodes) - len(distance_matrix)/2) / (len(distance_matrix)/10)))
    if random.random() < exploration_prob:
        threshold = 1.1 * min_cost + 0.9 * avg_distance * (len(unvisited_nodes) / len(distance_matrix))
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= threshold]
        if candidates:
            return random.choice(candidates)

    return next_node
