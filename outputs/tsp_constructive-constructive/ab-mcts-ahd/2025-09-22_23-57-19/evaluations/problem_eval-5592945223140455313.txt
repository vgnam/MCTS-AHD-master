import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)

    probabilities = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost == 0:
            weight = 0.0
        else:
            weight = (1.0 / cost) * (1.0 + (avg_distance / (cost + 1e-6)))

        if cost < avg_distance * 1.4 and cost < min_cost * 1.15:
            weight *= 1.5

        probabilities.append(weight)

    total_weight = sum(probabilities)
    if total_weight <= 0:
        return random.choice(unvisited_nodes)

    normalized_probs = [p / total_weight for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]

    return next_node
