def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    # Calculate weights for each node
    weights = []
    total_weight = 0.0
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Dynamic scaling factor based on remaining nodes
        scaling_factor = len(unvisited_nodes) / len(distance_matrix)
        # Sigmoid-like weighting to balance exploration and exploitation
        weight = (1 / (1 + math.exp(-distance * scaling_factor))) * (1 / (distance + 1e-6))
        weights.append(weight)
        total_weight += weight

    # Normalize weights
    normalized_weights = [w / total_weight for w in weights]

    # Select node based on weighted probability
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    # Optional: Add local search for better exploitation
    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            # Check if swapping to a closer node improves the path
            cost_diff = (distance_matrix[current_node][node] + distance_matrix[node][next_node]) - \
                       (distance_matrix[current_node][next_node] + distance_matrix[next_node][node])
            if cost_diff < 0:
                next_node = node
                break

    return next_node
