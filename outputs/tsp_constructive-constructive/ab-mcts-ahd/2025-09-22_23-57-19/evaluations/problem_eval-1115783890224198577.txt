def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None
    total_cost = 0
    count = 0

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        total_cost += cost
        count += 1
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        avg_cost = total_cost / count
        threshold = avg_cost * (1.0 + 0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        candidates = []

        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            potential_cost = cost + distance_matrix[node][next_node]
            candidates.append((node, cost, potential_cost))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            for node, cost, potential_cost in candidates:
                if cost <= threshold and potential_cost < min_cost * 1.3:
                    if random.random() < 0.3 * (1.0 - (len(unvisited_nodes) / len(distance_matrix))):
                        next_node = node
                        break

    return next_node
