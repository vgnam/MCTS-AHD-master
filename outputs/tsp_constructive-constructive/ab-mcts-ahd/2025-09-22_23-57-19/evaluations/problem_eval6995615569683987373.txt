def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None
    node_frequency = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        node_frequency[node] = node_frequency.get(node, 0) + 1

    if next_node is None:
        return unvisited_nodes.pop()

    threshold = 1.2 * avg_distance
    if min_cost > threshold and len(unvisited_nodes) > 2:
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= threshold]
        if candidates:
            candidates.sort(key=lambda x: node_frequency.get(x, 0))
            next_node = candidates[0]

    return next_node
