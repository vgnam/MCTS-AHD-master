def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    if len(unvisited_nodes) > 2:
        temperature = avg_distance * (len(unvisited_nodes) / len(distance_matrix))
        probabilities = [math.exp(-distance / temperature) for distance in distances]
        total_prob = sum(probabilities)
        normalized_probs = [p / total_prob for p in probabilities]
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
