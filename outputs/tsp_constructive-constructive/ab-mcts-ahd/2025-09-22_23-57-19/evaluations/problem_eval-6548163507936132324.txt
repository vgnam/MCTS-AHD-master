def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    if max_distance == 0:
        return unvisited_nodes.pop()

    weights = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        normalized_cost = (max_distance - cost) / (max_distance - min_distance) if max_distance != min_distance else 1.0
        weights.append(normalized_cost)

    total_weight = sum(weights)
    if total_weight == 0:
        return unvisited_nodes.pop()

    probabilities = [w / total_weight for w in weights]

    exploration_prob = 0.1 * (len(unvisited_nodes) / len(distance_matrix)) ** 2
    if random.random() < exploration_prob:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = unvisited_nodes[probabilities.index(max(probabilities))]

    return next_node
