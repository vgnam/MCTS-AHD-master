def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_unvisited = len(unvisited_nodes)
    remaining_distance_to_dest = distance_matrix[current_node][destination_node]

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_distance = min(distances)
    max_distance = max(distances)

    weighted_threshold = min_distance + (max_distance - min_distance) * (0.5 / total_unvisited)
    dynamic_weight = 0.5 + 0.5 * (1 - (total_unvisited / (total_unvisited + 1)))

    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        score = distance_to_current + (dynamic_weight * proximity_to_dest)

        if score <= weighted_threshold:
            candidates.append((node, score))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        return candidates[0][0]

    return next_node
