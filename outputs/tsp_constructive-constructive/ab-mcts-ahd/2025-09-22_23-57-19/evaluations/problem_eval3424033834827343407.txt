def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_cost = min(distances)
    avg_distance = sum(distances) / len(distances)
    exploration_factor = 1.0 + (1.0 / len(unvisited_nodes)) ** 0.5

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost + (avg_distance * exploration_factor):
            candidates.append((node, cost))

    if not candidates:
        return next((node for node in unvisited_nodes if distance_matrix[current_node][node] == min_cost), unvisited_nodes.pop())

    total_weight = sum(1 / cost for _, cost in candidates)
    rand_val = random.random() * total_weight
    cumulative_weight = 0.0

    for node, cost in candidates:
        cumulative_weight += 1 / cost
        if rand_val <= cumulative_weight:
            return node

    return next_node
