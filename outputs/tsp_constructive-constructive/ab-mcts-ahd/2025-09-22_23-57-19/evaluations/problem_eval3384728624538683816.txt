def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes}

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        best_score = -float('inf')
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            score = (1 - exploration_factor) * (min_cost - cost) / min_cost + exploration_factor * centrality[node] / max(centrality.values())
            if score > best_score and (cost < min_cost * 1.5 or cost < avg_distance * 1.3):
                best_score = score
                next_node = node

    return next_node
