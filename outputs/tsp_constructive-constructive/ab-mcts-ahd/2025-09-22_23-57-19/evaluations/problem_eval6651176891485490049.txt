def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_cost = min(distances)
    max_cost = max(distances)

    if max_cost == min_cost:
        return unvisited_nodes.pop()

    probabilities = [(max_cost - distance + 1) / (max_cost - min_cost + 1) for distance in distances]
    probabilities = [p / sum(probabilities) for p in probabilities]

    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]
    return next_node
