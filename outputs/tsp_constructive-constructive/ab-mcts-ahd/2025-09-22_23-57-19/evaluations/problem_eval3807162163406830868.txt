def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    # Calculate weights based on distance to current node and potential to reach destination
    weights = []
    for node in unvisited_nodes:
        dist_to_current = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]
        weight = (dist_to_current * 0.3) + (dist_to_dest * 0.7)  # More emphasis on destination proximity
        weights.append(weight)

    # Normalize weights to probabilities
    total_weight = sum(weights)
    if total_weight == 0:
        return unvisited_nodes.pop()

    probabilities = [w / total_weight for w in weights]

    # Dynamically adjust threshold based on remaining unvisited nodes
    threshold = 0.75 if len(unvisited_nodes) > 3 else 0.9

    # Select node with highest probability, but allow occasional exploration
    if random.random() < threshold:
        next_node = unvisited_nodes[probabilities.index(max(probabilities))]
    else:
        # Select a node with lower probability to encourage exploration
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
