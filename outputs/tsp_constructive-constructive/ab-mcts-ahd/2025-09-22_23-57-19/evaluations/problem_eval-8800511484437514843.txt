def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    temperature = len(unvisited_nodes) / len(distance_matrix)  # Decreases as progress increases

    candidates = []
    penalties = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if node == destination_node:
            penalties[node] = -10  # Strong preference for destination
        else:
            penalties[node] = (cost - min_cost) * (1 + temperature)  # Higher penalty with higher temperature

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * (1 + temperature * 0.5):
            candidates.append((node, cost + penalties[node]))

    if not candidates:
        candidates = [(node, distance_matrix[current_node][node] + penalties[node]) for node in unvisited_nodes]

    candidates.sort(key=lambda x: x[1])
    return next_node
