def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.4 + 0.6 * (1 - (remaining_nodes / (remaining_nodes + 2)))

    visit_frequency = {node: 0 for node in unvisited_nodes}
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        novelty_factor = 1 / (1 + visit_frequency[node])
        score = distance + dynamic_weight * heuristic + 0.2 * novelty_factor

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < min_score * 1.15:
                next_node = node
                break

    visit_frequency[next_node] += 1
    return next_node
