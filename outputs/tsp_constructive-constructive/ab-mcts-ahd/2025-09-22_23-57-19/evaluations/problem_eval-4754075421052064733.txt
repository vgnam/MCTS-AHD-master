def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)
    dynamic_weight = 0.5 if len(unvisited_nodes) > 2 else 0.1
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 5)

    scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        proximity = 1 / (1 + distance_matrix[node][destination_node]) if destination_node != node else 0
        score = (1 - exploration_factor) * distance + exploration_factor * (1 - 0.3 * proximity) + dynamic_weight * proximity
        scores.append((node, score))
        total_score += score

    if not scores:
        return unvisited_nodes.pop()

    probabilities = []
    for node, score in scores:
        prob = (1 - score / total_score) * (1 - temperature) + temperature * (1 / len(unvisited_nodes))
        probabilities.append((node, prob))

    next_node = None
    cumulative_prob = 0.0
    rand_val = random.random()

    for node, prob in probabilities:
        cumulative_prob += prob
        if rand_val <= cumulative_prob:
            next_node = node
            break

    if next_node is None:
        next_node = max(probabilities, key=lambda x: x[1])[0]

    if len(unvisited_nodes) > 2:
        for node, _ in scores:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < min(s for _, s in scores) * 1.1:
                next_node = node
                break

    return next_node
