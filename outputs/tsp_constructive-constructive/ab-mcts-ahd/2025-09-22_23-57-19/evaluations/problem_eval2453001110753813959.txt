def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
    phase_weight = 0.3 + 0.7 * phase_factor

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None
    node_scores = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        hub_potential = sum(distance_matrix[node]) / (total_nodes - 1)
        novelty_score = (max(distance_matrix[node]) - min(distance_matrix[node])) / avg_distance
        weighted_score = (1 - phase_weight) * cost + phase_weight * (0.7 * (hub_potential / avg_distance) + 0.3 * novelty_score)

        node_scores[node] = weighted_score

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if len(unvisited_nodes) > 2:
        radius = 1.0 + 0.5 * phase_factor
        candidate_nodes = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= radius * min_cost]

        if candidate_nodes:
            candidate_scores = {node: node_scores[node] for node in candidate_nodes}
            next_node = min(candidate_scores, key=candidate_scores.get)

    return next_node
