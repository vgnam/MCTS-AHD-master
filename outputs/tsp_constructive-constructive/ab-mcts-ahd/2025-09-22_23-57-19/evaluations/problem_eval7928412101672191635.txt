def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_index = distances.index(min_cost)
    next_node = unvisited_nodes[min_index]

    if len(unvisited_nodes) > 2:
        threshold = min_cost * (1.1 + 0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= threshold]
        if len(candidates) > 1:
            next_node = min(candidates, key=lambda x: distance_matrix[current_node][x] + distance_matrix[x][destination_node])

    return next_node
