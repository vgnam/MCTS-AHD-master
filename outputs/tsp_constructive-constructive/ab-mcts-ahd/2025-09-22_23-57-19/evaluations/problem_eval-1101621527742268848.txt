def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    distances = []
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        distances.append(distance_matrix[current_node][node])

    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < avg_distance * 1.4 and cost < min_cost * 1.2 and centrality[node] > centrality.get(next_node, 0):
                next_node = node
                break

    return next_node
