def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances) if distances else 0
    min_cost = min(distances) if distances else 0

    threshold_factor = max(1.1, 1.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))))

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        score = (1 - (cost / (min_cost + 1e-6))) + (proximity_to_dest * 0.5)

        if cost <= threshold_factor * min_cost and score > best_score:
            best_score = score
            next_node = node

    if next_node is None:
        next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])

    return next_node
