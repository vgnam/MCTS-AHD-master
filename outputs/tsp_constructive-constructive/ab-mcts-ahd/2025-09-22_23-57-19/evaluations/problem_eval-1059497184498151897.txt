def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    unvisited_list = list(unvisited_nodes)
    distances = [distance_matrix[current_node][node] for node in unvisited_list]

    total_distance = sum(distances)
    if total_distance == 0:
        return unvisited_list[0]

    probabilities = [(1 / (d + 1e-6)) / total_distance for d in distances]
    threshold = 1.0 / (len(unvisited_nodes) ** 0.5)

    selected_index = -1
    for i, prob in enumerate(probabilities):
        if prob >= threshold:
            selected_index = i
            break

    if selected_index == -1:
        selected_index = np.argmax(probabilities)

    return next_node
