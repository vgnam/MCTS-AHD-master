def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)
    avg_dist = sum(distances) / len(distances)

    weights = []
    for dist in distances:
        if max_dist == min_dist:
            weight = 1.0
        else:
            normalized_dist = (dist - min_dist) / (max_dist - min_dist)
            weight = 1.0 - normalized_dist
        weights.append(weight)

    total_weight = sum(weights)
    if total_weight == 0:
        weights = [1.0 / len(weights)] * len(weights)
    else:
        weights = [w / total_weight for w in weights]

    exploration_prob = 0.1 if len(unvisited_nodes) > 3 else 0.3
    if random.random() < exploration_prob:
        next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]
    else:
        next_node = unvisited_nodes[distances.index(min_dist)]

    return next_node
