def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    total_unvisited = len(unvisited_nodes)
    remaining_distance_to_dest = distance_matrix[current_node][destination_node]
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = (max_distance - distance_matrix[node][destination_node]) / max_distance
        dynamic_weight = 0.5 * (1 - (total_unvisited / (total_unvisited + 1))**2)
        score = (1 - dynamic_weight) * distance_to_current + dynamic_weight * (1 - proximity_to_dest)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
