def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = list(unvisited_nodes)
    costs = [distance_matrix[current_node][node] for node in candidates]

    max_cost = max(costs)
    max_index = costs.index(max_cost)
    next_node = candidates[max_index]

    if len(unvisited_nodes) > 2:
        threshold = max_cost * (0.5 + 0.4 * (1 - len(unvisited_nodes) / len(candidates)))
        for i, node in enumerate(candidates):
            if node == next_node:
                continue
            potential_cost = costs[i] + distance_matrix[node][next_node]
            if potential_cost > threshold and random.random() < 0.3:
                next_node = node
                break

    return next_node
