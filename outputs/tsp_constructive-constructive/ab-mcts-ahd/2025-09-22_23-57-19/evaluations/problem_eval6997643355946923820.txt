def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    max_distance = max(distances)
    min_distance = min(distances)

    # Calculate distance entropy (normalized)
    distance_entropy = sum((d - min_distance) / (max_distance - min_distance + 1e-10) * (np.log((d - min_distance) / (max_distance - min_distance + 1e-10) + 1e-10) + 1) for d in distances) / len(distances)

    # Farthest-first candidate
    farthest_node = unvisited_nodes[distances.index(max_distance)]

    # Dynamic probabilistic rebalancing
    rebalance_prob = min(0.5, (max_distance - avg_distance) / (max_distance + 1e-10)) * (1 - distance_entropy)

    if len(unvisited_nodes) > 2 and np.random.rand() < rebalance_prob:
        candidates = [node for node in unvisited_nodes if node != farthest_node]
        candidate_distances = [distance_matrix[current_node][node] for node in candidates]
        weighted_probs = [1 / (d + 1e-10) for d in candidate_distances]
        weighted_probs = [p / sum(weighted_probs) for p in weighted_probs]
        next_node = np.random.choice(candidates, p=weighted_probs)
    else:
        next_node = farthest_node

    return next_node
