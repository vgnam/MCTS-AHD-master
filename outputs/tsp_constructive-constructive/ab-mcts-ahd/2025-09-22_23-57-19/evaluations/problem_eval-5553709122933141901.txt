def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    candidates = []
    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        candidates.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        avg_cost = sum(cost for _, cost in candidates) / len(candidates)
        threshold = avg_cost * 1.2

        for node, cost in candidates:
            if node == next_node:
                continue
            potential_cost = cost + distance_matrix[node][next_node]
            if potential_cost < threshold:
                if random.random() < 0.7 or cost < min_cost * 1.1:
                    next_node = node
                    break

    return next_node
