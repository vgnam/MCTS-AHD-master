def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None
    costs = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        costs.append((node, cost))
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 1:
        threshold = max(1.0, min_cost * (1.0 + 0.2 * (len(unvisited_nodes) / len(distance_matrix))))
        candidates = [node for node, cost in costs if cost <= threshold]
        if candidates:
            probabilities = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in candidates]
            total_prob = sum(probabilities)
            probabilities = [p / total_prob for p in probabilities]
            next_node = np.random.choice(candidates, p=probabilities)

    return next_node
