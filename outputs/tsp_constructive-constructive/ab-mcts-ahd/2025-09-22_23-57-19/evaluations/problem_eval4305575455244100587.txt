def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes
    weight_proximity = 0.6 * (1 - remaining_ratio)
    weight_destination = 0.4 * (1 + remaining_ratio)

    scores = {}
    for node in unvisited_nodes:
        dist_to_node = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]
        penalty = max(0, (dist_to_dest - 2 * distance_matrix[current_node][destination_node]) / distance_matrix[current_node][destination_node])
        score = (dist_to_node * weight_proximity) + (dist_to_dest * weight_destination * (1 - penalty))
        scores[node] = score

    if scores:
        next_node = min(scores, key=scores.get)
        return next_node

    return next_node
