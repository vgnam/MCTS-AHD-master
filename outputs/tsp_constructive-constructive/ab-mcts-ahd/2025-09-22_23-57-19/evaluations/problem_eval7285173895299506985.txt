import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    distance_scores = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        distance_scores[node] = distance_matrix[current_node][node]

    exploration_weight = math.exp(-len(unvisited_nodes) / 10.0)
    min_distance = min(distance_scores.values())
    max_distance = max(distance_scores.values())
    max_centrality = max(centrality.values()) if centrality else 0

    probabilities = {}
    for node in unvisited_nodes:
        distance_prob = 1.0 - (distance_scores[node] - min_distance) / (max_distance - min_distance + 1e-6)
        centrality_prob = centrality[node] / (max_centrality + 1e-6)
        probabilities[node] = (1 - exploration_weight) * distance_prob + exploration_weight * centrality_prob

    next_node = random.choices(list(probabilities.keys()), weights=list(probabilities.values()), k=1)[0]
    return next_node
