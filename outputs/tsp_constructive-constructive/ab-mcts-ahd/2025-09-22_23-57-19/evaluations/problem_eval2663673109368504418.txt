def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_score = float('-inf')
    next_node = None
    threshold = 0.75 if len(unvisited_nodes) > 5 else 0.5

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]
        score = current_dist / (remaining_dist + 1e-10)  # Avoid division by zero

        if score > max_score:
            max_score = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            current_dist = distance_matrix[current_node][node]
            remaining_dist = distance_matrix[node][destination_node]
            potential_score = current_dist / (remaining_dist + 1e-10)

            if potential_score > max_score * threshold:
                next_node = node
                break

    return next_node
