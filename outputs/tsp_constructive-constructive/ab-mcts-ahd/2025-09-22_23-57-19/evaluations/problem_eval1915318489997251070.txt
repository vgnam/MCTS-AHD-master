def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    centrality = {}
    distance_scores = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        distance_scores[node] = distance_matrix[current_node][node]

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)
    weight_distance = 1.0 / (1.0 + math.exp(-10 * (exploration_factor - 0.5)))
    weight_centrality = 1.0 - weight_distance

    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_centrality = max(centrality.values()) if centrality else 1

    normalized_distance = {node: (max_distance - dist) / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    candidates = []
    for node in unvisited_nodes:
        score = weight_distance * normalized_distance[node] + weight_centrality * normalized_centrality[node]
        candidates.append((node, score))

    candidates.sort(key=lambda x: -x[1])
    top_candidates = candidates[:max(1, len(candidates) // 3)]

    if random.random() < 0.1 and len(top_candidates) > 1:
        next_node = random.choice(top_candidates)[0]
    else:
        next_node = top_candidates[0][0]

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < distance_matrix[current_node][next_node] * 1.1:
                next_node = node
                break

    return next_node
