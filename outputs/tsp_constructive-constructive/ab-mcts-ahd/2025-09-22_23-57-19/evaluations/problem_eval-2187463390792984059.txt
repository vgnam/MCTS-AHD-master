def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Calculate remaining path length estimate
    remaining_length = len(unvisited_nodes)
    bias_weight = 1 / (1 + math.exp(-0.5 * (remaining_length - 5)))

    # Calculate local density for each node
    density = {}
    for node in unvisited_nodes:
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        density[node] = 1 / (1 + sum(distances) / len(distances)) if distances else 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        score = distance_to_current * (1 - bias_weight * proximity_to_dest) + (1 - density[node]) * 0.2

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
