def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    proximity_scores = {}
    distance_scores = {}
    for node in unvisited_nodes:
        proximity_scores[node] = 1 / (1 + distance_matrix[node][destination_node])
        distance_scores[node] = distance_matrix[current_node][node]

    exploration_factor = 0.3

    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_proximity = max(proximity_scores.values()) if proximity_scores else 1

    normalized_distance = {node: dist / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_proximity = {node: prox / max_proximity if max_proximity else 0 for node, prox in proximity_scores.items()}

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        score = (1 - exploration_factor) * normalized_distance[node] + exploration_factor * normalized_proximity[node]

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
