def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_distance = min(distances)
    max_distance = max(distances)

    dest_distance = distance_matrix[current_node][destination_node]
    scaling_factor = (dest_distance / avg_distance) if avg_distance != 0 else 1.0

    weighted_threshold = min_distance + (max_distance - min_distance) * (0.5 / (len(unvisited_nodes) * scaling_factor))

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= weighted_threshold:
            candidates.append((node, cost))

    if candidates:
        total_cost = sum(cost for _, cost in candidates)
        probabilities = [(1 - cost / total_cost) for _, cost in candidates] if total_cost != 0 else [1.0 / len(candidates)] * len(candidates)
        selected_index = max(range(len(probabilities)), key=lambda i: probabilities[i])
        return candidates[selected_index][0]

    return next_node
