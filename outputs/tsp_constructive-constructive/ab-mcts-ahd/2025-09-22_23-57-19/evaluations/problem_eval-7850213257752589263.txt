def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        candidates.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = min_cost * (1.0 + 0.4 * (len(unvisited_nodes) / len(distance_matrix)))
        for node, cost in candidates:
            if node == next_node:
                continue
            if cost < threshold:
                candidates.append((node, cost))

        if candidates:
            probabilities = [1.0 / (1.0 + cost) for _, cost in candidates]
            total_prob = sum(probabilities)
            normalized_probs = [p / total_prob for p in probabilities]
            next_node = random.choices([node for node, _ in candidates], weights=normalized_probs, k=1)[0]

    return next_node
