def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        avg_distance = sum(distance_matrix[current_node][node] for node in remaining_unvisited) / len(remaining_unvisited)
        temp = max(0.1, 1.0 - (1.0 / (1.0 + len(unvisited_nodes))))

        proximity_to_dest = 1 / (1 + destination_distance)
        dynamic_weight = 0.5 + 0.5 * (1 - destination_distance / (destination_distance + 1))

        if avg_distance > 0:
            normalized_ratio = (destination_distance / avg_distance) ** -1
            prob_destination = temp * (dynamic_weight * proximity_to_dest + normalized_ratio)
        else:
            prob_destination = 1.0

        prob_destination = min(prob_destination, 1.0)

        if prob_destination > temp:
            return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        dynamic_weight = 0.5 + 0.5 * (1 - distance_matrix[node][destination_node] / (distance_matrix[node][destination_node] + 1))
        score = distance_to_current + (dynamic_weight * proximity_to_dest)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
