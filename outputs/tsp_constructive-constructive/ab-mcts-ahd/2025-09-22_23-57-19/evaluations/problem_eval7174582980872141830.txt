def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    weighted_scores = {}
    max_score = -float('inf')
    best_node = None

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        weighted_score = (distance_to_node * 0.6) + (distance_to_dest * 0.4)
        weighted_scores[node] = weighted_score

        if weighted_score > max_score:
            max_score = weighted_score
            best_node = node

    if best_node is not None:
        return best_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    return next_node
