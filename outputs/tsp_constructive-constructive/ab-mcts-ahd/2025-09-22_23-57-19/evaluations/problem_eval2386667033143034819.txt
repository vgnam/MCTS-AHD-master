def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_distance = min(distances)
    max_distance = max(distances)

    exploration_factor = 0.3 + 0.7 * (1 / len(unvisited_nodes)) ** 0.5
    weighted_threshold = min_distance + (max_distance - min_distance) * exploration_factor

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= weighted_threshold:
            candidates.append((node, cost))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        selected_node, _ = candidates[0]
        return selected_node

    return next_node
