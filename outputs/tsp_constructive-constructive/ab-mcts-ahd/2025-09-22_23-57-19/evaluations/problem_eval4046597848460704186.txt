def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate centrality scores for each unvisited node
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])

    # Calculate proximity potential: sum of distances to other unvisited nodes
    proximity_potential = {}
    for node in unvisited_nodes:
        proximity_potential[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

    # Dynamic weight factors based on remaining nodes and destination proximity
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    distance_weight = 0.3 + 0.7 * (remaining_nodes / total_nodes)
    centrality_weight = 0.2 + 0.3 * (remaining_nodes / total_nodes)
    proximity_weight = 0.5 - 0.3 * (remaining_nodes / total_nodes)

    # Evaluate each node based on weighted criteria
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        score = (distance_weight * (1 / (distance + 1e-6))) + \
                (centrality_weight * centrality[node]) + \
                (proximity_weight * proximity_potential[node])

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
