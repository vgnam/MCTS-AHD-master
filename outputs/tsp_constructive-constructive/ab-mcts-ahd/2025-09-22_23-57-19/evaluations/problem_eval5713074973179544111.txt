def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    dest_distance = distance_matrix[current_node][destination_node] if destination_node in unvisited_nodes else float('inf')

    exploration_prob = min(1.0, (dest_distance / avg_distance) * 0.5) if avg_distance > 0 else 1.0

    if random.random() < exploration_prob:
        next_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
