def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    exploration_factor = 1.0 / (len(unvisited_nodes) ** 2)
    dynamic_weight = 0.3 if len(unvisited_nodes) > 3 else 0.7

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        proximity = 1 / (1 + distance_matrix[node][destination_node]) if destination_node != node else 0
        score = (exploration_factor) * distance + (1 - exploration_factor) * (1 - 0.5 * proximity) + dynamic_weight * (1 - proximity)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 3:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < min_score * 0.8:
                next_node = node
                break

    return next_node
