def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            next_cost = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            total_cost = cost + next_cost
        else:
            total_cost = cost
        candidates.append((node, cost, total_cost))

    candidates.sort(key=lambda x: x[2], reverse=True)
    best_node, best_cost, best_total = candidates[0]

    if len(unvisited_nodes) > 2:
        threshold = 1.0 / (1.0 + 0.1 * len(unvisited_nodes))
        for node, cost, total_cost in candidates[1:]:
            if total_cost >= threshold * best_total:
                if random.random() < 0.3:
                    best_node = node
                    break

    return next_node
