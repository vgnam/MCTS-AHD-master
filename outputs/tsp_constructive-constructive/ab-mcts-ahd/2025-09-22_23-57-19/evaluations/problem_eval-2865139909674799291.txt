def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    candidates = []
    weights = []

    for node, cost in zip(unvisited_nodes, distances):
        if cost <= min_cost * 1.2 or cost <= avg_distance * 1.2:
            candidates.append(node)
            weights.append(1 / (cost + 1e-6))  # Avoid division by zero

    if not candidates:
        return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]

    return next_node
