def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    dynamic_threshold = avg_distance * (1.1 + 0.2 * phase_factor)

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        weighted_score = cost + (1 - phase_factor) * (centrality / avg_distance)

        if cost <= dynamic_threshold:
            candidates.append((node, weighted_score, cost))

    if not candidates:
        candidates = [(node, weighted_score, cost) for node, weighted_score, cost in zip(unvisited_nodes, [0]*len(unvisited_nodes), distances)]

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:max(1, len(candidates)//2)]

    if phase_factor < 0.5:
        selected = min(top_candidates, key=lambda x: x[2])
    else:
        selected = min(top_candidates, key=lambda x: x[1])

    return next_node
