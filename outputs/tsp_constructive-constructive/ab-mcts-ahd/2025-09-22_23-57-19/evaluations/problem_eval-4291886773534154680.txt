def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)

    temperature = max(1.0, len(unvisited_nodes) / 10.0)
    scores = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        dest_cost = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else 0
        score = (1.0 / (cost + 1e-6)) + (0.5 / (dest_cost + 1e-6)) + (temperature * (avg_distance - cost) / (avg_distance + 1e-6))
        scores.append((score, node))

    scores.sort(reverse=True, key=lambda x: x[0])
    return next_node
