def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)

    max_distance = max(distances) if distances else 1
    max_centrality = max(centrality.values()) if centrality else 1

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        normalized_distance = (max_distance - distance_matrix[current_node][node]) / max_distance if max_distance else 0
        normalized_centrality = centrality[node] / max_centrality if max_centrality else 0
        score = (1 - exploration_factor) * normalized_distance + exploration_factor * normalized_centrality

        if score > best_score:
            best_score = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < avg_distance * 1.3 and cost < distance_matrix[current_node][next_node] * 1.1:
                next_node = node
                break

    return next_node
