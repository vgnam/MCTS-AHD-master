def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    max_distance = max(distances)
    min_distance = min(distances)

    farthest_node = unvisited_nodes[distances.index(max_distance)]
    nearest_node = unvisited_nodes[distances.index(min_distance)]

    dynamic_threshold = avg_distance * 0.8 + (max_distance - min_distance) * 0.2

    if max_distance > dynamic_threshold:
        next_node = farthest_node
    else:
        next_node = nearest_node

    if len(unvisited_nodes) > 2:
        penalty = 0.1 * (len(unvisited_nodes) - 1)
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < dynamic_threshold * (1 - penalty):
                next_node = node
                break

    return next_node
