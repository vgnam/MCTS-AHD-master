def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        proximity_to_dest = 1 / (1 + distance_to_dest)

        # Centrality factor: inverse of average distance to all nodes
        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
        centrality = 1 / (1 + avg_distance)

        # Dynamic weight: balance between centrality and directional bias
        weight = 0.5 * centrality + 0.5 * proximity_to_dest

        # Score combines distance and weighted factor
        score = distance_to_current * (1 - 0.4 * weight)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
