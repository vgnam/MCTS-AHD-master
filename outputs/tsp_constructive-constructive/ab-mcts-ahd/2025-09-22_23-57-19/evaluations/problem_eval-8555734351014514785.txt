import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    if min_distance == max_distance:
        return random.choice(unvisited_nodes)

    probabilities = []
    total_weight = 0.0

    for dist in distances:
        weight = 1.0 / (dist + 1e-10)
        probabilities.append(weight)
        total_weight += weight

    probabilities = [p / total_weight for p in probabilities]

    threshold = min_distance + (max_distance - min_distance) * (0.1 + 0.9 * (len(unvisited_nodes) / len(distance_matrix)))

    candidates = []
    for node, dist in zip(unvisited_nodes, distances):
        if dist <= threshold:
            candidates.append(node)

    if candidates:
        selected_node = random.choices(candidates, k=1)[0]
    else:
        selected_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
