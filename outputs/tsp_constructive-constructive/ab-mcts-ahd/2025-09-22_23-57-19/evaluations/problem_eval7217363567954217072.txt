def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        avg_distance = sum(distance_matrix[current_node][node] for node in remaining_unvisited) / len(remaining_unvisited)
        normalized_distance = destination_distance / avg_distance if avg_distance > 0 else 1.0
        weight = 0.7 * (1 - normalized_distance) + 0.3 * (0.5 + 0.5 * (1 - normalized_distance))

        if weight > 0.6 and random.random() < weight:
            return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    return next_node
