def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)))

    scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        degree_penalty = len([n for n in unvisited_nodes if n != node and distance_matrix[node][n] < distance * 1.5])
        score = distance + (1 - temperature) * heuristic - degree_penalty
        scores.append((node, score))
        total_score += score

    if not scores:
        return unvisited_nodes.pop()

    probabilities = [score / total_score for (node, score) in scores]
    next_node = random.choices([node for (node, score) in scores], weights=probabilities, k=1)[0]

    if remaining_nodes > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]) * 1.2:
                next_node = node
                break

    return next_node
