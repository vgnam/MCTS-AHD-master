def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    max_cost = max(distances)

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= min_cost * 1.2 or cost <= avg_distance * 1.2:
            candidates.append((node, cost))

    if not candidates:
        candidates = [(node, distance_matrix[current_node][node]) for node in unvisited_nodes]

    normalized_costs = [(node, (cost - min_cost) / (max_cost - min_cost + 1e-10)) for node, cost in candidates]
    total_weight = sum(1 - normalized_cost for _, normalized_cost in normalized_costs)
    rand_val = random.random() * total_weight
    cumulative = 0

    for node, normalized_cost in normalized_costs:
        cumulative += 1 - normalized_cost
        if rand_val <= cumulative:
            return node

    return next_node
