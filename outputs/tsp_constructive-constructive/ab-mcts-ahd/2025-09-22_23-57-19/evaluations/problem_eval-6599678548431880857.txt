importance to higher centrality priority as progress continues, ensuring a balance between greedy and global connectivity choices.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))  # Dynamic weight adjustment
    centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes}
    max_centrality = max(centrality.values()) if centrality else 1
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = normalized_centrality[node]
        score = distance + weight * heuristic

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
