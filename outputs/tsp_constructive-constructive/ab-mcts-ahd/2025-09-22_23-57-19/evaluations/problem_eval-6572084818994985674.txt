def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    best_node = None
    threshold = 1.3

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            best_node = node

    if best_node is None:
        return unvisited_nodes.pop()

    for node in unvisited_nodes:
        if node == best_node:
            continue
        potential_cost = distance_matrix[current_node][node] + distance_matrix[node][best_node]
        if potential_cost < min_cost * threshold:
            best_node = node
            break

    return next_node
