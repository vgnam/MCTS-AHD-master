def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    node_scores = {}
    max_cost = -float('inf')
    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        degree = sum(1 for val in distance_matrix[node] if val > 0)
        novelty = 1.0 / (degree + 1) if degree > 0 else 1.0
        score = cost * novelty

        node_scores[node] = score
        if cost > max_cost:
            max_cost = cost
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    threshold = max_cost * 1.1
    candidate_nodes = [node for node in unvisited_nodes if node_scores[node] < threshold]

    if candidate_nodes:
        next_node = min(candidate_nodes, key=lambda node: node_scores[node])

    return next_node
