def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_distance = float('inf')
    next_node = None
    centrality = {}

    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)
    max_centrality = max(centrality.values()) if centrality else 1
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            if exploration_factor * normalized_centrality[node] > 0.5 and distance_matrix[current_node][node] < 1.2 * min_distance:
                next_node = node
                break

    return next_node
