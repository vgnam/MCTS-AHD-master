def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    avg_distance = sum(distances) / len(distances)

    threshold = min_distance + (avg_distance - min_distance) * (1 - 0.5 ** (1 / len(unvisited_nodes)))

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= threshold:
            candidates.append(node)

    if not candidates:
        candidates = unvisited_nodes.copy()

    if len(candidates) > 1:
        probabilities = [1 / (distance_matrix[current_node][node] + 1e-6) for node in candidates]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = np.random.choice(candidates, p=probabilities)
    else:
        next_node = candidates[0]

    return next_node
