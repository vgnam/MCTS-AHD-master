def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_distance = min(distances)
    max_distance = max(distances)

    # Dynamic threshold based on tour progress
    progress_ratio = (len(unvisited_nodes) / len(distance_matrix)) if distance_matrix else 0.5
    dynamic_threshold = min_distance + (max_distance - min_distance) * progress_ratio

    # Probabilistic escape mechanism
    escape_probability = 1 - (len(unvisited_nodes) / len(distance_matrix)) if distance_matrix else 0.2
    should_escape = random.random() < escape_probability

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2 and (should_escape or min_cost > dynamic_threshold):
        # Select a node within 1.5x average or 1.2x min, but prioritize those closer to dynamic threshold
        candidates = [node for node in unvisited_nodes if node != next_node]
        if candidates:
            candidate_costs = [distance_matrix[current_node][node] for node in candidates]
            # Weighted selection: prioritize nodes closer to dynamic threshold
            weights = [1 / (abs(dynamic_threshold - cost) + 1e-6) for cost in candidate_costs]
            next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
