def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    candidate_nodes = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            candidate_nodes = [node]
        elif cost == max_cost:
            candidate_nodes.append(node)

    if len(candidate_nodes) == 1:
        next_node = candidate_nodes[0]
    else:
        avg_cost = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        threshold = avg_cost * 0.8
        filtered_nodes = [node for node in candidate_nodes if distance_matrix[current_node][node] >= threshold]
        if filtered_nodes:
            next_node = filtered_nodes[0]
        else:
            next_node = candidate_nodes[0]

    if destination_node != next_node and len(unvisited_nodes) > 2:
        current_path_cost = distance_matrix[current_node][next_node]
        destination_cost = distance_matrix[current_node][destination_node]
        if destination_cost <= current_path_cost * 1.2:
            next_node = destination_node

    return next_node
