def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_ratio = len(unvisited_nodes) / total_nodes
    temp = max(0.1, 0.5 * (1.0 - remaining_ratio))

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        min_distance = min(distance_matrix[current_node][node] for node in remaining_unvisited)
        max_distance = max(distance_matrix[current_node][node] for node in remaining_unvisited)

        if max_distance > min_distance:
            normalized_ratio = (destination_distance - min_distance) / (max_distance - min_distance)
            prob_destination = temp * (1.0 - normalized_ratio)
        else:
            prob_destination = 1.0

        prob_destination = min(prob_destination, 1.0)

        if prob_destination > temp:
            return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    return next_node
