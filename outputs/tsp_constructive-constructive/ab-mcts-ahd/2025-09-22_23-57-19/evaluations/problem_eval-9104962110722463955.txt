def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_index = distances.index(min_cost)
    next_node = unvisited_nodes[min_index]

    if len(unvisited_nodes) > 2:
        temperature = 1.0 / (1.0 + len(unvisited_nodes))
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            cost_ratio = cost / min_cost if min_cost > 0 else 1.0
            escape_prob = (1.0 - cost_ratio) * temperature
            if random.random() < escape_prob:
                next_node = node
                break

    return next_node
