def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    avg_distance = sum(distances) / len(distances)

    if len(unvisited_nodes) <= 2:
        next_node = unvisited_nodes[distances.index(min_distance)]
    else:
        weights = [1 / (d + 1e-6) for d in distances]
        total_weight = sum(weights)
        normalized_weights = [w / total_weight for w in weights]

        exploration_factor = min(0.5, (avg_distance - min_distance) / avg_distance)
        if random.random() < exploration_factor:
            next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
        else:
            next_node = unvisited_nodes[distances.index(min_distance)]

    return next_node
