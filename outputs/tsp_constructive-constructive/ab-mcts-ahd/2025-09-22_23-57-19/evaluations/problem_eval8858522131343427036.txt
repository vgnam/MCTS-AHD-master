def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        candidates.append((node, cost))

    if not candidates:
        return unvisited_nodes.pop()

    candidates.sort(key=lambda x: x[1])
    best_node, best_cost = candidates[0]

    if len(unvisited_nodes) > 2:
        threshold = 1.2 - (0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        for node, cost in candidates[1:]:
            if cost <= best_cost * threshold:
                if random.random() < 0.3:
                    best_node = node
                    break

    return next_node
