def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    centrality_scores = {}
    for node in unvisited_nodes:
        centrality_scores[node] = sum(distance_matrix[node]) / len(distance_matrix[node])

    if len(unvisited_nodes) % 2 == 1:
        weighted_scores = {
            node: 0.7 * distance_matrix[current_node][node] + 0.3 * centrality_scores[node]
            for node in unvisited_nodes
        }
        next_node = min(weighted_scores, key=weighted_scores.get)
    else:
        weighted_scores = {
            node: 0.3 * distance_matrix[current_node][node] + 0.7 * centrality_scores[node]
            for node in unvisited_nodes
        }
        next_node = max(weighted_scores, key=weighted_scores.get)

    return next_node
