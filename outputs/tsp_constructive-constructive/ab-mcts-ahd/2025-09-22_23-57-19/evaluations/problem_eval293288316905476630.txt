def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    weights = []
    total_weight = 0.0

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        weight = 1.0 / (cost + 1e-6)  # Avoid division by zero
        candidates.append(node)
        weights.append(weight)
        total_weight += weight

    if not candidates:
        return unvisited_nodes.pop()

    normalized_weights = [w / total_weight for w in weights]
    next_node = np.random.choice(candidates, p=normalized_weights)

    if len(unvisited_nodes) > 2 and np.random.random() < 0.3:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < distance_matrix[current_node][next_node] * 1.3:
                next_node = node
                break

    return next_node
