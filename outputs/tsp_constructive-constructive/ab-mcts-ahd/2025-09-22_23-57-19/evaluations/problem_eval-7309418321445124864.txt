def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    avg_distance = sum(distances) / len(distances)

    weighted_threshold = min_distance + (max(distances) - min_distance) * (0.5 / len(unvisited_nodes))

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= weighted_threshold:
            candidates.append((node, cost))

    if candidates:
        candidates.sort(key=lambda x: x[1])
        best_node = candidates[0][0]
        if len(unvisited_nodes) > 2:
            for node, cost in candidates[1:]:
                if cost < min_distance * 1.3 or cost < avg_distance * 1.5:
                    best_node = node
                    break
        return best_node

    return next_node
