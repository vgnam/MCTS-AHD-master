def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    exploration_factor = 1.0 / (1.0 + len(unvisited_nodes))
    centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes}

    weighted_scores = []
    for node in unvisited_nodes:
        distance_score = 1 / (1 + distance_matrix[current_node][node])
        centrality_score = centrality[node] / sum(centrality.values())
        penalty = 1.0 if node == current_node else 1.0
        weighted_score = (exploration_factor * distance_score + (1 - exploration_factor) * centrality_score) / penalty
        weighted_scores.append(weighted_score)

    probabilities = [score / sum(weighted_scores) for score in weighted_scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    if next_node != destination_node and distance_matrix[current_node][next_node] > avg_distance * 1.5:
        fallback_candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] < min_cost * 1.2]
        if fallback_candidates:
            next_node = fallback_candidates[0]

    return next_node
