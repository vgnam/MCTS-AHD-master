def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    max_cost = max(distances)

    weights = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        normalized_cost = (cost - min_cost) / (max_cost - min_cost + 1e-10)
        future_cost = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else 0
        combined_cost = cost + future_cost
        weight = (1 - normalized_cost) * (1 - combined_cost / (sum(distances) + 1e-10))
        weights.append(weight)

    total_weight = sum(weights)
    if total_weight == 0:
        return unvisited_nodes.pop()

    normalized_weights = [w / total_weight for w in weights]
    next_node = np.random.choice(unvisited_nodes, p=normalized_weights)

    return next_node
