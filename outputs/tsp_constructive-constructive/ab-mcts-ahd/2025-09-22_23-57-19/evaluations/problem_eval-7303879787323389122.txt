def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    temperature = max(1.0, remaining_nodes / 10.0)

    node_costs = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        node_costs.append((node, cost))

    if not node_costs:
        return unvisited_nodes.pop()

    min_cost = min(cost for _, cost in node_costs)
    threshold = min_cost * (1.0 + 0.1 * (temperature - 1.0))

    valid_nodes = [node for node, cost in node_costs if cost <= threshold]

    if valid_nodes:
        probabilities = [math.exp(-cost / temperature) for _, cost in node_costs if node in valid_nodes]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = random.choices(valid_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(node_costs, key=lambda x: x[1])[0]

    return next_node
