def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    max_cost = max(distances)

    next_node = None
    max_weighted_score = -float('inf')

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        weighted_score = (cost / max_cost) * 0.6 + (1 - (cost / avg_distance)) * 0.4

        if weighted_score > max_weighted_score:
            max_weighted_score = weighted_score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost < avg_distance * 1.2 and cost < min_cost * 1.05:
                if random.random() < 0.3:
                    next_node = node
                    break

    return next_node
