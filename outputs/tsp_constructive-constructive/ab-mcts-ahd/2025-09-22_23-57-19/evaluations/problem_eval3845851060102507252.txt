def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node
        candidates.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = 0.7 - (0.2 * (len(unvisited_nodes) / len(distance_matrix)))
        connectivity_scores = []
        for node, cost in candidates:
            if node == next_node:
                continue
            connectivity = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
            score = (1 - (cost / max_cost)) * connectivity
            connectivity_scores.append((node, score))

        if connectivity_scores:
            connectivity_scores.sort(key=lambda x: -x[1])
            top_node, top_score = connectivity_scores[0]
            if top_score > threshold:
                next_node = top_node

    return next_node
