def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.7 if remaining_nodes > 3 else 0.3

    scores = []
    total_inverse_score = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + dynamic_weight * heuristic
        inverse_score = 1.0 / (score + 1e-6)
        scores.append((node, score, inverse_score))
        total_inverse_score += inverse_score

    if total_inverse_score <= 0:
        return unvisited_nodes.pop()

    rand_val = random.random() * total_inverse_score
    cumulative = 0.0

    for node, score, inverse_score in scores:
        cumulative += inverse_score
        if rand_val <= cumulative:
            return node

    return next_node
