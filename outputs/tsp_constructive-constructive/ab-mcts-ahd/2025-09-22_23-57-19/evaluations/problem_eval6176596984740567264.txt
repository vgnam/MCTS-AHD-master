def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        candidates = []
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            if cost <= min_cost * 1.4:
                candidates.append((node, cost))

        if candidates:
            candidates.sort(key=lambda x: x[1])
            best_candidate = candidates[0][0]

            if len(candidates) > 1:
                threshold = 0.6 if len(unvisited_nodes) > 5 else 0.8
                if random.random() < threshold:
                    next_node = random.choice([x[0] for x in candidates[:3]])

            if random.random() < 0.3:
                min_avg_cost = float('inf')
                for node in unvisited_nodes:
                    avg_future_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
                    if avg_future_cost < min_avg_cost:
                        min_avg_cost = avg_future_cost
                        next_node = node

    return next_node
