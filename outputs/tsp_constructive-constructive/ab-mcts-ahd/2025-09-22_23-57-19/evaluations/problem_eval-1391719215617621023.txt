def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        candidates = []
        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            if cost < min_cost * (1.2 - 0.2 * (min_cost / avg_distance)) or cost < avg_distance * 1.2:
                candidates.append(node)

        if candidates:
            next_node = candidates[0] if len(candidates) == 1 else np.random.choice(candidates)

    return next_node
