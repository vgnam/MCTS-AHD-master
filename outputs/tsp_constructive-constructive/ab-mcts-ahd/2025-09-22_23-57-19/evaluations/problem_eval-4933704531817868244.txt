def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    exploration_factor = 1.0 + (len(unvisited_nodes) / (len(unvisited_nodes) + 10))  # Dynamic exploration

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        normalized_cost = cost / avg_distance
        weight = (1 / normalized_cost) * (1 + (1 / (1 + exploration_factor * normalized_cost)))
        candidates.append((node, weight))

    candidates.sort(key=lambda x: x[1], reverse=True)
    next_node = candidates[0][0]

    return next_node
