def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
        candidates.append((node, cost))

    if not candidates:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = 0.7 * max_cost
        filtered = [(node, cost) for node, cost in candidates if cost >= threshold]

        if filtered:
            if len(filtered) > 1 and (random.random() < 0.25):
                selected = random.choice(filtered)
                return selected[0]

    max_node, _ = max(candidates, key=lambda x: x[1])
    return next_node
