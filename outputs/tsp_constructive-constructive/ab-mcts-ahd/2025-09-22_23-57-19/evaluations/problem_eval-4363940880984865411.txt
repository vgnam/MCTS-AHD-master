def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    max_ratio = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        distance = distance_matrix[node][destination_node]
        if distance == 0:
            ratio = float('inf')
        else:
            ratio = cost / distance
        if ratio > max_ratio:
            max_ratio = ratio
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]
            if potential_cost < distance_matrix[current_node][next_node] * 1.5:
                next_node = node
                break

    return next_node
