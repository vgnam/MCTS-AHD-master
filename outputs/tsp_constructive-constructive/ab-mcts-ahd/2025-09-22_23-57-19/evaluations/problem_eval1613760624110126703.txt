def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)
    dist_range = max_dist - min_dist if max_dist != min_dist else 1.0

    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    probabilities = []
    for dist in distances:
        prob = math.exp(-(dist - min_dist) / (temperature * dist_range))
        probabilities.append(prob)

    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    if random.random() < 0.7:  # 70% chance to select based on probabilities
        selected_idx = random.choices(range(len(unvisited_nodes)), weights=normalized_probs, k=1)[0]
        next_node = unvisited_nodes[selected_idx]
    else:
        next_node = unvisited_nodes[distances.index(min_dist)]

    return next_node
