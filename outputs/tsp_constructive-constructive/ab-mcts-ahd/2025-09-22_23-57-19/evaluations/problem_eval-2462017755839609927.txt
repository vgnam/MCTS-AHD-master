def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    avg_cost = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
    centrality = sum(distance_matrix[next_node]) / (total_nodes - 1)

    if len(unvisited_nodes) > 2:
        threshold = avg_cost * 0.8 if max_cost > avg_cost * 1.2 else avg_cost * 0.7
        candidate_nodes = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= 1.3 * min(distance_matrix[current_node][node] for node in unvisited_nodes)]

        if candidate_nodes:
            for node in candidate_nodes:
                cost = distance_matrix[current_node][node]
                centrality = sum(distance_matrix[node]) / (total_nodes - 1)
                weighted_score = cost + (1 - phase_factor) * (centrality / avg_cost)
                if cost <= threshold and weighted_score < distance_matrix[current_node][next_node] + (1 - phase_factor) * (centrality / avg_cost):
                    next_node = node

    return next_node
