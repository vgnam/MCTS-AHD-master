def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)
    min_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        candidate_nodes = []
        weights = []

        for node in unvisited_nodes:
            cost = distance_matrix[current_node][node]
            if node == min_node:
                weight = 0.7
            else:
                weight = 0.3 * (1 - (cost - min_cost) / (avg_distance - min_cost)) if avg_distance > min_cost else 0.1
            candidate_nodes.append(node)
            weights.append(weight)

        total_weight = sum(weights)
        normalized_weights = [w/total_weight for w in weights]
        next_node = np.random.choice(candidate_nodes, p=normalized_weights)
    else:
        next_node = min_node

    return next_node
