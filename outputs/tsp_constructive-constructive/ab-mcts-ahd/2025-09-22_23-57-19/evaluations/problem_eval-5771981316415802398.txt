importance (0.5) to higher centrality priority as progress continues, ensuring balance between greedy and global connectivity choices.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))  # Dynamic weight adjustment

    centrality = {}
    distance_scores = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        distance_scores[node] = distance_matrix[current_node][node]

    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_centrality = max(centrality.values()) if centrality else 1

    normalized_distance = {node: (max_distance - dist) / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        score = (1 - weight) * normalized_distance[node] + weight * normalized_centrality[node]

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
