def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
        avg_distance = sum(distances) / len(distances)
        max_distance = max(distances)
        total_nodes = len(distance_matrix)
        phase_factor = len(unvisited_nodes) / total_nodes

        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            centrality = sum(distance_matrix[node]) / (total_nodes - 1)
            weighted_score = cost + phase_factor * (centrality / avg_distance)

            if cost < avg_distance * 1.5 and weighted_score < max_distance * 0.9:
                next_node = node
                break

    return next_node
