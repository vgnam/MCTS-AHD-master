def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    candidate_nodes = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost > max_cost:
            max_cost = cost
            next_node = node
        candidate_nodes.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    threshold = 0.7 - (0.3 * (1 / len(unvisited_nodes)))
    candidate_nodes.sort(key=lambda x: x[1], reverse=True)

    for node, cost in candidate_nodes:
        if node == next_node:
            continue
        potential_cost = cost + distance_matrix[node][next_node]
        if potential_cost > max_cost * threshold:
            next_node = node
            break

    return next_node
