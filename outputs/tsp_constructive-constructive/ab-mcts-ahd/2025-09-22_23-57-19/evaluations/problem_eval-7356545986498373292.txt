def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    avg_dist = sum(distances) / len(distances)
    temp_factor = 1.0 - (min_dist / (avg_dist + 1e-6))  # Exploration factor

    weights = []
    for node in unvisited_nodes:
        dist = distance_matrix[current_node][node]
        weight = (1.0 / (dist + 1e-6)) ** (1.0 + temp_factor)
        weights.append(weight)

    total_weight = sum(weights)
    if total_weight == 0:
        return unvisited_nodes.pop()

    probs = [w / total_weight for w in weights]
    next_node = np.random.choice(unvisited_nodes, p=probs)

    return next_node
