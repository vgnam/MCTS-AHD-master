def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_cost = sum(distances) / len(distances)
    max_cost = max(distances)
    temperature = max_cost / (avg_cost + 1e-6)

    probabilities = []
    for cost in distances:
        prob = (1 / (cost + 1e-6)) * (temperature ** 2)
        probabilities.append(prob)

    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    selected_idx = np.random.choice(len(unvisited_nodes), p=normalized_probs)
    next_node = list(unvisited_nodes)[selected_idx]

    return next_node
