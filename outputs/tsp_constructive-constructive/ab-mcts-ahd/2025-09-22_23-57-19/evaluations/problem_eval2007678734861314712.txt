def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    min_cost = min(distances)

    exploration_factor = 1.0 + (0.5 * (len(unvisited_nodes) / len(distance_matrix)))

    candidate_scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_proximity = distance_matrix[node][destination_node] if destination_node != node else 0
        score = (distance * exploration_factor) + (0.3 * destination_proximity)
        candidate_scores[node] = score

    next_node = min(candidate_scores, key=candidate_scores.get)

    if len(unvisited_nodes) > 2 and next_node != destination_node:
        for node in unvisited_nodes:
            if node == next_node:
                continue
            if (distance_matrix[current_node][node] < avg_distance * 1.2 and
                distance_matrix[current_node][node] < min_cost * 1.3):
                next_node = node
                break

    return next_node
