def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    memory_decay = 0.7
    selection_memory = {}
    next_node = None

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_unvisited = unvisited_nodes - {destination_node}

        if not remaining_unvisited:
            return destination_node

        avg_distance = sum(distance_matrix[current_node][node] for node in remaining_unvisited) / len(remaining_unvisited)
        distance_ratio = destination_distance / avg_distance if avg_distance > 0 else 1.0

        memory_bias = selection_memory.get(destination_node, 0) * memory_decay
        combined_prob = 0.6 * (distance_ratio ** -1) + 0.4 * memory_bias

        if combined_prob > 0.7:
            selection_memory[destination_node] = selection_memory.get(destination_node, 0) + 1
            return destination_node

    min_distance = float('inf')
    for node in unvisited_nodes:
        if distance_matrix[current_node][node] < min_distance:
            min_distance = distance_matrix[current_node][node]
            next_node = node

    return next_node
