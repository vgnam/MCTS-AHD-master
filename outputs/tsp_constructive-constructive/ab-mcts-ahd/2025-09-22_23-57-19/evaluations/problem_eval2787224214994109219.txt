def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        neighbor_count = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0)
        score = distance / (neighbor_count + 1) if neighbor_count > 0 else distance
        candidates.append((node, score))

    candidates.sort(key=lambda x: -x[1])
    top_candidates = [c for c in candidates if c[1] >= candidates[0][1] * 0.7]

    if len(top_candidates) > 1 and random.random() < 0.2:
        return random.choice(top_candidates)[0]

    return next_node
