def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    max_cost = -float('inf')
    next_node = None
    utility_scores = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * cost)
        utility = cost * (1 + 0.1 * connectivity)
        utility_scores[node] = utility

        if utility > max_cost:
            max_cost = utility
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = max_cost * 0.7
        candidates = [node for node in unvisited_nodes if node != next_node and utility_scores[node] > threshold]
        if candidates:
            next_node = max(candidates, key=lambda node: utility_scores[node])

    return next_node
