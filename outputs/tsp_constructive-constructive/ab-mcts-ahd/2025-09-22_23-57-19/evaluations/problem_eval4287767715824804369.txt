def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    weights = []
    total_weight = 0.0

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        weight = cost ** 2
        weights.append((node, weight))
        total_weight += weight

    if total_weight == 0:
        return unvisited_nodes.pop()

    threshold = 1.0 / len(unvisited_nodes)
    cumulative_weight = 0.0
    selected_node = None

    for node, weight in weights:
        cumulative_weight += weight / total_weight
        if cumulative_weight >= threshold:
            selected_node = node
            break

    if selected_node is None:
        selected_node = weights[-1][0]

    if len(unvisited_nodes) > 2:
        for node, weight in weights:
            if node == selected_node:
                continue
            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][selected_node]
            dynamic_threshold = 0.5 + 0.5 * (1.0 / len(unvisited_nodes))
            if potential_cost < distance_matrix[current_node][selected_node] * dynamic_threshold:
                selected_node = node
                break

    return next_node
