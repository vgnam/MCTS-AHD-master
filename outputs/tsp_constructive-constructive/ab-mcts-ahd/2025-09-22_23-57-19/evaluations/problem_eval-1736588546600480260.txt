def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    remaining_nodes = len(unvisited_nodes)
    progress = 1 - remaining_nodes / (remaining_nodes + 1)
    weight = 0.7 * progress + 0.3 * (1 - progress)  # Adaptive weight based on progress
    temperature = max(0.1, 0.5 * (remaining_nodes / (remaining_nodes + 2)))  # Simulated annealing temperature

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        heuristic = distance_matrix[node][destination_node] if destination_node != node else 0
        score = distance + weight * heuristic
        candidates.append((node, score))

    if not candidates:
        return unvisited_nodes.pop()

    min_score = min(score for _, score in candidates)
    best_node = min(candidates, key=lambda x: x[1])[0]

    if len(unvisited_nodes) > 2:
        for node, score in candidates:
            if node == best_node:
                continue
            if score <= min_score * (1 + temperature):
                if np.random.rand() < np.exp(-(score - min_score) / temperature):
                    best_node = node
                    break

    return next_node
