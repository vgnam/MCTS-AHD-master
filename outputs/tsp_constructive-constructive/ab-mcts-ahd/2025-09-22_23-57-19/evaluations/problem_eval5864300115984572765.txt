def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost < min_cost:
            min_cost = cost
            next_node = node
        candidates.append((node, cost))

    if next_node is None:
        return unvisited_nodes.pop()

    threshold = 1.2
    if len(unvisited_nodes) > 2:
        for node, cost in candidates:
            if node == next_node:
                continue
            potential_cost = cost + distance_matrix[node][next_node]
            if potential_cost < min_cost * threshold:
                next_node = node
                threshold = potential_cost / min_cost

    return next_node
