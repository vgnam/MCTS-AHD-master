def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes}

    total_nodes = len(distance_matrix)
    phase_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_factor = 0.5 * phase_factor

    min_cost = float('inf')
    next_node = None
    node_scores = {}

    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        weighted_score = (1 - weight_factor) * cost + weight_factor * (centrality[node] / avg_distance)
        node_scores[node] = weighted_score

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if len(unvisited_nodes) > 2:
        sorted_nodes = sorted(node_scores.items(), key=lambda x: x[1])
        candidate_nodes = [node for node, score in sorted_nodes if score <= 1.3 * min_cost]

        if candidate_nodes:
            next_node = candidate_nodes[0]

    return next_node
