import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    scores = {}
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_to_node = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes) - 1

        # Dynamic weight adjustment based on path length and node centrality
        weight_current = 0.7 + 0.2 * (1 - dist_to_node / avg_distance)
        weight_dest = 0.3 + 0.1 * (1 - dist_to_dest / avg_distance)

        # Centrality measure: average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        centrality_score = 1 / (1 + centrality)

        score = (dist_to_node * weight_current + dist_to_dest * weight_dest) / (remaining_nodes + 1) + 0.2 * centrality_score
        scores[node] = score

    if scores:
        # Probabilistic selection based on normalized scores
        max_score = max(scores.values())
        normalized_scores = {node: (max_score - score + 1e-6) for node, score in scores.items()}
        total = sum(normalized_scores.values())
        probabilities = {node: score / total for node, score in normalized_scores.items()}
        next_node = random.choices(list(probabilities.keys()), weights=list(probabilities.values()), k=1)[0]
        return next_node

    return next_node
