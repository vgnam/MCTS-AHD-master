def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)

    min_cost = min(distances)
    next_node = unvisited_nodes[distances.index(min_cost)]

    if len(unvisited_nodes) > 2:
        candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= min_cost * 1.5]
        if len(candidates) > 1:
            weights = [1 / (distance_matrix[current_node][node] + 1e-10) for node in candidates]
            total_weight = sum(weights)
            probabilities = [w / total_weight for w in weights]
            next_node = random.choices(candidates, weights=probabilities, k=1)[0]

    return next_node
