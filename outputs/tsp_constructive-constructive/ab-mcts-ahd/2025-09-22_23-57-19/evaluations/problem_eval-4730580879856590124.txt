def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    temperature = len(unvisited_nodes) / (len(distance_matrix) * 10)
    diversity_factor = 1.0 / (1 + temperature)

    centrality = {}
    distance_scores = {}
    diversity_scores = {}

    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node])
        distance_scores[node] = distance_matrix[current_node][node]
        diversity_scores[node] = len([n for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][node] * 1.5])

    max_distance = max(distance_scores.values()) if distance_scores else 1
    max_centrality = max(centrality.values()) if centrality else 1
    max_diversity = max(diversity_scores.values()) if diversity_scores else 1

    normalized_distance = {node: (max_distance - dist) / max_distance if max_distance else 0 for node, dist in distance_scores.items()}
    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}
    normalized_diversity = {node: div / max_diversity if max_diversity else 0 for node, div in diversity_scores.items()}

    candidates = []
    for node in unvisited_nodes:
        score = (1 - diversity_factor) * normalized_distance[node] + \
                diversity_factor * (0.4 * normalized_centrality[node] + 0.6 * normalized_diversity[node])
        candidates.append((node, score))

    candidates.sort(key=lambda x: x[1], reverse=True)

    if temperature > 0.1 and len(candidates) > 1:
        if random.random() < 0.3:
            candidates = candidates[::-1]

    best_node, best_score = candidates[0]

    if len(unvisited_nodes) > 3 and random.random() < 0.2:
        for node, score in candidates[1:]:
            if score > best_score * 0.8:
                if random.random() < (score / best_score):
                    best_node = node
                    break

    return next_node
