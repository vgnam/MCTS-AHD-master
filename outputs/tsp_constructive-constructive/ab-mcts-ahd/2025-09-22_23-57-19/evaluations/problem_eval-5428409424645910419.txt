def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
        static_weight = 0.7
        score = distance_to_current + (static_weight * proximity_to_dest)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        return unvisited_nodes.pop()

    if len(unvisited_nodes) > 2:
        threshold = 1.3 + (1.8 * (len(unvisited_nodes) / len(distance_matrix)))
        for node in unvisited_nodes:
            if node == next_node:
                continue
            cost = distance_matrix[current_node][node]
            proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])
            score = cost + (0.7 * proximity_to_dest)
            if score < min_score * threshold:
                next_node = node
                min_score = score

    return next_node
