import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        return destination_node

    if len(unvisited_nodes) == 1:
        return unvisited_nodes.pop()

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)
    distance_variance = max_distance - min_distance

    exploration_factor = math.exp(-len(unvisited_nodes) / 10.0)
    dynamic_threshold = min_distance + distance_variance * (1.0 - exploration_factor)

    candidates = []
    for node in unvisited_nodes:
        cost = distance_matrix[current_node][node]
        if cost <= dynamic_threshold:
            candidates.append((node, cost))

    if candidates:
        if random.random() < exploration_factor:
            selected_node = random.choice(candidates)[0]
        else:
            candidates.sort(key=lambda x: x[1])
            selected_node = candidates[0][0]
        return selected_node

    return next_node
