[
     {
          "algorithm": "The algorithm selects the next node by prioritizing those closest to the current node (maximizing `-distance_matrix[current_node][node]`) while also considering their distance to the destination (adding `0.5 * distance_matrix[node][destination_node]`), aiming to delay reaching the destination until the end. The proximity score balances these two factors, favoring nodes that are both nearby and farther from the destination. The structure iterates through unvisited nodes, calculates the proximity score, and selects the node with the highest score.",
          "thought": "The new algorithm prioritizes nodes that are closer to the current node and farther from the destination, aiming to delay reaching the destination until the end, potentially reducing overall path length by exploring more local connections first.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    max_proximity = -float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        proximity = -distance_matrix[current_node][node] + 0.5 * distance_matrix[node][destination_node]\n        if proximity > max_proximity:\n            max_proximity = proximity\n            next_node = node\n\n    return next_node",
          "objective": 6.5107,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes proximity to the destination node more aggressively as the tour nears completion by dynamically adjusting the weight of proximity-to-destination in the scoring function, while still considering the local distance to the current node. The score combines distance to the current node and a weighted proximity-to-destination term, where the weight increases as the tour progresses. The destination node is always prioritized if it is unvisited, ensuring the tour ends optimally.",
          "thought": "The new algorithm prioritizes global optimization by dynamically adjusting the weight of proximity to the destination based on the remaining distance, while also considering the local distance to the current node, but with a different scoring mechanism that emphasizes proximity to the destination more aggressively as the tour nears completion.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n\n    total_unvisited = len(unvisited_nodes)\n    remaining_distance_to_dest = distance_matrix[current_node][destination_node]\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])\n        dynamic_weight = 0.5 + 0.5 * (1 - remaining_distance_to_dest / (remaining_distance_to_dest + 1))\n        score = distance_to_current + (dynamic_weight * proximity_to_dest)\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.65181,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor selection with a dynamically weighted proximity-to-destination heuristic, prioritizing nearby nodes while gradually emphasizing the shortest path back to the destination as the tour progresses. The dynamic weight (`dynamic_weight`) increases over time, balancing local distance (`distance_to_current`) and global proximity to the destination (`proximity_to_dest`), ensuring efficiency and adaptability.",
          "thought": "This new algorithm combines the nearest-neighbor approach of No.2 with a dynamic weighting of proximity-to-destination inspired by No.1, where the weight increases as the tour progresses, balancing local and global considerations while maintaining computational efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n\n    total_unvisited = len(unvisited_nodes)\n    remaining_distance_to_dest = distance_matrix[current_node][destination_node]\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        proximity_to_dest = 1 / (1 + distance_matrix[node][destination_node])\n        dynamic_weight = 0.5 + 0.5 * (1 - (total_unvisited / (total_unvisited + 1)))\n        score = distance_to_current + (dynamic_weight * proximity_to_dest)\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.83201,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm balances between minimizing immediate distance (distance-centrality) and exploring central nodes (centrality), with exploration weighted inversely by remaining nodes. Early in the process, distance dominates, while centrality becomes more important later, occasionally allowing slight detours (10% threshold) to improve global connectivity. The score combines normalized distance and centrality, adjusted by an exploration factor that decreases as nodes are visited.",
          "thought": "The new algorithm combines dynamic distance-centrality balancing with adaptive exploration, where the exploration factor adjusts inversely with remaining nodes, and centrality is weighted more heavily later in the process, while occasionally allowing slight detours if they improve global connectivity.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    if len(unvisited_nodes) == 1:\n        return unvisited_nodes.pop()\n\n    centrality = {}\n    distance_scores = {}\n    for node in unvisited_nodes:\n        centrality[node] = sum(distance_matrix[node])\n        distance_scores[node] = distance_matrix[current_node][node]\n\n    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)\n\n    max_distance = max(distance_scores.values()) if distance_scores else 1\n    max_centrality = max(centrality.values()) if centrality else 1\n\n    normalized_distance = {node: (max_distance - dist) / max_distance if max_distance else 0 for node, dist in distance_scores.items()}\n    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}\n\n    best_score = -float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        score = (1 - exploration_factor) * normalized_distance[node] + exploration_factor * normalized_centrality[node]\n\n        if score > best_score:\n            best_score = score\n            next_node = node\n\n    if next_node is None:\n        return unvisited_nodes.pop()\n\n    if len(unvisited_nodes) > 2:\n        for node in unvisited_nodes:\n            if node == next_node:\n                continue\n            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]\n            if potential_cost < distance_matrix[current_node][next_node] * 1.1:\n                next_node = node\n                break\n\n    return next_node",
          "objective": 6.91831,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines **distance** (prioritizing closer nodes) and **centrality** (prioritizing nodes with higher connectivity) in a dynamic balance, where the **exploration factor** (inversely proportional to remaining nodes) adjusts the weight between the two. The distance is normalized and inverted (closer nodes get higher scores), while centrality is normalized directly. The final score is a weighted sum, favoring distance early (high exploration factor) and centrality later (lower exploration factor). The algorithm ensures a trade-off between local optimization and global exploration.",
          "thought": "The new algorithm introduces a multi-criteria selection mechanism that combines distance, centrality, and a dynamic exploration factor, where the exploration factor is inversely proportional to the number of remaining nodes, ensuring a balance between local optimization and global exploration.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    # Calculate centrality and distance scores\n    centrality = {}\n    distance_scores = {}\n    for node in unvisited_nodes:\n        centrality[node] = sum(distance_matrix[node])\n        distance_scores[node] = distance_matrix[current_node][node]\n\n    # Dynamic exploration factor (inverse of remaining nodes)\n    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)\n\n    # Normalize scores\n    max_distance = max(distance_scores.values()) if distance_scores else 1\n    max_centrality = max(centrality.values()) if centrality else 1\n\n    normalized_distance = {node: (max_distance - dist) / max_distance if max_distance else 0 for node, dist in distance_scores.items()}\n    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}\n\n    # Combine scores with dynamic exploration factor\n    best_score = -float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        score = (1 - exploration_factor) * normalized_distance[node] + exploration_factor * normalized_centrality[node]\n\n        if score > best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.91909,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor and centrality-based selection, prioritizing nodes with both short distances and high connectivity (centrality), balanced by an exploration factor that adjusts dynamically based on remaining unvisited nodes. It normalizes distance and centrality scores and computes a weighted score, occasionally allowing slightly farther nodes if they improve global connectivity. The exploration factor decreases as nodes are visited, shifting from exploration to exploitation.",
          "thought": "The new algorithm combines the nearest-neighbor approach from No.2 with dynamic centrality prioritization from No.1, using an exploration factor to balance immediate distance and node connectivity, while allowing occasional slightly farther nodes for better global exploration.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    if len(unvisited_nodes) == 1:\n        return unvisited_nodes.pop()\n\n    centrality = {}\n    distance_scores = {}\n    for node in unvisited_nodes:\n        centrality[node] = sum(distance_matrix[node])\n        distance_scores[node] = distance_matrix[current_node][node]\n\n    exploration_factor = 1.0 / (len(unvisited_nodes) + 1)\n\n    max_distance = max(distance_scores.values()) if distance_scores else 1\n    max_centrality = max(centrality.values()) if centrality else 1\n\n    normalized_distance = {node: (max_distance - dist) / max_distance if max_distance else 0 for node, dist in distance_scores.items()}\n    normalized_centrality = {node: cent / max_centrality if max_centrality else 0 for node, cent in centrality.items()}\n\n    best_score = -float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        score = (1 - exploration_factor) * normalized_distance[node] + exploration_factor * normalized_centrality[node]\n\n        if score > best_score:\n            best_score = score\n            next_node = node\n\n    if next_node is None:\n        return unvisited_nodes.pop()\n\n    if len(unvisited_nodes) > 2:\n        for node in unvisited_nodes:\n            if node == next_node:\n                continue\n            potential_cost = distance_matrix[current_node][node] + distance_matrix[node][next_node]\n            if potential_cost < distance_matrix[current_node][next_node] * 1.2:\n                next_node = node\n                break\n\n    return next_node",
          "objective": 6.94884,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm adapts the nearest-neighbor heuristic by dynamically balancing immediate distance to the next node and heuristic value (distance to the destination), weighted by a factor that decreases as more nodes are visited (prioritizing closer nodes early). It prioritizes minimizing the current step's distance while gradually shifting focus toward the destination, avoiding excessive detours. The dynamic weight adjusts based on remaining nodes, ensuring a smooth transition from local to global optimization.",
          "thought": "The new algorithm modifies the nearest-neighbor heuristic by introducing a dynamic weighting factor that adapts based on the remaining path length, combining immediate distance with a heuristic value that prioritizes nodes closer to the destination while penalizing nodes that increase the path length excessively.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    best_score = float('-inf')\n    remaining_nodes = len(unvisited_nodes)\n\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        heuristic_value = distance_matrix[node][destination_node] if destination_node != node else 0\n        dynamic_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)))  # Adapts based on remaining nodes\n        weighted_score = -distance + dynamic_weight * heuristic_value  # Maximize this score\n\n        if weighted_score > best_score:\n            best_score = weighted_score\n            next_node = node\n\n    return next_node",
          "objective": 6.96694,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor selection with dynamic threshold adjustment, prioritizing the nearest node while allowing controlled deviation based on immediate cost and combined future cost. It calculates an average distance to unvisited nodes and selects the nearest node, then adjusts the threshold dynamically based on the ratio of unvisited nodes to the total nodes, balancing exploration and exploitation. The threshold scales with the number of unvisited nodes, allowing more deviation when fewer nodes remain, while still favoring cost-efficient paths.",
          "thought": "The new algorithm combines nearest-neighbor selection with dynamic threshold adjustment, prioritizing the nearest node while allowing controlled deviation based on immediate cost and combined future cost, similar to No.2, but introduces a threshold that scales with the ratio of unvisited nodes to balance exploration and exploitation, inspired by No.1's dynamic threshold.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    if len(unvisited_nodes) == 1:\n        return unvisited_nodes.pop()\n\n    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]\n    avg_distance = sum(distances) / len(distances)\n\n    min_cost = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        cost = distance_matrix[current_node][node]\n        if cost < min_cost:\n            min_cost = cost\n            next_node = node\n\n    if next_node is None:\n        return unvisited_nodes.pop()\n\n    if len(unvisited_nodes) > 2:\n        threshold = min_cost * (1.0 + 0.1 * (len(unvisited_nodes) / len(distance_matrix)))\n        for node in unvisited_nodes:\n            if node == next_node:\n                continue\n            cost = distance_matrix[current_node][node]\n            potential_cost = cost + distance_matrix[node][next_node]\n            if cost <= threshold and potential_cost < min_cost * 1.2:\n                next_node = node\n                break\n\n    return next_node",
          "objective": 7.00073,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor selection with a dynamic threshold to balance efficiency and exploration. It first prioritizes the nearest unvisited node but allows occasional selection of nodes within a dynamically adjusted threshold (scaled by the ratio of unvisited nodes) to avoid local optima, evaluating both immediate and potential future costs. The threshold (`min_cost * (1.0 + 0.1 * (len(unvisited_nodes) / len(distance_matrix)))`) ensures flexibility early in the search, gradually tightening as fewer nodes remain. Higher-priority variables include the nearest neighbor and cost thresholds, while lower-priority candidates are evaluated only if they meet relaxed cost constraints.",
          "thought": "This new algorithm combines the dynamic threshold scaling from No.1 with the cost-based exploration from No.2, prioritizing the nearest neighbor but allowing occasional selection of nodes within a dynamically adjusted threshold (scaled by the ratio of unvisited nodes) to balance efficiency and avoid local optima.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    if len(unvisited_nodes) == 1:\n        return unvisited_nodes.pop()\n\n    min_cost = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        cost = distance_matrix[current_node][node]\n        if cost < min_cost:\n            min_cost = cost\n            next_node = node\n\n    if next_node is None:\n        return unvisited_nodes.pop()\n\n    if len(unvisited_nodes) > 2:\n        candidates = []\n        for node in unvisited_nodes:\n            if node == next_node:\n                continue\n            cost = distance_matrix[current_node][node]\n            potential_cost = cost + distance_matrix[node][next_node]\n            candidates.append((node, cost, potential_cost))\n\n        if candidates:\n            candidates.sort(key=lambda x: x[1])\n            threshold = min_cost * (1.0 + 0.1 * (len(unvisited_nodes) / len(distance_matrix)))\n            for node, cost, potential_cost in candidates:\n                if cost <= threshold and potential_cost < min_cost * 1.2:\n                    next_node = node\n                    break\n\n    return next_node",
          "objective": 7.00083,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm implements a nearest-neighbor heuristic for TSP by prioritizing the destination node if unvisited, otherwise selecting the closest unvisited node from the current position. It uses the distance matrix to compare distances, with `destination_node` and `unvisited_nodes` given higher priority than other nodes, and `current_node` and `distance_matrix` playing supporting roles. The structure ensures efficiency by iterating only through unvisited nodes.",
          "thought": "The algorithm selects the next node to visit based on the nearest neighbor heuristic, choosing the closest unvisited node from the current position, prioritizing the destination node if it is unvisited.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    if destination_node in unvisited_nodes:\n        return destination_node\n\n    min_distance = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        if distance_matrix[current_node][node] < min_distance:\n            min_distance = distance_matrix[current_node][node]\n            next_node = node\n\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     }
]