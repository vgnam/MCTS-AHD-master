def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining = len(unvisited_nodes)
    k = 0.5  # Steepness factor for sigmoid
    weight = 1 / (1 + np.exp(-k * (remaining - len(distance_matrix) / 2)))  # Sigmoid-based dynamic weight
    next_node = min(unvisited_nodes, key=lambda node: weight * distance_matrix[current_node][node] + (1 - weight) * (sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)) + (0.1 if node in unvisited_nodes else 0))
    return next_node
