def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_total = float('inf')
    next_node = None
    
    # Dynamically adjust the destination weight based on the number of unvisited nodes
    num_unvisited = len(unvisited_nodes)
    destination_weight = max(0.5, 1 - (num_unvisited / (num_unvisited + 5)))  # Adjust this formula as needed
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        
        if not remaining_nodes:
            total = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        else:
            total = distance_matrix[current_node][node]
            for next_node_candidate in remaining_nodes:
                total += distance_matrix[node][next_node_candidate]
            total += distance_matrix[next_node_candidate][destination_node] * destination_weight
        
        if total < min_total:
            min_total = total
            next_node = node
    
    if destination_node in unvisited_nodes:
        destination_total = distance_matrix[current_node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            for node in remaining_nodes:
                destination_total += distance_matrix[destination_node][node] * destination_weight
            destination_total += distance_matrix[node][current_node]
        if destination_total < min_total:
            next_node = destination_node
    
    return next_node
