import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1 - (remaining_count / total_nodes)
    
    min_score = float('inf')
    next_node = None
    
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        
        global_cost = 0
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]
        
        weight_local = 0.5 + 0.2 * math.exp(-temperature)
        weight_global = 1 - weight_local
        
        score = weight_local * local_cost + weight_global * global_cost
        
        # Look-ahead mechanism
        if remaining_count > 2:
            remaining_nodes = unvisited_nodes - {node}
            next_node_candidates = [n for n in remaining_nodes if n != destination_node]
            if next_node_candidates:
                next_node_candidate = min(next_node_candidates, key=lambda x: distance_matrix[node][x])
                score += 0.1 * distance_matrix[node][next_node_candidate]
        
        if node == current_node:
            score *= 1.1
        
        if score < min_score:
            min_score = score
            next_node = node
    
    # Consider destination node as a candidate
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
                global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
        score = weight_local * local_cost + weight_global * global_cost
        if score < min_score:
            next_node = destination_node
    
    return next_node
