def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 100
    cooling_rate = 0.95
    remaining_count = len(unvisited_nodes)
    max_score = float('-inf')
    next_node = None

    while temperature > 1:
        probability = 1 / (1 + math.exp((temperature - 50) / 10))
        if random.random() < probability:
            candidate_nodes = list(unvisited_nodes)
        else:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
            candidate_nodes = [nearest_neighbors[0]] if nearest_neighbors else []

        for node in candidate_nodes:
            distance_to_current = distance_matrix[current_node][node]
            distance_to_destination = distance_matrix[node][destination_node]
            score = (1 / distance_to_current) * distance_to_destination

            if remaining_count > 1:
                score *= (1.0 + 0.08 * (remaining_count - 1))

            if score > max_score:
                max_score = score
                next_node = node

        if next_node is not None and (next_node == destination_node or random.random() < math.exp((max_score - (1 / distance_matrix[current_node][next_node]) * distance_matrix[next_node][destination_node]) / temperature)):
            return next_node

        temperature *= cooling_rate

    return next_node
