import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Initialize parameters
    temperature = 100
    cooling_rate = 0.98
    exploration_factor = 0.7
    momentum = 0.3
    recent_nodes = []

    # Find nearest neighbor
    min_distance = float('inf')
    nearest_neighbor = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            nearest_neighbor = node

    # Check if destination node is a valid choice
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
    else:
        destination_distance = float('inf')

    # Simulated annealing with momentum and exploration factor
    while temperature > 1:
        # Dynamic exploration probability
        exploration_prob = exploration_factor * (temperature / 100)

        # Momentum effect: bias towards recent nodes
        if recent_nodes and random.random() < momentum:
            next_node = random.choice(recent_nodes)
        elif random.random() < exploration_prob:
            # Choose a random unvisited node
            next_node = random.choice(list(unvisited_nodes))
        else:
            # Choose between nearest neighbor and destination node with bias
            if destination_distance < min_distance * 1.2:  # Slight bias towards destination
                next_node = destination_node if random.random() < 0.6 else nearest_neighbor
            else:
                next_node = nearest_neighbor

        # Check if the chosen node is valid
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue

        # Accept the chosen node with a certain probability
        current_distance = distance_matrix[current_node][next_node]
        acceptance_prob = math.exp((min_distance - current_distance) / temperature)

        if next_node == destination_node or random.random() < acceptance_prob:
            recent_nodes.append(next_node)
            if len(recent_nodes) > 3:  # Keep track of last 3 nodes
                recent_nodes.pop(0)
            return next_node

        temperature *= cooling_rate

    # Return the nearest neighbor if the temperature is too low
    return next_node
