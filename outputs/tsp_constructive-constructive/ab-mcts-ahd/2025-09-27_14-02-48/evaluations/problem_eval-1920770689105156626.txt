def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_score = float('inf')
    next_node = None
    
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                second_nearest_remaining = min(remaining_nodes - {nearest_remaining}, key=lambda x: distance_matrix[node][x], default=None)
                if second_nearest_remaining is not None:
                    global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][second_nearest_remaining]
                else:
                    global_cost = distance_matrix[node][nearest_remaining]
        
        score = 0.5 * local_cost + 0.5 * global_cost
        
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
                global_cost = distance_matrix[destination_node][nearest_remaining]
        
        score = 0.5 * local_cost + 0.5 * global_cost
        
        if score < min_score:
            next_node = destination_node
    
    return next_node
