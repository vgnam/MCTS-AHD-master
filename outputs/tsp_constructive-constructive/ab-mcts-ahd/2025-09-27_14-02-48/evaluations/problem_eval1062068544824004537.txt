import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    T = 100 / (1 + len(unvisited_nodes))
    weight_local = 0.65 + (0.1 * (1 - math.exp(-T)))
    weight_global = 1 - weight_local
    
    min_score = float('inf')
    next_node = None
    
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        penalty = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
                avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
                penalty = max(0, avg_distance - distance_matrix[node][nearest_remaining])
            else:
                global_cost = distance_matrix[node][destination_node]
        
        score = weight_local * local_cost + weight_global * global_cost + 0.05 * penalty
        
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        penalty = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
            avg_distance = sum(distance_matrix[destination_node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = max(0, avg_distance - distance_matrix[destination_node][nearest_remaining])
        
        score = weight_local * local_cost + weight_global * global_cost + 0.05 * penalty
        
        if score < min_score:
            next_node = destination_node
    
    return next_node
