def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        direction_vector = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] != 0 else 0
        global_cost = distance_matrix[node][destination_node] * (1 - direction_vector)
        
        weight_local = 0.5 + 0.2 * (remaining_count / len(distance_matrix)) if remaining_count > 0 else 0.5
        weight_global = 1 - weight_local
        score = weight_local * local_cost + weight_global * global_cost
        
        if score < min_score:
            min_score = score
            next_node = node
            
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        score = local_cost
        if score < min_score:
            next_node = destination_node
            
    return next_node
