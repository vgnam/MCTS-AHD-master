import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 100
    cooling_rate = 0.95
    remaining_count = len(unvisited_nodes)
    min_total = float('inf')
    next_node = None

    while temperature > 1:
        probability = 1 / (1 + math.exp((temperature - 50) / 10))
        if random.random() < probability:
            candidate_nodes = list(unvisited_nodes)
        else:
            nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
            candidate_nodes = [nearest_neighbors[0]] if nearest_neighbors else []

        for node in candidate_nodes:
            total = distance_matrix[current_node][node]
            remaining_nodes = unvisited_nodes - {node}

            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
                total += distance_matrix[node][destination_node]
            elif remaining_nodes:
                total += sum(distance_matrix[node][n] for n in remaining_nodes) + distance_matrix[list(remaining_nodes)[-1]][destination_node]

            if remaining_count > 1:
                total *= (1.0 + 0.08 * (remaining_count - 1))

            if total < min_total:
                min_total = total
                next_node = node

        if next_node is not None and (next_node == destination_node or random.random() < math.exp((min_total - distance_matrix[current_node][next_node]) / temperature)):
            return next_node

        temperature *= cooling_rate

    return next_node
