import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    distances_to_unvisited = [distance_matrix[current_node][node] for node in unvisited_nodes]
    variance = np.var(distances_to_unvisited)
    temperature = max(0.1, variance / (1 + variance))
    
    min_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        
        if remaining_nodes:
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
            second_nearest_remaining = min(remaining_nodes - {nearest_remaining}, key=lambda x: distance_matrix[node][x]) if len(remaining_nodes) > 1 else nearest_remaining
            global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            look_ahead_factor = distance_matrix[node][second_nearest_remaining] / (distance_matrix[node][nearest_remaining] + 1e-9)
        else:
            global_cost = distance_matrix[node][destination_node]
            look_ahead_factor = 1
        
        weight_local = 0.5 + 0.2 * (remaining_count / len(distance_matrix)) + random.uniform(-temperature, temperature)
        weight_local = max(0, min(1, weight_local))  # Ensure weight is within [0, 1]
        weight_global = 1 - weight_local
        
        score = weight_local * local_cost + weight_global * global_cost * look_ahead_factor
        
        if node != current_node:
            score *= 1.1
        
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        remaining_nodes = unvisited_nodes - {destination_node}
        if remaining_nodes:
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
        else:
            global_cost = 0
        score = weight_local * local_cost + weight_global * global_cost
        if score < min_score:
            next_node = destination_node
    
    return next_node
