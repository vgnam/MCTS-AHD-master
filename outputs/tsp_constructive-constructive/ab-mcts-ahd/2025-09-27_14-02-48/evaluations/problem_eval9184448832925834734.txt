import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    # Simulated annealing parameters
    T = 100  # Initial temperature
    alpha = 0.95  # Cooling rate
    
    min_score = float('inf')
    next_node = None
    
    # Find k-nearest neighbors
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]
        
        # Dynamic weight adjustment using simulated annealing
        w_local = 0.7 + (random.random() - 0.5) * (T / 100)
        w_local = max(0.5, min(w_local, 0.9))  # Clamp w_local to [0.5, 0.9]
        w_global = 1 - w_local
        
        score = w_local * local_cost + w_global * global_cost
        
        # Penalty term for potential sub-tours
        penalty = 0
        if len(unvisited_nodes) > 2 and len(remaining_nodes) > 0:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = 0.1 * avg_distance if avg_distance > distance_matrix[current_node][node] else 0
        
        score += penalty
        
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
        
        w_local = 0.7 + (random.random() - 0.5) * (T / 100)
        w_local = max(0.5, min(w_local, 0.9))  
        w_global = 1 - w_local
        
        score = w_local * local_cost + w_global * global_cost
        
        if score < min_score:
            next_node = destination_node
    
    # Update temperature
    T *= alpha
    
    return next_node
