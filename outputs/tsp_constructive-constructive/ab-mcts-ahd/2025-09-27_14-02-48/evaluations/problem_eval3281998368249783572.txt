import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    scores = {}
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        
        # Avoid division by zero
        if distance_to_current == 0 or distance_to_destination == 0:
            score = float('inf')
        else:
            score = 0.5 * (1 / distance_to_current) + 0.5 * (1 / distance_to_destination)
        
        scores[node] = score
    
    # Normalize scores to create a probability distribution
    max_score = max(scores.values())
    min_score = min(scores.values())
    score_range = max_score - min_score
    
    if score_range == 0:
        probabilities = {node: 1 / len(unvisited_nodes) for node in unvisited_nodes}
    else:
        probabilities = {node: (score - min_score) / score_range for node, score in scores.items()}
    
    # Normalize probabilities to ensure they sum to 1
    prob_sum = sum(probabilities.values())
    probabilities = {node: prob / prob_sum for node, prob in probabilities.items()}
    
    # Select next node probabilistically based on the scores
    next_node = random.choices(list(probabilities.keys()), weights=probabilities.values(), k=1)[0]
    
    return next_node
