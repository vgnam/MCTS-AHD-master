import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    max_distance = max(distances)
    min_distance = min(distances)
    
    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Normalize distance to a score between 0 and 1, where 1 is the farthest and 0 is the closest
        score = (distance - min_distance) / (max_distance - min_distance) if max_distance != min_distance else 0
        scores.append(score)
    
    # Invert scores so that closer nodes have higher probabilities
    probabilities = [(1 - score) ** 2 for score in scores]
    probabilities = np.array(probabilities) / sum(probabilities)
    
    next_node = np.random.choice(list(unvisited_nodes), p=probabilities)
    
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_distance or destination_distance < min_distance * 1.2:
            next_node = destination_node
    
    return next_node
