def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                avg_distance = sum(distance_matrix[node][x] for x in remaining_nodes) / len(remaining_nodes)
                global_cost = avg_distance + distance_matrix[node][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]
        weight_local = 0.3 + 0.4 * (remaining_count / len(distance_matrix)) 
        weight_global = 1 - weight_local
        score = weight_local * local_cost + weight_global * global_cost
        if score < min_score:
            min_score = score
            next_node = node
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            avg_distance = sum(distance_matrix[destination_node][x] for x in remaining_nodes) / len(remaining_nodes)
            global_cost = avg_distance
        score = 0.5 * local_cost + 0.5 * global_cost
        if score < min_score:
            next_node = destination_node
    return next_node
