def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)

            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]

        weight_factor = 1 / (1 + math.exp(-0.5 * (remaining_count - 5)))
        local_weight = 1 - weight_factor
        global_weight = weight_factor

        score = local_weight * local_cost + global_weight * global_cost

        if node == destination_node:
            score *= 0.8

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
