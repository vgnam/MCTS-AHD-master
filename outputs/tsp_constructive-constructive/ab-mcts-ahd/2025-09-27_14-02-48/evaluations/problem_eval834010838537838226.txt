def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)

            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]

        weight_local = 0.5 + 0.2 * (remaining_count / len(distance_matrix)) if remaining_count > 0 else 0.5
        weight_global = 1 - weight_local

        score = weight_local * local_cost + weight_global * global_cost

        if node in unvisited_nodes and node != current_node:
            score *= 1.1

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]

        score = weight_local * local_cost + weight_global * global_cost

        if score < min_score:
            next_node = destination_node

    return next_node
