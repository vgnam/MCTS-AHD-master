import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    # Calculate node connectivity
    node_connectivity = {node: sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] < sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) for node in unvisited_nodes}
    
    # Initialize temperature and cooling rate based on node connectivity
    temperature = 100 / (1 + node_connectivity[current_node])
    cooling_rate = 0.95
    
    # Find k nearest neighbors adaptively based on node connectivity
    k = min(max(3, int(node_connectivity[current_node])), len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    # Find nearest neighbor among all unvisited nodes
    min_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes)
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    
    # Check if destination node is a valid choice
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
    else:
        destination_distance = float('inf')
    
    # Simulated annealing with dynamic temperature adjustment
    while temperature > 1:
        # Choose between nearest neighbors or destination node based on temperature and distance metrics
        if random.random() < temperature / (100 + node_connectivity[current_node]):
            next_node = random.choice(nearest_neighbors)
        else:
            if destination_distance < min_distance:
                next_node = destination_node
            else:
                next_node = nearest_neighbor
        
        # Check if the chosen node is valid
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue
        
        # Accept the chosen node with a certain probability based on distance and temperature
        if next_node == destination_node or random.random() < math.exp((min_distance - distance_matrix[current_node][next_node]) / (temperature + 1e-6)):
            return next_node
        
        temperature *= cooling_rate
    
    # Return the nearest neighbor if the temperature is too low
    return next_node
