import random
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    # Calculate the score for each unvisited node
    scores = {}
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = (1 / distance_to_current) * distance_to_destination
        scores[node] = score
    
    # Find the node with the maximum score
    max_score_node = max(scores, key=scores.get)
    
    # Find the nearest neighbor
    min_distance = float('inf')
    nearest_neighbor = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            nearest_neighbor = node
    
    # Calculate the threshold distance
    threshold_distance = min_distance * 1.2
    
    # Check if destination node is in unvisited nodes and within the threshold distance
    destination_distance = distance_matrix[current_node][destination_node]
    if destination_node in unvisited_nodes and destination_distance < threshold_distance:
        # Probabilistically choose between the max score node, nearest neighbor, and destination node
        if random.random() < (1 - (destination_distance / threshold_distance)):
            return destination_node
        else:
            # Choose between max score node and nearest neighbor based on their scores
            if scores.get(max_score_node, 0) > scores.get(nearest_neighbor, 0):
                return max_score_node
            else:
                return nearest_neighbor
    else:
        # If destination node is not within threshold, choose the max score node
        return next_node
