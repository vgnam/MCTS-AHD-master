def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    max_distance = float('-inf')
    next_node = None
    max_distance_nodes = []
    
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance > max_distance:
            max_distance = distance
            max_distance_nodes = [node]
        elif distance == max_distance:
            max_distance_nodes.append(node)
    
    if len(max_distance_nodes) > 1:
        # Calculate proximity bias for each node with max distance
        min_proximity_distance = float('inf')
        for node in max_distance_nodes:
            proximity_distance = distance_matrix[node][destination_node]
            if proximity_distance < min_proximity_distance:
                min_proximity_distance = proximity_distance
                next_node = node
    else:
        next_node = max_distance_nodes[0]
    
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        threshold = max_distance * (1 - (avg_distance / max_distance) ** 2)  # dynamic threshold
        if destination_distance < threshold:
            next_node = destination_node
    
    return next_node
