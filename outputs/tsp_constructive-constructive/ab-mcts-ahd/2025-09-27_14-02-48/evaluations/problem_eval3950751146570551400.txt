importance of local and global costs based on the ratio of remaining unvisited nodes to total nodes, and incorporates a penalty term for nodes that are not on the direction towards the destination node.
}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    ratio = remaining_nodes / total_nodes
    
    min_score = float('inf')
    next_node = None
    
    current_to_destination = distance_matrix[current_node][destination_node]
    current_to_node = lambda node: distance_matrix[current_node][node]
    node_to_destination = lambda node: distance_matrix[node][destination_node]
    
    for node in unvisited_nodes:
        local_cost = current_to_node(node)
        global_cost = node_to_destination(node)
        
        # Dynamic weighting based on the ratio of remaining nodes
        weight_local = 0.4 * ratio
        weight_global = 0.6 + (0.4 * (1 - ratio))
        
        # Penalty term for nodes not in the direction of destination
        direction_penalty = max(0, local_cost - (current_to_destination - global_cost))
        
        score = weight_local * local_cost + weight_global * global_cost + 0.1 * direction_penalty
        
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        
        weight_local = 0.4 * (1 / total_nodes)
        weight_global = 0.6 + (0.4 * (1 - 1 / total_nodes))
        
        score = weight_local * local_cost + weight_global * global_cost
        
        if score < min_score:
            next_node = destination_node
    
    return next_node
