import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    temperature = 100
    cooling_rate = 0.95
    
    while temperature > 1:
        k = max(3, int(len(unvisited_nodes) * (temperature / 100)))
        nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
        
        distance_to_destination = distance_matrix[current_node][destination_node] if destination_node in unvisited_nodes else float('inf')
        min_distance = min([distance_matrix[current_node][node] for node in nearest_neighbors])
        
        probabilities = []
        for node in nearest_neighbors:
            distance = distance_matrix[current_node][node]
            penalty = 0.1 * distance_matrix[node][destination_node] / (1 + distance_matrix[node][destination_node]) if node != destination_node else 0
            probability = math.exp(-(distance + penalty) / temperature)
            probabilities.append(probability)
        
        probabilities = [p / sum(probabilities) for p in probabilities]
        
        if random.random() < 0.2:
            next_node = random.choice(nearest_neighbors)
        else:
            next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
        
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue
        
        temperature *= cooling_rate
        return next_node
    
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
