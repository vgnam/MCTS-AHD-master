def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_score = float('inf')
    next_node = None
    
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]
        
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes - {node}) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        
        score = 0.4 * local_cost + 0.6 * global_cost + 0.1 * avg_distance
        
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
        
        avg_distance = sum(distance_matrix[destination_node][n] for n in unvisited_nodes - {destination_node}) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        
        score = 0.4 * local_cost + 0.6 * global_cost + 0.1 * avg_distance
        
        if score < min_score:
            next_node = destination_node
    
    return next_node
