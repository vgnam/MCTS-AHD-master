import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    scores = []
    nodes = []
    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        
        global_cost = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]
        
        look_ahead_cost = 0
        if len(unvisited_nodes) > 2:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if len(remaining_nodes) > 1:
                nearest_two_nodes = sorted(remaining_nodes, key=lambda x: distance_matrix[node][x])[:2]
                look_ahead_cost = distance_matrix[node][nearest_two_nodes[0]] + distance_matrix[nearest_two_nodes[0]][nearest_two_nodes[1]]
        
        score = 0.2 * local_cost + 0.6 * global_cost + 0.2 * look_ahead_cost
        scores.append(score)
        nodes.append(node)
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
        score = 0.2 * local_cost + 0.6 * global_cost + 0.2 * 0  # No look-ahead cost for destination node
        scores.append(score)
        nodes.append(destination_node)
    
    scores = np.array(scores)
    scores = np.exp(-scores)  # Softmax
    scores /= np.sum(scores)
    next_node = np.random.choice(nodes, p=scores)
    return next_node
