import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    # Initialize temperature and cooling rate
    temperature = 100
    cooling_rate = 0.95
    
    # Dynamically adjust k based on the size of unvisited nodes and temperature
    k = min(max(3, int(len(unvisited_nodes) * (temperature / 100))), len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    # Check if destination node is in nearest neighbors
    if destination_node in nearest_neighbors:
        destination_distance = distance_matrix[current_node][destination_node]
        nearest_neighbor = nearest_neighbors[0]
        min_distance = distance_matrix[current_node][nearest_neighbor]
        if destination_distance < min_distance:
            return destination_node
    
    # Simulated annealing
    while temperature > 1:
        if random.random() < temperature / 100:
            # Choose a random node from nearest neighbors
            next_node = random.choice(nearest_neighbors)
        else:
            # Choose the nearest neighbor among the nearest neighbors
            next_node = nearest_neighbors[0]
        
        # Check if the chosen node is valid
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue
        
        # Accept the chosen node with a certain probability
        min_distance = distance_matrix[current_node][nearest_neighbors[0]]
        if next_node == destination_node or random.random() < math.exp((min_distance - distance_matrix[current_node][next_node]) / temperature):
            return next_node
        
        temperature *= cooling_rate
    
    # Return the nearest neighbor if the temperature is too low
    return next_node
