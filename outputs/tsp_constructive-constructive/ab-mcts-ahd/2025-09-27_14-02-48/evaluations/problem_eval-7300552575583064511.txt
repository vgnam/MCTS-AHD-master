def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    destination_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        local_distance = distance_matrix[current_node][node]
        node_to_dest_distance = distance_matrix[node][destination_node]
        total = local_distance + node_to_dest_distance

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)

            if remaining_nodes:
                for next_node_candidate in remaining_nodes:
                    total += distance_matrix[node][next_node_candidate] * (1.0 + 0.08 * (1.0 - node_to_dest_distance / destination_distance))

        weight = 1.0 + 0.15 * (1.0 - node_to_dest_distance / destination_distance) + 0.05 * (remaining_count - 1)
        weighted_total = total * weight

        if weighted_total < min_total:
            min_total = weighted_total
            next_node = node

    if destination_node in unvisited_nodes:
        dest_weight = 1.0 + 0.2 * (1.0 - destination_distance / sum(distance_matrix[current_node][n] for n in unvisited_nodes))
        dest_total = destination_distance * dest_weight

        if dest_total < min_total:
            next_node = destination_node

    return next_node
