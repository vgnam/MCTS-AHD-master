import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    max_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate directional cosine similarity
        vec_current = (distance_matrix[current_node][destination_node], 0)
        vec_node = (distance_to_destination, distance_to_current)
        dot_product = vec_current[0] * vec_node[0] + vec_current[1] * vec_node[1]
        norm_current = math.sqrt(vec_current[0]**2 + vec_current[1]**2)
        norm_node = math.sqrt(vec_node[0]**2 + vec_node[1]**2)
        cosine_sim = dot_product / (norm_current * norm_node) if (norm_current * norm_node) != 0 else 0

        # Weighted score combining distance and direction
        score = (1 / (1 + distance_to_current)) * (0.7 * cosine_sim + 0.3 * distance_to_destination)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
