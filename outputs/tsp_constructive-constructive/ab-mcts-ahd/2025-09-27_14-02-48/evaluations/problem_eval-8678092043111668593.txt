import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    temperature = 100  # Initial temperature
    cooling_rate = 0.95  # Cooling rate
    
    max_score = float('-inf')
    next_node = None
    
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        
        # Calculate a score that balances local proximity and global progress
        # Incorporate temperature to adjust the balance
        score = (1 / distance_to_current) * (distance_to_destination ** (temperature / 100))
        
        if score > max_score:
            max_score = score
            next_node = node
    
    # Special handling for destination node when it's among unvisited nodes
    if destination_node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][destination_node]
        distance_to_destination = distance_matrix[destination_node][destination_node]
        score = (1 / distance_to_current) * (distance_to_destination ** (temperature / 100))
        if score > max_score:
            next_node = destination_node
    
    # Gradually decrease the temperature
    temperature *= cooling_rate
    
    return next_node
