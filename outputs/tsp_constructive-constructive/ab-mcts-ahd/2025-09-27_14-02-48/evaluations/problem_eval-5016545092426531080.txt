import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    temperature = 100
    cooling_rate = 0.95
    
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    min_distance = float('inf')
    nearest_neighbor = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            nearest_neighbor = node
    
    while temperature > 1:
        next_node = random.choice(nearest_neighbors)
        
        local_cost = distance_matrix[current_node][next_node]
        global_cost = 0
        penalty = 0
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {next_node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[next_node][x])
                global_cost = distance_matrix[next_node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
                avg_distance = sum(distance_matrix[next_node][n] for n in remaining_nodes) / len(remaining_nodes)
                penalty = max(0, avg_distance - distance_matrix[next_node][nearest_remaining])
            else:
                global_cost = distance_matrix[next_node][destination_node]
        
        weight_local = 0.7 + (0.3 * (1 - math.exp(-temperature/10)))
        weight_global = 1 - weight_local
        score = weight_local * local_cost + weight_global * global_cost + 0.1 * penalty
        
        if destination_node in unvisited_nodes:
            destination_local_cost = distance_matrix[current_node][destination_node]
            destination_global_cost = 0
            destination_penalty = 0
            
            if len(unvisited_nodes) > 1:
                remaining_nodes = unvisited_nodes - {destination_node}
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
                destination_global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
                avg_distance = sum(distance_matrix[destination_node][n] for n in remaining_nodes) / len(remaining_nodes)
                destination_penalty = max(0, avg_distance - distance_matrix[destination_node][nearest_remaining])
            
            destination_score = weight_local * destination_local_cost + weight_global * destination_global_cost + 0.1 * destination_penalty
            
            if destination_score < score:
                next_node = destination_node
        
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue
        
        if random.random() < math.exp((min_distance - distance_matrix[current_node][next_node]) / (temperature/10)):
            return next_node
        
        temperature *= cooling_rate
    
    return next_node
