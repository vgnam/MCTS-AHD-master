def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_total = float('inf')
    next_node = None
    
    # Dynamic destination weight based on the number of unvisited nodes
    destination_weight = 0.7 + (len(unvisited_nodes) / len(distance_matrix)) * 0.3
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        
        total = distance_matrix[current_node][node]
        
        if not remaining_nodes:
            total += distance_matrix[node][destination_node]
        else:
            total += sum(min(distance_matrix[node][next_node_candidate] for next_node_candidate in remaining_nodes))
            total += distance_matrix[node][min(remaining_nodes, key=lambda x: distance_matrix[x][destination_node])] * (1 - destination_weight)
            total += distance_matrix[min(remaining_nodes, key=lambda x: distance_matrix[x][destination_node])][destination_node] * destination_weight
        
        # Add a penalty for nodes that are far from the current node
        total += (distance_matrix[current_node][node] / sum(distance_matrix[current_node][n] for n in unvisited_nodes)) * len(unvisited_nodes) * 0.1
        
        if total < min_total:
            min_total = total
            next_node = node
    
    if destination_node in unvisited_nodes:
        destination_total = distance_matrix[current_node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            destination_total += sum(min(distance_matrix[destination_node][node] for node in remaining_nodes))
        
        if destination_total < min_total:
            next_node = destination_node
    
    return next_node
