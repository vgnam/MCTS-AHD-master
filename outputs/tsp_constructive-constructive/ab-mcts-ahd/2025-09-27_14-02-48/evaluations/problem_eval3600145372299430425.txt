import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    # Initialize temperature and cooling rate
    temperature = 100
    cooling_rate = 0.95
    
    # Dynamic nearest neighbor search
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    min_distance = distance_matrix[current_node][nearest_neighbors[0]]
    second_min_distance = distance_matrix[current_node][nearest_neighbors[1]] if len(nearest_neighbors) > 1 else min_distance
    
    # Check if destination node is a valid choice
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
    else:
        destination_distance = float('inf')
    
    # Simulated annealing with adaptive temperature control
    while temperature > 1:
        # Novel probability function to balance exploration and exploitation
        probability = 1 / (1 + math.exp((temperature - 50) / 10))
        if random.random() < probability:
            # Choose a random unvisited node with a bias towards closer nodes
            next_node = random.choices(list(unvisited_nodes), weights=[1 / distance_matrix[current_node][node] for node in unvisited_nodes])[0]
        else:
            # Choose between nearest neighbor and destination node with a bias towards the closer one
            if destination_distance < min_distance:
                next_node = destination_node
            else:
                next_node = nearest_neighbors[0]
        
        # Check if the chosen node is valid
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue
        
        # Accept the chosen node with a certain probability based on the distance difference and temperature
        distance_diff = second_min_distance - distance_matrix[current_node][next_node]
        if next_node == destination_node or random.random() < math.exp(distance_diff / temperature):
            return next_node
        
        temperature *= cooling_rate
    
    # Return the nearest neighbor if the temperature is too low
    return next_node
