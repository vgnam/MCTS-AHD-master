def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    
    destination_distance = distance_matrix[current_node][destination_node]
    dynamic_threshold = (destination_distance / max_distance) * 0.7 + 0.3 * max_distance
    
    proximity_score = {node: distance_matrix[node][destination_node] / max_distance for node in unvisited_nodes}
    adjusted_distance = {node: distance_matrix[current_node][node] * (1 + proximity_score[node]) for node in unvisited_nodes}
    
    next_node = max(unvisited_nodes, key=lambda node: adjusted_distance[node])
    
    if destination_distance < dynamic_threshold:
        next_node = destination_node
    
    return next_node
