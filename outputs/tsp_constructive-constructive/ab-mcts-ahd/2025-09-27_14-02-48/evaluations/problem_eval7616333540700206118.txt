import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_total = float('inf')
    next_node = None
    
    # Initialize temperature and cooling rate
    temperature = 50
    cooling_rate = 0.9
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        if not remaining_nodes:
            total = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        else:
            total = distance_matrix[current_node][node]
            min_remaining_distance = float('inf')
            for next_node_candidate in remaining_nodes:
                distance = distance_matrix[node][next_node_candidate]
                if distance < min_remaining_distance:
                    min_remaining_distance = distance
            total += min_remaining_distance
            total += distance_matrix[node][destination_node] * 0.7  # Using destination_weight = 0.7 as in No.2 algorithm
        if total < min_total:
            min_total = total
            next_node = node
    
    # Check if destination node is a valid choice and potentially better
    if destination_node in unvisited_nodes:
        destination_total = distance_matrix[current_node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            min_remaining_distance = float('inf')
            for node in remaining_nodes:
                distance = distance_matrix[destination_node][node]
                if distance < min_remaining_distance:
                    min_remaining_distance = distance
            destination_total += min_remaining_distance
        if destination_total < min_total:
            min_total = destination_total
            next_node = destination_node
    
    # List of nodes with their estimated total path lengths
    node_totals = []
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        if not remaining_nodes:
            total = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        else:
            total = distance_matrix[current_node][node]
            min_remaining_distance = float('inf')
            for next_node_candidate in remaining_nodes:
                distance = distance_matrix[node][next_node_candidate]
                if distance < min_remaining_distance:
                    min_remaining_distance = distance
            total += min_remaining_distance
            total += distance_matrix[node][destination_node] * 0.7
        node_totals.append((node, total))
    
    while temperature > 0.1:
        # Choose a node probabilistically based on their estimated total path lengths
        node_totals_sorted = sorted(node_totals, key=lambda x: x[1])
        min_total = node_totals_sorted[0][1]
        if random.random() < math.exp(-temperature / 10):
            next_node = random.choice([node for node, total in node_totals])
        else:
            next_node = node_totals_sorted[0][0]
        
        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue
        
        # Accept the chosen node with a certain probability
        chosen_node_total = next((total for node, total in node_totals if node == next_node), None)
        if random.random() < math.exp((min_total - chosen_node_total) / temperature):
            return next_node
        
        temperature *= cooling_rate
    
    # Return the node with the minimum estimated total path length if the temperature is too low
    return next_node
