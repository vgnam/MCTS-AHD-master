def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_total = float('inf')
    next_node = None
    exploration_weight = 0.4  # New parameter to balance exploration and destination-oriented behavior
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        
        if not remaining_nodes:
            total = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        else:
            total = distance_matrix[current_node][node] * (1 - exploration_weight) + distance_matrix[node][destination_node] * exploration_weight
            remaining_nodes_average_distance = sum(distance_matrix[n][destination_node] for n in remaining_nodes) / len(remaining_nodes)
            total += remaining_nodes_average_distance
        
        if total < min_total:
            min_total = total
            next_node = node
    
    if destination_node in unvisited_nodes:
        destination_total = distance_matrix[current_node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            destination_total += sum(distance_matrix[destination_node][node] for node in remaining_nodes) / len(remaining_nodes)
        if destination_total < min_total:
            next_node = destination_node
    
    return next_node
