def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_score = float('inf')
    next_node = None
    k = min(3, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]
        global_cost = distance_matrix[node][destination_node] if node != destination_node else 0
        score = 0.4 * local_cost + 0.6 * global_cost
        if score < min_score:
            min_score = score
            next_node = node
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        score = 0.4 * local_cost + 0.6 * global_cost
        if score < min_score:
            next_node = destination_node
    
    return next_node
