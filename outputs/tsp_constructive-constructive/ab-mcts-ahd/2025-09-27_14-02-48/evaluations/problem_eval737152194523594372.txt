import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Simulated annealing-inspired temperature parameter
    T = 100 / (1 + len(unvisited_nodes))

    candidates = []
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]

    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]

        # Global cost evaluation with an additional penalty term
        global_cost = 0
        penalty = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
                # Penalty term based on the average distance to other unvisited nodes
                avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
                penalty = max(0, avg_distance - distance_matrix[node][nearest_remaining])
            else:
                global_cost = distance_matrix[node][destination_node]

        # Dynamic weight adjustment inspired by simulated annealing and node density
        density = 1 / (1 + math.exp(-len(unvisited_nodes) / 10))
        local_weight = 0.7 * (1 - density) + 0.5 * density
        global_weight = 0.3 * (1 - density) + 0.5 * density
        weight_local = local_weight + (0.3 * (1 - math.exp(-T)))
        weight_global = global_weight - (0.3 * (1 - math.exp(-T)))

        score = weight_local * local_cost + weight_global * global_cost + 0.1 * penalty
        candidates.append((node, score))

    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        penalty = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
            avg_distance = sum(distance_matrix[destination_node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = max(0, avg_distance - distance_matrix[destination_node][nearest_remaining])

        density = 1 / (1 + math.exp(-len(unvisited_nodes) / 10))
        local_weight = 0.7 * (1 - density) + 0.5 * density
        global_weight = 0.3 * (1 - density) + 0.5 * density
        weight_local = local_weight + (0.3 * (1 - math.exp(-T)))
        weight_global = global_weight - (0.3 * (1 - math.exp(-T)))

        score = weight_local * local_cost + weight_global * global_cost + 0.1 * penalty
        candidates.append((destination_node, score))

    # Probabilistic selection with temperature-based exploration
    scores = [score for (node, score) in candidates]
    min_score = min(scores)
    max_score = max(scores)

    if min_score != max_score:
        normalized_scores = [(max_score - score) / (max_score - min_score) for score in scores]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]
    else:
        probabilities = [1.0 / len(candidates) for _ in candidates]

    next_node = random.choices([node for (node, score) in candidates], weights=probabilities, k=1)[0]
    return next_node
