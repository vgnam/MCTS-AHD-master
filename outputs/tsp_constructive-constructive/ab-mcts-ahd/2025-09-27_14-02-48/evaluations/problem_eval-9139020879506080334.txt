import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    min_total = float('inf')
    next_node = None
    temperature = 100  # Initial temperature
    cooling_rate = 0.95  # Cooling rate for simulated annealing
    
    for node in unvisited_nodes:
        remaining_nodes = unvisited_nodes - {node}
        if destination_node in remaining_nodes:
            remaining_nodes.remove(destination_node)
        
        if not remaining_nodes:
            total = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        else:
            total = distance_matrix[current_node][node]
            for next_node_candidate in remaining_nodes:
                total += distance_matrix[node][next_node_candidate]
            total += distance_matrix[next_node_candidate][destination_node] * (0.7 + (random.random() - 0.5) * temperature / 100)
        
        # Penalty for increasing total path length
        if total > distance_matrix[current_node][destination_node] + distance_matrix[destination_node][node]:
            total *= 1.1
        
        if total < min_total:
            min_total = total
            next_node = node
    
    if destination_node in unvisited_nodes:
        destination_total = distance_matrix[current_node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            for node in remaining_nodes:
                destination_total += distance_matrix[destination_node][node] * (0.7 + (random.random() - 0.5) * temperature / 100)
            destination_total += distance_matrix[node][current_node]
        if destination_total < min_total:
            next_node = destination_node
    
    temperature *= cooling_rate  # Cool down the temperature
    
    return next_node
