import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
    
    scores = []
    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)
            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]
        score = 0.7 * local_cost + 0.3 * global_cost
        scores.append((node, score))
    
    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]
        score = 0.7 * local_cost + 0.3 * global_cost
        scores.append((destination_node, score))
    
    # Apply softmax to scores and select a node probabilistically
    scores.sort(key=lambda x: x[1])
    min_score = scores[0][1]
    scores = [(node, math.exp(-(score - min_score) / 0.1)) for node, score in scores]
    sum_scores = sum(score for _, score in scores)
    probabilities = [(node, score / sum_scores) for node, score in scores]
    r = random.random()
    cumulative_prob = 0
    for node, prob in probabilities:
        cumulative_prob += prob
        if r <= cumulative_prob:
            return node
    
    return next_node
