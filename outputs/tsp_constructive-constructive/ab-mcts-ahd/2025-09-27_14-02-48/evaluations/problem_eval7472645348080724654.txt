import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]

    # Dynamic weight adjustment based on remaining nodes and exploration phase
    exploration_phase = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))
    local_weight = 0.7 * (1 - exploration_phase) + 0.3 * exploration_phase
    global_weight = 0.3 * (1 - exploration_phase) + 0.7 * exploration_phase
    destination_weight = 0.2 * (1 - exploration_phase) + 0.8 * exploration_phase

    # Momentum-based path memory (simplified)
    path_memory = {}
    for node in unvisited_nodes:
        path_memory[node] = distance_matrix[current_node][node] * 0.5 + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) * 0.5

    # Novelty bonus based on node visit frequency
    novelty_bonus = {}
    total_unvisited = len(unvisited_nodes)
    for node in unvisited_nodes:
        novelty_bonus[node] = math.log(1 + total_unvisited / (1 + (node % 10)))  # Simplified frequency tracking

    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0
        destination_cost = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)

            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]

        # Combined score with momentum and novelty
        score = (local_weight * local_cost +
                 global_weight * global_cost +
                 destination_weight * destination_cost +
                 0.2 * path_memory[node] -
                 0.1 * novelty_bonus[node])

        candidates.append((node, score))

    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0
        destination_cost = 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]

        score = (local_weight * local_cost +
                 global_weight * global_cost +
                 destination_weight * destination_cost +
                 0.2 * path_memory[destination_node] -
                 0.1 * novelty_bonus[destination_node])

        candidates.append((destination_node, score))

    # Temperature-based probabilistic selection
    temperature = max(0.1, 1.0 - len(unvisited_nodes) / len(distance_matrix))
    scores = [score for (node, score) in candidates]
    min_score = min(scores)
    max_score = max(scores)

    if min_score != max_score:
        normalized_scores = [(max_score - score) / (max_score - min_score) for score in scores]
        total = sum(math.exp(score / temperature) for score in normalized_scores)
        probabilities = [math.exp(score / temperature) / total for score in normalized_scores]
    else:
        probabilities = [1.0 / len(candidates) for _ in candidates]

    next_node = random.choices([node for (node, score) in candidates], weights=probabilities, k=1)[0]
    return next_node
