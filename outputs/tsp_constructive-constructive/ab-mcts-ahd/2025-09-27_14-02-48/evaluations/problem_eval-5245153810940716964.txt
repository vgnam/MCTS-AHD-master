import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    k = min(5, len(unvisited_nodes))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]

    for node in nearest_neighbors:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)

            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]

        local_weight = 0.2
        global_weight = 0.8

        score = local_weight * local_cost + global_weight * global_cost
        candidates.append((node, score))

    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]

        local_weight = 0.2
        global_weight = 0.8

        score = local_weight * local_cost + global_weight * global_cost
        candidates.append((destination_node, score))

    scores = [score for (node, score) in candidates]
    min_score = min(scores)
    max_score = max(scores)

    if min_score != max_score:
        normalized_scores = [(max_score - score) / (max_score - min_score) for score in scores]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]
    else:
        probabilities = [1.0 / len(candidates) for _ in candidates]

    if destination_node in unvisited_nodes and random.random() < 0.3:
        next_node = destination_node
    else:
        next_node = random.choices([node for (node, score) in candidates], weights=probabilities, k=1)[0]

    return next_node
