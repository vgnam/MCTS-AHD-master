import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    initial_temperature = 50
    cooling_rate = 0.9
    exploration_decay = 0.8
    momentum_factor = 0.3

    temperature = initial_temperature
    exploration_prob = 1.0
    last_choice = None

    min_distance = float('inf')
    nearest_neighbor = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            nearest_neighbor = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
    else:
        destination_distance = float('inf')

    while temperature > 0.1:
        exploration_prob *= exploration_decay
        random_prob = random.random()

        if random_prob < exploration_prob:
            if last_choice and random.random() < momentum_factor:
                next_node = last_choice
            else:
                next_node = random.choice(list(unvisited_nodes))
        else:
            if destination_distance < min_distance:
                next_node = destination_node
            else:
                next_node = nearest_neighbor

        if next_node not in unvisited_nodes:
            temperature *= cooling_rate
            continue

        distance_ratio = min_distance / distance_matrix[current_node][next_node] if distance_matrix[current_node][next_node] > 0 else 1.0
        acceptance_prob = math.exp((distance_ratio - 1) / (temperature * 0.5))

        if next_node == destination_node or random.random() < acceptance_prob:
            last_choice = next_node
            return next_node

        temperature *= cooling_rate

    return next_node
