def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    local_weight = 0.6
    global_weight = 0.4

    if len(unvisited_nodes) > 1:
        remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        local_weight = 0.7 - 0.1 * remaining_ratio
        global_weight = 1.0 - local_weight

    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            if destination_node in remaining_nodes:
                remaining_nodes.remove(destination_node)

            if remaining_nodes:
                nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
                global_cost = distance_matrix[node][nearest_remaining] + distance_matrix[nearest_remaining][destination_node]
            else:
                global_cost = distance_matrix[node][destination_node]

        penalty = 1.0
        if len(unvisited_nodes) > 2:
            penalty = 1.0 + 0.1 * (len(unvisited_nodes) - 2)

        score = local_weight * local_cost + global_weight * global_cost * penalty

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {destination_node}
            nearest_remaining = min(remaining_nodes, key=lambda x: distance_matrix[destination_node][x])
            global_cost = distance_matrix[destination_node][nearest_remaining] + distance_matrix[nearest_remaining][current_node]

        score = local_weight * local_cost + global_weight * global_cost

        if score < min_score:
            next_node = destination_node

    return next_node
