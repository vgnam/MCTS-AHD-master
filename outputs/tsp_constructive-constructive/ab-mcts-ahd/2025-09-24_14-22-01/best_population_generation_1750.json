"def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    min_cost = float('inf')\n    next_node = None\n    decay_factor = 0.3\n    max_distance_threshold = 1.5\n    remaining_nodes = len(unvisited_nodes)\n    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0\n    weight_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))\n    base_weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))\n    weight = base_weight * (1 + centrality) if centrality > 0.5 else base_weight * (1 - centrality)\n\n    for node in unvisited_nodes:\n        if node == destination_node:\n            continue\n        immediate_distance = distance_matrix[current_node][node]\n        potential_distance = distance_matrix[node][destination_node]\n        adjusted_cost = weight * immediate_distance + (1 - weight) * potential_distance + decay_factor * (immediate_distance + potential_distance)\n        if immediate_distance > max_distance_threshold:\n            adjusted_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.1)\n        if adjusted_cost < min_cost:\n            min_cost = adjusted_cost\n            next_node = node\n    if next_node is None:\n        next_node = destination_node\n    return next_node"