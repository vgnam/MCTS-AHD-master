def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / (potential_distance + 1e-10)

        # Calculate node centrality (average distance to other nodes)
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        # Calculate distance entropy (measure of variability in distances)
        distances = [d for d in distance_matrix[node] if d != 0]
        entropy = -sum((d / sum(distances)) * math.log(d / sum(distances)) for d in distances) if sum(distances) > 0 else 0

        # Novelty score combines centrality and entropy
        novelty_score = 0.4 * centrality + 0.6 * entropy

        dynamic_weight = 0.6 * (1 - progress_ratio)
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        adaptive_penalty = 0.4 * (1 - progress_ratio) * (potential_distance - immediate_distance) if (potential_distance > 1.3 * immediate_distance) else 0
        total_cost = weighted_cost + adaptive_penalty + 0.2 * distance_ratio + 0.3 * novelty_score

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
