def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    time_decay = 1.0 / (1.0 + 0.1 * total_unvisited)
    destination_weight = 0.7 * time_decay

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited

        if node == destination_node:
            weighted_cost = immediate_distance * (1 - destination_weight) + centrality * 0.2
        else:
            weighted_cost = immediate_distance * (1 + destination_weight) + centrality * 0.3

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
