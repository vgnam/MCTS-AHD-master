def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    total_remaining = len(remaining_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / total_remaining
    node_density = {node: len([n for n in remaining_nodes if distance_matrix[node][n] <= avg_distance * 1.2]) for node in remaining_nodes}

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        density_factor = node_density[node] / total_remaining if total_remaining > 0 else 1.0
        centrality_factor = sum(distance_matrix[node][n] for n in remaining_nodes) / total_remaining

        dynamic_weight_immediate = 0.6 + 0.15 * density_factor
        dynamic_weight_potential = 0.2 + 0.25 * (centrality_factor / (avg_distance * 1.5))
        dynamic_weight_centrality = 0.2 - 0.1 * density_factor

        centrality_cost = (centrality_factor / avg_distance) if avg_distance > 0 else 1.0
        total_cost = (dynamic_weight_immediate * immediate_distance +
                      dynamic_weight_potential * potential_distance +
                      dynamic_weight_centrality * centrality_cost)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
