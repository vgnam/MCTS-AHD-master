def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_path_length = len(unvisited_nodes) + 1
    dynamic_weight = 0.5 if remaining_path_length > 1 else 0.3

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        connectivity_heuristic = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        harmonic_mean = (2 * connectivity_heuristic * distance_to_destination) / (connectivity_heuristic + distance_to_destination) if (connectivity_heuristic + distance_to_destination) > 0 else 0

        revisit_penalty = 1.0 if node in unvisited_nodes else 0.8

        total_score = (dynamic_weight * distance_to_current + 0.4 * harmonic_mean) * revisit_penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
