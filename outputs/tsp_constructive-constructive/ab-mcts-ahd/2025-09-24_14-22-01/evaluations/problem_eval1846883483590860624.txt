def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    exploration_weight = 1.0 / (1.0 + remaining_nodes)
    exploitation_weight = 1.0 - exploration_weight
    sigmoid = 1.0 / (1.0 + math.exp(-remaining_nodes + 3))
    dynamic_weight = sigmoid * exploration_weight + (1 - sigmoid) * exploitation_weight
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_cost = (immediate_distance ** dynamic_weight) * (potential_distance ** (1 - dynamic_weight))
        if dynamic_cost < min_cost:
            min_cost = dynamic_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
