def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    costs = []
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            costs.append(0.0)
            continue

        immediate_dist = distance_matrix[current_node][node]
        potential_dist = distance_matrix[node][destination_node]

        # Destination alignment factor
        dest_alignment = 1 - (potential_dist / (distance_matrix[current_node][destination_node] + 1e-6))

        # Proximity bias
        proximity_bias = 1 / (immediate_dist + 1e-6)

        # Diversity bonus (simplified)
        diversity_bonus = 1 - (remaining_nodes / total_nodes)

        # Hybrid cost function
        cost = (0.4 * immediate_dist + 0.3 * potential_dist * dest_alignment +
                0.2 * proximity_bias + 0.1 * diversity_bonus)
        costs.append(cost)

    # Normalize costs to probabilities
    min_cost = min(costs)
    max_cost = max(costs)
    if min_cost == max_cost:
        probabilities = [1.0 / len(costs)] * len(costs)
    else:
        normalized_costs = [(cost - min_cost) / (max_cost - min_cost) for cost in costs]
        probabilities = [1 - (cost / (sum(normalized_costs) + 1e-6)) for cost in normalized_costs]

    # Select node probabilistically
    next_node = unvisited_nodes[np.random.choice(len(unvisited_nodes), p=probabilities)]

    return next_node
