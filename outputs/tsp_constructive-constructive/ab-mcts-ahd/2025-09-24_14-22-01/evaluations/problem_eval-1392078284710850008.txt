def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.3
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    gamma = remaining_nodes / total_nodes

    if not unvisited_nodes:
        return destination_node

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_factor = 1 / (1 + potential_distance)

        if immediate_distance == 0 or potential_distance == 0:
            combined_weight = float('inf')
        else:
            weighted_immediate = immediate_distance * (1 + centrality)
            weighted_potential = potential_distance * (1 - centrality)
            combined_weight = (weighted_immediate + weighted_potential) / 2

        dynamic_weight = 0.3 * (1 - gamma)
        cost = combined_weight + dynamic_weight * exploration_factor

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
