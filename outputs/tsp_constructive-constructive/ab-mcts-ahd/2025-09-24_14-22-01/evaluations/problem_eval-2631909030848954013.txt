def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    if remaining_nodes == 0:
        return destination_node

    # Calculate node centrality (average distance to other unvisited nodes)
    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 * (1 - (remaining_nodes / len(unvisited_nodes))) + 0.5 * (centrality[node] / max(centrality.values()) if centrality else 0)
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
