importance" factor based on the node's position in the remaining graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = set(unvisited_nodes) | {current_node, destination_node}
    num_remaining = len(remaining_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic temperature parameter (decreases as nodes are visited)
    temperature = max(0.1, 1.0 - (total_nodes - num_remaining) / total_nodes)

    # Adaptive weights
    alpha = min(0.9, 0.2 + 0.7 * (num_remaining / total_nodes))
    beta = 1 - alpha

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Centrality: average distance to remaining nodes
        centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / num_remaining

        # Node importance: node's centrality relative to the graph
        node_importance = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes

        # Temperature-adjusted cost function
        weighted_cost = (alpha * immediate_distance +
                        beta * potential_distance +
                        0.4 * centrality +
                        0.3 * node_importance) * temperature

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
