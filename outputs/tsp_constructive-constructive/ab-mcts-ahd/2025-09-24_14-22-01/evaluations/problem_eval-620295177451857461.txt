def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    immediate_weight = 1.0 - visited_ratio
    potential_weight = visited_ratio

    if unvisited_nodes:
        centroid_node = min(unvisited_nodes, key=lambda node: sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
    else:
        centroid_node = destination_node

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centroid_distance = distance_matrix[node][centroid_node]

        weighted_cost = immediate_weight * immediate_distance + potential_weight * potential_distance + 0.2 * centroid_distance

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
