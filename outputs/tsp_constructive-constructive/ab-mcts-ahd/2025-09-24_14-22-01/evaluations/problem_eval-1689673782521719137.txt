importance" metric combining centrality, connectivity, and potential path quality, applies adaptive bonuses for high-importance nodes when few options remain, and uses a distance-to-destination penalty to guide the path toward the destination more effectively.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    exploration_factor = (visited_nodes / total_nodes) ** 1.5

    # Calculate node importance (novel metric)
    centrality = [sum(distance_matrix[node]) / total_nodes for node in range(total_nodes)]
    connectivity = [sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0) for node in range(total_nodes)]
    potential_path_quality = [sum(distance_matrix[node][n] for n in range(total_nodes) if n != node) / (total_nodes - 1) for node in range(total_nodes)]

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        revisit_penalty = 1.0 if node in unvisited_nodes else 1.5

        # Node importance metric (combination of centrality, connectivity, and potential path quality)
        node_importance = (centrality[node] * 0.4 + connectivity[node] * 0.3 + potential_path_quality[node] * 0.3)

        # Adaptive importance bonus when few options remain
        importance_bonus = 1.0
        if len(unvisited_nodes) < total_nodes / 3:
            importance_bonus = 1.0 - (node_importance / max(centrality + connectivity + potential_path_quality)) * 0.4

        # Distance-to-destination penalty to guide toward destination
        distance_to_dest_penalty = 1.0 + (potential_distance / max(max(row) for row in distance_matrix)) * 0.2

        weighted_cost = (
            (immediate_distance * (1 - exploration_factor) +
             potential_distance * exploration_factor) *
            revisit_penalty *
            importance_bonus *
            distance_to_dest_penalty
        )

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
