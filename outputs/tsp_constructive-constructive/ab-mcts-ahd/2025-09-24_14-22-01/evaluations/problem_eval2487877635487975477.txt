def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        weight_current = 0.2 + (0.5 * (1 - progress_ratio))
        weight_destination = 0.3 + (0.4 * progress_ratio)
        weight_centrality = 0.5 - (0.3 * progress_ratio)

        penalty = 0.1 * distance_to_current if distance_to_current < 0.2 * max(distance_matrix[current_node]) else 0

        combined_score = (weight_current * distance_to_current) + \
                         (weight_destination * distance_to_destination) + \
                         (weight_centrality * centrality) + penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node
    return next_node
