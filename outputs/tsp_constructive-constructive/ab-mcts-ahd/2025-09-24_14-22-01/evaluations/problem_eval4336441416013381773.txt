def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if len(unvisited_nodes) == 1:
        return destination_node

    remaining_nodes = len(unvisited_nodes) - 1
    weight = 0.7 * (remaining_nodes / (remaining_nodes + 1))
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 0
    threshold = avg_distance * (0.5 + 0.5 * weight)

    best_node = None
    best_cost = float('inf')

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        combined_cost = immediate_distance * (1 - weight) + potential_distance * weight

        if combined_cost < best_cost and combined_cost <= threshold:
            best_cost = combined_cost
            best_node = node

    if best_node is None:
        best_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node] if node != destination_node else float('inf'))

    return next_node
