def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    decay_factor = 0.3
    max_distance_threshold = 1.5
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic threshold adjustment based on remaining path length
        adjusted_threshold = max_distance_threshold * (1 + (remaining_nodes / len(distance_matrix)) * 0.5)

        # Penalize nodes that disrupt progression toward destination
        progression_penalty = 1 + (potential_distance / (distance_matrix[current_node][destination_node] + 1e-6)) * 0.1

        weighted_cost = (immediate_distance + decay_factor * potential_distance) * progression_penalty

        if immediate_distance > adjusted_threshold:
            weighted_cost *= (1 + (immediate_distance - adjusted_threshold) * 0.3)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    # Probabilistic selection to escape local optima
    if next_node is None or (remaining_nodes > 1 and np.random.rand() < 0.2):
        next_node = np.random.choice(unvisited_nodes)

    return next_node
