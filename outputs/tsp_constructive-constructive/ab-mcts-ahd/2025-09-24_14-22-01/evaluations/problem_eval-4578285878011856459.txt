def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    max_score = -float('inf')
    next_node = None
    exploration_weight = 0.3
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    gamma = remaining_nodes / total_nodes

    if not unvisited_nodes:
        return destination_node

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        sum_cost = immediate_distance + potential_distance
        product_cost = immediate_distance * potential_distance
        normalized_cost = product_cost / sum_cost if sum_cost != 0 else 0

        exploration_factor = 1 / (1 + potential_distance)
        dynamic_weight = 0.3 * (1 - gamma)
        weighted_centrality = centrality * (1 + dynamic_weight)
        score = normalized_cost * (1 - weighted_centrality) + dynamic_weight * exploration_factor

        if score > max_score:
            max_score = score
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
