def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    unvisited_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all nodes (including visited ones)
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes

        # Dynamic weight adjustment based on remaining nodes
        if unvisited_count <= 5:
            weight_immediate = 0.5
            weight_potential = 0.3
            weight_centrality = 0.2
        else:
            weight_immediate = 0.6
            weight_potential = 0.3
            weight_centrality = 0.1

        total_cost = (weight_immediate * immediate_distance +
                      weight_potential * potential_distance +
                      weight_centrality * centrality)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
