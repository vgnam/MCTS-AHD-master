def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    progress = 1.0 - (remaining_nodes / (len(distance_matrix) - 1)) if len(distance_matrix) > 1 else 1.0
    sigmoid_weight = 1.0 / (1.0 + math.exp(-10 * (progress - 0.5)))
    min_total_distance = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        cycle_penalty = 1.0 + (0.1 * (len(distance_matrix) - remaining_nodes))
        total_distance = (1 - sigmoid_weight) * current_to_node + sigmoid_weight * node_to_dest * cycle_penalty
        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node
    return next_node
