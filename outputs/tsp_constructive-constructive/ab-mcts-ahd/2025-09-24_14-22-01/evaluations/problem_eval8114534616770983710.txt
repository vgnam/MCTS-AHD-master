def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    time_decay = 0.5 * (1 - remaining_nodes / (remaining_nodes + 1))  # Decreases as progress is made

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        foresighted_distance = distance_matrix[node][destination_node]

        # Calculate path potential: sum of distances to other unvisited nodes
        path_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        # Dynamic weight balances immediate distance, foresight, and path potential
        dynamic_weight = 0.3 + 0.7 * time_decay
        weighted_cost = (dynamic_weight * immediate_distance +
                        (1 - dynamic_weight) * (0.7 * foresighted_distance + 0.3 * path_potential))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
