def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return None

    # Dynamic weight adjustment
    progress_factor = (total_unvisited - len(unvisited_nodes)) / len(unvisited_nodes)
    current_weight = 0.7 - 0.4 * progress_factor
    destination_weight = 0.3 + 0.4 * progress_factor

    # Calculate average distance to current node for novelty factor
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    min_weighted_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Novelty factor: penalize nodes that are too close to the average
        novelty_penalty = abs(distance_to_current - avg_distance) / avg_distance if avg_distance != 0 else 0

        heuristic_factor = current_weight * distance_to_current + destination_weight * distance_to_destination
        weighted_distance = heuristic_factor + 0.1 * (distance_to_current + distance_to_destination) + 0.1 * novelty_penalty

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
