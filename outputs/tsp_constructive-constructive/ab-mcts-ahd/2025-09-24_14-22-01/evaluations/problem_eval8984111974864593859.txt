def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    exploration_factor = max(0.1, 1 - (visited_nodes / total_nodes))  # Decreases as more nodes are visited
    penalty_factor = 0.2  # Penalty for revisiting nodes (simulated here for exploration)
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = (exploration_factor * immediate_distance) + ((1 - exploration_factor) * potential_distance)
        if node in unvisited_nodes:
            weighted_cost *= (1 - penalty_factor)  # Reduce penalty for unvisited nodes
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
