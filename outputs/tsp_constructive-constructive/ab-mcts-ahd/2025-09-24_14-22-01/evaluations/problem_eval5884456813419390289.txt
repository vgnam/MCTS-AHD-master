def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    ratio = remaining_nodes / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on exploration vs exploitation
        weight = ratio ** 2  # More emphasis on immediate distance as ratio decreases
        centrality_penalty = 0.2 * (sum(distance_matrix[node]) / (total_nodes - 1))  # Penalize highly central nodes

        # Novel cost function combining weighted distances and centrality
        total_cost = (weight * immediate_distance) + ((1 - weight) * potential_distance) + centrality_penalty

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
