import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    gamma = remaining_nodes / total_nodes
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    weight_factor = (1.0 / (1.0 + remaining_nodes ** 0.5)) * (1 + centrality)
    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            dynamic_cost = float('inf')
        else:
            dynamic_cost = (immediate_distance ** weight_factor) * (potential_distance ** (1 - weight_factor))

        if dynamic_cost < min_cost:
            min_cost = dynamic_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
