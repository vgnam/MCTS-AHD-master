def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.4
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < float('inf')) / total_nodes
        revisit_penalty = 1 / (1 + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)) if unvisited_nodes else 0
        dynamic_exploration = exploration_weight * (1 / (1 + potential_distance)) * (remaining_nodes / (remaining_nodes + 1)) * node_degree
        weighted_cost = (1 - exploration_weight) * (immediate_distance + 0.7 * potential_distance) - 0.2 * revisit_penalty + dynamic_exploration

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
