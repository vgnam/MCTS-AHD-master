def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    node_density = {}
    for node in unvisited_nodes:
        neighbors = [n for n in unvisited_nodes if n != node]
        if neighbors:
            node_density[node] = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            node_density[node] = 0
    avg_density = sum(node_density.values()) / len(node_density) if node_density else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        heuristic_factor = (immediate_distance + potential_distance) / avg_distance
        density_factor = (node_density[node] / avg_density) if avg_density else 1
        if remaining_nodes > 2:
            weighted_immediate = immediate_distance * (1 + centrality)
            weighted_potential = potential_distance * (0.5 - centrality)
        else:
            weighted_immediate = immediate_distance * (0.5 + centrality)
            weighted_potential = potential_distance * (1 - centrality)
        total_cost = 0.4 * weighted_immediate + 0.3 * weighted_potential + 0.2 * heuristic_factor + 0.1 * (immediate_distance * density_factor)
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
