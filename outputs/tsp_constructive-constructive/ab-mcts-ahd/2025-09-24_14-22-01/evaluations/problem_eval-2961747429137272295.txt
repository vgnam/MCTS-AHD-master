def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    weight = 1.0 / (remaining_nodes + 1)  # Adjust weight based on remaining nodes
    min_total_distance = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        # Balance between immediate proximity and long-term efficiency
        total_distance = (1 - weight) * current_to_node + weight * node_to_dest
        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node
    # When few nodes remain, prioritize the closest node to current
    if remaining_nodes <= 2:
        min_distance = float('inf')
        for node in unvisited_nodes:
            distance = distance_matrix[current_node][node]
            if distance < min_distance:
                min_distance = distance
                next_node = node
    return next_node
