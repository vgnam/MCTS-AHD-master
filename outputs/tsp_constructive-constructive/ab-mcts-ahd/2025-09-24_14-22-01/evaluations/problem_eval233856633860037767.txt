import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    immediate_distances = [distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node]
    if not immediate_distances:
        return destination_node

    std_dev = np.std(immediate_distances)
    max_dist = max(immediate_distances)
    remaining_nodes = len(unvisited_nodes) - 1

    weight = (std_dev / max_dist) * (remaining_nodes / (remaining_nodes + 1)) if max_dist != 0 else 0.5

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = weight * immediate_distance + (1 - weight) * potential_distance

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
