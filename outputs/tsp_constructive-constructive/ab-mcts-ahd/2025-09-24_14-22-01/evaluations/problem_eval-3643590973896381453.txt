def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    node_degrees = [sum(1 for d in row if d > 0) for row in distance_matrix]
    avg_degree = sum(node_degrees) / total_nodes if total_nodes > 0 else 1.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Node degree centrality
        degree_centrality = node_degrees[node] / avg_degree if avg_degree > 0 else 1.0

        # Local neighborhood density
        neighborhood = [n for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node]
        density = len(neighborhood) / (total_nodes - 1) if total_nodes > 1 else 0.0

        # Betweenness centrality approximation
        betweenness = sum(1 for u in neighborhood if u != current_node and u in unvisited_nodes)

        # Adaptive weighting with sigmoid function
        sigmoid = 1 / (1 + math.exp(-(immediate_distance - potential_distance)))
        weight = 0.5 + 0.3 * sigmoid * (1 - degree_centrality) + 0.2 * density

        # Penalty for high betweenness
        penalty = 1.0 + 0.4 * (betweenness / (total_nodes - 1)) if total_nodes > 1 else 1.0

        # Combined cost
        cost = immediate_distance + weight * potential_distance
        cost *= penalty

        if cost < min_cost:
            min_cost = cost
            next_node = node

    return next_node
