def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 1
    proximity_bias = 1 - remaining_ratio
    centrality_weights = [sum(distance_matrix[node]) for node in unvisited_nodes]
    normalized_centrality = [w / max(centrality_weights) if max(centrality_weights) > 0 else 0 for w in centrality_weights]

    best_score = float('inf')
    next_node = None
    for idx, node in enumerate(unvisited_nodes):
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = 0.5 * remaining_ratio + 0.2 * proximity_bias
        combined_score = distance_to_node + weight * distance_to_destination + 0.3 * (1 - normalized_centrality[idx])
        if combined_score < best_score:
            best_score = combined_score
            next_node = node
    return next_node
