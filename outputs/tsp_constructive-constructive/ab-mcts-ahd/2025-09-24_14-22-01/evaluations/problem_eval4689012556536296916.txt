def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.3
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    remaining_count = len(remaining_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / remaining_count
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        local_search_bonus = min([distance_matrix[node][other] for other in remaining_nodes if other != node], default=0)
        novelty_factor = abs(immediate_distance - avg_distance)
        penalty = 0.05 * novelty_factor if immediate_distance > avg_distance else -0.05 * novelty_factor
        dynamic_exploration = exploration_weight * (1 / (1 + potential_distance)) * (remaining_count / (remaining_count + 1))
        weighted_cost = (1 - exploration_weight) * immediate_distance * potential_distance * (1 + centrality) - 0.1 * local_search_bonus + dynamic_exploration + penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
