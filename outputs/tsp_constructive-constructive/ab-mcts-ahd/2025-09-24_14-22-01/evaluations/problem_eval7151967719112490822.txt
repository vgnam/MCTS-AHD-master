def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    dynamic_threshold = avg_potential_distance * 1.2

    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        penalty = 1.0
        if potential_distance > dynamic_threshold:
            penalty = 1.0 + (potential_distance - dynamic_threshold) ** 2 * 0.1
        cost = immediate_distance + 0.4 * potential_distance * penalty
        candidates.append((node, cost))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:min(3, len(candidates))]
    selected_node, _ = top_candidates[np.random.choice(len(top_candidates), p=[0.5, 0.3, 0.2])] if len(top_candidates) > 1 else top_candidates[0]

    return next_node
