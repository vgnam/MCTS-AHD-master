def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    temperature = max(0.1, 1.0 - len(unvisited_nodes) / len(distance_matrix))  # Decaying temperature
    dynamic_threshold = 1.5 * (1 + 0.1 * (len(unvisited_nodes) / len(distance_matrix)))  # Adjusts with remaining nodes
    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        cost = immediate_distance + 0.2 * potential_distance  # Lower decay factor
        if immediate_distance > dynamic_threshold:
            cost *= (1 + 2 * (immediate_distance - dynamic_threshold))  # Stronger penalty
        candidates.append((node, cost))
    if not candidates:
        return destination_node
    # Probabilistic selection with temperature
    costs = [c[1] for c in candidates]
    min_cost = min(costs)
    max_cost = max(costs)
    if max_cost == min_cost:
        probabilities = [1.0 / len(candidates)] * len(candidates)
    else:
        normalized = [(max_cost - c + 1e-6) / (max_cost - min_cost + 1e-6) for c in costs]
        probabilities = [np.exp(n / temperature) for n in normalized]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
    selected = np.random.choice([c[0] for c in candidates], p=probabilities)
    return next_node
