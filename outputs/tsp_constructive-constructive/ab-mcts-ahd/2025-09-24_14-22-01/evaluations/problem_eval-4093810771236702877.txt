def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.8 if remaining_nodes > 2 else 0.2
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            harmonic_mean = float('inf')
        else:
            harmonic_mean = 2 * (immediate_distance * potential_distance) / (immediate_distance + potential_distance)
        centrality_factor = sum(distance_matrix[node]) / len(distance_matrix[node])
        revisit_penalty = (remaining_nodes / (remaining_nodes + 1)) ** (1 / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 1)
        weighted_cost = harmonic_mean * (1 - exploration_factor) + (centrality_factor * exploration_factor) * revisit_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
