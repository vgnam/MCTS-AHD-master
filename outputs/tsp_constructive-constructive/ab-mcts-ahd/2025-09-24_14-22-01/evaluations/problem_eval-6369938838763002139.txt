def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (len(unvisited_nodes) / (len(distance_matrix) - 1)))  # Decreasing temperature
    novelty_bonus = 1.0 + (len(unvisited_nodes) / len(distance_matrix))  # Encourages exploration
    min_cost = float('inf')
    next_node = None
    costs = []

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + (1 - temperature) * potential_distance + novelty_bonus * (node not in visited_recently)

        costs.append((node, weighted_cost))

    if not costs:
        return destination_node

    # Probabilistic selection based on costs
    costs.sort(key=lambda x: x[1])
    probabilities = [1.0 / (i + 1) for i in range(len(costs))]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected_index = np.random.choice(range(len(costs)), p=probabilities)
    next_node = costs[selected_index][0]

    return next_node
