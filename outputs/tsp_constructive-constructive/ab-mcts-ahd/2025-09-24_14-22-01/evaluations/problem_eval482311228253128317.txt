def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    threshold_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes) * 0.8
    node_connectivity = {}
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if distance_matrix[node][n] <= threshold_distance]
        node_connectivity[node] = len(neighbors)
    avg_connectivity = sum(node_connectivity.values()) / len(node_connectivity) if node_connectivity else 1
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        connectivity_factor = node_connectivity[node] / avg_connectivity
        total_cost = 0.6 * immediate_distance + 0.25 * potential_distance + 0.15 * (1 / (1 + connectivity_factor))
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
