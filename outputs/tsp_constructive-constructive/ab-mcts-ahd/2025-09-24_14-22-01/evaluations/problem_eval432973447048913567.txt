def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    # Calculate average distance to all unvisited nodes (local optimization factor)
    avg_local_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_remaining_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes ratio and local optimization
        weight = 0.5 * (1 - remaining_ratio) + 0.2 * (avg_local_distance / max(1, sum(distance_matrix[current_node][n] for n in unvisited_nodes)))
        score = (weight * immediate_distance) + ((1 - weight) * estimated_remaining_distance)

        if score < min_score:
            min_score = score
            next_node = node
    return next_node
