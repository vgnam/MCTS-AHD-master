def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight adjustment
    weight_immediate = 0.6 if remaining_nodes > 4 else 0.3
    weight_potential = 0.3 if remaining_nodes > 4 else 0.5
    weight_centrality = 0.1 if remaining_nodes > 4 else 0.2
    weight_risk = 0.2 if remaining_nodes > 4 else 0.3
    weight_exploration = 0.1

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        # Core cost components
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)

        # Novel components
        risk_factor = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > immediate_distance) / len(unvisited_nodes)
        exploration_term = 1 / (1 + immediate_distance) if remaining_nodes > 3 else 0

        # Combined cost function
        total_cost = (weight_immediate * immediate_distance +
                     weight_potential * potential_distance +
                     weight_centrality * centrality +
                     weight_risk * risk_factor +
                     weight_exploration * exploration_term)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
