defaulting to it only if no other nodes are available.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        sum_cost = immediate_distance + potential_distance
        product_cost = immediate_distance * potential_distance
        normalized_cost = product_cost / sum_cost if sum_cost != 0 else 0
        combined_score = (sum_cost + product_cost + normalized_cost) / 3
        if combined_score > best_score:
            best_score = combined_score
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
