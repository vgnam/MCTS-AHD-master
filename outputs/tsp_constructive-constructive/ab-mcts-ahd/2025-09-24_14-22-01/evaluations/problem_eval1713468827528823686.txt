def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    avg_immediate_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    avg_destination_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid-based dynamic weight
        normalized_immediate = immediate_distance / avg_immediate_distance if avg_immediate_distance > 0 else 0
        normalized_destination = destination_distance / avg_destination_distance if avg_destination_distance > 0 else 0
        score = (1 - weight) * normalized_immediate + weight * normalized_destination
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
