def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    temporal_factor = 2.0 ** (-len(unvisited_nodes))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            harmonic_mean = float('inf')
        else:
            harmonic_mean = 2 / (1/immediate_distance + 1/potential_distance)
        deviation_penalty = abs(distance_matrix[current_node][node] - avg_distance)
        cost = harmonic_mean + deviation_penalty * temporal_factor
        if cost < min_cost:
            min_cost = cost
            next_node = node
    return next_node
