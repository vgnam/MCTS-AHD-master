def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_nodes = len(unvisited_nodes)
    history_penalty = {node: 0 for node in unvisited_nodes}  # Track selection history

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        ratio = remaining_nodes / total_nodes
        weight = 0.5 * (1 + ratio)  # Adjust weight dynamically
        combined_score = (weight * distance_to_current) + ((1 - weight) * distance_to_destination)
        combined_score += history_penalty[node]  # Apply penalty based on selection history
        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    if next_node is not None:
        history_penalty[next_node] += 0.1  # Increase penalty for next selection

    return next_node
