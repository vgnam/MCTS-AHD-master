def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    potential_distances = [distance_matrix[node][destination_node] for node in unvisited_nodes if node != destination_node]
    mean_potential = sum(potential_distances) / len(potential_distances) if potential_distances else 0
    std_potential = (sum((x - mean_potential) ** 2 for x in potential_distances) / len(potential_distances)) ** 0.5 if len(potential_distances) > 1 else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_weight = 1 / (1 + math.exp((remaining_nodes - len(unvisited_nodes) / 2) / 2))
        exploitation_weight = 1 - exploration_weight
        weighted_cost = immediate_distance + (exploration_weight * potential_distance) + (exploitation_weight * (potential_distance - mean_potential) / (std_potential + 1e-6))
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
