def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)

    # Dynamic adaptation factor based on remaining nodes
    adaptation_factor = (1 - (remaining_nodes / total_nodes)) ** 3

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Centrality measure: harmonic mean of distances to avoid bias
        centrality = (total_nodes - 1) / sum(1 / d for d in distance_matrix[node] if d > 0)

        # Exploration factor with temporal discounting
        exploration_factor = (1 / (1 + potential_distance)) * (1 - adaptation_factor)

        # Dynamic weight adjustment
        distance_weight = 0.4 + 0.2 * adaptation_factor
        centrality_weight = 0.3 + 0.3 * adaptation_factor
        exploration_weight = 0.3 - 0.1 * adaptation_factor

        # Reinforcement-inspired cost function
        weighted_cost = (distance_weight * immediate_distance +
                        centrality_weight * centrality +
                        exploration_weight * exploration_factor)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
