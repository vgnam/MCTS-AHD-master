def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    scaling_factor = 1 / (1 + 0.5 * math.log(remaining_nodes + 1))
    weight_immediate = scaling_factor
    weight_potential = 1 - scaling_factor
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        lookahead_factor = 1 + 0.1 * len([n for n in unvisited_nodes if distance_matrix[node][n] < immediate_distance * 1.2])
        weighted_cost = (weight_immediate * immediate_distance + weight_potential * potential_distance) * lookahead_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
