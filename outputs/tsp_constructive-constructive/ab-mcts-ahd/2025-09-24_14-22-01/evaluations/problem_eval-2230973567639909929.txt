def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.4
    base_threshold = 1.5
    if unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        adaptive_threshold = base_threshold * (1 + 0.1 * (avg_distance - base_threshold))
    else:
        adaptive_threshold = base_threshold
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        combined_cost = (immediate_distance * potential_distance) + decay_factor * (immediate_distance + potential_distance)
        if immediate_distance > adaptive_threshold:
            combined_cost *= (1 + (immediate_distance - adaptive_threshold) * 0.2)
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
