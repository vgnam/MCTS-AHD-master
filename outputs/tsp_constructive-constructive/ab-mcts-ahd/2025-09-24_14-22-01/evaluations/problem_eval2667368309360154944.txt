def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.3 * (1 - progress_ratio)
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        penalty = 0.3 * (potential_distance - immediate_distance) if (potential_distance > 1.2 * immediate_distance) else 0
        total_cost = weighted_cost + penalty
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
