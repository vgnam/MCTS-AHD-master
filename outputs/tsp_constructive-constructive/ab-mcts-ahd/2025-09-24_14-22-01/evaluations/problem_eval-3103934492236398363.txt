def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    unvisited_count = len(unvisited_nodes)
    decay_factor = 0.5 + 0.5 * (unvisited_count / total_nodes)
    max_distance_threshold = 2.0
    node_centrality = {}
    for node in unvisited_nodes + [current_node, destination_node]:
        node_centrality[node] = sum(distance_matrix[node]) / (total_nodes - 1)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_factor = node_centrality[node]
        priority_factor = (immediate_distance * potential_distance) + (centrality_factor * decay_factor)
        if immediate_distance > max_distance_threshold:
            priority_factor *= (1 + (immediate_distance - max_distance_threshold) * 0.1)
        if priority_factor < min_cost:
            min_cost = priority_factor
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
