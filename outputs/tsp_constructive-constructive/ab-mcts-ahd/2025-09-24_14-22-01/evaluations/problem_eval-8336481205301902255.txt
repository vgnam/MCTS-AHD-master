importance" factor derived from the distance matrix's row sums, while using a decay factor to prioritize shorter edges and penalize long ones, ensuring efficient path selection.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.3
    max_distance_threshold = 1.5
    remaining_nodes = len(unvisited_nodes)
    node_centrality = {node: sum(distance_matrix[node]) for node in unvisited_nodes if node != destination_node}
    avg_centrality = sum(node_centrality.values()) / len(node_centrality) if node_centrality else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_ratio = node_centrality[node] / avg_centrality if avg_centrality > 0 else 1.0
        weight_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))
        adjusted_cost = immediate_distance * (1 - weight_factor) + potential_distance * weight_factor + decay_factor * centrality_ratio * potential_distance
        if immediate_distance > max_distance_threshold:
            adjusted_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.1)
        if adjusted_cost < min_cost:
            min_cost = adjusted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
