def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = [node for node in unvisited_nodes if node != destination_node]
    num_remaining = len(remaining_nodes)
    if num_remaining == 0:
        return destination_node
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][other] for other in remaining_nodes) / num_remaining
        if num_remaining > 1:
            normalization = num_remaining / (num_remaining - 1)
        else:
            normalization = 1.0
        penalty = 0.2 if node in unvisited_nodes else 0
        dynamic_weight = 0.4 + 0.2 * (num_remaining / len(unvisited_nodes))
        weighted_cost = dynamic_weight * immediate_distance + 0.3 * potential_distance + 0.3 * (avg_distance * normalization) - penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
