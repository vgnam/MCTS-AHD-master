def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.9
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weight_factor = (remaining_nodes + 1) / (remaining_nodes + 2)
        if immediate_distance == 0:
            geometric_mean = float('inf')
        else:
            geometric_mean = immediate_distance
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        revisit_penalty = (remaining_nodes / (remaining_nodes + 1)) ** 3
        weighted_cost = geometric_mean * (1 - alpha) + (position_factor * alpha) * revisit_penalty * weight_factor + potential_distance * 0.1
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
