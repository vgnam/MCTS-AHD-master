import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    base_decay = 0.5
    threshold_decay = 0.3
    dynamic_threshold = 1.2

    # Calculate average remaining distance and centrality
    avg_remaining = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    gamma = len(unvisited_nodes) / len(distance_matrix)
    sigmoid_gamma = 1 / (1 + math.exp(-gamma))

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic threshold adjustment
        adjusted_threshold = dynamic_threshold * (1 + threshold_decay * (potential_distance / avg_remaining))

        # Centrality-aware weighted path potential
        weighted_immediate = immediate_distance * (1 + centrality)
        weighted_potential = potential_distance * (1 - centrality)
        path_potential = (weighted_immediate ** 1.1) + base_decay * (weighted_potential ** 0.9)

        # Dynamic penalty for exceeding adjusted threshold
        if immediate_distance > adjusted_threshold:
            penalty = 2.0 + (immediate_distance - adjusted_threshold) * 0.2
            path_potential *= penalty

        # Deviation term from No.1
        avg_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        deviation = abs(immediate_distance - avg_distance)
        path_potential += deviation * sigmoid_gamma

        if path_potential < min_cost:
            min_cost = path_potential
            next_node = node

    return next_node
