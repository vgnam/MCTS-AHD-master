def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.6 if remaining_nodes > 2 else 0.4
    weight_potential = 0.2 if remaining_nodes > 2 else 0.3
    weight_centrality = 0.05
    weight_lookahead = 0.05

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        lookahead_cost = min([distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node], default=0)
        total_cost = (weight_immediate * immediate_distance +
                      weight_potential * potential_distance +
                      weight_centrality * centrality +
                      weight_lookahead * lookahead_cost)
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
