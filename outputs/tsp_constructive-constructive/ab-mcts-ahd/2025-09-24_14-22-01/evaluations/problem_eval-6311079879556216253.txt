def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    dynamic_weight = min(0.5, 0.1 * len(unvisited_nodes) / total_nodes)

    precomputed_centrality = {}
    for node in unvisited_nodes:
        precomputed_centrality[node] = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        node_centrality = precomputed_centrality[node]
        connectivity = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        cost = immediate_distance * (1 - dynamic_weight) + node_centrality * dynamic_weight + connectivity * 0.2

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
