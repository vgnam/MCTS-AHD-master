def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if remaining_nodes > 1:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            variance = sum((d - sum(distances_to_unvisited)/len(distances_to_unvisited))**2 for d in distances_to_unvisited) / len(distances_to_unvisited)
            weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1))) + 0.5 * (variance / (sum(distances_to_unvisited) + 1e-6))
        else:
            weight = 1.0
        weighted_cost = immediate_distance + weight * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
