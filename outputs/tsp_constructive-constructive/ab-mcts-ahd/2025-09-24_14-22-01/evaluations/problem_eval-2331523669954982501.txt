def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    if remaining_nodes == 0:
        return destination_node

    base_weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)) ** 2)
    deviation_weight = 0.3 * (remaining_nodes / (remaining_nodes + 1)) ** 2
    exploration_weight = 0.2 * (1 - (remaining_nodes / (remaining_nodes + 1)))

    direct_distance = distance_matrix[current_node][destination_node]
    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        deviation = abs(immediate_distance - direct_distance)
        ratio_penalty = (immediate_distance / (potential_distance + 1e-6)) ** 0.5

        weighted_cost = (base_weight * immediate_distance +
                         deviation_weight * deviation +
                         exploration_weight * (potential_distance - avg_potential_distance) +
                         ratio_penalty)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
