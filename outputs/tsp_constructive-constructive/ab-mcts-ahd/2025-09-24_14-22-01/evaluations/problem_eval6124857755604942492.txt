def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (num_unvisited / len(distance_matrix)) if num_unvisited > 0 else 0.0
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_diversity = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1 if num_unvisited > 1 else 1)
        max_diversity = max(distance_matrix[node][other] for other in unvisited_nodes if other != node) if num_unvisited > 1 else 0
        diversity_factor = 0.7 * avg_diversity + 0.3 * max_diversity
        novelty_factor = abs(immediate_distance - avg_distance)
        penalty = 0.05 * novelty_factor if immediate_distance > avg_distance else -0.05 * novelty_factor
        weighted_cost = (0.5 * immediate_distance * (1 - 0.3 * progress_factor)) + (0.4 * potential_distance) + (0.1 * diversity_factor) + penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
