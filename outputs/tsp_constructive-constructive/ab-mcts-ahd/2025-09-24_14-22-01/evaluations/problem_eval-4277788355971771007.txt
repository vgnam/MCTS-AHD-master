def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    visited_frequency = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        diversity_factor = 1 / (1 + visited_frequency.get(node, 0))
        total_cost = immediate_distance + 0.5 * potential_distance + 0.3 * diversity_factor
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    else:
        visited_frequency[next_node] += 1
        lookahead_node = None
        lookahead_min_cost = float('inf')
        remaining_unvisited = [n for n in unvisited_nodes if n != next_node and n != destination_node]
        if remaining_unvisited:
            for candidate in remaining_unvisited:
                candidate_immediate = distance_matrix[next_node][candidate]
                candidate_potential = distance_matrix[candidate][destination_node]
                candidate_cost = candidate_immediate + 0.5 * candidate_potential
                if candidate_cost < lookahead_min_cost:
                    lookahead_min_cost = candidate_cost
                    lookahead_node = candidate
            if lookahead_node is not None:
                next_node = lookahead_node
    return next_node
