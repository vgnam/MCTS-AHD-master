def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    node_density = {}
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if n != node]
        if neighbors:
            node_density[node] = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            node_density[node] = 0
    avg_density = sum(node_density.values()) / len(node_density) if node_density else 0
    current_direction = (destination_node - current_node) if isinstance(current_node, (int, float)) else 0
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        density_factor = (node_density[node] / avg_density) if avg_density else 1
        direction_factor = 1 - abs((node - current_node) - current_direction) / (abs(node - current_node) + abs(current_direction) + 1e-6)
        total_cost = 0.4 * immediate_distance + 0.3 * potential_distance + 0.2 * (immediate_distance * density_factor) + 0.1 * (1 - direction_factor)
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
