defaults to the destination node.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    max_cost = -float('inf')
    next_node = None
    exploration_weight = 0.3  # Lower weight for exploration factor

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_factor = potential_distance  # Encourages further nodes to destination
        weighted_cost = (1 - exploration_weight) * immediate_distance - exploration_weight * exploration_factor
        if weighted_cost > max_cost:
            max_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
