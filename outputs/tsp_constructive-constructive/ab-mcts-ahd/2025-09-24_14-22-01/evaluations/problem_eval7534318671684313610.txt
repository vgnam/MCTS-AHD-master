def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    exploration_factor = 1 / (1 + math.exp(-0.5 * remaining_nodes))
    base_weight = 0.5 * exploration_factor
    deviation_weight = 0.3 * (1 - exploration_factor)
    novelty_weight = 0.2
    momentum_weight = 0.1 * (1 - exploration_factor)
    penalty_factor = 0.5 / (remaining_nodes + 1)
    direct_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        deviation = abs(immediate_distance - direct_distance)
        novelty_penalty = penalty_factor * (1 if node in unvisited_nodes else 0.1)
        momentum_term = momentum_weight * (immediate_distance - direct_distance) ** 2
        weighted_cost = base_weight * immediate_distance + deviation_weight * deviation + (1 - base_weight - deviation_weight - novelty_weight - momentum_weight) * potential_distance - novelty_penalty + momentum_term

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
