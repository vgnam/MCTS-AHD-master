def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
    decay_factor = 0.9 ** remaining_nodes
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    proximity_bias = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / (len(unvisited_nodes) ** 2) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / (potential_distance + 1e-10)
        penalty = 0.2 * (distance_ratio ** 2) * decay_factor
        centrality_weight = (1 + centrality) * (1 - proximity_bias)
        potential_weight = (1 - centrality) * (1 + proximity_bias)
        weighted_cost = immediate_distance * centrality_weight + weight * potential_distance * potential_weight - penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
