import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    node_scores = []
    exploration_weight = 0.4
    memory_penalty = 0.2
    temperature = 0.7

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Memory penalty for recently visited nodes (simplified)
        recency_penalty = memory_penalty * (1 if node in unvisited_nodes else 0)

        # Novelty factor combining centrality and recency
        novelty = (1 - exploration_weight) * centrality + exploration_weight * recency_penalty

        # Weighted score with temperature scaling
        score = math.exp(-(immediate_distance + potential_distance + novelty) / temperature)
        node_scores.append((node, score))

    if not node_scores:
        return destination_node

    # Softmax selection
    nodes, scores = zip(*node_scores)
    total = sum(scores)
    probabilities = [s / total for s in scores]
    next_node = random.choices(nodes, weights=probabilities, k=1)[0]

    return next_node
