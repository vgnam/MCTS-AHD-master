def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    temperature = remaining_nodes / (remaining_nodes + 1)  # Decreases as nodes are visited
    node_scores = {}
    max_score = -float('inf')
    best_node = destination_node
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        popularity = 1 / (1 + len(unvisited_nodes))  # Simple popularity metric
        weighted_cost = immediate_distance + temperature * potential_distance * (1 - popularity)
        node_scores[node] = weighted_cost
        if weighted_cost > max_score:
            max_score = weighted_cost
            best_node = node
    if best_node is None:
        best_node = destination_node
    return next_node
