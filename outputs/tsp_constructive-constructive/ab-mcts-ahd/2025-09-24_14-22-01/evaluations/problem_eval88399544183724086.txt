def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.6  # Weight for immediate distance
    beta = 0.4   # Weight for potential distance to destination
    penalty_factor = 0.2  # Penalty for revisiting nearby nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Penalize revisiting nearby nodes to encourage exploration
        visit_penalty = 0
        if immediate_distance < 5:  # Threshold for nearby nodes
            visit_penalty = penalty_factor * immediate_distance

        weighted_cost = (alpha * immediate_distance) + (beta * potential_distance) + visit_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
