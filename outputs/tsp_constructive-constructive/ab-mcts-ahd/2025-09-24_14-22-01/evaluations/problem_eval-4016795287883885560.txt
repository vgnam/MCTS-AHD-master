def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_immediate = 0.5 * (remaining_nodes / (remaining_nodes + 1)) ** 2
    weight_potential = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)) ** 2)

    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    tolerance = 0.2 * avg_distance

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance < avg_distance - tolerance:
            novelty_bonus = 0.1 * (avg_distance - immediate_distance) ** 2
        else:
            novelty_bonus = 0

        penalty = 0.1 * (immediate_distance - avg_distance) ** 2 if immediate_distance > avg_distance + tolerance else 0

        weighted_cost = (weight_immediate * immediate_distance) + (weight_potential * potential_distance) - novelty_bonus + penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
