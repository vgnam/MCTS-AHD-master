def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1.0 if remaining_nodes <= 2 else 0.7
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = dynamic_weight * immediate_distance + (1 - dynamic_weight) * potential_distance
        weighted_cost += 0.1 * (sum(distance_matrix[node]) / len(distance_matrix[node]))  # Add small randomness
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
