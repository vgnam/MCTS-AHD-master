def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_weighted_distance = float('inf')
    next_node = None
    current_path_length = sum(distance_matrix[current_node][destination_node] for current_node in unvisited_nodes)
    destination_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on path length and destination distance
        if current_path_length < destination_distance:
            weight_current = 0.6
            weight_destination = 0.4
        else:
            weight_current = 0.4
            weight_destination = 0.6

        # Probabilistic selection with penalty for revisited nodes
        heuristic_factor = weight_current * distance_to_current + weight_destination * distance_to_destination
        weighted_distance = heuristic_factor + 0.2 * (distance_to_current + distance_to_destination)

        # Penalty for nodes that were previously considered but not chosen
        if node in unvisited_nodes and node != next_node:
            weighted_distance *= 1.1

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
