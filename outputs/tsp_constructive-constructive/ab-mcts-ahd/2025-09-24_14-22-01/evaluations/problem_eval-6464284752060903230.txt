def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.5
    max_distance_threshold = 1.2
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    weight_factor = remaining_nodes / total_nodes
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        adjusted_cost = immediate_distance * weight_factor + potential_distance * (1 - weight_factor) + decay_factor * immediate_distance
        if immediate_distance > max_distance_threshold:
            adjusted_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.2)
        if adjusted_cost < min_cost:
            min_cost = adjusted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
