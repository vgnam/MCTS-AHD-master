importance of immediate and long-term distances based on the progress towards the destination, using an exponential decay factor to prioritize proximity as the tour nears completion.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    progress = 1 - (len(unvisited_nodes) / total_nodes)
    decay_factor = 0.5 * (1 - progress)  # Weight decreases as progress increases

    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = 0.5 + decay_factor  # Adjust weight dynamically
        score = weight * distance_to_current + (1 - weight) * distance_to_destination
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
