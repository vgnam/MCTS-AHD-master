def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_unvisited = len(unvisited_nodes) + 1  # Including current node
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    # Dynamic weight using sigmoid function
    sigmoid = 1 / (1 + math.exp(-(remaining_nodes - total_unvisited / 2)))
    exploration_weight = sigmoid
    exploitation_weight = 1 - sigmoid

    costs = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)

        # Balanced cost with global awareness
        cost = (immediate_distance * exploitation_weight +
                potential_distance * exploration_weight +
                avg_potential * 0.2)  # Small weight for global awareness
        costs.append((node, cost))

    if not costs:
        return destination_node

    # Probabilistic selection based on cost
    costs.sort(key=lambda x: x[1])
    min_cost = costs[0][1]
    probabilities = [math.exp(-(cost[1] - min_cost)) for cost in costs]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected_node = random.choices([cost[0] for cost in costs], weights=probabilities, k=1)[0]
    return next_node
