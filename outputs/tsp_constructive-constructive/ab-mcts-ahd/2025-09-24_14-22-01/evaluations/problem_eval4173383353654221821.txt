import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    temperature = max(0.1, 1.0 - remaining_nodes / total_nodes)

    candidates = []
    costs = []

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        normalized_cost = (immediate_distance + potential_distance + centrality) / 3

        candidates.append(node)
        costs.append(normalized_cost)

    if not candidates:
        return destination_node

    min_cost = min(costs)
    max_cost = max(costs)

    if min_cost == max_cost:
        probabilities = [1.0 / len(candidates)] * len(candidates)
    else:
        probabilities = [(max_cost - cost + 1e-6) / (max_cost - min_cost + 1e-6) for cost in costs]
        probabilities = [p ** (1 / temperature) for p in probabilities]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(candidates, weights=probabilities, k=1)[0]

    return next_node
