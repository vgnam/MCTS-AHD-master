def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    exploration_factor = 0.3 + 0.7 * (visited_nodes / total_nodes)
    centrality_penalty = 0.2 / (len(unvisited_nodes) + 1)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_neighbor_distance = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality = avg_neighbor_distance - potential_distance
        weighted_cost = (exploration_factor * immediate_distance +
                        (1 - exploration_factor) * potential_distance +
                        centrality_penalty * centrality)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
