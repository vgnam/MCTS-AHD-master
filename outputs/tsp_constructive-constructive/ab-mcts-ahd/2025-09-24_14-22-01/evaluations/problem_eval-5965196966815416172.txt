def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = max(0.1, 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))  # Dynamic exploration weight
    decay_factor = 0.8  # Decay factor for historical visits
    node_popularity = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        popularity_factor = decay_factor ** node_popularity[node]  # Reduces cost for less popular nodes
        total_cost = (1 - exploration_weight) * immediate_distance + exploration_weight * potential_distance
        total_cost *= popularity_factor  # Adjust cost based on popularity
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    else:
        node_popularity[next_node] += 1  # Update popularity of the selected node
    return next_node
