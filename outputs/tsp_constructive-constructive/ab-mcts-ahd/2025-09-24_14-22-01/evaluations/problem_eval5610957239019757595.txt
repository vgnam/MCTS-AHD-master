def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.5 * (1.0 + 1.0 / (1.0 + remaining_nodes))
    weight_potential = 0.5 * (1.0 - 1.0 / (1.0 + remaining_nodes))
    weight_centrality = min(0.5, 0.5 * (remaining_nodes / (remaining_nodes + 1)))
    costs = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        dynamic_cost = (immediate_distance ** weight_immediate) * (potential_distance ** weight_potential) * (centrality ** weight_centrality)
        costs.append((dynamic_cost, node))
    costs.sort()
    selected = costs[0][1] if remaining_nodes > 1 else destination_node
    return next_node
