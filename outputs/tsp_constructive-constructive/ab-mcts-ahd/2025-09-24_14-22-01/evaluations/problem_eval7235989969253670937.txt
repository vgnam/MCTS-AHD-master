importance score that combines local distance, global connectivity, and adaptive penalty factors, using a hybrid cost function with non-linear scaling to prioritize nodes that balance proximity, centrality, and potential path efficiency while dynamically adjusting weights based on the current path state.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_cost = float('inf')
    total_nodes = len(distance_matrix)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic importance factors
        distance_ratio = immediate_distance / (avg_distance + 1e-6)
        centrality = sum(distance_matrix[node]) / total_nodes if total_nodes > 0 else 1.0
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * avg_distance) / len(unvisited_nodes) if unvisited_nodes else 0

        # Adaptive penalty and weight factors
        penalty_factor = 1.0 + 0.5 * (centrality * (1 - connectivity)) / (distance_ratio + 1e-6)
        weight_factor = 0.5 * (1 - distance_ratio) + 0.3 * connectivity + 0.2 * (1 - centrality)

        # Hybrid cost function
        weighted_cost = immediate_distance + weight_factor * potential_distance
        weighted_cost *= penalty_factor

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
