def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    gamma = len(unvisited_nodes) / (len(distance_matrix) * len(unvisited_nodes)) if unvisited_nodes else 1.0
    alpha = 0.7  # Weight for immediate distance
    beta = 0.3   # Weight for potential distance

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            combined_mean = float('inf')
        else:
            harmonic_mean = 2 / (1/immediate_distance + 1/potential_distance)
            geometric_mean = (immediate_distance * potential_distance) ** 0.5
            combined_mean = (alpha * harmonic_mean + beta * geometric_mean) / (alpha + beta)

        deviation = abs(immediate_distance - avg_distance)
        cost = combined_mean + deviation * gamma

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
