defaults to the destination node if no other options remain.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_factor = 0.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        revisit_penalty = 1.0 + (0.1 * (len(unvisited_nodes) - len(set(unvisited_nodes))))
        weighted_cost = (immediate_distance * (1 - exploration_factor) + potential_distance * exploration_factor) * revisit_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
