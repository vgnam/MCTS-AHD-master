def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.3 + 0.7 * (1 / (remaining_nodes + 1))  # Modified dynamic weight
    min_cost = float('inf')
    next_node = None
    penalty_factor = 1.5
    detour_threshold = 1.8  # Tighter threshold for detour penalty

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        path_efficiency = immediate_distance / distance_matrix[current_node][destination_node]

        # Novel cost function with logarithmic scaling
        weighted_cost = immediate_distance + base_weight * potential_distance * (1 + math.log1p(path_efficiency))

        # Tighter penalty for detours
        if path_efficiency > detour_threshold:
            weighted_cost *= penalty_factor

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
