def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes and node centrality
        exploration_weight = 1 - (remaining_nodes / total_nodes)
        exploitation_weight = (remaining_nodes / total_nodes) ** 2

        # Centrality factor: average distance to all other nodes
        centrality = sum(distance_matrix[node]) / total_nodes

        # Novel cost function combining immediate, potential, and centrality
        weighted_cost = (immediate_distance * exploration_weight +
                         potential_distance * exploitation_weight +
                         centrality * 0.2)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
