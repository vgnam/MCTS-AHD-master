def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    alpha = 0.3 + 0.7 * (remaining_nodes / (remaining_nodes + 1))
    beta = 1 - alpha
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    max_distance_threshold = 1.5
    decay_factor = 0.3

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        weighted_immediate = immediate_distance * (1 + centrality) if centrality > 0.5 else immediate_distance * (1 - centrality)
        weighted_potential = potential_distance * (1 - centrality) if centrality > 0.5 else potential_distance * (1 + centrality)
        weighted_cost = alpha * weighted_immediate + beta * weighted_potential + decay_factor * (immediate_distance + potential_distance)

        if immediate_distance > max_distance_threshold:
            weighted_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.1)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
