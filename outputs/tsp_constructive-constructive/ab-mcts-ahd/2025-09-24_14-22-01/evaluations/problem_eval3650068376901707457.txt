def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    num_unvisited = len(unvisited_nodes)
    min_cost = float('inf')
    next_node = None
    exploration_factor = 0.5 * (1 - (num_unvisited / (num_unvisited + 10)))  # Increases exploration early, decreases later
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.6 * (num_unvisited / (num_unvisited + 7))  # Adjusted decay for balance
        weighted_cost = immediate_distance + dynamic_weight * potential_distance + exploration_factor * (immediate_distance - potential_distance)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
