def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function based on remaining nodes
        sigmoid_weight = 1 / (1 + np.exp(-5 * (remaining_nodes / total_nodes - 0.5)))

        # Penalty for revisiting nodes (encourages exploration)
        revisit_penalty = 0.1 * (1 - (remaining_nodes / total_nodes))

        total_cost = (1 - sigmoid_weight) * immediate_distance + sigmoid_weight * potential_distance + revisit_penalty

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
