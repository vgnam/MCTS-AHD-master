def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Dynamic weight
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        combined_cost = weight * immediate_distance * potential_distance + (1 - weight) * (immediate_distance + potential_distance)
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
