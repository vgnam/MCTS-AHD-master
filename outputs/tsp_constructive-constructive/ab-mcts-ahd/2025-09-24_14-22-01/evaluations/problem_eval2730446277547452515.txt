def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    exploration_factor = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 2)))
    weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        penalty = 0.3 * (potential_distance / max(distance_matrix[node])) if max(distance_matrix[node]) > 0 else 0
        exploration_bonus = exploration_factor * (1 / (1 + sum(distance_matrix[node])))
        weighted_cost = immediate_distance + weight * potential_distance - penalty + exploration_bonus
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
