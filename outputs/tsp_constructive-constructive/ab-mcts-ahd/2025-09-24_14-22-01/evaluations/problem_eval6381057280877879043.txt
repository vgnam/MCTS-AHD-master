importance increases as the tour progresses. It also incorporates a penalty for revisiting nodes to avoid cycles early.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    total_nodes = len(distance_matrix)
    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    centrality_weights = {node: sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes or 1)
                         for node in unvisited_nodes}

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_potential = potential_distance / avg_potential_distance
        centrality = centrality_weights[node] / (sum(centrality_weights.values()) / len(centrality_weights) if centrality_weights else 1)

        progress_factor = 1 - (remaining_nodes / total_nodes)
        weight_factor = (progress_factor ** 2) * 0.7 + 0.3
        centrality_weight = progress_factor * 0.5 + 0.5

        weighted_cost = (immediate_distance * (normalized_potential ** weight_factor) *
                         (centrality ** centrality_weight))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
