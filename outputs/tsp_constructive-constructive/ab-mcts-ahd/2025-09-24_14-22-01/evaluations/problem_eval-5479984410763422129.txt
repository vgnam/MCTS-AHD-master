def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.25
    base_threshold = 1.5
    memory_factor = 0.1
    path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)
    dynamic_threshold = base_threshold + memory_factor * path_length

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        cost = immediate_distance + decay_factor * potential_distance

        if immediate_distance > dynamic_threshold:
            penalty = (immediate_distance - dynamic_threshold) ** 1.5
            cost += penalty * (1 + memory_factor * len(unvisited_nodes))

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
