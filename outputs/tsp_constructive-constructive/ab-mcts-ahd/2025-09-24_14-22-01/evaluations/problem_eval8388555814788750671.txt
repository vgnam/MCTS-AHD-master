def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    centrality_weight = 0.5 / (remaining_nodes + 1)
    detour_avoidance = 1.2 - (0.2 / (remaining_nodes + 1))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        cost = (immediate_distance * detour_avoidance) + (centrality_score * centrality_weight) + (potential_distance * (1 - centrality_weight))
        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
