def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1))) ** 2
    diversity_factor = 1.0 / (1 + remaining_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        penalty = 0.3 * (immediate_distance + potential_distance) / (max(distance_matrix[node]) + 1)
        diversity_penalty = diversity_factor * (1 if node in unvisited_nodes else 0.5)
        weighted_cost = immediate_distance + weight * potential_distance - penalty + diversity_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
