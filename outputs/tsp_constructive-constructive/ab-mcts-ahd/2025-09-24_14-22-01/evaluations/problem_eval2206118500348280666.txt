def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.5
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        local_search_bonus = min([distance_matrix[node][other] for other in unvisited_nodes if other != node and other != destination_node], default=0)
        dynamic_exploration = exploration_weight * (1 / (1 + potential_distance)) * (remaining_nodes / total_nodes)
        weighted_cost = (1 - exploration_weight) * immediate_distance * potential_distance - 0.3 * local_search_bonus + dynamic_exploration

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
