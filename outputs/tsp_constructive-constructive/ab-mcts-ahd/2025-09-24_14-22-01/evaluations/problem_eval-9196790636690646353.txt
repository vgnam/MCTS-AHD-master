def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting: prioritize destination distance when few nodes remain
        if remaining_nodes <= 2:
            weight_immediate = 0.3
            weight_destination = 0.7
        else:
            weight_immediate = 0.6
            weight_destination = 0.4

        # Penalty for nodes far from destination
        penalty = 0.1 * (destination_distance - sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes)

        weighted_score = (weight_immediate * immediate_distance) + (weight_destination * destination_distance) + penalty

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
