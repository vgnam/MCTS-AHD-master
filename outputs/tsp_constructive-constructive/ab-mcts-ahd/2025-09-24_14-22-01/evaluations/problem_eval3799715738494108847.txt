def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 + (0.5 * (1 / (remaining_nodes + 1)))  # Dynamic weight adjustment
    min_cost = float('inf')
    next_node = None
    penalty_threshold = 1.5  # Adjusted penalty threshold
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + weight_factor * potential_distance

        # Apply penalty if immediate distance is too high
        if immediate_distance > penalty_threshold * distance_matrix[current_node][destination_node]:
            weighted_cost *= 1.5

        # Additional refinement: consider average distance to current node
        if immediate_distance > avg_distance:
            weighted_cost *= 1.2

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
