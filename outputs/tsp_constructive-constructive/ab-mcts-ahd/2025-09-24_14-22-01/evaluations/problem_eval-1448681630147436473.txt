def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1 if destination_node in unvisited_nodes else len(unvisited_nodes)
    temperature = max(0.1, 1.0 - 0.5 * (remaining_nodes / (remaining_nodes + 1)))
    weight = 0.4 + (0.6 * (remaining_nodes / (remaining_nodes + 1)))

    # Calculate connectivity entropy for diversity
    connectivity_entropy = 0.0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node]
        if distances:
            avg_distance = sum(distances) / len(distances)
            connectivity_entropy += (1 / (avg_distance + 1e-6)) * (1 - (len(distances) / (remaining_nodes - 1)))

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Novel scoring: balance immediate, potential, and entropy
        weighted_immediate = immediate_distance * (1 + centrality)
        weighted_potential = potential_distance * (1 - centrality)
        entropy_factor = connectivity_entropy * temperature
        combined_score = (weighted_immediate + weighted_potential) / 2 + entropy_factor

        if combined_score < min_cost:
            min_cost = combined_score
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
