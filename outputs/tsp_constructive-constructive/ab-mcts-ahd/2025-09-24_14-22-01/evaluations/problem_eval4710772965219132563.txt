def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_potential = 0.3 + 0.7 * (remaining_nodes / (remaining_nodes + 1))
    exploration_bias = 0.5 * (1 - remaining_nodes / (remaining_nodes + 1))
    centrality_weights = {node: sum(distance_matrix[node]) for node in unvisited_nodes}

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = centrality_weights[node]
        heuristic_bias = (1 - exploration_bias) * centrality + exploration_bias * potential_distance
        weighted_cost = (1 - weight_potential) * immediate_distance + weight_potential * heuristic_bias
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
