def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality as the average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        # Dynamic exploration factor: higher centrality nodes get higher weight early
        exploration_factor = 0.5 * (1 - (remaining_nodes / len(unvisited_nodes))) + 0.5 * (centrality / max(centrality, 1))

        # Weighted cost: immediate distance + exploration factor * (potential distance + centrality)
        weighted_cost = immediate_distance + exploration_factor * (potential_distance + centrality)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
