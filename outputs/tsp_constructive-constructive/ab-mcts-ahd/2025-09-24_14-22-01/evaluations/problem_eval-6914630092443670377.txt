import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes) - 1
    temperature = max(0.1, 1.0 - 0.9 * (remaining_nodes / (remaining_nodes + 1)))  # Decaying temperature
    candidates = [node for node in unvisited_nodes if node != destination_node]

    if not candidates:
        return destination_node

    # Calculate weighted costs with penalties for revisits
    weighted_costs = []
    for node in candidates:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.7 * (remaining_nodes / (remaining_nodes + 1)) ** 0.3
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        weighted_costs.append(weighted_cost)

    # Apply Boltzmann selection
    probabilities = [math.exp(-cost / temperature) for cost in weighted_costs]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
