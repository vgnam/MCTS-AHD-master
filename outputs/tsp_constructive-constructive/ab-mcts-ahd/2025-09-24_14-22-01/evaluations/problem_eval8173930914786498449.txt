defaulting to the destination if no other nodes are available.}

3. Implementation:
```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, alpha=0.4, beta=0.3, gamma=0.3):
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = alpha * immediate_distance + beta * potential_distance + gamma * (immediate_distance * potential_distance)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
