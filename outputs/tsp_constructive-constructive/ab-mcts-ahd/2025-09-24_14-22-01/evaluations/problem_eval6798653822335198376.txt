def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    path_length_so_far = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        revisit_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node and other != destination_node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        if immediate_distance == 0 or potential_distance == 0:
            combined_weight = float('inf')
        else:
            dynamic_weight = 1 / (1 + path_length_so_far / (total_unvisited * 100))
            weighted_immediate = immediate_distance * (1 + dynamic_weight)
            weighted_potential = potential_distance * (1 - dynamic_weight)
            weighted_revisit = revisit_penalty * dynamic_weight
            combined_weight = weighted_immediate + weighted_potential + weighted_revisit

        if combined_weight < min_cost:
            min_cost = combined_weight
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
