def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes) - 1
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Novel components
        node_density = len([n for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * immediate_distance])
        opportunity_cost = sum(distance_matrix[n][destination_node] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        # Dynamic weighting
        exploration_weight = 0.7 * (1 - progress_ratio)
        exploitation_weight = 0.3 + 0.4 * progress_ratio
        density_weight = 0.2 * (1 - progress_ratio)

        # Hybrid cost function
        cost = (exploitation_weight * immediate_distance +
                exploration_weight * potential_distance +
                density_weight * node_density +
                0.1 * opportunity_cost)

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
