def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 if remaining_nodes > 2 else 0.5
    candidates = [node for node in unvisited_nodes if not (node == destination_node and remaining_nodes > 1)]
    if not candidates:
        return destination_node
    costs = []
    for node in candidates:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        combined_cost = (immediate_distance + potential_distance) / (immediate_distance * potential_distance)
        costs.append(combined_cost)
    min_cost = min(costs)
    max_cost = max(costs)
    normalized_costs = [(max_cost - cost + 1e-6) / (max_cost - min_cost + 1e-6) for cost in costs]
    probabilities = [math.exp(-cost / temperature) for cost in normalized_costs]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
