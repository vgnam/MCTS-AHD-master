def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        centrality_penalty = np.var([distance_matrix[node][n] for n in unvisited_nodes if n != node]) if len(unvisited_nodes) > 1 else 1.0
        max_remaining_distance = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        weighted_cost = immediate_distance + (0.4 * distance_ratio) * potential_distance + (0.6 * max_remaining_distance)
        weighted_cost *= (1 + 0.3 * centrality_penalty)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = next_node if next_node is not None and weighted_cost > min_cost else node
    if next_node is None:
        next_node = destination_node
    return next_node
