def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    alpha = 0.7  # Weight for proximity to current node (higher = more greedy)
    beta = 0.3   # Weight for proximity to destination (higher = more global)
    remaining_steps = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        # Normalize distances to avoid bias from different scales
        normalized_current = current_distance / max(1, max(distance_matrix[current_node]))
        normalized_destination = destination_distance / max(1, max(distance_matrix[destination_node]))
        # Calculate weighted score
        score = alpha * normalized_current + beta * normalized_destination * (remaining_steps / (remaining_steps + 1))
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
