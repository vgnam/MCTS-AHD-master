def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 0.4 + 0.3 * (remaining_nodes / len(distance_matrix))  # Adjusted weight for exploration
    penalty = 0.1 * (1 - remaining_nodes / len(distance_matrix))  # Penalty for revisiting nodes
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)  # Centrality heuristic
        total_cost = weight * immediate_distance + (1 - weight) * potential_distance + penalty * centrality
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
