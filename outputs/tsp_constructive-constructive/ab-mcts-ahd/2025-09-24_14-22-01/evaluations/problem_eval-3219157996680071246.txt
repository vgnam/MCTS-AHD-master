def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # Including current node

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weight: prioritize local early, global later
        dynamic_weight = 0.3 + 0.7 * (remaining_nodes / total_nodes)

        # Non-linear penalty: exponential growth for steps > 1.5x direct path
        penalty = 1.0
        if immediate_distance > 1.5 * distance_matrix[current_node][destination_node]:
            penalty = 1.0 + (immediate_distance / distance_matrix[current_node][destination_node] - 1.5) ** 2

        # Combined score with adaptive weight
        combined_score = immediate_distance + dynamic_weight * destination_distance * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
