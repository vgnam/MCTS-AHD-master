import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    dynamic_weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        foresighted_distance = distance_matrix[node][destination_node]

        weighted_cost = (dynamic_weight * immediate_distance * (1 + centrality) +
                         (1 - dynamic_weight) * foresighted_distance * (1 - centrality))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
