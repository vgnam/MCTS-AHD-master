def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 1:
        return destination_node

    min_cost = float('inf')
    next_node = None
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = min(0.9, 0.3 + (total_unvisited / (total_unvisited + current_path_length)) * 0.4)
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
