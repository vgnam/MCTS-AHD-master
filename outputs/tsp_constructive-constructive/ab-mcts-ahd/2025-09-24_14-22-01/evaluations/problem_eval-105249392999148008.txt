def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes) - 1

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Adaptive neighborhood weighting
        neighborhood_sum = sum(distance_matrix[node])
        neighborhood_weight = 1 / (1 + neighborhood_sum)  # Inverse relationship

        # Dynamic penalty factors
        exploration_penalty = (remaining_nodes / total_nodes) ** 3
        exploitation_boost = 1 - exploration_penalty

        # Centrality measure with neighborhood weighting
        centrality = neighborhood_weight * (sum(distance_matrix[node]) / (total_nodes - 1))

        # Dynamic weight adjustment
        exploration_weight = 0.6 * exploration_penalty
        exploitation_weight = 0.4 * exploitation_boost

        weighted_cost = (1 - exploration_weight - exploitation_weight) * immediate_distance + \
                        exploration_weight * potential_distance + \
                        exploitation_weight * centrality

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
