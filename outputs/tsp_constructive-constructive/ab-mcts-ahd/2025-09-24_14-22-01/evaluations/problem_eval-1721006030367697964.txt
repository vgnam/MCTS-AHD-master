def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_immediate = immediate_distance * (1 + centrality)
        weighted_potential = potential_distance * (1 - centrality)
        combined_weight = weight * weighted_immediate + (1 - weight) * weighted_potential

        # Lookahead mechanism: evaluate potential paths
        if remaining_nodes > 1:
            remaining_unvisited = [n for n in unvisited_nodes if n != node]
            next_next_node = None
            min_next_distance = float('inf')
            for next_node_candidate in remaining_unvisited:
                next_distance = distance_matrix[node][next_node_candidate]
                if next_distance < min_next_distance:
                    min_next_distance = next_distance
                    next_next_node = next_node_candidate
            if next_next_node is not None:
                lookahead_distance = distance_matrix[next_next_node][destination_node]
                combined_weight += 0.2 * (min_next_distance + lookahead_distance)

        if combined_weight < min_cost:
            min_cost = combined_weight
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
