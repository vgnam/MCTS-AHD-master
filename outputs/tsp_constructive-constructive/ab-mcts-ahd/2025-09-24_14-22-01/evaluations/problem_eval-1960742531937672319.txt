def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_distance) / len(unvisited_nodes) if unvisited_nodes else 0
        weight_factor = 1 / (1 + math.exp(-(potential_distance - avg_distance))) if avg_distance > 0 else 0.5
        weighted_cost = (0.4 * immediate_distance) + (0.6 * potential_distance * weight_factor)
        penalty = 1.0 + 0.3 * abs(distance_ratio - 1.0) + 0.2 * (1 - connectivity_score)
        weighted_cost *= penalty
        if weighted_cost < min_cost or (weighted_cost == min_cost and potential_distance > distance_matrix[current_node][next_node]):
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
