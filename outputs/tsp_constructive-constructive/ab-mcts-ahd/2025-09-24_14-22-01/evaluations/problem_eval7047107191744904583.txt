def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    immediate_weight = max(0.2, 0.6 - 0.05 * (total_unvisited - 1))
    diversity_weight = min(0.5, 0.3 + 0.05 * (total_unvisited - 1))
    potential_weight = 0.1

    min_cost = float('inf')
    next_node = None
    recent_penalty = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        diversity_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1 if total_unvisited > 1 else 1)

        weighted_cost = (immediate_weight * immediate_distance) + (potential_weight * potential_distance) + (diversity_weight * diversity_factor) + recent_penalty[node]

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
