def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_unvisited_nodes = len(unvisited_nodes)
    if total_unvisited_nodes == 0:
        return destination_node

    temperature = 1.0 / (1.0 + total_unvisited_nodes)
    node_scores = []
    total_score = 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.7 * (1 - (len(unvisited_nodes) / total_unvisited_nodes)) + 0.3 * (immediate_distance / max(distance_matrix[current_node]))
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        score = (1.0 / (weighted_cost + 1e-6)) * (1.0 / (1.0 + temperature))
        node_scores.append((node, score))
        total_score += score

    if not node_scores:
        return destination_node

    rand_val = random.random() * total_score
    cumulative_score = 0.0
    for node, score in node_scores:
        cumulative_score += score
        if rand_val <= cumulative_score:
            return node

    return next_node
