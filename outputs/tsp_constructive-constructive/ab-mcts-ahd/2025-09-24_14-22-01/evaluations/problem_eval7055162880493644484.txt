def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    exploration_factor = 0.3 * (remaining_nodes / (remaining_nodes + 1))  # Dynamic exploration factor
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / len(distance_matrix[node])  # Average distance to all nodes
        weighted_cost = immediate_distance + exploration_factor * (potential_distance + centrality_heuristic)
        if node in unvisited_nodes and node != current_node:
            weighted_cost += 1.5  # Increased penalty for revisiting
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
