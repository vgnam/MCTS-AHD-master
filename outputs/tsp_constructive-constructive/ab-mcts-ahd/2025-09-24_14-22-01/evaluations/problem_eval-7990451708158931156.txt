def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = min(1.0, 0.5 + (remaining_nodes / len(distance_matrix)))
    weight_immediate = exploration_factor * 0.4 + (1 - exploration_factor) * 0.2
    weight_potential = exploration_factor * 0.3 + (1 - exploration_factor) * 0.5
    weight_centrality = exploration_factor * 0.3 + (1 - exploration_factor) * 0.3

    avg_distance = sum(sum(row) for row in distance_matrix) / (len(distance_matrix) * (len(distance_matrix) - 1))
    geometric_mean = (math.prod(math.prod(row) for row in distance_matrix)) ** (1 / (len(distance_matrix) ** 2))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        normalized_immediate = immediate_distance / geometric_mean
        normalized_potential = potential_distance / geometric_mean
        total_cost = (weight_immediate * normalized_immediate +
                      weight_potential * normalized_potential +
                      weight_centrality * (centrality / geometric_mean))
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
