def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    base_decay = 0.5
    threshold_multiplier = 1.5
    path_length_penalty = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    dynamic_threshold = threshold_multiplier * path_length_penalty

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_decay = base_decay * (1 - min(1, immediate_distance / dynamic_threshold))
        weighted_cost = immediate_distance + dynamic_decay * potential_distance

        if immediate_distance > dynamic_threshold:
            weighted_cost *= 1 + (immediate_distance - dynamic_threshold) ** 1.5

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
