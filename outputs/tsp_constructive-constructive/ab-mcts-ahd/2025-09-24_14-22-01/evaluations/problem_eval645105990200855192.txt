def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_threshold = 1.5 * (1 + 0.1 * (remaining_nodes - 1))  # Adjusts with remaining nodes
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        path_alignment = (immediate_distance + potential_distance) / (1 + 0.2 * abs(immediate_distance - potential_distance))
        weighted_cost = immediate_distance + 0.2 * potential_distance + 0.3 * path_alignment
        if immediate_distance > dynamic_threshold:
            weighted_cost *= (1 + (immediate_distance - dynamic_threshold) * 0.1)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
