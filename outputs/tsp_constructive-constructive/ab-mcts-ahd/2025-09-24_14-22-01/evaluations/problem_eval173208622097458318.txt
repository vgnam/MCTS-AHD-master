def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    # Calculate average potential distance and novelty factor
    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    novelty_factor = 1.0 / (1.0 + (remaining_nodes / (remaining_nodes + 1)) ** 1.5)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_potential = potential_distance / avg_potential_distance

        # Dynamic weight factor with novelty penalty
        weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** 1.2
        novelty_penalty = (1.0 - novelty_factor) ** (1.0 / (remaining_nodes + 1))

        # Novel weighted cost equation
        weighted_cost = (immediate_distance * normalized_potential ** weight_factor) * novelty_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
