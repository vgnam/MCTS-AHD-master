def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    proximity_bias = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / (len(unvisited_nodes) ** 2) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            combined_weight = float('inf')
        else:
            centrality_weight = (1 + centrality) * (1 - proximity_bias)
            potential_weight = (1 - centrality) * (1 + proximity_bias)
            combined_weight = immediate_distance * centrality_weight + potential_distance * potential_weight

        if combined_weight < min_cost:
            min_cost = combined_weight
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
