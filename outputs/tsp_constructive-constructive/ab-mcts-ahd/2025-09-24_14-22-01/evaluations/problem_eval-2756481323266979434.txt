def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1 if destination_node in unvisited_nodes else len(unvisited_nodes)

    # Calculate heuristic factor and weights
    heuristic_factor = (remaining_nodes + 1) / (remaining_nodes + 2) if remaining_nodes > 0 else 1.0
    weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))

    # Calculate centrality
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Lookahead to next potential node
        lookahead_cost = float('inf')
        for next_node_candidate in unvisited_nodes:
            if next_node_candidate == node or next_node_candidate == destination_node:
                continue
            candidate_cost = distance_matrix[node][next_node_candidate] + distance_matrix[next_node_candidate][destination_node]
            if candidate_cost < lookahead_cost:
                lookahead_cost = candidate_cost

        weighted_immediate = immediate_distance * (1 + centrality)
        weighted_potential = potential_distance * (1 - centrality)
        combined_weight = (weighted_immediate + weighted_potential) / 2
        lookahead_weight = 0.5 * (remaining_nodes / (remaining_nodes + 2))
        total_cost = weight * combined_weight + (1 - weight) * heuristic_factor * potential_distance + lookahead_weight * lookahead_cost

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
