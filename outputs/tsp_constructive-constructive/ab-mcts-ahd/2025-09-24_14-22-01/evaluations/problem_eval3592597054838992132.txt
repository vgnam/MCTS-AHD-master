def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    exploration_factor = (visited_nodes / total_nodes) ** 2  # More aggressive exploration as progress increases

    # Calculate node centrality and connectivity
    centrality = [sum(distance_matrix[node]) / total_nodes for node in range(total_nodes)]
    connectivity = [sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0) for node in range(total_nodes)]

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        revisit_penalty = 1.0 if node in unvisited_nodes else 1.2  # Slightly increased penalty

        # Dynamic centrality bonus
        centrality_bonus = 1.0 + (centrality[node] / max(centrality)) * 0.2 * (1 - exploration_factor)

        # Connectivity penalty (avoid dead-ends)
        connectivity_penalty = 1.0 + (connectivity[node] / max(connectivity)) * 0.15 * (visited_nodes / total_nodes)

        # Progress-based weighting
        progress_weight = (visited_nodes / total_nodes) ** 1.5
        weighted_cost = (
            (immediate_distance * (1 - progress_weight) +
             potential_distance * progress_weight) *
            revisit_penalty *
            centrality_bonus *
            connectivity_penalty
        )

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
