def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_total_distance = float('inf')
    next_node = None
    alpha = 0.6  # Base weight for distance to current node
    beta = 0.4   # Base weight for distance to destination node

    # Calculate centroid of unvisited nodes
    centroid = sum(unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Adjust weights based on node's deviation from centroid
        deviation = abs(node - centroid)
        adjusted_alpha = alpha * (1 - deviation / (max(unvisited_nodes) - min(unvisited_nodes) + 1e-9))
        adjusted_beta = beta * (1 + deviation / (max(unvisited_nodes) - min(unvisited_nodes) + 1e-9))

        total_distance = adjusted_alpha * distance_to_current + adjusted_beta * distance_to_destination

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
