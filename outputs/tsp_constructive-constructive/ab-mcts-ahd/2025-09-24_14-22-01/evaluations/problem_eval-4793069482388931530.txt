import math
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    n_nodes = len(distance_matrix)
    n_remaining = len(remaining_nodes)
    gamma = n_remaining / n_nodes
    sigmoid_gamma = 1 / (1 + math.exp(-gamma))

    # Calculate centrality and density metrics
    centrality = np.zeros(n_nodes)
    density = np.zeros(n_nodes)
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if n != node]
        if neighbors:
            centrality[node] = sum(1 / (distance_matrix[node][n] + 1e-6) for n in neighbors) / len(neighbors)
            density[node] = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            centrality[node] = 0
            density[node] = 0

    # Calculate path entropy (novel mechanism)
    path_entropy = np.zeros(n_nodes)
    for node in remaining_nodes:
        local_distances = [distance_matrix[node][n] for n in remaining_nodes if n != node]
        if local_distances:
            local_distances = np.array(local_distances)
            probs = local_distances / np.sum(local_distances)
            path_entropy[node] = -np.sum(probs * np.log(probs + 1e-6))

    # Calculate weights and costs
    avg_distance = np.mean([distance_matrix[current_node][node] for node in remaining_nodes])
    avg_centrality = np.mean(centrality[list(remaining_nodes)])
    avg_density = np.mean(density[list(remaining_nodes)])
    avg_entropy = np.mean(path_entropy[list(remaining_nodes)])

    min_cost = float('inf')
    next_node = None

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Weighted components
        w_distance = 0.3 + 0.7 * sigmoid_gamma
        w_centrality = 0.4 + 0.6 * (1 - sigmoid_gamma)
        w_density = 0.2 + 0.8 * sigmoid_gamma
        w_entropy = 0.1 + 0.9 * (1 - sigmoid_gamma)

        # Calculate deviation terms
        distance_dev = abs(immediate_distance - avg_distance)
        centrality_dev = abs(centrality[node] - avg_centrality)
        density_dev = abs(density[node] - avg_density)
        entropy_dev = abs(path_entropy[node] - avg_entropy)

        # Combined cost with adaptive weights
        cost = (w_distance * immediate_distance +
                w_centrality * centrality[node] +
                w_density * density[node] +
                w_entropy * path_entropy[node] +
                0.3 * (distance_dev + centrality_dev + density_dev + entropy_dev))

        if cost < min_cost:
            min_cost = cost
            next_node = node

    return next_node
