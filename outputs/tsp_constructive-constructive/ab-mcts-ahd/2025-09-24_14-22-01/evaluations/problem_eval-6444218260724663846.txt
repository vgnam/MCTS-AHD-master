import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    base_decay = 0.3
    threshold_decay = 0.2
    dynamic_threshold = 1.4
    temperature = 0.5

    # Calculate average remaining distance to destination
    avg_remaining = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    # Calculate diversity of unvisited nodes (standard deviation of distances to destination)
    distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    diversity = math.sqrt(sum((d - avg_remaining) ** 2 for d in distances_to_dest) / len(unvisited_nodes))

    # Dynamically adjust temperature based on remaining path and diversity
    temperature = 0.5 + 0.3 * (diversity / avg_remaining)

    # Calculate node weights using Boltzmann distribution
    weights = []
    for node in unvisited_nodes:
        if node == destination_node:
            weights.append(0)
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic threshold adjustment
        adjusted_threshold = dynamic_threshold * (1 + threshold_decay * (potential_distance / avg_remaining))

        # Weight calculation with dynamic penalty
        weight = (immediate_distance ** 1.1) + base_decay * (potential_distance ** 0.9)

        if immediate_distance > adjusted_threshold:
            penalty = 1.5 + (immediate_distance - adjusted_threshold) * 0.2
            weight *= penalty

        weights.append(math.exp(-weight / temperature))

    # Normalize weights
    total_weight = sum(weights)
    if total_weight == 0:
        return random.choice(unvisited_nodes)
    normalized_weights = [w / total_weight for w in weights]

    # Select next node probabilistically
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    return next_node
