def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    threshold = 1.0 - (0.7 * (remaining_nodes / len(distance_matrix)))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_distance)
        penalty = 0.3 * (immediate_distance / avg_distance) * (1 + 0.1 * node_connectivity)
        dynamic_weight = threshold * (1 - (immediate_distance / max(avg_distance, 1)))
        weighted_cost = immediate_distance + dynamic_weight * potential_distance - penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
