def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    max_score = -float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    remaining_count = len(remaining_nodes)
    weight_immediate = 0.5 + (0.2 * (remaining_count / (remaining_count + 1)))
    weight_potential = 0.3 + (0.2 * (remaining_count / (remaining_count + 1)))
    weight_connectivity = 0.2 - (0.1 * (remaining_count / (remaining_count + 1)))

    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        connectivity = len(unvisited_nodes) - 1
        novelty_factor = abs(immediate_distance - avg_distance)
        penalty = 0.05 * novelty_factor if immediate_distance > avg_distance else -0.05 * novelty_factor
        weighted_score = (weight_immediate * (1 / immediate_distance)) + (weight_potential * (1 / potential_distance)) + (weight_connectivity * connectivity) + penalty
        if weighted_score > max_score:
            max_score = weighted_score
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
