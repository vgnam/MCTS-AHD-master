def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.7 if remaining_nodes > 2 else 0.3
    weight_potential = 0.2 if remaining_nodes > 2 else 0.5
    weight_centrality = 0.1 if remaining_nodes > 2 else 0.2

    all_distances = [d for row in distance_matrix for d in row if d > 0]
    median_distance = sorted(all_distances)[len(all_distances) // 2] if all_distances else 1

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        normalized_immediate = immediate_distance / median_distance
        normalized_potential = potential_distance / median_distance
        total_cost = (weight_immediate * normalized_immediate +
                      weight_potential * normalized_potential +
                      weight_centrality * (centrality / median_distance))
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
