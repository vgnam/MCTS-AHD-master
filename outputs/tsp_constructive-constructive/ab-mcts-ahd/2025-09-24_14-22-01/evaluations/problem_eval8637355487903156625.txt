def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    node_density = len(unvisited_nodes) / len(distance_matrix)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    avg_unvisited_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        normalized_distance = immediate_distance / (avg_unvisited_distance + 1e-6)
        potential_path_length = immediate_distance + distance_matrix[node][destination_node]
        attraction_factor = (1 - normalized_distance) * (1 + node_density) * (1 + centrality)
        total_cost = immediate_distance + 0.4 * potential_path_length + 0.6 * attraction_factor
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    return next_node
