def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    dynamic_threshold = avg_distance * 1.3

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic decay factor based on current path length
        current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
        decay_factor = 0.1 + 0.4 * (1 - min(1, current_path_length / (len(unvisited_nodes) * avg_distance)))

        # Lookahead mechanism: evaluate next two nodes
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            next_next_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_distance = distance_matrix[node][next_next_node]
        else:
            lookahead_distance = 0

        weighted_cost = immediate_distance + decay_factor * potential_distance + 0.2 * lookahead_distance

        # Exponential penalty for distance deviations
        if immediate_distance > dynamic_threshold:
            penalty = (immediate_distance / dynamic_threshold) ** 2
            weighted_cost *= (1 + penalty)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
