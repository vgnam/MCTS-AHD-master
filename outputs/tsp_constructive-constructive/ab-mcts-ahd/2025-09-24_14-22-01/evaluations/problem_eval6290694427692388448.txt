def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    dynamic_weight = 0.1 + 0.5 * (1 - (len(remaining_nodes) / len(unvisited_nodes)))
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        lookahead_value = 0
        if len(remaining_nodes) > 1:
            second_remaining = remaining_nodes - {node}
            second_node = min(second_remaining, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_value = (distance_matrix[node][second_node] + distance_matrix[second_node][destination_node]) / avg_distance
        heuristic_factor = (immediate_distance + potential_distance + lookahead_value) / avg_distance
        total_cost = (0.5 - dynamic_weight) * immediate_distance + (0.3 + dynamic_weight) * potential_distance + 0.2 * heuristic_factor
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
