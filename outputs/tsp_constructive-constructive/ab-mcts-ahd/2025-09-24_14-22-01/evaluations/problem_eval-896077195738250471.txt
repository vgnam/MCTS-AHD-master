importance.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    node_degrees = {node: sum(distance_matrix[node]) / (len(distance_matrix[node]) - 1) for node in unvisited_nodes}
    visited_frequency = {node: 0 for node in unvisited_nodes}
    learning_rate = 0.1
    cost_weights = {'immediate': 1.0, 'potential': 0.5, 'diversity': 0.3, 'centrality': 0.2}
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        diversity_factor = 1 / (1 + visited_frequency.get(node, 0))
        centrality_score = 1 / (1 + node_degrees.get(node, 0))
        total_cost = (
            cost_weights['immediate'] * immediate_distance +
            cost_weights['potential'] * potential_distance +
            cost_weights['diversity'] * diversity_factor +
            cost_weights['centrality'] * centrality_score
        )
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    else:
        visited_frequency[next_node] += 1
        cost_weights['immediate'] = max(0.1, cost_weights['immediate'] * (1 - learning_rate))
        cost_weights['potential'] = min(1.0, cost_weights['potential'] * (1 + learning_rate))
    return next_node
