def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    visited_count = total_nodes - len(unvisited_nodes)
    exploration_factor = 1 / (1 + math.exp(-5 * (visited_count / total_nodes - 0.5)))

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        centrality[node] = sum(distance_matrix[node]) / (total_nodes - 1)

    # Track historical visits (simplified with a dictionary)
    visit_history = {}
    for node in distance_matrix:
        visit_history[node] = 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Normalize centrality for weighting
        max_centrality = max(centrality.values()) if centrality else 1
        centrality_weight = 0.3 * (centrality[node] / max_centrality) if max_centrality > 0 else 0

        # Dynamic revisit penalty based on historical visits
        revisit_penalty = 1.0 + 2.0 * (visit_history[node] / (visited_count + 1))

        weighted_cost = (immediate_distance * (1 - exploration_factor) +
                         potential_distance * exploration_factor +
                         centrality_weight) * revisit_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    else:
        visit_history[next_node] += 1

    return next_node
