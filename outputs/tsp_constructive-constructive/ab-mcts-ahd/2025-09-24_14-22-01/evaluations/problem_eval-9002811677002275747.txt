def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 1.0 - (remaining_nodes / total_nodes)  # Increases as nodes are visited

    # Calculate average distance for normalization
    avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * total_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Normalized penalty based on distance ratio
        penalty = 1.0 + (immediate_distance / avg_distance) ** 2

        # Progressive bias toward destination
        destination_bias = 1.0 - exploration_factor

        combined_score = (immediate_distance * penalty) + (destination_distance * destination_bias * exploration_factor)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
