def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_immediate = 0.5 - (0.4 * (remaining_nodes / (remaining_nodes + 1)))
    weight_potential = 0.5 + (0.4 * (remaining_nodes / (remaining_nodes + 1)))

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node]
    median_distance = sorted(distances)[len(distances) // 2] if distances else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        deviation = abs(immediate_distance - median_distance)
        penalty = 0.1 * deviation if immediate_distance > median_distance else -0.05 * deviation
        weighted_cost = (weight_immediate * immediate_distance) + (weight_potential * potential_distance) + penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
