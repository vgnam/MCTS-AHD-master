def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_centrality = 0.5 * (1 + (remaining_nodes / (remaining_nodes + 1))) * (1 - (distance_matrix[current_node][destination_node] / max(max(row) for row in distance_matrix)))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_variance = sum((distance_matrix[current_node][n] - immediate_distance) ** 2 for n in unvisited_nodes) / remaining_nodes
        normalized_variance = distance_variance / (max(distance_matrix[current_node]) ** 2)

        proximity_bias = (potential_distance / distance_matrix[current_node][destination_node]) if distance_matrix[current_node][destination_node] > 0 else 1
        weighted_cost = (immediate_distance * (1 + dynamic_centrality)) + (potential_distance * (1 - dynamic_centrality)) + (0.5 * normalized_variance) - (0.3 * proximity_bias)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
