def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    steps_remaining = len(unvisited_nodes)
    proximity_weight = np.exp(-steps_remaining / len(unvisited_nodes)) if steps_remaining > 0 else 0.0
    potential_weight = 1.0 - proximity_weight
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0:
            proximity_cost = float('inf')
        else:
            proximity_cost = 1.0 / immediate_distance
        if potential_distance == 0:
            potential_cost = float('inf')
        else:
            potential_cost = 1.0 / potential_distance
        weighted_cost = proximity_cost * proximity_weight + potential_cost * potential_weight
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
