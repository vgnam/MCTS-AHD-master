def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    remaining_count = len(remaining_nodes)
    current_weight = 0.7 * (0.9 ** (remaining_count - 1))
    future_weight = 1 - current_weight

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / remaining_count

    min_score = float('inf')
    next_node = None
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        combined_score = (current_weight * immediate_distance * (1 + centrality)) + (future_weight * future_distance * (1 - centrality))
        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
