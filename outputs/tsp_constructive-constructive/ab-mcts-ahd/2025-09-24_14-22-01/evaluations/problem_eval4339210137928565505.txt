import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(unvisited_nodes) + 1
    penalty = 0.1 * (total_nodes - remaining_nodes)  # Penalty increases as more nodes are visited

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Sigmoid function to smoothly transition between immediate and potential distance influence
        x = (remaining_nodes / total_nodes) * 10 - 5  # Scale to [-5, 5] range
        dynamic_weight = 1 / (1 + math.exp(-x))  # Sigmoid output between 0 and 1

        weighted_cost = immediate_distance + dynamic_weight * potential_distance - penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
