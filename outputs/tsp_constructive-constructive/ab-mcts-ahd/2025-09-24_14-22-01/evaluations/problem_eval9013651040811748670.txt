def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    proximity_weight = 0.5 if remaining_nodes > 2 else 0.7
    detour_weight = 0.3 if remaining_nodes > 2 else 0.2
    smoothness_weight = 0.2 if remaining_nodes > 2 else 0.1

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        direct_distance = distance_matrix[current_node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            detour_penalty = float('inf')
            smoothness_factor = 0
        else:
            detour = immediate_distance + potential_distance - direct_distance
            detour_penalty = detour / (direct_distance + 1e-6)
            smoothness_factor = 1 - (detour / (immediate_distance + potential_distance + 1e-6))

        proximity_bias = immediate_distance / (direct_distance + 1e-6)
        weighted_cost = (proximity_bias * proximity_weight +
                        detour_penalty * detour_weight +
                        (1 - smoothness_factor) * smoothness_weight)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
