def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    exploration_phase = 1 - (remaining_nodes / (remaining_nodes + 1))

    # Calculate centrality of each node (average distance to all unvisited nodes)
    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        total_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if (len(unvisited_nodes) - 1) > 0 else 0

    # Dynamic weight adjustment
    base_weight = 0.5 * (1 - exploration_phase)
    deviation_weight = 0.3 * exploration_phase
    centrality_weight = 0.2 * exploration_phase
    penalty_factor = 0.4 * exploration_phase

    direct_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        deviation = abs(immediate_distance - direct_distance)
        node_centrality = centrality[node]

        # Weighted cost with centrality and exploration factor
        weighted_cost = (base_weight * immediate_distance +
                         deviation_weight * deviation +
                         centrality_weight * node_centrality +
                         (1 - base_weight - deviation_weight - centrality_weight) * potential_distance -
                         penalty_factor * potential_distance)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
