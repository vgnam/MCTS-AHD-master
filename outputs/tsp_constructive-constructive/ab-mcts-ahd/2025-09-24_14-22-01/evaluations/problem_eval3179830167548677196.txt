importance in connecting distant clusters. It uses a novel cost function that combines these factors with adaptive weighting to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality as the average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if (total_unvisited - 1) > 0 else 0

        # Dynamic weight adjustment based on remaining nodes and centrality
        remaining_ratio = len(unvisited_nodes) / total_unvisited
        dynamic_weight = 0.5 * (1 - remaining_ratio) + 0.3 * (centrality / max_distance) + 0.2 * (immediate_distance / max_distance)

        # Novel cost function combining immediate, potential, and centrality
        weighted_cost = immediate_distance + dynamic_weight * (potential_distance + 0.5 * centrality)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
