def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_degree = sum(1 for d in distance_matrix[node] if d > 0)  # Count connected nodes
        centrality = node_degree / total_nodes if total_nodes > 0 else 0
        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        weighted_cost = (0.2 * immediate_distance) + (0.6 * potential_distance) + (0.2 * centrality)
        penalty = 1.0 + 0.3 * (distance_ratio ** 2) + 0.4 * (potential_distance / (sum(distance_matrix[node]) / total_nodes))
        weighted_cost *= penalty
        if weighted_cost < min_cost or (weighted_cost == min_cost and potential_distance < distance_matrix[current_node][next_node]):
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
