defaulting to the destination if no other nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    gamma = 0.5
    delta = 0.2
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        detour_cost = immediate_distance + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        proximity = 1 / (1 + distance_matrix[node][destination_node]) if distance_matrix[node][destination_node] > 0 else 0
        weighted_cost = immediate_distance * (1 - gamma - delta) + detour_cost * gamma + proximity * delta
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
