def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1  # Include current node
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_distance = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function for smooth transition
        progress = 1 - (remaining_nodes / total_nodes)
        weight_immediate = 1 / (1 + math.exp(-10 * (progress - 0.5)))
        weight_estimated = 1 - weight_immediate

        # Non-linear penalty term
        penalty_factor = (remaining_nodes / total_nodes) ** 2
        penalty = penalty_factor * immediate_distance

        # Combined score with time-dependent bias
        score = (weight_immediate * immediate_distance) + (weight_estimated * estimated_distance) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
