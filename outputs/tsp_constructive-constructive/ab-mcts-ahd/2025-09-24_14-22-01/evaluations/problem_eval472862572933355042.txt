import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)
    exploration_weight = 0.5 * (1 + math.tanh(5 * (progress - 0.5)))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        normalized_centrality = node_centrality / max(1, max(distance_matrix[node]))

        weighted_cost = (exploration_weight * immediate_distance +
                        (1 - exploration_weight) * potential_distance +
                        0.2 * normalized_centrality)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
