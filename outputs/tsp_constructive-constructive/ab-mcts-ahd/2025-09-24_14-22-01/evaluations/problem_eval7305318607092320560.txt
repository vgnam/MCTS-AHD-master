importance of immediate proximity and long-term efficiency based on the remaining distance to the destination, allowing the path to adaptively balance these factors during traversal.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_distance = distance_matrix[current_node][destination_node]
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weight = 0.5 + 0.5 * (distance_to_destination / remaining_distance) if remaining_distance > 0 else 0.5
        combined_score = (1 - weight) * distance_to_current + weight * distance_to_destination
        if combined_score < min_score:
            min_score = combined_score
            next_node = node
    return next_node
