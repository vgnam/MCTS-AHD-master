def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    decay_factor = 0.5 ** (1.0 / (remaining_nodes + 1))  # Exponential decay
    weight = decay_factor * (1.0 / (remaining_nodes + 1))  # Time-varying weight
    min_total_distance = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        normalized_current = current_to_node / avg_distance if avg_distance > 0 else 0.0
        total_distance = (1 - weight) * normalized_current + weight * (node_to_dest / max(distance_matrix[node]))
        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node
    return next_node
