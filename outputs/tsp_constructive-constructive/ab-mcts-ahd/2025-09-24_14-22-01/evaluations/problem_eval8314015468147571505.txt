def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weighting factor based on distance ratio and node centrality
        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        centrality = sum(distance_matrix[node]) / total_nodes if total_nodes > 0 else 1.0
        proximity_factor = 1.0 - (potential_distance / (2 * avg_distance)) if avg_distance > 0 else 0.0

        # Non-linear penalty based on centrality and proximity
        penalty = 1.0 + 0.3 * (centrality / (avg_distance + 1e-6)) * (1.0 - proximity_factor)

        # Weighted cost incorporating dynamic factors
        weighted_cost = immediate_distance + (0.6 * distance_ratio + 0.4 * proximity_factor) * potential_distance
        weighted_cost *= penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
