def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    alpha = 0.5 * (1 - len(unvisited_nodes) / len(distance_matrix))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = 0.6 * immediate_distance + 0.4 * potential_distance
        proximity_variance = (immediate_distance - potential_distance) ** 2 / (immediate_distance + potential_distance) if (immediate_distance + potential_distance) > 0 else 0
        refined_cost = weighted_cost * (1 - alpha) + proximity_variance * alpha
        look_ahead = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        total_cost = refined_cost + 0.2 * look_ahead
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
