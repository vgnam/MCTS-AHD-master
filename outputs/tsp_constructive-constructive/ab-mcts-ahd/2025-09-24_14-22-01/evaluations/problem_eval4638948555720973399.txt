def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        proximity_factor = 1 - (distance_matrix[current_node][destination_node] / sum(distance_matrix[destination_node]))
        dynamic_weight = 0.8 + 0.4 * proximity_factor
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        weighted_cost = dynamic_weight * immediate_distance + (1 - dynamic_weight) * potential_distance + 0.3 * centrality
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
