def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = set(unvisited_nodes) | {current_node, destination_node}
    num_remaining = len(remaining_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights with greedy bias in early stages
    alpha = min(0.9, 0.2 + 0.7 * (num_remaining / total_nodes))
    beta = 1 - alpha
    gamma = 0.5 * (1 - (num_remaining / total_nodes))  # Diversity factor increases as nodes are visited

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Centrality factor with inverse weighting
        centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / num_remaining
        normalized_centrality = centrality / (sum(distance_matrix[node][n] for n in distance_matrix) / total_nodes)

        # Hybrid cost function with diversity adjustment
        weighted_cost = (alpha * immediate_distance +
                        beta * potential_distance +
                        0.4 * (1 - gamma) * normalized_centrality +
                        0.2 * gamma * (1 / (normalized_centrality + 1e-6)))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
