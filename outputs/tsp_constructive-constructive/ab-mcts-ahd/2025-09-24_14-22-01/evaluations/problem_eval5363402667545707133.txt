importance to balance exploration and exploitation, while penalizing nodes with high connectivity to avoid detours.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes
    weight_local = 1 - progress_ratio
    weight_potential = progress_ratio
    weight_centrality = 0.5 * (1 + progress_ratio)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        local_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        weighted_cost = (weight_local * local_distance) + \
                       (weight_potential * potential_distance) + \
                       (weight_centrality * node_centrality)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
