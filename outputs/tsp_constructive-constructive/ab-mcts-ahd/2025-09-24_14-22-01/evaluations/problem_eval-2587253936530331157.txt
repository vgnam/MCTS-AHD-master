def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.3 + (0.7 * len(unvisited_nodes) / len(distance_matrix))  # Adjusted dynamic decay factor
    max_distance_threshold = 1.5  # Reduced threshold for more aggressive penalization
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes
        # New cost components
        product_cost = immediate_distance * potential_distance
        weighted_cost = immediate_distance + decay_factor * potential_distance
        centrality_cost = centrality * (1 - decay_factor)  # Centrality becomes more influential as decay_factor decreases
        combined_cost = 0.4 * product_cost + 0.4 * weighted_cost + 0.2 * centrality_cost
        # Aggressive penalization for long immediate distances
        if immediate_distance > max_distance_threshold:
            combined_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.2)
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
