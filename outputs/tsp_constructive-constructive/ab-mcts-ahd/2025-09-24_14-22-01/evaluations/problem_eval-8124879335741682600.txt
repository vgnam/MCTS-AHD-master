def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + (1 if current_node in unvisited_nodes else 0)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        product_cost = immediate_distance * potential_distance
        weight_factor = 1.0 - (remaining_nodes / total_nodes)
        penalty = 0.1 if potential_distance < (sum(distance_matrix[node]) / len(distance_matrix[node])) else 0
        adjusted_cost = (product_cost * (1 - weight_factor)) + (potential_distance * weight_factor) + penalty
        normalized_cost = adjusted_cost / (remaining_nodes + 1)
        if normalized_cost < min_cost:
            min_cost = normalized_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
