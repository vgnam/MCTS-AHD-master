def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.5 if len(unvisited_nodes) > 3 else 0.2
    beta = 0.1 if len(unvisited_nodes) > 1 else 0.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            log_cost = float('inf')
        else:
            log_cost = math.log(immediate_distance) + math.log(potential_distance)
        exp_decay = math.exp(-potential_distance / (distance_matrix[current_node][destination_node] + 1e-6))
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / (distance_matrix[current_node][destination_node] + 1e-6)
        weighted_cost = (log_cost * (1 - alpha - beta) + exp_decay * alpha + position_factor * beta)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
