def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_unvisited = len(unvisited_nodes)
    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_node_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0
        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        weight_factor = (total_unvisited + 1) / (total_unvisited + 2)
        weighted_cost = immediate_distance * (1 / (potential_distance ** weight_factor)) + (0.5 * distance_ratio) * potential_distance + (0.3 * avg_node_distance)
        penalty = 1.0 + 0.2 * (potential_distance / (sum(distance_matrix[node]) / len(distance_matrix[node]))) if len(distance_matrix[node]) > 0 else 1.0
        weighted_cost *= penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
