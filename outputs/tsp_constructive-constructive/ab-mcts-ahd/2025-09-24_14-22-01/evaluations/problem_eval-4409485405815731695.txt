def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    # Dynamic weight adjustment using sigmoid function
    weight_factor = 1 / (1 + math.exp(-0.5 * (remaining_nodes - 5)))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Lookahead mechanism: evaluate next best node from current candidate
        lookahead_cost = 0
        if remaining_nodes > 1:
            next_unvisited = [n for n in unvisited_nodes if n != node]
            if next_unvisited:
                next_best = min(next_unvisited, key=lambda n: distance_matrix[node][n])
                lookahead_cost = distance_matrix[node][next_best]

        # Combined cost with dynamic weighting
        weighted_cost = (weight_factor * immediate_distance +
                        (1 - weight_factor) * potential_distance +
                        0.2 * lookahead_cost)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
