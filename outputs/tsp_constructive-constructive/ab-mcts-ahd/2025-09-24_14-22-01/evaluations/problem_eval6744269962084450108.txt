def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.4
    remaining_nodes = len(unvisited_nodes)
    dynamic_exploration = exploration_weight * (remaining_nodes / (remaining_nodes + 1))

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Local connectivity bonus (higher for nodes with many nearby unvisited nodes)
        local_connectivity = sum(1 for other in unvisited_nodes if other != node and distance_matrix[node][other] < 2 * immediate_distance)

        # Penalty for revisiting nodes (simplified version)
        revisit_penalty = 0.2 if node in unvisited_nodes and len(unvisited_nodes) > 2 else 0

        # Weighted cost with novel components
        weighted_cost = (1 - exploration_weight) * immediate_distance + exploration_weight * potential_distance
        weighted_cost += -0.1 * local_connectivity + revisit_penalty
        weighted_cost += dynamic_exploration * (1 / (1 + potential_distance))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
