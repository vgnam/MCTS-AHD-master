import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_nodes - 1)

        # Dynamic weight with exponential decay for exploration-exploitation
        dynamic_weight = 0.5 * (1 - math.exp(-remaining_nodes / total_nodes))

        # Weighted cost with centrality adjustment
        weighted_cost = immediate_distance + dynamic_weight * potential_distance * (1 + centrality / sum(distance_matrix[node]))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
