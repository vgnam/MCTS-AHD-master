def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes
    exploration_weight = 0.7 * (1 - progress_ratio)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / (potential_distance + 1e-10)
        novelty_score = 1 / (1 + abs(immediate_distance - potential_distance))
        dynamic_priority = (1 - exploration_weight) * immediate_distance + exploration_weight * potential_distance
        weighted_novelty = 0.2 * (1 - progress_ratio) * novelty_score
        total_cost = dynamic_priority + weighted_novelty + 0.15 * distance_ratio
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
