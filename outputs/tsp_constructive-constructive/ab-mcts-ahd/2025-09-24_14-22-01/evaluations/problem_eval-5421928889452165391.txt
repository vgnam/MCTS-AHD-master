importance" metric derived from centrality and average distance to guide decisions, particularly favoring nodes that are both close and central when few nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.6 if remaining_nodes > 3 else 0.3
    weight_potential = 0.3 if remaining_nodes > 3 else 0.5
    weight_proximity = 0.1 if remaining_nodes > 3 else 0.2

    avg_distance = sum(sum(row) for row in distance_matrix) / (len(distance_matrix) * (len(distance_matrix) - 1))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        proximity_pressure = (immediate_distance + potential_distance) / (2 * avg_distance)
        node_importance = (sum(distance_matrix[node]) / (len(distance_matrix) - 1)) / avg_distance
        total_cost = (weight_immediate * (immediate_distance / avg_distance) +
                      weight_potential * (potential_distance / avg_distance) +
                      weight_proximity * proximity_pressure +
                      (0.2 if remaining_nodes <= 3 else 0.1) * node_importance)
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
