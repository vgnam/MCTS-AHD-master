importance in the graph, while dynamically adjusting exploration vs. exploitation based on remaining unvisited nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    n = len(distance_matrix)
    temperature = len(unvisited_nodes) / n  # Decreases as more nodes are visited

    # Calculate node centrality (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        centrality[node] = sum(distance_matrix[node][other] for other in range(n)) / (n - 1)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_centrality = centrality[node]

        # Dynamic cost function with temperature-dependent weights
        total_cost = (1 - temperature) * immediate_distance + \
                     0.3 * temperature * potential_distance + \
                     0.2 * (1 - temperature) * node_centrality

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    return next_node
