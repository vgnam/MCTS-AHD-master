def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.7
    beta = 0.2
    gamma = 0.1
    node_density = len(unvisited_nodes) / len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            harmonic_mean = float('inf')
            geometric_mean = float('inf')
        else:
            harmonic_mean = 2 * (immediate_distance * potential_distance) / (immediate_distance + potential_distance)
            geometric_mean = (immediate_distance * potential_distance) ** 0.5

        penalty = 1 + (node_density * 0.1) if node in unvisited_nodes else 1
        weighted_cost = (harmonic_mean * alpha) + (geometric_mean * beta) + (penalty * gamma)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
