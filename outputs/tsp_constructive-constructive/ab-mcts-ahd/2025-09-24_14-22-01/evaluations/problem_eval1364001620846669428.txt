def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    if remaining_nodes > 0:
        avg_distance = sum(sum(row) for row in distance_matrix) / (len(distance_matrix) * (len(distance_matrix) - 1))
        node_density = len(unvisited_nodes) / len(distance_matrix)

        for node in unvisited_nodes:
            if node == destination_node:
                continue

            immediate_distance = distance_matrix[current_node][node]
            potential_distance = distance_matrix[node][destination_node]
            centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)

            normalized_immediate = immediate_distance / avg_distance
            normalized_potential = potential_distance / avg_distance
            normalized_centrality = centrality / avg_distance

            if remaining_nodes > 3:
                weight_immediate = 0.4
                weight_potential = 0.3
                weight_centrality = 0.3
                weight_density = 0.1
            else:
                weight_immediate = 0.2
                weight_potential = 0.6
                weight_centrality = 0.1
                weight_density = 0.1

            total_cost = (
                weight_immediate * normalized_immediate +
                weight_potential * normalized_potential +
                weight_centrality * normalized_centrality +
                weight_density * (1 - node_density)
            )

            if total_cost < min_cost:
                min_cost = total_cost
                next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
