def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate bottleneck penalty (average distance to other unvisited nodes)
        bottleneck_penalty = 0.0
        if remaining_nodes > 1:
            other_nodes = [n for n in unvisited_nodes if n != node and n != destination_node]
            if other_nodes:
                avg_distance = sum(distance_matrix[node][n] for n in other_nodes) / len(other_nodes)
                bottleneck_penalty = avg_distance * (1.0 - remaining_nodes / total_unvisited)

        # Exponential weight adjustment
        dynamic_weight = 0.1 + 0.9 * (1.0 - (0.5 ** (remaining_nodes / total_unvisited)))

        weighted_cost = immediate_distance + dynamic_weight * potential_distance + bottleneck_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
