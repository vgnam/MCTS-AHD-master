def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(unvisited_nodes) + 1
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        step_factor = 0.3 * (remaining_nodes / total_nodes)
        proximity_weight = 1 - step_factor
        scaling_factor = 1 + (distance_matrix[current_node][destination_node] / (immediate_distance + 1e-6)) * step_factor
        penalty = 0.2 * (immediate_distance - distance_matrix[current_node][destination_node]) if immediate_distance > 1.3 * distance_matrix[current_node][destination_node] else 0
        weighted_cost = immediate_distance * proximity_weight + potential_distance * scaling_factor + penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
