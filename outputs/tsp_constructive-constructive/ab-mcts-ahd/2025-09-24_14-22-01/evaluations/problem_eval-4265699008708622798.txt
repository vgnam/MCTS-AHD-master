import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        estimated_return_distance = distance_matrix[node][destination_node]

        centrality = sum(1 / (distance_matrix[current_node][n] + 1e-6) for n in unvisited_nodes) / len(unvisited_nodes)
        dynamic_weight = 0.5 * (remaining_nodes / total_nodes)

        score = immediate_distance + (0.3 * estimated_return_distance) * (1 - dynamic_weight) + (0.2 * centrality * immediate_distance)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
