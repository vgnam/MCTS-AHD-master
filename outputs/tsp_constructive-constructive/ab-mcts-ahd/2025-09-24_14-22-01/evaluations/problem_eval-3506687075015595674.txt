def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.7 if remaining_nodes < 3 else 0.3
    weight_destination = 1 - weight_immediate

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Calculate average distance to other unvisited nodes
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)

        # Penalize nodes with high average distances to encourage clustering
        penalty = avg_distance * 0.2

        weighted_score = (weight_immediate * immediate_distance +
                          weight_destination * destination_distance +
                          penalty)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
