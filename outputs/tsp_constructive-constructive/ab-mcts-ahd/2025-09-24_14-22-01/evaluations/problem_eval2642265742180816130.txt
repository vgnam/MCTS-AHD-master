def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    if num_unvisited == 0:
        return destination_node

    # Dynamic weight adjustment
    immediate_weight = 0.4 + 0.3 * (1 - num_unvisited / len(distance_matrix))
    return_weight = 0.3 - 0.2 * (1 - num_unvisited / len(distance_matrix))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_return_distance = distance_matrix[node][destination_node]
        avg_unvisited_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Penalty term for high average distances
        penalty = 0.1 * (avg_unvisited_distance ** 2)
        score = (immediate_weight * immediate_distance +
                 return_weight * estimated_return_distance +
                 0.2 * avg_unvisited_distance +
                 penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
