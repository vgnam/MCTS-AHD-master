def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    decay_rate = 0.9
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = decay_rate ** (remaining_nodes - 1) if remaining_nodes > 1 else 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        normalized_destination = destination_distance / max(distance_matrix[current_node][destination_node], 1)
        local_metric = immediate_distance * (1 - dynamic_weight) + normalized_destination * dynamic_weight

        if local_metric < min_cost:
            min_cost = local_metric
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
