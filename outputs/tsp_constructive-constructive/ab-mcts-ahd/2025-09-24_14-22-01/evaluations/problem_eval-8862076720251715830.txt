def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight = 1 / (1 + math.exp(-0.5 * (remaining_nodes - (remaining_nodes + 1) / 2)))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = weight * immediate_distance + (1 - weight) * potential_distance

        if remaining_nodes > 1:
            next_unvisited = [n for n in unvisited_nodes if n != node]
            next_node_candidate = None
            next_min_cost = float('inf')

            for next_candidate in next_unvisited:
                if next_candidate == destination_node:
                    continue
                next_immediate = distance_matrix[node][next_candidate]
                next_potential = distance_matrix[next_candidate][destination_node]
                next_weighted = weight * next_immediate + (1 - weight) * next_potential

                if next_weighted < next_min_cost:
                    next_min_cost = next_weighted
                    next_node_candidate = next_candidate

            if next_node_candidate is not None:
                weighted_cost += 0.2 * next_min_cost

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
