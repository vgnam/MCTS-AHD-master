import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}

    if not remaining_nodes:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / len(remaining_nodes)
    gamma = len(remaining_nodes) / len(distance_matrix)

    node_density = {}
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if n != node]
        if neighbors:
            node_density[node] = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            node_density[node] = 0
    avg_density = sum(node_density.values()) / len(node_density) if node_density else 0

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_distance = distance_matrix[node][destination_node]
        density_factor = (node_density[node] / avg_density) if avg_density else 1

        weight_immediate = 0.5 + 0.3 * (len(remaining_nodes) / len(unvisited_nodes))
        weight_estimated = 0.5 - 0.3 * (len(remaining_nodes) / len(unvisited_nodes))

        weighted_immediate = immediate_distance * (1 + centrality) * weight_immediate
        weighted_estimated = estimated_distance * (1 - centrality) * weight_estimated
        combined_weight = (weighted_immediate + weighted_estimated) / 2

        deviation = abs(immediate_distance - avg_distance)
        sigmoid_gamma = 1 / (1 + math.exp(-gamma))
        penalty = 0.1 * (density_factor ** 2) if avg_density else 0

        total_cost = combined_weight + deviation * sigmoid_gamma + penalty

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    return next_node
