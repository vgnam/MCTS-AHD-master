import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}

    if not remaining_nodes:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / len(remaining_nodes)
    gamma = len(remaining_nodes) / len(distance_matrix)

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            weighted_cost = float('inf')
        else:
            weighted_immediate = immediate_distance * (1 + centrality)
            weighted_potential = potential_distance * (1 - centrality)
            weighted_cost = weighted_immediate + weighted_potential

        deviation = abs(immediate_distance - avg_distance)
        sigmoid_gamma = 1 / (1 + math.exp(-gamma))
        total_cost = weighted_cost + deviation * sigmoid_gamma

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
