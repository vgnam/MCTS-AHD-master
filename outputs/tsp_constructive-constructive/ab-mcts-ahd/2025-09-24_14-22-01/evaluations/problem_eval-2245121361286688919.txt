def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))
    decay_factor = 0.3
    max_distance_threshold = 1.5
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + decay_factor * potential_distance

        if immediate_distance > max_distance_threshold:
            weighted_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.2)

        deviation = abs(immediate_distance - avg_distance)
        cost = weight * weighted_cost + (1 - weight) * deviation

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
