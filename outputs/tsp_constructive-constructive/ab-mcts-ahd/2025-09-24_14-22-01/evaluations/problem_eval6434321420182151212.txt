def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    base_decay_factor = 0.5
    dynamic_decay = base_decay_factor * (1 + 0.1 * len(unvisited_nodes))  # Adapts to remaining nodes
    max_detour_penalty = 1.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + dynamic_decay * potential_distance
        detour_factor = max(0, (immediate_distance - potential_distance) / max(1, potential_distance))
        weighted_cost *= (1 + max_detour_penalty * detour_factor * (1 - dynamic_decay))
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
