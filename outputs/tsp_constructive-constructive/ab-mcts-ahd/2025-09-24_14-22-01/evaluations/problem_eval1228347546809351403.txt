def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    base_weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))
    node_density = len(unvisited_nodes) / len(distance_matrix)
    adjusted_weight = base_weight * (1 + node_density)

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        density_factor = 1 + (node_density * 0.5)
        weighted_immediate = immediate_distance * (1 + centrality) * density_factor
        weighted_potential = potential_distance * (1 - centrality) * (2 - density_factor)
        combined_weight = adjusted_weight * weighted_immediate + (1 - adjusted_weight) * weighted_potential

        if combined_weight < min_cost:
            min_cost = combined_weight
            next_node = node

    if next_node is None and remaining_nodes > 0:
        next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])
    elif next_node is None:
        next_node = destination_node

    return next_node
