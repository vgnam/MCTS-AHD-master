def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = (remaining_nodes / total_nodes) ** 2
        proximity_penalty = 0.2 * (immediate_distance / (potential_distance + 1e-6)) if remaining_nodes > 1 else 0
        total_cost = (dynamic_weight * immediate_distance) + ((1 - dynamic_weight) * potential_distance) + proximity_penalty
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
