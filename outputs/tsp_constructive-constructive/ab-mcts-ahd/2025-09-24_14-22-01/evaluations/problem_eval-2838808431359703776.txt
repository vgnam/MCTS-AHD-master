def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    exploration_factor = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))
    competitive_ratio = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / (len(unvisited_nodes) * min(distance_matrix[current_node][node] for node in unvisited_nodes)) if unvisited_nodes else 1.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_weight = exploration_factor * immediate_distance + (1 - exploration_factor) * potential_distance
        deviation_penalty = (immediate_distance - min(distance_matrix[current_node][node] for node in unvisited_nodes)) / (max(distance_matrix[current_node][node] for node in unvisited_nodes) - min(distance_matrix[current_node][node] for node in unvisited_nodes) + 1e-6)
        competitive_penalty = abs(competitive_ratio - 1.0) * potential_distance
        weighted_cost = exploration_weight + 0.3 * deviation_penalty + 0.5 * competitive_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
