def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    weight_factor = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        estimated_return_distance = distance_matrix[node][destination_node]
        avg_unvisited_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        score = weight_factor * (0.7 * immediate_distance + 0.3 * estimated_return_distance) + (1 - weight_factor) * avg_unvisited_distance
        if centrality > 0.5:
            score *= 0.9
        if score < min_score:
            min_score = score
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
