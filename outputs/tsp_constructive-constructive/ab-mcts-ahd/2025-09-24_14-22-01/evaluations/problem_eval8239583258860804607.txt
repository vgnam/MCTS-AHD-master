def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    node_connectivity = {}
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if n != node]
        if neighbors:
            node_connectivity[node] = len(neighbors) / len(remaining_nodes)
        else:
            node_connectivity[node] = 0
    path_length_factor = 1 / (len(remaining_nodes) + 1)
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        connectivity_weight = (0.4 + 0.6 * path_length_factor) * node_connectivity[node]
        distance_weight = (0.6 - 0.2 * path_length_factor) * (immediate_distance / avg_distance)
        total_cost = 0.5 * distance_weight + 0.5 * (1 - connectivity_weight) + 0.2 * (potential_distance / avg_distance)
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
