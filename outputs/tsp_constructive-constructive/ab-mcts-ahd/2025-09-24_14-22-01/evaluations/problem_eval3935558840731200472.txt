def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    sum_costs = []
    product_costs = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        sum_cost = immediate_distance + potential_distance
        product_cost = immediate_distance * potential_distance
        sum_costs.append(sum_cost)
        product_costs.append(product_cost)
    if not sum_costs:
        return destination_node
    normalized_sum = [(x - min(sum_costs)) / (max(sum_costs) - min(sum_costs)) for x in sum_costs]
    normalized_product = [(x - min(product_costs)) / (max(product_costs) - min(product_costs)) for x in product_costs]
    combined_costs = [normalized_sum[i] + normalized_product[i] for i in range(len(normalized_sum))]
    min_combined = min(combined_costs)
    min_index = combined_costs.index(min_combined)
    next_node = unvisited_nodes[min_index] if unvisited_nodes[min_index] != destination_node else destination_node
    return next_node
