def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.3  # Base exploration weight
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic exploration factor based on remaining path length
        dynamic_exploration = exploration_weight * (remaining_nodes / (remaining_nodes + 1)) * (1 / (1 + potential_distance))

        # Normalized immediate distance to balance with potential distance
        normalized_immediate = immediate_distance / (sum(distance_matrix[current_node]) + 1e-6)

        # Penalty for nodes far from current path (optional)
        path_penalty = 1 + 0.1 * (potential_distance / (sum(distance_matrix[node]) + 1e-6))

        # Combined cost function
        weighted_cost = (1 - dynamic_exploration) * normalized_immediate + dynamic_exploration * potential_distance + path_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
