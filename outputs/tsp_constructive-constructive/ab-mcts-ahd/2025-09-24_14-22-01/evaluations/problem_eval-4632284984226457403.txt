def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_unvisited_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.7 * (1 - (remaining_nodes / total_unvisited_nodes)) + 0.3 * (immediate_distance / avg_distance if avg_distance > 0 else 1.0)
        penalty = 0.2 * (immediate_distance - potential_distance) if immediate_distance > 1.5 * potential_distance else 0
        weighted_cost = immediate_distance + dynamic_weight * potential_distance + penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
