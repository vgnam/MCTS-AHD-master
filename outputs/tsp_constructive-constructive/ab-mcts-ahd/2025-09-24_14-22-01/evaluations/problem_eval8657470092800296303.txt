def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_immediate = 0.7 - 0.4 * (remaining_nodes / (remaining_nodes + 1))
    penalty_factor = 0.6 / (remaining_nodes + 1)

    if remaining_nodes == 0:
        return destination_node

    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        centrality[node] = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node and n != destination_node) / (remaining_nodes - 1)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        penalty = penalty_factor * potential_distance
        node_centrality = centrality[node] if remaining_nodes > 1 else 0
        weighted_cost = weight_immediate * immediate_distance + (1 - weight_immediate) * potential_distance - penalty + (1 - node_centrality)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
