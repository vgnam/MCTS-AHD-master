def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate centroid of unvisited nodes
    unvisited_indices = list(unvisited_nodes)
    centroid = sum(unvisited_indices) / len(unvisited_indices)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        # Immediate proximity
        immediate_distance = distance_matrix[current_node][node]

        # Long-term efficiency
        potential_distance = distance_matrix[node][destination_node]

        # Centrality measure (how close node is to centroid)
        centrality = abs(node - centroid)

        # Dynamic weight factor combining remaining nodes and centrality
        weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2 * (1 + centrality / (len(distance_matrix) + 1))

        # Lookahead heuristic: evaluate the next best step from this node
        lookahead_cost = 0
        if remaining_nodes > 2:
            remaining_after_node = unvisited_nodes - {node}
            next_best = min(remaining_after_node - {destination_node}, key=lambda x: distance_matrix[node][x])
            lookahead_cost = distance_matrix[node][next_best]

        # Combined cost
        weighted_cost = immediate_distance + weight_factor * (potential_distance + lookahead_cost)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
