def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = set(unvisited_nodes) | {current_node, destination_node}
    num_remaining = len(remaining_nodes)

    alpha = min(0.9, 0.1 + 0.8 * (num_remaining / len(distance_matrix)))
    beta = 1 - alpha

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / num_remaining

        weighted_cost = (alpha * immediate_distance +
                        beta * potential_distance +
                        0.25 * centrality)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
