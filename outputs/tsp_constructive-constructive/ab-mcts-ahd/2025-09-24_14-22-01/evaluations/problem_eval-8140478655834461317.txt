def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality scores for each unvisited node
    centrality_scores = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality_scores[node] = 1 / (total_distance + 1e-10)  # Avoid division by zero

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 * (1 - 1 / (1 + remaining_nodes)) + 0.5 * centrality_scores[node]
        weighted_cost = dynamic_weight * immediate_distance + (1 - dynamic_weight) * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
