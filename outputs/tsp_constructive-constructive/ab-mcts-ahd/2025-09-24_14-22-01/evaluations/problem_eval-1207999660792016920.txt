def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes
    exploration_factor = 0.7 * (1 - progress_ratio)
    node_diversity = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / (potential_distance + 1e-10)
        weighted_cost = immediate_distance + exploration_factor * potential_distance
        adaptive_penalty = 0.4 * (1 - progress_ratio) * (potential_distance - immediate_distance) if (potential_distance > 1.3 * immediate_distance) else 0
        diversity_term = 0.2 * node_diversity[node]
        total_cost = weighted_cost + adaptive_penalty - diversity_term
        if next_node is None or (random.random() < exploration_factor and total_cost < min_cost):
            min_cost = total_cost
            next_node = node
        node_diversity[node] += 1

    if next_node is None:
        next_node = destination_node
    return next_node
