def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    best_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1  # Including current node
    remaining_nodes = len(unvisited_nodes)
    weight = 0.3 + 0.7 * (remaining_nodes / total_nodes)  # Dynamic weight based on progress
    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        scaled_destination_score = (distance_to_destination / avg_distance_to_dest) ** 1.5  # Non-linear scaling
        penalty = max(0, (10 - distance_to_node) / 10)  # Penalize nodes too close to current
        combined_score = distance_to_node + weight * scaled_destination_score + penalty
        if combined_score < best_score:
            best_score = combined_score
            next_node = node
    return next_node
