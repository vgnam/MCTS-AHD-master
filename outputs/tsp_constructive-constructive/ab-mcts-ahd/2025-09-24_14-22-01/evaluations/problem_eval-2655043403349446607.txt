def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.4
    base_threshold = 1.5
    avg_potential = sum(distance_matrix[node][destination_node] for node in unvisited_nodes if node != destination_node) / (len(unvisited_nodes) - 1) if unvisited_nodes else 0
    dynamic_threshold = base_threshold + 0.2 * avg_potential
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + decay_factor * potential_distance
        if immediate_distance > dynamic_threshold:
            weighted_cost *= (1 + (immediate_distance - dynamic_threshold) * 0.2)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
