def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    dynamic_threshold = avg_distance * 1.3  # Scale threshold dynamically
    candidates = []
    penalties = []

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        ratio = immediate_distance / (potential_distance + 1e-10)  # Avoid division by zero

        # Dynamic penalty based on distance and ratio
        penalty = 1.0
        if immediate_distance > dynamic_threshold:
            penalty = 1.0 + (immediate_distance - dynamic_threshold) * 0.3

        # Combine factors: ratio (lower is better), penalty (higher is worse)
        combined_score = ratio * penalty
        candidates.append((node, combined_score))

    if not candidates:
        return destination_node

    # Select top 3 candidates and choose probabilistically
    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:min(3, len(candidates))]
    selected = random.choices(
        [c[0] for c in top_candidates],
        weights=[1 / (c[1] + 1e-10) for c in top_candidates],
        k=1
    )[0]

    return next_node
