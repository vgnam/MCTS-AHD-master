def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight based on remaining nodes

    min_total_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        # Weighted combination of immediate and future costs
        total_cost = (1 - weight_factor) * current_to_node + weight_factor * node_to_dest

        if total_cost < min_total_cost:
            min_total_cost = total_cost
            next_node = node

    return next_node
