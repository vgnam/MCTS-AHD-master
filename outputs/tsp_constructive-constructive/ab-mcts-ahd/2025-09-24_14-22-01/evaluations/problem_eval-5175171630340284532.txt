defaulting to the destination if no other nodes are available.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_immediate = 0.4 - (0.2 * (remaining_nodes / (remaining_nodes + 1)))
    weight_potential = 0.3 + (0.2 * (remaining_nodes / (remaining_nodes + 1)))
    weight_centrality = 0.2 + (0.1 * (remaining_nodes / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        weighted_cost = (weight_immediate * immediate_distance +
                         weight_potential * potential_distance +
                         weight_centrality * centrality)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
