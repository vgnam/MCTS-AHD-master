def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Dynamic exploration weight

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_factor = 1 / (1 + potential_distance)
        penalty = (potential_distance / sum(distance_matrix[node])) if sum(distance_matrix[node]) != 0 else 0
        weighted_cost = (1 - exploration_weight) * immediate_distance + exploration_weight * exploration_factor - 0.3 * penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
