def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.5
    beta = 0.3
    gamma = 0.2  # Exploration factor weight

    # Calculate exploration factor: inversely proportional to node visit frequency
    visit_frequency = {node: 1 / (sum(row[node] for row in distance_matrix) + 1) for node in unvisited_nodes}

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_factor = visit_frequency[node]
        total_cost = alpha * immediate_distance + beta * potential_distance + gamma * exploration_factor
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
