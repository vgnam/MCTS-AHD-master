def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / remaining_nodes if remaining_nodes > 0 else 0
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        centrality = sum(distance_matrix[node]) / total_nodes if total_nodes > 0 else 1.0
        proximity_factor = 1.0 - (potential_distance / (2 * avg_distance)) if avg_distance > 0 else 0.0

        weight_factor = (remaining_nodes + 1) / (remaining_nodes + 2)
        penalty = 1.0 + 0.2 * (centrality / (avg_distance + 1e-6)) * (1.0 - proximity_factor)

        weighted_cost = immediate_distance * (1 / (potential_distance ** weight_factor)) + (0.5 * distance_ratio) * potential_distance
        weighted_cost *= penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
