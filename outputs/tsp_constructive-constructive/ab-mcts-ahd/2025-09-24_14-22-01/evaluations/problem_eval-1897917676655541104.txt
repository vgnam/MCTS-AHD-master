def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    threshold_distance = sum(sum(row) for row in distance_matrix) / (total_nodes ** 2) * 0.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        proximity_factor = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] <= threshold_distance)
        dynamic_weight = 0.5 + 0.3 * (remaining_nodes / total_nodes) + 0.2 * (proximity_factor / remaining_nodes)
        weighted_cost = dynamic_weight * immediate_distance + (1 - dynamic_weight) * potential_distance
        product_cost = immediate_distance * potential_distance
        combined_cost = 0.7 * weighted_cost + 0.3 * product_cost
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
