import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes) - 1
    if remaining_nodes == 0:
        return destination_node

    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        progress = remaining_nodes / (remaining_nodes + 1)
        weight_factor = math.tanh(3 * progress - 1.5)  # Hyperbolic tangent for smooth transition
        weight = 0.5 + 0.5 * weight_factor  # Normalize to [0.5, 1.0]

        weighted_cost = (1 - weight) * immediate_distance + weight * potential_distance

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
