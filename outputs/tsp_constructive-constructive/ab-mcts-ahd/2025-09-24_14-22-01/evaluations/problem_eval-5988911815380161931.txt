def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        weight = 0.5 * (1 + (remaining_nodes / (remaining_nodes + 1)))  # Dynamic weight
        weighted_cost = immediate_distance + weight * (potential_distance + 0.5 * centrality)
        normalized_cost = weighted_cost / (1 + weight)
        if normalized_cost < min_cost:
            min_cost = normalized_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
