def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (num_unvisited / len(distance_matrix)) if num_unvisited > 0 else 0.0
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes) if num_unvisited > 0 else 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_diversity = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1 if num_unvisited > 1 else 1)
        max_diversity = max(distance_matrix[node][other] for other in unvisited_nodes if other != node) if num_unvisited > 1 else 0
        diversity_factor = 0.6 * avg_diversity + 0.4 * max_diversity

        weighted_immediate = immediate_distance * (1.5 + progress_factor)
        weighted_potential = potential_distance * (0.5 - progress_factor)
        weighted_cost = weighted_immediate + weighted_potential + 0.2 * diversity_factor

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
