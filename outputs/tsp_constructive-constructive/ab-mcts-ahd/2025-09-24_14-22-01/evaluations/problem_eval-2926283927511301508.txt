def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    temperature = len(unvisited_nodes) / len(distance_matrix)  # Dynamic temperature
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Node centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Weighted cost with centrality and temperature
        weighted_cost = immediate_distance + (0.5 * potential_distance) + (0.2 * centrality)
        weighted_cost *= (1.0 - temperature)  # Exploitation increases as temperature decreases

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
