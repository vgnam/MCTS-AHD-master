defaulting to the destination when no other options remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    exploration_factor = (visited_nodes / total_nodes) ** 1.5
    probabilities = []
    node_list = list(unvisited_nodes)
    for node in node_list:
        if node == destination_node:
            probabilities.append(0.0)
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        revisit_penalty = 1.0 if node in unvisited_nodes else 1.5
        weighted_cost = (immediate_distance * (1 - exploration_factor) + potential_distance * exploration_factor) * revisit_penalty
        probabilities.append(1.0 / (weighted_cost + 1e-6))
    probabilities = [p / sum(probabilities) for p in probabilities]
    next_node = np.random.choice(node_list, p=probabilities)
    return next_node
