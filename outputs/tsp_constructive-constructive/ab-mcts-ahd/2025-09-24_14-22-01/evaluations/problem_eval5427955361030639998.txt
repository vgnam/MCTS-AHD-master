importance" factor derived from the distance matrix's row-wise mean.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    node_importance = [sum(distance_matrix[node]) / total_nodes for node in range(total_nodes)]
    current_importance = node_importance[current_node]

    min_score = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        geometric_mean = (immediate_distance * potential_distance) ** 0.5 if (immediate_distance > 0 and potential_distance > 0) else float('inf')

        weight_immediate = 0.7 - 0.3 * (remaining_nodes / total_nodes)
        weight_estimated = 0.3 + 0.3 * (remaining_nodes / total_nodes)
        importance_factor = node_importance[node] / current_importance if current_importance > 0 else 1.0
        revisit_penalty = (1.0 / (remaining_nodes + 1)) ** 2

        score = (weight_immediate * geometric_mean) + (weight_estimated * potential_distance * importance_factor) + (revisit_penalty * immediate_distance)

        if score < min_score:
            min_score = score
            next_node = node
            candidates = [node]
        elif score == min_score:
            candidates.append(node)

    if candidates:
        import random
        next_node = random.choice(candidates)

    return next_node
