def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 - (0.5 * (1 / (remaining_nodes + 1)))  # Inverse dynamic weight adjustment
    min_cost = float('inf')
    next_node = None
    direct_distance = distance_matrix[current_node][destination_node]
    penalty_threshold = 1.0 + (1.0 / (remaining_nodes + 1))  # Scaling penalty threshold

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = weight_factor * immediate_distance + (1 - weight_factor) * potential_distance

        # Apply progressive penalty for high immediate distances
        if immediate_distance > penalty_threshold * direct_distance:
            weighted_cost *= (1 + (remaining_nodes / (remaining_nodes + 1)))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
