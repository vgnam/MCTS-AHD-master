def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)

        # Dynamic weight adjustment: inverse square of remaining nodes for potential distance
        weight_potential = 0.5 / (remaining_nodes ** 0.5)
        weight_centrality = 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Balance centrality influence

        weighted_cost = immediate_distance + weight_potential * potential_distance + weight_centrality * centrality

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
