def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    if remaining_nodes == 0:
        return destination_node
    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    lookahead_factor = (remaining_nodes / total_nodes) ** 1.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_potential = potential_distance / avg_potential_distance
        weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** 1.5 * lookahead_factor
        weighted_cost = immediate_distance * (normalized_potential ** weight_factor) + (1 - lookahead_factor) * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
