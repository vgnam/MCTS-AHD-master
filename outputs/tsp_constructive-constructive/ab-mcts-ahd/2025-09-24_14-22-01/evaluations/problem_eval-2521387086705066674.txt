def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes) + 1
    exploration_factor = 0.5 * (1 - (remaining_nodes / len(distance_matrix))) ** 2
    alpha = 0.3 + 0.6 * exploration_factor
    beta = 1 - alpha

    local_density = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    global_density = sum(1 / (distance_matrix[node][destination_node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        transition_cost = immediate_distance * (1 + local_density) + potential_distance * (1 - global_density)

        weighted_cost = alpha * immediate_distance + beta * transition_cost

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
