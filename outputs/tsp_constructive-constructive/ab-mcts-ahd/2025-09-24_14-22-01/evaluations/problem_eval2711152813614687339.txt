def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate average distance to unvisited nodes
    total_distance = 0
    for node in unvisited_nodes:
        if node != destination_node:
            total_distance += distance_matrix[current_node][node]
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weighting: higher ratio of immediate distance to average distance increases potential distance influence
        distance_ratio = immediate_distance / (avg_distance + 1e-6)  # Avoid division by zero
        weighted_potential = potential_distance * (0.3 + 0.7 * min(1, distance_ratio))  # Base 0.3 + adaptive 0.7

        total_cost = immediate_distance + weighted_potential
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
