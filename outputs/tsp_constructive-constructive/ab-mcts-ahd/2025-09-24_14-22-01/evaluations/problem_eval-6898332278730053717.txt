def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_distance = distance_matrix[node][destination_node]
        neighborhood_sum = sum(distance_matrix[node])
        neighborhood_weight = 1 / (1 + neighborhood_sum)
        centrality = neighborhood_weight * (sum(distance_matrix[node]) / (total_nodes - 1))

        weight_immediate = 0.5 + 0.2 * (remaining_nodes / total_nodes)
        weight_estimated = 0.3 - 0.1 * (remaining_nodes / total_nodes)
        weight_centrality = 0.2 + 0.1 * (remaining_nodes / total_nodes)

        score = (weight_immediate * immediate_distance) + \
                (weight_estimated * estimated_distance) + \
                (weight_centrality * centrality)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
