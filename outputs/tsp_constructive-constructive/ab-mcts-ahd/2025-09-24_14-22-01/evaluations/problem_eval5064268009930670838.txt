def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.5  # Base weight for immediate distance
    beta_base = 0.5  # Base weight for potential distance
    remaining_nodes = len(unvisited_nodes) - 1
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_beta = beta_base * (1 + (remaining_nodes / len(unvisited_nodes)))  # Increase beta as remaining nodes decrease
        weighted_cost = alpha * immediate_distance + dynamic_beta * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
