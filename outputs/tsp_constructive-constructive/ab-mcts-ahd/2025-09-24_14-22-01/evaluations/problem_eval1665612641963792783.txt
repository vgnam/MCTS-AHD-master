def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)))
    exploitation_factor = 1 - exploration_factor
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            geometric_mean = float('inf')
        else:
            geometric_mean = (immediate_distance * potential_distance) ** 0.5
        path_coherence = (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) / distance_matrix[current_node][destination_node]
        node_fitness = (exploration_factor * (1 / geometric_mean) + exploitation_factor * path_coherence) * (1 - (remaining_nodes / len(distance_matrix)) ** 2)
        if node_fitness > min_cost:
            min_cost = node_fitness
            next_node = node
    return next_node
