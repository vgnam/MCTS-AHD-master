def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 0.2 + 0.4 * (remaining_nodes / len(distance_matrix))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        lookahead_cost = 0
        for next_node_candidate in unvisited_nodes:
            if next_node_candidate == node or next_node_candidate == destination_node:
                continue
            lookahead_cost += distance_matrix[node][next_node_candidate]
        if len(unvisited_nodes) > 1:
            lookahead_cost /= (len(unvisited_nodes) - 1)
        weighted_cost = immediate_distance + (potential_distance * weight) + (lookahead_cost * 0.3)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
