def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    alpha = 0.5 + 0.4 * (1 - remaining_ratio)
    potential_distances = [distance_matrix[node][destination_node] for node in unvisited_nodes if node != destination_node]
    if potential_distances:
        potential_std = max(potential_distances) - min(potential_distances) if len(potential_distances) > 1 else 0
    else:
        potential_std = 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            harmonic_mean = float('inf')
        else:
            harmonic_mean = 2 * (immediate_distance * potential_distance) / (immediate_distance + potential_distance)
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        novelty_factor = potential_std * (potential_distance / max(potential_distances)) if potential_distances else 0
        weighted_cost = harmonic_mean * (1 - alpha) + (position_factor * alpha) + novelty_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
