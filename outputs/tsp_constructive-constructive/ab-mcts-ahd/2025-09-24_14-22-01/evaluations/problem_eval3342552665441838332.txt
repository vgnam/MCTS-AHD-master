def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    node_connectivity = {}
    threshold = 1.5 * avg_distance
    for node in remaining_nodes:
        node_connectivity[node] = sum(1 for n in remaining_nodes if n != node and distance_matrix[node][n] <= threshold)
    avg_connectivity = sum(node_connectivity.values()) / len(node_connectivity) if node_connectivity else 1
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        connectivity_factor = node_connectivity[node] / avg_connectivity if avg_connectivity else 1
        total_cost = 0.4 * immediate_distance + 0.25 * potential_distance + 0.35 * (immediate_distance / connectivity_factor)
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
