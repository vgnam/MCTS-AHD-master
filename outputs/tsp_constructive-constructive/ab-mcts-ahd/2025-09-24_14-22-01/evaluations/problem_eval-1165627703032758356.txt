def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 0.7 * (remaining_nodes / (remaining_nodes + 1)) ** 2  # Decaying exploration factor
    min_cost = float('inf')
    next_node = None
    centrality_threshold = 0.6  # Threshold for considering node centrality

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all nodes)
        node_centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        normalized_centrality = node_centrality / max(sum(distance_matrix[0]) / len(distance_matrix[0]), 1e-6)

        # Combine distance and centrality with exploration weight
        combined_cost = (1 - exploration_weight) * immediate_distance + exploration_weight * (potential_distance * (1 + centrality_threshold * normalized_centrality))

        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
