def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploration_weight = 0.3  # Base weight for exploration factor
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic exploration factor based on remaining nodes
        dynamic_exploration = exploration_weight * (1 / (1 + potential_distance)) * (1 + 0.1 * (1 / remaining_nodes))

        # Node centrality factor (average distance to other unvisited nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes
        centrality_factor = 1 / (1 + centrality)

        total_cost = 0.6 * immediate_distance + 0.3 * potential_distance + dynamic_exploration + 0.1 * centrality_factor

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
