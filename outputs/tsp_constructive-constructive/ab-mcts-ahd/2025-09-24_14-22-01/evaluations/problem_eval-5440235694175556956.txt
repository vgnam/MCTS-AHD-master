def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1 if destination_node in unvisited_nodes else len(unvisited_nodes)
    heuristic_factor = (remaining_nodes + 1) / (remaining_nodes + 2) if remaining_nodes > 0 else 1.0
    weight = 0.4 + (0.6 * (remaining_nodes / (remaining_nodes + 1)))
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_immediate = immediate_distance * (1 + 0.5 * centrality)
        weighted_potential = potential_distance * (1 - 0.3 * centrality)
        combined_weight = (weighted_immediate + weighted_potential) / 2
        total_cost = weight * combined_weight + (1 - weight) * heuristic_factor * potential_distance

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
