def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes) - 1
    gamma = remaining_nodes / total_nodes

    weight_immediate = 0.5 if gamma > 0.3 else 0.2
    weight_potential = 0.3 if gamma > 0.3 else 0.6
    weight_centrality = 0.2 if gamma > 0.3 else 0.2

    avg_distance = sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        normalized_immediate = immediate_distance / avg_distance
        normalized_potential = potential_distance / avg_distance
        normalized_centrality = centrality / avg_distance

        dynamic_weight = 0.3 * (1 - gamma)
        exploration_factor = 1 / (1 + potential_distance)

        total_cost = (weight_immediate * normalized_immediate +
                      weight_potential * normalized_potential +
                      weight_centrality * normalized_centrality) + dynamic_weight * exploration_factor

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
