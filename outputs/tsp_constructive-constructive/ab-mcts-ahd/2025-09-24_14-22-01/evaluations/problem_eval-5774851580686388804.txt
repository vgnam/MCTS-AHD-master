import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    # Time-varying weight using sigmoid function to balance priorities
    progress = 1 - (remaining_nodes / len(distance_matrix))
    weight_factor = 1 / (1 + math.exp(-10 * (progress - 0.5)))
    current_weight = 0.5 * weight_factor
    destination_weight = 1 - current_weight

    # Calculate average distance to remaining nodes
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        # Score combines weighted distances and deviation from average
        score = (current_weight * distance_to_node +
                 destination_weight * distance_to_destination +
                 0.3 * abs(distance_to_node - avg_distance))
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
