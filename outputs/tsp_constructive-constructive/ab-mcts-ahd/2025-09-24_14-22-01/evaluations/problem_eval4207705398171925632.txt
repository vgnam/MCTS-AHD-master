def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    total_remaining = len(remaining_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / total_remaining
    node_density = {node: len([n for n in remaining_nodes if distance_matrix[node][n] <= avg_distance * 1.2]) for node in remaining_nodes}

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        density_factor = node_density[node] / total_remaining if total_remaining > 0 else 1.0
        memory_factor = 0.7 if node in unvisited_nodes and len(unvisited_nodes) > 3 else 0.3

        dynamic_weight_immediate = 0.6 + 0.15 * density_factor
        dynamic_weight_potential = 0.1 - 0.05 * density_factor
        dynamic_weight_heuristic = 0.3 + 0.1 * memory_factor

        heuristic_factor = (immediate_distance + potential_distance) / (avg_distance * (1 + memory_factor))
        total_cost = (dynamic_weight_immediate * immediate_distance +
                      dynamic_weight_potential * potential_distance +
                      dynamic_weight_heuristic * heuristic_factor)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
