def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 + 0.4 * (1 - (remaining_nodes / (remaining_nodes + 1)) ** 2)
        normalized_cost = immediate_distance + dynamic_weight * (potential_distance / avg_potential_distance)
        if normalized_cost < min_cost:
            min_cost = normalized_cost
            next_node = node
    return next_node
