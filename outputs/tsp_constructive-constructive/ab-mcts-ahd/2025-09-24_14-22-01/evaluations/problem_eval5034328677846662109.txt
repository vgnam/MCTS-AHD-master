def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    total_nodes = len(unvisited_nodes) + 1  # +1 for the current node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 1 else 0.5
    weight = 0.5 + 0.5 * remaining_ratio  # Linear interpolation between 0.5 and 1.0
    penalty = 1.0 + (1.0 - remaining_ratio) * 0.5  # Penalty increases as nodes are visited

    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_remaining_distance = distance_matrix[node][destination_node]
        normalized_immediate = immediate_distance / max(distance_matrix[current_node])
        normalized_remaining = estimated_remaining_distance / max(distance_matrix[node])
        score = (weight * normalized_immediate) + ((1 - weight) * normalized_remaining) + penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
