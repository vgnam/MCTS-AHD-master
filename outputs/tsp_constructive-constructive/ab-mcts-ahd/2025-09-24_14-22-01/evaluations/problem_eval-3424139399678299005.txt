def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / total_unvisited if total_unvisited > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        exploration_factor = 1 / (1 + potential_distance)

        # Dynamic weighting with penalty for revisits and bonus for critical bridges
        revisit_penalty = 1 + (0.2 * (total_unvisited / len(distance_matrix)))  # Penalize revisits when many nodes remain
        bridge_bonus = 0.3 if (immediate_distance < 1.5 * avg_distance and potential_distance < 1.5 * avg_distance) else 0.0

        weighted_cost = (immediate_distance * revisit_penalty) + (0.4 * distance_ratio * potential_distance) - bridge_bonus + (0.3 * exploration_factor)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
