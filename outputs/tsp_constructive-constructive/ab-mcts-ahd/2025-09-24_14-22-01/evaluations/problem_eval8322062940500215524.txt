def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.5  # Tunable parameter for exploration/exploitation

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)

        # Dynamic weight combining exploration and exploitation
        weight = exploration_factor * (remaining_nodes / (remaining_nodes + 2)) + (1 - exploration_factor) * (1 / (remaining_nodes + 1))

        weighted_cost = immediate_distance + weight * (potential_distance + 0.5 * centrality)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
