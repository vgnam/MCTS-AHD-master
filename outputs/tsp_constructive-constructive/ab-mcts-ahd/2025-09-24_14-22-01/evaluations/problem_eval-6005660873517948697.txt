def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Centrality-based penalty (higher penalty for nodes with higher average distances to others)
        centrality = sum(distance_matrix[node]) / total_nodes
        penalty = 1.0 + 0.5 * (centrality / (sum(distance_matrix[current_node]) / total_nodes + 1e-6))

        # Dynamic priority combining immediate and potential distance with centrality penalty
        weighted_cost = immediate_distance + (0.7 * potential_distance) + (0.3 * centrality)
        weighted_cost *= penalty

        # Probabilistic selection to avoid local optima
        if weighted_cost < min_cost or (weighted_cost == min_cost and potential_distance < distance_matrix[current_node][next_node]):
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
