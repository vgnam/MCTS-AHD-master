import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = 0.5 + (0.5 * len(unvisited_nodes) / len(distance_matrix))
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    max_distance_threshold = 2.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        product_cost = immediate_distance * potential_distance
        weighted_cost = immediate_distance + decay_factor * potential_distance
        combined_cost = 0.5 * product_cost + 0.5 * weighted_cost
        deviation = abs(immediate_distance - avg_distance)
        if potential_distance > max_distance_threshold:
            combined_cost *= (1 + (potential_distance - max_distance_threshold) * 0.1)
        combined_cost += deviation * 0.2

        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
