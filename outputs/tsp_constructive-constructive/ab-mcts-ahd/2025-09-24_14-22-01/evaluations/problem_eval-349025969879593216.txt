def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        distance_ratio = current_to_node / (node_to_dest + 1e-10)
        diversity_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)
        weighted_cost = (0.5 * distance_ratio) + (0.3 * diversity_factor) + (0.2 * (current_to_node + node_to_dest) / (remaining_nodes + 1))
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
