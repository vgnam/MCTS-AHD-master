def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.5 + 0.2 * (remaining_nodes / len(distance_matrix))
    path_history_penalty = 1.0 + 0.1 * (1 - remaining_nodes / len(distance_matrix))

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        path_smoothness = 1.0 / (1.0 + abs(immediate_distance - distance_matrix[current_node][destination_node]))
        weighted_cost = (immediate_distance * base_weight) + (potential_distance ** (base_weight * 0.8)) - (path_smoothness * path_history_penalty)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
