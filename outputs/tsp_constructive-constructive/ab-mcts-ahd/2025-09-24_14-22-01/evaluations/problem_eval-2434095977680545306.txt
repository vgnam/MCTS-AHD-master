def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 + (1.0 / (remaining_nodes + 1))  # Dynamically adjusts weight based on remaining nodes
    random_factor = 0.1  # Small randomness to avoid local optima

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = (immediate_distance * 2 * weight_factor) + (0.3 * potential_distance * weight_factor) + (random_factor * (immediate_distance + potential_distance))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
