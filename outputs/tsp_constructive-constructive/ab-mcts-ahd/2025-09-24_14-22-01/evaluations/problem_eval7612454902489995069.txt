def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    centrality = {}
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality[node] = sum(distance_matrix[node]) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_factor = centrality[node] / max(centrality.values()) if centrality else 1.0
        scaling_factor = 1.0 + 0.3 * centrality_factor
        weighted_cost = (0.4 * immediate_distance + 0.6 * potential_distance) * scaling_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
