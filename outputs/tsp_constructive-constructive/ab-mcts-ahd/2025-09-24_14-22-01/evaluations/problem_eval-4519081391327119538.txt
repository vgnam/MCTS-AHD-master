def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    max_utility = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.9  # Fixed high priority for immediate distance
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            utility = -float('inf')
        else:
            immediate_weight = (immediate_distance ** 0.5) * (1 - alpha)
            potential_weight = (potential_distance ** 0.5) * alpha
            revisit_penalty = 1 - (1 / (1 + remaining_nodes))  # Logarithmic penalty
            utility = (immediate_weight - potential_weight) * revisit_penalty
        if utility > max_utility:
            max_utility = utility
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
