def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.5 if remaining_nodes > 2 else 0.3
    beta = 0.5 if remaining_nodes > 2 else 0.7
    centrality = {node: sum(distance_matrix[node]) / len(distance_matrix[node]) for node in unvisited_nodes}
    for node in unvisited_nodes:
        if node == destination_node and remaining_nodes > 1:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_factor = 1 / (centrality[node] + 1e-6)
        combined_cost = (alpha * immediate_distance + beta * potential_distance) * centrality_factor
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
