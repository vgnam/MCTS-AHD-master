def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_factor = 1.0 / (1.0 + (1.0 - visited_ratio) ** 2)
    centrality_weight = visited_ratio ** 0.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)
        dynamic_cost = (immediate_distance ** weight_factor) * (potential_distance ** (1 - weight_factor)) * (centrality ** centrality_weight)
        if dynamic_cost < min_cost:
            min_cost = dynamic_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
