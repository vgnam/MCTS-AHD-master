def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1 + remaining_nodes)  # Cooling strategy
    alpha = 0.7 * temperature
    beta = 0.3 * (1 - temperature)
    gamma = 0.2 * (1 - temperature)

    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        deviation = abs(immediate_distance - avg_distance)

        # Dynamic weighted cost
        total_cost = (alpha * immediate_distance +
                      beta * potential_distance +
                      gamma * deviation)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
