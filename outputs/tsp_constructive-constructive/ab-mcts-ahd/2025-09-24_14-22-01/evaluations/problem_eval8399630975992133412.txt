def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.5 * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_distance = (immediate_distance + potential_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else float('inf')
        revisit_penalty = 1 + (0.1 * (len(distance_matrix) - len(unvisited_nodes)))
        weighted_cost = (normalized_distance * revisit_penalty) * (1 - alpha) + (potential_distance / immediate_distance if immediate_distance > 0 else float('inf')) * alpha
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
