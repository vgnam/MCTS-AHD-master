def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    exploration_weight = 0.4 * temperature
    remaining_nodes = len(unvisited_nodes)
    node_weights = []

    for node in unvisited_nodes:
        if node == destination_node:
            node_weights.append((node, 0.0))
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        local_search_bonus = min([distance_matrix[node][other] for other in unvisited_nodes if other != node and other != destination_node], default=0)

        weighted_cost = (1 - exploration_weight) * immediate_distance * potential_distance - 0.2 * local_search_bonus
        weighted_cost += exploration_weight * (1 / (1 + potential_distance)) * (remaining_nodes / (remaining_nodes + 1))

        node_weights.append((node, weighted_cost))

    if not node_weights:
        return destination_node

    min_cost = min(weight for _, weight in node_weights)
    max_cost = max(weight for _, weight in node_weights)

    if max_cost == min_cost:
        return node_weights[0][0]

    normalized_weights = [(node, (weight - min_cost) / (max_cost - min_cost)) for node, weight in node_weights]
    probabilities = [1 - weight for node, weight in normalized_weights]
    total_prob = sum(probabilities)

    if total_prob == 0:
        return node_weights[0][0]

    probabilities = [p / total_prob for p in probabilities]
    next_node = random.choices([node for node, _ in node_weights], weights=probabilities, k=1)[0]

    return next_node
