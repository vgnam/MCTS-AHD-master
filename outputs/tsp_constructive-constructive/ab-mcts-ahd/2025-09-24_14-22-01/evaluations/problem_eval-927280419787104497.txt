def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    decay_factor = max(0.1, 0.4 * (len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))))  # Dynamic decay factor
    max_distance_threshold = 1.5  # Penalty threshold
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        product_cost = immediate_distance * potential_distance
        weighted_cost = immediate_distance + decay_factor * potential_distance
        combined_cost = product_cost * (1 + (weighted_cost - immediate_distance) / immediate_distance)  # Combine product and weighted cost
        if immediate_distance > max_distance_threshold:
            combined_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.2)  # Stronger penalty
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
