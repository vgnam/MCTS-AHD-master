def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    if remaining_nodes == 0:
        return destination_node

    # Calculate centrality for each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1)

    # Dynamic weight based on path progress
    progress_factor = 1.0 - (remaining_nodes / len(unvisited_nodes))
    exploration_bias = 0.3 + 0.7 * progress_factor

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        ratio = immediate_distance / (potential_distance + 1e-10)

        # Centrality-based adjustment
        centrality_adjustment = 0.5 * (centrality[node] / (sum(centrality.values()) + 1e-10))

        # Exploration term
        exploration_term = exploration_bias * (1.0 / (ratio + 1e-10))

        # Combined cost
        weighted_cost = immediate_distance + 0.7 * potential_distance - 0.3 * centrality_adjustment + exploration_term

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
