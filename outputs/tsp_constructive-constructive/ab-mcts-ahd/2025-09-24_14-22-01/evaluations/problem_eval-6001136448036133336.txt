import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if len(unvisited_nodes) == 1:
        return unvisited_nodes[0]

    remaining_nodes = len(unvisited_nodes)
    weight_immediate = 0.4 if remaining_nodes > 3 else 0.1
    weight_potential = 0.3 if remaining_nodes > 3 else 0.5
    weight_centrality = 0.2 if remaining_nodes > 3 else 0.3
    weight_connectivity = 0.1 if remaining_nodes > 3 else 0.5

    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * min(distance_matrix[node]))
        total_cost = (weight_immediate * immediate_distance +
                      weight_potential * potential_distance +
                      weight_centrality * centrality -
                      weight_connectivity * connectivity)
        candidates.append((node, total_cost))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:max(2, len(candidates) // 2)]
    selected_node, _ = random.choice(top_candidates)

    return next_node
