def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 1:
        return unvisited_nodes[0] if unvisited_nodes[0] != destination_node else destination_node
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weight_factor = 1.0 - (remaining_nodes / (remaining_nodes + 5))  # Dynamic weighting based on remaining nodes
        total_cost = (immediate_distance * (1.0 + weight_factor)) + (potential_distance * (0.5 * (1.0 - weight_factor)))
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
