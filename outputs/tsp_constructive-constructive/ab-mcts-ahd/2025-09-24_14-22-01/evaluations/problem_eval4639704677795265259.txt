def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    connectivity_factor = sum(1 for node in unvisited_nodes if distance_matrix[current_node][node] != float('inf')) / total_unvisited if total_unvisited > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            weighted_cost = float('inf')
        else:
            alpha = (total_unvisited / total_nodes) ** 2
            novelty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < immediate_distance) / total_unvisited if total_unvisited > 0 else 0
            weighted_cost = alpha * immediate_distance + (1 - alpha) * potential_distance - novelty * connectivity_factor

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
