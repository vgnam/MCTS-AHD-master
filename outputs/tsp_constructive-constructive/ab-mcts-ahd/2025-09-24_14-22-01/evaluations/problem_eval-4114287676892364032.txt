def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    if remaining_nodes == 0:
        return destination_node

    weight_immediate = 0.7
    weight_potential = 0.2
    weight_lookahead = 0.1
    decay_factor = 0.9 ** remaining_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        lookahead_sum = 0
        for other_node in unvisited_nodes:
            if other_node != node and other_node != destination_node:
                lookahead_sum += distance_matrix[node][other_node]
        avg_lookahead = lookahead_sum / max(1, len(unvisited_nodes) - 2)

        weighted_cost = (weight_immediate * immediate_distance +
                         weight_potential * potential_distance +
                         weight_lookahead * avg_lookahead) * decay_factor

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
