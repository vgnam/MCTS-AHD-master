def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    exploration_weight = min(1.0, 0.5 + 0.5 * (num_unvisited / len(distance_matrix))) if num_unvisited > 0 else 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_node_distance = sum(distance_matrix[node]) / len(distance_matrix[node]) if len(distance_matrix[node]) > 0 else 1.0
        centrality = 1.0 / (1.0 + avg_node_distance)

        exploration_term = exploration_weight * potential_distance
        exploitation_term = (1.0 - exploration_weight) * immediate_distance
        centrality_penalty = 1.0 + 0.3 * (1.0 - centrality)

        weighted_cost = (exploitation_term + exploration_term) * centrality_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
