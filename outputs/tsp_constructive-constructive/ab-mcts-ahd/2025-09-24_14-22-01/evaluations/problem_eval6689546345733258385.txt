import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    connectivity = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    learning_factor = 0.7  # Adjusts influence of historical preferences
    penalty_weight = 0.3   # Controls deviation penalty

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            weighted_cost = float('inf')
        else:
            # Hybrid cost calculation with learning factor
            local_cost = immediate_distance * (1 + connectivity * learning_factor)
            global_cost = potential_distance * (0.5 * (1 - connectivity * learning_factor))
            weighted_cost = local_cost + global_cost

            # Adaptive deviation penalty
            deviation = abs(immediate_distance - avg_distance)
            weighted_cost += deviation * penalty_weight * (1 + connectivity)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
