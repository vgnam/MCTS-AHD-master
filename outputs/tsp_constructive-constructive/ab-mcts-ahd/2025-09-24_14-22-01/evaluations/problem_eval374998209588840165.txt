def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    remaining_count = len(remaining_nodes)
    dynamic_weight = 0.5 * (1 + (remaining_count / (remaining_count + 1)))

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / remaining_count

    min_cost = float('inf')
    next_node = None

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + dynamic_weight * potential_distance * (1 + centrality)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
