def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    unvisited_count = len(unvisited_nodes)
    total_nodes = unvisited_count + 1  # Including current node

    # Dynamic weight adjustment
    if unvisited_count < 5:
        weight_immediate = 0.6
        weight_potential = 0.4
    else:
        weight_immediate = 0.4
        weight_potential = 0.6

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Novelty factor: centrality in remaining graph
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (unvisited_count - 1) if unvisited_count > 1 else 0
        novelty_factor = 1 / (1 + centrality)  # Higher for more central nodes

        total_cost = (weight_immediate * immediate_distance +
                      weight_potential * potential_distance +
                      0.2 * (1 - novelty_factor) * max(distance_matrix[current_node]))

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
