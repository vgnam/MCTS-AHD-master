import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    temperature = max(1.0, 10.0 * (remaining_nodes / len(distance_matrix)))
    weight_factor = 1.0 / (1.0 + remaining_nodes) if remaining_nodes > 0 else 1.0

    costs = []
    nodes = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_cost = (immediate_distance ** weight_factor) * (potential_distance ** (1 - weight_factor))
        costs.append(dynamic_cost)
        nodes.append(node)

    if not nodes:
        return destination_node

    min_cost = min(costs)
    max_cost = max(costs)
    normalized_costs = [(max_cost - cost) / (max_cost - min_cost + 1e-10) for cost in costs]

    probabilities = [math.exp(-cost / temperature) for cost in normalized_costs]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
