importance' factor based on the average distance to remaining nodes, ensuring a more adaptive and informed node selection process.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weight = 1.0 / (1.0 + remaining_nodes) if remaining_nodes > 0 else 1.0
        node_importance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        sum_cost = (1 - weight) * immediate_distance + weight * potential_distance + 0.5 * node_importance
        if sum_cost < min_cost:
            min_cost = sum_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
