def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight = 0.3 + (0.7 * (remaining_nodes / (remaining_nodes + 1)))
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        novelty_factor = abs(immediate_distance - avg_distance)
        penalty = 0.05 * novelty_factor if immediate_distance > avg_distance else -0.05 * novelty_factor
        weighted_immediate = immediate_distance * (1 + centrality) + penalty
        weighted_potential = potential_distance * (1 - centrality)
        combined_weight = weight * weighted_immediate + (1 - weight) * weighted_potential

        if combined_weight < min_cost:
            min_cost = combined_weight
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
