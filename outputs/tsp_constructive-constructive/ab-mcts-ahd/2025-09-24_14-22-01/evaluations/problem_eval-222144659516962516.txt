def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes - {destination_node}:
        return destination_node

    remaining_nodes = unvisited_nodes - {destination_node}
    total_remaining = len(remaining_nodes)

    # Calculate node frequencies and local search
    node_frequencies = {node: 0.1 for node in remaining_nodes}
    for node in remaining_nodes:
        for neighbor in remaining_nodes:
            if node != neighbor and distance_matrix[node][neighbor] < sum(distance_matrix[node][n] for n in remaining_nodes) / total_remaining:
                node_frequencies[node] += 0.1

    # Calculate dynamic weights
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / total_remaining
    node_density = {node: len([n for n in remaining_nodes if distance_matrix[node][n] <= avg_distance * 1.2]) for node in remaining_nodes}

    # Probabilistic selection
    candidates = []
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        density_factor = node_density[node] / total_remaining if total_remaining > 0 else 1.0
        frequency_factor = node_frequencies[node]

        dynamic_weight_immediate = 0.4 + 0.15 * density_factor
        dynamic_weight_potential = 0.35 + 0.25 * frequency_factor
        dynamic_weight_heuristic = 0.2 - 0.1 * density_factor

        heuristic_factor = (immediate_distance + potential_distance) / (avg_distance * (1 + frequency_factor))
        total_cost = (dynamic_weight_immediate * immediate_distance +
                      dynamic_weight_potential * potential_distance +
                      dynamic_weight_heuristic * heuristic_factor)

        candidates.append((node, total_cost))

    # Select node with highest probability
    candidates.sort(key=lambda x: x[1])
    selected_index = int(len(candidates) * 0.3)  # Top 30% candidates
    next_node = candidates[selected_index][0] if candidates else destination_node

    return next_node
