def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    min_cost = float('inf')
    next_node = None
    if remaining_nodes == 0:
        return destination_node
    current_distances = [distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node]
    avg_distance = sum(current_distances) / len(current_distances) if current_distances else 0
    std_dev = (sum((d - avg_distance) ** 2 for d in current_distances) / len(current_distances)) ** 0.5 if current_distances else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node]) if len(distance_matrix[node]) > 0 else 1.0
        weight = 1.0 / (1.0 + remaining_nodes ** 0.5)
        variance_factor = 1.0 + 0.1 * (potential_distance / (std_dev + 1e-6))
        weighted_cost = immediate_distance + weight * potential_distance * variance_factor
        centrality_penalty = 1.0 + 0.3 * (centrality / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]) + 1e-6)) if remaining_nodes <= 3 else 1.0
        weighted_cost *= centrality_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
