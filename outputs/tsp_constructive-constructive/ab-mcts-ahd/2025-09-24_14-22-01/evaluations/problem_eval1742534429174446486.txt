def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    avg_unvisited_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited
    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_factor = (avg_unvisited_distance - immediate_distance) / (avg_unvisited_distance + 1e-6)
        inverse_exploration = 1 / (1 + potential_distance)
        dynamic_weight = 0.5 + 0.5 * (1 - num_unvisited / (num_unvisited + 1))  # Weight decreases as more nodes are unvisited

        total_cost = immediate_distance + dynamic_weight * (0.5 * potential_distance + 0.5 * exploration_factor) + 0.3 * inverse_exploration
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
