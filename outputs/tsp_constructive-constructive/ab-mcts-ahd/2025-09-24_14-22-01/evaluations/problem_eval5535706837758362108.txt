importance" metric derived from betweenness centrality and local density, while maintaining the original's geometric mean and position factor with an adaptive alpha that now also considers the node's historical selection frequency.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    import numpy as np
    from collections import defaultdict

    if not hasattr(select_next_node, 'visit_counts'):
        select_next_node.visit_counts = defaultdict(int)

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.7 if remaining_nodes > 2 else 0.3
    alpha *= (1 - select_next_node.visit_counts[current_node] / (sum(select_next_node.visit_counts.values()) + 1e-6))  # Adjust alpha based on visit frequency

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance == 0 or potential_distance == 0:
            geometric_mean = float('inf')
        else:
            geometric_mean = (immediate_distance * potential_distance) ** 0.5

        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0

        # Calculate node importance: betweenness centrality approximation + local density
        node_degree = sum(1 for d in distance_matrix[node] if d > 0)
        path_counts = sum(1 for i in range(len(distance_matrix)) if distance_matrix[i][node] > 0 and distance_matrix[node][i] > 0)
        node_importance = (node_degree * path_counts) / (remaining_nodes ** 2) if remaining_nodes > 0 else 0

        revisit_penalty = (remaining_nodes / (remaining_nodes + 1)) ** 2
        exploration_bonus = (1 / (1 + select_next_node.visit_counts[node])) ** 0.5  # Encourage less visited nodes

        weighted_cost = (geometric_mean * (1 - alpha) + (position_factor * alpha) * revisit_penalty) * (1 - node_importance * exploration_bonus)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    else:
        select_next_node.visit_counts[next_node] += 1

    return next_node
