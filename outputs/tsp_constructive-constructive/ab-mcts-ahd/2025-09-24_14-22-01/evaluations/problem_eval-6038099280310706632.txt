def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_dist = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        path_deviation = abs(immediate_dist + node_to_dest - current_to_dest)

        progression_factor = (total_nodes - remaining_nodes) / total_nodes
        node_centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)

        dynamic_bias = 0.3 * progression_factor * (1 - (node_centrality / (max(distance_matrix[node]) + 1e-6)))
        deviation_penalty = 0.2 * path_deviation / (current_to_dest + 1e-6)

        weighted_cost = immediate_dist + dynamic_bias * node_to_dest - deviation_penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
