def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(unvisited_nodes) + 1

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

        # Adaptive weights: prioritize centrality as more nodes are visited
        centrality_weight = 0.3 * (1 - (remaining_nodes / total_nodes))
        immediate_weight = 0.5 + centrality_weight
        potential_weight = 0.2 - centrality_weight

        weighted_cost = (immediate_weight * immediate_distance) + (centrality_weight * centrality) + (potential_weight * potential_distance)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
