def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    current_centrality = sum(distance_matrix[current_node][other] for other in range(len(distance_matrix))) / len(distance_matrix)
    visit_counts = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        diversity_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)
        centrality_factor = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / len(distance_matrix)
        visit_penalty = visit_counts[node] * 0.1
        weighted_cost = (0.5 * immediate_distance) + (0.3 * diversity_factor) + (0.2 * centrality_factor) + visit_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    visit_counts[next_node] += 1
    return next_node
