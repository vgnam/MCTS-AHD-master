def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    max_distance_threshold = 1.5
    remaining_nodes = len(unvisited_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    weight = 0.5 * (1 + centrality) if centrality > 0.5 else 0.5 * (1 - centrality)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        adjusted_cost = weight * immediate_distance + (1 - weight) * potential_distance
        if immediate_distance > max_distance_threshold:
            adjusted_cost *= (1 + (immediate_distance - max_distance_threshold) * 0.1)
        if adjusted_cost < min_cost:
            min_cost = adjusted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
