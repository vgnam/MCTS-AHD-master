def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes) - 1 if destination_node in unvisited_nodes else len(unvisited_nodes)
    dynamic_weight_immediate = 0.8 if remaining_nodes > 2 else 0.6
    dynamic_weight_potential = 0.7 if remaining_nodes > 2 else 0.4
    dynamic_weight_centrality = 0.5 * (remaining_nodes / len(unvisited_nodes)) if len(unvisited_nodes) > 1 else 0.0
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        weighted_cost = (dynamic_weight_immediate * immediate_distance +
                         dynamic_weight_potential * potential_distance +
                         dynamic_weight_centrality * centrality)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
