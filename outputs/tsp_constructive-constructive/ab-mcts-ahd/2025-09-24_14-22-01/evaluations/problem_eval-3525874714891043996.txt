def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    avg_distances = [sum(distance_matrix[node]) / (len(distance_matrix[node]) - 1) for node in unvisited_nodes]
    centrality = [1.0 / (1.0 + dist) for dist in avg_distances]
    weight_factor = 0.5 * (1.0 + (1.0 / (1.0 + remaining_nodes)))
    for i, node in enumerate(unvisited_nodes):
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        log_immediate = np.log1p(immediate_distance)
        log_potential = np.log1p(potential_distance)
        dynamic_cost = (log_immediate ** weight_factor) * (log_potential ** (1 - weight_factor)) * centrality[i]
        if dynamic_cost < min_cost:
            min_cost = dynamic_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
