def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.6 if remaining_nodes > 3 else 0.2  # More aggressive adjustment
    revisit_penalty = (remaining_nodes / (remaining_nodes + 2)) ** 2  # Stronger penalty
    candidates = []
    weights = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            hybrid_cost = float('inf')
        else:
            exploration_factor = (immediate_distance + potential_distance) / (distance_matrix[current_node][destination_node] + 1e-6)
            hybrid_cost = (immediate_distance * potential_distance) ** 0.5 * (1 - alpha) + exploration_factor * alpha
        hybrid_cost *= revisit_penalty
        candidates.append(node)
        weights.append(1 / (hybrid_cost + 1e-6))  # Convert cost to weight
    if not candidates:
        return destination_node
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    next_node = np.random.choice(candidates, p=normalized_weights)
    return next_node
