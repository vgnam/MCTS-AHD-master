def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 0.5 + 0.3 * (remaining_nodes / total_nodes) + 0.2 * (1 - (remaining_nodes / total_nodes))
    threshold_distance = sum(sum(row) for row in distance_matrix) / (total_nodes ** 2) * 0.7

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        cluster_density = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] <= threshold_distance)
        dynamic_weight = 0.4 + 0.3 * (remaining_nodes / total_nodes) + 0.3 * (cluster_density / (remaining_nodes + 1))

        cost = (1 - exploration_factor) * immediate_distance + exploration_factor * potential_distance
        cost = cost * (1 - dynamic_weight) + dynamic_weight * (cluster_density / (remaining_nodes + 1))

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
