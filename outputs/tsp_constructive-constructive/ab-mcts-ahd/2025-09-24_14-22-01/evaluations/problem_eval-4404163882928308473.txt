def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    node_degrees = {node: sum(1 for d in distance_matrix[node] if d > 0) for node in unvisited_nodes}
    max_degree = max(node_degrees.values()) if node_degrees else 1
    visit_history = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        degree_weight = node_degrees[node] / max_degree
        history_penalty = visit_history[node] * 0.1
        weighted_cost = (0.5 * immediate_distance) + (0.3 * potential_distance) + (0.2 * degree_weight) - history_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
        visit_history[node] += 1
    if next_node is None:
        next_node = destination_node
    return next_node
