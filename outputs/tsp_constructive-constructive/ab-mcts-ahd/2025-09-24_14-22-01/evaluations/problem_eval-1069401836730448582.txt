def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (num_unvisited / len(distance_matrix)) if num_unvisited > 0 else 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality (average distance to all nodes)
        centrality = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / len(distance_matrix)

        # Calculate local density (number of nearby nodes within a threshold)
        threshold = 0.5 * sum(distance_matrix[node][other] for other in unvisited_nodes) / (num_unvisited - 1 if num_unvisited > 1 else 1)
        density = sum(1 for other in unvisited_nodes if distance_matrix[node][other] <= threshold and other != node)

        # Adaptive weights based on progress and centrality/density
        immediate_weight = 0.5 * (1 - 0.5 * progress_factor)
        potential_weight = 0.3 * (1 + 0.3 * progress_factor)
        centrality_weight = 0.1 * (1 + 0.4 * progress_factor)
        density_weight = 0.1 * (1 - 0.3 * progress_factor)

        weighted_cost = (immediate_weight * immediate_distance) + \
                       (potential_weight * potential_distance) + \
                       (centrality_weight * centrality) + \
                       (density_weight * density)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
