def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    alpha = remaining_nodes / total_nodes
    beta = 0.5 * (1 - alpha)
    novelty_weight = 0.2

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to all unvisited nodes)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)

        # Novelty factor: inversely proportional to visit frequency (simplified)
        novelty_factor = 1 / (1 + (total_nodes - remaining_nodes))

        weighted_cost = (alpha * immediate_distance +
                        (1 - alpha - beta) * potential_distance +
                        beta * centrality -
                        novelty_weight * novelty_factor)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
