importance metric based on the ratio of immediate distance to potential distance, ensuring a balance between proximity and strategic positioning.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    exploration_factor = max(0.1, (remaining_nodes / total_nodes) ** 1.5)
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if potential_distance == 0:
            node_importance = float('inf')
        else:
            node_importance = immediate_distance / potential_distance
        total_cost = (1 - exploration_factor) * immediate_distance + exploration_factor * node_importance
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = next_node
    if next_node is None:
        next_node = destination_node
    return next_node
