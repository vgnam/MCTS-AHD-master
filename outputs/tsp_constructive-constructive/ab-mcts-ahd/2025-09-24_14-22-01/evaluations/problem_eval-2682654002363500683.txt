def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    global_centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        local_nodes = sorted(unvisited_nodes, key=lambda n: distance_matrix[node][n])[:max(1, len(unvisited_nodes) // 10)]
        local_centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in local_nodes) / len(local_nodes) if local_nodes else 0

        remaining_nodes = len(unvisited_nodes)
        dynamic_weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))

        cost = immediate_distance * dynamic_weight + (local_centrality * 0.4 + global_centrality * 0.6) * (1 - dynamic_weight)

        if cost < min_cost:
            min_cost = cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
