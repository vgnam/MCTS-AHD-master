def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    decay_factor = 0.8 ** remaining_nodes  # Exponential decay for long-term planning
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        connectivity_heuristic = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        weighted_cost = immediate_distance + decay_factor * potential_distance + 0.3 * connectivity_heuristic
        if node in unvisited_nodes and node != current_node:
            weighted_cost += 0.5 * (len(unvisited_nodes) / (distance_matrix[current_node][node] + 1))  # Degree-based penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
