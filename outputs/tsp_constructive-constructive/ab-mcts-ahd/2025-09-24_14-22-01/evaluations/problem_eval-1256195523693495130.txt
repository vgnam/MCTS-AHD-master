def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    base_decay = 0.4
    threshold_decay = 0.25
    dynamic_threshold = 1.5

    # Calculate average remaining distance to destination
    avg_remaining = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic threshold adjustment
        adjusted_threshold = dynamic_threshold * (1 + threshold_decay * (potential_distance / avg_remaining))

        # Non-linear path potential metric
        path_potential = (immediate_distance ** 1.2) + base_decay * (potential_distance ** 0.8)

        # Dynamic penalty for exceeding adjusted threshold
        if immediate_distance > adjusted_threshold:
            penalty = 2.0 + (immediate_distance - adjusted_threshold) * 0.3
            path_potential *= penalty

        if path_potential < min_cost:
            min_cost = path_potential
            next_node = node

    return next_node
