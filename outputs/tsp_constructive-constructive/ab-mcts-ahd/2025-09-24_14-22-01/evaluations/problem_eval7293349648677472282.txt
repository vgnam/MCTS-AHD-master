import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node

    remaining_count = len(remaining_nodes)
    weight = 1.0 / (remaining_count + 1)

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / remaining_count

    node_density = {}
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if n != node]
        if neighbors:
            node_density[node] = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            node_density[node] = 0
    avg_density = sum(node_density.values()) / len(node_density) if node_density else 0

    min_cost = float('inf')
    next_node = None

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        density_factor = (node_density[node] / avg_density) if avg_density else 1

        weighted_immediate = immediate_distance * (1 + centrality)
        weighted_potential = potential_distance * (1 - centrality)
        combined_weight = (weighted_immediate + weighted_potential) / 2

        total_cost = (1 - weight) * combined_weight + weight * (immediate_distance * density_factor)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    return next_node
