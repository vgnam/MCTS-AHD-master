importance" factor based on average distances to unvisited nodes, with a weight that adapts more aggressively to the remaining nodes' count, favoring long-term optimization as the problem size shrinks.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight = 0.5 * (remaining_nodes / (remaining_nodes + 2)) ** 2

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_importance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node) / max(1, remaining_nodes - 1)
        combined_cost = (immediate_distance * (1 - weight) + potential_distance * weight) * (1 + 0.2 * (node_importance / (immediate_distance + 1e-6)))
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
