def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.9 ** remaining_nodes  # Dynamic weight adjustment
    immediate_weight = 0.7 * decay_factor
    potential_weight = 0.3 * (1 - decay_factor)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_weight * immediate_distance + potential_weight * potential_distance

        # Look-ahead tiebreaker: consider second-best immediate distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
            second_best_immediate = immediate_distance
        elif weighted_cost == min_cost:
            if immediate_distance < second_best_immediate:
                next_node = node
                second_best_immediate = immediate_distance

    return next_node
