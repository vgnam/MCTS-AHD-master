def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / total_nodes
        penalty = (1.0 / (remaining_nodes + 1)) * (1.0 / (1 + math.exp(-0.5 * (remaining_nodes - total_nodes / 2))))
        weight_immediate = 1.0 / (1 + math.exp(-0.1 * (remaining_nodes - total_nodes / 2)))
        weight_estimated = 1.0 - weight_immediate
        weight_centrality = 0.1 * (1.0 / (1 + math.exp(-0.1 * (remaining_nodes - total_nodes / 2))))
        score = (weight_immediate * immediate_distance) + (weight_estimated * estimated_distance) + (weight_centrality * centrality) + (penalty * immediate_distance)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
