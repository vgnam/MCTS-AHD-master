def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.7 if remaining_nodes > len(unvisited_nodes) / 2 else 0.3
    novelty_weight = 0.2 * (1 - remaining_nodes / len(unvisited_nodes))
    risk_weight = 0.1 * (1 - remaining_nodes / len(unvisited_nodes))

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Centrality measure: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        # Risk measure: standard deviation of distances to unvisited nodes
        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes]
        risk = (sum((d - centrality) ** 2 for d in distances_to_unvisited) / len(unvisited_nodes)) ** 0.5 if len(unvisited_nodes) > 1 else 0

        # Novelty score: balance between centrality and risk
        novelty_score = (1 - novelty_weight) * centrality + novelty_weight * risk

        # Dynamic weight adjustment
        weight_immediate = base_weight + 0.2 * (remaining_nodes / len(unvisited_nodes))
        weight_potential = (1 - base_weight) * (1 - 0.2 * (remaining_nodes / len(unvisited_nodes)))

        # Normalized score calculation
        score = (weight_immediate * immediate_distance + weight_potential * potential_distance) / (1 + risk_weight * risk)
        score += novelty_weight * novelty_score

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
