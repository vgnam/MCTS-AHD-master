defaulting to the destination if no other nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    base_alpha = 0.4
    base_beta = 0.3
    remaining_nodes = len(unvisited_nodes) - 1 if destination_node in unvisited_nodes else len(unvisited_nodes)
    dynamic_alpha = base_alpha * (1 + 0.1 * (remaining_nodes - 1))
    dynamic_beta = base_beta * (1 - 0.1 * (remaining_nodes - 1))
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            harmonic_mean = float('inf')
        else:
            harmonic_mean = 2 * (immediate_distance * potential_distance) / (immediate_distance + potential_distance)
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        product_cost = immediate_distance * potential_distance
        weighted_cost = harmonic_mean * (1 - dynamic_alpha - dynamic_beta) + position_factor * dynamic_alpha + product_cost * dynamic_beta
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
