def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    visited_proportion = (len(unvisited_nodes) / len(distance_matrix)) if distance_matrix else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 2 + visited_proportion
        weighted_cost = immediate_distance * dynamic_weight + 0.3 * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
        elif weighted_cost == min_cost:
            current_degree = sum(1 for dist in distance_matrix[node] if dist > 0)
            next_degree = sum(1 for dist in distance_matrix[next_node] if dist > 0)
            if current_degree > next_degree:
                next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
