def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    time_decay = remaining_nodes / total_nodes
    weight_immediate = time_decay
    weight_potential = 1 - time_decay
    node_density = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_density[node] = sum(distance_matrix[node]) / total_nodes
        weighted_cost = (weight_immediate * immediate_distance) + (weight_potential * potential_distance) + (0.2 * node_density[node])
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
