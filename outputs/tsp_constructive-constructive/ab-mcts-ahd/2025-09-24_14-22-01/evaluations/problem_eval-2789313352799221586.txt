def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    min_utility = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic average distance calculation with exploration bonus
        if total_unvisited > 1:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1)
            exploration_bonus = (1 - (total_unvisited / len(distance_matrix))) ** 2
            avg_distance = avg_distance * (1 - exploration_bonus)
        else:
            avg_distance = 0

        # Dynamic weighting based on problem state
        immediate_weight = 1.0 - 0.2 * (total_unvisited / len(distance_matrix))
        potential_weight = 0.5 + 0.2 * (total_unvisited / len(distance_matrix))
        avg_weight = 0.3 * (1 - (total_unvisited / len(distance_matrix)))

        weighted_cost = immediate_weight * immediate_distance + potential_weight * potential_distance + avg_weight * avg_distance
        utility = -weighted_cost / (1 + (total_unvisited / len(distance_matrix)))

        if utility > min_utility:
            min_utility = utility
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
