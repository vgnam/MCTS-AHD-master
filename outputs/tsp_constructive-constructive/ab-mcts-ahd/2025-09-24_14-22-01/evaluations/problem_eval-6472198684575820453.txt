def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = [node for node in unvisited_nodes if node != destination_node]
    total_unvisited = len(remaining_nodes)
    progress_ratio = (len(unvisited_nodes) - total_unvisited) / len(unvisited_nodes) if len(unvisited_nodes) > 0 else 0

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0

        # Dynamic weights based on progress and remaining nodes
        weight_immediate = 0.4 + 0.2 * progress_ratio
        weight_potential = 0.3 - 0.1 * progress_ratio
        weight_avg = 0.3

        # Novel detour penalty term
        nearest_neighbor_distance = min(distance_matrix[current_node][other] for other in remaining_nodes) if remaining_nodes else 0
        detour_penalty = max(0, immediate_distance - nearest_neighbor_distance) * 0.5

        weighted_cost = (weight_immediate * immediate_distance +
                         weight_potential * potential_distance +
                         weight_avg * avg_distance +
                         detour_penalty)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
