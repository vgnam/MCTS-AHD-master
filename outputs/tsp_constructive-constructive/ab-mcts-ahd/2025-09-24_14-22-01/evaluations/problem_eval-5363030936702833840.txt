def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    avg_immediate = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    avg_potential = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    avg_centrality = sum(sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate = distance_matrix[current_node][node]
        potential = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        norm_immediate = immediate / avg_immediate
        norm_potential = potential / avg_potential
        norm_centrality = centrality / avg_centrality

        weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** 3
        weighted_cost = (norm_immediate * 0.4) + (norm_potential * 0.3) + (norm_centrality * 0.3 * weight_factor)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
