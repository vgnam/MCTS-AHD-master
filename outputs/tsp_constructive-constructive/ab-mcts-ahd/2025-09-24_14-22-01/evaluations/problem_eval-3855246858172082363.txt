def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        smoothness = 1 / (1 + abs(immediate_distance - potential_distance))
        cost = immediate_distance + 0.5 * potential_distance + 0.3 * exploration_factor + 0.2 * smoothness
        candidates.append((node, cost))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    selected_index = min(int(len(candidates) * 0.3), len(candidates) - 1)
    next_node = candidates[selected_index][0]

    return next_node
