importance of immediate distance, potential distance, and a heuristic factor based on the node's position in the path, using a sigmoid function to smooth transitions between phases of the traversal, ensuring a balance between exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes)
    progress = 1 - (len(remaining_nodes) / total_nodes) if total_nodes > 0 else 0
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        heuristic_factor = (immediate_distance + potential_distance) / (avg_distance + 1e-6)
        dynamic_weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))
        weighted_cost = (0.7 - 0.4 * dynamic_weight) * immediate_distance + (0.2 + 0.4 * dynamic_weight) * potential_distance + 0.1 * heuristic_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
