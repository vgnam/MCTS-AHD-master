def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.4
    unvisited_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        if node == destination_node and unvisited_count > 1:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            geometric_mean = float('inf')
            harmonic_mean = float('inf')
            product_cost = float('inf')
        else:
            geometric_mean = (immediate_distance * potential_distance) ** 0.5
            harmonic_mean = 2 * (immediate_distance * potential_distance) / (immediate_distance + potential_distance)
            product_cost = immediate_distance * potential_distance
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        revisit_penalty = (unvisited_count - len(unvisited_nodes)) ** 2
        weighted_cost = (geometric_mean * 0.4 + harmonic_mean * 0.3 + product_cost * 0.3) * (1 - alpha) + position_factor * alpha + revisit_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
