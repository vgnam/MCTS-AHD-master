def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    decay_factor = 0.35
    max_distance_threshold = 1.5
    base_decay = 0.4
    threshold_decay = 0.3

    avg_remaining = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        adjusted_threshold = max_distance_threshold * (1 + threshold_decay * (potential_distance / avg_remaining))

        weighted_cost = (immediate_distance ** 1.1) + decay_factor * (potential_distance ** 0.9)

        if immediate_distance > adjusted_threshold:
            penalty = 2.5 + (immediate_distance - adjusted_threshold) * 0.25
            weighted_cost *= penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
