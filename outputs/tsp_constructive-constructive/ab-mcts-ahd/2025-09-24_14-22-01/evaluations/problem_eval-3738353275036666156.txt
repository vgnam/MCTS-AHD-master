def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    alpha = 0.5 if num_unvisited > 2 else 0.7  # Increase alpha when few nodes remain

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate centrality score (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Novel weighted sum combining immediate, potential, and centrality
        weighted_cost = (0.4 * immediate_distance + 0.4 * potential_distance + 0.2 * centrality) * (1 - alpha)

        # Revisit penalty
        if node in unvisited_nodes and num_unvisited > 2:
            weighted_cost *= 1.1  # Slight penalty for revisiting

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
