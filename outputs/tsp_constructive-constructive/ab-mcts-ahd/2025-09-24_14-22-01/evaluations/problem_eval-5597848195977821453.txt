def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    current_centrality = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
        dynamic_weight = 0.3 + 0.7 * (current_centrality / (current_centrality + 0.1)) * (1.0 - remaining_nodes / len(unvisited_nodes))
        weighted_cost = immediate_distance + dynamic_weight * potential_distance + 0.1 * node_centrality
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
