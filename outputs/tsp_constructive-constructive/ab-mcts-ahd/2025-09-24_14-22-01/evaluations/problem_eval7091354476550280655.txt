def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    centroid = sum(unvisited_nodes) / total_unvisited if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_dist = distance_matrix[current_node][node]
        potential_dist = distance_matrix[node][destination_node]
        centroid_dist = abs(node - centroid)
        dynamic_weight = 0.5 * (1 - (total_unvisited / len(distance_matrix))) + 0.3 * (immediate_dist / max(distance_matrix[current_node])) + 0.2 * (centroid_dist / max(distance_matrix))
        weighted_cost = immediate_dist + dynamic_weight * (potential_dist + 0.5 * centroid_dist)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
