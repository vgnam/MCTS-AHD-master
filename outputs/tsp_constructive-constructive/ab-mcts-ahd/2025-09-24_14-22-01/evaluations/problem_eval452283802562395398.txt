import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    temperature = 1.0 - (0.8 * (remaining_nodes / len(unvisited_nodes)))
    time_decay = 0.5 + 0.5 * (1.0 - (remaining_nodes / len(unvisited_nodes)))

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_distance = distance_matrix[node][destination_node]

        # Node centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Weighted score with time-decay and centrality
        score = (time_decay * immediate_distance) + ((1 - time_decay) * estimated_distance) - (0.1 * centrality)
        scores.append((node, score))

    # Temperature-based probabilistic selection
    if temperature > 0:
        exp_scores = [(node, math.exp(-score / temperature)) for node, score in scores]
        total = sum(exp_score for _, exp_score in exp_scores)
        probs = [exp_score / total for _, exp_score in exp_scores]
        next_node = random.choices([node for node, _ in exp_scores], weights=probs, k=1)[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
