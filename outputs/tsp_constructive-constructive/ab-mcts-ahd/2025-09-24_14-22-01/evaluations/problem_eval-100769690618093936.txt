def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, node_selection_history=None):
    if node_selection_history is None:
        node_selection_history = {node: 0 for node in unvisited_nodes}

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1 if current_node not in unvisited_nodes else len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        estimated_distance = distance_matrix[node][destination_node]
        novelty_factor = 1.0 / (node_selection_history.get(node, 0) + 1)
        weight_immediate = 0.4 + 0.4 * (remaining_nodes / total_nodes)
        weight_estimated = 0.4 - 0.2 * (remaining_nodes / total_nodes)
        weight_novelty = 0.2 + 0.1 * (remaining_nodes / total_nodes)
        penalty = 0.1 * (immediate_distance / max([distance_matrix[current_node][n] for n in unvisited_nodes]))

        score = (weight_immediate * immediate_distance) + \
                (weight_estimated * estimated_distance) + \
                (weight_novelty * novelty_factor) + \
                (penalty * immediate_distance)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is not None:
        node_selection_history[next_node] = node_selection_history.get(next_node, 0) + 1

    return next_node
