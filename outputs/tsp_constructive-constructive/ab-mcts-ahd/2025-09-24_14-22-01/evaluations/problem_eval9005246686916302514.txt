def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 1.0 / remaining_nodes if remaining_nodes > 1 else 0.0

    weight_immediate = 0.6 - 0.2 * exploration_factor
    weight_potential = 0.2 + 0.3 * exploration_factor
    weight_centrality = 0.2 - 0.1 * exploration_factor
    weight_lookahead = 0.1 + 0.1 * exploration_factor

    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        lookahead_cost = min([distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node], default=0)

        total_cost = (weight_immediate * immediate_distance +
                      weight_potential * potential_distance +
                      weight_centrality * centrality +
                      weight_lookahead * lookahead_cost)

        candidates.append((node, total_cost))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:3] if len(candidates) > 3 else candidates
    selected = random.choices(
        [c[0] for c in top_candidates],
        weights=[1.0 / (1.0 + c[1]) for c in top_candidates],
        k=1
    )[0]

    return next_node
