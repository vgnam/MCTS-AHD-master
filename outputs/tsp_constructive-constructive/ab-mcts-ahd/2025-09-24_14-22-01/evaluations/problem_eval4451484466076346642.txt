def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = max(0.1, 0.7 * (remaining_nodes / len(distance_matrix)) ** 1.5)  # Non-linear decay
    beta = 0.5 * (1 - (remaining_nodes / len(distance_matrix)))  # Historical weight
    total_cost = 0
    costs = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate = distance_matrix[current_node][node]
        potential = distance_matrix[node][destination_node]
        historical = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node) / max(1, len(unvisited_nodes) - 1)
        if immediate == 0 or potential == 0:
            cost = float('inf')
        else:
            cost = (immediate * (1 - alpha - beta) + potential * alpha + historical * beta) * (1 + (remaining_nodes / len(distance_matrix)) ** 2)
        costs.append(cost)
        if cost < min_cost:
            min_cost = cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    if len(unvisited_nodes) > 1 and costs:
        normalized_costs = [c / sum(costs) for c in costs]
        if sum(normalized_costs) > 0:
            next_node = np.random.choice(unvisited_nodes, p=normalized_costs)
    return next_node
