def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            combined_mean = float('inf')
        else:
            geometric_mean = (immediate_distance * potential_distance) ** 0.5
            harmonic_mean = 2 * (immediate_distance * potential_distance) / (immediate_distance + potential_distance)
            combined_mean = (geometric_mean + harmonic_mean) / 2
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        weight_immediate = 0.6 + 0.2 * (remaining_nodes / len(unvisited_nodes))
        weight_estimated = 0.4 - 0.2 * (remaining_nodes / len(unvisited_nodes))
        revisit_penalty = 1.0 / (remaining_nodes + 1) if remaining_nodes > 0 else 0.0
        weighted_cost = (weight_immediate * combined_mean) + (weight_estimated * potential_distance) + (revisit_penalty * immediate_distance)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
