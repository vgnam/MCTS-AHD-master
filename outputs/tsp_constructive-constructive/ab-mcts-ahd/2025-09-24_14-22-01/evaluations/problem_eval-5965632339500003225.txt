def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = [node for node in unvisited_nodes if node != destination_node]
    if not remaining_nodes:
        return destination_node
    avg_remaining = sum(distance_matrix[node][destination_node] for node in remaining_nodes) / len(remaining_nodes)
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node][other] for other in remaining_nodes) / len(remaining_nodes)
        dynamic_weight = 0.5 * (1 - (avg_distance / avg_remaining)) if avg_remaining != 0 else 0.5
        weighted_cost = (0.4 + dynamic_weight) * immediate_distance + (0.3 - dynamic_weight) * potential_distance + 0.3 * avg_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
