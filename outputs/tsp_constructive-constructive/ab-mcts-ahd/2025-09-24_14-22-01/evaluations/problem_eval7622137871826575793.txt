def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = max(0.5, 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))  # Adaptive alpha
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        penalty = 0.3 * (1 - (distance_matrix[node][destination_node] / max(distance_matrix[node])))  # Penalize nodes too close to destination
        weighted_cost = alpha * immediate_distance + (1 - alpha) * potential_distance + penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
