def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    unvisited_count = len(unvisited_nodes)
    alpha = 0.5 * (1 + (unvisited_count / (unvisited_count + 1)))  # Dynamic alpha adjustment
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            geometric_mean = float('inf')
        else:
            geometric_mean = (immediate_distance * potential_distance) ** 0.5
        # Node centrality: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (unvisited_count - 1) if unvisited_count > 1 else 0
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        revisit_penalty = (unvisited_count ** 0.5) * math.log(1 + len(unvisited_nodes))  # Logarithmic penalty
        weighted_cost = geometric_mean * (1 - alpha) + centrality * alpha * 0.3 + position_factor * alpha * 0.7 + revisit_penalty
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
