def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.3
    dynamic_weight = 0.7 / remaining_nodes if remaining_nodes > 0 else 0.7

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        potential_distance = (distance_matrix[node][destination_node] +
                            0.5 * min([distance_matrix[node][n] for n in unvisited_nodes if n != node and n != destination_node], default=0))
        lookahead_factor = sum([1 for n in unvisited_nodes if distance_matrix[node][n] < centrality]) / len(unvisited_nodes)

        total_cost = (base_weight * immediate_distance +
                     dynamic_weight * potential_distance +
                     0.1 * centrality +
                     0.1 * lookahead_factor)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
