def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    alpha = 0.7  # Weighting factor for immediate distance (higher alpha prioritizes proximity)
    beta = 0.3   # Weighting factor for potential distance (lower beta reduces its impact)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = (alpha * immediate_distance) + (beta * potential_distance)

        # Centrality tiebreaker: nodes with higher centrality (lower average distance to all nodes) are preferred
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        adjusted_cost = weighted_cost * (1 + 1 / (1 + centrality))  # Penalize higher centrality

        if adjusted_cost < min_cost:
            min_cost = adjusted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
