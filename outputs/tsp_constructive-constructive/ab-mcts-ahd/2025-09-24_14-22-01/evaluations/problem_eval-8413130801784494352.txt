def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Initialize parameters
    exploration_rate = 0.3
    significance_decay = 0.5
    base_weight = 1.0
    historical_weights = {}  # Simulated historical performance (node: weight)

    # Calculate average remaining distance to destination
    avg_remaining = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    # Initialize selection candidates
    candidates = []
    total_weight = 0.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Node significance metric (prioritizes nodes that are critical for long-term path)
        node_significance = (potential_distance / avg_remaining) ** significance_decay

        # Historical weight adjustment (simulated RL mechanism)
        historical_weight = historical_weights.get(node, 1.0)
        adjusted_weight = base_weight * historical_weight

        # Combine metrics with exploration factor
        combined_score = (immediate_distance ** 0.8) + (node_significance * potential_distance ** 0.6)
        exploration_factor = exploration_rate * (1.0 / (1.0 + historical_weight))

        # Total weight for probabilistic selection
        node_weight = adjusted_weight * (1.0 - exploration_factor) + exploration_factor
        total_weight += node_weight

        candidates.append((node, combined_score, node_weight))

    # Probabilistic selection based on weights
    if not candidates:
        return destination_node

    rand_val = random.random() * total_weight
    cumulative_weight = 0.0

    for node, score, weight in candidates:
        cumulative_weight += weight
        if rand_val <= cumulative_weight:
            # Update historical weights (simulated RL update)
            historical_weights[node] = historical_weights.get(node, 1.0) * 0.9 + 0.1 * (1.0 / score)
            return node

    return next_node
