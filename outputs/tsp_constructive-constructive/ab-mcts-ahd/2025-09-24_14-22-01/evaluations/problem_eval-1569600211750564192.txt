defaults to the destination node if no valid node is found.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    exploitation_weight = 0.3  # Higher weight for exploitation factor

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploitation_factor = potential_distance  # Encourages closer nodes to destination
        weighted_cost = (1 - exploitation_weight) * immediate_distance + exploitation_weight * exploitation_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
