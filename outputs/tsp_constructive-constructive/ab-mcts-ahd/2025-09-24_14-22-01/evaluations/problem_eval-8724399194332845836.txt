def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1
    base_alpha = 0.5
    alpha = base_alpha * (1 - (remaining_nodes / total_nodes) ** 2)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        if immediate_distance <= 0 or potential_distance <= 0:
            continue

        harmonic_mean = (2 * immediate_distance * potential_distance) / (immediate_distance + potential_distance)
        diversity_factor = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        centrality = sum(distance_matrix[node][other] for other in range(len(distance_matrix))) / (len(distance_matrix) - 1)
        normalized_centrality = centrality / max(1, distance_matrix[current_node][destination_node])

        weight_immediate = 0.7 - 0.3 * (remaining_nodes / total_nodes)
        weight_potential = 0.3 + 0.4 * (remaining_nodes / total_nodes)
        weight_diversity = 0.2 * (remaining_nodes / total_nodes) ** 0.5

        revisit_penalty = (1.5 - alpha) * (1 / (remaining_nodes + 1)) if remaining_nodes > 0 else 0.0

        score = (weight_immediate * harmonic_mean) + (weight_potential * potential_distance) + (weight_diversity * diversity_factor) - (normalized_centrality * revisit_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
