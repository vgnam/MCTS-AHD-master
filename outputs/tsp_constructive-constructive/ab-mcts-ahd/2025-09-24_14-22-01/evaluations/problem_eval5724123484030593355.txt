def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1

    if remaining_nodes == 0:
        return destination_node

    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes if node != destination_node) / remaining_nodes
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.8 * (remaining_nodes / (remaining_nodes + 1)) ** 0.5
        novelty_factor = abs(immediate_distance - avg_distance)
        penalty = 0.05 * novelty_factor if immediate_distance > avg_distance else -0.05 * novelty_factor
        weighted_cost = immediate_distance + dynamic_weight * potential_distance * (1 + centrality) + penalty

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
