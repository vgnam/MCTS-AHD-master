def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    ratio_remaining = remaining_nodes / total_nodes

    weight_immediate = 0.7 - 0.4 * ratio_remaining
    weight_potential = 0.3 + 0.4 * ratio_remaining
    weight_centrality = 0.2 * (1 - ratio_remaining)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        penalty = 1 + (1 - ratio_remaining) * (current_node in unvisited_nodes)
        total_cost = (weight_immediate * immediate_distance +
                      weight_potential * potential_distance +
                      weight_centrality * centrality) * penalty
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
