def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    base_weight = 0.7
    decay_factor = 0.9 ** remaining_nodes
    weight = base_weight * decay_factor

    avg_distance_to_unvisited = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / remaining_nodes if remaining_nodes > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_immediate = immediate_distance / (avg_distance_to_unvisited + 1e-10)
        normalized_potential = potential_distance / (distance_matrix[current_node][destination_node] + 1e-10)
        combined_cost = normalized_immediate * (1 - weight) + normalized_potential * weight
        if combined_cost < min_cost:
            min_cost = combined_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
