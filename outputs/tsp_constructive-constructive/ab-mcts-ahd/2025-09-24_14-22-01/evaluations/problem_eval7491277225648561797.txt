def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node} if destination_node in unvisited_nodes else unvisited_nodes
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if len(remaining_nodes) > 1:
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes if n != node) / (len(remaining_nodes) - 1)
        else:
            centrality = 0
        dynamic_weight = 0.5 + 0.2 * (len(remaining_nodes) / len(distance_matrix))
        weighted_cost = immediate_distance + dynamic_weight * potential_distance + 0.3 * centrality
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
