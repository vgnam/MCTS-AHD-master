def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    total_nodes = remaining_nodes + 1  # +1 to include the current node
    dynamic_weight = 1.0 - (remaining_nodes / total_nodes)  # Decreases as nodes are visited

    min_score = float('inf')
    next_node = None

    # Normalize distances to avoid scale bias
    max_distance = max(max(row) for row in distance_matrix)
    if max_distance == 0:
        max_distance = 1  # Avoid division by zero

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node] / max_distance
        distance_to_destination = distance_matrix[node][destination_node] / max_distance
        score = dynamic_weight * distance_to_current + (1 - dynamic_weight) * distance_to_destination
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
