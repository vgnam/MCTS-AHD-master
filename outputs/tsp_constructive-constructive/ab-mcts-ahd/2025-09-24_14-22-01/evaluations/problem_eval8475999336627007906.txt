def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(unvisited_nodes) + 1
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_factor = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_nodes - 1)
        dynamic_weight = 0.2 * (1 - (remaining_nodes / total_nodes)) + 0.8 * (centrality_factor / max(sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) for n in unvisited_nodes, default=1))
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
