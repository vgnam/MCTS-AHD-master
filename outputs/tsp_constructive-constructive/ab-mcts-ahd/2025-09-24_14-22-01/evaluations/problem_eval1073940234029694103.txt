def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node
    progress_ratio = (remaining_nodes + 1) / (remaining_nodes + 2)  # Normalized progress
    decay_factor = 0.5 * (1 - progress_ratio)  # Exponential decay for weight
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.3 + decay_factor * 0.7  # Weight adjusts with decay
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
