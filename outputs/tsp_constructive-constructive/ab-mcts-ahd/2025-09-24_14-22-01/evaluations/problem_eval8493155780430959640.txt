def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distance_ratio = (potential_distance + 1e-10) / immediate_distance
        fixed_weight = 0.7
        weighted_cost = fixed_weight * immediate_distance + (1 - fixed_weight) * potential_distance
        constant_penalty = 0.5 * (1 - progress_ratio) * (potential_distance - immediate_distance) if (potential_distance > 1.5 * immediate_distance) else 0
        total_cost = weighted_cost + constant_penalty - 0.2 * distance_ratio
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
