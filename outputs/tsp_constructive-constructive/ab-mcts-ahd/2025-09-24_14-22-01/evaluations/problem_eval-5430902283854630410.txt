def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    gamma = 0.3
    delta = 0.5
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        if immediate_distance == 0 or potential_distance == 0:
            inverse_harmonic = float('inf')
        else:
            inverse_harmonic = (immediate_distance + potential_distance) / (2 * (immediate_distance * potential_distance))
        direct_reduction = distance_matrix[current_node][destination_node] - immediate_distance
        exploration_bias = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        weighted_cost = inverse_harmonic * (1 - gamma - delta) + direct_reduction * gamma + exploration_bias * delta
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
