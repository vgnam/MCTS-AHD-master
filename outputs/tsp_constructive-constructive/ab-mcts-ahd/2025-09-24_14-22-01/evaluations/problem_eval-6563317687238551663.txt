def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_immediate = 0.6 - (0.3 * (remaining_nodes / (remaining_nodes + 1)))
    weight_potential = 0.4 + (0.3 * (remaining_nodes / (remaining_nodes + 1)))

    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    max_potential = max(distance_matrix[node][destination_node] for node in unvisited_nodes if node != destination_node)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        novelty_factor = abs(immediate_distance - avg_distance)
        penalty = 0.1 * (potential_distance / max_potential) if max_potential > 0 else 0
        bonus = -0.05 * novelty_factor if immediate_distance < avg_distance else 0.05 * novelty_factor
        weighted_cost = (weight_immediate * immediate_distance) + (weight_potential * potential_distance) + penalty + bonus
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
