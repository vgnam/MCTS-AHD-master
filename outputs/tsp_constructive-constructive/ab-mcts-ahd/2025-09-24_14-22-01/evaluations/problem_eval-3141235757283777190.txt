import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}

    if not remaining_nodes:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    centrality = sum(1 / (distance_matrix[current_node][node] + 1e-6) for node in remaining_nodes) / len(remaining_nodes)
    gamma = len(remaining_nodes) / len(distance_matrix)

    node_density = {}
    for node in remaining_nodes:
        neighbors = [n for n in remaining_nodes if n != node]
        if neighbors:
            node_density[node] = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
        else:
            node_density[node] = 0
    avg_density = sum(node_density.values()) / len(node_density) if node_density else 0

    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        combined_weight = (immediate_distance * (1 + centrality) + potential_distance * (1 - centrality)) / 2

        deviation = abs(immediate_distance - avg_distance)
        sigmoid_gamma = 1 / (1 + math.exp(-gamma))
        density_factor = (node_density[node] / avg_density) if avg_density else 1
        total_cost = combined_weight + deviation * sigmoid_gamma + 0.2 * (immediate_distance * density_factor)

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
