def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Calculate influence score: balance between centrality and proximity
        centrality = sum(distance_matrix[node]) / total_nodes if total_nodes > 0 else 1.0
        proximity = 1.0 - (potential_distance / (2 * avg_distance)) if avg_distance > 0 else 0.0
        influence_score = (0.5 * centrality + 0.5 * proximity) * (1.0 + 0.2 * (immediate_distance / (avg_distance + 1e-6)))

        # Dynamic weight adjustment based on path progress
        progress_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
        weight_proximity = 0.4 + 0.3 * progress_ratio
        weight_influence = 0.6 - 0.3 * progress_ratio

        # Hybrid cost function combining distance and influence
        hybrid_cost = immediate_distance + (weight_proximity * potential_distance) + (weight_influence * influence_score * avg_distance)

        if hybrid_cost < min_cost:
            min_cost = hybrid_cost
            next_node = node

    return next_node
