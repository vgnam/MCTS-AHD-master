def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    progress_ratio = (total_unvisited / (total_unvisited + 1)) if total_unvisited > 0 else 0.5
    dynamic_weight = 0.7 * (1 - progress_ratio) + 0.3

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < immediate_distance * 1.2) / len(unvisited_nodes)
        adjusted_weight = dynamic_weight * (1 - 0.2 * node_density)
        total_cost = adjusted_weight * immediate_distance + (1 - adjusted_weight) * potential_distance
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
