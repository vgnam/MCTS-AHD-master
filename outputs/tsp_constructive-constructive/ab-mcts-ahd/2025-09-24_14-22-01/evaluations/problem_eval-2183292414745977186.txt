def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes) + 1
    total_nodes = len(distance_matrix)
    exploration_factor = min(1.0, 0.5 + 0.5 * (remaining_nodes / total_nodes))

    alpha = 0.3 + 0.6 * (1 - exploration_factor)
    beta = 1 - alpha

    node_density = len(unvisited_nodes) / total_nodes
    distance_scale = 1 + 0.5 * (1 - node_density)

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node] * distance_scale
        potential_distance = distance_matrix[node][destination_node] * distance_scale

        node_centrality = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes) / len(unvisited_nodes)
        weighted_immediate = immediate_distance * (1 + node_centrality * exploration_factor)
        weighted_potential = potential_distance * (1 - node_centrality * exploration_factor)
        weighted_cost = alpha * weighted_immediate + beta * weighted_potential

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
