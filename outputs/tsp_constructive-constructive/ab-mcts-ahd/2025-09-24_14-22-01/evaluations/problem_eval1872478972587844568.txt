def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    exploration_weight = min(0.9, 0.5 + 0.4 * (1 - total_unvisited / (total_unvisited + len(distance_matrix))))

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        time_decay = 1 / (1 + 0.1 * total_unvisited)
        weighted_cost = (1 - exploration_weight) * immediate_distance + exploration_weight * (potential_distance * time_decay)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
