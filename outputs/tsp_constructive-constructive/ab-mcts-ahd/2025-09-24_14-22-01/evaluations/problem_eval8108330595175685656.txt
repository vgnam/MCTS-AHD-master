def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_distance = distance_matrix[current_node][destination_node]
    dynamic_weight = min(1.0, 0.5 + remaining_distance / sum(distance_matrix[current_node]))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        exploration_factor = (1 / (1 + immediate_distance)) * (1 / (1 + potential_distance))
        penalty = 0.1 if node in [current_node] else 0  # Penalize revisiting current node
        total_cost = (1 - dynamic_weight) * immediate_distance + dynamic_weight * potential_distance + exploration_factor - penalty

        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
