def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality_factor = sum(distance_matrix[node]) / total_nodes
        weight_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1)) * (1 - centrality_factor / sum(sum(distance_matrix) / total_nodes))
        adjusted_cost = immediate_distance * (1 - weight_factor) + potential_distance * weight_factor
        if adjusted_cost < min_cost:
            min_cost = adjusted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
