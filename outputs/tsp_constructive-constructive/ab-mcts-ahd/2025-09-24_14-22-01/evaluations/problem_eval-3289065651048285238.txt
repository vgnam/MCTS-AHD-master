def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    node_density = total_nodes / (sum(sum(row) for row in distance_matrix) / (total_nodes * (total_nodes - 1))) if total_nodes > 1 else 1.0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        geometric_mean = (immediate_distance * potential_distance) ** 0.5 if (immediate_distance > 0 and potential_distance > 0) else float('inf')
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        weight_immediate = 0.5 + 0.3 * (node_density * remaining_nodes / total_nodes)
        weight_estimated = 0.5 - 0.3 * (node_density * remaining_nodes / total_nodes)
        revisit_penalty = (1.0 / (remaining_nodes + 1)) ** 2 if remaining_nodes > 0 else 0.0
        log_factor = math.log(remaining_nodes + 1) if remaining_nodes > 0 else 1.0
        score = (weight_immediate * geometric_mean) + (weight_estimated * potential_distance) + (revisit_penalty * immediate_distance) * log_factor
        if score < min_score:
            min_score = score
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
