def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    potential_distances = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    avg_potential = sum(potential_distances) / remaining_nodes
    var_potential = sum((d - avg_potential) ** 2 for d in potential_distances) / remaining_nodes
    exploration_factor = var_potential / (avg_potential + 1e-6) if avg_potential > 0 else 0

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_potential = (potential_distance - avg_potential) / (var_potential + 1e-6) if var_potential > 0 else 0
        weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** (1 + exploration_factor)
        weighted_cost = immediate_distance * (1 + normalized_potential) ** weight_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
