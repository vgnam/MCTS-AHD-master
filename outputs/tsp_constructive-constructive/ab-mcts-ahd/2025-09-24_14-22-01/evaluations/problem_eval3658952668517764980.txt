def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    dynamic_weight = 0.2 if remaining_nodes <= 2 else 0.6
    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Penalize revisiting nearby nodes to avoid loops
        revisit_penalty = 0.1 * sum(distance_matrix[node][n] for n in unvisited_nodes if n != current_node)

        # Heuristic to favor nodes that improve convexity
        convexity_heuristic = 0.3 * (distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node])

        weighted_cost = immediate_distance + dynamic_weight * potential_distance + revisit_penalty - convexity_heuristic

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
