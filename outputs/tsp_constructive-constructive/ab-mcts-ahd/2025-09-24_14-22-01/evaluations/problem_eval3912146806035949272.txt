import random
    import math

    # Calculate weights for each unvisited node
    weights = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        # Weight is inversely proportional to distance to current node, but biased toward destination
        weight = (1 / (distance_to_current + 1e-6)) * math.exp(-0.1 * distance_to_destination)
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select next node based on the probability distribution
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
