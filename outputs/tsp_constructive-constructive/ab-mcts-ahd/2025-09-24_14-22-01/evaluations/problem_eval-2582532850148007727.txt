importance of immediate vs. potential distances, using a sigmoid function to smooth the transition between weights, and includes a probabilistic element to occasionally explore less optimal paths when few nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes) - 1 if destination_node in unvisited_nodes else len(unvisited_nodes)
    base_weight = 0.75
    decay_rate = 0.2
    dynamic_weight = base_weight * (1 - decay_rate ** remaining_nodes)
    dynamic_weight = 1 / (1 + np.exp(-dynamic_weight))  # Sigmoid to smooth transition
    exploration_factor = 0.2 if remaining_nodes <= 2 else 0.0
    min_cost = float('inf')
    next_node = None
    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if exploration_factor > 0 and np.random.rand() < exploration_factor:
            weighted_cost *= (1 - np.random.rand() * 0.3)  # Small random perturbation
        candidates.append((node, weighted_cost))
    if candidates:
        candidates.sort(key=lambda x: x[1])
        next_node = candidates[0][0]
    if next_node is None:
        next_node = destination_node
    return next_node
