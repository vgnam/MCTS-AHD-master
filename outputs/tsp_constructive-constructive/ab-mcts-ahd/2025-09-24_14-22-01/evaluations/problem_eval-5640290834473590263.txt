def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    decay_factor = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 2)))
    centrality_penalty = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        weighted_immediate = immediate_distance * (1 - decay_factor)
        weighted_potential = potential_distance * (1 + decay_factor)
        combined_weight = (weighted_immediate + weighted_potential) / 2
        deviation = abs(immediate_distance - avg_distance)
        penalty = 0.3 * deviation / (avg_distance + 1e-6)
        weighted_cost = combined_weight + penalty + (centrality_penalty / (distance_matrix[current_node][node] + 1e-6))

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
