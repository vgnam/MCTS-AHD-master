import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 1 and destination_node in unvisited_nodes:
        return destination_node

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        dynamic_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))
        weighted_cost = (dynamic_weight * immediate_distance) + ((1 - dynamic_weight) * potential_distance)

        # Penalty for revisiting nodes (if applicable)
        if node in unvisited_nodes and node != destination_node:
            weighted_cost *= 0.95

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
