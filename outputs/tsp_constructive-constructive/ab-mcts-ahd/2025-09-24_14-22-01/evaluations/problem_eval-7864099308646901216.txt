def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {destination_node}
    if not remaining_nodes:
        return destination_node
    avg_distance = sum(distance_matrix[current_node][node] for node in remaining_nodes) / len(remaining_nodes)
    penalty_factor = 1.0 / len(remaining_nodes) if len(remaining_nodes) > 1 else 1.0
    for node in remaining_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        heuristic_factor = (immediate_distance / potential_distance) * (1 + penalty_factor)
        dynamic_weight = 0.4 + 0.3 * (immediate_distance / avg_distance) + 0.3 * (1 / (potential_distance + 1))
        total_cost = dynamic_weight * immediate_distance + (1 - dynamic_weight) * potential_distance + 0.2 * heuristic_factor
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    return next_node
