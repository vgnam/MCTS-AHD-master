importance as nodes are visited, and balances these factors with a fixed weight of 0.7 for immediate distance and 0.3 for the combined proximity and potential distance terms.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    threshold_distance = sum(sum(row) for row in distance_matrix) / (len(distance_matrix) ** 2) * 0.7
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        proximity_factor = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] <= threshold_distance)
        dynamic_weight = 0.7 * (1 - (remaining_nodes / len(distance_matrix))) + 0.3 * (proximity_factor / remaining_nodes)
        weighted_cost = immediate_distance + dynamic_weight * (potential_distance + proximity_factor)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
