def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Precompute centrality for each node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        avg_distance = sum(distance_matrix[node]) / (total_nodes - 1)
        centrality[node] = avg_distance

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        node_centrality = centrality[node]

        # Dynamic weight adjusting exploration vs. exploitation
        exploration_weight = 0.7 * (1 + (remaining_nodes / (remaining_nodes + 1)))
        exploitation_weight = 0.3 * (1 - (remaining_nodes / (remaining_nodes + 1)))

        # Cost function: immediate + exploration * (potential + centrality)
        weighted_cost = immediate_distance + exploration_weight * (potential_distance + node_centrality) + exploitation_weight * potential_distance

        # Normalize cost by the number of remaining nodes and centrality
        normalized_cost = weighted_cost / (1 + (remaining_nodes / (remaining_nodes + 1)) * node_centrality)

        if normalized_cost < min_cost:
            min_cost = normalized_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
