def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(unvisited_nodes) + 1
    phase_weight = (remaining_nodes / total_nodes) ** 1.5
    memory_factor = 0.2
    min_cost = float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        memory_penalty = 0
        if node in memory:
            memory_penalty = memory[node] * memory_factor
        total_cost = (1 - phase_weight) * immediate_distance + phase_weight * potential_distance + memory_penalty
        if total_cost < min_cost:
            min_cost = total_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    if 'memory' not in globals():
        memory = {}
    if next_node in unvisited_nodes:
        memory[next_node] = memory.get(next_node, 0) + 1
    return next_node
