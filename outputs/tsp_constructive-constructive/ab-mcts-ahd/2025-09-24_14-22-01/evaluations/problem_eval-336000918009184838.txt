def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    avg_potential_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes
    local_avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    min_cost = float('inf')
    next_node = None

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_potential = potential_distance / avg_potential_distance

        decay_factor = math.exp(-0.5 * (remaining_nodes / len(distance_matrix)))
        dynamic_weight = decay_factor * (immediate_distance / local_avg_distance)

        weighted_cost = immediate_distance * (normalized_potential ** dynamic_weight)

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node

    return next_node
