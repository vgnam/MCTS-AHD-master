def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (num_unvisited / len(distance_matrix)) if num_unvisited > 0 else 0.0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        mean_diversity = sum(distances_to_unvisited) / (num_unvisited - 1) if num_unvisited > 1 else 0
        variance_diversity = sum((d - mean_diversity) ** 2 for d in distances_to_unvisited) / (num_unvisited - 1) if num_unvisited > 1 else 0
        dynamic_weight = 0.5 * (1 - progress_factor) + 0.4 * progress_factor
        weighted_cost = (dynamic_weight * immediate_distance) + (0.4 * potential_distance) + (0.1 * variance_diversity)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
