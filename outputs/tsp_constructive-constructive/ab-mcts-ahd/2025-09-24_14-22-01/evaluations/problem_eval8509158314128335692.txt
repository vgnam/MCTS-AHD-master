def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node]) / (total_nodes - 1)

        exploration_factor = 1 / (1 + potential_distance)

        exploration_weight = 0.4 * (1 - (remaining_nodes / total_nodes) ** 3)
        exploitation_weight = 0.5 * (remaining_nodes / total_nodes)

        weighted_cost = (1 - exploration_weight - exploitation_weight) * immediate_distance + \
                        exploration_weight * centrality + \
                        exploitation_weight * potential_distance + \
                        exploration_factor * 0.2

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    if next_node is None:
        next_node = destination_node
    return next_node
