importance score based on historical visits and a probabilistic selection to explore less-visited nodes, while ensuring completion with the destination node as a fallback.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    num_unvisited = len(unvisited_nodes)
    progress_factor = 1.0 - (num_unvisited / len(distance_matrix))
    importance_scores = {node: 1.0 / (1 + 0.1 * (len(distance_matrix) - num_unvisited)) for node in unvisited_nodes}
    next_node = None
    min_cost = float('inf')
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        avg_diversity = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1) if num_unvisited > 1 else 0
        max_diversity = max(distance_matrix[node][other] for other in unvisited_nodes if other != node) if num_unvisited > 1 else 0
        diversity_factor = 0.6 * avg_diversity + 0.4 * max_diversity
        weighted_cost = (0.6 * immediate_distance * (1 - 0.4 * progress_factor) +
                         0.3 * potential_distance * (1 + 0.3 * progress_factor) +
                         0.1 * diversity_factor * (1 - 0.2 * progress_factor))
        weighted_cost *= importance_scores[node]
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
