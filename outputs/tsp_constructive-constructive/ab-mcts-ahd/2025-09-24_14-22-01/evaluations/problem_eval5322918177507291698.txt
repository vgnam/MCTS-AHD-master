import math
    import random
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    temperature = 1.0 / (remaining_nodes + 1)  # Dynamic temperature for probabilistic selection
    candidates = []
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        dynamic_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if node in unvisited_nodes and node != current_node:
            weighted_cost += 1.0
        candidates.append((node, weighted_cost))
    if not candidates:
        return destination_node
    # Apply softmax selection with dynamic temperature
    weights = [math.exp(-cost / temperature) for _, cost in candidates]
    probabilities = [w / sum(weights) for w in weights]
    next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    return next_node
