def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    centrality = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])  # Centrality measure
    weight_factor = 1 / (1 + math.exp(-0.5 * (remaining_nodes - 5)))  # Sigmoid-based weight adjustment
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        # Lookahead: evaluate next node's potential impact
        lookahead_distance = 0
        if remaining_nodes > 1:
            next_unvisited = [n for n in unvisited_nodes if n != node]
            if next_unvisited:
                lookahead_distance = min(distance_matrix[node][n] for n in next_unvisited)
        weighted_cost = (weight_factor * immediate_distance +
                         (1 - weight_factor) * potential_distance +
                         0.2 * lookahead_distance) * (1 + 0.1 * centrality)
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    return next_node
