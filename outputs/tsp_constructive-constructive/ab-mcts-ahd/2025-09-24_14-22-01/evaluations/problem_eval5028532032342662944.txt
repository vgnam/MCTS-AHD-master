def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    weight_factor = 1.0 / (1.0 + (remaining_nodes ** 0.5) / (1 + avg_distance / distance_matrix[current_node][destination_node]))

    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        normalized_immediate = immediate_distance / avg_distance if avg_distance > 0 else 1.0
        normalized_potential = potential_distance / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 1.0
        dynamic_cost = (normalized_immediate ** weight_factor) * (1 + (1 - weight_factor) * (normalized_potential ** 0.5))
        if dynamic_cost < min_cost:
            min_cost = dynamic_cost
            next_node = node

    return next_node
