def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_cost = float('inf')
    next_node = None
    total_unvisited_nodes = len(unvisited_nodes)
    max_distance = max(max(row) for row in distance_matrix)
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        dynamic_weight = 0.5 * (1 - (len(unvisited_nodes) / total_unvisited_nodes)) + 0.5 * (centrality / max_distance)
        weighted_cost = immediate_distance + dynamic_weight * potential_distance
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
