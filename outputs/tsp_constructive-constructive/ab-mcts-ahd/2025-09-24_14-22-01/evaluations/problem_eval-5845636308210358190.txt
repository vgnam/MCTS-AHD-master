def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    alpha = 0.7
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        harmonic_mean = (2 * immediate_distance * potential_distance) / (immediate_distance + potential_distance) if (immediate_distance + potential_distance) > 0 else float('inf')
        position_factor = (distance_matrix[current_node][destination_node] - immediate_distance) / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        weight_immediate = 0.7 - 0.3 * (remaining_nodes / len(unvisited_nodes))
        weight_estimated = 0.3 + 0.4 * (remaining_nodes / len(unvisited_nodes))
        revisit_penalty = 1.0 / (remaining_nodes + 2) if remaining_nodes > 0 else 0.0
        score = (weight_immediate * harmonic_mean) + (weight_estimated * potential_distance) + (revisit_penalty * immediate_distance)
        if score < min_score:
            min_score = score
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
