def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    min_cost = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        distance_variance = max((distance_matrix[node][n] for n in unvisited_nodes if n != node), default=0) - min((distance_matrix[node][n] for n in unvisited_nodes if n != node), default=0)
        exploration_factor = (1 / (1 + potential_distance)) * (1 + centrality)
        penalty_factor = 1 + (distance_variance / (avg_distance + 1e-6))
        weighted_cost = immediate_distance + (0.5 * (immediate_distance / (avg_distance + 1e-6))) * potential_distance + exploration_factor / penalty_factor
        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node
    if next_node is None:
        next_node = destination_node
    return next_node
