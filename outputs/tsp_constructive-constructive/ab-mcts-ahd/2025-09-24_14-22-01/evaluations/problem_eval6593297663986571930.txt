def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes == 0:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    node_popularity = {node: sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[node][destination_node]) for node in unvisited_nodes}

    for node in unvisited_nodes:
        immediate_weight = 0.7 * (remaining_nodes / 10) if remaining_nodes < 10 else 0.7
        estimated_weight = 0.3 * (1 - (remaining_nodes / len(unvisited_nodes))) if len(unvisited_nodes) > 0 else 0.3
        popularity_factor = 1 - (node_popularity[node] / len(unvisited_nodes)) if len(unvisited_nodes) > 0 else 0

        immediate_distance = distance_matrix[current_node][node]
        estimated_distance_to_destination = distance_matrix[node][destination_node]
        total_distance = (immediate_weight * immediate_distance + estimated_weight * estimated_distance_to_destination) * popularity_factor

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    return next_node
