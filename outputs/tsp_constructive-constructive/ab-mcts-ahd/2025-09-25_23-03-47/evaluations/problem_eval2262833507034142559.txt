def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weights = []
    for node in unvisited_nodes:
        if len(unvisited_nodes) == 1:
            weight = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        else:
            remaining_nodes = unvisited_nodes - {node}
            next_node = min(remaining_nodes, key=lambda x: distance_matrix[node][x])
            weight = distance_matrix[current_node][node] + distance_matrix[node][next_node]
        weights.append(1.0 / weight)

    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    next_node = random.choices(list(unvisited_nodes), weights=normalized_weights, k=1)[0]
    return next_node
