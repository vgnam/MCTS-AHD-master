def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_candidate(candidate):
        base_distance = distance_matrix[current_node][candidate]
        if not unvisited_nodes - {candidate}:
            return base_distance + distance_matrix[candidate][destination_node]
        next_candidate = min(unvisited_nodes - {candidate}, key=lambda x: distance_matrix[candidate][x])
        lookahead_distance = distance_matrix[candidate][next_candidate]
        random_factor = 0.1 * np.random.rand()  # Add randomness to encourage exploration
        return base_distance + lookahead_distance * (1 - random_factor)

    next_node = min(unvisited_nodes, key=evaluate_candidate)
    return next_node
