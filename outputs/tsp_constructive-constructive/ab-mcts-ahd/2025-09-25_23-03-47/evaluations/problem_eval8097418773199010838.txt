def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_candidate(candidate):
        if not unvisited_nodes - {candidate}:
            return distance_matrix[current_node][candidate] + distance_matrix[candidate][destination_node]
        next_candidates = sorted(unvisited_nodes - {candidate}, key=lambda x: distance_matrix[candidate][x])
        if len(next_candidates) >= 2:
            return distance_matrix[current_node][candidate] + distance_matrix[candidate][next_candidates[0]] + distance_matrix[next_candidates[0]][next_candidates[1]]
        else:
            return distance_matrix[current_node][candidate] + distance_matrix[candidate][next_candidates[0]]

    candidates = list(unvisited_nodes)
    weights = [1 / (evaluate_candidate(c) + 1e-10) for c in candidates]
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
