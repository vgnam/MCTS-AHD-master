import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        return local_distance + global_distance

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)

    if min_score == max_score:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        normalized_scores = [(max_score - score) / (max_score - min_score) for score in scores]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
