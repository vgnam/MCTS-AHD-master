def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_candidate(candidate):
        current_dist = distance_matrix[current_node][candidate]
        if not unvisited_nodes - {candidate}:
            return current_dist + distance_matrix[candidate][destination_node]
        next_candidate = min(unvisited_nodes - {candidate}, key=lambda x: distance_matrix[candidate][x])
        next_dist = distance_matrix[candidate][next_candidate]
        return current_dist + next_dist

    candidates = list(unvisited_nodes)
    weights = [1 / (evaluate_candidate(node) + 1e-10) for node in candidates]
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
