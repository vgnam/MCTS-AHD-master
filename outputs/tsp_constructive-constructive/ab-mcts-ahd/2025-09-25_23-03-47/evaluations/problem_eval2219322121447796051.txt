def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_candidate(candidate):
        insertion_cost = distance_matrix[current_node][candidate]
        if not unvisited_nodes - {candidate}:
            return insertion_cost + distance_matrix[candidate][destination_node]

        remaining_nodes = unvisited_nodes - {candidate}
        min_future_cost = min(distance_matrix[candidate][node] for node in remaining_nodes)
        max_future_cost = max(distance_matrix[candidate][node] for node in remaining_nodes)
        future_flexibility = max_future_cost - min_future_cost

        return insertion_cost + 0.5 * min_future_cost - 0.3 * future_flexibility

    next_node = min(unvisited_nodes, key=evaluate_candidate)
    return next_node
