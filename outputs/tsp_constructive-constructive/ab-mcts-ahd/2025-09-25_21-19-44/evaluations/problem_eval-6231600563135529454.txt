def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            score = distance * 0.5  # Prioritize destination more
        else:
            # Heuristic: Balance distance and potential future savings
            avg_future_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
            score = distance + 0.3 * avg_future_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
