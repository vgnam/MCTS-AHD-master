def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        if node == destination_node:
            return node

        immediate_distance = distance_matrix[current_node][node]
        min_remaining_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        harmonic_mean = 2 * immediate_distance * min_remaining_distance / (immediate_distance + min_remaining_distance) if (immediate_distance + min_remaining_distance) != 0 else 0

        if harmonic_mean < best_score:
            best_score = harmonic_mean
            next_node = node

    if destination_node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][destination_node]
        min_remaining_distance = min(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node) if unvisited_nodes else 0
        destination_harmonic = 2 * immediate_distance * min_remaining_distance / (immediate_distance + min_remaining_distance) if (immediate_distance + min_remaining_distance) != 0 else 0

        if destination_harmonic < best_score:
            next_node = destination_node

    return next_node
