def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    remaining_nodes = len(unvisited_nodes)
    density_weight = 1.0 - (remaining_nodes / (remaining_nodes + 1))  # Higher density -> higher long-term weight

    for node in unvisited_nodes:
        if node == destination_node:
            return node

        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)
        score = (1.0 - density_weight) * distance_to_current + density_weight * 0.75 * avg_distance_to_remaining

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        distance_to_destination = distance_matrix[current_node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node) / max(1, remaining_nodes - 1)
        destination_score = (1.0 - density_weight) * distance_to_destination + density_weight * 0.75 * avg_distance_to_remaining

        if destination_score < min_score:
            next_node = destination_node

    return next_node
