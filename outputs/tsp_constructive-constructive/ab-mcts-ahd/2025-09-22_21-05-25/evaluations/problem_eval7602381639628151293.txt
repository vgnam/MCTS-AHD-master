def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_unvisited = [n for n in unvisited_nodes if n != node]
            future_cost = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            weight = 1.0 / (1.0 + len(unvisited_nodes))  # Dynamic weighting factor
            return (1 - weight) * current_to_node + weight * future_cost
        else:
            return current_to_node

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
