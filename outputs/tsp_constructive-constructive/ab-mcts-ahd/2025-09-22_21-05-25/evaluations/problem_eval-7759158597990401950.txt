def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / len(distance_matrix)
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    nearest_dist = distance_matrix[current_node][nearest_node]
    farthest_dist = distance_matrix[current_node][farthest_node]

    if len(unvisited_nodes) > 2:
        threshold = 1.5 * nearest_dist
        if farthest_dist > threshold:
            penalty = (farthest_dist - threshold) / farthest_dist
            prob_nearest = (1 - penalty) * temperature
            prob_farthest = penalty * temperature
            next_node = nearest_node if random.random() < prob_nearest else farthest_node
        else:
            next_node = nearest_node
    else:
        next_node = nearest_node

    return next_node
