def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    if avg_distance == 0:
        return nearest_node
    normalized_ratio = distance_matrix[current_node][farthest_node] / avg_distance
    temperature = 1.0 / (1.0 + len(unvisited_nodes))
    prob_nearest = (1.0 / (1.0 + normalized_ratio)) ** (1.0 / temperature)
    prob_farthest = 1.0 - prob_nearest
    if prob_farthest > prob_nearest:
        return farthest_node if random.random() < prob_farthest else nearest_node
    else:
        return next_node
