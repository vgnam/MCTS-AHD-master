def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if len(unvisited_nodes) > 1:
        remaining_unvisited = [n for n in unvisited_nodes if n != nearest_node]
        nearest_remaining = min(remaining_unvisited, key=lambda n: distance_matrix[nearest_node][n])
        exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + sum(distance_matrix[current_node][n] for n in unvisited_nodes))
        nearest_score = distance_matrix[current_node][nearest_node] * 0.7 + distance_matrix[nearest_node][nearest_remaining] * 0.3 * exploration_factor
        farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        farthest_score = distance_matrix[current_node][farthest_node] * 0.7 + distance_matrix[farthest_node][nearest_remaining] * 0.3 * exploration_factor
        next_node = farthest_node if farthest_score < nearest_score else nearest_node
    else:
        next_node = nearest_node
    return next_node
