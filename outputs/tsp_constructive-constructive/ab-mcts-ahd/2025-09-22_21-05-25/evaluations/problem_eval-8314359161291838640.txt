defaulting to nearest otherwise, balancing optimality and exploration.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    nearest_dist = distance_matrix[current_node][nearest_node]
    farthest_dist = distance_matrix[current_node][farthest_node]

    if farthest_dist > 2 * nearest_dist:
        return farthest_node
    else:
        return next_node
