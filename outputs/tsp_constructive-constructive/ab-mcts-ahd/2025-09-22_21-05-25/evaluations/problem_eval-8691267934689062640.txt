def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if len(unvisited_nodes) > 2:
        remaining_unvisited_nearest = [n for n in unvisited_nodes if n != nearest_node]
        nearest_nearest = min(remaining_unvisited_nearest, key=lambda n: distance_matrix[nearest_node][n])
        remaining_unvisited_farthest = [n for n in unvisited_nodes if n != farthest_node]
        nearest_farthest = min(remaining_unvisited_farthest, key=lambda n: distance_matrix[farthest_node][n])
        if distance_matrix[farthest_node][nearest_farthest] > 1.5 * distance_matrix[nearest_node][nearest_nearest]:
            next_node = farthest_node
        else:
            next_node = nearest_node
    else:
        next_node = nearest_node
    return next_node
