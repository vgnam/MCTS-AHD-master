def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_unvisited = [n for n in unvisited_nodes if n != node]
            nearest_remaining = min(remaining_unvisited, key=lambda n: distance_matrix[node][n])
            node_to_nearest = distance_matrix[node][nearest_remaining]

            # Temperature-based exploration factor
            temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
            exploration_weight = temperature * 0.7 + 0.3  # More weight to future steps as temperature decreases

            # Probabilistic selection: closer nodes have higher chance when temperature is high
            distance_score = current_to_node + node_to_nearest * exploration_weight
            return distance_score * (1.0 / (1.0 + temperature * 0.5))  # Adjust score based on temperature
        else:
            return current_to_node

    # Select node with lowest score (or probabilistically if modified)
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
