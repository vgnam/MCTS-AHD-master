def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_unvisited = [n for n in unvisited_nodes if n != node]
            avg_future = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + sum(distance_matrix[current_node][n] for n in unvisited_nodes))
            weight = 0.5 + exploration_factor * 0.5
            return weight * current_to_node + (1 - weight) * avg_future
        else:
            return current_to_node
    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
