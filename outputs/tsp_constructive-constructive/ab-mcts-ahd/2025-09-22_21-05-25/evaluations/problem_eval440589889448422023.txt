def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    threshold = 2.0 * avg_distance

    weighted_distance = {
        node: 0.7 * distance_matrix[current_node][node] + 0.3 * distance_matrix[current_node][farthest_node]
        for node in unvisited_nodes
    }

    if distance_matrix[current_node][farthest_node] > threshold:
        next_node = min(unvisited_nodes, key=lambda node: weighted_distance[node])
    else:
        next_node = nearest_node

    return next_node
