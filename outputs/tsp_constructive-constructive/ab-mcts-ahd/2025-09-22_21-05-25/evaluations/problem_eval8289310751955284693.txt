defaulting to the nearest node in smaller sets to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if len(unvisited_nodes) > 2:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        threshold = 1.2 * avg_distance
        next_node = farthest_node if distance_matrix[current_node][farthest_node] > threshold else nearest_node
    else:
        next_node = nearest_node
    return next_node
