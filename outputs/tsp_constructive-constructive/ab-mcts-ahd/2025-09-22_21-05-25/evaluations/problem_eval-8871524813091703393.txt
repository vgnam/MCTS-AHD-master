defaults to the nearest node, balancing exploration and exploitation with a stricter threshold for farthest selection.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    median_distance = sorted(distances)[len(distances) // 2]
    threshold = 2.0 * median_distance

    next_node = farthest_node if distance_matrix[current_node][farthest_node] > threshold else nearest_node
    return next_node
