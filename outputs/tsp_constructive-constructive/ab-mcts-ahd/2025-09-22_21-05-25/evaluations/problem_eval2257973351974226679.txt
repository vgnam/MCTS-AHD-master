def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    farthest_ratio = distance_matrix[current_node][farthest_node] / avg_distance
    exploration_weight = min(1.0, 0.5 + 0.5 * (farthest_ratio - 1.0))
    exploration_prob = exploration_weight * (farthest_ratio ** 0.5) / (1 + (farthest_ratio ** 0.5))
    if random.random() < exploration_prob:
        return farthest_node
    else:
        return next_node
