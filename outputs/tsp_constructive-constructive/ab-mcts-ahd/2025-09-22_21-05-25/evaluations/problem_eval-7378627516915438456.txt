def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    nearest_dist = distance_matrix[current_node][nearest_node]
    farthest_dist = distance_matrix[current_node][farthest_node]

    if nearest_dist == farthest_dist:
        return nearest_node

    exploration_weight = (farthest_dist - nearest_dist) / avg_distance
    random_factor = exploration_weight * (1 - (avg_distance / farthest_dist))
    selection_prob = 1 / (1 + math.exp(-random_factor))

    if random.random() < selection_prob:
        return farthest_node
    else:
        return next_node
