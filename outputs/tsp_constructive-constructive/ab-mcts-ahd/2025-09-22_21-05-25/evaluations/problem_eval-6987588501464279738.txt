defaulting to the nearest node.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    sorted_distances = sorted(distance_matrix[current_node][node] for node in unvisited_nodes)
    median_distance = sorted_distances[len(sorted_distances) // 2]
    threshold_ratio = 1.1 + (distance_matrix[current_node][farthest_node] / median_distance) * 0.4
    next_node = farthest_node if distance_matrix[current_node][farthest_node] > threshold_ratio * distance_matrix[current_node][nearest_node] else nearest_node
    return next_node
