def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    nearest_dist = distance_matrix[current_node][nearest_node]
    farthest_dist = distance_matrix[current_node][farthest_node]
    if nearest_dist == farthest_dist:
        return nearest_node
    ratio = farthest_dist / nearest_dist
    decay_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    prob_farthest = 1 / (1 + math.exp(-(ratio - 1) * decay_factor))
    next_node = farthest_node if random.random() < prob_farthest else nearest_node
    return next_node
