def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    avg_distance = sum(distances) / len(distances)
    std_dev = (sum((d - avg_distance) ** 2 for d in distances) / len(distances)) ** 0.5
    threshold = avg_distance + 0.5 * std_dev

    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if distance_matrix[current_node][nearest_node] <= threshold:
        next_node = nearest_node
    else:
        if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] <= threshold:
            next_node = destination_node
        else:
            weights = [1 / (distance_matrix[current_node][node] - threshold + 1) for node in unvisited_nodes]
            next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]

    return next_node
