def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=0.1, penalty_factor=0.5, visited_history=None):
    if not unvisited_nodes:
        return destination_node

    if visited_history is None:
        visited_history = []

    def score(node):
        distance = distance_matrix[current_node][node]
        penalty = sum(penalty_factor * distance_matrix[node][v] for v in visited_history if v in unvisited_nodes)
        return distance + penalty

    weighted_nodes = [(node, np.exp(-score(node) / temperature)) for node in unvisited_nodes]
    probabilities = np.array([weight for (node, weight) in weighted_nodes])
    probabilities /= probabilities.sum()

    next_node = np.random.choice([node for (node, _) in weighted_nodes], p=probabilities)
    return next_node
