def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    farthest_node = max(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    distance_ratio = distance_matrix[current_node][nearest_node] / distance_matrix[current_node][farthest_node]
    decay_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    weighted_probability = decay_factor * (1 - distance_ratio)
    next_node = nearest_node if weighted_probability > 0.5 else farthest_node
    return next_node
