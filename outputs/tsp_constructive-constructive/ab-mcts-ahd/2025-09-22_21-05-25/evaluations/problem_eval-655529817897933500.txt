def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    historical_costs = {node: distance_matrix[current_node][node] for node in unvisited_nodes}

    def evaluate_node(node):
        current_to_node = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_unvisited = [n for n in unvisited_nodes if n != node]
            nearest_remaining = min(remaining_unvisited, key=lambda n: distance_matrix[node][n])
            node_to_nearest = distance_matrix[node][nearest_remaining]
            connectivity_score = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            exploration_factor = temperature * (1 + connectivity_score / current_to_node)
            historical_factor = historical_costs[node] / sum(historical_costs.values())
            return current_to_node * (1 - historical_factor) + node_to_nearest * exploration_factor
        else:
            return current_to_node

    probabilities = [1 / (1 + evaluate_node(node)) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = np.random.choice(unvisited_nodes, p=normalized_probs)

    return next_node
