[
     {
          "algorithm": "The algorithm prioritizes nodes that minimize a weighted score combining immediate distance, potential path savings, and a penalty for distant nodes, aggressively optimizing the tour by favoring nodes that reduce the remaining path length while penalizing excessively distant selections. The score calculation balances `current_dist` and `dest_dist` with a multiplicative factor and additive penalty, where `path_savings` and penalty terms influence the selection. The heuristic ensures a trade-off between immediate proximity and long-term savings, favoring nodes that save the most path length while discouraging overly distant choices.",
          "thought": "\nThe new algorithm prioritizes selecting nodes based on a dynamic balance of immediate distance and potential path savings, using a multiplicative factor to emphasize nodes that significantly reduce the remaining path length while penalizing nodes that are too distant, ensuring a more aggressive optimization of the tour.\n",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            score = current_dist\n        else:\n            # Aggressive optimization: prioritize nodes that save the most path length\n            path_savings = current_dist - dest_dist\n            penalty = 1 + (current_dist / (dest_dist + 1e-10))  # Stronger penalty for distant nodes\n            score = (current_dist / dest_dist) * penalty + path_savings\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.4857,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance to the next node (weighted by the ratio of unvisited nodes) while penalizing proximity to the destination node (weighted by -0.5), balancing short-term and long-term objectives. The weight factor adjusts dynamically based on remaining unvisited nodes, favoring closer nodes early on but gradually emphasizing destination proximity.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the dynamic weight adjustment from No.2, using a weight factor that balances immediate distance (weighted by unvisited nodes ratio) and penalizes long-term proximity to the destination (weighted by -0.5).",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = (weight_factor * immediate_distance) - (0.5 * destination_distance)\n\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n\n    return next_node",
          "objective": 6.4981,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing immediate distance (weighted 1.0) while slightly penalizing long-term proximity to the destination (weighted -0.5), balancing short-term efficiency with long-term path optimization. The function iterates through unvisited nodes, computes a combined score for each, and chooses the node with the lowest score, ensuring a trade-off between immediate distance and overall path efficiency.",
          "thought": "The new algorithm selects the next node by prioritizing immediate distance from the current node (weighted 1.0) and penalizing long-term proximity to the destination (weighted -0.5), encouraging exploration of intermediate nodes that may lead to shorter overall paths.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = immediate_distance - 0.5 * destination_distance\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.5107,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes selecting nodes that balance the ratio of current-to-next and next-to-destination distances while incorporating a penalty for distant nodes and path savings. The score is computed as a weighted sum of the ratio (0.5), path savings (0.5), and a multiplicative penalty (1 + current_dist / (dest_dist + \u03b5)). The node with the lowest score is chosen, favoring closer nodes with better path savings. The destination node is returned if no unvisited nodes remain.",
          "thought": "The new algorithm combines the aggressive path savings of No.1 with the balanced scoring of No.2, selecting nodes that minimize a weighted score of the ratio of current-to-next and next-to-destination distances, while incorporating a multiplicative penalty for distant nodes and an additive path savings term.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            score = current_dist\n        else:\n            ratio = current_dist / dest_dist\n            penalty = 1 + (current_dist / (dest_dist + 1e-10))\n            path_savings = current_dist - dest_dist\n            score = 0.5 * ratio + 0.5 * path_savings + penalty\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.53403,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines a dynamic weight factor (based on remaining unvisited nodes) with a balanced scoring mechanism, prioritizing immediate distance (weighted by `weight_factor`), penalizing destination distance (weighted by `-0.5 * weight_factor`), and incorporating centrality (weighted by `0.2 * (1 - weight_factor)`). The weight factor adjusts dynamically, favoring immediate distance early and balancing with centrality and destination distance as the tour progresses.",
          "thought": "The new algorithm combines the dynamic weight factor from No.2 with the balanced scoring mechanism of No.1, where the weight factor adjusts based on the number of unvisited nodes, and the score prioritizes immediate distance (weighted by weight_factor), penalizes destination distance (weighted by -0.5 * weight_factor), and incorporates centrality (weighted by 0.2 * (1 - weight_factor)).",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)\n    min_score = float('inf')\n    next_node = None\n    num_nodes = len(distance_matrix)\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)\n        score = (weight_factor * immediate_distance) - (0.5 * weight_factor * destination_distance) + (0.2 * (1 - weight_factor) * centrality_heuristic)\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.53942,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing immediate distance (60%), penalizing long-term distance (30%), and incorporating centrality (10%) to balance greediness with path efficiency. It calculates a weighted score for each unvisited node and chooses the one with the lowest score, ensuring a trade-off between short-term and long-term planning while considering node centrality. If no valid node is found, it defaults to the node with the highest average distance.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the weighted balance between short-term and long-term planning from No.2, while adding a centrality heuristic to ensure robustness. It selects the next node by minimizing a score that weights immediate distance (60%), penalizes long-term distance (30%), and incorporates centrality (10%), ensuring a trade-off between greediness and path efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n    num_nodes = len(distance_matrix)\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)\n\n        score = (0.6 * immediate_distance) - (0.3 * destination_distance) + (0.1 * centrality_heuristic)\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    if next_node is None and unvisited_nodes:\n        next_node = max(unvisited_nodes, key=lambda x: sum(distance_matrix[x]))\n\n    return next_node",
          "objective": 6.59757,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance (highest priority, weight 1), destination proximity (medium priority, weight -0.5), and node centrality (lowest priority, weight 0.2). It prioritizes nodes close to the current node while penalizing those far from the destination, and slightly favors nodes with lower average distances to all other nodes. The scoring mechanism ensures a trade-off between immediate gains and long-term efficiency.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the balanced multi-factor scoring of No.2, adding a centrality component (weighted 0.2) to further optimize path efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    num_nodes = len(distance_matrix)\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)\n        score = immediate_distance - 0.5 * destination_distance + 0.2 * centrality_heuristic\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.6208,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm balances choosing the next node based on **60% immediate distance** (from current node) and **40% destination proximity** (distance to the final node), with a **penalty** applied when immediate distance is large relative to the projected path length, favoring nodes that reduce the overall tour length while slightly discouraging those farther from the destination. The `combined_score` prioritizes shorter immediate distances while accounting for long-term path efficiency.",
          "thought": "The new algorithm balances immediate distance (60% weight) and proximity to destination (40% weight) with a penalty factor that increases when the immediate distance is large relative to the projected path length, favoring nodes that reduce the overall tour length while slightly penalizing those farther from the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        projected_path_length = immediate_distance + destination_distance\n        penalty = 1 + (immediate_distance / (projected_path_length + 1e-10))\n        combined_score = 0.6 * immediate_distance - 0.3 * destination_distance * penalty\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.6267,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes nodes that minimize a weighted combination of immediate distance, the ratio of immediate distance to destination distance, and path savings (distance reduction when visiting the node). Higher weights (1.5) are given to immediate distance, while path savings (0.5) and the ratio have moderate influence. The algorithm avoids dead-ends by penalizing nodes with zero destination distance (ratio = immediate distance). The loop iterates through unvisited nodes to find the one with the lowest combined score.",
          "thought": "The new algorithm combines the balanced scoring of No.2 (immediate distance and ratio) with the path savings and penalty aspects of No.1, favoring nodes that save path length while avoiding dead-ends.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = immediate_distance\n            path_savings = immediate_distance\n        else:\n            ratio = immediate_distance / dest_dist\n            path_savings = immediate_distance - dest_dist\n        combined_score = 1.5 * immediate_distance + ratio + 0.5 * path_savings\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.62971,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing immediate distance to the current node while dynamically penalizing nodes that increase the projected path length (current distance + distance to destination). It balances short-term distance (`current_dist`) with a weighted ratio of current-to-destination distance (`current_dist / dest_dist`) and a penalty term (`1 + current_dist / projected_path_length`) to avoid suboptimal detours. The penalty term ensures longer paths are discouraged, while the ratio term favors nodes closer to the destination. The destination node is returned if no unvisited nodes remain.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the dynamic penalty-based scoring from No.2, favoring nodes that minimize the sum of current distance and a weighted ratio of current to destination distance, while penalizing nodes that increase the projected path length.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            score = current_dist\n        else:\n            projected_path_length = current_dist + dest_dist\n            penalty = 1 + (current_dist / (projected_path_length + 1e-10))\n            score = current_dist + (current_dist / dest_dist) * penalty\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.63701,
          "other_inf": null
     }
]