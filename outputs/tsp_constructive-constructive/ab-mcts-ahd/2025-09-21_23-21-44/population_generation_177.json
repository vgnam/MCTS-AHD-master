[
     {
          "algorithm": "The algorithm selects the next node by prioritizing immediate distance (weighted 1.0) while slightly penalizing long-term proximity to the destination (weighted -0.5), balancing short-term efficiency with long-term path optimization. The function iterates through unvisited nodes, computes a combined score for each, and chooses the node with the lowest score, ensuring a trade-off between immediate distance and overall path efficiency.",
          "thought": "The new algorithm selects the next node by prioritizing immediate distance from the current node (weighted 1.0) and penalizing long-term proximity to the destination (weighted -0.5), encouraging exploration of intermediate nodes that may lead to shorter overall paths.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = immediate_distance - 0.5 * destination_distance\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.5107,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance (highest priority, weight 1), destination proximity (medium priority, weight -0.5), and node centrality (lowest priority, weight 0.2). It prioritizes nodes close to the current node while penalizing those far from the destination, and slightly favors nodes with lower average distances to all other nodes. The scoring mechanism ensures a trade-off between immediate gains and long-term efficiency.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the balanced multi-factor scoring of No.2, adding a centrality component (weighted 0.2) to further optimize path efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    num_nodes = len(distance_matrix)\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)\n        score = immediate_distance - 0.5 * destination_distance + 0.2 * centrality_heuristic\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.6208,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance from the current node and long-term efficiency (ratio of current distance to destination distance), prioritizing nodes with lower combined scores. It iterates through unvisited nodes, computes a score as the sum of direct distance and the ratio, and selects the node with the minimum score. The ratio ensures long-term efficiency is considered, while the direct distance ensures immediate proximity is prioritized.",
          "thought": "The new algorithm combines the ratio-based selection of No.1 with the weighted scoring approach of No.2. It computes a score as the sum of the distance to the current node and a weighted ratio of the distance to the current node over the distance to the destination, prioritizing nodes that balance immediate proximity and long-term efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        score = current_dist + ratio\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.67121,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node to visit by evaluating a weighted combination of the immediate distance from the current node and the ratio of that distance to the distance to the destination node, with adjustable weights (default: 60% for immediate distance, 40% for the ratio). It prioritizes nodes that offer a good balance between proximity to the current node and progress toward the destination, avoiding division by zero for the destination distance. The structure iteratively compares scores to find the optimal next node.",
          "thought": "The new algorithm prioritizes nodes based on a weighted combination of immediate distance and the ratio of current distance to destination distance, with adjustable weights to balance exploration and exploitation, while the original algorithm uses a simple sum of these two components.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, weight_current=0.6, weight_ratio=0.4):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        score = weight_current * current_dist + weight_ratio * ratio\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.75,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes the next node to visit by balancing distance and centrality, favoring closer nodes while slightly penalizing highly connected nodes (to avoid revisits) using the score equation `-distance + 0.3 * (centrality / (degree + 1))`. The distance is given higher priority (negative weight) than centrality (positive weight scaled by 0.3), and centrality is adjusted by the node's degree to avoid over-penalizing isolated nodes. The code iterates through unvisited nodes, computes the score, and selects the node with the highest score.",
          "thought": "The new algorithm prioritizes nodes based on a weighted combination of distance and node centrality, favoring closer nodes while slightly penalizing highly connected nodes to avoid revisits, using the score equation: `-distance + 0.3 * (centrality / (degree + 1))` where centrality is the sum of distances to all other nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    next_node = None\n    best_score = float('-inf')\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        centrality = sum(d for d in distance_matrix[node] if d > 0)\n        score = -distance + 0.3 * (centrality / (degree + 1))\n        if score > best_score:\n            best_score = score\n            next_node = node\n    return next_node",
          "objective": 6.76852,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance prioritization (given higher weight) with long-term efficiency (penalized by a factor of 0.5). It calculates a score as the sum of the direct distance from the current node to the candidate node and a ratio of this distance to the candidate's distance to the destination, then picks the node with the lowest score. The ratio penalization ensures long-term efficiency is considered but with reduced influence compared to immediate distance.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the long-term efficiency ratio from No.2, using a weighted sum of the direct distance and the ratio of current distance to destination distance, where the ratio is penalized by a factor of 0.5 to balance short-term and long-term optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        score = current_dist + 0.5 * ratio\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.78776,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm selects the next node by balancing immediate distance (70% weight) and the ratio of current distance to destination distance (30% weight), prioritizing closer nodes while also considering progress toward the destination. It ensures a trade-off between local efficiency and global progress by combining these two factors in the scoring function. The code iterates through unvisited nodes, computes the weighted score, and selects the node with the minimum score.",
          "thought": "The new algorithm combines the weighted balance of immediate distance and progress toward the destination from No.1 with the simplicity of No.2's local-global trade-off, using a 70-30 split for immediate and ratio-based scores.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        score = 0.7 * current_dist + 0.3 * ratio\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.8001,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing immediate distance (weighted 1.5) while slightly penalizing long-term proximity to the destination (weighted -0.2), balancing short-term efficiency with moderate long-term optimization. The `combined_score` is minimized, favoring nodes that are closer to the current node but not too far from the destination. The function iterates over unvisited nodes, computes the score for each, and returns the node with the lowest score.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.2 (weighted 1.5) with a slight long-term proximity penalty from No.1 (weighted -0.2), aiming to balance short-term efficiency with moderate long-term optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = 1.5 * immediate_distance - 0.2 * destination_distance\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.8325,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by dynamically balancing immediate proximity (distance from current node) and long-term proximity (distance to destination), weighted by the remaining unvisited nodes and penalized for nodes too distant from the current node. It prioritizes nodes closer to the destination (higher weight for smaller `distance_destination`) while avoiding excessively long detours (penalty if `distance_current` exceeds twice the direct distance to the destination). The score is normalized by the inverse of `distance_destination` and scaled by the number of remaining nodes.",
          "thought": "The new algorithm modifies the original approach by incorporating a dynamic weighting mechanism that adjusts the balance between immediate and long-term proximity based on the remaining unvisited nodes, using a normalized score that considers the inverse of the distance to the destination and a penalty factor for nodes that are too far from the current node.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    remaining_nodes = len(unvisited_nodes)\n    for node in unvisited_nodes:\n        distance_current = distance_matrix[current_node][node]\n        distance_destination = distance_matrix[node][destination_node]\n        if distance_destination == 0:\n            score = distance_current\n        else:\n            weight = 1.0 / (1.0 + distance_destination) * (1.0 + remaining_nodes)\n            penalty = 1.0 if distance_current > 2 * distance_matrix[current_node][destination_node] else 1.0\n            score = distance_current * weight * penalty\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.83635,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes nodes based on the ratio of the distance from the current node to the distance to the destination, balancing immediate proximity and long-term efficiency. It selects the next node to visit by minimizing this ratio, ensuring the path remains efficient while progressively moving toward the destination. If no unvisited nodes remain, it returns the destination node.",
          "thought": "The new algorithm prioritizes nodes based on the ratio of the distance from the current node to the distance to the destination, ensuring a balance between immediate proximity and long-term efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_ratio = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        if ratio < min_ratio:\n            min_ratio = ratio\n            next_node = node\n    return next_node",
          "objective": 6.89499,
          "other_inf": null
     }
]