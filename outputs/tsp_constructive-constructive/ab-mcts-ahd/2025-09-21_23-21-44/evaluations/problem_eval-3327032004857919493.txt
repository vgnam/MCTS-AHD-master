def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Weighted scoring: immediate (40%), future (30%), centrality (30%)
        balance_factor = 0.4 * (immediate_distance / avg_unvisited_distance) + 0.3 * (future_distance / avg_unvisited_distance) + 0.3 * (centrality / avg_unvisited_distance)
        total_score = immediate_distance + future_distance + centrality * balance_factor

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
