def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_combined_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        centrality = 0
        for other_node in unvisited_nodes:
            centrality += distance_matrix[node][other_node]
        centrality /= len(unvisited_nodes) if len(unvisited_nodes) > 1 else 1
        dynamic_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))  # Sigmoid transition
        penalty = 0.1 * centrality if remaining_nodes > 3 else 0
        combined_cost = (dynamic_weight * immediate_cost + (1 - dynamic_weight) * centrality) + penalty
        if combined_cost < min_combined_cost:
            min_combined_cost = combined_cost
            next_node = node
    return next_node
