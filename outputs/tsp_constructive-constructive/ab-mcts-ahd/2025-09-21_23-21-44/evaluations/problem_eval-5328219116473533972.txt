def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visited_counts=None, alpha=1.0, beta=0.5, gamma=0.2):
    if not unvisited_nodes:
        return destination_node
    if visited_counts is None:
        visited_counts = {node: 0 for node in unvisited_nodes}

    min_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on proximity to destination
        dynamic_weight = beta if immediate_distance < current_to_dest else alpha

        # Penalty for frequently visited nodes
        penalty = gamma * visited_counts.get(node, 0)

        combined_score = immediate_distance + dynamic_weight * destination_distance + penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
