def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if dest_dist == 0:
            score = current_dist
        else:
            dynamic_weight = 0.5 + 0.5 * (remaining_nodes / (remaining_nodes + 1))  # Adjusts based on remaining nodes
            avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
            score = dynamic_weight * (current_dist / dest_dist) + (1 - dynamic_weight) * (current_dist + dest_dist + avg_dist)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
