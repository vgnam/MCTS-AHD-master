def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        weight = 0.3 + 0.2 * (remaining_nodes / len(distance_matrix))

        # Centrality factor: average distance to all unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        score = distance_to_current + weight * distance_to_destination + 0.1 * centrality

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
