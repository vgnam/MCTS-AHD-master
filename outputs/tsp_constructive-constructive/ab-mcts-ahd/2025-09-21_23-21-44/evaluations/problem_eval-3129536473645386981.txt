def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes) + 1
    progress_factor = (total_unvisited - len(unvisited_nodes)) / total_unvisited
    weight_factor = 0.5 + 0.5 * (1 - progress_factor)
    normalization = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        penalty = 0.1 * (1 - (1 / (1 + distance_matrix[current_node][node])))
        score = (weight_factor * (immediate_distance / normalization)) + ((1 - weight_factor) * potential_distance) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
