def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weights based on remaining nodes
    if remaining_nodes > total_nodes / 2:
        w_proximity = 0.7
        w_efficiency = 0.3
        w_centrality = 0.0
    else:
        w_proximity = 0.4
        w_efficiency = 0.3
        w_centrality = 0.3

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (total_nodes - 1)

        # Adaptive scoring with dynamic weights
        score = (w_proximity * distance_to_node +
                 w_efficiency * distance_from_node +
                 w_centrality * centrality_heuristic)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
