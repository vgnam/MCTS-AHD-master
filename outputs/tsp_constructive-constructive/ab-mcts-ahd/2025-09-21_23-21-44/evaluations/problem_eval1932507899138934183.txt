def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node]) / num_nodes

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        outlier_penalty = max(0, (distance_to_node - avg_distance) / avg_distance) if avg_distance > 0 else 0

        dynamic_weight = 1.0 - (remaining_nodes / num_nodes)
        weighted_proximity = 0.6 + 0.2 * dynamic_weight
        weighted_return = 0.4 - 0.1 * dynamic_weight
        weighted_centrality = 0.1 + 0.1 * dynamic_weight

        score = (weighted_proximity * distance_to_node + weighted_return * distance_from_node) + (weighted_centrality * centrality_heuristic) + (0.2 * outlier_penalty)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
