def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        future_dist = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        if dest_dist == 0:
            weighted_score = 0.5 * current_dist + 0.2 * future_dist
        else:
            projected_path_length = current_dist + dest_dist
            penalty = 1 + (current_dist / (projected_path_length + 1e-10))
            weighted_score = 0.5 * current_dist + 0.3 * dest_dist * penalty + 0.2 * future_dist
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
