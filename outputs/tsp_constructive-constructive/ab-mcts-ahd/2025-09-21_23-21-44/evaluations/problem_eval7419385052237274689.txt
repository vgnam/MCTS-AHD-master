def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 1.0 / (1.0 + 0.1 * remaining_nodes)  # Dynamic weighting based on remaining nodes

    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        centrality = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                centrality += 1.0 / (1.0 + distance_matrix[node][other_node])  # Inverse distance for centrality

        weighted_cost = (1.0 - decay_factor) * immediate_cost + decay_factor * centrality
        if weighted_cost < min_score:
            min_score = weighted_cost
            next_node = node

    return next_node
