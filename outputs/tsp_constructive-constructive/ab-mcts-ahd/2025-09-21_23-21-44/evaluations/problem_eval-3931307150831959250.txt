def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_steps = len(unvisited_nodes)
    total_steps = num_nodes - 1

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)

        proximity_weight = 0.6 * (1 - 1 / (1 + math.exp(-5 * (remaining_steps / total_steps - 0.5))))
        efficiency_weight = 0.4 * (1 / (1 + math.exp(-5 * (remaining_steps / total_steps - 0.5))))
        centrality_weight = 0.1 * (1 - 1 / (1 + math.exp(-5 * (remaining_steps / total_steps - 0.5))))

        score = (proximity_weight * distance_to_node +
                efficiency_weight * distance_from_node +
                centrality_weight * centrality_heuristic)

        if score < min_score:
            min_score = score
            next_node = node
    return next_node
