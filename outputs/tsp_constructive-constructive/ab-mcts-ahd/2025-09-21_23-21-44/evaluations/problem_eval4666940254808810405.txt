def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        # Dynamic degree weight based on remaining nodes
        degree_weight = 0.5 * (remaining_nodes / (remaining_nodes + 1)) * (1 / (degree + 1))

        # Penalize nodes with high average distance to remaining unvisited nodes
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        distance_penalty = 0.3 * avg_distance_to_remaining

        score = -distance + degree_weight - distance_penalty

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
