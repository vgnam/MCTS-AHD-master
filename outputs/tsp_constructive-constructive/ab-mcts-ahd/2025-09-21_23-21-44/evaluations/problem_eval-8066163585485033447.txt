importance of the node's position in the sequence, using a dynamic exponent that adapts to the remaining path length.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        product = distance_to_node * distance_from_node
        exponent = 1.0 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))
        weighted_score = product ** exponent
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
