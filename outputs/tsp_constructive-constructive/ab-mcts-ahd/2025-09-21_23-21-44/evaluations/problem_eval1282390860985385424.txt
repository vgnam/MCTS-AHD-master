def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    alpha = 0.7  # Weight for distance_current, (1-alpha) for distance_destination
    for node in unvisited_nodes:
        distance_current = distance_matrix[current_node][node]
        distance_destination = distance_matrix[node][destination_node]
        normalized_score = alpha * (distance_current / max(distance_matrix[current_node])) + (1 - alpha) * (distance_destination / max(distance_matrix[node]))
        if normalized_score < min_score:
            min_score = normalized_score
            next_node = node
    return next_node
