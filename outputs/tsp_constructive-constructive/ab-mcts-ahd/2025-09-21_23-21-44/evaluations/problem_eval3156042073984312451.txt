def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    path_length = sum(distance_matrix[current_node][destination_node] for _ in range(2))  # Simplified path length estimate
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            ratio = current_dist
        else:
            ratio = current_dist / dest_dist
        weight = 1 / (1 + math.exp(-(path_length / distance_matrix[current_node][destination_node] - 1)))  # Dynamic weight
        score = weight * current_dist + (1 - weight) * ratio
        if node in unvisited_nodes:  # Penalty for revisiting (simplified)
            score += 0.1 * current_dist
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
