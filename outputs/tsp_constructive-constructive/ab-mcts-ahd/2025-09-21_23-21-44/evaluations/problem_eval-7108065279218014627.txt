import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if dest_dist == 0:
            score = current_dist
        else:
            # Dynamic weighting based on remaining nodes (exponential decay)
            weight_proximity = 0.7 * (0.9 ** remaining_nodes)
            weight_total = 0.3 * (1 - (0.9 ** remaining_nodes))

            # Penalty for nodes too close to destination
            penalty = 0.1 if dest_dist < (sum(distance_matrix[node]) / len(distance_matrix[node])) * 0.5 else 0

            score = (weight_proximity * (current_dist / dest_dist) +
                     weight_total * (current_dist + dest_dist) +
                     penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
