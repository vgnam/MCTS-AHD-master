def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    best_score = float('-inf')
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node in unvisited_nodes)
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        normalized_distance = 1 / (distance ** 2 + 1e-6)  # Inverse square normalization
        dynamic_weight = 0.3 + 0.7 * (current_path_length / (sum(distance_matrix[0]) + 1e-6))  # Weight scales with path length
        score = normalized_distance + dynamic_weight * (1 / (degree + 1) ** 0.5)  # Logarithmic degree scaling
        if score > best_score:
            best_score = score
            next_node = node
    return next_node
