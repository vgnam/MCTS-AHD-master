def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    min_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    num_nodes = len(distance_matrix)
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][unvisited] for unvisited in unvisited_nodes) / num_unvisited
        penalty = avg_distance_to_unvisited * (1 - (num_unvisited / num_nodes))
        centrality_heuristic = (sum(distance_matrix[node]) / (num_nodes - 1)) ** 0.5
        score = (0.5 * distance_to_node + 0.3 * distance_from_node + 0.2 * penalty) * (1 + 0.1 * centrality_heuristic)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
