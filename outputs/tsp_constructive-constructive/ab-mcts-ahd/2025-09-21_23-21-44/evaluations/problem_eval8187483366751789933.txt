def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    nearest_unvisited = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        local_factor = 0.7 * (immediate_distance / avg_unvisited_distance) + 0.3 * (future_distance / avg_unvisited_distance)
        local_optimization = distance_matrix[current_node][node] / distance_matrix[current_node][nearest_unvisited]
        total_score = immediate_distance + future_distance * local_factor + local_optimization

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
