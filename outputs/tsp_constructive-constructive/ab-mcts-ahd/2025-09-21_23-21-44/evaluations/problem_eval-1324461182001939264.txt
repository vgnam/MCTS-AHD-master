def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    weight = 0.7  # Static weight for balancing current and destination distances
    penalty_factor = 1.5  # Aggressive penalty for distant nodes
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            score = current_dist
        else:
            # Linear combination with static weight and aggressive penalty
            score = (weight * current_dist) + ((1 - weight) * dest_dist)
            if current_dist > penalty_factor * dest_dist:
                score *= penalty_factor  # Additional penalty for distant nodes
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
