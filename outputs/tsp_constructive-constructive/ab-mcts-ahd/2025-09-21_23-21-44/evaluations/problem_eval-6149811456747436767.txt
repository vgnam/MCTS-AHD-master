def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        proximity_weight = 0.6 + 0.05 * (1 - remaining_nodes / num_nodes)
        efficiency_weight = 0.4 - 0.05 * (1 - remaining_nodes / num_nodes)

        # Novel centrality metric: average distance to all unvisited nodes
        centrality_heuristic = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Small random perturbation to avoid local minima
        perturbation = 0.01 * (distance_to_node + distance_from_node) * (0.5 - random.random())

        score = (proximity_weight * distance_to_node + efficiency_weight * distance_from_node) + (0.1 * centrality_heuristic) + perturbation

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
