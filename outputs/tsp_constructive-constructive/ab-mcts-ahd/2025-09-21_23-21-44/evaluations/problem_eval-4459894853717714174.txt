def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    progress = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalized progress (0 to 1)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if dest_dist == 0:
            score = current_dist
        else:
            # Dynamic weighting based on progress
            alpha = 0.5 + 0.4 * progress  # More emphasis on long-term as progress increases
            beta = 1 - alpha
            score = alpha * (current_dist / dest_dist) + beta * (current_dist + dest_dist)

            # Penalty for recently visited nodes (simulated by node index)
            score += 0.1 * (node % 5)  # Cyclic penalty based on node index

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
