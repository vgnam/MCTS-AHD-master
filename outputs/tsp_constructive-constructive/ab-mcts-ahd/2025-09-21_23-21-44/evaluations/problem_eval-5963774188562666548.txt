def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        random_factor = random.uniform(0, 1)
        weight_current = 0.5 + 0.3 * (len(unvisited_nodes) / len(distance_matrix))
        weight_future = 0.5 - 0.3 * (len(unvisited_nodes) / len(distance_matrix))
        weighted_score = weight_current * current_distance + weight_future * future_distance + 0.2 * random_factor
        scores.append((node, weighted_score))
    scores.sort(key=lambda x: x[1])
    return next_node
