defined as the sum of distances to all other nodes. The score is calculated as `-distance - 0.3 * centrality`, favoring closer nodes while slightly penalizing highly central nodes to reduce revisits. The function iterates through unvisited nodes, computes this score, and selects the node with the highest value.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    best_score = float('-inf')
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node])  # Sum of distances to all other nodes
        score = -distance - 0.3 * centrality  # Penalize centrality more than original degree
        if score > best_score:
            best_score = score
            next_score = node
    return next_node
