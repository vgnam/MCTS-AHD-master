def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    num_unvisited = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        dynamic_centrality_weight = 0.1 * (1 / num_unvisited) if num_unvisited > 0 else 0
        score = (0.6 * distance_to_node + 0.4 * distance_from_node) + (dynamic_centrality_weight * centrality_heuristic)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
