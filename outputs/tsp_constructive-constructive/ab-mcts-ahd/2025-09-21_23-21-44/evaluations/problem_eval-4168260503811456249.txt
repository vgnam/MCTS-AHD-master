def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    variance_unvisited = sum((distance_matrix[node][destination_node] - avg_unvisited_distance) ** 2 for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        weight_immediate = 0.4
        weight_future = 0.3
        weight_centrality = 0.3

        dynamic_factor = (immediate_distance + future_distance) / (centrality + 1e-6)
        total_score = (weight_immediate * immediate_distance + weight_future * future_distance + weight_centrality * centrality) * (1 + (variance_unvisited / (avg_unvisited_distance + 1e-6)))

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
