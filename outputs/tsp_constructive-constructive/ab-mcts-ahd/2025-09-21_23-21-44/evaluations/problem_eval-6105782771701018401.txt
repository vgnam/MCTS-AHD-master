importance in future steps, using a combination of average distances to unvisited nodes and node degree.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        proximity_weight = 0.4 + (0.2 * (remaining_nodes / num_nodes))
        connection_weight = 0.3 + (0.2 * (remaining_nodes / num_nodes))
        potential_weight = 0.3

        # Path potential heuristic: average distance to remaining unvisited nodes
        path_potential = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Node degree as additional strategic factor
        node_degree = sum(1 for d in distance_matrix[node] if d > 0) - 1  # Exclude self

        score = (proximity_weight * distance_to_node +
                 connection_weight * distance_from_node +
                 potential_weight * path_potential) / (1 + 0.01 * node_degree)

        if score < min_score:
            min_score = score
            next_node = node

    if next_node is None and unvisited_nodes:
        next_node = max(unvisited_nodes, key=lambda x: sum(distance_matrix[x]))

    return next_node
