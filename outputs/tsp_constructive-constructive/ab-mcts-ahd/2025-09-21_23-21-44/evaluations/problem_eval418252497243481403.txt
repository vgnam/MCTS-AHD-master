def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    min_score = float('inf')
    num_unvisited = len(unvisited_nodes)
    num_nodes = len(distance_matrix)
    tour_progress = 1 - (num_unvisited / num_nodes)
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        proximity_factor = 0.7 - 0.4 * tour_progress
        local_connectivity = sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] < (sum(distance_matrix[node]) / num_nodes))
        path_diversity = (distance_to_node + distance_from_node) / (distance_matrix[current_node][destination_node] + 1e-6)
        score = (proximity_factor * distance_to_node + 0.3 * distance_from_node) * (1 + 0.2 * local_connectivity) * (1 - 0.15 * path_diversity)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
