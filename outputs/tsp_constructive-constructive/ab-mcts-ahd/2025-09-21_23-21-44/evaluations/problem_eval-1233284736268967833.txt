importance of immediate distance and destination distance based on the number of remaining unvisited nodes, favoring immediate distance in early stages and balancing both in later stages, while also incorporating a small random perturbation to avoid deterministic paths.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if remaining_nodes > 5:
            weight_immediate = 1.7
            weight_destination = 0.1
        else:
            weight_immediate = 1.3
            weight_destination = 0.5
        combined_score = weight_immediate * immediate_distance + weight_destination * destination_distance
        combined_score += 0.05 * np.random.rand() * combined_score
        if combined_score < min_score:
            min_score = combined_score
            next_node = node
    return next_node
