def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        if dest_dist == 0:
            score = current_dist
        else:
            path_savings = current_dist - dest_dist
            penalty = 1 + (current_dist / (dest_dist + 1e-10))
            score = (0.5 * current_dist + 0.3 * dest_dist) * penalty - 0.2 * path_savings + 0.1 * centrality_heuristic
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
