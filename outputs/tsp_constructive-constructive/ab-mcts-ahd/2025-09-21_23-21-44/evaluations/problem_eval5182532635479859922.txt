def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes <= 2:
            weight_dist = 0.9
            weight_ratio = 0.1
        else:
            weight_dist = 0.6 + 0.2 * (remaining_nodes / len(distance_matrix))
            weight_ratio = 0.4 - 0.2 * (remaining_nodes / len(distance_matrix))

        if dest_dist == 0:
            ratio = current_dist
        else:
            ratio = current_dist / dest_dist

        penalty = 0
        if len(unvisited_nodes) > 1:
            other_nodes = [n for n in unvisited_nodes if n != node]
            min_other_dist = min(distance_matrix[node][n] for n in other_nodes)
            penalty = min_other_dist * 0.1

        score = (weight_dist * current_dist) + (weight_ratio * ratio) + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
