def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 0.9 ** (1 / remaining_nodes) if remaining_nodes > 1 else 0.3
    lookahead_factor = 0.2 if remaining_nodes > 3 else 0.5
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead: estimate remaining path length if this node is selected
        remaining_path_estimate = sum(
            min(distance_matrix[node][other], distance_matrix[other][node])
            for other in unvisited_nodes if other != node
        ) if remaining_nodes > 1 else 0

        score = distance_to_current + time_decay * distance_to_destination + lookahead_factor * remaining_path_estimate
        if score < min_score:
            min_score = score
            next_node = node

    return next_node
