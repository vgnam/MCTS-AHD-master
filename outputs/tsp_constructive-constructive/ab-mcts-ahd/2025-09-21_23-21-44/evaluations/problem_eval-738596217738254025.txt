def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance_current = distance_matrix[current_node][node]
        distance_destination = distance_matrix[node][destination_node]
        normalized_current = distance_current / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))
        normalized_destination = distance_destination / (sum(distance_matrix[node]) / len(distance_matrix[node]))
        decay_factor = 1 / (1 + remaining_nodes)
        score = (normalized_current * (1 - decay_factor)) + (normalized_destination * decay_factor)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
