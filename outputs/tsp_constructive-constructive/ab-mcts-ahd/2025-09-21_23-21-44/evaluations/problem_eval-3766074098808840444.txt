def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_cost = float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes.copy()
    for node in remaining_nodes:
        immediate_cost = distance_matrix[current_node][node]
        centrality = sum(distance_matrix[node][other] for other in remaining_nodes if other != node) / max(1, len(remaining_nodes) - 1)
        weighted_cost = immediate_cost + (centrality * (1 - (len(remaining_nodes) / len(unvisited_nodes))))
        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            next_node = node
    return next_node
