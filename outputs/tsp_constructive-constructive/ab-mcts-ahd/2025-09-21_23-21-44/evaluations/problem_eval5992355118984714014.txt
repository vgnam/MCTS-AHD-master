def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    centrality_factor = 1 - (total_unvisited / (total_unvisited + 1))
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited

        if dest_dist == 0:
            score = current_dist
        else:
            projected_path_length = current_dist + dest_dist
            penalty = 1 + (current_dist / (projected_path_length + 1e-10))
            score = (centrality_factor * centrality_score) + ((1 - centrality_factor) * (current_dist / dest_dist) * penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
