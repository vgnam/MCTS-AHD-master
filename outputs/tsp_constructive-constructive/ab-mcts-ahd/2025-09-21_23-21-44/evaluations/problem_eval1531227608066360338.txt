def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_weighted_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]
        product = current_to_node * node_to_dest

        # Calculate centrality score (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)
        normalized_centrality = centrality / max(distance_matrix[node]) if max(distance_matrix[node]) != 0 else 1

        # Weighted score: product adjusted by normalized centrality
        weighted_score = product * (1 + normalized_centrality)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
