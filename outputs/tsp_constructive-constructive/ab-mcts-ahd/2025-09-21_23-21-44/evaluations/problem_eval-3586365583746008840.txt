def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        avg_connectivity = sum(distance_matrix[node]) / (num_nodes - 1)
        max_detour = max(distance_matrix[node]) - distance_matrix[node][destination_node]

        # Dynamic weights based on remaining path length and node density
        proximity_weight = 0.5 + 0.1 * (remaining_nodes / num_nodes)
        efficiency_weight = 0.5 - 0.1 * (remaining_nodes / num_nodes)
        connectivity_penalty = 0.2 * avg_connectivity
        detour_bonus = -0.1 * max_detour

        score = (proximity_weight * distance_to_node +
                efficiency_weight * distance_from_node +
                connectivity_penalty +
                detour_bonus)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
