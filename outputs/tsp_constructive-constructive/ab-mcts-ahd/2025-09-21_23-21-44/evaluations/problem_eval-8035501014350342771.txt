def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    mean_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    for node in unvisited_nodes:
        additive = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        multiplicative = distance_matrix[current_node][node] * distance_matrix[node][destination_node]
        normalized_additive = additive / (distance_matrix[current_node][node] + distance_matrix[node][destination_node] + 1e-10)
        normalized_multiplicative = multiplicative / (distance_matrix[current_node][node] * distance_matrix[node][destination_node] + 1e-10)
        weight = 0.7 if distance_matrix[current_node][destination_node] < mean_distance else 0.3
        score = weight * normalized_additive + (1 - weight) * normalized_multiplicative
        penalty = 1.0 + (multiplicative / (1e-10 + max(distance_matrix[current_node][node], distance_matrix[node][destination_node])))
        score *= penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
