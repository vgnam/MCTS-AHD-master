def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    total_estimated = sum(distance_matrix[current_node][node] + distance_matrix[node][destination_node] for node in unvisited_nodes)
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)

    # Dynamic weight factor using sigmoid function
    weight_factor = 1 / (1 + math.exp(-(num_unvisited / (num_unvisited + 1)) * (current_path_length / total_estimated)))

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        score = (weight_factor * immediate_distance) + ((1 - weight_factor) * potential_distance)

        # Additional penalty for nodes that are far from the current path's centroid
        if num_unvisited > 1:
            centroid = sum(unvisited_nodes) / num_unvisited
            distance_to_centroid = abs(node - centroid)
            score += 0.1 * distance_to_centroid

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
