def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    best_score = float('-inf')
    exploration_factor = 0.3  # Initial exploration weight
    iterations = len(unvisited_nodes)  # Simulate iteration count for decay
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        # Decaying exploration factor
        decayed_exploration = exploration_factor * (iterations / (iterations + 1))
        # Score with exploration
        score = -distance + 0.5 * (1 / (degree + 1)) + decayed_exploration * random.uniform(0, 1)
        if score > best_score:
            best_score = score
            next_node = node
    return next_node
