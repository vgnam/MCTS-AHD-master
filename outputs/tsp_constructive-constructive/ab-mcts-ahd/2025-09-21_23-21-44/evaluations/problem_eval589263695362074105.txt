def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_score = float('inf')
    next_node = None
    dynamic_weight = 0.4 + 0.2 * (len(unvisited_nodes) / len(distance_matrix))
    for node in unvisited_nodes:
        additive = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        multiplicative = distance_matrix[current_node][node] * distance_matrix[node][destination_node]
        normalized_additive = additive / (distance_matrix[current_node][node] + distance_matrix[node][destination_node] + 1e-10)
        normalized_multiplicative = multiplicative / (distance_matrix[current_node][node] * distance_matrix[node][destination_node] + 1e-10)
        penalty = 1 + 0.1 * (1 / (distance_matrix[current_node][node] + 1e-10))
        weighted_score = dynamic_weight * normalized_additive + (1 - dynamic_weight) * normalized_multiplicative
        weighted_score *= penalty
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
