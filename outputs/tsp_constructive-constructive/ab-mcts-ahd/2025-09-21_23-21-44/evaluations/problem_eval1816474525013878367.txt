def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    max_distance = max(max(row) for row in distance_matrix)
    min_distance = min(min(row) for row in distance_matrix)

    node_scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        normalized_immediate = (immediate_distance - min_distance) / (max_distance - min_distance + 1e-6)
        normalized_future = (future_distance - min_distance) / (max_distance - min_distance + 1e-6)

        weighted_score = (0.6 * normalized_immediate + 0.4 * normalized_future) * (1 - temperature)
        node_scores.append((node, weighted_score))

    probabilities = [score for _, score in node_scores]
    sum_prob = sum(probabilities)
    if sum_prob == 0:
        probabilities = [1.0 / len(probabilities) for _ in probabilities]

    normalized_probs = [p / sum_prob for p in probabilities]
    next_node = np.random.choice([node for node, _ in node_scores], p=normalized_probs)

    return next_node
