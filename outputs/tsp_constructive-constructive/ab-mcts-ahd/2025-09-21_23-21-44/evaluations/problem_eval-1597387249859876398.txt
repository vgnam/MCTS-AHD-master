def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]

        if remaining_nodes > num_nodes // 2:
            proximity_weight = 0.7
            efficiency_weight = 0.3
            centrality_weight = 0.1
        else:
            proximity_weight = 0.4
            efficiency_weight = 0.6
            centrality_weight = 0.2

        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        score = (proximity_weight * distance_to_node +
                 efficiency_weight * distance_from_node +
                 centrality_weight * centrality_heuristic)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
