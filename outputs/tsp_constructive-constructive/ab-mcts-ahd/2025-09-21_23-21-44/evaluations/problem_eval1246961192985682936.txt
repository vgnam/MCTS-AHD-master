def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.8 if remaining_nodes > 3 else 0.5
    node_scores = []
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        avg_cost = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                avg_cost += distance_matrix[node][other_node]
        avg_cost /= len(unvisited_nodes) if len(unvisited_nodes) > 1 else 1
        combined_cost = decay_factor * immediate_cost + (1 - decay_factor) * avg_cost
        node_scores.append((node, combined_cost))
    if remaining_nodes > 2:
        probabilities = [1 / (score + 1e-6) for (_, score) in node_scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = np.random.choice([node for (node, _) in node_scores], p=probabilities)
    else:
        next_node = min(node_scores, key=lambda x: x[1])[0]
    return next_node
