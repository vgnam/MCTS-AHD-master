def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    num_unvisited = len(unvisited_nodes)
    num_nodes = len(distance_matrix)
    node_scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][unvisited] for unvisited in unvisited_nodes) / num_unvisited
        degree_centrality = sum(1 for i in range(num_nodes) if distance_matrix[node][i] < distance_matrix[current_node][i]) / (num_nodes - 1)
        penalty = avg_distance_to_unvisited * (1 - degree_centrality)
        connectivity_reward = (sum(1 for i in range(num_nodes) if distance_matrix[node][i] < distance_matrix[current_node][i]) ** 1.5) / (num_nodes - 1)
        score = (0.4 * distance_to_node + 0.3 * distance_from_node + 0.2 * penalty) * (1 + 0.1 * connectivity_reward)
        node_scores.append((node, score))
    node_scores.sort(key=lambda x: x[1])
    if num_unvisited > num_nodes // 2:
        selected_node = node_scores[0][0]
    else:
        selected_node = node_scores[min(2, len(node_scores) - 1)][0]
    return next_node
