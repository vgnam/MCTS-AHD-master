def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    num_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        score = (0.6 * (immediate_distance / avg_unvisited_distance)) + (0.3 * (future_distance / avg_unvisited_distance)) + (0.1 * (centrality_heuristic / avg_unvisited_distance)) * (1 - weight_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
