def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    tour_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    proximity_weight = 0.7 - (0.4 * (tour_length / sum(sum(row) for row in distance_matrix)))
    centrality_weight = 0.3 + (0.4 * (tour_length / sum(sum(row) for row in distance_matrix)))
    min_weighted_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        if current_distance < 0.1 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]):
            continue
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        centrality = sum(d for d in distance_matrix[node] if d > 0)
        weighted_score = proximity_weight * current_distance + centrality_weight * (centrality / (degree + 1))
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
