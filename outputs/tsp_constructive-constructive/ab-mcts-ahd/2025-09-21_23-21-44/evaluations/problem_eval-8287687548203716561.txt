def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    base_immediate_weight = 1.7
    base_avg_weight = 0.3
    base_dest_weight = 0.1

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]

        avg_distance = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                avg_distance += distance_matrix[node][other_node]
        avg_distance /= len(unvisited_nodes) if len(unvisited_nodes) > 1 else 1

        destination_distance = distance_matrix[node][destination_node]

        remaining_nodes = len(unvisited_nodes)
        density_factor = 1 / (1 + remaining_nodes)
        proximity_factor = 1 / (1 + destination_distance)

        dynamic_avg_weight = base_avg_weight * (1 + density_factor)
        dynamic_dest_weight = base_dest_weight * (1 + proximity_factor)

        combined_score = (base_immediate_weight * immediate_distance +
                          dynamic_avg_weight * avg_distance +
                          dynamic_dest_weight * destination_distance)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
