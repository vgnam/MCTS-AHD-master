def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            score = current_dist
        else:
            # Dynamic penalty based on progress towards destination
            progress_ratio = (distance_matrix[current_node][destination_node] - dest_dist) / (distance_matrix[current_node][destination_node] + 1e-10)
            penalty = 1 + (1 - progress_ratio) * (total_unvisited / (total_unvisited + 1))
            # Centrality factor: nodes closer to other unvisited nodes are preferred
            centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1 + 1e-10)
            score = (current_dist / dest_dist) * penalty + (centrality / (current_dist + 1e-10))
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
