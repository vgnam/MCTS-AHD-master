def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Linear weight factor: starts at 0.7, decreases to 0.9 as nodes are visited
    remaining_nodes = len(unvisited_nodes)
    max_nodes = len(distance_matrix)
    weight_factor = 0.7 + 0.2 * (remaining_nodes / max_nodes)

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]
        score = (weight_factor * immediate_distance) + ((1 - weight_factor) * potential_distance)

        # Penalty for revisiting nodes (if applicable)
        if node == destination_node and remaining_nodes > 1:
            score += 1000  # Large penalty to avoid early return

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
