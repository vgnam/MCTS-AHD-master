def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Calculate average distance from current node to unvisited nodes
    total_dist = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_dist = total_dist / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight = 0.5 + 0.2 * (1 - remaining_nodes / (remaining_nodes + 1))  # Adjusts between 0.5 and 0.7

        # Penalty for nodes too far from current node
        penalty = max(0, (current_dist - avg_dist) / avg_dist) if avg_dist > 0 else 0

        if dest_dist == 0:
            ratio = current_dist
        else:
            ratio = current_dist / dest_dist

        score = weight * current_dist + (1 - weight) * ratio + 0.2 * penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
