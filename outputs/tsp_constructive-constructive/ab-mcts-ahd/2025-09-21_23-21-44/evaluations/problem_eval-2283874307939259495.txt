def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_nodes = len(distance_matrix)
    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1 - (total_unvisited / num_nodes)

    base_weight = 0.6 + 0.3 * progress_ratio
    centrality_weight = 0.1 + 0.2 * progress_ratio
    lookahead_weight = 0.1 * (1 - progress_ratio)

    min_score = float('inf')
    next_node = None
    best_lookahead = None

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)

        if total_unvisited > 2:
            lookahead_scores = []
            for candidate in unvisited_nodes:
                if candidate != node:
                    lookahead_scores.append(distance_matrix[node][candidate] + distance_matrix[candidate][destination_node])
            lookahead_heuristic = min(lookahead_scores) if lookahead_scores else 0
        else:
            lookahead_heuristic = 0

        score = (base_weight * distance_to_node +
                 (1 - base_weight - centrality_weight) * distance_from_node +
                 centrality_weight * centrality_heuristic +
                 lookahead_weight * lookahead_heuristic)

        if score < min_score:
            min_score = score
            next_node = node
            best_lookahead = lookahead_heuristic

    if next_node is None and unvisited_nodes:
        next_node = max(unvisited_nodes, key=lambda x: sum(distance_matrix[x]))

    return next_node
