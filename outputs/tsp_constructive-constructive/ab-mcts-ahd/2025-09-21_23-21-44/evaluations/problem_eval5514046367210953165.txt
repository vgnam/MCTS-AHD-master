def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 0.5 * (1 / (remaining_nodes + 0.1))  # Adjusted weight formula
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalize nodes that are too close to the destination early to avoid revisiting
        penalty = 0.2 if distance_to_destination < 0.3 * distance_matrix[current_node][destination_node] else 0
        score = distance_to_current + weight * distance_to_destination + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
