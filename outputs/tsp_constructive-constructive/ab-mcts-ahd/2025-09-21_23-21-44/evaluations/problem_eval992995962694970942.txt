def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if dest_dist == 0:
            score = current_dist
        else:
            projected_path = current_dist + dest_dist
            proximity_bonus = 1 / (1 + current_dist)  # Reward closer nodes
            direction_factor = (projected_path / (current_dist + 1e-10))**0.5  # Balance path direction

            # Dynamic weighting based on remaining path length
            remaining_nodes = len(unvisited_nodes)
            dynamic_weight = 1 + (remaining_nodes / (remaining_nodes + 10))  # Adjust based on remaining nodes

            score = (current_dist * dynamic_weight) + (dest_dist * (1 - proximity_bonus)) - direction_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
