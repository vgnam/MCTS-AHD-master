default to the destination when no unvisited nodes remain.

### New Algorithm Design Idea:
{The new algorithm combines distance prioritization with a refined degree-based adjustment to balance proximity and hub avoidance, ensuring the selected node is both close and not overly connected, while defaulting to the destination when no unvisited nodes remain.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    best_score = float('-inf')
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        score = -distance + 0.7 * (1 / (degree + 1))  # Increased degree weight
        if score > best_score:
            best_score = score
            next_node = node
    return next_node
