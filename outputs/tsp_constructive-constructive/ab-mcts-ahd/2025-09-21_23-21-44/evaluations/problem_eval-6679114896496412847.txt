def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    total_distance = distance_matrix[current_node][destination_node]
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if unvisited_nodes else 0
        dynamic_weight = 0.5 + 0.5 * (distance_to_destination / total_distance)
        score = (distance_to_current + dynamic_weight * distance_to_destination) + (0.2 * centrality_penalty)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
