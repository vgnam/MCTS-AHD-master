def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if dest_dist == 0:
            ratio = current_dist
        else:
            ratio = current_dist / dest_dist

        # Calculate centrality as the average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Weighted score: balance ratio and centrality with dynamic weights
        weight_ratio = 0.6 if num_unvisited > 2 else 0.8
        weight_centrality = 0.4 if num_unvisited > 2 else 0.2
        score = weight_ratio * ratio + weight_centrality * (1 / (centrality + 1e-6))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
