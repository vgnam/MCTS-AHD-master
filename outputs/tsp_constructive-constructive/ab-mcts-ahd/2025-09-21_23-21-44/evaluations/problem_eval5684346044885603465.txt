def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate average distances for normalization
    avg_distance_to_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    avg_distance_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function based on remaining nodes
        remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Avoid division by zero
        dynamic_weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

        # Penalize outliers in distance metrics
        penalty = 0
        if distance_to_current > avg_distance_to_current * 1.5:
            penalty += 0.2 * distance_to_current
        if distance_to_destination > avg_distance_to_destination * 1.5:
            penalty += 0.2 * distance_to_destination

        # Compute score with dynamic weight and penalty
        score = distance_to_current + dynamic_weight * distance_to_destination + penalty
        if score < min_score:
            min_score = score
            next_node = node

    return next_node
