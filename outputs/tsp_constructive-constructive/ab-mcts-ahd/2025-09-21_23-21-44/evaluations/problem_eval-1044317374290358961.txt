def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    avg_unvisited_dist = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        penalty = 1 + (immediate_distance / (avg_unvisited_dist + 1e-10))
        score = (0.5 * immediate_distance + 0.3 * (1 / (dest_dist + 1e-10)) + 0.2 * centrality_heuristic) * penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
