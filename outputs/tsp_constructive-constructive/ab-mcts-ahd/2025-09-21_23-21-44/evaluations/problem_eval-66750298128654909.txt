def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    next_node = None
    best_score = float('-inf')
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    distance_weight = remaining_nodes / total_nodes  # Dynamic weight based on progress
    degree_weight = 1 - distance_weight  # Complementary weight
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        normalized_degree = degree / (total_nodes - 1)  # Normalize degree
        score = -distance_weight * distance + degree_weight * (1 / (normalized_degree + 1))
        if score > best_score:
            best_score = score
            next_node = node
    return next_node
