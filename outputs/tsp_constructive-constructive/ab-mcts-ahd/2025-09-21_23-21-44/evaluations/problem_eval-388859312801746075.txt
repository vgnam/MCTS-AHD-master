def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        destination_distance = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        weighted_score = 0.6 * (0.5 * current_distance - 0.3 * destination_distance + 0.2 * centrality_heuristic) + 0.4 * future_distance
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
