def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            score = current_dist
        else:
            proximity_weight = 0.5 + 0.4 * (remaining_nodes / (remaining_nodes + 1))
            efficiency_weight = 0.5 - 0.4 * (remaining_nodes / (remaining_nodes + 1))
            penalty = 0.2 * (dest_dist / max(distance_matrix[node][n] for n in unvisited_nodes if n != node)) if unvisited_nodes else 0
            score = (proximity_weight * current_dist + efficiency_weight * (current_dist + dest_dist)) * (1 + penalty)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
