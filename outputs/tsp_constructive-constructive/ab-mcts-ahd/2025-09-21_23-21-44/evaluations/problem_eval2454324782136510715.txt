def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            ratio = current_dist
        else:
            ratio = current_dist / dest_dist
        # Calculate variance of distances to other unvisited nodes
        distances_to_unvisited = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        if not distances_to_unvisited:
            variance = 0
        else:
            avg_dist = sum(distances_to_unvisited) / len(distances_to_unvisited)
            variance = sum((d - avg_dist) ** 2 for d in distances_to_unvisited) / len(distances_to_unvisited)
        # Dynamic weight factor based on ratio and variance
        weight = 1 + (1 - ratio) * (1 + variance)
        score = current_dist * weight + ratio
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
