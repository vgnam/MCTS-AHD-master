def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    num_nodes = len(distance_matrix)
    exploration_phase = num_unvisited / num_nodes

    scores = []
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][unvisited] for unvisited in unvisited_nodes) / num_unvisited
        connectivity_potential = (sum(distance_matrix[node]) / (num_nodes - 1)) ** 0.5
        normalized_score = (0.4 * distance_to_node + 0.3 * distance_from_node + 0.3 * avg_distance_to_unvisited) * (1 + 0.2 * connectivity_potential)
        exploration_bias = exploration_phase ** 2
        final_score = normalized_score * (1 - exploration_bias) + (1 / normalized_score) * exploration_bias
        scores.append((node, final_score))

    scores.sort(key=lambda x: x[1])
    return next_node
