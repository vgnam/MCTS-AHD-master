importance of immediate versus long-term proximity based on the remaining unvisited nodes, using a normalized score that combines the product of distances with a heuristic factor derived from the number of unvisited nodes and their average distance to the destination.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / num_unvisited if num_unvisited > 0 else 0
    for node in unvisited_nodes:
        distance_current = distance_matrix[current_node][node]
        distance_destination = distance_matrix[node][destination_node]
        heuristic_factor = (distance_destination / avg_distance) if avg_distance > 0 else 1
        score = (distance_current * distance_destination) * heuristic_factor
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
