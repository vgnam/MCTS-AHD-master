def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes
    weight_factor = remaining_ratio * 0.6 + 0.4

    min_score = float('inf')
    next_node = None

    current_centrality = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        potential_distance = distance_matrix[node][destination_node]

        node_centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        centrality_factor = 1 - (abs(node_centrality - current_centrality) / max(current_centrality, 1))

        score = (weight_factor * immediate_distance) + \
                ((1 - weight_factor) * potential_distance) * \
                (0.5 + 0.5 * centrality_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
