def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    total_nodes = num_nodes - 1  # excluding the current node
    proximity_weight = 0.7 * (remaining_nodes / total_nodes) + 0.3
    centrality_weight = 0.1 * (1 - remaining_nodes / total_nodes)
    return_weight = 0.4 * (1 - remaining_nodes / total_nodes) + 0.6
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        score = (proximity_weight * distance_to_node +
                 return_weight * distance_from_node +
                 centrality_weight * centrality_heuristic)
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
