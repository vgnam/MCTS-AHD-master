def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    n = len(distance_matrix)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / (n - 1)

        # Lookahead factor: evaluate potential impact on future segments
        lookahead = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                via_node_dist = distance_matrix[node][other_node] + distance_matrix[other_node][destination_node]
                direct_dist = distance_matrix[node][destination_node]
                lookahead += max(0, direct_dist - via_node_dist)  # Penalize if detour

        # Dynamic weight adjustment
        weight_proximity = 0.5 + 0.2 * (1 - centrality / max(1, sum(distance_matrix[node])))
        weight_centrality = 0.3 + 0.2 * (centrality / max(1, sum(distance_matrix[node])))
        weight_lookahead = 0.2

        score = (weight_proximity * current_dist +
                 weight_centrality * centrality +
                 weight_lookahead * lookahead)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
