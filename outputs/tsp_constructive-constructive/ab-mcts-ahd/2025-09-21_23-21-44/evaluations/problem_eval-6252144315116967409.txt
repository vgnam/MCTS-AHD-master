def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 1.0 / (1 + len(unvisited_nodes))
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    novelty_factor = sum(distance_matrix[node][current_node] for node in unvisited_nodes) / len(unvisited_nodes)

    scores = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        novelty_score = (distance_matrix[current_node][node] - novelty_factor) ** 2
        combined_score = immediate_distance + future_distance + novelty_score
        scores.append((combined_score, node))

    # Apply softmax with temperature to get probabilities
    exp_scores = [math.exp(-score / temperature) for score, _ in scores]
    sum_exp = sum(exp_scores)
    probabilities = [exp_score / sum_exp for exp_score in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([node for _, node in scores], weights=probabilities, k=1)[0]
    return next_node
