def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    max_unvisited_distance = max(distance_matrix[node][destination_node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]

        # Dynamic weighting based on proximity to destination
        proximity_factor = future_distance / max_unvisited_distance
        weight_immediate = 0.5 + 0.5 * (1 - proximity_factor)
        weight_future = 0.5 * proximity_factor

        # Penalty for outliers
        if future_distance > 1.5 * avg_unvisited_distance:
            penalty = 1.2
        else:
            penalty = 1.0

        total_score = (immediate_distance * weight_immediate + future_distance * weight_future) * penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
