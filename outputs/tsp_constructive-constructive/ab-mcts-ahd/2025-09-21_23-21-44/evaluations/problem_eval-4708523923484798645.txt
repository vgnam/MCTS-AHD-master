def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight_immediate = 1.7 * (remaining_nodes / (remaining_nodes + 1)) + 0.1
    dynamic_weight_avg = 0.3 * (1 / (remaining_nodes + 1)) + 0.1
    dynamic_weight_destination = 0.1 * (remaining_nodes / (remaining_nodes + 1)) + 0.1

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
        avg_distance /= len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1
        destination_distance = distance_matrix[node][destination_node]

        combined_score = (dynamic_weight_immediate * immediate_distance +
                          dynamic_weight_avg * avg_distance +
                          dynamic_weight_destination * destination_distance)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
