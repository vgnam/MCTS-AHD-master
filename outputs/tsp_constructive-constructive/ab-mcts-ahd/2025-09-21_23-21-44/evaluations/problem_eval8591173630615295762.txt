def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    dynamic_weight = 0.5 / (1 + avg_distance)  # Normalize weight by average distance

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        score = -distance + dynamic_weight * (1 / (degree + 1)) + random.uniform(0, 0.1)  # Add small randomness
        if score > best_score:
            best_score = score
            next_node = node

    return next_node
