def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    weight_current = 0.6 * (num_unvisited / (num_unvisited + 1))
    weight_future = 0.4 * (1 / (num_unvisited + 1))

    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if num_unvisited > 1 else 0
        weighted_score = weight_current * current_distance + weight_future * future_distance
        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1])
    top_candidates = candidates[:min(3, len(candidates))]
    probabilities = [0.7 ** i for i in range(len(top_candidates))]
    probabilities = [p / sum(probabilities) for p in probabilities]
    next_node = random.choices([c[0] for c in top_candidates], weights=probabilities)[0]

    return next_node
