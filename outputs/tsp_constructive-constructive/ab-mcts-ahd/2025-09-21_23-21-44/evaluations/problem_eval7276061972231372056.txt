def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    local_density = len(unvisited_nodes) / sum(distance_matrix[current_node][node] for node in unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        weight = 1 / (1 + math.exp(-local_density + 2))
        total_score = (1 - weight) * immediate_distance + weight * future_distance + 0.3 * centrality_penalty

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
