def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    visited_nodes = set(range(num_nodes)) - set(unvisited_nodes)
    recency_penalty = 0.2

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        popularity = sum(distance_matrix[node]) / num_nodes

        recency_factor = 1.0
        if node in visited_nodes:
            recency_factor = 1.0 + recency_penalty * (len(visited_nodes) - list(visited_nodes).index(node))

        score = (0.5 * distance_to_node + 0.3 * distance_from_node + 0.1 * centrality_heuristic + 0.1 * popularity) * recency_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
