def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    total_unvisited = len(unvisited_nodes)
    path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node in unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        normalized_degree = degree / (total_unvisited + 1)  # Normalize to avoid bias
        dynamic_weight = 0.5 * (1 - path_length / sum(sum(row) for row in distance_matrix))  # Weight decreases with path length

        score = -distance + dynamic_weight * (1 / (normalized_degree + 1)) + 0.01 * random.random()  # Add small randomness

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
