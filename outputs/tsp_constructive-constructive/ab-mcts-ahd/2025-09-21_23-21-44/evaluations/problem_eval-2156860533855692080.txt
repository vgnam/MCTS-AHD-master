importance of immediate distance, connectivity, and destination distance based on the remaining path length and node density, ensuring a balance between local optimization and global connectivity, while incorporating a penalty for revisiting nodes to avoid cycles.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    remaining_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited if num_unvisited > 0 else 0

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        connectivity_score = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node) / (num_unvisited - 1) if num_unvisited > 1 else 0
        destination_distance = distance_matrix[node][destination_node]

        dynamic_weight_immediate = 1.5 * (1 - 0.2 * (remaining_path_length / sum(sum(row) for row in distance_matrix) / len(distance_matrix)))
        dynamic_weight_connectivity = 0.5 * (0.5 + 0.5 * (num_unvisited / len(distance_matrix)))
        dynamic_weight_destination = 0.2 * (0.5 + 0.5 * (destination_distance / sum(distance_matrix[node])))

        combined_score = (dynamic_weight_immediate * immediate_distance +
                          dynamic_weight_connectivity * connectivity_score +
                          dynamic_weight_destination * destination_distance)

        penalty = 1.0 if node in unvisited_nodes else 1.2
        combined_score *= penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
