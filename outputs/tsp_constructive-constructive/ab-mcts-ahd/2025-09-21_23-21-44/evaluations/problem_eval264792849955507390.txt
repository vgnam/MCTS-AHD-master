def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalized temperature
    candidates = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        weighted_score = (0.6 + 0.4 * temperature) * current_distance + (0.4 - 0.4 * temperature) * future_distance
        candidates.append((node, weighted_score))

    candidates.sort(key=lambda x: x[1])
    if random.random() < temperature:  # Probabilistic selection to escape local optima
        selected_index = min(len(candidates) - 1, int(temperature * len(candidates)))
        next_node = candidates[selected_index][0]
    else:
        next_node = candidates[0][0]

    return next_node
