def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            score = current_dist
        else:
            # Novel scoring mechanism: balance immediate and projected distances with a heuristic lookahead
            projected_path = current_dist + dest_dist
            penalty = 1 + (current_dist / (projected_path + 1e-10)) ** 2  # Quadratic penalty for longer immediate steps
            heuristic_lookahead = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
            score = (current_dist / dest_dist) * penalty + heuristic_lookahead * 0.3  # Weighted combination of factors
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
