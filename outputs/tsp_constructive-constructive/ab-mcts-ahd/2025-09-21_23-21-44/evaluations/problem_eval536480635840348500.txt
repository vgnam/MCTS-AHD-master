def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            score = current_dist
        else:
            # Dynamic weighting: favor nodes that reduce path length more
            projected_path_length = current_dist + dest_dist
            penalty = 1 + (current_dist / (projected_path_length + 1e-10))  # Avoid division by zero
            score = (current_dist / dest_dist) * penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
