def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    proximity_factor = 0.1 + 0.9 * (len(unvisited_nodes) / len(distance_matrix))
    immediate_weight = 0.5 + 0.5 * proximity_factor
    future_weight = 1 - immediate_weight

    min_score = float('inf')
    next_node = None
    avg_unvisited_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        normalized_immediate = immediate_distance / avg_unvisited_distance
        normalized_future = future_distance / avg_unvisited_distance

        total_score = immediate_weight * normalized_immediate + future_weight * normalized_future

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
