def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    num_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)
        dynamic_weight = 1.0 - (0.2 * (remaining_nodes / num_nodes))
        proximity_weight = 0.5 + (0.3 * dynamic_weight)
        efficiency_weight = 0.5 - (0.3 * dynamic_weight)
        centrality_weight = 0.2
        penalty = 0.1 * (num_nodes - remaining_nodes) if node in unvisited_nodes else 0.0
        score = (proximity_weight * distance_to_node + efficiency_weight * distance_from_node) + (centrality_weight * centrality_heuristic) + penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
