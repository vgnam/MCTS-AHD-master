def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if total_unvisited > 1 else 0
        dynamic_weight = 1 / (1 + math.exp(-(total_unvisited - len(unvisited_nodes) + 1)))
        weighted_score = dynamic_weight * current_distance + (1 - dynamic_weight) * future_distance
        weighted_score *= (1 + 0.1 * (len(unvisited_nodes) - (total_unvisited - 1)))
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
