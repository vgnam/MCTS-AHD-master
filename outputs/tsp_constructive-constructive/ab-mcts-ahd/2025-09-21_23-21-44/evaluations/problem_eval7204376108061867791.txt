def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    # Dynamic weight adjustment using sigmoid function
    weight_immediate = 1.5 + 0.5 * (1 / (1 + math.exp(-10 * (progress_ratio - 0.5))))
    weight_destination = 0.3 + 0.2 * (1 / (1 + math.exp(10 * (progress_ratio - 0.5))))

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Lookahead mechanism: consider impact on potential future paths
        lookahead_score = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                lookahead_score += distance_matrix[node][other_node] * 0.1

        combined_score = (weight_immediate * immediate_distance +
                         weight_destination * destination_distance +
                         lookahead_score)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
