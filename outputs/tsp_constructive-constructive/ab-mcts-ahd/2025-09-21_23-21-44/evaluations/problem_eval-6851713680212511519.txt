def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_distance = 1 / (1 + math.exp(5 * (visited_ratio - 0.5)))
    weight_centrality = 1 - weight_distance

    min_weighted_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        centrality = sum(d for d in distance_matrix[node] if d > 0)
        centrality_penalty = (centrality / (degree + 1)) * (1 + 0.1 * (degree - 1))

        weighted_score = (weight_distance * current_distance) + (weight_centrality * centrality_penalty)

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
