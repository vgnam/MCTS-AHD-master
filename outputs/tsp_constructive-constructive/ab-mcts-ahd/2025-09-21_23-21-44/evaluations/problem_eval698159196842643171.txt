def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_weighted_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        additive = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        multiplicative = distance_matrix[current_node][node] * distance_matrix[node][destination_node]
        normalized_additive = additive / (distance_matrix[current_node][node] + distance_matrix[node][destination_node] + 1e-10)
        normalized_multiplicative = multiplicative / (distance_matrix[current_node][node] * distance_matrix[node][destination_node] + 1e-10)
        weighted_score = 0.3 * normalized_additive + 0.7 * normalized_multiplicative
        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node
    return next_node
