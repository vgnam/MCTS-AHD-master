def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_combined_cost = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        centrality = 0
        variance = 0
        for other_node in unvisited_nodes:
            centrality += distance_matrix[node][other_node]
        centrality /= len(unvisited_nodes)
        for other_node in unvisited_nodes:
            variance += (distance_matrix[node][other_node] - centrality) ** 2
        variance = (variance / len(unvisited_nodes)) ** 0.5 if len(unvisited_nodes) > 1 else 0
        weight = 0.9 if remaining_nodes > 2 else 0.7
        diversity_factor = 1 / (1 + variance)
        combined_cost = (weight * immediate_cost + (1 - weight) * centrality) * diversity_factor
        if combined_cost < min_combined_cost:
            min_combined_cost = combined_cost
            next_node = node
    return next_node
