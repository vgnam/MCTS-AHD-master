def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if dest_dist == 0:
            score = current_dist
        else:
            # Dynamic weights based on remaining nodes
            weight_short = 0.5 + 0.2 * (remaining_nodes / (remaining_nodes + 1))
            weight_long = 1.0 - weight_short
            # Penalty for extreme distances
            penalty = 0.0
            if current_dist > 2 * distance_matrix[current_node][destination_node]:
                penalty += 0.5
            if dest_dist > 2 * distance_matrix[current_node][destination_node]:
                penalty += 0.5
            score = weight_short * (current_dist / dest_dist) + weight_long * (current_dist + dest_dist) + penalty
        if score < min_score:
            min_score = score
            next_node = node
    return next_node
