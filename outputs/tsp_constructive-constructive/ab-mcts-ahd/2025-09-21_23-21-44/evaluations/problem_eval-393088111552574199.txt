def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    tour_progress = (total_nodes - len(unvisited_nodes)) / total_nodes  # Normalized progress (0 to 1)
    weight_factor = 1 / (1 + math.exp(-10 * (tour_progress - 0.5)))  # Sigmoid to transition weight

    next_node = None
    best_score = float('-inf')
    node_visit_counts = {node: 0 for node in unvisited_nodes}  # Track revisits (simplified)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        revisit_penalty = node_visit_counts[node] * 0.3  # Penalize revisits

        # Dynamic weighting: prioritize distance early, degree late
        score = -distance * (1 - weight_factor) + 0.5 * (1 / (degree + 1)) * weight_factor - revisit_penalty
        if score > best_score:
            best_score = score
            next_node = node

    # Update visit counts (simplified)
    if next_node in node_visit_counts:
        node_visit_counts[next_node] += 1

    return next_node
