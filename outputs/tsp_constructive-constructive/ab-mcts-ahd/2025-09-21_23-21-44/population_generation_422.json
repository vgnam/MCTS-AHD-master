[
     {
          "algorithm": "The algorithm prioritizes immediate distance to the next node (weighted by the ratio of unvisited nodes) while penalizing proximity to the destination node (weighted by -0.5), balancing short-term and long-term objectives. The weight factor adjusts dynamically based on remaining unvisited nodes, favoring closer nodes early on but gradually emphasizing destination proximity.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the dynamic weight adjustment from No.2, using a weight factor that balances immediate distance (weighted by unvisited nodes ratio) and penalizes long-term proximity to the destination (weighted by -0.5).",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = (weight_factor * immediate_distance) - (0.5 * destination_distance)\n\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n\n    return next_node",
          "objective": 6.4981,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing immediate distance (weighted 1.0) while slightly penalizing long-term proximity to the destination (weighted -0.5), balancing short-term efficiency with long-term path optimization. The function iterates through unvisited nodes, computes a combined score for each, and chooses the node with the lowest score, ensuring a trade-off between immediate distance and overall path efficiency.",
          "thought": "The new algorithm selects the next node by prioritizing immediate distance from the current node (weighted 1.0) and penalizing long-term proximity to the destination (weighted -0.5), encouraging exploration of intermediate nodes that may lead to shorter overall paths.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = immediate_distance - 0.5 * destination_distance\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.5107,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines a dynamic weight factor (based on remaining unvisited nodes) with a balanced scoring mechanism, prioritizing immediate distance (weighted by `weight_factor`), penalizing destination distance (weighted by `-0.5 * weight_factor`), and incorporating centrality (weighted by `0.2 * (1 - weight_factor)`). The weight factor adjusts dynamically, favoring immediate distance early and balancing with centrality and destination distance as the tour progresses.",
          "thought": "The new algorithm combines the dynamic weight factor from No.2 with the balanced scoring mechanism of No.1, where the weight factor adjusts based on the number of unvisited nodes, and the score prioritizes immediate distance (weighted by weight_factor), penalizes destination distance (weighted by -0.5 * weight_factor), and incorporates centrality (weighted by 0.2 * (1 - weight_factor)).",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    weight_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)\n    min_score = float('inf')\n    next_node = None\n    num_nodes = len(distance_matrix)\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)\n        score = (weight_factor * immediate_distance) - (0.5 * weight_factor * destination_distance) + (0.2 * (1 - weight_factor) * centrality_heuristic)\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.53942,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance (highest priority, weight 1), destination proximity (medium priority, weight -0.5), and node centrality (lowest priority, weight 0.2). It prioritizes nodes close to the current node while penalizing those far from the destination, and slightly favors nodes with lower average distances to all other nodes. The scoring mechanism ensures a trade-off between immediate gains and long-term efficiency.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.1 with the balanced multi-factor scoring of No.2, adding a centrality component (weighted 0.2) to further optimize path efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    num_nodes = len(distance_matrix)\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_heuristic = sum(distance_matrix[node]) / (num_nodes - 1)\n        score = immediate_distance - 0.5 * destination_distance + 0.2 * centrality_heuristic\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.6208,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes selecting the next node by balancing immediate distance to the current node and projected distance to the destination, while penalizing nodes that are too far from the current position. Nodes with lower scores (computed as a weighted ratio of current distance to destination distance with a penalty factor) are preferred, ensuring a trade-off between immediate and long-term path efficiency. The penalty factor dynamically adjusts the ratio based on the current and projected distances, favoring nodes that reduce the overall path length more effectively.",
          "thought": "The new algorithm modifies the original by incorporating a dynamic weighting mechanism that adjusts the ratio calculation based on the node's potential to reduce the overall path length, using a combination of immediate and projected future distances, and introduces a penalty factor for nodes that are too far from the current position.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            score = current_dist\n        else:\n            # Dynamic weighting: favor nodes that reduce path length more\n            projected_path_length = current_dist + dest_dist\n            penalty = 1 + (current_dist / (projected_path_length + 1e-10))  # Avoid division by zero\n            score = (current_dist / dest_dist) * penalty\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.66389,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance from the current node and long-term efficiency (ratio of current distance to destination distance), prioritizing nodes with lower combined scores. It iterates through unvisited nodes, computes a score as the sum of direct distance and the ratio, and selects the node with the minimum score. The ratio ensures long-term efficiency is considered, while the direct distance ensures immediate proximity is prioritized.",
          "thought": "The new algorithm combines the ratio-based selection of No.1 with the weighted scoring approach of No.2. It computes a score as the sum of the distance to the current node and a weighted ratio of the distance to the current node over the distance to the destination, prioritizing nodes that balance immediate proximity and long-term efficiency.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        score = current_dist + ratio\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.67121,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance (weight 1.0) and proximity to the destination (weight -0.3), prioritizing shorter immediate distances while slightly penalizing nodes farther from the destination. It iterates through unvisited nodes, computes a combined score, and chooses the node with the lowest score.",
          "thought": "The new algorithm combines the immediate distance prioritization from No.2 with the long-term proximity penalty from No.1, using weights of 1.0 for immediate distance and -0.3 for destination distance to balance short-term efficiency and long-term optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        combined_score = immediate_distance - 0.3 * destination_distance\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n    return next_node",
          "objective": 6.71255,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node to visit by evaluating a weighted combination of the immediate distance from the current node and the ratio of that distance to the distance to the destination node, with adjustable weights (default: 60% for immediate distance, 40% for the ratio). It prioritizes nodes that offer a good balance between proximity to the current node and progress toward the destination, avoiding division by zero for the destination distance. The structure iteratively compares scores to find the optimal next node.",
          "thought": "The new algorithm prioritizes nodes based on a weighted combination of immediate distance and the ratio of current distance to destination distance, with adjustable weights to balance exploration and exploitation, while the original algorithm uses a simple sum of these two components.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, weight_current=0.6, weight_ratio=0.4):\n    if not unvisited_nodes:\n        return destination_node\n    min_score = float('inf')\n    next_node = None\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        if dest_dist == 0:\n            ratio = current_dist\n        else:\n            ratio = current_dist / dest_dist\n        score = weight_current * current_dist + weight_ratio * ratio\n        if score < min_score:\n            min_score = score\n            next_node = node\n    return next_node",
          "objective": 6.75,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances immediate distance prioritization with probabilistic selection based on node centrality, using a centrality factor that increases as unvisited nodes decrease. It evaluates each unvisited node by combining the immediate distance from the current node, the average distance to other unvisited nodes (centrality), and the distance to the destination, with the centrality term gaining higher weight as the tour progresses. The node with the lowest combined score is selected, favoring centrality more in later stages while still considering immediate distance and destination proximity.",
          "thought": "The new algorithm introduces a dynamic priority mechanism that combines immediate distance prioritization with a probabilistic selection based on node centrality and distance, where the selection probability is influenced by both the immediate distance and the node's potential to minimize the total tour length, with the centrality factor increasing as the number of unvisited nodes decreases.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    centrality_factor = 1 - (total_unvisited / (total_unvisited + 1))\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        immediate_distance = distance_matrix[current_node][node]\n        destination_distance = distance_matrix[node][destination_node]\n        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited\n        combined_score = (centrality_factor * centrality_score) + ((1 - centrality_factor) * immediate_distance) - (0.3 * destination_distance)\n\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n\n    return next_node",
          "objective": 6.75679,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node in TSP by balancing **distance minimization**, **centrality prioritization**, and **revisit reduction**. It assigns the highest priority to minimizing distance (`-distance`), followed by favoring central nodes (`0.3 * centrality`), and penalizing high-degree nodes (`-0.2 * (degree / total_nodes)`). The score equation ensures a trade-off between proximity, graph centrality, and hub avoidance.",
          "thought": "The new algorithm modifies the scoring mechanism to incorporate both distance and node centrality (average distance to other nodes) while penalizing nodes with high revisit potential, using the score equation: `-distance + 0.3 * centrality - 0.2 * (degree / total_nodes)`. Centrality is calculated as the average distance to other nodes to prioritize nodes that are more central in the graph, while the degree term penalizes hubs to reduce revisits.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    next_node = None\n    best_score = float('-inf')\n    total_nodes = len(distance_matrix)\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        centrality = sum(d for d in distance_matrix[node] if d > 0) / degree if degree > 0 else 0\n        score = -distance + 0.3 * centrality - 0.2 * (degree / total_nodes)\n        if score > best_score:\n            best_score = score\n            next_node = node\n    return next_node",
          "objective": 6.76045,
          "other_inf": null
     }
]