def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_possible_pairs = remaining_nodes * (remaining_nodes - 1) if remaining_nodes > 1 else 1

    for node in unvisited_nodes:
        if node == destination_node:
            return node

        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        # Time-decaying weight based on remaining nodes and potential node connections
        decay_factor = 1.0 / (1.0 + math.exp(-0.1 * (remaining_nodes - 5)))
        connection_strength = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / total_possible_pairs

        combined_score = current_to_node + decay_factor * (0.7 * node_to_dest + 0.3 * connection_strength)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
