def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        if node == destination_node:
            return node

        current_to_node = distance_matrix[current_node][node]
        node_to_dest = distance_matrix[node][destination_node]

        if node_to_dest == 0:
            score = current_to_node
        else:
            weight = 1 - (remaining_nodes / (remaining_nodes + 1))  # Dynamic weight based on remaining nodes
            normalized_current = current_to_node / (distance_matrix[current_node][destination_node] + 1e-6)
            normalized_dest = node_to_dest / (distance_matrix[current_node][destination_node] + 1e-6)
            score = (weight * normalized_current) + ((1 - weight) * normalized_dest)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
