def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, recent_visits=None, alpha=0.2, beta=0.5):
    if not unvisited_nodes:
        return destination_node
    if recent_visits is None:
        recent_visits = set()
    def combined_score(node):
        local_distance = distance_matrix[current_node][node]
        global_factor = 0
        dynamic_weight = alpha + (1 - alpha) * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(recent_visits)))
        if len(unvisited_nodes) > 1:
            for other_node in unvisited_nodes:
                if other_node != node:
                    global_factor += distance_matrix[node][other_node]
            global_factor /= (len(unvisited_nodes) - 1)
        penalty = sum(distance_matrix[node][r] for r in recent_visits) / (len(recent_visits) + 1) if recent_visits else 0
        return local_distance + dynamic_weight * global_factor - beta * penalty
    next_node = min(unvisited_nodes, key=lambda node: combined_score(node))
    recent_visits.add(next_node)
    return next_node
