def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    average_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)

    def dynamic_score(node):
        local_distance = distance_matrix[current_node][node]
        destination_proximity = distance_matrix[node][destination_node]
        normalized_penalty = (0.4 * (destination_proximity ** 2)) / (remaining_nodes ** 0.5)
        dynamic_balance = 0.3 * (distance_matrix[current_node][node] - average_distance)
        return local_distance * (1 + normalized_penalty) + dynamic_balance

    next_node = min(unvisited_nodes, key=lambda node: dynamic_score(node))
    return next_node
