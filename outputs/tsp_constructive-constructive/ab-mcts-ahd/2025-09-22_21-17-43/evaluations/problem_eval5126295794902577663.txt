def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    local_weight = 0.7 if remaining_nodes > 2 else 0.3
    destination_weight = 0.3 if remaining_nodes > 2 else 0.7
    def adjusted_score(node):
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        penalty = 0.4 * destination_distance if remaining_nodes > 1 else 0.8 * destination_distance
        return local_weight * local_distance + destination_weight * destination_distance + penalty
    next_node = min(unvisited_nodes, key=lambda node: adjusted_score(node))
    return next_node
