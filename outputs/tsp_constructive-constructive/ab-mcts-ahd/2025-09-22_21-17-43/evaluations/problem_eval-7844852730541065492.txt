def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def dynamic_weighted_score(node):
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        total_distance = sum(distance_matrix[current_node][n] for n in unvisited_nodes) if unvisited_nodes else 0
        progress_ratio = (1 - (destination_distance / (total_distance + 1e-6))) if total_distance > 0 else 0
        local_weight = 0.3 + 0.4 * (1 / (1 + math.exp(-10 * (progress_ratio - 0.5))))
        destination_weight = 1 - local_weight
        return local_weight * local_distance + destination_weight * destination_distance
    next_node = min(unvisited_nodes, key=lambda node: dynamic_weighted_score(node))
    return next_node
