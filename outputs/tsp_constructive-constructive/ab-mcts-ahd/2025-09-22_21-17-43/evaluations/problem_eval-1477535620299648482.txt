def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def adjusted_score(node):
        local_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        exploration_factor = 0.3 * (remaining_distance / (distance_matrix[current_node][destination_node] + 1e-6))
        density_penalty = 0.2 * len([n for n in unvisited_nodes if distance_matrix[node][n] < 0.5 * distance_matrix[current_node][destination_node]])
        return local_distance + exploration_factor * remaining_distance - density_penalty

    next_node = min(unvisited_nodes, key=lambda node: adjusted_score(node))
    return next_node
