def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def adjusted_score(node):
        local_distance = distance_matrix[current_node][node]
        penalty = 0.7 * distance_matrix[node][destination_node]
        neighborhood_bonus = 0.3 * min(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)
        return local_distance + penalty - neighborhood_bonus
    next_node = min(unvisited_nodes, key=lambda node: adjusted_score(node))
    return next_node
