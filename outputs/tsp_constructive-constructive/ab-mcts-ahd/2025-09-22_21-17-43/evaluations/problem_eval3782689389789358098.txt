def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def dynamic_score(node):
        progress = 1 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))
        local_weight = 0.5 + 0.2 * progress
        destination_weight = 0.5 - 0.2 * progress
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        penalty = 0.3 * destination_distance if destination_distance < 0.8 * distance_matrix[current_node][destination_node] else 0
        return local_weight * local_distance + destination_weight * destination_distance + penalty
    next_node = min(unvisited_nodes, key=lambda node: dynamic_score(node))
    return next_node
