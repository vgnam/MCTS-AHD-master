def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    def adjusted_score(node):
        local_distance = distance_matrix[current_node][node]
        progress_penalty = (total_unvisited / (total_unvisited + 1)) * distance_matrix[node][destination_node]
        return local_distance + 0.3 * progress_penalty

    next_node = min(unvisited_nodes, key=lambda node: adjusted_score(node))
    return next_node
