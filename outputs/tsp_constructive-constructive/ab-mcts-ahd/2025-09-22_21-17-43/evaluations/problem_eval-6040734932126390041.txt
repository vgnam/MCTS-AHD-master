def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def weighted_score(node):
        remaining_nodes = len(unvisited_nodes)
        if remaining_nodes == 0:
            return distance_matrix[node][destination_node]
        local_weight = 0.6 * (remaining_nodes / (remaining_nodes + 1))
        destination_weight = 0.4 * ((remaining_nodes + 1) / (remaining_nodes + 2))
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        return local_weight * local_distance + destination_weight * destination_distance
    next_node = min(unvisited_nodes, key=lambda node: weighted_score(node))
    return next_node
