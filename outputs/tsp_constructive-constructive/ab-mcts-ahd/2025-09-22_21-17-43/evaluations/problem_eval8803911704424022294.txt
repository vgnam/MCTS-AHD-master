def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    visited_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    remaining_nodes = visited_count + 1

    def dynamic_score(node):
        local_distance = distance_matrix[current_node][node]
        destination_proximity = distance_matrix[node][destination_node]
        time_factor = (total_nodes - remaining_nodes) / total_nodes
        adjusted_proximity = destination_proximity * (1 - time_factor)
        lookahead_penalty = 0

        if remaining_nodes > 1:
            for next_node in unvisited_nodes:
                if next_node != node:
                    lookahead_penalty += distance_matrix[node][next_node] * (remaining_nodes / total_nodes)

        return local_distance + adjusted_proximity + lookahead_penalty

    next_node = min(unvisited_nodes, key=lambda node: dynamic_score(node))
    return next_node
