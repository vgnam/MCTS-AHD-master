def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def dynamic_weighted_score(node):
        remaining_distance = distance_matrix[current_node][destination_node]
        local_weight = 0.3 * (1 - remaining_distance / sum(distance_matrix[current_node][n] for n in unvisited_nodes)) if unvisited_nodes else 0.3
        destination_weight = 0.7 * (remaining_distance / sum(distance_matrix[n][destination_node] for n in unvisited_nodes)) if unvisited_nodes else 0.7
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        return local_weight * local_distance + destination_weight * destination_distance
    next_node = min(unvisited_nodes, key=lambda node: dynamic_weighted_score(node))
    return next_node
