def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    exploration_decay = 0.9 ** len(unvisited_nodes)
    def adjusted_score(node):
        local_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        penalty = (1 - exploration_decay) * (destination_distance ** 1.5) + exploration_decay * local_distance
        return penalty
    next_node = min(unvisited_nodes, key=lambda node: adjusted_score(node))
    return next_node
