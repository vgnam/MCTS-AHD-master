def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / len(distance_matrix)
    euclidean_weight = 0.25 + 0.75 * progress
    recent_nodes = set()

    best_score = -1
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        recent_penalty = 1 if node in recent_nodes else 0
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        total_score = (remaining_dist / (distance + 1e-10)) * (1 - euclidean_weight) + (lookahead_dist / (distance + 1e-10)) * euclidean_weight - recent_penalty

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min(distance_matrix[current_node][n] for n in unvisited_nodes) * 1.5:
            next_node = destination_node

    for _ in range(min(3, len(unvisited_nodes))):
        if next_node in recent_nodes:
            recent_nodes.remove(next_node)
        recent_nodes.add(next_node)

    return next_node
