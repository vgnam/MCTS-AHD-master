def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    threshold = 0.8 - 0.05 * (total_unvisited / (total_unvisited + 1))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        future_penalty = lookahead_dist / len(remaining_nodes) if len(remaining_nodes) > 0 else 0
        score = current_dist + 0.5 * lookahead_dist + future_penalty * threshold
        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
