def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes
    immediate_weight = 1.0 - progress  # Decreases as progress increases
    lookahead_weight = 0.5 + 0.5 * progress  # Increases as progress increases

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        return immediate_weight * current_dist + lookahead_weight * lookahead_dist

    candidates = sorted(unvisited_nodes, key=evaluate_node)
    if len(candidates) > 1 and progress < 0.7:  # Add randomness early in the process
        selection_prob = [0.9 ** i for i in range(len(candidates))]
        selection_prob = [p / sum(selection_prob) for p in selection_prob]
        next_node = np.random.choice(candidates, p=selection_prob)
    else:
        next_node = candidates[0]
    return next_node
