def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    lookahead_weight = 0.5 + 0.4 * (1 - remaining_count / len(unvisited_nodes)) if remaining_count != 0 else 0.5

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]

            detour_penalty = (distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node] -
                             distance_matrix[node][destination_node]) / distance_matrix[node][destination_node] if distance_matrix[node][destination_node] != 0 else 0
        else:
            lookahead_dist = distance_matrix[node][destination_node]
            detour_penalty = 0

        return current_dist + lookahead_weight * lookahead_dist + 0.3 * detour_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
