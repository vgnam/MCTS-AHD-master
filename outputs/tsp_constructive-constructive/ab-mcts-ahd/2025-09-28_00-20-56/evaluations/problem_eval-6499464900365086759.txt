import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node, temperature):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        # Dynamic weighting with temperature
        weight_current = 1.0 / temperature
        weight_remaining = 1.0
        weight_detour = max(0.1, 1.0 - (num_unvisited / len(distance_matrix)))
        return (weight_current * current_distance) + (weight_remaining * remaining_distance) + (weight_detour * detour_penalty)

    temperature = len(unvisited_nodes) + 1  # Initial high temperature
    scores = {node: calculate_score(node, temperature) for node in unvisited_nodes}
    total_score = sum(scores.values())
    probabilities = {node: (1 / (temp + 1)) * (total_score - scores[node]) for node, temp in zip(unvisited_nodes, [temperature] * len(unvisited_nodes))}
    next_node = random.choices(list(unvisited_nodes), weights=list(probabilities.values()), k=1)[0]
    return next_node
