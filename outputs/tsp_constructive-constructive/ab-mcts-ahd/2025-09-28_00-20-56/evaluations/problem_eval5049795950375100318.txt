def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    remaining_distance_to_destination = distance_matrix[current_node][destination_node]
    base_threshold = 1.5 - (remaining_distance_to_destination / (num_unvisited * 100 + 1))

    for node in unvisited_nodes:
        proximity_score = distance_matrix[current_node][node]
        remaining_score = distance_matrix[node][destination_node]
        detour_penalty = sum(max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in unvisited_nodes if other_node != node)
        bonus_score = sum(distance_matrix[node][dest] - distance_matrix[current_node][dest] for dest in unvisited_nodes if dest != node) / num_unvisited
        threshold = base_threshold * (1 + bonus_score)
        score = (proximity_score + remaining_score) * threshold + detour_penalty

        if score < best_score:
            best_score = score
            next_node = node

    if next_node is None:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] < min(distance_matrix[current_node][node] for node in unvisited_nodes):
        next_node = destination_node

    return next_node
