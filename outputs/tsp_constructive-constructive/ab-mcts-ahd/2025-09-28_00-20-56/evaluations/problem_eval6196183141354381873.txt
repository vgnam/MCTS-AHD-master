def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        combined_score = current_dist + 0.5 * lookahead_dist
        random_factor = 0.3 * max(distance_matrix[current_node]) * (1 / (combined_score + 1e-6))
        return combined_score * (1 - random_factor)

    if unvisited_nodes:
        next_node = min(unvisited_nodes, key=evaluate_node)
    else:
        next_node = destination_node
    return next_node
