def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        local_density_penalty = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
        centrality_weight = 1 / (1 + local_density_penalty) if num_unvisited > 1 else 1
        return (current_distance + remaining_distance) + (1 / num_unvisited) * (1 - centrality_weight) * local_density_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
