def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        lookahead_dist = min([distance_matrix[node][n] + distance_matrix[n][destination_node] for n in unvisited_nodes])
        euclidean_weight = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) * 0.5
        return (1 - euclidean_weight) * current_dist + euclidean_weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
