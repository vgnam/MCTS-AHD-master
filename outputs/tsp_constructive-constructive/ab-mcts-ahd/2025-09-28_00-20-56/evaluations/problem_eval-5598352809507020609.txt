def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Calculate dynamic threshold based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    dynamic_threshold = 1.0 + (1.5 - 1.0) * (remaining_nodes / (remaining_nodes + 1))

    # Calculate average distance to unvisited nodes
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / len(unvisited_nodes)

    # Prioritize destination node if it's unvisited and within dynamic threshold or average distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if (destination_distance <= min_distance * dynamic_threshold) or (destination_distance <= avg_distance):
            next_node = destination_node

    return next_node
