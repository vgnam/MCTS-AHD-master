importance of immediate distance and lookahead based on the remaining unvisited nodes, using a decay factor to prioritize short-term optimization early in the search and long-term optimization as more nodes are visited, while incorporating a probabilistic selection to escape local optima.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    decay_factor = 0.1 + 0.9 * remaining_ratio  # Weight decays as more nodes are visited

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes,
                               key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        combined_score = (1 - decay_factor) * immediate_dist + decay_factor * lookahead_dist
        return combined_score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    candidates = [node for i, node in enumerate(unvisited_nodes) if scores[i] == min_score]

    if len(candidates) > 1:
        import random
        return random.choice(candidates)  # Randomly break ties to diversify paths
    else:
        return next_node
