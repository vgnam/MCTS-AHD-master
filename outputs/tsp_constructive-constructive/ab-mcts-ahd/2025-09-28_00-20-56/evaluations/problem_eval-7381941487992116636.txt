def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead_2 = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist_2 = distance_matrix[node][best_lookahead_2] + distance_matrix[best_lookahead_2][destination_node]

            remaining_nodes_3 = [n for n in remaining_nodes if n != best_lookahead_2]
            if remaining_nodes_3:
                best_lookahead_3 = min(remaining_nodes_3, key=lambda n: distance_matrix[best_lookahead_2][n] + distance_matrix[n][destination_node])
                lookahead_dist_3 = distance_matrix[best_lookahead_2][best_lookahead_3] + distance_matrix[best_lookahead_3][destination_node]
            else:
                lookahead_dist_3 = 0
        elif len(unvisited_nodes) > 1:
            best_lookahead_2 = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist_2 = distance_matrix[node][best_lookahead_2] + distance_matrix[best_lookahead_2][destination_node]
            lookahead_dist_3 = 0
        else:
            lookahead_dist_2 = distance_matrix[node][destination_node]
            lookahead_dist_3 = 0

        return 0.7 * current_dist + 0.3 * lookahead_dist_2 + 0.2 * lookahead_dist_3

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
