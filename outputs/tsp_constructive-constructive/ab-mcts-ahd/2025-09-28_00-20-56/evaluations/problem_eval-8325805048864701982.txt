def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            min_lookahead = float('inf')
            for n1 in remaining_nodes:
                remaining_nodes_2 = [n for n in remaining_nodes if n != n1]
                if remaining_nodes_2:
                    best_n2 = min(remaining_nodes_2, key=lambda n2: distance_matrix[n1][n2] + distance_matrix[n2][destination_node])
                    total = distance_matrix[node][n1] + distance_matrix[n1][best_n2] + distance_matrix[best_n2][destination_node]
                    if total < min_lookahead:
                        min_lookahead = total
                        best_lookahead = n1
            if best_lookahead is not None:
                lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][best_n2] + distance_matrix[best_n2][destination_node]
            else:
                lookahead_dist = distance_matrix[node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + 0.5 * lookahead_dist

    scores = [evaluate_node(node) for node in unvisited_nodes]
    exp_scores = [math.exp(-score) for score in scores]
    probs = [exp / sum(exp_scores) for exp in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
