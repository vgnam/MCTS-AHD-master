def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            best_lookahead_value = float('inf')

            for n1 in remaining_nodes:
                remaining_nodes2 = [n for n in remaining_nodes if n != n1]
                for n2 in remaining_nodes2:
                    total_dist = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                    if total_dist < best_lookahead_value:
                        best_lookahead_value = total_dist
                        best_lookahead = n1

            lookahead_dist = best_lookahead_value
            decay_factor = (1 - (current_dist / (current_dist + avg_remaining_distance))) ** 2
            adjusted_lookahead_dist = lookahead_dist * decay_factor
        elif len(unvisited_nodes) == 2:
            remaining_node = [n for n in unvisited_nodes if n != node][0]
            lookahead_dist = distance_matrix[node][remaining_node] + distance_matrix[remaining_node][destination_node]
            adjusted_lookahead_dist = lookahead_dist * 0.5
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]

        return current_dist + 0.7 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
