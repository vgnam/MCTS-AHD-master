def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (80% weight)
        current_dist = distance_matrix[current_node][node]
        # Adaptive 3-step lookahead (20% weight)
        lookahead_weight = 0.2
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] +
                                min(distance_matrix[n][k] + distance_matrix[k][destination_node]
                                    for k in [m for m in remaining_nodes if m != n]))
            lookahead_dist = (distance_matrix[node][best_lookahead] +
                             min(distance_matrix[best_lookahead][k] + distance_matrix[k][destination_node]
                                 for k in [m for m in remaining_nodes if m != best_lookahead]))
        elif len(unvisited_nodes) > 1:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combine with adaptive weights
        return current_dist + lookahead_weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
