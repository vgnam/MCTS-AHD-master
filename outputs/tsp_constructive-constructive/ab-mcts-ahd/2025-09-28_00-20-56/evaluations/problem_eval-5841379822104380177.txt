def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])

        total_remaining_distance = sum(distance_matrix[n][destination_node] for n in unvisited_nodes)
        avg_remaining_distance = total_remaining_distance / num_unvisited if num_unvisited > 0 else 0
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if num_unvisited > 1:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weighting
        weight_current = 1.0
        weight_remaining = 1.0
        weight_detour = max(0.1, 1.5 - (num_unvisited / len(distance_matrix)))
        weight_lookahead = 0.5
        return (weight_current * current_distance) + (weight_remaining * remaining_distance) + (weight_detour * detour_penalty) + (weight_lookahead * adjusted_lookahead_dist)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
