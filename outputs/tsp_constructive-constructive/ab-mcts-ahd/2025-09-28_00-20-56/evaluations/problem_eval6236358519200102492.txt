def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead_1 = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_nodes_2 = [n for n in remaining_nodes if n != best_lookahead_1]
            best_lookahead_2 = min(remaining_nodes_2, key=lambda n: distance_matrix[best_lookahead_1][n])
            lookahead_dist = distance_matrix[node][best_lookahead_1] + distance_matrix[best_lookahead_1][best_lookahead_2] + distance_matrix[best_lookahead_2][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (math.log(len(unvisited_nodes)) / lookahead_dist)
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + 0.3 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
