def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        avg_unvisited_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        max_detour_penalty = max(
            (distance_matrix[current_node][node] + distance_matrix[node][other] - distance_matrix[current_node][other])
            for other in unvisited_nodes if other != node
        ) if unvisited_nodes else 0
        return current_distance + remaining_distance + avg_unvisited_distance + 2 * max_detour_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
