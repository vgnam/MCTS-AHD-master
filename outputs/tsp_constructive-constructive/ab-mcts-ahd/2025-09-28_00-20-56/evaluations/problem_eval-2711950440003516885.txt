def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_2step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_2step = distance_matrix[node][best_2step] + distance_matrix[best_2step][destination_node]
            best_3step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                [distance_matrix[n][m] + distance_matrix[m][destination_node] for m in remaining_nodes if m != n]))
            lookahead_3step = distance_matrix[node][best_3step] + min(
                [distance_matrix[best_3step][m] + distance_matrix[m][destination_node] for m in remaining_nodes if m != best_3step])
            adjusted_lookahead = (lookahead_2step * 0.5 + lookahead_3step * 0.3) * (avg_remaining_distance / (lookahead_2step + lookahead_3step)) ** 1.2
        elif len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_2step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_2step = distance_matrix[node][best_2step] + distance_matrix[best_2step][destination_node]
            adjusted_lookahead = lookahead_2step * (avg_remaining_distance / lookahead_2step) ** 1.2
        else:
            adjusted_lookahead = distance_matrix[node][destination_node]
        return current_dist * 0.5 + adjusted_lookahead * 0.5

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
