def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_2step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_2step = distance_matrix[node][best_2step] + distance_matrix[best_2step][destination_node]
            adjusted_2step = lookahead_2step * (avg_remaining_distance / lookahead_2step) ** 2
            next_remaining_nodes = [n for n in remaining_nodes if n != best_2step]
            if next_remaining_nodes:
                best_3step = min(next_remaining_nodes, key=lambda n: distance_matrix[best_2step][n] + distance_matrix[n][destination_node])
                lookahead_3step = distance_matrix[best_2step][best_3step] + distance_matrix[best_3step][destination_node]
                adjusted_3step = lookahead_3step * (avg_remaining_distance / lookahead_3step) ** 2
            else:
                adjusted_3step = 0
        elif len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_2step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            adjusted_2step = distance_matrix[node][best_2step] + distance_matrix[best_2step][destination_node]
            adjusted_3step = 0
        else:
            adjusted_2step = distance_matrix[node][destination_node]
            adjusted_3step = 0
        return current_dist + 0.5 * adjusted_2step + 0.25 * adjusted_3step

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
