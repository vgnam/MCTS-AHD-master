def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_immediate = total_unvisited / (2 * total_unvisited - 1)
    weight_lookahead = 1 - weight_immediate

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        return weight_immediate * current_dist + weight_lookahead * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
