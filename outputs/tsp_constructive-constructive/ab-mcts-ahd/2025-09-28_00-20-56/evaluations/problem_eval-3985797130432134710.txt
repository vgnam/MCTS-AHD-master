def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    # Calculate average distance to all unvisited nodes
    total_avg_distance = 0
    for node in unvisited_nodes:
        total_avg_distance += distance_matrix[current_node][node]
    avg_distance = total_avg_distance / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        adjusted_distance = current_distance + (avg_distance * 0.25)

        if adjusted_distance < min_distance:
            min_distance = adjusted_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_distance * 0.7:  # Adjusted threshold
            next_node = destination_node

    return next_node
