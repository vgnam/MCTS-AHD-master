def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        proximity_weight = 0.6
        efficiency_weight = 0.4

        if len(unvisited_nodes) < 3:
            proximity_weight = 0.4
            efficiency_weight = 0.6

        total_score = (current_distance * proximity_weight) + (remaining_distance * efficiency_weight)

        if total_score < min_score:
            min_score = total_score
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_score * 0.8:
            next_node = destination_node

    return next_node
