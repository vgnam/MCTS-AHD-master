def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_distance = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_distance = distance_matrix[node][destination_node]
        euclidean_weight = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) * 0.5
        total_distance = (1 - euclidean_weight) * current_distance + euclidean_weight * lookahead_distance

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * 0.8:  # More aggressive threshold
            next_node = destination_node

    return next_node
