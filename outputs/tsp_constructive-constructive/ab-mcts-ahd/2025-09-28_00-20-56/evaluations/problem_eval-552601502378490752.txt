import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate average distance to unvisited nodes
    total_distances = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distances / len(unvisited_nodes)

    min_total_distance = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance * 1.2  # Penalize nodes far from destination

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node
            candidates = [node]
        elif total_distance == min_total_distance:
            candidates.append(node)

    # Dynamic threshold based on average distance
    threshold = avg_distance * 0.7

    # Prioritize destination if it's unvisited and within dynamic threshold
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= threshold:
            next_node = destination_node

    # Randomly select among candidates to avoid local optima
    if len(candidates) > 1 and next_node not in (destination_node, None):
        next_node = random.choice(candidates)

    return next_node
