def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (70% weight)
        current_dist = distance_matrix[current_node][node]
        # 3-step lookahead (30% weight)
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # Find best 2-step path to destination
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                distance_matrix[n][m] + distance_matrix[m][destination_node]
                for m in [r for r in remaining_nodes if r != n]
            ))
            lookahead_dist = distance_matrix[node][best_lookahead] + min(
                distance_matrix[best_lookahead][m] + distance_matrix[m][destination_node]
                for m in [r for r in remaining_nodes if r != best_lookahead]
            )
        elif len(unvisited_nodes) > 1:
            # 2-step lookahead if only 2 nodes left
            lookahead_dist = min(distance_matrix[node][n] + distance_matrix[n][destination_node]
                                for n in [r for r in unvisited_nodes if r != node])
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combine with dynamic weights
        weight = 0.7 if len(unvisited_nodes) > 5 else 0.6
        return weight * current_dist + (1 - weight) * lookahead_dist

    # Temperature-based Boltzmann selection
    evaluations = [evaluate_node(node) for node in unvisited_nodes]
    min_eval = min(evaluations)
    max_eval = max(evaluations)
    if max_eval == min_eval:
        return min(unvisited_nodes, key=evaluate_node)
    # Normalize and apply Boltzmann selection
    temperature = 1.0 if len(unvisited_nodes) > 5 else 0.5
    probabilities = [math.exp(-(eval - min_eval) / temperature) for eval in evaluations]
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]
    selected = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
