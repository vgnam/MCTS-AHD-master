def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for the current node
    exploration_factor = 1 - (len(unvisited_nodes) / total_nodes)  # Higher in early stages

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weighting based on exploration factor
        weight = 0.5 + 0.5 * exploration_factor
        combined_score = current_dist + weight * lookahead_dist

        # Add probabilistic element
        if exploration_factor > 0.7:  # Early stage: more randomness
            combined_score += 0.1 * (sum(distance_matrix[node]) / len(distance_matrix[node]))

        return combined_score

    if exploration_factor > 0.8 and len(unvisited_nodes) > 2:  # Early stage: higher chance of random selection
        if random.random() < 0.2:
            return random.choice(unvisited_nodes)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
