def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = min_distance * (1.2 + 0.3 * (total_unvisited / (total_unvisited + 1)))

        if destination_distance <= dynamic_threshold:
            next_node = destination_node
        else:
            # Consider alternative nodes that could reduce total path length
            for node in unvisited_nodes:
                if node != next_node:
                    distance_to_node = distance_matrix[current_node][node]
                    distance_node_to_dest = distance_matrix[node][destination_node]
                    combined_distance = distance_to_node + distance_node_to_dest
                    if combined_distance < destination_distance * 1.3:
                        next_node = node

    return next_node
