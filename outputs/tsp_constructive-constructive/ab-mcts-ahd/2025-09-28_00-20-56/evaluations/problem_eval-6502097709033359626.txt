def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        avg_remaining_distance = sum(distance_matrix[n][destination_node] for n in remaining_nodes) / max(1, len(remaining_nodes))
        adjusted_remaining_dist = lookahead_dist * (avg_remaining_distance / (distance_matrix[node][destination_node] + 1e-9)) ** 2
        return current_dist + 0.5 * adjusted_remaining_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
