def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None

    # Dynamic proximity weight based on remaining nodes
    proximity_weight = 0.6 - 0.1 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_distance = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_distance = remaining_distance

        # Weighted score with dynamic adjustment
        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        total_score = (ratio * (1 - proximity_weight)) + (lookahead_distance / (current_distance + 1e-10)) * proximity_weight

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min(distance_matrix[current_node][node] for node in unvisited_nodes) * 0.9:
            next_node = destination_node

    return next_node
