def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (70% weight)
        current_dist = distance_matrix[current_node][node] * 0.7

        # Variable lookahead (30% weight)
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        best_lookahead = None
        min_lookahead = float('inf')
        num_remaining = len(remaining_nodes)

        if num_remaining > 5:
            lookahead_steps = 3
        elif num_remaining > 2:
            lookahead_steps = 2
        else:
            lookahead_steps = 1

        for first_step in remaining_nodes:
            if lookahead_steps == 1:
                lookahead_dist = distance_matrix[node][first_step]
                best_lookahead = first_step
            elif lookahead_steps == 2:
                for second_step in [n for n in remaining_nodes if n != first_step]:
                    lookahead_dist = distance_matrix[node][first_step] + distance_matrix[first_step][second_step]
                    if lookahead_dist < min_lookahead:
                        min_lookahead = lookahead_dist
                        best_lookahead = second_step
            elif lookahead_steps == 3:
                for second_step in [n for n in remaining_nodes if n != first_step]:
                    remaining_after_second = [n for n in remaining_nodes if n != first_step and n != second_step]
                    if remaining_after_second:
                        for third_step in remaining_after_second:
                            lookahead_dist = distance_matrix[node][first_step] + distance_matrix[first_step][second_step] + distance_matrix[second_step][third_step]
                            if lookahead_dist < min_lookahead:
                                min_lookahead = lookahead_dist
                                best_lookahead = third_step

        if best_lookahead is not None:
            lookahead_dist = min_lookahead
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Combine with adjustable weight
        return current_dist + 0.3 * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
