default, but dynamically overrides this choice if the destination is within 3.0 times the average distance to unvisited nodes, ensuring a balance between exploration and progress toward the destination. The threshold (3.0 Ã— average distance) acts as a dynamic filter, while the destination node is given higher priority when it meets this condition. The code efficiently combines inverse greedy selection with a heuristic override, leveraging the distance matrix and unvisited nodes set.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    max_distance = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance > max_distance:
            max_distance = distance
            next_node = node

    # Calculate average distance to unvisited nodes
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    # Prioritize destination node if it's unvisited and within dynamic threshold
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= avg_distance * 3.0:  # Dynamic threshold
            next_node = destination_node

    return next_node
