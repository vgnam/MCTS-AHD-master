def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_factor = 1 - (total_unvisited / (total_unvisited + 1))  # Normalized progress factor

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        weighted_penalty = detour_penalty * (1 - progress_factor)  # Adjust penalty based on progress
        return current_distance + remaining_distance + weighted_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
