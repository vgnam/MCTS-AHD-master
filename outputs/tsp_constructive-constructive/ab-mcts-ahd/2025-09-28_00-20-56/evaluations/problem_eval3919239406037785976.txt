def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        if unvisited_nodes:
            unvisited_count = len(unvisited_nodes)
            for other_node in unvisited_nodes:
                if other_node != node:
                    detour = distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]
                    detour_penalty += max(0, detour) * (1 / unvisited_count)
        return (current_distance * 0.6) + (remaining_distance * 0.3) + (detour_penalty * 0.1)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
