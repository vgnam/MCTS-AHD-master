def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            weight = 0.6 if len(unvisited_nodes) > 4 else 0.4
            score = (current_dist + remaining_dist) * (centrality / lookahead_dist) * (1 - weight) + (remaining_dist / (current_dist + 1e-10)) * weight
        else:
            score = current_dist + remaining_dist

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
