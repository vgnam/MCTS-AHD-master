def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]

        if not remaining_nodes:
            total_distance = current_distance + distance_matrix[node][destination_node]
        else:
            weight_factor = 1.0 / len(remaining_nodes)
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            total_distance = current_distance + weight_factor * lookahead_dist

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * 0.8:
            next_node = destination_node

    return next_node
