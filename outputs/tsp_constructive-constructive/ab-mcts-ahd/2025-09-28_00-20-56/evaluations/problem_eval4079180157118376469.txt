def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        future_connections = sum(1 for neighbor in unvisited_nodes if neighbor != node and distance_matrix[node][neighbor] > 0)
        exploration_bonus = future_connections / num_unvisited if num_unvisited > 0 else 0

        dynamic_penalty = (1 - (num_unvisited / len(distance_matrix))) * 0.3
        score = ratio - dynamic_penalty + 0.4 * exploration_bonus

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.85:
            next_node = destination_node

    return next_node
