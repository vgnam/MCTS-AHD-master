def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            worst_lookahead = max(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            best_path = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            worst_path = distance_matrix[node][worst_lookahead] + distance_matrix[worst_lookahead][destination_node]
            lookahead_score = (best_path + worst_path) / 2
            adaptive_weight = 0.8 ** (1 / len(unvisited_nodes))
        else:
            lookahead_score = distance_matrix[node][destination_node]
            adaptive_weight = 0.0
        return current_dist + adaptive_weight * lookahead_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
