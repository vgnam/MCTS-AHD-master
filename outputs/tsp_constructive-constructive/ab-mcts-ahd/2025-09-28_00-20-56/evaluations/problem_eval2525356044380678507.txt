def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    n = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if n > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        centrality = sum(distance_matrix[node]) / (n * n)
        diversity_weight = 1 - (len(remaining_nodes) / n) if n > 1 else 0

        balanced_dist = (0.5 - diversity_weight * 0.2) * current_dist + (0.5 + diversity_weight * 0.2) * lookahead_dist

        future_cost = sum(distance_matrix[node][neighbor] for neighbor in remaining_nodes) if n > 1 else 0
        decay_factor = 0.8 ** (n - 1)
        future_penalty = future_cost * decay_factor if n > 1 else 0

        score = balanced_dist + 0.4 * future_penalty + centrality * 0.3

        if score < best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][destination_node]
        if direct_dist < best_score * 0.9:
            next_node = destination_node

    return next_node
