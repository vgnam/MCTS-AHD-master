def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (100% weight)
        current_dist = distance_matrix[current_node][node]

        # 2-step lookahead (50% weight)
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Opportunity cost (dynamic weight based on remaining nodes)
        opportunity_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        weight = 0.3 + 0.7 * (1 / (len(unvisited_nodes) + 1))  # Weight decreases as nodes are visited

        # Combined score
        return current_dist + 0.5 * lookahead_dist + weight * opportunity_cost

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
