def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]

        # Dynamic lookahead weights based on remaining nodes
        remaining = len(unvisited_nodes)
        if remaining > 2:
            # Short-term lookahead (2-step)
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            weight = 0.4
        else:
            # Long-term lookahead (3-step)
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            if len(remaining_nodes) > 1:
                best_lookahead1 = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
                remaining_nodes2 = [n for n in remaining_nodes if n != best_lookahead1]
                best_lookahead2 = min(remaining_nodes2, key=lambda n: distance_matrix[best_lookahead1][n] + distance_matrix[n][destination_node])
                lookahead_dist = distance_matrix[node][best_lookahead1] + distance_matrix[best_lookahead1][best_lookahead2] + distance_matrix[best_lookahead2][destination_node]
            else:
                lookahead_dist = distance_matrix[node][destination_node]
            weight = 0.6

        # Penalty for revisiting nodes (simple cycle prevention)
        penalty = 0.1 if node in unvisited_nodes else 0

        # Combine distances with dynamic weights and penalty
        return current_dist + weight * lookahead_dist + penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
