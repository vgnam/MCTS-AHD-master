def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (80% weight)
        current_dist = distance_matrix[current_node][node] * 0.8

        # Adaptive lookahead weight (30% base, reduces as nodes remain)
        lookahead_weight = 0.3 * (1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 2)))

        # 3-step lookahead evaluation
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            best_lookahead_score = float('inf')

            for n1 in remaining_nodes:
                remaining_nodes_2 = [n for n in remaining_nodes if n != n1]
                for n2 in remaining_nodes_2:
                    score = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                    if score < best_lookahead_score:
                        best_lookahead_score = score
                        best_lookahead = (n1, n2)
            lookahead_dist = best_lookahead_score
        elif len(unvisited_nodes) == 2:
            remaining_node = [n for n in unvisited_nodes if n != node][0]
            lookahead_dist = distance_matrix[node][remaining_node] + distance_matrix[remaining_node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Combine immediate and lookahead distances
        return current_dist + lookahead_weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
