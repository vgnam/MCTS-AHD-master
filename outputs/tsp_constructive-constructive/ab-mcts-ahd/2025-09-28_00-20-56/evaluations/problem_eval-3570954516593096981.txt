def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited if total_unvisited else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Weighted combination of current and remaining distance, adjusted by the number of unvisited nodes
        weighted_distance = (current_distance + remaining_distance) * (1 + 0.1 * (total_unvisited / len(distance_matrix)))

        if weighted_distance < min_total_distance:
            min_total_distance = weighted_distance
            next_node = node

    # Dynamic threshold based on average distance and remaining nodes
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        threshold = avg_distance * (0.7 + 0.3 * (total_unvisited / len(distance_matrix)))
        if direct_distance <= threshold:
            next_node = destination_node

    return next_node
