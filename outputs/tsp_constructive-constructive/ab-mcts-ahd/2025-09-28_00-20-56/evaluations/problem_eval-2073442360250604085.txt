def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    if num_unvisited == 0:
        return destination_node

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / num_unvisited

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])

        # Dynamic weighting factor based on remaining nodes
        weight = 1.0 - (num_unvisited / (num_unvisited + 1))  # Decreases as nodes are visited
        normalized_penalty = detour_penalty / avg_distance if avg_distance > 0 else 0

        return current_distance + remaining_distance + (weight * normalized_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
