def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adaptive_factor = (current_dist / (avg_remaining_distance + 1e-6)) ** 0.5
            temperature = 1.0 / (1.0 + len(unvisited_nodes))
            weighted_score = current_dist + (1.0 - temperature) * adaptive_factor * lookahead_dist
        else:
            weighted_score = current_dist + distance_matrix[node][destination_node]
        return weighted_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
