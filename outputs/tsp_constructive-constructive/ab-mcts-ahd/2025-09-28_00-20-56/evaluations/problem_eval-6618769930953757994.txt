def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_distances = [distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes]
            best_lookahead = min(lookahead_distances)
            worst_lookahead = max(lookahead_distances)
            regret = worst_lookahead - best_lookahead
            normalized_regret = regret / (avg_remaining_distance + 1e-10)
            adjusted_lookahead_dist = best_lookahead * (1 + normalized_regret)
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + 0.3 * adjusted_lookahead_dist

    candidates = unvisited_nodes
    scores = [evaluate_node(node) for node in candidates]
    min_score = min(scores)
    max_score = max(scores)
    temperature = (max_score - min_score) / (len(unvisited_nodes) + 1e-10)

    if temperature > 0:
        probabilities = [math.exp(-(score - min_score) / temperature) for score in scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=evaluate_node)

    return next_node
