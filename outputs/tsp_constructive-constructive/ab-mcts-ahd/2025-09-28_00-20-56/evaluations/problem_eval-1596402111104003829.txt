def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = sum(max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in unvisited_nodes if other_node != node)
        priority_scaling = (num_unvisited + 1) / (num_unvisited + 2)
        score = priority_scaling * (current_distance + remaining_distance) + (1 / (num_unvisited + 1)) * detour_penalty

        if node == destination_node:
            proximity_threshold = 0.85 - 0.1 * (num_unvisited / (num_unvisited + 1))
            if current_distance <= remaining_distance * proximity_threshold:
                return -float('inf')

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
