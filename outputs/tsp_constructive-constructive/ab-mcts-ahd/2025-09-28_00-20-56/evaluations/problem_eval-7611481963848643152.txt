def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Dynamic weight adjustment based on remaining nodes
        weight = 0.8 if len(unvisited_nodes) > 4 else 0.5
        adjusted_distance = total_distance * (1 - weight) + remaining_distance * weight

        if adjusted_distance < min_total_distance:
            min_total_distance = adjusted_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * 0.8:
            next_node = destination_node

    return next_node
