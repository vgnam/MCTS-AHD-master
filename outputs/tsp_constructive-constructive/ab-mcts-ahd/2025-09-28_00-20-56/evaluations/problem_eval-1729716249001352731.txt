import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        # Dynamic weighting with temperature
        temperature = max(0.1, 1.0 - (num_unvisited / len(distance_matrix)))
        weight_current = 1.0
        weight_remaining = 1.0
        weight_detour = temperature
        return (weight_current * current_distance) + (weight_remaining * remaining_distance) + (weight_detour * detour_penalty)

    scores = {node: calculate_score(node) for node in unvisited_nodes}
    total_score = sum(math.exp(-score) for score in scores.values())
    probabilities = {node: math.exp(-scores[node]) / total_score for node in unvisited_nodes}
    
    next_node = random.choices(list(unvisited_nodes), list(probabilities.values()), k=1)[0]
    return next_node
