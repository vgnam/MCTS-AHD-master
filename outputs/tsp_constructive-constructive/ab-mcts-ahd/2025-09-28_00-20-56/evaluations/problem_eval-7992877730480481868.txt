import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) >= 3:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            min_lookahead = float('inf')
            for n1 in remaining_nodes:
                remaining_nodes2 = [n for n in remaining_nodes if n != n1]
                for n2 in remaining_nodes2:
                    total = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                    if total < min_lookahead:
                        min_lookahead = total
                        best_lookahead = n2
            lookahead_dist = min_lookahead if best_lookahead else distance_matrix[node][destination_node]
        elif len(unvisited_nodes) == 2:
            remaining_node = [n for n in unvisited_nodes if n != node][0]
            lookahead_dist = distance_matrix[node][remaining_node] + distance_matrix[remaining_node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        combined_score = 1.5 * current_dist + 0.75 * lookahead_dist
        return combined_score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    probabilities = [1.0 / score for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
