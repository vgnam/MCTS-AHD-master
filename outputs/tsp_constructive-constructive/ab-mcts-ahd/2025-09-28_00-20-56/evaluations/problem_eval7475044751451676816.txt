def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = sum(max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in unvisited_nodes if other_node != node)
        total_remaining_distance_penalty = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
        return current_distance + remaining_distance + 0.5 * detour_penalty + 0.3 * total_remaining_distance_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
