def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # Lookahead to next node
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combine immediate and lookahead distances with weights
        return current_dist * 0.7 + lookahead_dist * 0.3

    next_node = min(unvisited_nodes, key=evaluate_node)
    
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min(unvisited_nodes, key=evaluate_node) * 1.2:
            next_node = destination_node

    return next_node
