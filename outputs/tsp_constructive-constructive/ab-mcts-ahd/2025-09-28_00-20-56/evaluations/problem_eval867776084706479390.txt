def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / num_unvisited

    def calculate_score(node):
        current_dist = distance_matrix[current_node][node]
        if num_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]

        detour_penalty = sum(max(0, current_dist + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in remaining_nodes if other_node != node)
        score = current_dist + 0.5 * adjusted_lookahead_dist + (1 / num_unvisited) * detour_penalty

        if node == destination_node:
            threshold = 0.9 - 0.05 * (num_unvisited / (num_unvisited + 1))
            if current_dist <= score * threshold:
                return -float('inf')

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
