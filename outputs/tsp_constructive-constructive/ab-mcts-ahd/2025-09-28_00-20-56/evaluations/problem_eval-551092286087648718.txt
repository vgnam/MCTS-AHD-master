def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.2:
            next_node = destination_node

    if len(unvisited_nodes) > 1:
        remaining_nodes = [n for n in unvisited_nodes if n != next_node]
        total_remaining_distance = sum(distance_matrix[node][destination_node] for node in remaining_nodes)
        avg_remaining_distance = total_remaining_distance / len(remaining_nodes)

        best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[next_node][n] + distance_matrix[n][destination_node])
        lookahead_dist = distance_matrix[next_node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) * (min_distance / avg_remaining_distance)

        if adjusted_lookahead_dist < min_distance:
            next_node = best_lookahead

    return next_node
