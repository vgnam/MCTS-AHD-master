def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_first_step = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_nodes_after_first = [n for n in remaining_nodes if n != best_first_step]
            best_second_step = min(remaining_nodes_after_first, key=lambda n: distance_matrix[best_first_step][n])
            remaining_nodes_after_second = [n for n in remaining_nodes_after_first if n != best_second_step]
            best_third_step = min(remaining_nodes_after_second, key=lambda n: distance_matrix[best_second_step][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_first_step] + distance_matrix[best_first_step][best_second_step] + distance_matrix[best_second_step][best_third_step] + distance_matrix[best_third_step][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist)
        elif len(unvisited_nodes) == 2:
            remaining_node = [n for n in unvisited_nodes if n != node][0]
            lookahead_dist = distance_matrix[node][remaining_node] + distance_matrix[remaining_node][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist)
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + 0.3 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
