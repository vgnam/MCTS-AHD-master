def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            centrality_penalty = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            weighted_dist = current_dist + 0.5 * lookahead_dist
            dynamic_penalty = (centrality_penalty / avg_remaining_distance) ** 1.5
            score = weighted_dist * dynamic_penalty
        else:
            score = current_dist
        return score

    probabilities = [1 / (1 + evaluate_node(node)) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
