importance of immediate distance and lookahead based on the remaining unvisited nodes, using a probabilistic selection mechanism to balance exploration and exploitation, while still maintaining computational efficiency through a limited lookahead horizon.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]

        # Dynamic weight based on remaining nodes
        remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        weight = 0.3 + 0.7 * remaining_ratio  # Higher weight for lookahead when few nodes remain

        # Probabilistic lookahead with limited horizon
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_candidates = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_dist = distance_matrix[node][lookahead_candidates] + distance_matrix[lookahead_candidates][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Combined score with dynamic weighting
        return current_dist + weight * lookahead_dist

    # Select node using probabilistic selection
    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score + 1e-9) / (max_score - min_score + 1e-9) for score in scores]

    # Select node with probability proportional to normalized score
    import random
    selected_index = random.choices(range(len(unvisited_nodes)), weights=normalized_scores, k=1)[0]
    next_node = unvisited_nodes[selected_index]

    return next_node
