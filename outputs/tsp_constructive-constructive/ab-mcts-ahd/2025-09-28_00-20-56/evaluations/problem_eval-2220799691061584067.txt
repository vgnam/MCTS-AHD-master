def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Apply a penalty for nodes that are significantly farther than average
        penalty = max(0, (current_distance - avg_distance) * 0.5)
        adjusted_distance = total_distance + penalty

        if adjusted_distance < min_total_distance:
            min_total_distance = adjusted_distance
            next_node = node

    # Dynamic threshold based on average distance
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        threshold = min_total_distance * 0.7 if avg_distance > 0 else 0.8
        if direct_distance <= threshold:
            next_node = destination_node

    return next_node
