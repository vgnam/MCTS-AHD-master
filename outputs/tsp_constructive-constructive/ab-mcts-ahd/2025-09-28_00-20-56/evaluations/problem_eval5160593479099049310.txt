def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    # Calculate dynamic threshold based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    threshold_factor = 1.5 + (1.0 / (1 + remaining_nodes))  # Decreases as remaining nodes decrease

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Apply dynamic threshold for destination prioritization
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * threshold_factor:
            next_node = destination_node

    return next_node
