importance of the detour penalty based on the remaining unvisited nodes, favoring closer nodes while adaptively penalizing detours to maintain path efficiency.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            return current_distance + remaining_distance

        remaining_nodes = len(unvisited_nodes)
        detour_weight = 1.0 / (1.0 + remaining_nodes)

        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])

        return current_distance + remaining_distance + detour_weight * detour_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
