def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)
    remaining_distances = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    variance = sum((d - avg_remaining_distance) ** 2 for d in remaining_distances) / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            first_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            second_remaining_nodes = [n for n in remaining_nodes if n != first_lookahead]
            if second_remaining_nodes:
                second_lookahead = min(second_remaining_nodes, key=lambda n: distance_matrix[first_lookahead][n] + distance_matrix[n][destination_node])
                lookahead_dist = distance_matrix[node][first_lookahead] + distance_matrix[first_lookahead][second_lookahead] + distance_matrix[second_lookahead][destination_node]
            else:
                lookahead_dist = distance_matrix[node][first_lookahead] + distance_matrix[first_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node] if len(unvisited_nodes) == 1 else min(
                distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes
            )

        sigmoid_weight = 1 / (1 + math.exp(-(variance - avg_remaining_distance)))
        adjusted_lookahead_dist = lookahead_dist * sigmoid_weight
        return current_dist + 0.3 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
