def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            sigmoid_weight = 1 / (1 + (avg_remaining_distance / lookahead_dist) ** 2)
        else:
            sigmoid_weight = 1.0
        return current_dist + sigmoid_weight * lookahead_dist

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(s - min_score) / (max_score - min_score) for s in scores]

    temperature = 1.0 / (1.0 + len(unvisited_nodes))
    probs = [np.exp(-s / temperature) for s in normalized_scores]
    probs = [p / sum(probs) for p in probs]

    next_node = np.random.choice(unvisited_nodes, p=probs)
    return next_node
