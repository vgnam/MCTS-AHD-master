def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]
        ratio = remaining_dist / current_dist if current_dist != 0 else float('inf')

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            future_dist = sum(distance_matrix[node][n] for n in remaining_nodes)
            future_penalty = future_dist / len(remaining_nodes) if future_dist != 0 else 0
        else:
            future_penalty = 0

        score = ratio - 0.5 * future_penalty

        if len(unvisited_nodes) > 1:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2
        else:
            adjusted_lookahead_dist = remaining_dist

        return score + 0.3 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
