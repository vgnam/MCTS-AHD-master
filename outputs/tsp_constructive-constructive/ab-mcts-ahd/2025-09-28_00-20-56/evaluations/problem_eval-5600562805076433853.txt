importance of immediate distance and 2-step lookahead based on the number of remaining unvisited nodes, using a sigmoid function to smooth the transition between proximity and long-term planning, while also introducing a small random perturbation to escape local optima.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]

        if len(remaining_nodes) > 1:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node] if remaining_nodes else 0

        # Dynamic weight based on remaining nodes (sigmoid function)
        remaining_ratio = len(remaining_nodes) / (len(unvisited_nodes) + 1)
        dynamic_weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

        # Add small random perturbation
        perturbation = random.uniform(-0.1, 0.1)

        return current_dist + dynamic_weight * lookahead_dist + perturbation

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
