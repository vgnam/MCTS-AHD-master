def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic threshold based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    threshold_factor = 1.0 + (1.5 - 1.0) * (remaining_nodes / (remaining_nodes + 1))  # Decreases as nodes are visited

    min_distance = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Collect nodes within dynamic threshold
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance <= min_distance * threshold_factor:
            candidates.append(node)

    # Prioritize destination if within threshold
    if destination_node in candidates:
        next_node = destination_node
    else:
        # Randomly select from candidates if no destination prioritization
        next_node = np.random.choice(candidates) if candidates else next_node

    return next_node
