def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Initialize parameters
    alpha = 0.7  # Weight for distance component
    beta = 0.3   # Weight for centrality component
    gamma = 0.2  # Weight for destination alignment
    epsilon = 0.1  # Exploration probability

    # Calculate base scores for each node
    scores = {}
    centrality = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        to_dest = distance_matrix[node][destination_node]

        # Centrality: average distance to all other unvisited nodes
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            centrality[node] = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            centrality[node] = 0

        # Score components
        distance_score = 1 / (distance + 1e-10)
        centrality_score = 1 / (centrality[node] + 1e-10)
        dest_alignment = 1 / (to_dest + 1e-10)

        # Combined score
        scores[node] = (alpha * distance_score +
                       beta * centrality_score +
                       gamma * dest_alignment)

    # Apply probabilistic selection to escape local optima
    if random.random() < epsilon and len(unvisited_nodes) > 1:
        next_node = random.choice([n for n in unvisited_nodes if n != destination_node])
    else:
        # Select node with highest score
        next_node = max(scores.items(), key=lambda x: x[1])[0]

    # Prioritize destination if it's unvisited and close enough
    if (destination_node in unvisited_nodes and
        distance_matrix[current_node][destination_node] <=
        1.2 * min(distance_matrix[current_node][n] for n in unvisited_nodes)):
        next_node = destination_node

    return next_node
