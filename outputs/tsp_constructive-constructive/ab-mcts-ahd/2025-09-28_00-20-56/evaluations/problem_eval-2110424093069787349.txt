import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        remaining_count = len(unvisited_nodes)
        sigmoid_weight = 1 / (1 + math.exp(-(remaining_count - 5)))
        weight_immediate = 1 - sigmoid_weight
        weight_lookahead = sigmoid_weight
        current_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                distance_matrix[n][m] + distance_matrix[m][destination_node]
                for m in remaining_nodes if m != n
            ))
            lookahead_dist = distance_matrix[node][best_lookahead] + min(
                distance_matrix[best_lookahead][m] + distance_matrix[m][destination_node]
                for m in remaining_nodes if m != best_lookahead
            )
        elif len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        return weight_immediate * current_dist + weight_lookahead * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
