def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # Lookahead to next node
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # Best and worst 2-step paths
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            worst_lookahead = max(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            best_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            worst_dist = distance_matrix[node][worst_lookahead] + distance_matrix[worst_lookahead][destination_node]
            lookahead_dist = 0.5 * best_dist + 0.25 * worst_dist
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combine immediate and lookahead distances
        return 0.5 * current_dist + 0.5 * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
