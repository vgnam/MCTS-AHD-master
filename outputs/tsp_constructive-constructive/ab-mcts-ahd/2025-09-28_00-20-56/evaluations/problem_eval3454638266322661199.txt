def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    alpha = 0.7  # Weight for distance reduction
    beta = 0.2   # Weight for centrality
    gamma = 0.1  # Weight for lookahead

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            score = alpha * ratio + beta * centrality + gamma * (1 / (1 + lookahead_dist))
        else:
            score = ratio

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.7:
            next_node = destination_node

    return next_node
