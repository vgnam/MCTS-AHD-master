def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_dist = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            lookahead_factor = (lookahead_dist + centrality) * 0.5
            score = current_distance + remaining_distance + lookahead_factor
        else:
            score = current_distance + remaining_distance

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
