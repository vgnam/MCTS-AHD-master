def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_dist = min(distance_matrix[node][n] for n in remaining_nodes)

            # Fixed centrality weight and efficiency factor
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            efficiency_factor = 0.7
            adjusted_lookahead_dist = lookahead_dist * efficiency_factor

            # More aggressive probabilistic component
            random_factor = 1.0 + 0.5 * (1 - (current_dist / (current_dist + lookahead_dist)))
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
            random_factor = 1.0

        return (current_dist + 0.7 * adjusted_lookahead_dist) * random_factor

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
