def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic threshold based on remaining unvisited nodes
    num_unvisited = len(unvisited_nodes)
    dynamic_threshold = 1.5 * (1 - 0.1 * (num_unvisited / len(distance_matrix)))

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Apply dynamic threshold for destination prioritization
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * dynamic_threshold:
            # Add probabilistic element to avoid local optima
            if random.random() < 0.7:  # 70% chance to prioritize destination
                next_node = destination_node

    return next_node
