def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_hybrid_metric = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        hybrid_metric = current_distance + remaining_distance * 0.5  # Adjust weight as needed

        if hybrid_metric < min_hybrid_metric:
            min_hybrid_metric = hybrid_metric
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_hybrid_metric * 0.8:  # Adjust threshold as needed
            next_node = destination_node

    return next_node
