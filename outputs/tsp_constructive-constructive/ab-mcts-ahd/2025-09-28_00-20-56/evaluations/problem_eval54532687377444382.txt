def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    destination_in_unvisited = destination_node in unvisited_nodes

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Introduce a penalty for detours when the destination is still unvisited
        if destination_in_unvisited:
            detour_penalty = distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
            total_distance += 0.5 * detour_penalty  # Weighted penalty

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Dynamic threshold based on the average distance to unvisited nodes
    if destination_in_unvisited:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        dynamic_threshold = avg_distance * 0.7  # More flexible threshold

        if distance_matrix[current_node][destination_node] <= dynamic_threshold:
            next_node = destination_node

    return next_node
