def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Adjust threshold based on average distance to unvisited nodes
        threshold = avg_distance * 0.5 if avg_distance > 0 else 0.8

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path is within a dynamic threshold
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * threshold:
            next_node = destination_node

    return next_node
