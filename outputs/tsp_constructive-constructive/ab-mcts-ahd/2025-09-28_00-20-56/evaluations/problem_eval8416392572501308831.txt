def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # 3-step lookahead
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                distance_matrix[n][m] + distance_matrix[m][destination_node]
                for m in remaining_nodes if m != n
            ))
            lookahead_dist = distance_matrix[node][best_lookahead] + min(
                distance_matrix[best_lookahead][m] + distance_matrix[m][destination_node]
                for m in remaining_nodes if m != best_lookahead
            )
        elif len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combined score
        score = current_dist + 0.3 * lookahead_dist
        scores.append(score)

    # Probabilistic selection based on inverse score
    total_inverse_score = sum(1 / s for s in scores)
    probs = [(1 / s) / total_inverse_score for s in scores]
    next_node = np.random.choice(unvisited_nodes, p=probs)
    return next_node
