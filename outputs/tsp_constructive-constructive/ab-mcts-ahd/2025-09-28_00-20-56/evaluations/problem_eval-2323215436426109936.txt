def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    progress = 1 - len(unvisited_nodes) / len(distance_matrix)
    lookahead_weight = 0.5 + 0.5 * progress
    recent_nodes = set()

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        recent_penalty = 1 if node in recent_nodes else 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + lookahead_weight * lookahead_dist - recent_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    for _ in range(min(3, len(unvisited_nodes))):
        if next_node in recent_nodes:
            recent_nodes.remove(next_node)
        recent_nodes.add(next_node)
    return next_node
