import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    total_score = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weight and penalty adjustment
        weight = 0.7 if len(unvisited_nodes) > 4 else 0.3
        penalty = 1.0 / (len(unvisited_nodes) + 1)
        score = (remaining_dist / (distance + 1e-10)) * (1 - weight) + (lookahead_dist / (distance + 1e-10)) * weight
        score *= penalty

        # Bias toward destination node if it's unvisited
        if node == destination_node:
            score *= 1.2

        candidates.append((node, score))
        total_score += score

    # Probabilistic selection based on normalized scores
    if total_score > 0:
        probabilities = [score / total_score for _, score in candidates]
        next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
