def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    exploration_weight = len(unvisited_nodes) / total_nodes
    exploitation_weight = 1 - exploration_weight

    best_score = -1
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        # Calculate centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality /= max(1, len(unvisited_nodes) - 1)  # avoid division by zero

        # Weighted score combining ratio and centrality
        score = (exploration_weight * ratio) - (exploitation_weight * centrality)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.9:
            next_node = destination_node

    return next_node
