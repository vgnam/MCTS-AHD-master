def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    temperature = len(unvisited_nodes) / (sum(distance_matrix[current_node]) + 1e-10)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        proximity_weight = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) * 0.5
        total_score = (1 - proximity_weight) * current_dist + proximity_weight * lookahead_dist
        scores.append((node, total_score))

    exp_scores = [math.exp(score / temperature) for _, score in scores]
    sum_exp = sum(exp_scores)
    probs = [exp / sum_exp for exp in exp_scores]

    next_node = random.choices([node for node, _ in scores], weights=probs, k=1)[0]
    return next_node
