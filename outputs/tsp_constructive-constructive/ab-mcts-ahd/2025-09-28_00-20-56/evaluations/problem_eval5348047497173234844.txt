def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_options = [(n, distance_matrix[node][n] + distance_matrix[n][destination_node]) for n in remaining_nodes]
            lookahead_options.sort(key=lambda x: x[1])
            top_k = min(3, len(lookahead_options))  # Consider top 3 options
            weighted_lookahead = sum(d * (0.7 ** i) for i, (n, d) in enumerate(lookahead_options[:top_k])) / top_k
            opportunity_cost = (weighted_lookahead - current_dist) * (avg_remaining_distance / weighted_lookahead) ** 1.2
            adjusted_lookahead = opportunity_cost * 0.5 + current_dist * 0.5
        else:
            adjusted_lookahead = current_dist + distance_matrix[node][destination_node]
        return adjusted_lookahead

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
