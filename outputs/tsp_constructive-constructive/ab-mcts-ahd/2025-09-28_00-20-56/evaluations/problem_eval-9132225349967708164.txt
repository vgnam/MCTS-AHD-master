def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        # Calculate average distance to all unvisited nodes
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Calculate centroid-based heuristic
        centroid_score = 0
        if len(unvisited_nodes) > 1:
            centroid_x = sum(other for other in unvisited_nodes) / len(unvisited_nodes)
            centroid_y = sum(other for other in unvisited_nodes) / len(unvisited_nodes)
            centroid_score = abs(node - centroid_x) + abs(node - centroid_y)

        # Dynamic detour penalty based on average distance
        detour_penalty = sum(max(0, distance_matrix[current_node][node] + distance_matrix[node][other] - distance_matrix[current_node][other] - avg_distance)
                            for other in unvisited_nodes if other != node)

        return current_distance + remaining_distance + detour_penalty + 0.5 * centroid_score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
