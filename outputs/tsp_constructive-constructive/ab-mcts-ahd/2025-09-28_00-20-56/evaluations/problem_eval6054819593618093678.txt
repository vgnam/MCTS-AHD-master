def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 0.5 if len(unvisited_nodes) > 5 else 1.0  # Higher temp for early stages

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + 0.3 * lookahead_dist

    scores = {node: evaluate_node(node) for node in unvisited_nodes}
    min_score = min(scores.values())
    probabilities = {node: math.exp(-(scores[node] - min_score) / temperature) for node in unvisited_nodes}
    total_prob = sum(probabilities.values())
    normalized_probs = {node: prob / total_prob for node, prob in probabilities.items()}
    next_node = random.choices(list(normalized_probs.keys()), weights=normalized_probs.values(), k=1)[0]

    return next_node
