def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]
        remaining_nodes_count = len(unvisited_nodes) - 1

        lookahead_weight = 0.5 + 0.1 * remaining_nodes_count
        euclidean_weight = 1 - lookahead_weight
        total_score = (distance * euclidean_weight) + (remaining_dist * lookahead_weight)

        if total_score < best_score or best_score == -1:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = min_distance * (1 + 0.05 * len(unvisited_nodes))
        if destination_distance <= dynamic_threshold:
            next_node = destination_node

    return next_node
