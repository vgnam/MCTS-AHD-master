def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic distance threshold based on remaining nodes
        threshold_factor = 1.2 - 0.05 * (len(unvisited_nodes) / 10)  # Adjust threshold more dynamically
        if distance < min_distance:
            next_node = node
            min_distance = distance

    # Prioritize destination node if it's unvisited and within a dynamic distance threshold
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * threshold_factor:
            next_node = destination_node

    return next_node
