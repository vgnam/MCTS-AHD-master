def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes + 1)

    min_distance = float('inf')
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, current_distance + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])

        normalized_penalty = detour_penalty / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        proximity_bonus = (1.0 - (remaining_distance / max(distance_matrix[node]))) * 0.5

        score = (current_distance * (1 - weight_factor)) + (remaining_distance * weight_factor) + (normalized_penalty * (1 - weight_factor)) - proximity_bonus

        if score < best_score or (score == best_score and current_distance < min_distance):
            best_score = score
            min_distance = current_distance
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.5:
            next_node = destination_node

    return next_node
