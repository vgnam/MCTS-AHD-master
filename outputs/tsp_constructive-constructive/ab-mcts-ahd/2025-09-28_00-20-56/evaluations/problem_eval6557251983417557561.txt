def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            weight_factor = 0.5 / len(unvisited_nodes)
            combined_score = current_distance + remaining_distance + detour_penalty + weight_factor * lookahead_dist
        else:
            combined_score = current_distance + remaining_distance + detour_penalty
        if node == destination_node:
            combined_score *= 0.8
        return combined_score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
