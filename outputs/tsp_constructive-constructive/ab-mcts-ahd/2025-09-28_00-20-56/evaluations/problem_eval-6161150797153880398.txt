def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    min_distance = float('inf')
    next_node = None
    best_score = -1

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                distance_matrix[n][k] + distance_matrix[k][destination_node] for k in remaining_nodes if k != n))
            lookahead_dist = distance_matrix[node][best_lookahead] + min(
                distance_matrix[best_lookahead][k] + distance_matrix[k][destination_node] for k in remaining_nodes if k != best_lookahead)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            efficiency_factor = (avg_remaining_distance / centrality) ** 0.5
            adjusted_lookahead_dist = lookahead_dist * efficiency_factor * (avg_remaining_distance / lookahead_dist) ** 2
            random_factor = 1.0 + 0.2 * (1 - (distance / (distance + lookahead_dist)))
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
            random_factor = 1.0

        weight = 0.6 if len(unvisited_nodes) > 4 else 0.4
        total_score = (remaining_dist / (distance + 1e-10)) * (1 - weight) + (adjusted_lookahead_dist / (distance + 1e-10)) * weight * random_factor

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.5:
            next_node = destination_node

    return next_node
