def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            min_lookahead = float('inf')
            for n1 in remaining_nodes:
                for n2 in [n for n in remaining_nodes if n != n1]:
                    total = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                    if total < min_lookahead:
                        min_lookahead = total
                        best_lookahead = total
            lookahead_dist = best_lookahead if best_lookahead is not None else distance_matrix[node][destination_node]
        elif len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        weight = 1.0 / (1.0 + len(unvisited_nodes))  # Higher weight for lookahead as nodes decrease
        return current_dist + weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
