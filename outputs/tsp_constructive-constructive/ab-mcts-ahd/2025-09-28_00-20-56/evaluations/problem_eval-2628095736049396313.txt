def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    destination_distance = distance_matrix[current_node][destination_node]
    num_unvisited = len(unvisited_nodes)

    # Dynamic threshold based on remaining nodes
    threshold = 1.5 * (1 + 0.1 * (num_unvisited / len(distance_matrix)))

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Penalty for frequently visited nodes
        penalty = 1 + 0.2 * (len(unvisited_nodes) / len(distance_matrix))
        adjusted_distance = distance * penalty

        if adjusted_distance < min_distance:
            min_distance = adjusted_distance
            next_node = node

    # Prioritize destination node with dynamic threshold
    if destination_node in unvisited_nodes:
        if destination_distance <= min_distance * threshold:
            next_node = destination_node

    return next_node
