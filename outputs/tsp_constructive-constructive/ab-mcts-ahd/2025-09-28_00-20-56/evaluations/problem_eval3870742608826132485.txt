def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node, weight):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        return (current_distance * (1 - weight) + remaining_distance * weight + detour_penalty)

    weight = 0.6 if len(unvisited_nodes) > 4 else 0.4
    next_node = min(unvisited_nodes, key=lambda node: calculate_score(node, weight))
    return next_node
