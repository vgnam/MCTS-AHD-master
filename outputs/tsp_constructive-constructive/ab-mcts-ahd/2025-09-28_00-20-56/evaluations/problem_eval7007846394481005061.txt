def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        lookahead_scores = []

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # 2-step lookahead
            best_2step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_2step = distance_matrix[node][best_2step] + distance_matrix[best_2step][destination_node]

            if len(unvisited_nodes) > 2:
                # 3-step lookahead
                best_3step = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                    distance_matrix[n][m] + distance_matrix[m][destination_node]
                    for m in remaining_nodes if m != n
                ))
                lookahead_3step = distance_matrix[node][best_3step] + min(
                    distance_matrix[best_3step][m] + distance_matrix[m][destination_node]
                    for m in remaining_nodes if m != best_3step
                )
            else:
                lookahead_3step = lookahead_2step
        else:
            lookahead_2step = lookahead_3step = distance_matrix[node][destination_node]

        # Combine with weights: 70% immediate, 20% 2-step, 10% 3-step
        return current_dist * 0.7 + lookahead_2step * 0.2 + lookahead_3step * 0.1

    # Normalize scores and select probabilistically
    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    if min_score != max_score:
        normalized_scores = [(max_score - score) / (max_score - min_score) for score in scores]
        total = sum(normalized_scores)
        probabilities = [score / total for score in normalized_scores]
        next_node = np.random.choice(unvisited_nodes, p=probabilities)
    else:
        next_node = min(unvisited_nodes, key=evaluate_node)

    return next_node
