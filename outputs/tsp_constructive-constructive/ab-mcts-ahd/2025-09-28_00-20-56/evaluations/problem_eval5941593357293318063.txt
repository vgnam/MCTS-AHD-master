def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    nodes = list(unvisited_nodes)
    total_unvisited = len(nodes)

    for node in nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        if total_unvisited > 1:
            remaining_nodes = [n for n in nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes and centrality
        weight = 0.5 * (1 - (total_unvisited / len(distance_matrix))) + 0.2 * (centrality / max(distance_matrix[node]))
        total_score = (remaining_dist / (distance + 1e-10)) * (1 - weight) + (lookahead_dist / (distance + 1e-10)) * weight

        scores.append((node, total_score))

    # Select node with highest score, or destination if within dynamic threshold
    best_node, best_score = max(scores, key=lambda x: x[1])

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        threshold = 1.0 + 0.5 * (1 - (total_unvisited / len(distance_matrix)))
        if destination_distance <= best_score * threshold:
            best_node = destination_node

    return next_node
