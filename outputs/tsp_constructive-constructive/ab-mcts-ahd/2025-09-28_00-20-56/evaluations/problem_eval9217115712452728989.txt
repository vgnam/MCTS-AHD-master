import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        # Dynamic detour factor: penalizes nodes that create large detours
        detour_factor = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour = distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]
                detour_factor += max(0, detour) ** 1.5  # Exponential penalty for large detours

        # Probabilistic exploration: occasionally consider random detours
        exploration_factor = random.uniform(0, 0.3) if random.random() < 0.1 else 0

        # Combine factors with weights
        return (0.5 * current_distance + 0.3 * remaining_distance + 0.2 * detour_factor) * (1 + exploration_factor)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
