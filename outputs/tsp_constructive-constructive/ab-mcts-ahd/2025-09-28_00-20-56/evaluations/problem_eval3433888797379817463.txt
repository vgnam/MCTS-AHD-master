def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # 3-step lookahead with centrality-based selection
            centrality_scores = {}
            for n in remaining_nodes:
                centrality = sum(distance_matrix[n][m] for m in remaining_nodes if m != n)
                centrality_scores[n] = centrality

            best_lookahead = max(remaining_nodes, key=lambda n: centrality_scores[n])
            lookahead_dist = distance_matrix[node][best_lookahead]
            if len(remaining_nodes) > 1:
                second_step_nodes = [n for n in remaining_nodes if n != best_lookahead]
                best_second_step = min(second_step_nodes, key=lambda n: distance_matrix[best_lookahead][n] + distance_matrix[n][destination_node])
                lookahead_dist += distance_matrix[best_lookahead][best_second_step] + distance_matrix[best_second_step][destination_node]

            # Sigmoid-based weight scaling
            remaining = len(unvisited_nodes)
            weight_factor = 1 / (1 + math.exp(-(remaining - 5)))  # Adjust midpoint as needed
            combined_score = current_dist + weight_factor * lookahead_dist
        else:
            combined_score = current_dist + distance_matrix[node][destination_node]

        return combined_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
