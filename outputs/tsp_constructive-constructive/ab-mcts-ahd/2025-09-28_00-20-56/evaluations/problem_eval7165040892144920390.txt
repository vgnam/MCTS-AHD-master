def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_scores = []
            for n in remaining_nodes:
                lookahead_dist = distance_matrix[node][n] + distance_matrix[n][destination_node]
                penalty = 1 / (1 + distance_matrix[node][destination_node])  # Penalty for nodes far from destination
                lookahead_scores.append(lookahead_dist * penalty)
            lookahead_dist = min(lookahead_scores)
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        dynamic_weight = 0.5 * (1 + (distance_matrix[node][destination_node] / sum(distance_matrix[node])))
        total_score = (1 - dynamic_weight) * current_dist + dynamic_weight * lookahead_dist

        if total_score < min_score:
            min_score = total_score
            next_node = node

    return next_node
