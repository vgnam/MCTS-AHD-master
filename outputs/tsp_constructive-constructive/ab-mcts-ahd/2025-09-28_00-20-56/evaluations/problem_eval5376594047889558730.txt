def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        heuristic_potential = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
        # Dynamic weighting
        weight_current = 0.8
        weight_remaining = 0.7
        weight_potential = max(0.1, 1.0 - (num_unvisited / len(distance_matrix)))
        return (weight_current * current_distance) + (weight_remaining * remaining_distance) + (weight_potential * heuristic_potential)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
