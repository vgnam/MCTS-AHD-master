def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        proximity_weight = 0.7
        efficiency_weight = 0.3
        total_score = proximity_weight * current_dist + efficiency_weight * lookahead_dist

        if total_score < best_score:
            best_score = total_score
            next_node = node

    if len(unvisited_nodes) < 3 and destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.2:
            next_node = destination_node

    return next_node
