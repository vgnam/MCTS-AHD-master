def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_distance = distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]
                detour_penalty += max(0, detour_distance) * len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        exploration_bonus = 1 / (1 + len(unvisited_nodes)) if node != destination_node else 0
        return current_distance + remaining_distance + detour_penalty - exploration_bonus

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
