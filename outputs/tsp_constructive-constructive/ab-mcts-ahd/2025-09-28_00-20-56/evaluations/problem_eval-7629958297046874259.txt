def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (60% weight)
        current_dist = distance_matrix[current_node][node]
        # Lookahead to next node (30% weight)
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Average distance of remaining nodes (10% weight)
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        # Dynamic weighting adjustment based on remaining nodes
        remaining_factor = min(1.0, 0.5 * (1 - len(unvisited_nodes) / len(distance_matrix)))
        # Combine distances with dynamic weights
        return (0.6 - 0.2 * remaining_factor) * current_dist + (0.3 + 0.2 * remaining_factor) * lookahead_dist + 0.1 * avg_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
