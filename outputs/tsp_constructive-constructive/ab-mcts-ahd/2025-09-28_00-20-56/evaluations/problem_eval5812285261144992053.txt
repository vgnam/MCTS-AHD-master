def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None

    # Calculate average distance to all unvisited nodes
    total_avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_avg_distance / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Calculate penalty for nodes with many nearby unvisited nodes
        nearby_unvisited_count = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= avg_distance * 0.5)
        penalty = nearby_unvisited_count * 0.2 * avg_distance

        # Adjust distance with penalty
        adjusted_distance = total_distance + penalty * 0.3

        if adjusted_distance < min_total_distance:
            min_total_distance = adjusted_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is within a dynamic threshold
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = avg_distance * 0.5 + (max(avg_distance - direct_distance, 0) * 0.1)
        if direct_distance <= dynamic_threshold:
            next_node = destination_node

    return next_node
