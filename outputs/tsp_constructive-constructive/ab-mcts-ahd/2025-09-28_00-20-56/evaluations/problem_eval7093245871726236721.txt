def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            first_step = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_nodes.remove(first_step)
            second_step = min(remaining_nodes, key=lambda n: distance_matrix[first_step][n])
            remaining_nodes.remove(second_step)
            third_step = min(remaining_nodes, key=lambda n: distance_matrix[second_step][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][first_step] + distance_matrix[first_step][second_step] + distance_matrix[second_step][third_step] + distance_matrix[third_step][destination_node]
            adjusted_lookahead_dist = lookahead_dist * 1.2
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + 0.3 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
