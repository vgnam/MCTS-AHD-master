def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    node_scores = []
    total_weight = 0.0

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        proximity_weight = 1.0 - (distance_matrix[node][destination_node] / sum(distance_matrix[node]))
        path_complexity = len(unvisited_nodes) / len(distance_matrix)
        dynamic_weight = (proximity_weight * 0.7) + (path_complexity * 0.3)

        total_score = (1 - dynamic_weight) * current_dist + dynamic_weight * lookahead_dist
        node_scores.append((node, total_score))
        total_weight += total_score

    if total_weight == 0:
        return unvisited_nodes[0]

    probabilities = [score / total_weight for (_, score) in node_scores]
    selected_node = np.random.choice([node for (node, _) in node_scores], p=probabilities)

    return next_node
