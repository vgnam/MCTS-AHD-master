def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_scores = []
            for n in remaining_nodes:
                lookahead_dist = distance_matrix[node][n] + distance_matrix[n][destination_node]
                penalty = sum(distance_matrix[node][k] for k in unvisited_nodes if k != n and k != node) / len(remaining_nodes)
                adjusted_lookahead = lookahead_dist + penalty
                lookahead_scores.append(adjusted_lookahead)
            best_lookahead = min(lookahead_scores)
            decay_factor = (avg_remaining_distance / best_lookahead) ** 1.2
            adjusted_lookahead_dist = best_lookahead * decay_factor
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]

        exploration_bias = 1.0 / (1.0 + math.exp(-0.5 * (current_dist - avg_remaining_distance)))
        return (current_dist * (1 - exploration_bias) + adjusted_lookahead_dist * exploration_bias) * (1 + 0.1 * random.random())

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
