def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        weight_factor = 0.5 + (0.5 * (1 / len(unvisited_nodes))) if len(unvisited_nodes) > 0 else 0.5
        balanced_dist = (1 - weight_factor) * current_dist + weight_factor * lookahead_dist

        future_cost = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)
        avg_future_cost = future_cost / len(unvisited_nodes) if len(unvisited_nodes) > 0 else 0

        score = balanced_dist + 0.4 * avg_future_cost

        if score < best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][destination_node]
        if direct_dist <= best_score * 0.9:
            next_node = destination_node

    return next_node
