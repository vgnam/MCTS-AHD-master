def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2
            exploration_factor = (unvisited_nodes.index(node) + 1) / len(unvisited_nodes)
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
            exploration_factor = 1.0
        return current_dist + 0.5 * adjusted_lookahead_dist + 0.3 * exploration_factor

    candidates = list(unvisited_nodes)
    scores = [evaluate_node(node) for node in candidates]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score) if max_score != min_score else 0.5 for score in scores]
    next_node = random.choices(candidates, weights=normalized_scores, k=1)[0]
    return next_node
