def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_centrality(node):
        # Calculate centrality as the average distance to all other nodes
        total_dist = sum(distance_matrix[node][n] for n in range(len(distance_matrix)) if n != node)
        return total_dist / (len(distance_matrix) - 1) if len(distance_matrix) > 1 else 0

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # Centrality factor (lower centrality is better)
        centrality = calculate_centrality(node)
        # Lookahead to next node
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combine with dynamic weights
        weight_current = 0.6  # Higher weight for immediate distance
        weight_centrality = 0.3  # Moderate weight for centrality
        weight_lookahead = 0.1  # Lower weight for lookahead
        return (weight_current * current_dist +
                weight_centrality * centrality +
                weight_lookahead * lookahead_dist)

    # Probabilistic selection based on evaluation scores
    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    # Convert scores to probabilities (inverse relationship)
    probabilities = [1 / (score - min_score + 1e-10) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
