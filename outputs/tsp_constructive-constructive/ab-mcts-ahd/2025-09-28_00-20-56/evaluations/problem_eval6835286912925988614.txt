defined as a weighted sum of immediate proximity and long-term potential, with the latter's influence decaying exponentially based on the remaining distance to the destination.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_options = [(n, distance_matrix[node][n] + distance_matrix[n][destination_node]) for n in remaining_nodes]
            best_lookahead_dist = min(lookahead_options, key=lambda x: x[1])[1]
            decay_factor = math.exp(-best_lookahead_dist / avg_remaining_distance)
            adjusted_lookahead = best_lookahead_dist * decay_factor
        else:
            adjusted_lookahead = distance_matrix[node][destination_node]
        return (1 - 0.5 * decay_factor) * current_dist + 0.5 * adjusted_lookahead

    candidates = sorted(unvisited_nodes, key=evaluate_node)
    weights = [1.0 / (i + 1) for i in range(len(candidates))]
    next_node = random.choices(candidates, weights=weights, k=1)[0]
    return next_node
