def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if total_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_dist = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        proximity_weight = 0.5 + (0.5 * (total_unvisited / (total_unvisited + 1)))
        lookahead_weight = 1 - proximity_weight

        normalized_distance = distance / (distance_matrix[current_node][destination_node] + 1e-10)
        normalized_lookahead = lookahead_dist / (distance_matrix[current_node][destination_node] + 1e-10)

        total_score = (proximity_weight * (1 - normalized_distance)) + (lookahead_weight * (1 - normalized_lookahead))

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.5:
            next_node = destination_node

    return next_node
