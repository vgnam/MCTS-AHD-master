def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    remaining_distance_to_destination = distance_matrix[current_node][destination_node]
    base_weight = 0.5 / (num_unvisited + 1)

    for node in unvisited_nodes:
        proximity = distance_matrix[current_node][node]
        if num_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            bonus = sum(distance_matrix[node][dest] - distance_matrix[current_node][dest] for dest in remaining_nodes) / num_unvisited
            weight = base_weight * (1 + bonus)
            score = proximity + weight * lookahead
        else:
            score = proximity + distance_matrix[node][destination_node]

        if node == destination_node:
            score *= 0.8

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
