import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Dynamic threshold based on remaining unvisited nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    threshold_multiplier = 1.5 + (1 - remaining_ratio) * 0.5  # Increases as more nodes are visited

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * threshold_multiplier:
            # Probabilistic selection to avoid local minima
            if random.random() < 0.8:  # 80% chance to prioritize destination
                next_node = destination_node
            else:
                # Consider a slightly longer path with some probability
                candidates = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= min_distance * 1.2]
                if candidates:
                    next_node = random.choice(candidates)

    return next_node
