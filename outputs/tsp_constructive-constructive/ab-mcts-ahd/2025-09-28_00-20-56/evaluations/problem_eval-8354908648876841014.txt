default but dynamically overrides this choice if the destination node is within a dynamically calculated threshold (1.5 Ã— average distance) plus a fixed penalty (10% of average distance), ensuring a balance between proximity and progress toward the destination.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = avg_distance * 1.5 + avg_distance * 0.1
        if destination_distance <= dynamic_threshold:
            next_node = destination_node

    return next_node
