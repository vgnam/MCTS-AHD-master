def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        weight = 0.6 if len(unvisited_nodes) > 3 else 0.4
        lookahead_dist = min(unvisited_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
        lookahead_dist = distance_matrix[node][lookahead_dist] + distance_matrix[lookahead_dist][destination_node]
        
        total_score = (remaining_dist / (distance + 1e-10)) * (1 - weight) + (lookahead_dist / (distance + 1e-10)) * weight

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * (1.5 - 0.2 * (len(unvisited_nodes) / 10)):
            next_node = destination_node

    return next_node
