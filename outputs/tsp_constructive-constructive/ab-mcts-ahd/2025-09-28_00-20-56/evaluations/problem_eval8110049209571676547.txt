def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = {}
    num_unvisited = len(unvisited_nodes)
    remaining_distance_to_destination = distance_matrix[current_node][destination_node]
    urgency_factor = 1.0 / (num_unvisited + 1)

    for node in unvisited_nodes:
        proximity = distance_matrix[current_node][node]
        progress_towards_destination = distance_matrix[node][destination_node]
        decay_factor = 1.0 / (proximity + 1)
        score = (proximity * (1 - urgency_factor) + progress_towards_destination * urgency_factor) * decay_factor
        scores[node] = score

    best_node = min(scores, key=scores.get)
    
    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] < scores[best_node]:
        best_node = destination_node

    return next_node
