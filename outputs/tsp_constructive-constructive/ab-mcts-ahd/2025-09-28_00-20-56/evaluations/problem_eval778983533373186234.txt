def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        future_distance = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)
        if future_distance == 0:
            future_penalty = 0
        else:
            future_penalty = future_distance / len(unvisited_nodes)

        weight = 1.0 / (1.0 + len(unvisited_nodes) * 0.1)
        score = (weight * ratio) - ((1 - weight) * future_penalty)
        scores.append((score, node))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.9:
            next_node = destination_node
        else:
            scores.append((1.5 * best_score, destination_node))

    if len(scores) > 1:
        scores.sort(reverse=True)
        top_scores = [s for s in scores if s[0] >= 0.9 * scores[0][0]]
        if len(top_scores) > 1:
            next_node = random.choice(top_scores)[1]

    return next_node
