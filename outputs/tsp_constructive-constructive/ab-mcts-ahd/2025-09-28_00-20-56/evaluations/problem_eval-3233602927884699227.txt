def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            exploration_factor = 0.5 * (1 + 1 / len(unvisited_nodes))
            combined_score = current_dist + exploration_factor * lookahead_dist
        else:
            combined_score = current_dist + distance_matrix[node][destination_node]

        if node == destination_node:
            combined_score *= 0.8
        return combined_score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    normalized_scores = [min_score / score for score in scores]
    total = sum(normalized_scores)
    probabilities = [score / total for score in normalized_scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
