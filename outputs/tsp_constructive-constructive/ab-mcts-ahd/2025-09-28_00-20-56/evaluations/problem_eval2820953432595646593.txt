def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = max(remaining_nodes, key=lambda n: distance_matrix[n][destination_node] / distance_matrix[node][n])
            lookahead_ratio = distance_matrix[best_lookahead][destination_node] / distance_matrix[node][best_lookahead]
            adjusted_lookahead_ratio = lookahead_ratio * (avg_remaining_distance / distance_matrix[node][best_lookahead]) ** 2
        else:
            adjusted_lookahead_ratio = distance_matrix[node][destination_node] / current_dist
        return current_dist + 0.5 * (1 / adjusted_lookahead_ratio)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
