def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None

    # Calculate dynamic threshold based on remaining unvisited nodes
    remaining_nodes_count = len(unvisited_nodes)
    threshold_factor = 0.7 + (0.1 * (10 - remaining_nodes_count) / 10) if remaining_nodes_count <= 10 else 0.8

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Prioritize destination if it's unvisited and meets dynamic threshold
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * threshold_factor:
            next_node = destination_node

    return next_node
