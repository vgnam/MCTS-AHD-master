def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)
    lookahead_weight = 0.5

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2 * (current_dist / avg_remaining_distance)
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return current_dist + lookahead_weight * adjusted_lookahead_dist

    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        total_distance = evaluate_node(node)
        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * 0.8:
            next_node = destination_node

    return next_node
