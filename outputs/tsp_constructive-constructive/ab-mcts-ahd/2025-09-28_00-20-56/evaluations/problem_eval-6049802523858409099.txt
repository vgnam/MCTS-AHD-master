def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        far_from_both = max(current_to_node, node_to_destination)
        penalty = far_from_both ** 2

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Adaptive weight based on remaining nodes and proximity
        adaptive_weight = (len(unvisited_nodes) ** 0.2) * (1 - (current_to_node / (max(distance_matrix[current_node]) + 1e-10)))
        total_score = (node_to_destination / (current_to_node + 1e-10)) * (1 - adaptive_weight) + (lookahead_dist / (current_to_node + 1e-10)) * adaptive_weight - penalty

        if total_score > best_score:
            best_score = total_score
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= node_to_destination * 1.5:  # Threshold to balance proximity and destination
            next_node = destination_node

    return next_node
