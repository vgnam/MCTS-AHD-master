def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    weight_factor = 0.5  # Base weight for balancing

    # Calculate dynamic weight based on destination proximity
    remaining_nodes = len(unvisited_nodes)
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        weight_factor = 0.7 if direct_distance < sum(distance_matrix[current_node]) / len(distance_matrix[current_node]) else 0.3

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + (remaining_distance * weight_factor)

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Add probabilistic selection to escape local optima
    if destination_node in unvisited_nodes and random.random() < 0.3:  # 30% chance to prioritize destination
        next_node = destination_node

    return next_node
