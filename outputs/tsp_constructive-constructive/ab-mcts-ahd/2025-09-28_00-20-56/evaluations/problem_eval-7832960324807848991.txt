def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    farthest_node = max(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])
    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        farthest_distance = distance_matrix[node][farthest_node]
        total_distance = current_distance + farthest_distance

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Prioritize node closer to the farthest unvisited node if within 60% of the smallest total distance
    for node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][node]
        farthest_distance = distance_matrix[node][farthest_node]
        total_distance = direct_distance + farthest_distance
        if total_distance <= min_total_distance * 0.6:
            next_node = node
            break

    return next_node
