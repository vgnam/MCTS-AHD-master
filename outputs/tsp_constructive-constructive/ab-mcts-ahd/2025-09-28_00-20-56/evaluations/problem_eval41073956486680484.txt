import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    threshold = 0.8 if remaining_nodes > 3 else 0.6
    direct_distance = distance_matrix[current_node][destination_node]

    probabilities = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        weight = math.exp(-0.1 * remaining_distance)  # Exponential decay on future distance
        total_distance = current_distance + (weight * remaining_distance)
        probabilities.append(total_distance)

    # Normalize probabilities
    total_prob = sum(probabilities)
    probabilities = [prob / total_prob for prob in probabilities]

    # Probabilistic selection
    next_node = random.choices(list(unvisited_nodes), weights=probabilities, k=1)[0]

    if direct_distance <= min(probabilities) * threshold:
        next_node = destination_node

    return next_node
