def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None
    temperature = 1.5 / (1 + len(unvisited_nodes))

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_dist = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            predictive_factor = (1 / (1 + lookahead_dist)) * (centrality ** 0.7)
            proximity_score = (ratio ** 1.3)
            score = (proximity_score * predictive_factor) * (1 + temperature)
        else:
            score = (ratio ** 1.5)

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.85:
            next_node = destination_node

    return next_node
