def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    temperature = max(1, len(unvisited_nodes) / 10)  # Higher temperature for more exploration

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        proximity_score = current_dist / (sum(distance_matrix[current_node]) + 1e-6)
        potential_score = lookahead_dist / (sum(distance_matrix[node]) + 1e-6)

        combined_score = (1 - temperature) * proximity_score + temperature * potential_score

        # Add historical bias (simulated)
        historical_bias = 0.1 / (1 + len(unvisited_nodes))  # Less bias as nodes are visited
        combined_score += historical_bias

        scores.append(combined_score)

    # Probabilistic selection with temperature
    probabilities = [math.exp(-s / temperature) for s in scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    # Direct path consideration with adjusted threshold
    if destination_node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][destination_node]
        avg_score = sum(scores) / len(scores)
        if direct_dist < avg_score * 0.9:
            next_node = destination_node

    return next_node
