def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes) if unvisited_nodes else 0

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]

            # Dynamic weight adjustment with sigmoid smoothing
            weight_factor = 1 / (1 + math.exp(-(len(unvisited_nodes) - len(distance_matrix) / 2)))
            adjusted_lookahead_dist = lookahead_dist * (1 - weight_factor) + current_dist * weight_factor

            # Exploration bonus based on node density
            node_density = len([n for n in unvisited_nodes if distance_matrix[node][n] < avg_remaining_distance * 0.7])
            exploration_bonus = (len(unvisited_nodes) / (node_density + 1)) * 0.2 * avg_remaining_distance
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
            exploration_bonus = 0

        return current_dist + 0.5 * adjusted_lookahead_dist - exploration_bonus

    # Probabilistic selection based on evaluation scores
    scores = [evaluate_node(node) for node in unvisited_nodes]
    probabilities = [math.exp(-score) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
