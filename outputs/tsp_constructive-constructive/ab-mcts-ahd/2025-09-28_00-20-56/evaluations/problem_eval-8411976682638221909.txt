def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        remaining_count = len(unvisited_nodes)
        weight_immediate = 1 / (remaining_count + 1)
        weight_lookahead = remaining_count / (remaining_count + 1)
        weight_centrality = 1 - (remaining_count / (len(distance_matrix) + 1))

        current_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)

        return (weight_immediate * current_dist +
                weight_lookahead * lookahead_dist +
                weight_centrality * centrality)

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
