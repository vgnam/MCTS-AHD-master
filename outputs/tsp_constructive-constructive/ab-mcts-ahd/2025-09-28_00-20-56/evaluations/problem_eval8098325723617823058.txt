def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        # Dynamic detour penalty: consider top k nodes for detour calculation
        k = min(3, len(unvisited_nodes))  # Limit to top 3 nodes for efficiency
        detour_penalty = 0
        for other_node in sorted(unvisited_nodes, key=lambda x: distance_matrix[node][x])[:k]:
            if other_node != node:
                detour_penalty += (distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) * (1 / (1 + distance_matrix[node][other_node]))

        # Weighted score combining direct distance, remaining distance, and detour penalty
        weight_direct = 0.4
        weight_remaining = 0.3
        weight_detour = 0.3
        return (weight_direct * current_distance) + (weight_remaining * remaining_distance) + (weight_detour * detour_penalty)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
