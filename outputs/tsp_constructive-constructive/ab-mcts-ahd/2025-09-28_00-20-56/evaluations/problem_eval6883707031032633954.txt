import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    candidate_scores = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            closest_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_dist = distance_matrix[node][closest_node] + distance_matrix[closest_node][destination_node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            adaptive_weight = 1 + (len(remaining_nodes) / len(unvisited_nodes))
            score = (ratio ** 1.5) * (centrality / lookahead_dist) * adaptive_weight
        else:
            score = ratio * 1.5

        candidate_scores.append((node, score))

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        candidate_scores.append((destination_node, direct_distance))

    if candidate_scores:
        candidate_scores.sort(key=lambda x: x[1], reverse=True)
        top_candidates = [x[0] for x in candidate_scores[:min(3, len(candidate_scores))]]
        next_node = random.choice(top_candidates)

    return next_node
