def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if total_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        dynamic_weight = 0.3 + 0.7 * (1 - (total_unvisited / (total_unvisited + 1)))
        total_score = (remaining_dist / (distance + 1e-10)) * (1 - dynamic_weight) + (lookahead_dist / (distance + 1e-10)) * dynamic_weight

        if distance > distance_matrix[current_node][best_score] * 1.2 if best_score != -1 else False:
            total_score *= 0.8

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes and len(unvisited_nodes) <= 2:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.3:
            next_node = destination_node

    if next_node is None or (random.random() < 0.1 and total_unvisited > 3):
        next_node = random.choice(unvisited_nodes)

    return next_node
