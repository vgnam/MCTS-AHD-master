def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if current_dist == 0:
            ratio = float('inf')
        else:
            remaining_dist = distance_matrix[node][destination_node]
            ratio = remaining_dist / current_dist

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_dist = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            predictive_factor = (1 / (1 + lookahead_dist)) * (centrality ** 0.6)
            score = (0.8 * current_dist) + (0.2 * predictive_factor)
        else:
            score = current_dist

        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
