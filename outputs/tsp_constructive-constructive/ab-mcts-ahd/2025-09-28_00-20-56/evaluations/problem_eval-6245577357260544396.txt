def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        lookahead_2 = 0
        lookahead_3 = 0

        if len(unvisited_nodes) >= 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_2 = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_2 = distance_matrix[node][best_2] + distance_matrix[best_2][destination_node]

            if len(unvisited_nodes) >= 3:
                remaining_after_2 = [n for n in remaining_nodes if n != best_2]
                best_3 = min(remaining_after_2, key=lambda n: distance_matrix[best_2][n] + distance_matrix[n][destination_node])
                lookahead_3 = distance_matrix[best_2][best_3] + distance_matrix[best_3][destination_node]

        return current_dist + 0.5 * lookahead_2 + 0.25 * lookahead_3

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
