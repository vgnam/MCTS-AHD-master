def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weighting based on remaining nodes
        remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + len(unvisited_nodes) - 1)
        weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

        # Add small randomness to escape local optima
        random_factor = 0.05 * (random.random() - 0.5)
        combined_score = (1 - weight) * current_dist + weight * lookahead_dist + random_factor
        return combined_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
