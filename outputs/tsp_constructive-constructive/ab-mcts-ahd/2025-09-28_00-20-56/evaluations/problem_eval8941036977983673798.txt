def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        lookahead_distance = min([distance_matrix[node][n] + distance_matrix[n][destination_node] for n in unvisited_nodes if n != node])
        nearby_unvisited_penalty = sum(1 for other_node in unvisited_nodes if other_node != node and distance_matrix[node][other_node] < 2)
        total_score = current_distance + lookahead_distance + nearby_unvisited_penalty

        if total_score < min_total_score:
            min_total_score = total_score
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_score * 0.8:
            next_node = destination_node

    return next_node
