import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_decay = 0.5 * (1.0 - len(unvisited_nodes) / len(distance_matrix))
    best_score = -float('inf')
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        future_distance = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)
        if future_distance == 0:
            future_penalty = 0
        else:
            future_penalty = future_distance / len(unvisited_nodes)

        score = (1 - exploration_decay) * ratio - exploration_decay * future_penalty

        if score > best_score:
            best_score = score
            candidates = [node]
        elif score == best_score:
            candidates.append(node)

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.8:
            return destination_node

    if len(candidates) > 1 and random.random() < 0.2:
        return random.choice(candidates)

    return next_node
