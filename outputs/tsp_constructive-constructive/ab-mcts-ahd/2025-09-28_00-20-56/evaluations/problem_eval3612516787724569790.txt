def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_3step = None
            min_3step_dist = float('inf')
            for n1 in remaining_nodes:
                for n2 in remaining_nodes:
                    if n1 != n2:
                        dist = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                        if dist < min_3step_dist:
                            min_3step_dist = dist
                            best_3step = (n1, n2)
            lookahead_dist = min_3step_dist if best_3step else 0
            weight_factor = 0.3 / len(unvisited_nodes)
            combined_score = current_dist + weight_factor * lookahead_dist
        else:
            combined_score = current_dist + distance_matrix[node][destination_node]

        if node == destination_node:
            combined_score *= 0.7
        return combined_score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    probabilities = [math.exp(-score) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
