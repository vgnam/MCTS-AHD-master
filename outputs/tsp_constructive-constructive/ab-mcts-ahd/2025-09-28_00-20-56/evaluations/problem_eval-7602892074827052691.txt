def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        weight = 0.6 if len(unvisited_nodes) > 3 else 0.4
        if len(unvisited_nodes) > 1:
            best_lookahead = min(unvisited_nodes - {node}, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_distance = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_distance = remaining_distance
        total_score = (remaining_distance / (current_distance + 1e-10)) * (1 - weight) + (lookahead_distance / (current_distance + 1e-10)) * weight
        return total_score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
