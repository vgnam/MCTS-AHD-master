def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    weight_factor = 0.5  # Base weight factor

    # Adjust weight factor based on proximity to destination
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= 0.7 * sum(distance_matrix[current_node]) / len(distance_matrix[current_node]):
            weight_factor = 0.8  # Increase weight if destination is very close

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        if current_distance == 0:
            score = float('inf')
        else:
            score = (remaining_distance / current_distance) ** weight_factor

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic override: higher chance to select destination if it has a high score
    if destination_node in unvisited_nodes:
        destination_score = (distance_matrix[current_node][destination_node] / distance_matrix[current_node][next_node]) ** weight_factor
        if destination_score > best_score * 0.9 and random.random() < 0.3:  # 30% chance to override
            next_node = destination_node

    return next_node
