def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        lookahead_distance = min([distance_matrix[node][n] + distance_matrix[n][destination_node] for n in unvisited_nodes])
        nearby_unvisited_penalty = sum(1 for other_node in unvisited_nodes if other_node != node and distance_matrix[node][other_node] < 2)
        remaining_distance = distance_matrix[node][destination_node]
        euclidean_weight = (distance_matrix[node][destination_node] / sum(distance_matrix[node])) * 0.5
        return (1 - euclidean_weight) * (current_distance + nearby_unvisited_penalty) + euclidean_weight * lookahead_distance

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
