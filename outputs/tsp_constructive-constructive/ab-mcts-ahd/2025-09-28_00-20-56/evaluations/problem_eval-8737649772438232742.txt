def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (60% weight)
        current_dist = distance_matrix[current_node][node]
        # Dynamic lookahead (25% weight)
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            following_nodes = [n for n in remaining_nodes if n != best_lookahead]
            if following_nodes:
                best_following = min(following_nodes, key=lambda n: distance_matrix[best_lookahead][n])
                lookahead_dist = (distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][best_following]) / 2
            else:
                lookahead_dist = distance_matrix[node][best_lookahead]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Penalty for revisiting nodes (15% weight)
        revisit_penalty = sum(1 for n in unvisited_nodes if n == node) * 0.1
        # Combine distances
        return 0.6 * current_dist + 0.25 * lookahead_dist + 0.15 * revisit_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
