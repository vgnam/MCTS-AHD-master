def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    remaining_distance_to_destination = distance_matrix[current_node][destination_node]

    dynamic_threshold = remaining_distance_to_destination / (num_unvisited + 1)

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        euclidean_weight = (remaining_dist / sum(distance_matrix[node])) * 0.7
        balanced_dist = (1 - euclidean_weight) * current_dist + euclidean_weight * lookahead_dist

        if balanced_dist < dynamic_threshold:
            score = balanced_dist

            if score < min_score:
                min_score = score
                next_node = node

    if next_node is None:
        for node in unvisited_nodes:
            distance = distance_matrix[current_node][node]
            if distance < min_score:
                min_score = distance
                next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_score:
            next_node = destination_node

    return next_node
