def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_distance = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_distance = distance_matrix[node][destination_node]

        weight = 0.5 + 0.1 * (len(unvisited_nodes) / 10)
        score = (remaining_distance / (current_distance + 1e-10)) * (1 - weight) + (lookahead_distance / (current_distance + 1e-10)) * weight

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_score * 1.1:  # Strict threshold
            next_node = destination_node

    return next_node
