def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1
    node_scores = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Adaptive weight based on node density
        density = len(unvisited_nodes) / len(distance_matrix)
        weight = 0.7 * (1 - density) + 0.3

        # Normalized scores
        norm_distance = distance / (sum(distance_matrix[current_node]) + 1e-10)
        norm_remaining = remaining_dist / (sum(distance_matrix[node]) + 1e-10)
        norm_lookahead = lookahead_dist / (sum(distance_matrix[best_lookahead]) + 1e-10) if len(unvisited_nodes) > 1 else norm_remaining

        total_score = (1 - norm_distance) * (1 - weight) + (1 - norm_lookahead) * weight
        node_scores.append((node, total_score))

    # Probabilistic selection based on scores
    if node_scores:
        nodes, scores = zip(*node_scores)
        probs = [s / sum(scores) for s in scores]
        next_node = np.random.choice(nodes, p=probs)

    # Dynamic threshold for destination prioritization
    if destination_node in unvisited_nodes:
        dest_score = (1 - distance_matrix[current_node][destination_node] / (sum(distance_matrix[current_node]) + 1e-10)) * (1 - weight)
        avg_score = sum(s for _, s in node_scores) / len(node_scores) if node_scores else 0
        if dest_score > avg_score * (1 + 0.1 * (1 - len(unvisited_nodes) / len(distance_matrix))):
            next_node = destination_node

    return next_node
