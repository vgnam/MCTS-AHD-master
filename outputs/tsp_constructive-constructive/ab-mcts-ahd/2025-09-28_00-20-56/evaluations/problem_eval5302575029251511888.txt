def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / (len(distance_matrix) - 1)
    w_immediate = 0.6 * remaining_ratio
    w_lookahead = 0.25 * (1 - remaining_ratio)
    w_avg = 0.15

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # Lookahead to next node
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Average distance of remaining nodes
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        # Novelty factor: penalize recently visited nodes
        novelty_penalty = 1.0 if node in unvisited_nodes else 1.5
        # Combine distances
        return (w_immediate * current_dist + w_lookahead * lookahead_dist + w_avg * avg_dist) * novelty_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
