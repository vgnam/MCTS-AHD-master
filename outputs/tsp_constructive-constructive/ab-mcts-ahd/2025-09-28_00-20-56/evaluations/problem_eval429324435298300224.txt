def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_dist = distance_matrix[node][best_lookahead]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Balanced score with a small lookahead weight
        score = 0.9 * (1 / (distance + 1e-10)) + 0.1 * (1 / (lookahead_dist + 1e-10))

        if score > best_score:
            best_score = score
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.5:
            next_node = destination_node

    return next_node
