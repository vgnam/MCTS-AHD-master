import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -1
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        local_optimality = sum(
            min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            if unvisited_nodes else 0
        )

        score = ratio * 0.7 + local_optimality * 0.3

        if score > best_score:
            best_score = score
            next_node = node
            candidates = [node]
        elif score == best_score:
            candidates.append(node)

    if random.random() < 0.3 and unvisited_nodes:
        nearest_node = min(
            unvisited_nodes,
            key=lambda n: distance_matrix[current_node][n]
        )
        if nearest_node in candidates:
            next_node = nearest_node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.8:
            next_node = destination_node

    return next_node
