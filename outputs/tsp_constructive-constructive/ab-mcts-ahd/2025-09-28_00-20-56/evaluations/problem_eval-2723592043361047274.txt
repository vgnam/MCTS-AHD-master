def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_tour_length_penalty = sum(distance_matrix[current_node][other_node] for other_node in unvisited_nodes if other_node != node)
        overall_distance_traveled = sum(distance_matrix[prev_node][next_node] for prev_node, next_node in zip([current_node] + list(unvisited_nodes), list(unvisited_nodes) + [destination_node]))
        return current_distance + 0.2 * total_tour_length_penalty + 0.1 * remaining_distance + 0.05 * overall_distance_traveled

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
