def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        future_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))
        return 0.4 * current_distance + 0.6 * (future_factor * remaining_distance) + 0.3 * detour_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
