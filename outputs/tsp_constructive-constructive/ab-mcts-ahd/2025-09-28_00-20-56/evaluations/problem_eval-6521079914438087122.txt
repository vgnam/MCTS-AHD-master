def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    remaining_nodes_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if remaining_nodes_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        dynamic_weight = 0.7 if remaining_nodes_count > 3 else 0.3
        score = (1 - dynamic_weight) * (remaining_dist / (immediate_dist + 1e-10)) + dynamic_weight * (lookahead_dist / (immediate_dist + 1e-10))

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] <= 1.5 * min(distance_matrix[current_node][node] for node in unvisited_nodes):
        next_node = destination_node

    return next_node
