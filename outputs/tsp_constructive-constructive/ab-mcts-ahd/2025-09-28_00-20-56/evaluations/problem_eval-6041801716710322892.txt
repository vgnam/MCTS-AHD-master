def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if current_dist == 0:
            ratio = float('inf')
        else:
            ratio = remaining_dist / current_dist

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        euclidean_weight = (remaining_dist / sum(distance_matrix[node])) * 0.5
        total_score = ratio * (1 - euclidean_weight) + (lookahead_dist / (current_dist + 1e-10)) * euclidean_weight

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.9:
            next_node = destination_node

    return next_node
