def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_lookahead = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Dynamic threshold based on remaining nodes
    remaining_count = len(unvisited_nodes)
    threshold_multiplier = 1.5 - 0.1 * (remaining_count / 10)  # Adjust threshold dynamically

    # Check lookahead distance
    if len(unvisited_nodes) > 1:
        remaining_nodes = [n for n in unvisited_nodes if n != next_node]
        best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[next_node][n] + distance_matrix[n][destination_node])

    # Prioritize destination node if it's unvisited and within the adjusted threshold
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if best_lookahead and distance_matrix[next_node][best_lookahead] + distance_matrix[best_lookahead][destination_node] < destination_distance:
            lookahead_threshold = distance_matrix[next_node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_threshold = distance_matrix[current_node][next_node]

        if destination_distance <= lookahead_threshold * threshold_multiplier:
            next_node = destination_node

    return next_node
