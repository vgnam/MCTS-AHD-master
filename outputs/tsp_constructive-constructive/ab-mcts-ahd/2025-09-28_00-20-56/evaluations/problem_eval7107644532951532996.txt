import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # 3-step lookahead: find the best path in two steps ahead
            best_lookahead = None
            best_lookahead_dist = float('inf')
            for n1 in remaining_nodes:
                remaining_nodes_after_n1 = [n for n in remaining_nodes if n != n1]
                for n2 in remaining_nodes_after_n1:
                    total_dist = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                    if total_dist < best_lookahead_dist:
                        best_lookahead_dist = total_dist
                        best_lookahead = n2
            if best_lookahead is not None:
                lookahead_dist = best_lookahead_dist
            else:
                lookahead_dist = distance_matrix[node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Logarithmic adjustment factor to balance short and long-term
        if lookahead_dist > 0:
            log_factor = math.log(lookahead_dist + 1)  # Avoid log(0)
            adjusted_lookahead_dist = lookahead_dist * (1 / log_factor)
        else:
            adjusted_lookahead_dist = lookahead_dist

        # Add small random perturbation to escape local optima
        random_factor = 1 + 0.1 * random.random()

        return (0.7 * current_dist + 0.3 * adjusted_lookahead_dist) * random_factor

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
