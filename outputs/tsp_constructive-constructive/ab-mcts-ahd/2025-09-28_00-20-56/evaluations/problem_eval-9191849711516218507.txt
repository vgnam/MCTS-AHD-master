def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Dynamic threshold based on average distance
    threshold = avg_distance * 1.2

    # Prioritize destination node if within dynamic threshold
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= threshold:
            next_node = destination_node

    # Additional hub prioritization: select node with highest sum of distances to other unvisited nodes
    hub_score = -1
    for node in unvisited_nodes:
        sum_distances = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        if sum_distances > hub_score and distance_matrix[current_node][node] <= threshold:
            hub_score = sum_distances
            next_node = node

    return next_node
