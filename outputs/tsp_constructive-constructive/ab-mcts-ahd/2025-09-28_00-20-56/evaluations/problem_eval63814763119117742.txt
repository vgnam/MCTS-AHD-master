def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    decay_factor = 1.0 / (1.0 + 0.1 * total_unvisited)  # Decreases as more nodes are visited

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Dynamic weighting with decay
        combined_score = current_dist + decay_factor * lookahead_dist
        return combined_score

    candidates = sorted(unvisited_nodes, key=evaluate_node)
    if len(candidates) > 1 and evaluate_node(candidates[0]) - evaluate_node(candidates[1]) < 0.1 * distance_matrix[current_node][destination_node]:
        # Probabilistic selection if scores are similar
        return random.choice(candidates[:2])
    return next_node
