def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 1:
        return unvisited_nodes[0]

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if total_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        avg_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        weight_immediate = 0.7 * (total_unvisited / (total_unvisited + len(unvisited_nodes)))
        weight_lookahead = 0.3 * (1 - (total_unvisited / (total_unvisited + len(unvisited_nodes))))
        weight_avg = 0.1 * (1 - (total_unvisited / (total_unvisited + len(unvisited_nodes))))

        return weight_immediate * current_dist + weight_lookahead * lookahead_dist + weight_avg * avg_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
