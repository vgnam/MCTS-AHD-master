def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead1 = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_nodes_after1 = [n for n in remaining_nodes if n != best_lookahead1]
            best_lookahead2 = min(remaining_nodes_after1, key=lambda n: distance_matrix[best_lookahead1][n])
            remaining_nodes_after2 = [n for n in remaining_nodes_after1 if n != best_lookahead2]
            best_lookahead3 = min(remaining_nodes_after2, key=lambda n: distance_matrix[best_lookahead2][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead1] + distance_matrix[best_lookahead1][best_lookahead2] + distance_matrix[best_lookahead2][best_lookahead3] + distance_matrix[best_lookahead3][destination_node]
            adjusted_lookahead_dist = lookahead_dist * math.log(1 + avg_remaining_distance / lookahead_dist)
        elif len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * math.log(1 + avg_remaining_distance / lookahead_dist)
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return 0.7 * current_dist + 0.3 * adjusted_lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
