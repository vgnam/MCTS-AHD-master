def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return destination_node

    # Calculate average distance to unvisited nodes
    total_distance = 0
    for node in unvisited_nodes:
        total_distance += distance_matrix[current_node][node]
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Weighted sum: prioritize nodes that are close to current and destination
        weighted_distance = 0.7 * current_distance + 0.3 * remaining_distance

        if weighted_distance < min_total_distance:
            min_total_distance = weighted_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is within a fraction of the average distance
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= avg_distance * 0.6:  # More flexible threshold
            next_node = destination_node

    return next_node
