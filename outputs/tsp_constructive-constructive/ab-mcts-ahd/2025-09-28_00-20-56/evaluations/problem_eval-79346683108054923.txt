def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        # Calculate centrality score (average distance to all nodes)
        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes

        # Combine ratio and centrality with dynamic weights
        weight = 0.7 if len(unvisited_nodes) > total_nodes // 2 else 0.3
        score = (weight * ratio) + ((1 - weight) * (1 / centrality))

        if score > best_score:
            best_score = score
            next_node = node

    # Probabilistic override for high-centrality nodes
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        centrality_dest = sum(distance_matrix[destination_node][other] for other in range(total_nodes)) / total_nodes
        if direct_distance <= best_score * 0.9 or (centrality_dest > 1.5 * centrality and random.random() < 0.2):
            next_node = destination_node

    return next_node
