def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    # Calculate average distance to unvisited nodes
    total_distance = 0
    for node in unvisited_nodes:
        total_distance += distance_matrix[current_node][node]
    avg_distance = total_distance / len(unvisited_nodes) if unvisited_nodes else 0

    # Dynamic threshold based on remaining unvisited nodes
    threshold_factor = 1.0 + (0.5 * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix) - 1)))

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Prioritize destination node if it's unvisited and within dynamic threshold
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * threshold_factor and destination_distance <= avg_distance * 1.5:
            next_node = destination_node

    return next_node
