defaulting to the destination node when direct distance is sufficiently short. Design idea: Combine the ratio-based heuristic of No.1 with the 2-step lookahead mechanism of No.2 to balance short-term and long-term optimization while prioritizing nodes with a high remaining distance to destination ratio.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if current_dist == 0:
            ratio = float('inf')
        else:
            remaining_dist = distance_matrix[node][destination_node]
            ratio = remaining_dist / current_dist

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        
        combined_score = ratio + 0.5 * lookahead_dist
        return combined_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    direct_distance = distance_matrix[current_node][destination_node]
    best_ratio = min(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node] / (distance_matrix[current_node][node] if distance_matrix[current_node][node] != 0 else float('inf')))

    if direct_distance <= 0.9 * (distance_matrix[best_ratio][destination_node] / (distance_matrix[current_node][best_ratio] if distance_matrix[current_node][best_ratio] != 0 else float('inf'))):
        next_node = destination_node

    return next_node
