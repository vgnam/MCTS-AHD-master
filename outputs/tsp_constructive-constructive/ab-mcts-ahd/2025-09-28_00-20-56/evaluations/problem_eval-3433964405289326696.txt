def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    exploration_prob = 0.1 / remaining_count if remaining_count > 0 else 0.1

    if np.random.rand() < exploration_prob:
        return np.random.choice(unvisited_nodes)

    min_distance = float('inf')
    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        dynamic_weight = 0.5 * (1 - (remaining_count / len(unvisited_nodes))) if len(unvisited_nodes) > 0 else 0.5
        distance_ratio = remaining_dist / (distance + 1e-10)
        lookahead_ratio = lookahead_dist / (distance + 1e-10)

        total_score = (distance_ratio * (1 - dynamic_weight)) + (lookahead_ratio * dynamic_weight)
        total_score -= 0.2 * (remaining_count / (len(unvisited_nodes) + 1e-10))

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.5:
            next_node = destination_node

    return next_node
