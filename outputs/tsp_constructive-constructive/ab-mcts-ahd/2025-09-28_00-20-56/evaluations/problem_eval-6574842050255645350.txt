importance, using a hybrid scoring mechanism that combines ratio-based selection with a novel "opportunity cost" heuristic to prioritize nodes that minimize future path constraints while maximizing immediate gains.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        if total_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_dist = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
            global_centrality = sum(distance_matrix[n][node] for n in remaining_nodes) / len(remaining_nodes)
            local_centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            dynamic_centrality = (global_centrality + local_centrality) / 2

            opportunity_cost = sum(distance_matrix[node][n] for n in remaining_nodes if distance_matrix[node][n] < lookahead_dist)
            score = (ratio * dynamic_centrality) / (1 + opportunity_cost)
        else:
            score = ratio

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= best_score * 0.9:
            next_node = destination_node

    return next_node
