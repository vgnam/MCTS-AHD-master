def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        proximity_penalty = sum(distance_matrix[node][other_node] for other_node in unvisited_nodes if other_node != node)
        weight = 0.5 + 0.5 * (num_unvisited / (num_unvisited + 1))
        score = weight * current_distance + (1 - weight) * (remaining_distance + (proximity_penalty / num_unvisited))

        if node == destination_node:
            threshold = 0.85 - 0.03 * (num_unvisited / (num_unvisited + 1))
            if current_distance <= score * threshold:
                return -float('inf')

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
