def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        if num_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        euclidean_weight = (remaining_distance / sum(distance_matrix[node])) * 0.6
        total_score = ratio * (1 - euclidean_weight) + (lookahead_dist / (current_distance + 1e-10)) * euclidean_weight

        if node == destination_node:
            threshold = 0.85 - 0.05 * (num_unvisited / (num_unvisited + 1))
            if current_distance <= total_score * threshold:
                return float('-inf')

        return total_score

    next_node = max(unvisited_nodes, key=calculate_score)
    return next_node
