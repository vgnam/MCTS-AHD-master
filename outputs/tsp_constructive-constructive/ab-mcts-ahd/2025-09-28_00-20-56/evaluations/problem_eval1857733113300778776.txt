def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = sum(
            max(0, current_distance + distance_matrix[node][other] - distance_matrix[current_node][other])
            for other in unvisited_nodes if other != node
        )

        base_score = current_distance + remaining_distance
        adjusted_penalty = detour_penalty * (num_unvisited / (num_unvisited + 1)) * (remaining_distance / total_remaining_distance)

        if node == destination_node:
            threshold = 0.8 * (1 - (num_unvisited / (num_unvisited + 1)))
            if current_distance <= base_score * threshold:
                return -float('inf')

        return base_score + adjusted_penalty

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
