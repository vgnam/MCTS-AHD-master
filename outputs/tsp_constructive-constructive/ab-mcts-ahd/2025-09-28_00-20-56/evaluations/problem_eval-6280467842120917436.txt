def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    dynamic_weight = 1.0 / num_unvisited if num_unvisited > 0 else 1.0

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        proximity_bonus = 1.0 / (1.0 + current_distance) if current_distance > 0 else 1.0
        destination_bonus = 1.0 / (1.0 + remaining_distance) if remaining_distance > 0 else 1.0

        detour_penalty = sum(max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in unvisited_nodes if other_node != node)
        normalized_detour = detour_penalty * dynamic_weight

        score = (current_distance * 0.4 + remaining_distance * 0.4 +
                 normalized_detour * 0.2 +
                 proximity_bonus * 0.1 + destination_bonus * 0.1)
        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
