def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    closest_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            closest_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = 1.5 + (0.5 * (destination_distance / (avg_distance + 1e-6)))
        if destination_distance <= min_distance * dynamic_threshold:
            prob = 0.7 + 0.3 * (min_distance / (destination_distance + 1e-6))
            if random.random() < prob:
                return destination_node

    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weight = (1 / (distance + 1e-6)) * (1 + random.uniform(0, 0.2))
        weights.append(weight)

    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    return next_node
