def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            first_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            second_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[first_lookahead][n])
            third_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[second_lookahead][n])
            lookahead_dist = (distance_matrix[node][first_lookahead] +
                              distance_matrix[first_lookahead][second_lookahead] +
                              distance_matrix[second_lookahead][third_lookahead]) / 3
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        
        novelty_factor = len(unvisited_nodes) / (1 + sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))
        return current_dist + 0.5 * adjusted_lookahead_dist - 0.1 * novelty_factor

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
