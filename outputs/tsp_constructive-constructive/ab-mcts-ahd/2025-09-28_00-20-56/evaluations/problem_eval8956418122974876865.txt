def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        combined_score = current_dist

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            weight_factor = 0.5 / len(unvisited_nodes)
            combined_score += weight_factor * lookahead_dist

            if len(remaining_nodes) > 1:
                next_remaining_nodes = [n for n in remaining_nodes if n != best_lookahead]
                best_3step = min(next_remaining_nodes, key=lambda n: distance_matrix[best_lookahead][n] + distance_matrix[n][destination_node])
                lookahead_3step = distance_matrix[best_lookahead][best_3step] + distance_matrix[best_3step][destination_node]
                combined_score += 0.3 / len(unvisited_nodes) * lookahead_3step

        else:
            combined_score += distance_matrix[node][destination_node]

        if node == destination_node:
            combined_score *= 0.8
        return combined_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
