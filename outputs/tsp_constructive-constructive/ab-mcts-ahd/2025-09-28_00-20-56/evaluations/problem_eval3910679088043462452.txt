def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # Dynamic lookahead: average distance to remaining nodes
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_lookahead = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_lookahead = distance_matrix[node][destination_node]
        # Combine with probabilistic weight
        return current_dist + 0.7 * avg_lookahead

    # Probabilistic selection based on evaluation scores
    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    # Normalize scores to probabilities (inverse relationship)
    probs = [(max_score - score + 1) / (max_score - min_score + 1) for score in scores]
    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
