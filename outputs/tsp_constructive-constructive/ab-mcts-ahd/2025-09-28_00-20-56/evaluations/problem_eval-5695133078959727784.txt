def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_penalty = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes)
        else:
            lookahead_penalty = remaining_dist

        dynamic_weight = 0.5 * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
        score = (1 / (distance + 1e-10)) * (1 - dynamic_weight) + (1 / (lookahead_penalty + 1e-10)) * dynamic_weight

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= best_score * 1.2:
            next_node = destination_node

    return next_node
