def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate average shortest path to destination from unvisited nodes
    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes) if unvisited_nodes else float('inf')

    min_weighted_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        # Use an exponential decay factor to prioritize nodes closer to the destination
        weighted_distance = current_distance + remaining_distance * (avg_remaining_distance / (remaining_distance + 1))
        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    # Dynamically prioritize destination if it's unvisited and the path to it is within the dynamic threshold
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = avg_remaining_distance * 0.6  # Less aggressive threshold
        if direct_distance <= dynamic_threshold:
            next_node = destination_node

    return next_node
