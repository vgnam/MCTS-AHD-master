def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        min_remaining_dist = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
        lookahead_dist = distance_matrix[node][min_remaining_dist] + distance_matrix[min_remaining_dist][destination_node]
        
        # Dynamic penalty for nodes far from both current and destination
        penalty = 0.1 * (current_to_node + node_to_destination) if len(unvisited_nodes) > 3 else 0
        
        # Adaptive weight
        weight = 0.7 if len(unvisited_nodes) > 6 else 0.5
        
        # Score calculation with penalty
        total_score = (node_to_destination / (current_to_node + 1e-10)) * (1 - weight) + \
                      (lookahead_dist / (current_to_node + 1e-10)) * weight - penalty

        if total_score > best_score:
            best_score = total_score
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        dest_dist = distance_matrix[current_node][destination_node]
        if dest_dist <= best_score and dest_dist <= min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n]) * 1.25:
            next_node = destination_node

    return next_node
