def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = remaining_count + 1  # +1 for current node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        # Dynamic weighting using sigmoid function
        progress = 1 - (remaining_count / total_nodes)
        weight = 1 / (1 + math.exp(-10 * (progress - 0.5)))

        return current_dist * (1 - weight) + lookahead_dist * weight

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
