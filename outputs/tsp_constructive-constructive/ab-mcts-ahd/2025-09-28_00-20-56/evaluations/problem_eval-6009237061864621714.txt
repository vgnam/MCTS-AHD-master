importance using thresholds. New algorithm design: Similar to No.2, but also incorporate a threshold-based destination proximity check to balance node scoring.}

{Design idea: Combine distance from current node, proximity to destination, and detour penalty, with a threshold to prioritize destination when close.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        score = current_distance + remaining_distance + detour_penalty
        return score if not (remaining_distance <= current_distance * 1.5) else remaining_distance
    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
