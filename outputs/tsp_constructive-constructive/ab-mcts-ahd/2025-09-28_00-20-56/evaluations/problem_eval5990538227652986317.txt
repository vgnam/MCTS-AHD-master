def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        remaining_count = len(unvisited_nodes)
        weight_immediate = 0.7
        weight_lookahead = 0.3
        current_dist = distance_matrix[current_node][node]

        if remaining_count > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_first_step = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_after_first = [n for n in remaining_nodes if n != best_first_step]
            if remaining_after_first:
                best_second_step = min(remaining_after_first, key=lambda n: distance_matrix[best_first_step][n])
                lookahead_dist = distance_matrix[node][best_first_step] + distance_matrix[best_first_step][best_second_step] + distance_matrix[best_second_step][destination_node]
            else:
                lookahead_dist = distance_matrix[node][best_first_step] + distance_matrix[best_first_step][destination_node]
        elif remaining_count == 2:
            next_node = [n for n in unvisited_nodes if n != node][0]
            lookahead_dist = distance_matrix[node][next_node] + distance_matrix[next_node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        return weight_immediate * current_dist + weight_lookahead * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
