def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]
        adjusted_remaining_dist = remaining_dist * (avg_remaining_distance / remaining_dist) ** 2
        return current_dist + 0.5 * adjusted_remaining_dist

    next_node = min(unvisited_nodes, key=evaluate_node)

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        best_ratio = min(distance_matrix[node][destination_node] / distance_matrix[current_node][node] for node in unvisited_nodes)
        if direct_distance <= best_ratio * 0.9:
            next_node = destination_node

    return next_node
