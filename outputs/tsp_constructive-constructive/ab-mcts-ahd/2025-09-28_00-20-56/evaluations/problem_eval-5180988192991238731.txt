import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = max(0.1, 1.0 - (len(unvisited_nodes) / len(distance_matrix)))
    
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        
        score = current_dist + lookahead_dist
        return np.exp(-score / temperature)

    total_score = sum(evaluate_node(node) for node in unvisited_nodes)
    probabilitiez = [evaluate_node(node) / total_score for node in unvisited_nodes]
    next_node = np.random.choice(list(unvisited_nodes), p=probabilitiez)
    return next_node
