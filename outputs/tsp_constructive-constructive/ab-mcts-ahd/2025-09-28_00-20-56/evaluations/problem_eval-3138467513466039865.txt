def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (60% weight)
        current_dist = distance_matrix[current_node][node]
        # Lookahead to next node (25% weight)
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_dist = distance_matrix[node][best_lookahead]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Penalize high average distance to remaining nodes (15% weight)
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        # Combine distances
        return 0.6 * current_dist + 0.25 * lookahead_dist + 0.15 * avg_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
