def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    best_ratio = -1
    next_node = None

    # Calculate average distance to unvisited nodes
    total_distances = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distances / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        if ratio > best_ratio:
            best_ratio = ratio
            next_node = node

        if total_distance < min_total_distance:
            min_total_distance = total_distance

    # Dynamic threshold for destination prioritization
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = min(0.8, 0.6 + (avg_distance / min_total_distance) * 0.2)
        if direct_distance <= min_total_distance * dynamic_threshold:
            next_node = destination_node

    return next_node
