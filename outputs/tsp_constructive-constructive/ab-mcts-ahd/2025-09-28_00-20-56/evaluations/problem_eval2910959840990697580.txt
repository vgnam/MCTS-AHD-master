importance of lookahead distances based on average remaining distance, while incorporating centrality-based adjustments to prioritize nodes that are both close and centrally located in the remaining graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                distance_matrix[n][k] + distance_matrix[k][destination_node] for k in remaining_nodes if k != n))
            lookahead_dist = distance_matrix[node][best_lookahead] + min(
                distance_matrix[best_lookahead][k] + distance_matrix[k][destination_node] for k in remaining_nodes if k != best_lookahead)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            efficiency_factor = (avg_remaining_distance / centrality) ** 0.5
            adjusted_lookahead_dist = lookahead_dist * efficiency_factor * (avg_remaining_distance / lookahead_dist) ** 1.5
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        return current_dist * 0.5 + adjusted_lookahead_dist * 0.5

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
