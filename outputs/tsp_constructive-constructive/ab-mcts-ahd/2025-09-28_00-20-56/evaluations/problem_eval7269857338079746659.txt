def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance (70% weight)
        current_dist = distance_matrix[current_node][node] * 0.7

        # Adaptive 2-3 step lookahead (30% weight, increasing to 40% for fewer remaining nodes)
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            min_lookahead = float('inf')

            for first_step in remaining_nodes:
                remaining_after_first = [n for n in remaining_nodes if n != first_step]
                if len(remaining_after_first) > 0:
                    for second_step in remaining_after_first:
                        if len(remaining_after_first) > 1:
                            for third_step in remaining_after_first:
                                if third_step != second_step:
                                    lookahead_dist = (distance_matrix[node][first_step] +
                                                      distance_matrix[first_step][second_step] +
                                                      distance_matrix[second_step][third_step] +
                                                      distance_matrix[third_step][destination_node])
                                    if lookahead_dist < min_lookahead:
                                        min_lookahead = lookahead_dist
                                        best_lookahead = third_step
                        else:
                            lookahead_dist = (distance_matrix[node][first_step] +
                                              distance_matrix[first_step][second_step] +
                                              distance_matrix[second_step][destination_node])
                            if lookahead_dist < min_lookahead:
                                min_lookahead = lookahead_dist
                                best_lookahead = second_step

            if best_lookahead is not None:
                lookahead_dist = min_lookahead
            else:
                # Fallback to 2-step if no 3-step path found
                best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
                lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            # Direct to destination for 1 or 2 remaining nodes
            lookahead_dist = distance_matrix[node][destination_node]

        # Combine with adaptive weight
        weight = 0.3 if len(unvisited_nodes) > 5 else 0.4
        return current_dist + weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
