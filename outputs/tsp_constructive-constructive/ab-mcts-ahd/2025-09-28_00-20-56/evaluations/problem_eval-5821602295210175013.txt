def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate average shortest path to destination from unvisited nodes
    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    min_total_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        # Introduce an exponential decay factor to prioritize closer nodes to destination
        total_distance = current_distance + remaining_distance * (avg_remaining_distance / remaining_distance)

        if total_distance < min_total_distance:
            min_total_distance = total_distance
            next_node = node

    # Dynamically set threshold based on average remaining distance
    dynamic_threshold = avg_remaining_distance * 0.85
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= dynamic_threshold:
            next_node = destination_node

    return next_node
