def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    total_distance = 0
    count = 0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        total_distance += distance
        count += 1
        if distance < min_distance:
            min_distance = distance
            next_node = node

    avg_distance = total_distance / count if count > 0 else 0

    # Dynamic threshold based on average distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= avg_distance * 1.3:  # Adjusted threshold
            # Probabilistic selection: higher chance for closer nodes
            if next_node is not None and destination_distance > min_distance:
                prob = min_distance / destination_distance
                if random.random() < prob:
                    next_node = destination_node

    return next_node
