def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        exploration_factor = len(unvisited_nodes) / len(distance_matrix) if distance_matrix else 1.0

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        penalty = 1.0 + (0.5 * (1 - exploration_factor)) if node in unvisited_nodes else 1.0

        combined_score = (0.6 * current_dist + 0.3 * lookahead_dist + 0.1 * avg_dist) * penalty

        if exploration_factor < 0.3 and len(unvisited_nodes) > 2:
            combined_score *= (1.0 + 0.2 * (1 - exploration_factor))

        return combined_score

    candidates = unvisited_nodes
    if len(candidates) > 1:
        candidate_scores = [evaluate_node(node) for node in candidates]
        min_score = min(candidate_scores)
        best_candidates = [node for node, score in zip(candidates, candidate_scores) if score == min_score]
        next_node = best_candidates[0] if len(best_candidates) == 1 else min(best_candidates, key=lambda n: distance_matrix[current_node][n])
    else:
        next_node = candidates[0]

    return next_node
