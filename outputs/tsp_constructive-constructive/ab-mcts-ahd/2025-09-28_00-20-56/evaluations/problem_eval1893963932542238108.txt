def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]

            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            efficiency_factor = (avg_remaining_distance / centrality) ** 0.5
            adjusted_lookahead_dist = lookahead_dist * efficiency_factor

            weight = 0.7 if len(unvisited_nodes) > 3 else 0.3
            total_score = (remaining_dist / (current_dist + 1e-10)) * (1 - weight) + (adjusted_lookahead_dist / (current_dist + 1e-10)) * weight
        else:
            total_score = remaining_dist / (current_dist + 1e-10)

        random_factor = 1.0 + 0.2 * (1 - (current_dist / (current_dist + remaining_dist)))
        return total_score * random_factor

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
