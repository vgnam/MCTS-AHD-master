def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = None
            best_lookahead_score = float('inf')

            for n1 in remaining_nodes:
                for n2 in [n for n in remaining_nodes if n != n1]:
                    score = distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][destination_node]
                    if score < best_lookahead_score:
                        best_lookahead_score = score
                        best_lookahead = n1
            lookahead_dist = best_lookahead_score if best_lookahead else distance_matrix[node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]

        return current_dist + 0.3 * lookahead_dist

    scores = [evaluate_node(node) for node in unvisited_nodes]
    probabilities = [math.exp(-score / max(scores)) for score in scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
