importance of immediate distance and lookahead based on the ratio of unvisited nodes to visited nodes, aiming to balance exploration and exploitation more adaptively.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    visited_count = len(distance_matrix) - len(unvisited_nodes)
    weight_immediate = (visited_count + 1) / (visited_count + 2)
    weight_lookahead = 1 - weight_immediate

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        return weight_immediate * current_dist + weight_lookahead * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
