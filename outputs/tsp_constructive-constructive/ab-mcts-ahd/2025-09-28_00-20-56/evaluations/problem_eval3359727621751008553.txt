def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        penalty = (current_to_node + node_to_destination) / len(unvisited_nodes)
        
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_distance = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_distance = node_to_destination

        adaptive_weight = 0.5 if len(unvisited_nodes) > 3 else 0.3  # More emphasis on immediate distance as nodes are fewer
        heuristic_reward = 1 / (node_to_destination + 1e-10)  # Reward closer nodes to destination
        total_score = heuristic_reward * ((1 - adaptive_weight) * (current_to_node / (penalty + 1e-10)) + 
                                         adaptive_weight * (lookahead_distance / (penalty + 1e-10)))

        if total_score > best_score:
            best_score = total_score
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min([distance_matrix[current_node][n] for n in unvisited_nodes]) * 1.2:
            next_node = destination_node

    return next_node
