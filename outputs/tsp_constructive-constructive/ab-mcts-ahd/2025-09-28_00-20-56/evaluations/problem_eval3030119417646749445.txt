def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        combined_distance = current_distance + dest_distance

        # Calculate penalty based on distance from current and destination
        penalty = (combined_distance ** 2) / (current_distance * dest_distance + 1e-10)

        # Exponential decay factor based on remaining nodes
        decay_factor = 0.9 ** len(unvisited_nodes)

        # Calculate total score considering penalty and decay
        total_score = penalty * decay_factor

        if total_score < min_score:
            min_score = total_score
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_score * 1.5:  # Threshold to balance proximity and destination
            next_node = destination_node

    return next_node
