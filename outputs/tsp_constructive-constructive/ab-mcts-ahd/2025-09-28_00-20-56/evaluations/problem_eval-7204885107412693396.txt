def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if num_unvisited > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        euclidean_weight = (remaining_dist / sum(distance_matrix[node])) * 0.7
        balanced_dist = (1 - euclidean_weight) * current_dist + euclidean_weight * lookahead_dist

        future_cost = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)
        if future_cost == 0:
            future_penalty = 0
        else:
            future_penalty = future_cost / num_unvisited

        score = balanced_dist + 0.3 * future_penalty

        if node == destination_node:
            threshold = 0.8 - 0.05 * (num_unvisited / (num_unvisited + 1))
            if current_dist <= score * threshold:
                return -float('inf')

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
