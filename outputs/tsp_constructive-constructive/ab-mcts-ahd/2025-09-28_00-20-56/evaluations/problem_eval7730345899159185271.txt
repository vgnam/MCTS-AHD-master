def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        # Immediate distance
        current_dist = distance_matrix[current_node][node]
        # Lookahead to next 3 nodes
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            # Find the best 2-step lookahead first
            best_second_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_after_second = [n for n in remaining_nodes if n != best_second_node]
            if remaining_after_second:
                best_third_node = min(remaining_after_second, key=lambda n: distance_matrix[best_second_node][n] + distance_matrix[n][destination_node])
                lookahead_dist = distance_matrix[node][best_second_node] + distance_matrix[best_second_node][best_third_node] + distance_matrix[best_third_node][destination_node]
            else:
                lookahead_dist = distance_matrix[node][best_second_node] + distance_matrix[best_second_node][destination_node]
        elif len(unvisited_nodes) > 1:
            best_second_node = min([n for n in unvisited_nodes if n != node], key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_second_node] + distance_matrix[best_second_node][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        # Combine immediate and lookahead distances
        return current_dist * 0.7 + 0.3 * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
