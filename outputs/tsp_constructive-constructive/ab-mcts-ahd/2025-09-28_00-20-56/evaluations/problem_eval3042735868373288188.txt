def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead_1 = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            remaining_nodes_2 = [n for n in remaining_nodes if n != best_lookahead_1]
            best_lookahead_2 = min(remaining_nodes_2, key=lambda n: distance_matrix[best_lookahead_1][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead_1] + distance_matrix[best_lookahead_1][best_lookahead_2] + distance_matrix[best_lookahead_2][destination_node]
            weight_factor = 0.4 * (1 / len(unvisited_nodes))
            combined_score = 0.7 * current_dist + weight_factor * lookahead_dist
        elif len(unvisited_nodes) == 2:
            next_node = [n for n in unvisited_nodes if n != node][0]
            combined_score = 0.7 * current_dist + 0.4 * (distance_matrix[node][next_node] + distance_matrix[next_node][destination_node])
        else:
            combined_score = 0.7 * current_dist + 0.4 * distance_matrix[node][destination_node]

        if node == destination_node:
            combined_score *= 0.5
        return combined_score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
