def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = 1.5 + (0.5 * (destination_distance / (avg_distance + 1e-6)))

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != destination_node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[destination_node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[destination_node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            total_dist = destination_distance + lookahead_dist
            if total_dist <= min_distance * dynamic_threshold:
                next_node = destination_node
        else:
            if destination_distance <= min_distance * dynamic_threshold:
                next_node = destination_node

    return next_node
