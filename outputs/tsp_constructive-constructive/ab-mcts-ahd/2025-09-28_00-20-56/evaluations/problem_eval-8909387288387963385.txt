def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        remaining_nodes = [n for n in unvisited_nodes if n != node]
        best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
        lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]

        weight = 0.7 if len(unvisited_nodes) > 5 else 0.3
        total_score = (1 / (distance + 1e-10)) * (1 - weight) + (1 / (lookahead_dist + 1e-10)) * weight

        if total_score > best_score:
            best_score = total_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min([distance_matrix[current_node][node] for node in unvisited_nodes]) * 1.5:
            next_node = destination_node

    return next_node
