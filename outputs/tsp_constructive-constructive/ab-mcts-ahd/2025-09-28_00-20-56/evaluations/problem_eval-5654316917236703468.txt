def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_total_distance = float('inf')
    next_node = None
    avg_distance_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    current_to_destination = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        total_distance = current_distance + remaining_distance

        # Dynamic threshold based on current distance to destination and average distance
        dynamic_threshold = max(0.5, 1 - (current_to_destination / (avg_distance_to_destination + 1e-6)))

        if total_distance < min_total_distance * dynamic_threshold:
            min_total_distance = total_distance
            next_node = node

    # Prioritize destination if it's unvisited and the path to it is not too long
    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        if direct_distance <= min_total_distance * dynamic_threshold * 0.9:  # More aggressive threshold
            next_node = destination_node

    return next_node
