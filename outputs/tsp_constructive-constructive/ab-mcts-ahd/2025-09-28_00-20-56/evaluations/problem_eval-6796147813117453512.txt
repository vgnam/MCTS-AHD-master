def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -1
    next_node = None
    total_ratio = 0
    num_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance

        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        score = ratio * (1 + 1 / (1 + centrality))

        if score > best_score:
            best_score = score
            next_node = node

        total_ratio += ratio

    avg_ratio = total_ratio / num_nodes if num_nodes > 0 else 0

    if destination_node in unvisited_nodes:
        direct_distance = distance_matrix[current_node][destination_node]
        threshold = avg_ratio * 0.85
        if direct_distance <= threshold:
            if random.random() < 0.7:  # 70% chance to override
                next_node = destination_node

    return next_node
