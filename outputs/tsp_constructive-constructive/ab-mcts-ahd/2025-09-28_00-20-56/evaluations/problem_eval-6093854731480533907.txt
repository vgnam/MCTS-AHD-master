def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    weights = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        combined_dist = current_dist + 0.5 * lookahead_dist
        weights.append(1.0 / combined_dist)

    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    next_node = np.random.choice(unvisited_nodes, p=normalized_weights)
    return next_node
