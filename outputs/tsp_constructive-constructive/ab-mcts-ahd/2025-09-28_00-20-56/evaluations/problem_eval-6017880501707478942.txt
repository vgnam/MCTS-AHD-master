def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]
        euclidean_weight = (remaining_dist / sum(distance_matrix[node])) * 0.7
        balanced_dist = (1 - euclidean_weight) * current_dist + euclidean_weight * remaining_dist

        future_cost = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes if neighbor != node)
        future_penalty = future_cost / len(unvisited_nodes) if future_cost != 0 else 0

        return balanced_dist + 0.5 * remaining_dist - 0.3 * future_penalty

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
