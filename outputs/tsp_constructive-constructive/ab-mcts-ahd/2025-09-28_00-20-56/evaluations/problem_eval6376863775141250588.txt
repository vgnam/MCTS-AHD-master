def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -1

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_future_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_future_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight = 0.7 if len(unvisited_nodes) > 3 else 0.5
        total_score = (1 / (distance + 1e-10)) * (1 - weight) + (avg_future_distance / (distance + 1e-10)) * weight

        if total_score > best_score:
            best_score = total_score
            next_node = node

    # Prioritize destination node if it's unvisited and within a reasonable distance
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * 1.2:  # Threshold to balance proximity and destination
            next_node = destination_node

    return next_node
