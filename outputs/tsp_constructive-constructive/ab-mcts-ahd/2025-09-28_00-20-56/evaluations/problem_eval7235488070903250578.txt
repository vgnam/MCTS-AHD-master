import random
from collections import defaultdict

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    recency_bonus = defaultdict(float)
    recent_nodes = set()

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
            adjusted_lookahead_dist = lookahead_dist * (avg_remaining_distance / lookahead_dist) ** 2
        else:
            adjusted_lookahead_dist = distance_matrix[node][destination_node]
        
        if node in recent_nodes:
            return current_dist + 0.5 * adjusted_lookahead_dist - recency_bonus[node]
        return current_dist + 0.5 * adjusted_lookahead_dist

    node_scores = {node: evaluate_node(node) for node in unvisited_nodes}
    
    max_score = max(node_scores.values())
    probabilities = {node: max(0.01, max_score - score) for node, score in node_scores.items()}
    total_prob = sum(probabilities.values())
    
    if total_prob == 0:
        next_node = random.choice(list(unvisited_nodes))
    else:
        probabilities = {node: prob / total_prob for node, prob in probabilities.items()}
        next_node = random.choices(list(probabilities.keys()), list(probabilities.values()), k=1)[0]
    
    recent_nodes.add(next_node)
    if len(recent_nodes) > 5:  # Example threshold for recency, can be adjusted
        recent_nodes.remove(next_node)

    return next_node
