def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if len(remaining_nodes) > 2:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + min(
                distance_matrix[n][k] + distance_matrix[k][destination_node] for k in remaining_nodes if k != n))
            lookahead_distance = distance_matrix[node][best_lookahead] + min(
                distance_matrix[best_lookahead][k] + distance_matrix[k][destination_node] for k in remaining_nodes if k != best_lookahead)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            efficiency_factor = (avg_remaining_distance / centrality) ** 0.5
            adjusted_lookahead_distance = lookahead_distance * efficiency_factor * (avg_remaining_distance / lookahead_distance) ** 2
        else:
            adjusted_lookahead_distance = distance_matrix[node][destination_node]
        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])
        total_detour_penalty = detour_penalty * 0.2
        score = current_distance + 0.5 * adjusted_lookahead_distance + total_detour_penalty
        return score

    total_remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_remaining_distance = total_remaining_distance / len(unvisited_nodes)

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
