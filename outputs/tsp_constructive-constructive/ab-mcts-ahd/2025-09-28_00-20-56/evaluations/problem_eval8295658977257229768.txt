def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        if current_distance == 0:
            ratio = float('inf')
        else:
            ratio = remaining_distance / current_distance
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if len(remaining_nodes) > 1:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][destination_node]
        detour_penalty = sum(max(0, current_distance + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in unvisited_nodes if other_node != node)
        euclidean_weight = (remaining_distance / sum(distance_matrix[node])) * 0.5
        return (current_distance + detour_penalty) * euclidean_weight + (1 - euclidean_weight) * (1 / (ratio + 1e-10) + lookahead_dist / (current_distance + 1e-10))

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
