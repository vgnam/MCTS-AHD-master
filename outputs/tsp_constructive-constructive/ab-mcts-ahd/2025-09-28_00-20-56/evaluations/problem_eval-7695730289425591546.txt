def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    node_scores = []
    total_centrality = 0.0
    total_lookahead = 0.0

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        if current_dist == 0:
            ratio = float('inf')
        else:
            ratio = remaining_dist / current_dist

        centrality = 0.0
        lookahead_dist = float('inf')

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]

        total_centrality += centrality
        total_lookahead += lookahead_dist

        score = (ratio * (centrality / (lookahead_dist + 1e-6))) ** 0.5
        node_scores.append((node, score))

    if total_centrality > 0 and total_lookahead > 0:
        avg_centrality = total_centrality / len(unvisited_nodes)
        avg_lookahead = total_lookahead / len(unvisited_nodes)
        node_scores = [(node, score * (1 + (avg_centrality / (avg_lookahead + 1e-6)))) for node, score in node_scores]

    if destination_node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][destination_node]
        node_scores = [(node, score * 1.2 if node == destination_node else score) for node, score in node_scores]

    if not node_scores:
        return destination_node

    max_score = max(score for _, score in node_scores)
    candidates = [node for node, score in node_scores if score >= max_score * 0.9]
    return next_node
