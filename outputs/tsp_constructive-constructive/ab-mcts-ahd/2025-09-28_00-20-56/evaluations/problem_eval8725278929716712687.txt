def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes + 1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = distance_matrix[node][destination_node]

        detour_penalty = 0
        for other_node in unvisited_nodes:
            if other_node != node:
                detour_penalty += max(0, current_dist + distance_matrix[node][other_node] - distance_matrix[current_node][other_node])

        normalized_penalty = detour_penalty / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        proximity_bonus = (1.0 - (remaining_dist / max(distance_matrix[node]))) * 0.5

        if len(unvisited_nodes) > 1:
            remaining_nodes_after = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes_after, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = remaining_dist

        score = (current_dist * (1 - weight_factor)) + (remaining_dist * weight_factor) + (normalized_penalty * (1 - weight_factor)) - proximity_bonus + 0.5 * lookahead_dist
        return score

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
