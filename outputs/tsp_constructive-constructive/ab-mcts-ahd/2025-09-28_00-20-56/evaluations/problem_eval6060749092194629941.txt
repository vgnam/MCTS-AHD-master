def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 2:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            best_lookahead = min(remaining_nodes, key=lambda n: (
                distance_matrix[node][n] +
                min(distance_matrix[n][k] + distance_matrix[k][destination_node]
                    for k in remaining_nodes if k != n)
            ))
            lookahead_dist = (
                distance_matrix[node][best_lookahead] +
                min(distance_matrix[best_lookahead][k] + distance_matrix[k][destination_node]
                    for k in remaining_nodes if k != best_lookahead)
            )
            weight_factor = 0.3 * (len(unvisited_nodes) ** 2)
            combined_score = current_dist + weight_factor * lookahead_dist
        else:
            combined_score = current_dist + distance_matrix[node][destination_node]

        if node == destination_node:
            combined_score *= 0.6
        return combined_score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    total_score = sum(scores)
    probabilities = [score / total_score for score in scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
