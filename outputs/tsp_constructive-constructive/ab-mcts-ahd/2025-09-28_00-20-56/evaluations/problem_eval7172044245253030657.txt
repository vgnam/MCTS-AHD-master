def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_score(node):
        num_unvisited = len(unvisited_nodes)
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        urgency_factor = (num_unvisited + 1) / (num_unvisited + 2)
        exploration_factor = 1 - urgency_factor
        detour_penalty = sum(max(0, distance_matrix[current_node][node] + distance_matrix[node][other_node] - distance_matrix[current_node][other_node]) for other_node in unvisited_nodes if other_node != node)
        
        weighted_current_distance = exploration_factor * current_distance
        weighted_remaining_distance = urgency_factor * remaining_distance
        weighted_detour_penalty = (1 / (num_unvisited + 1)) * detour_penalty
        
        score = weighted_current_distance + weighted_remaining_distance + weighted_detour_penalty

        if node == destination_node:
            closer_nodes_count = sum(1 for other_node in unvisited_nodes if distance_matrix[current_node][other_node] < current_distance)
            if closer_nodes_count <= num_unvisited / 2:
                score *= 0.8

        return score

    next_node = min(unvisited_nodes, key=calculate_score)
    return next_node
