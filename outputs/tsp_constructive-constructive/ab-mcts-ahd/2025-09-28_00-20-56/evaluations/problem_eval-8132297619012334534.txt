def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]

        if len(remaining_nodes) == 0:
            return current_dist

        # Dynamic weighting based on remaining nodes
        remaining_ratio = len(remaining_nodes) / len(unvisited_nodes)
        weight = 0.5 + 0.5 * (1 - remaining_ratio)  # Adjusts between 0.5 and 1.0

        # Evaluate 2-step lookahead
        if len(remaining_nodes) > 1:
            best_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
            lookahead_dist = distance_matrix[node][best_lookahead] + distance_matrix[best_lookahead][destination_node]
        else:
            lookahead_dist = distance_matrix[node][remaining_nodes[0]] + distance_matrix[remaining_nodes[0]][destination_node]

        # Combine with dynamic weight
        return current_dist + weight * lookahead_dist

    next_node = min(unvisited_nodes, key=evaluate_node)
    return next_node
