def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_phase = remaining_nodes / (len(unvisited_nodes) + remaining_nodes - len(unvisited_nodes))
    dynamic_threshold = 1 / (1 + math.exp(-10 * (exploration_phase - 0.5)))

    if destination_node in unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
        destination_distance = distance_matrix[current_node][destination_node]
        bias = 1 - (destination_distance / (avg_distance + 1e-10))
        if bias > dynamic_threshold:
            return destination_node

    centrality_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        centrality_scores.append(avg_dist)

    avg_centrality = sum(centrality_scores) / remaining_nodes if remaining_nodes > 0 else 0
    novelty_scores = {}

    min_score = float('inf')
    next_node = None

    for i, node in enumerate(unvisited_nodes):
        distance = distance_matrix[current_node][node]
        novelty_scores[node] = 1 / (1 + sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance))
        weight_current = remaining_nodes / (remaining_nodes + 1)
        weight_centrality = 1.0 - weight_current
        weighted_score = (weight_current * distance) + (weight_centrality * centrality_scores[i] / (avg_centrality + 1e-6))
        score = weighted_score * novelty_scores[node]

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
