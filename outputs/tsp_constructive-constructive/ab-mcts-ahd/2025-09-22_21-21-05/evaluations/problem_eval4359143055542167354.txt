def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 0.8 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    visit_history = {node: 0 for node in unvisited_nodes}
    dynamic_weight = time_decay * (1.0 / (remaining_nodes + 1))
    centrality_weight = 0.6

    avg_distances = []
    node_degrees = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < (sum(distance_matrix[node]) / len(unvisited_nodes)))
        avg_distances.append(avg_dist)
        node_degrees.append(degree)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0
    max_degree = max(node_degrees) if node_degrees else 1

    best_score = float('inf')
    candidates = []

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = (1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))) * (node_degrees[i] / (max_degree + 1e-6))
        visit_penalty = 1.0 + (0.3 * visit_history[node])
        historical_factor = 1.0 + (0.2 * sum(visit_history.values()) / (remaining_nodes + 1e-6))
        combined_score = (distance_to_current + dynamic_weight * distance_to_destination + centrality_weight * centrality_factor) * visit_penalty * historical_factor

        if combined_score < best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        visit_history[next_node] += 1
        return next_node
    else:
        return next_node
