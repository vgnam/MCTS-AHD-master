def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    scores = []
    nodes = []

    # Dynamic temperature parameter (decreases as unvisited nodes decrease)
    temperature = 1.0 / (1.0 + 0.5 * (total_unvisited - 1) / total_unvisited)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Novel scoring: combines distance and potential path reduction
        score = (distance_to_current + distance_to_destination) / (1 + avg_distance_to_remaining)
        scores.append(score)
        nodes.append(node)

    # Softmax selection with dynamic temperature
    exp_scores = [math.exp(-s / temperature) for s in scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [e / sum_exp_scores for e in exp_scores]

    # Probabilistic selection
    next_node = random.choices(nodes, weights=probabilities, k=1)[0]

    return next_node
