def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / len(distance_matrix)
    heuristic_factor = 0.3 * exploration_factor
    memory_decay = 0.9
    memory = {}

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if node == destination_node:
            weighted_score = distance_to_current * (1 - heuristic_factor)
        else:
            weighted_score = distance_to_current * (1 + heuristic_factor) + distance_to_destination * (1 - heuristic_factor)

        memory_factor = 1 + 0.1 * (memory_decay ** memory.get(node, 0))
        score = weighted_score * memory_factor

        if score < min_score:
            min_score = score
            next_node = node

    memory[next_node] = memory.get(next_node, 0) + 1
    return next_node
