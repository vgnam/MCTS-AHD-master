def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_global = 0.4 * (num_unvisited / (num_unvisited + 2))  # Balanced global weight
    weight_local = 0.6 - (0.2 * (num_unvisited / len(distance_matrix)))  # Local weight adjustment
    density_threshold = 0.2 * sum(distance_matrix[0]) / len(distance_matrix)  # Density threshold

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < density_threshold) / num_unvisited

        # Centrality score based on average distance to all nodes
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)

        # Penalty for high local density
        density_penalty = 1.0 + (0.5 * local_density)

        combined_score = (weight_local * distance_to_current + weight_global * distance_to_destination) + (0.3 * centrality) * density_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
