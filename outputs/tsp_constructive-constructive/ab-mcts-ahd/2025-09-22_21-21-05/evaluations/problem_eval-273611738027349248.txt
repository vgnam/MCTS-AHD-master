import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 - (total_unvisited - 1) / total_unvisited  # Decreases as nodes are visited
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weight with temperature scaling
        weight = temperature * 0.5 * (total_unvisited - 1) / total_unvisited
        combined_score = distance_to_current + weight * (distance_to_destination + avg_distance_to_remaining)
        scores.append((node, combined_score))

    # Softmax selection to introduce randomness
    exp_scores = [math.exp(-score / temperature) for _, score in scores]
    probabilities = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]

    return next_node
