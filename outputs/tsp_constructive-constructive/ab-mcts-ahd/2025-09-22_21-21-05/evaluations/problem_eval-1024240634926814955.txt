def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = 0.1 + 0.9 * (remaining_nodes ** 0.5) / (remaining_nodes + 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        local_neighbors = [n for n in unvisited_nodes if n != node]
        if local_neighbors:
            local_avg = sum(distance_matrix[node][n] for n in local_neighbors) / len(local_neighbors)
            local_variance = sum((distance_matrix[node][n] - local_avg) ** 2 for n in local_neighbors) / len(local_neighbors)
            outlier_penalty = local_variance ** 0.5
        else:
            outlier_penalty = 0

        harmonic_mean = 2 * (distance_to_current * distance_to_destination) / (distance_to_current + distance_to_destination)
        combined_score = harmonic_mean - exploration_factor * outlier_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
