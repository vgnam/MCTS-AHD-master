def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None

    # Dynamic weight adjustment based on unvisited nodes density
    density = len(unvisited_nodes) / len(distance_matrix)
    w1 = 0.6 + 0.2 * density  # Nearby nodes weight
    w2 = 0.2 - 0.1 * density  # Destination distance weight
    w3 = 0.2 + 0.3 * density  # Average distance weight

    # Historical distance penalty
    historical_penalty = {}
    for node in unvisited_nodes:
        historical_penalty[node] = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Combine factors with dynamic weights and penalty
        combined_score = (distance_to_current * w1) - (distance_to_destination * w2) + (avg_distance_to_remaining * w3) - (historical_penalty[node] * 0.1)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
