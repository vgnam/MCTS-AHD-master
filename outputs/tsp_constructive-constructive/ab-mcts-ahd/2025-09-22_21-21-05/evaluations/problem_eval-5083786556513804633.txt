def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    avg_distance = sum(distances) / len(distances)
    centrality_factor = avg_distance * 0.7

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < centrality_factor:
            return destination_node

    weights = [1 / (1 + distance) for distance in distances]
    total_weight = sum(weights)
    probabilities = [weight / total_weight for weight in weights]

    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
