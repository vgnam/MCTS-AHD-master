def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_prob = min(remaining_nodes / (remaining_nodes + 2), 0.8)  # Dynamic exploration factor

    # Calculate centrality and distance scores
    centrality_scores = []
    distance_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        centrality_scores.append(avg_dist)
        distance_scores.append(distance_matrix[current_node][node])

    avg_centrality = sum(centrality_scores) / remaining_nodes if remaining_nodes > 0 else 0
    avg_distance = sum(distance_scores) / remaining_nodes if remaining_nodes > 0 else 0

    # Normalize scores
    normalized_centrality = [c / (avg_centrality + 1e-6) for c in centrality_scores]
    normalized_distance = [d / (avg_distance + 1e-6) for d in distance_scores]

    # Combine scores with exploration factor
    combined_scores = []
    for i in range(remaining_nodes):
        combined_score = (1 - exploration_prob) * normalized_distance[i] + exploration_prob * normalized_centrality[i]
        combined_scores.append(combined_score)

    # Select node probabilistically based on scores
    min_score = min(combined_scores)
    max_score = max(combined_scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in combined_scores]

    total_weight = sum(normalized_scores)
    rand_val = random.random() * total_weight
    cumulative_weight = 0.0

    next_node = None
    for i, node in enumerate(unvisited_nodes):
        cumulative_weight += normalized_scores[i]
        if rand_val <= cumulative_weight:
            next_node = node
            break

    return next_node
