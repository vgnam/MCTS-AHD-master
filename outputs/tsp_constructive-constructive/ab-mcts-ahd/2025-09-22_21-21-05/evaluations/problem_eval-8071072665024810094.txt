def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_ratio = 1 - (remaining_nodes / total_nodes)
    threshold = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))  # Sigmoid-based dynamic threshold

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Novelty score: rewards nodes with high potential for future improvement
        novelty_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)

        # Quadratic penalty for nodes too close to destination early
        penalty = 0
        if remaining_nodes > total_nodes // 2:
            avg_dest_distance = sum(distance_matrix[destination_node][n] for n in unvisited_nodes) / remaining_nodes
            if distance_to_destination < 0.7 * avg_dest_distance:
                penalty = (0.7 * avg_dest_distance - distance_to_destination) ** 2

        score = (1 - threshold) * distance_to_current + threshold * (distance_to_destination + penalty) - 0.3 * novelty_score

        if score > best_score or (score == best_score and random.random() < 0.5):
            best_score = score
            next_node = node

    return next_node
