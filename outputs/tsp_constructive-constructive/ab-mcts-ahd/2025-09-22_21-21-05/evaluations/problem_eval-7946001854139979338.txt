def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - remaining_nodes / 10.0)  # Cooling schedule

    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalize revisits to encourage diversity
        penalty = 1.0 if node in unvisited_nodes else 0.9

        # Dynamic weights with temperature scaling
        weight_current = temperature * (remaining_nodes / (remaining_nodes + 1))
        weight_destination = (1.0 - temperature) * (1.0 - weight_current)

        score = (weight_current * distance_to_current + weight_destination * distance_to_destination) * penalty
        candidates.append((node, score))

    # Select node with lowest score (weighted distance)
    next_node, _ = min(candidates, key=lambda x: x[1])

    # Force destination if it's the last node
    if remaining_nodes == 1 and destination_node in unvisited_nodes:
        next_node = destination_node

    return next_node
