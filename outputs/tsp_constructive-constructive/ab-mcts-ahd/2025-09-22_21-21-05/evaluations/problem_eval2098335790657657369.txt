def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes

        # Calculate path entropy (diversity of potential paths from node)
        entropy = sum(max(0, distance_matrix[node][n] - distance_to_current) for n in unvisited_nodes if n != node) / remaining_nodes if remaining_nodes > 1 else 0

        # Dynamic weight adjustment based on progress
        progress = (total_nodes - remaining_nodes) / total_nodes
        weight_centrality = 1.0 - progress
        weight_entropy = progress

        # Memory term to avoid revisiting nodes that could isolate remaining nodes
        memory_penalty = 1.0
        if remaining_nodes > 2:
            isolated_count = sum(1 for n in unvisited_nodes if n != node and all(distance_matrix[n][m] == 0 for m in unvisited_nodes if m != n))
            memory_penalty = 1.0 + (isolated_count / remaining_nodes)

        weighted_score = (weight_centrality * centrality + weight_entropy * entropy) * memory_penalty + distance_to_current

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < best_score:
            next_node = destination_node

    return next_node
