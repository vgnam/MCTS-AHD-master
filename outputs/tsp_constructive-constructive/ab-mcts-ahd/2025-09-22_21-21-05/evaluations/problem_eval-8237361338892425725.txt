def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            combined_score = distance_to_current + distance_to_destination
        else:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance_to_remaining = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

            density_factor = len(remaining_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
            normalized_density = 1 - density_factor if density_factor != 0 else 0

            local_weight = 0.6 if len(unvisited_nodes) > 2 else 0.7
            global_weight = 0.3 if len(unvisited_nodes) > 2 else 0.2

            combined_score = (distance_to_current + distance_to_destination) * local_weight + avg_distance_to_remaining * global_weight + 0.1 * normalized_density

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
