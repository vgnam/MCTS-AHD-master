def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Dynamic weight based on progress (higher weight later, lower early)
        progress_weight = 0.3 + 0.5 * (1 - total_unvisited / len(unvisited_nodes)) if total_unvisited > 1 else 0.2

        # Aggressive penalty for detours
        detour_penalty = 2.0 * max(0, distance_to_current - 1.2 * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited)

        combined_score = (distance_to_current + 0.8 * distance_to_destination) + progress_weight * avg_distance_to_remaining + detour_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
