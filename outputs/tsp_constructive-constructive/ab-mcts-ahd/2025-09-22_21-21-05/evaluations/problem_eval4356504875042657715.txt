def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 0.9 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    weight = (1.0 / (remaining_nodes + 1)) * time_decay

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    min_weighted_sum = float('inf')
    next_node = None

    for i, node in enumerate(unvisited_nodes):
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        weighted_sum = (1 - weight) * current_to_node + weight * node_to_destination + (1 - centrality_factor) * 0.5

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
