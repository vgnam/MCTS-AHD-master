importance and dynamically adjusts weights based on the number of remaining nodes and the current node's connectivity.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    node_connectivity = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    dynamic_weight = 0.4 * (1 / (1 + 0.1 * remaining_nodes)) + 0.3 * (1.0 / node_connectivity)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        connectivity_bonus = 1.0 / (1 + sum(distance_matrix[node]))
        revisit_penalty = 1.0 if node in unvisited_nodes else 1.5 + 0.1 * (len(unvisited_nodes) / len(distance_matrix))

        progress_factor = 1.0 - (remaining_nodes / len(distance_matrix))
        exploration_weight = 0.2 * (1 - progress_factor)

        combined_score = (
            -distance_to_current
            + dynamic_weight * distance_to_destination
            + exploration_weight * connectivity_bonus
        ) / revisit_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
