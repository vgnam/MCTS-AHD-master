default but gives the destination a higher chance of selection if it is unvisited and its distance is within a factor of 2.0 of the nearest alternative, ensuring a balance between proximity and destination focus with a more lenient threshold compared to the original algorithm.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_distance * 2.0:
            next_node = destination_node

    return next_node
