def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    current_distance = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1 / (1 + math.exp(-(remaining_nodes - 5)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        neighborhood_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.5 * distance_to_current)

        combined_score = (
            (1 - dynamic_weight) * distance_to_current +
            dynamic_weight * distance_to_destination -
            0.2 * neighborhood_density
        )

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
