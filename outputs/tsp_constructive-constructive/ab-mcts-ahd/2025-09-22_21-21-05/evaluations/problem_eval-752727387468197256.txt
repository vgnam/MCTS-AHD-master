def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    proximity_weight = 0.4 + 0.2 * (remaining_nodes / (remaining_nodes + 1))  # Adjusts weight dynamically
    destination_weight = 1.0 - proximity_weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = (destination_weight * distance_to_destination) + (proximity_weight * distance_to_current) + \
                         0.1 * (distance_to_current ** 0.5)  # Non-linear adjustment for local optimization

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
