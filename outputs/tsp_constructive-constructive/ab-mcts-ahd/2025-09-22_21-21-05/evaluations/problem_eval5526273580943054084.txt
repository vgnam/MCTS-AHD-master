def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 - (0.5 * (remaining_nodes / (remaining_nodes + 1)))
    penalty_factor = 1.0 + (remaining_nodes / (remaining_nodes + 1))

    avg_distance_to_unvisited = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = penalty_factor * (distance_to_current - avg_distance_to_unvisited)
        combined_score = distance_to_current + weight_factor * distance_to_destination + penalty
        scores.append(combined_score)

    exp_scores = [math.exp(-s) for s in scores]
    probs = [s / sum(exp_scores) for s in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
