def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / total_unvisited if total_unvisited > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        remaining_steps = total_unvisited
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        dynamic_weight = 1.0 / (1.0 + (remaining_steps * (1.0 - centrality_factor)))

        weighted_score = (dynamic_weight * distance_to_current) + ((1 - dynamic_weight) * distance_to_destination) - (0.1 * (distance_to_current + distance_to_destination) / (1 + remaining_steps))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
