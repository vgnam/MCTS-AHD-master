def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1 / (1 + math.exp(5 * (progress - 0.5)))
    exploitation_weight = 1 - exploration_weight

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]

        proximity_penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                dist_to_neighbor = distance_matrix[node][neighbor]
                if dist_to_neighbor < local_dist * 1.3:
                    proximity_penalty += (local_dist / dist_to_neighbor) * 0.2

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        normalized_centrality = centrality / sum(distance_matrix[node])

        score = (exploration_weight * (local_dist + normalized_centrality)) + \
                (exploitation_weight * global_dist) + \
                (proximity_penalty * (1 - progress) * 2)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
