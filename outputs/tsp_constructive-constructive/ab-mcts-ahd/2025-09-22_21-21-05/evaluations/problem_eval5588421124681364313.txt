def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_steps = total_unvisited
    temperature = 1.0 / (1.0 + remaining_steps)

    # Calculate proximity centrality for each node
    proximity_centrality = {}
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Novel proximity centrality metric
        proximity_centrality[node] = (distance_to_current + distance_to_destination) / (1 + avg_distance)

    # Boltzmann distribution for probabilistic selection
    exp_scores = []
    for node in unvisited_nodes:
        # Nonlinear utility function with adaptive penalty
        utility = - (proximity_centrality[node] + (0.2 * (remaining_steps ** 2) * proximity_centrality[node]))
        exp_scores.append(math.exp(utility / temperature))

    # Normalize probabilities
    total_exp = sum(exp_scores)
    probabilities = [e / total_exp for e in exp_scores]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
