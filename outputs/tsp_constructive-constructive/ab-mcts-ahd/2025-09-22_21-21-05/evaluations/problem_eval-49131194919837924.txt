def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    destination_bias = 0.5 + 0.5 * exploration_factor

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if destination_distance <= avg_distance * (1 - exploration_factor):
            return destination_node

    novelty_bonus = {}
    for node in unvisited_nodes:
        centrality = sum(1 / (1 + distance_matrix[node][n]) for n in unvisited_nodes if n != node)
        novelty_bonus[node] = (1 - exploration_factor) * centrality

    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weighted_score = (1 - destination_bias) * distance + destination_bias * distance_matrix[node][destination_node]
        weighted_score *= (1 - novelty_bonus[node])
        scores.append((node, weighted_score))

    scores.sort(key=lambda x: x[1])
    next_node = scores[0][0]

    return next_node
