def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate local density of unvisited nodes (inverse of average distance to neighbors)
        neighbors = [n for n in unvisited_nodes if n != node]
        if neighbors:
            avg_distance_to_neighbors = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
            density_factor = 1 / (1 + avg_distance_to_neighbors)  # Higher density = lower avg distance
        else:
            density_factor = 1.0

        # Dynamic weight adjustment based on progress and local density
        progress_weight = 0.3 + 0.2 * (1 - total_unvisited / (total_unvisited + len(unvisited_nodes)))
        combined_score = (distance_to_current + distance_to_destination) + progress_weight * density_factor * sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
