def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    dynamic_weight = max(0.1, 0.4 * (remaining_nodes / total_nodes) + 0.2 * (total_nodes - remaining_nodes) / total_nodes)
    max_distance_penalty = max(distance_matrix[current_node][n] for n in unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes if remaining_nodes > 1 else 0
        normalized_global_factor = avg_distance_to_remaining / max_distance_penalty if max_distance_penalty > 0 else 0
        combined_score = (distance_to_current + distance_to_destination) * (1 - dynamic_weight) - dynamic_weight * normalized_global_factor

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
