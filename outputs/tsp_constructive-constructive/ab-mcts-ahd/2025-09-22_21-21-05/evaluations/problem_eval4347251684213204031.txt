def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    ratio = remaining_nodes / total_nodes if total_nodes > 0 else 0
    weight_factor = 0.5 * (1 - ratio)

    best_score = float('inf')
    next_node = None

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_bonus = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        distance_penalty = distance_to_current * (1.0 + (remaining_nodes / total_nodes))

        combined_score = distance_penalty + weight_factor * distance_to_destination - 0.3 * centrality_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
