def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    proximity_weight = 1.0 / (1.0 + remaining_nodes)
    diversity_weight = 1.0 - proximity_weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance = sum(distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0
        variance_distance = sum((d - avg_distance) ** 2 for d in distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0

        proximity_score = - (distance_to_current + distance_to_destination)
        diversity_score = - (avg_distance + 0.1 * variance_distance)
        combined_score = proximity_weight * proximity_score + diversity_weight * diversity_score

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
