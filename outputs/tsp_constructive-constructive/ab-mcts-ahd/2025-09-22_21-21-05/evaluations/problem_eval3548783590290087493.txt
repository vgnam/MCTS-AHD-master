defined as the inverse of the sum of distances to all other unvisited nodes, and the selection threshold is dynamically adjusted based on the node's centrality, favoring nodes that are both close and central while giving the destination node a higher priority if it is nearby.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = 1.0 / (sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) + 1e-6)
        score = distance * (1.0 - centrality * 0.3)  # Reduced centrality influence

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        destination_centrality = 1.0 / (sum(distance_matrix[destination_node][other] for other in unvisited_nodes if other != destination_node) + 1e-6)
        destination_score = destination_distance * (1.0 - destination_centrality * 0.3)

        if destination_score < min_score * 1.2:  # More relaxed threshold for destination
            next_node = destination_node

    return next_node
