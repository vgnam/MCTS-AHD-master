def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Phase transition factor based on node density
    node_density = sum(1 for node in unvisited_nodes if any(distance_matrix[current_node][node] < 1.2 * min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)))/len(unvisited_nodes)
    phase_factor = 1.0 / (1.0 + math.exp(-10 * (visited_ratio - 0.5)))  # Sigmoid transition at 50% visited

    # Dynamic weight adjustment
    weight_current = (1.0 - phase_factor) * (1.0 - visited_ratio)**0.7
    weight_destination = phase_factor * visited_ratio**0.3
    weight_global = 0.2 * (1.0 - phase_factor * visited_ratio)

    best_score = float('inf')
    next_node = None
    candidate_scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Cluster penalty scaling with nearby unvisited nodes
        nearby_unvisited = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * distance_to_current)
        cluster_penalty = -0.2 * nearby_unvisited

        combined_score = (weight_current * distance_to_current +
                          weight_destination * distance_to_destination +
                          weight_global * avg_distance_to_remaining +
                          cluster_penalty)

        candidate_scores.append((node, combined_score))

    # Probabilistic selection to escape local optima
    if len(candidate_scores) > 1:
        candidate_scores.sort(key=lambda x: x[1])
        min_score = candidate_scores[0][1]
        probabilities = [math.exp(-(s - min_score)) for (_, s) in candidate_scores]
        total_prob = sum(probabilities)
        probabilities = [p/total_prob for p in probabilities]
        next_node = random.choices([n for (n, _) in candidate_scores], weights=probabilities, k=1)[0]
    else:
        next_node = candidate_scores[0][0] if candidate_scores else destination_node

    return next_node
