def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return destination_node

    remaining_nodes_factor = (total_unvisited / (total_unvisited + 1)) ** 2  # Non-linear adjustment

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node]) / (len(distance_matrix) - 1)

        # Dynamic weight balancing
        weight_current = remaining_nodes_factor
        weight_destination = (1 - remaining_nodes_factor) * 0.5
        weight_centrality = (1 - remaining_nodes_factor) * 0.5

        score = (weight_current * distance_to_current +
                 weight_destination * distance_to_destination +
                 weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
