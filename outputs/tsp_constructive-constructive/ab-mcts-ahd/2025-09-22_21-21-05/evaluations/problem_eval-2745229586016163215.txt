def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    total_nodes = unvisited_count + 1
    progress_ratio = (total_nodes - unvisited_count) / total_nodes
    destination_attractiveness = (1 - progress_ratio) ** 2

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            adjusted_distance = distance * (1 - destination_attractiveness)
        else:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (unvisited_count - 1)
            adjusted_distance = distance + 0.3 * centrality

        if adjusted_distance < min_score:
            min_score = adjusted_distance
            next_node = node

    return next_node
