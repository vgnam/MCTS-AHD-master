def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    phase_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    phase = 0 if phase_ratio < 0.3 else (1 if phase_ratio < 0.7 else 2)

    if phase == 0:
        weight_current = 0.7
        weight_destination = 0.3
    elif phase == 1:
        weight_current = 0.5
        weight_destination = 0.5
    else:
        weight_current = 0.3
        weight_destination = 0.7

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        connectivity_score = sum(distance_matrix[node]) / len(distance_matrix[node])
        normalized_score = (distance_to_current + distance_to_destination) / connectivity_score

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_matrix[current_node][node] * 1.2:
                penalty += 0.15

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (0.2 * penalty)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
