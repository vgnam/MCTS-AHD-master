def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_phase = len(unvisited_nodes) / (len(unvisited_nodes) + len(unvisited_nodes) - len(unvisited_nodes))
    exploration_weight = 1 / (1 + math.exp(-10 * (exploration_phase - 0.5)))
    exploitation_weight = 1 - exploration_weight

    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        novelty = 1 / (1 + sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance))
        destination_factor = 1 / (1 + distance_matrix[node][destination_node]) if destination_node in unvisited_nodes else 0
        scores[node] = (exploitation_weight * (1 / (1 + distance)) +
                        exploration_weight * novelty +
                        0.2 * destination_factor)

    next_node = max(scores.items(), key=lambda x: x[1])[0]
    return next_node
