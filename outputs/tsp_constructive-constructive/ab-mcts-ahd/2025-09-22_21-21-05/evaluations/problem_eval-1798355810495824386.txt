import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    candidates = []
    total_weight = 0.0

    for node in unvisited_nodes:
        local_cost = distance_matrix[current_node][node]
        global_cost = 0.0

        if node != destination_node:
            global_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)

        weight_global = remaining_nodes / (remaining_nodes + 10)
        weight_local = 1.0 - weight_global
        weighted_score = (weight_local * local_cost) + (weight_global * global_cost)
        weight = 1.0 / (weighted_score + 1e-6)
        candidates.append((node, weight))
        total_weight += weight

    if destination_node in unvisited_nodes:
        local_cost = distance_matrix[current_node][destination_node]
        global_cost = sum(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node)
        weight_global = remaining_nodes / (remaining_nodes + 10)
        weight_local = 1.0 - weight_global
        weighted_score = (weight_local * local_cost) + (weight_global * global_cost)
        weight = 1.0 / (weighted_score + 1e-6)
        candidates.append((destination_node, weight))
        total_weight += weight

    if not candidates:
        return destination_node

    rand_val = random.uniform(0, total_weight)
    cumulative_weight = 0.0
    for node, weight in candidates:
        cumulative_weight += weight
        if rand_val <= cumulative_weight:
            return node

    return next_node
