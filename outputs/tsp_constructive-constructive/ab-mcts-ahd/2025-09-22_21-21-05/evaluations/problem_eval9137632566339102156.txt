def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    base_weight_current = 1.0 - (visited_ratio ** 2)
    base_weight_destination = visited_ratio ** 2

    # Dynamic weight adjustments based on centrality and path length
    avg_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    centrality_bonus = sum(1 / (distance_matrix[n][n2] + 1e-6) for n in unvisited_nodes for n2 in unvisited_nodes if n != n2) / (len(unvisited_nodes) ** 2) if len(unvisited_nodes) > 1 else 0

    weight_current = base_weight_current * (1 + centrality_bonus)
    weight_destination = base_weight_destination * (1 + 0.5 * avg_path_length / (distance_matrix[current_node][destination_node] + 1e-6))

    # Memory factor to penalize frequently revisited nodes
    revisit_penalty = {n: 1.0 for n in unvisited_nodes}
    for n in unvisited_nodes:
        if n in revisit_penalty:
            revisit_penalty[n] *= (1 + 0.1 * (len(unvisited_nodes) - distance_matrix[current_node][n]))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        node_centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic centrality bonus
        dynamic_centrality = node_centrality * (1 + 0.2 * (len(unvisited_nodes) / total_nodes))

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (0.2 * avg_distance_to_remaining) + (0.1 * dynamic_centrality) + (0.3 * revisit_penalty[node])

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
