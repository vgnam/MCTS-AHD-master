def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            global_cost = sum(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node)
        else:
            global_cost = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        weight_global = remaining_nodes / (remaining_nodes + 10)
        weight_local = 1.0 - weight_global
        score = (weight_local * distance) + (weight_global * global_cost)
        candidates.append((node, score))

    candidates.sort(key=lambda x: x[1])
    threshold = 0.7 * (1 - remaining_nodes / (remaining_nodes + 5))
    selected = [node for node, score in candidates if score <= threshold * candidates[0][1]]

    if selected:
        next_node = selected[0]
    else:
        next_node = candidates[0][0]

    return next_node
