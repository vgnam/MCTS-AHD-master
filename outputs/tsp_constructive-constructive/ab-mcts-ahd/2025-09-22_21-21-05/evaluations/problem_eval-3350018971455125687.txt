def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        # Exponentially increasing weight for destination proximity as tour progresses
        weight = 0.5 * (1 - (remaining_nodes / (remaining_nodes + 1)) ** 2)

        # Combine proximity to current node, centrality, and weighted destination proximity
        combined_score = distance_to_current + 0.3 * centrality + weight * distance_to_destination

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    # Prioritize destination if it offers a better path and is within top 30% of nodes
    if destination_node in unvisited_nodes:
        destination_score = distance_matrix[current_node][destination_node]
        if destination_score < best_score * 1.3:  # Allow slight detour if beneficial
            next_node = destination_node

    return next_node
