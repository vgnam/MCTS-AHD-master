importance scoring that combines immediate distance, destination proximity, remaining node connectivity, and dynamic exploration incentives, with weighted components that evolve based on progress and node revisit penalties.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Adaptive weight based on progress and remaining nodes
        progress_factor = 1 - remaining_count / total_nodes
        weight = 0.3 * (1 - progress_factor) + 0.5 * progress_factor

        # Node importance scoring with dynamic exploration
        importance_score = (0.4 / (distance_to_current + 1e-6)) + (0.3 / (distance_to_destination + 1e-6)) + (0.3 * (1 / (avg_distance_to_remaining + 1e-6)))

        # Exploration incentive with progress-based decay
        exploration_incentive = 0.2 * (1 - progress_factor) * (1 / (remaining_count + 1e-6))

        # Combined score with adaptive components
        combined_score = importance_score * weight + exploration_incentive

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
