def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    dynamic_weight = 1.0 + (2.0 / (num_unvisited + 1))  # Faster-growing weight

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Stronger penalty for nodes too far from current node
        penalty = 0.0 if distance_to_current <= 1.2 * distance_matrix[current_node][destination_node] else 0.2 * distance_to_current

        combined_score = 0.1 * distance_to_current + dynamic_weight * distance_to_destination + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
