def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 0.9 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    dynamic_weight = time_decay * (1.0 / (remaining_nodes + 1))
    visit_history = {node: 0 for node in unvisited_nodes}

    best_score = float('inf')
    candidates = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        visit_penalty = 1.0 + (0.5 * visit_history[node])
        combined_score = (distance_to_current + dynamic_weight * distance_to_destination) * visit_penalty

        if combined_score < best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        visit_history[next_node] += 1
        return next_node
    else:
        return next_node
