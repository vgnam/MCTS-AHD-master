def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        remaining_steps = total_unvisited
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node]) if total_unvisited > 1 else 1.0

        dynamic_weight = 1.0 / (1.0 + (remaining_steps * centrality))

        # Adaptive scoring with probabilistic selection
        immediate_score = distance_to_current * dynamic_weight
        long_term_score = distance_to_destination * (1 - dynamic_weight)
        penalty = 0.2 * (distance_to_current + distance_to_destination) / (1 + remaining_steps)

        weighted_score = immediate_score + long_term_score - penalty
        scores.append(weighted_score)

    # Softmax selection to balance exploration and exploitation
    exp_scores = np.exp(np.array(scores) - np.max(scores))
    probabilities = exp_scores / np.sum(exp_scores)
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
