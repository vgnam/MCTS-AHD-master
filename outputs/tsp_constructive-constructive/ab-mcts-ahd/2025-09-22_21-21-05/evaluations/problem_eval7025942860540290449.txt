def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-(remaining_count - 5)))  # Sigmoid adjustment

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Connectivity potential: sum of inverse distances to all remaining nodes
        connectivity_potential = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node)

        # Local optimization term
        local_term = (distance_to_current + distance_to_destination) * (1 - weight_factor)

        # Global connectivity term
        global_term = connectivity_potential * weight_factor

        combined_score = local_term + global_term

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
