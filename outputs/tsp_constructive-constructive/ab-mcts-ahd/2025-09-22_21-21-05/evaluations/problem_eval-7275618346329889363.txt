def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality factor
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited if total_unvisited > 0 else 0
        centrality_factor = 1.0 / (avg_dist + 1e-6)  # Inverse of average distance

        # Dynamic weight based on remaining nodes
        weight = 0.5 * (total_unvisited - 1) / total_unvisited
        weighted_score = (1 - weight) * distance_to_current + weight * distance_to_destination + 0.3 * centrality_factor

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
