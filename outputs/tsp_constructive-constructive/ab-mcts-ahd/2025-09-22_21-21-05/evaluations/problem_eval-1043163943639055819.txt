def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    avg_distance = total_distance / remaining_nodes if remaining_nodes > 0 else 0

    weight_factor = 1.0 - (0.7 * (remaining_nodes / (remaining_nodes + 1)))
    centrality_factor = 1 / (1 + avg_distance) if avg_distance > 0 else 1

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_dest = distance_to_destination / (sum(distance_matrix[node][n] for n in unvisited_nodes) + 1)

        penalty = 0.3 * distance_to_current * (1 + normalized_dest)
        lookahead = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0

        combined_score = (1 - weight_factor) * distance_to_current + \
                         weight_factor * normalized_dest + \
                         penalty + \
                         0.2 * lookahead

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
