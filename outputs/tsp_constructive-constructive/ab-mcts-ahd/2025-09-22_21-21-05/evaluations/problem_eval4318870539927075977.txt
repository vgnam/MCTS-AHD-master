def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Dynamic weights: prioritize destination when few nodes remain
        weight_current = 0.3 / remaining_nodes
        weight_destination = 0.7 * (1.0 - weight_current)
        weight_centrality = 0.3

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (weight_centrality * centrality)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < best_score:
            next_node = destination_node

    return next_node
