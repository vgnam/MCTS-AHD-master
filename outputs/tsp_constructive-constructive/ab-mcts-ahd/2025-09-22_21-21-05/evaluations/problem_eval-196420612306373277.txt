importance in the remaining graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Dynamic weight factors
    current_weight = max(0.1, 0.7 * (remaining_nodes / len(distance_matrix)))
    destination_weight = max(0.1, 0.3 * (remaining_nodes / len(distance_matrix)))
    centrality_weight = max(0.1, 0.5 * (1 - (remaining_nodes / len(distance_matrix))))

    # Calculate centrality based on graph density
    density_factors = []
    for node in unvisited_nodes:
        connected_nodes = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < float('inf'))
        density_factor = connected_nodes / (remaining_nodes - 1) if remaining_nodes > 1 else 1.0
        density_factors.append(density_factor)

    avg_density = sum(density_factors) / remaining_nodes if remaining_nodes > 0 else 1.0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalized centrality score
        normalized_centrality = (density_factors[i] / (avg_density + 1e-6)) ** 0.5

        # Penalty for revisiting nodes (if applicable)
        penalty = 0.0
        if remaining_nodes < len(distance_matrix) * 0.3:
            penalty = 0.2 * distance_to_current

        combined_score = (current_weight * distance_to_current +
                         destination_weight * distance_to_destination -
                         centrality_weight * normalized_centrality +
                         penalty)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
