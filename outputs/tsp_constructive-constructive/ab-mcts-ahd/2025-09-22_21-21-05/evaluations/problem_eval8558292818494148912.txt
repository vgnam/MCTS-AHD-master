def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    # Calculate centrality of current node (inverse of average distance to all nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        remaining_nodes = [n for n in unvisited_nodes if n != node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

        # Exploration bonus: encourage less traversed paths
        exploration_bonus = 1.0 / (1 + sum(distance_matrix[node]))

        # Dynamic weight adjustment based on remaining nodes and centrality
        local_weight = 0.5 if len(unvisited_nodes) > 2 else 0.7
        global_weight = 0.3 if len(unvisited_nodes) > 2 else 0.2
        exploration_weight = 0.1 + 0.1 * centrality

        combined_score = (distance_to_current + distance_to_destination) * local_weight + avg_distance_to_remaining * global_weight + exploration_weight * exploration_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
