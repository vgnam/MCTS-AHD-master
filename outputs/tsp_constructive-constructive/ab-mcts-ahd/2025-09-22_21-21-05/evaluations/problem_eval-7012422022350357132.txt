def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 - (0.5 / (1.0 + remaining_nodes))

    min_weighted_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        local_density = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        density_penalty = 0.2 * local_density

        detour_penalty = 0.4 * max(0, (distance_to_current + distance_to_destination) - distance_matrix[current_node][destination_node])

        weighted_score = (distance_to_current * (1 - weight)) + (distance_to_destination * weight) + density_penalty + detour_penalty

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
