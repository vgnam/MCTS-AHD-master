def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    exploration_factor = 0.3  # Base exploration factor
    exploitation_factor = 0.7  # Base exploitation factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance = sum(distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0
        variance = sum((d - avg_distance) ** 2 for d in distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0

        # Dynamic exploration factor based on variance
        dynamic_exploration = exploration_factor * (1 + variance / (avg_distance + 1e-6))

        # Combined score with dynamic factors
        score = (exploitation_factor * (distance_to_current + distance_to_destination) +
                 dynamic_exploration * avg_distance)
        scores.append((node, score))

    # Probabilistic selection based on inverse scores (lower scores are better)
    if scores:
        inv_scores = [1 / (score + 1e-6) for _, score in scores]
        total = sum(inv_scores)
        probabilities = [s / total for s in inv_scores]
        next_node = random.choices([node for node, _ in scores], weights=probabilities, k=1)[0]
        return next_node

    return next_node
