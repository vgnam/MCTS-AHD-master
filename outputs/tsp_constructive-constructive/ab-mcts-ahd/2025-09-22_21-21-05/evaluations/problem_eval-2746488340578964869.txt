def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Dynamic exploration factor from No.1
        exploration_factor = (remaining_count / total_nodes) ** 2

        # Penalty for dense clusters from No.1
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.3 * (sum(distance_matrix[node]) / total_nodes))
        density_penalty = local_density * 0.1

        # Dynamic weighting from No.2
        weight = 0.5 if remaining_count > total_nodes / 2 else 0.2

        # Combined score with balanced global-local factors
        combined_score = (distance_to_current + distance_to_destination) + weight * avg_distance_to_remaining + exploration_factor * avg_distance_to_remaining + density_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
