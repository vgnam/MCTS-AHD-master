def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + total_unvisited)  # Decreases as steps remain
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on temperature and centrality
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node]) if total_unvisited > 1 else 1.0
        dynamic_weight = (1.0 - temperature) * (1.0 / (1.0 + centrality))

        # Weighted score with penalty term
        score = (dynamic_weight * distance_to_current) + ((1 - dynamic_weight) * distance_to_destination) - (0.2 * (distance_to_current + distance_to_destination) * temperature)

        scores.append((node, score))

    # Probabilistic selection based on temperature
    if temperature > 0.1:
        # Softmax selection for exploration
        exp_scores = [math.exp(-s / temperature) for _, s in scores]
        total_exp = sum(exp_scores)
        probs = [exp / total_exp for exp in exp_scores]
        next_node = random.choices([n for n, _ in scores], weights=probs, k=1)[0]
    else:
        # Greedy selection for exploitation
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
