def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 * (1 / (1 + 0.1 * remaining_nodes)) + 0.4 * (1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node])))

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        exploration_bonus = 1.5 / (1 + sum(distance_matrix[node]))
        penalty = 1.2 if node in unvisited_nodes else 2.0

        combined_score = (-0.7 * distance_to_current + dynamic_weight * distance_to_destination + 0.3 * exploration_bonus) / penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
