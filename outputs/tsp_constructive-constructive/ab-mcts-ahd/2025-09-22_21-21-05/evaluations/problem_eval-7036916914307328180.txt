importance as the tour progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    centrality_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        centrality_scores.append(1.0 / (1.0 + avg_dist))

    max_centrality = max(centrality_scores) if centrality_scores else 1.0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        normalized_centrality = centrality_scores[i] / max_centrality

        progress_ratio = (total_unvisited + 1) / (total_unvisited + 2)
        distance_weight = 0.5 * progress_ratio
        centrality_weight = 1.0 - distance_weight

        combined_score = (distance_weight * distance_to_current) + (centrality_weight * (1.0 - normalized_centrality))

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
