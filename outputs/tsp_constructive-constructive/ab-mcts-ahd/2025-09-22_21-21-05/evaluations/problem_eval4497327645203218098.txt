def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1.0 - (visited_ratio ** 0.5)
    weight_destination = visited_ratio ** 0.5

    best_score = float('inf')
    next_node = None

    remaining_unvisited = len(unvisited_nodes)
    destination_bias = 1.0 - (1.0 / (1.0 + (total_nodes - remaining_unvisited) ** 0.5))
    time_decay_factor = 0.8

    centrality_scores = []
    for node in unvisited_nodes:
        distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        if not distances:
            harmonic_mean = 0
        else:
            harmonic_mean = len(distances) / sum(1.0 / (d + 1e-6) for d in distances)
        centrality_scores.append(harmonic_mean)

    if centrality_scores:
        max_centrality = max(centrality_scores)
        min_centrality = min(centrality_scores)
        normalized_centrality = [(score - min_centrality) / (max_centrality - min_centrality + 1e-6) for score in centrality_scores]
    else:
        normalized_centrality = [0.0] * len(unvisited_nodes)

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = normalized_centrality[i] if max_centrality != min_centrality else 0.5
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_unvisited if remaining_unvisited > 0 else 0
        penalty = max(0, (distance_to_current / (avg_distance + 1e-6)) - 1.0)

        if node == destination_node:
            distance_to_current *= destination_bias

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (time_decay_factor * (1.0 - centrality_factor)) - (0.3 * penalty)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
