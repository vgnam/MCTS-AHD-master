def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    # Calculate node connectivity (number of direct connections to unvisited nodes)
    connectivity = []
    for node in unvisited_nodes:
        connected = sum(1 for other in unvisited_nodes if distance_matrix[node][other] > 0)
        connectivity.append(connected)

    max_connectivity = max(connectivity) if connectivity else 1

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic exploration factor based on graph density
        exploration_factor = (total_unvisited / (max_connectivity + 1)) ** 0.5

        # Novel centrality measure: connectivity normalized by average distance
        centrality = connectivity[i] / (sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited + 1e-6)

        # Novel scoring equation combining all factors
        score = (exploration_factor * centrality - distance_to_current) / (1 + 0.5 * distance_to_destination)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
