def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes_count = len(unvisited_nodes)

    # Calculate node degrees (number of connections)
    node_degrees = {node: sum(1 for d in distance_matrix[node] if d > 0) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on node degree and remaining nodes
        degree_weight = 0.3 if node_degrees[node] > 2 else 0.1
        avg_distance_weight = 0.5 if remaining_nodes_count > 5 else 0.2

        # Historical visit frequency (simulated as inverse of degree)
        visit_frequency_weight = 1.0 / (node_degrees[node] + 1)

        # Penalty for revisits (higher for nodes with fewer connections)
        penalty = 1.0 + (1.0 / (node_degrees[node] + 1))

        # Combined score with probabilistic adjustment
        combined_score = (distance_to_current + distance_to_destination) * penalty
        combined_score += avg_distance_weight * (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0)
        combined_score *= (1 + degree_weight * visit_frequency_weight)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
