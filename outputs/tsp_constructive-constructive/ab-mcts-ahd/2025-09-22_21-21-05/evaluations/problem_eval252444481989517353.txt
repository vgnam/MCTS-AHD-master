def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting: prioritize nodes closer to destination with a light penalty for current distance
        penalty = 0.5 * (1.0 + (1.0 / (1.0 + distance_to_current)))  # Light penalty for proximity to current
        weighted_score = (1.0 / (1.0 + distance_to_destination)) - penalty * distance_to_current

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
