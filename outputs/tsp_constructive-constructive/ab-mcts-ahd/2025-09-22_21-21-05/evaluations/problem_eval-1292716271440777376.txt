def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    # Calculate average distance to all unvisited nodes
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight with non-linear transformation and average distance consideration
        weight = 1.0 - (total_unvisited / (total_unvisited + 1)) ** 3
        normalized_distance = distance_to_current / avg_distance if avg_distance != 0 else 1.0
        score = (normalized_distance * (1 - weight) + (1 / (distance_to_destination + 1e-6)) * weight)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
