def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)))

    # Calculate diversity factor: average distance from current node to all unvisited nodes
    diversity_factor = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Combine distance, future distance, and diversity factor
        combined_score = (distance_to_current + weight_factor * distance_to_destination) * (1 + 0.2 * (diversity_factor / distance_to_current))

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
