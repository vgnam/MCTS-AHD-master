def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    decay_factor = 0.5

    # Calculate node centrality (average distance to all other unvisited nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)

    # Dynamic weight adjustment based on centrality
    avg_centrality = sum(centrality.values()) / len(centrality) if centrality else 0
    weight_current = (1.0 - visited_ratio) ** decay_factor
    weight_destination = visited_ratio ** (1.0 / decay_factor)
    weight_centrality = 0.4 * (1.0 - (avg_centrality / max(centrality.values(), default=1)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        node_centrality = centrality[node]

        # Global attractor: reinforce connection to destination as tour progresses
        global_attractor = visited_ratio * distance_to_destination

        # Penalty for high local connectivity
        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 0.5:
                penalty += 0.2

        combined_score = (weight_current * distance_to_current) + (weight_centrality * node_centrality) + global_attractor + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
