def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    dynamic_weight = 0.4 * (1 / (1 + 0.1 * remaining_nodes)) + 0.3 * (1.0 / avg_distance)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        connectivity_factor = 1.0 / (1 + sum(distance_matrix[node]))
        novelty_bonus = 1.0 / (1 + len([n for n in unvisited_nodes if n == node]))

        combined_score = (-distance_to_current + dynamic_weight * distance_to_destination + 0.2 * connectivity_factor + 0.1 * novelty_bonus)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
