def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Calculate centrality for each unvisited node
    centrality_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        centrality_scores.append(avg_dist)

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]

        # Fixed weights: 70% distance, 30% centrality
        weighted_score = (0.7 * distance_to_current) + (0.3 * centrality_scores[i])

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
