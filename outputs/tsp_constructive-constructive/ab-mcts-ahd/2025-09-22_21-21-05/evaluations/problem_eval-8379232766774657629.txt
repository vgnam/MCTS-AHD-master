def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    progress_factor = min(1.0, visited_ratio * 2.0)
    exploration_weight = 1.0 - progress_factor
    exploitation_weight = progress_factor

    best_score = float('-inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        exploration_score = -distance_to_current * exploration_weight
        exploitation_score = -distance_to_destination * exploitation_weight
        density_score = -avg_distance_to_remaining * 0.4
        centrality_bonus = centrality_score * 0.3

        combined_score = exploration_score + exploitation_score + density_score + centrality_bonus
        candidates.append((node, combined_score))

    if candidates:
        candidates.sort(key=lambda x: x[1], reverse=True)
        probabilities = [2 ** (score / max(1.0, max(c[1] for c in candidates))) for _, score in candidates]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([c[0] for c in candidates], weights=probabilities, k=1)[0]

    return next_node
