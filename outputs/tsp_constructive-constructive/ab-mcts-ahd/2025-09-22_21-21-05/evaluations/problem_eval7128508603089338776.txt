def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    total_nodes = total_unvisited + 1  # Assuming current_node is already visited
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Adaptive weight with exponential decay
        weight_factor = 0.5 * (1 - math.exp(-0.5 * (total_unvisited / total_nodes)))
        weighted_distance = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination

        # Dynamic bias based on visited/unvisited ratio
        bias = (total_nodes - total_unvisited) / total_nodes
        adjusted_score = weighted_distance * (1 + bias * (distance_to_destination - distance_to_current))

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node

    return next_node
