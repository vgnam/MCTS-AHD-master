def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        sum_distances = distance_to_current + distance_to_destination
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / total_unvisited if total_unvisited else 0

        # Normalize factors
        norm_sum_distances = sum_distances / max(distance_matrix[current_node][n] for n in unvisited_nodes) if unvisited_nodes else 1
        norm_avg_distance = avg_distance_to_remaining / max(max(distance_matrix[n]) for n in unvisited_nodes) if unvisited_nodes else 1

        # Dynamic weight based on centrality and unvisited nodes
        weight = 0.3 * (1 / (1 + 0.05 * total_unvisited)) + 0.2 * centrality

        combined_score = (1 - weight) * (-norm_sum_distances) + weight * (-norm_avg_distance)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
