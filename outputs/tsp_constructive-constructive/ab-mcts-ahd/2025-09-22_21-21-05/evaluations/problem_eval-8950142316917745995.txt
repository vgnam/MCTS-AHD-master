def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight with logarithmic scaling
        weight = 0.5 * (1 - (1 / (1 + math.exp(-total_unvisited + 5))))

        # Penalty for revisiting nearby nodes to avoid cycles
        revisit_penalty = 0
        if distance_to_current < (sum(distance_matrix[current_node]) / len(distance_matrix[current_node])):
            revisit_penalty = distance_to_current * 0.2

        combined_score = distance_to_current + weight * distance_to_destination + revisit_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
