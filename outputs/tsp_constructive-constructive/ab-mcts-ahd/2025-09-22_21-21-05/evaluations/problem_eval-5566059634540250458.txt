def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    # Calculate centrality of current node (normalized by total nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))

    # Calculate remaining path length estimate
    remaining_path = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining path and centrality
        distance_weight = 1.0 * (1 - 0.2 * (total_unvisited / len(distance_matrix)))
        destination_weight = 0.5 * (1 + 0.1 * (total_unvisited / len(distance_matrix)))
        exploration_weight = 0.3 * centrality * (1 - 0.1 * (total_unvisited / len(distance_matrix)))

        # Connectivity bonus: nodes with more unvisited neighbors get higher score
        connectivity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0)

        # Penalty for revisiting nodes (simulated by reducing score)
        revisit_penalty = 0.1 * (1 - (total_unvisited / len(distance_matrix)))

        combined_score = (distance_weight * distance_to_current +
                         destination_weight * distance_to_destination +
                         exploration_weight * connectivity -
                         revisit_penalty * distance_to_current)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
