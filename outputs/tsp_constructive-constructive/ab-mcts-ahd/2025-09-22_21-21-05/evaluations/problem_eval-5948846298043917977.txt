def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        scaling_factor = 1.0 + visited_ratio
        weight_current = scaling_factor / (1.0 + scaling_factor)
        weight_destination = 1.0 - weight_current

        centrality_penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1e-9) / len(unvisited_nodes)

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) - (0.5 * centrality_penalty)
        scores.append(weighted_score)

    if not scores:
        return destination_node

    exp_scores = [math.exp(-score) for score in scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [exp_score / sum_exp_scores for exp_score in exp_scores]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
