def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 / (1 + num_unvisited))  # Cooling schedule
    novelty_bonus = 0.5 * (1 - num_unvisited / len(distance_matrix))  # Encourages visiting less frequent nodes

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Local and global balance with temperature
        local_score = distance_to_current + distance_to_destination
        global_score = avg_distance_to_remaining
        combined_score = (1 - temperature) * local_score + temperature * global_score - novelty_bonus * distance_to_current

        scores.append((node, combined_score))

    # Probabilistic selection based on scores
    if scores:
        nodes, scores = zip(*scores)
        exp_scores = [math.exp(-s / temperature) for s in scores]
        probs = [e / sum(exp_scores) for e in exp_scores]
        next_node = random.choices(nodes, weights=probs, k=1)[0]
        return next_node
    else:
        return next_node
