def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1.0 - visited_ratio
    weight_destination = visited_ratio

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination)

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_matrix[current_node][node] * 1.5:
                penalty += 0.1

        max_distance = max(distance_to_current, combined_score + penalty)

        if max_distance < best_score:
            best_score = max_distance
            next_node = node

    return next_node
