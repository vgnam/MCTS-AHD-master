def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, memory=None):
    if not unvisited_nodes:
        return destination_node

    if memory is None:
        memory = {}

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    total_unvisited = len(unvisited_nodes)
    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        immediate_weight = 0.8 * (total_unvisited / (total_unvisited + 1)) + 0.2 * (1 - memory.get(node, 0))
        destination_weight = 1 - immediate_weight

        memory_factor = 1 + 0.1 * memory.get(node, 0)

        score = (immediate_weight * distance_to_current + destination_weight * distance_to_destination) * memory_factor

        if score < min_score:
            min_score = score
            next_node = node

    memory[next_node] = memory.get(next_node, 0) + 1

    return next_node
