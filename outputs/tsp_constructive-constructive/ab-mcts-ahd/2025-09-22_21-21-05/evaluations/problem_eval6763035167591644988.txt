def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    # Calculate dynamic weight for long-term distance
    dynamic_weight = 0.7 * (1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Adjust score with dynamic weight
        total_score = distance_to_current + dynamic_weight * distance_to_destination

        if total_score < best_score:
            best_score = total_score
            next_node = node

    return next_node
