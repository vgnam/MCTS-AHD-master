def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality adjusted by progress: early stages prioritize local, later stages prioritize global
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality = 1 / (avg_distance_to_remaining + 1e-6)

        # Dynamic weight: early stages favor local (distance_to_current), later stages favor centrality
        progress_weight = min(0.7, (total_unvisited - 1) / total_unvisited)
        centrality_weight = 1 - progress_weight
        weighted_centrality = centrality_weight * centrality * (1 + (total_unvisited / len(unvisited_nodes)))

        # Aggressive path efficiency penalty: penalize nodes far from current path more heavily
        path_efficiency_penalty = max(0, (distance_to_current - 1.2 * distance_matrix[current_node][destination_node]) ** 2)

        combined_score = (0.6 * distance_to_current + 0.4 * distance_to_destination) - weighted_centrality + path_efficiency_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
