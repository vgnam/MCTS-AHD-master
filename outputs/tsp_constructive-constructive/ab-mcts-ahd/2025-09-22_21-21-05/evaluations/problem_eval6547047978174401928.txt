def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    distance_to_destination = distance_matrix[current_node][destination_node]
    weight_factor = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)) * (1 - distance_to_destination / max(max(row) for row in distance_matrix)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance = sum(distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0
        variance_distance = (sum((d - avg_distance) ** 2 for d in distances_to_remaining) / len(distances_to_remaining)) ** 0.5 if distances_to_remaining else 0
        combined_score = (distance_to_current + distance_to_dest) + weight_factor * (avg_distance - variance_distance)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
