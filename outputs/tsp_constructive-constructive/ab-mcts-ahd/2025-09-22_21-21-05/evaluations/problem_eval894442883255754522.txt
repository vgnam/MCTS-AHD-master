def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    progress = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1 / (1 + math.exp(-10 * (0.5 - progress)))
    weight_destination = 1 - weight_current
    novelty_weight = 0.2 * (1 - progress)

    best_score = float('inf')
    next_node = None
    visit_counts = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        novelty_score = 1 / (1 + visit_counts.get(node, 0))

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + 0.3 * avg_distance_to_remaining + novelty_weight * novelty_score

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    if next_node is not None:
        visit_counts[next_node] = visit_counts.get(next_node, 0) + 1

    return next_node
