def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    global_weight = 0.7 - 0.5 * (remaining_nodes / len(distance_matrix))  # Dynamic global weight based on remaining nodes
    density_threshold = 0.3 * (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) if unvisited_nodes else 0

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality as average distance to remaining nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Penalize nodes based on distance variance and density
        distance_variance = sum((distance_matrix[node][n] - centrality) ** 2 for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
        density_penalty = 1.5 if distance_to_current < density_threshold else 0.0

        combined_score = (distance_to_current + distance_to_destination) + global_weight * centrality + 0.2 * distance_variance + density_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
