def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    global_weight = 0.5 if remaining_count > 2 else 0.7  # Increase global weight as fewer nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0
        combined_score = distance_to_current + distance_to_destination + global_weight * avg_distance_to_remaining

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_score = distance_matrix[current_node][destination_node] + distance_matrix[destination_node][destination_node] + global_weight * sum(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node) / remaining_count if remaining_count > 1 else 0
        if destination_score < best_score:
            next_node = destination_node

    return next_node
