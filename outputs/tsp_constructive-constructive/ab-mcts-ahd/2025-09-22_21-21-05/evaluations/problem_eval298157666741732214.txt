def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality score: average distance to all unvisited nodes (excluding current and destination)
        centrality_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Dynamic weight: prioritize centrality when few nodes remain, else balance proximity and centrality
        weight_centrality = 1.0 / (remaining_nodes + 1)
        weight_proximity = 1.0 - weight_centrality

        # Penalty for nodes frequently selected in previous steps (simulated here with a simple heuristic)
        selection_penalty = 1.0 / (1 + (distance_to_current + distance_to_destination) / 2)

        weighted_score = (weight_proximity * distance_to_current) + (weight_centrality * centrality_score) - selection_penalty

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
