def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    temperature = 1.0 - (visited_ratio ** 2)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Sigmoid-based weight
        weight = 1.0 / (1.0 + math.exp(-10 * (visited_ratio - 0.5)))

        # Penalty for revisiting nodes (avoid cycles)
        revisit_penalty = 0.1 if node in visited_nodes else 0.0

        # Temperature-adjusted score
        score = (distance_to_current * (1 - weight) + distance_to_destination * weight) * (1 - revisit_penalty)
        score += temperature * random.uniform(-0.1, 0.1)  # Exploration component

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
