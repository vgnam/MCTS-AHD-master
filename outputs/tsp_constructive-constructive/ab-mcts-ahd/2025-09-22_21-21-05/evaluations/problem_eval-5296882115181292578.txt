def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)

        # Dynamic weight adjustment
        exploration_weight = 0.5 if total_unvisited > 3 else 0.3
        exploitation_weight = 1 - exploration_weight

        # Historical visit frequency (simplified for demonstration)
        visit_frequency = 1 / (1 + sum(distance_matrix[node]) / len(distance_matrix))

        # Novel scoring mechanism
        score = (exploitation_weight * (distance_to_current + distance_to_destination) +
                exploration_weight * (centrality * visit_frequency))

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
