import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (1.0 - num_unvisited / len(distance_matrix)) ** 3)  # Steeper temperature cooling
    exploration_factor = 0.7 * (1.0 - math.exp(-(num_unvisited / len(distance_matrix)) ** 2))  # Quadratic exploration

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Global potential score with quadratic weighting
        global_score = (distance_to_destination + exploration_factor * avg_distance_to_remaining ** 2)

        # Local distance score with quadratic weighting
        local_score = distance_to_current * (1.0 + 0.3 * (1.0 - num_unvisited / len(distance_matrix)) ** 2)

        # Combined score with temperature-driven randomness
        combined_score = (0.7 * local_score + 0.3 * global_score) * (1.0 + temperature * random.uniform(-0.2, 0.2))

        scores.append((node, combined_score))

    # Select node with lowest score with probability inversely proportional to temperature
    if random.random() < (1.0 - temperature):
        next_node, _ = random.choice(scores)
    else:
        next_node, _ = min(scores, key=lambda x: x[1])

    return next_node
