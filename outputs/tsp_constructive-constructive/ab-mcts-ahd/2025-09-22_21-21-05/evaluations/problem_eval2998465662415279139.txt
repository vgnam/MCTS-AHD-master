importance of reaching the destination and exploring less central nodes, using a fixed exploration bonus and a destination weight that grows with the number of unvisited nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate centrality of current node (inverse of average distance to all nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Fixed exploration bonus based on centrality
        exploration_bonus = 0.4 * centrality

        # Destination weight increases with unvisited nodes
        destination_weight = 0.3 + 0.7 * (total_unvisited / len(distance_matrix))

        # Combined score with fixed exploration and growing destination weight
        combined_score = distance_to_current + destination_weight * distance_to_destination + exploration_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
