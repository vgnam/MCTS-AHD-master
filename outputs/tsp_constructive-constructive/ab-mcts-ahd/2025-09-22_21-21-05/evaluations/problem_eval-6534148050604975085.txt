def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality measure: average distance to remaining nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (num_unvisited - 1) if num_unvisited > 1 else 0

        # Dynamic weight based on remaining nodes and centrality
        weight = 1.0 - (0.8 * (num_unvisited - 1) / (num_unvisited + 1)) if num_unvisited > 1 else 0.2
        proximity_factor = (distance_to_current + distance_to_destination) / 2
        combined_score = proximity_factor - (weight * centrality)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
