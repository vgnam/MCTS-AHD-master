def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    remaining_nodes = len(unvisited_nodes)
    min_score = float('inf')

    # Calculate centrality for each unvisited node
    centrality_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        centrality_scores.append(avg_dist)

    avg_centrality = sum(centrality_scores) / remaining_nodes if remaining_nodes > 0 else 0

    # Calculate future potential: estimated additional cost if this node is chosen
    future_potential = []
    for i, node in enumerate(unvisited_nodes):
        potential_cost = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        for other in unvisited_nodes:
            if other != node:
                potential_cost += min(distance_matrix[node][other], distance_matrix[other][node])
        future_potential.append(potential_cost)

    avg_potential = sum(future_potential) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes
        weight_current = remaining_nodes / (remaining_nodes + 2)
        weight_centrality = 0.3 * (1.0 - weight_current)
        weight_potential = 0.7 * (1.0 - weight_current)

        # Hybrid score combining immediate distance, centrality, and future potential
        weighted_score = (
            weight_current * distance_to_current +
            weight_centrality * centrality_scores[i] / (avg_centrality + 1e-6) +
            weight_potential * future_potential[i] / (avg_potential + 1e-6)
        )

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
