def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_to_current = min(0.6 + (0.4 * (1 - remaining_nodes / len(distance_matrix))), 1.0)
    weight_to_destination = max(0.3 - (0.3 * (1 - remaining_nodes / len(distance_matrix))), 0.0)
    revisit_penalty_factor = 0.5 * (1 + (1 - remaining_nodes / len(distance_matrix)))

    best_score = float('inf')
    next_node = None
    node_visits = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        revisit_penalty = node_visits.get(node, 0) * revisit_penalty_factor

        weighted_score = (distance_to_current * weight_to_current) + (distance_to_destination * weight_to_destination) + revisit_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

        node_visits[node] = node_visits.get(node, 0) + 1

    return next_node
