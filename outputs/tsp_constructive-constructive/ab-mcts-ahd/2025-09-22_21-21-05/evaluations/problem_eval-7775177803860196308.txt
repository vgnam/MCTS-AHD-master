def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    min_weighted_sum = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]

        # Normalize distances
        norm_current_to_node = current_to_node / max_distance
        norm_node_to_destination = node_to_destination / max_distance

        # Dynamic weight based on current node's progress towards destination
        distance_factor = 1.0 - (node_to_destination / (distance_matrix[current_node][destination_node] + 1e-6))
        weight = 0.5 * (1.0 - distance_factor) + 0.5 * (1.0 / (1.0 + remaining_nodes))

        # Penalty for revisiting nodes (simplified)
        penalty = 0.1 * (1.0 - (1.0 / (1.0 + remaining_nodes)))

        weighted_sum = (1 - weight) * norm_current_to_node + weight * norm_node_to_destination + penalty

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
