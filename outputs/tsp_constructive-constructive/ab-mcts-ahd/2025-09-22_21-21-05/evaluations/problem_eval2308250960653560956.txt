import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        total_nodes = len(unvisited_nodes) + len(unvisited_nodes) - len(unvisited_nodes)
        dynamic_threshold = max(0.1, 0.5 - (remaining_nodes / total_nodes) * 0.4)
        bias = 1 - (destination_distance / (avg_distance + 1e-10))
        if bias > dynamic_threshold:
            return destination_node

    min_distance = float('inf')
    next_node = None
    novelty_scores = {}

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance)
        global_factor = 1 / (1 + math.exp(-0.1 * (distance_matrix[node][destination_node] - avg_distance)))
        novelty_scores[node] = global_factor / (1 + local_density)
        if distance < min_distance or (distance == min_distance and novelty_scores[node] > novelty_scores.get(next_node, 0)):
            min_distance = distance
            next_node = node

    return next_node
