def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    proximity_weight = max(0.1, 0.5 - (0.4 * (total_unvisited / len(distance_matrix))))
    direction_weight = 1.0 - proximity_weight

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_score = (distance_to_current / distance_matrix[current_node][destination_node]) * proximity_weight + \
                          (distance_to_destination / distance_matrix[current_node][destination_node]) * direction_weight

        if normalized_score < best_score:
            best_score = normalized_score
            next_node = node

    return next_node
