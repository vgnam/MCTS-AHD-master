def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    # Adjust weights dynamically based on remaining nodes
    remaining_nodes_count = len(unvisited_nodes)
    if remaining_nodes_count > 10:
        w_max, w_avg, w_direct = 0.5, 0.2, 0.3
    elif remaining_nodes_count > 5:
        w_max, w_avg, w_direct = 0.4, 0.3, 0.3
    else:
        w_max, w_avg, w_direct = 0.3, 0.4, 0.3

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        combined_score = w_max * max_distance + w_avg * avg_distance_to_remaining + w_direct * (distance_to_current + distance_to_destination)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
