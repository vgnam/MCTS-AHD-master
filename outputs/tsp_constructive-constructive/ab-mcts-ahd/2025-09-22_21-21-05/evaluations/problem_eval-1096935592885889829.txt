def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    penalty_factor = 1.0 + 0.5 * (1.0 - visited_ratio)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        local_neighborhood = [n for n in unvisited_nodes if n != node]
        neighborhood_score = sum(distance_matrix[node][n] for n in local_neighborhood) / len(local_neighborhood) if local_neighborhood else 0

        combined_score = (penalty_factor * distance_to_current) + (0.7 * distance_to_destination) + (0.5 * neighborhood_score)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
