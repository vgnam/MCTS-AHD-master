def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_variance = 0.5 * (num_unvisited / (num_unvisited + 2))  # Adjusted dynamic weight
    proximity_penalty = 1.5 * (1.0 / (1.0 + (sum(distance_matrix[0]) / len(distance_matrix))))  # Proximity-based penalty

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance_to_remaining = (sum((d - (sum(distances_to_remaining) / len(distances_to_remaining))) ** 2 for d in distances_to_remaining) / len(distances_to_remaining)) if distances_to_remaining else 0

        # Penalty for nodes too close to current node
        penalty = 1.0 if distance_to_current < proximity_penalty else 1.0
        penalty *= 1.0 + (0.2 * (num_unvisited / len(distance_matrix)))  # Adjusted adaptive penalty

        combined_score = (distance_to_current + distance_to_destination + weight_variance * variance_to_remaining) * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
