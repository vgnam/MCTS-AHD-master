def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        density_factor = len([n for n in unvisited_nodes if distance_matrix[node][n] <= 1.5 * avg_distance_to_remaining]) / len(unvisited_nodes) if unvisited_nodes else 0

        weight_current = 1.0 / remaining_nodes
        weight_destination = 1.0 - weight_current
        normalized_avg = avg_distance_to_remaining / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) + 1e-6)

        weighted_score = (weight_current * distance_to_current + weight_destination * distance_to_destination) * (1 - 0.3 * normalized_avg) + (0.5 * density_factor)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
