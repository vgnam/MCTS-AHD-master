def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 - (0.8 / (1.0 + remaining_nodes))  # Adjusted weight for smoother prioritization

    # Calculate average distance to unvisited nodes
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    min_weighted_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            weighted_distance = distance * weight
        else:
            # Novel heuristic: balance between proximity and average distance
            weighted_distance = distance * (1 - weight) + (avg_distance - distance) * 0.3

        if weighted_distance < min_weighted_distance:
            min_weighted_distance = weighted_distance
            next_node = node

    return next_node
