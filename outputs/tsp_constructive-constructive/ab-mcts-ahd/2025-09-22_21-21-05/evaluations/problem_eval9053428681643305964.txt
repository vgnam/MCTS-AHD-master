def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.9 ** (remaining_nodes / len(distance_matrix))
    exploration_weight = 1.0 - decay_factor

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        recency_penalty = 1.0
        if node in unvisited_nodes:
            recency_penalty = 1.5

        lookahead_heuristic = 0.0
        if remaining_nodes > 1:
            lookahead_heuristic = min(distance_matrix[node][n] for n in unvisited_nodes - {node}) * 0.3

        combined_score = (distance_to_current + exploration_weight * distance_to_destination + lookahead_heuristic) * recency_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
