def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality penalty: higher penalty for nodes with fewer connections to unvisited nodes
        connections = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
        penalty = 1.0 - (connections / total_unvisited) if total_unvisited > 1 else 0.0

        # Dynamic weight with decaying penalty
        weight = 1.0 - (0.6 * (total_unvisited - 1) / total_unvisited)
        weighted_score = (weight * max(distance_to_current, distance_to_destination)) + (penalty * distance_to_current)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
