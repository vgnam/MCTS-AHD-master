def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    # Historical performance tracking (simplified)
    node_performance = {node: 0.5 for node in unvisited_nodes}  # Default performance score

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        sum_distances = distance_to_current + distance_to_destination

        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance_to_remaining = sum(distances_to_remaining) / len(unvisited_nodes) if unvisited_nodes else 0
        variance = sum((d - avg_distance_to_remaining) ** 2 for d in distances_to_remaining) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weight with historical performance influence
        dynamic_weight = (1.0 / (1.0 + num_unvisited)) * node_performance[node]

        # Exploration bonus (reward nodes with lower variance)
        exploration_bonus = 1.0 / (1.0 + variance)

        # Consistency penalty (penalize nodes with unstable connections)
        consistency_penalty = sum(abs(d - avg_distance_to_remaining) for d in distances_to_remaining) / len(unvisited_nodes) if unvisited_nodes else 0

        combined_score = (sum_distances * dynamic_weight) + (avg_distance_to_remaining * (1 - dynamic_weight)) + (exploration_bonus * 0.2) - (consistency_penalty * 0.15)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    # Update historical performance (simplified)
    if next_node in node_performance:
        node_performance[next_node] = min(1.0, node_performance[next_node] + 0.1)  # Reward successful selection

    return next_node
