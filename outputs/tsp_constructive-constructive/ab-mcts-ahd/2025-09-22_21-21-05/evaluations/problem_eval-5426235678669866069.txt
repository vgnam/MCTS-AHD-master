def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_avg = 0.8 * (num_unvisited ** 0.5) / (num_unvisited + 1)  # Higher dynamic weight adjustment
    penalty_threshold = 0.3 * sum(distance_matrix[0]) / len(distance_matrix)  # Higher penalty threshold

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Stronger penalty for nodes too close to current node
        penalty = 1.5 if distance_to_current < penalty_threshold else 1.0

        combined_score = (2 * distance_to_current + 1.5 * distance_to_destination + weight_avg * avg_distance_to_remaining) * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
