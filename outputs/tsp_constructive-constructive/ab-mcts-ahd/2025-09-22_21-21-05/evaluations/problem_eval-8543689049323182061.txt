def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    # Calculate centrality scores (inverse of average distance to unvisited nodes)
    centrality_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        centrality = 1.0 / (avg_dist + 1e-6)  # Higher for more central nodes
        centrality_scores.append(centrality)

    max_centrality = max(centrality_scores) if centrality_scores else 1.0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic exploration-exploitation weight
        exploration_weight = (total_unvisited / (total_unvisited + 1)) ** 2  # Decreases as nodes are visited
        exploitation_weight = 1.0 - exploration_weight

        # Normalized centrality contribution
        normalized_centrality = centrality_scores[i] / (max_centrality + 1e-6)

        # Score combining distance and centrality with dynamic weights
        score = (exploitation_weight * distance_to_current +
                 exploration_weight * distance_to_destination +
                 normalized_centrality * (total_unvisited ** 0.5))  # Path length sensitivity

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
