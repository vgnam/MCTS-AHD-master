def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on proximity to destination
        weight_factor = 0.5 if distance_to_destination < sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) else 0.3

        # Variance in distances to remaining nodes
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - sum(distances)/len(distances))**2 for d in distances) / len(distances) if distances else 0

        combined_score = (distance_to_current + distance_to_destination) + weight_factor * max(distance_to_current, distance_to_destination) + (1 - weight_factor) * variance

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
