def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance = sum(distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0
        variance = sum((d - avg_distance) ** 2 for d in distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0
        dynamic_weight = (1.0 - 0.5 * (len(unvisited_nodes) / len(distance_matrix))) ** 2
        connectivity_penalty = dynamic_weight * (variance ** 0.5)
        combined_score = (distance_to_current ** 0.3 * distance_to_destination ** 0.7) - connectivity_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
