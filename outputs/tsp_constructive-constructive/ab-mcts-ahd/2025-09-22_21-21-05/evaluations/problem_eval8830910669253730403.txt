def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 0.1 + 0.9 * (1 - remaining_nodes / (remaining_nodes + 1))  # Decreases as nodes are visited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Node centrality: sum of inverse distances to other unvisited nodes (higher for central nodes)
        centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        # Combined score: prioritize centrality with exploration weight, balance with current/destination distances
        combined_score = (centrality * exploration_weight) - (distance_to_current + distance_to_destination)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
