def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_steps = len(unvisited_nodes)
    total_unvisited = remaining_steps
    scores = []
    nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting factor based on remaining steps and total unvisited nodes
        exploration_weight = 0.5 * (total_unvisited / (total_unvisited + remaining_steps))
        exploitation_weight = 1.0 - exploration_weight

        # Novelty bonus for less-visited nodes (simulated by inverse frequency)
        novelty_bonus = 1.0 / (1.0 + remaining_steps - total_unvisited + node)

        # Adaptive detour penalty that increases with remaining steps
        detour_penalty = (distance_to_current + distance_to_destination - distance_matrix[current_node][destination_node]) ** 2
        detour_penalty *= (1.0 + 0.1 * remaining_steps)

        # Combined score with dynamic weights and novelty
        combined_score = (exploitation_weight * distance_to_current +
                         exploration_weight * distance_to_destination +
                         novelty_bonus -
                         detour_penalty)

        scores.append(combined_score)
        nodes.append(node)

    # Probabilistic selection based on scores (higher scores have higher selection probability)
    if scores:
        max_score = max(scores)
        min_score = min(scores)
        normalized_scores = [(score - min_score) / (max_score - min_score + 1e-10) for score in scores]
        total_normalized = sum(normalized_scores)
        probabilities = [score / total_normalized for score in normalized_scores]
        next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
