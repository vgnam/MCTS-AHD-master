def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    dynamic_weight = 0.4 * (1 - (remaining_count / (remaining_count + 1)))

    # Calculate centrality measure
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_count
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_count if remaining_count > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        distance_penalty = distance_to_current * (1.0 + (remaining_count / len(distance_matrix)))
        penalty = 0.0

        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.2:
                penalty += 0.1

        combined_score = (distance_penalty + centrality_factor) * (1 - dynamic_weight) + centrality_factor * dynamic_weight - penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
