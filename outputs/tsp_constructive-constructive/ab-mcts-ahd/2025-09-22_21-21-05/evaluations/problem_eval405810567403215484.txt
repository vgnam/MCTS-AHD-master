def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1.0 - visited_ratio
    weight_destination = visited_ratio

    min_distance = float('inf')
    max_distance = float('-inf')
    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_current < min_distance:
            min_distance = distance_to_current
        if distance_to_current > max_distance:
            max_distance = distance_to_current

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_matrix[current_node][node] * 1.5:
                penalty += 0.1

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        weighted_avg = (min_distance + max_distance) / 2
        if destination_distance < weighted_avg and (weight_current * destination_distance + weight_destination * distance_matrix[destination_node][destination_node]) < best_score:
            next_node = destination_node

    return next_node
