def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_unvisited_distances = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    avg_unvisited_distance = total_unvisited_distances / remaining_nodes if remaining_nodes > 0 else 0

    weight_factor = (remaining_nodes ** 2) / (1.0 + remaining_nodes ** 2)
    proximity_weight = (1 - weight_factor) * (1 + avg_unvisited_distance / (distance_matrix[current_node][destination_node] + 1e-6))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        weighted_score = proximity_weight * distance_to_current + (1 - proximity_weight) * distance_to_destination

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
