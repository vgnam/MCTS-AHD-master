def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited

    # Calculate centrality factors
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        avg_distances.append(avg_dist)
    avg_avg_distance = sum(avg_distances) / total_unvisited if total_unvisited > 0 else 0

    best_score = float('inf')
    candidates = []

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining path length and node density
        weight = 1.0 / (1.0 + (distance_to_destination / (avg_distance_to_dest + 1e-6)) * (total_unvisited / len(distance_matrix)))

        # Centrality factor from No.1
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        # Weighted score combining immediate, long-term, and centrality
        score = (1 - weight) * distance_to_current + weight * distance_to_destination + 0.5 * centrality_factor

        if score < best_score:
            best_score = score
            candidates = [node]
        elif score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        return next_node
    else:
        return next_node
