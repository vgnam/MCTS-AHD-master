def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_current = 0.7 * (remaining_nodes / (remaining_nodes + 2))
    weight_destination = 0.3 * (1 - (remaining_nodes / (remaining_nodes + 2)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality_penalty = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        dynamic_penalty = 0.5 * centrality_penalty * (1 + (remaining_nodes / (remaining_nodes + 1)))

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + dynamic_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
