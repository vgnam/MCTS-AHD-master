def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    node_potentials = []
    exploration_bonus = min(1.0, 0.5 * (total_unvisited / total_unvisited) ** 1.5)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            distances_to_remaining = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance_to_remaining = sum(distances_to_remaining) / len(remaining_nodes)
            variance_to_remaining = sum((d - avg_distance_to_remaining) ** 2 for d in distances_to_remaining) / len(remaining_nodes)
        else:
            avg_distance_to_remaining = 0
            variance_to_remaining = 0

        connectivity_score = (1 / (1 + avg_distance_to_remaining)) if avg_distance_to_remaining != 0 else 0
        variance_penalty = variance_to_remaining ** 0.5

        potential = (distance_to_current + 0.7 * distance_to_destination) * (1 + connectivity_score) - 0.3 * variance_penalty + exploration_bonus
        node_potentials.append((node, potential))

    if not node_potentials:
        return destination_node

    probabilities = [1 / (1 + potential) for _, potential in node_potentials]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in node_potentials], weights=normalized_probs, k=1)[0]
    return next_node
