def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    node_visits = {}

    # Calculate centrality measure
    remaining_nodes = len(unvisited_nodes)
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        revisit_penalty = node_visits.get(node, 0) * 0.5
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        weighted_score = (distance_to_current * 0.4) + (distance_to_destination * 0.3) + (centrality_factor * 0.3) + revisit_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

        node_visits[node] = node_visits.get(node, 0) + 1

    return next_node
