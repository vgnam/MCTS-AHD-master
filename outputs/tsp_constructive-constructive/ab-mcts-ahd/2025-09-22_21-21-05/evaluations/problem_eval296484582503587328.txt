def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality measure
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    # Dynamic weight adjustment based on remaining nodes
    proximity_weight = 1.0 / (remaining_nodes + 1e-6)
    centrality_weight = 0.5 * (1.0 - 0.1 * (1.0 - (remaining_nodes / (remaining_nodes + 1))))

    # Exploration factor: encourages visiting less traversed edges
    traversal_counts = {node: sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] > 0) for node in unvisited_nodes}
    max_traversal = max(traversal_counts.values()) if traversal_counts else 1
    exploration_factor = 0.2 * (1.0 - (traversal_counts.get(current_node, 0) / max_traversal))

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        penalty_avg_distance = 0.3 * avg_distances[i]

        combined_score = (proximity_weight * distance_to_current) + (centrality_weight * centrality_factor) + penalty_avg_distance - exploration_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
