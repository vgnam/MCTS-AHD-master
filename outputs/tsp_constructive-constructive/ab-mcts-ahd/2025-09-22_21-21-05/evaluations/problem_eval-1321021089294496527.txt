def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining steps and node centrality
        remaining_steps = total_unvisited
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node]) if total_unvisited > 1 else 1.0

        dynamic_weight = 1.0 / (1.0 + (remaining_steps * centrality))

        # Nonlinear scoring function
        weighted_score = (dynamic_weight * distance_to_current) + ((1 - dynamic_weight) * distance_to_destination) - (0.1 * (distance_to_current + distance_to_destination) / (1 + remaining_steps))

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
