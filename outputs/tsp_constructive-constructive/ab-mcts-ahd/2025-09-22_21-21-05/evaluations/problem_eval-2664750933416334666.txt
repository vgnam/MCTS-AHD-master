def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    bias_factor = (len(unvisited_nodes) / total_nodes) ** 2  # Squared to emphasize early/late game distinction

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted score: bias toward destination when many nodes remain, prioritize immediate progress when few nodes left
        combined_score = (1 - bias_factor) * distance_to_current + bias_factor * distance_to_destination

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
