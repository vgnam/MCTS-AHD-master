def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Higher weight for global exploration early, dynamic adjustment
        avg_distance_weight = 0.7 if remaining_nodes_count > 10 else 0.3
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Stronger penalty for revisiting nodes
        penalty = 1.2 if node in unvisited_nodes else 2.0

        combined_score = (distance_to_current + distance_to_destination) * penalty + avg_distance_weight * avg_distance_to_remaining

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
