def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = (remaining_nodes / total_nodes) ** 2
    centrality_weights = {node: sum(distance_matrix[node]) / (total_nodes - 1) for node in unvisited_nodes}

    for node in unvisited_nodes:
        immediate_gain = -distance_matrix[current_node][node]
        future_potential = -distance_matrix[node][destination_node] * (1 - exploration_factor)
        density_score = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        centrality_score = -centrality_weights[node] * (1 - exploration_factor)

        combined_score = (0.5 * immediate_gain + 0.3 * future_potential + 0.1 * density_score + 0.1 * centrality_score)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
