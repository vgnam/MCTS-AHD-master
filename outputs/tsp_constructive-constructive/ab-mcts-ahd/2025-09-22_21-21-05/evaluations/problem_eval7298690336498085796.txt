def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Dynamic weighting: higher weight for global exploration when many nodes remain
        weight = 0.5 if remaining_count > len(unvisited_nodes) / 2 else 0.2

        # Penalty for nodes too close to current or destination
        penalty = 0
        if distance_to_current < 0.2 * (sum(distance_matrix[current_node]) / len(distance_matrix[current_node])):
            penalty += 0.1 * distance_to_current
        if distance_to_destination < 0.2 * (sum(distance_matrix[destination_node]) / len(distance_matrix[destination_node])):
            penalty += 0.1 * distance_to_destination

        combined_score = distance_to_current + distance_to_destination + weight * avg_distance_to_remaining + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
