def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    local_avg_distances = []
    global_avg_distances = []

    for node in unvisited_nodes:
        local_avg = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node and distance_matrix[node][other] < 2 * sum(distance_matrix[node]) / len(distance_matrix[node])) / (total_unvisited - 1)
        global_avg = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        local_avg_distances.append(local_avg)
        global_avg_distances.append(global_avg)

    avg_local_avg = sum(local_avg_distances) / total_unvisited if total_unvisited > 0 else 0
    avg_global_avg = sum(global_avg_distances) / total_unvisited if total_unvisited > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality_weight = 0.2 + 0.8 * (1 - total_unvisited / (total_unvisited + 1))
        distance_weight = 0.8 - 0.2 * (1 - total_unvisited / (total_unvisited + 1))

        local_centrality = 1.0 - (local_avg_distances[i] / (avg_local_avg + 1e-6))
        global_centrality = 1.0 - (global_avg_distances[i] / (avg_global_avg + 1e-6))
        combined_centrality = 0.6 * local_centrality + 0.4 * global_centrality

        cycle_penalty = 1.0 + 0.5 * (1 - distance_to_current / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node])))

        combined_score = (distance_weight * distance_to_current + centrality_weight * (1 - combined_centrality) * distance_to_destination) * cycle_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
