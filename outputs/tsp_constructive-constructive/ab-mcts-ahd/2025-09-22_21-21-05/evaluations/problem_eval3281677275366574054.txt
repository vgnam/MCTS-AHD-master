def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality factor: average distance to all nodes (higher centrality is better)
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        # Density factor: average distance to remaining unvisited nodes (lower density is better)
        density = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Dynamic weight: prioritizes proximity early, centrality and density later
        dynamic_weight = 0.5 * (1 - (remaining_count / len(distance_matrix)) ** 2)

        # Penalty for revisiting nodes (more aggressive than original)
        penalty = 0.2 * (len(distance_matrix) - remaining_count)

        # Combined score: balances proximity, destination distance, and global factors with dynamic weight
        combined_score = (1 - dynamic_weight) * (distance_to_current + 0.7 * distance_to_destination) + dynamic_weight * (0.3 * centrality - 0.5 * density) + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
