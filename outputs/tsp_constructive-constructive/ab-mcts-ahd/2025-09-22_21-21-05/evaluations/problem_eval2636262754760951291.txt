def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 - (0.8 ** (remaining_nodes / len(distance_matrix)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        local_score = - (distance_to_current + distance_to_destination)

        connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        novelty_score = -sum(1.0 / (1.0 + distance_matrix[current_node][n]) for n in unvisited_nodes if distance_matrix[current_node][n] < 0.5 * distance_to_current)

        combined_score = (0.4 * local_score) + (0.5 * exploration_weight * connectivity_score) + (0.1 * novelty_score)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
