def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_destination = 0.6 + 0.4 * visited_ratio
    weight_factor = (len(unvisited_nodes) / total_nodes) ** 1.5

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        penalty = max(0, distance_to_destination - 2 * distance_matrix[current_node][destination_node]) ** 1.5

        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_matrix[current_node][node] * 1.2:
                penalty += 0.15

        combined_score = 0.4 * distance_to_current + weight_factor * weight_destination * distance_to_destination + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
