def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 - (0.9 * (total_unvisited / (total_unvisited + 10)) ** 2)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes) / total_unvisited
        centrality_penalty = avg_distance_to_unvisited * 0.5

        combined_score = (weight_factor * distance_to_current +
                         (1 - weight_factor) * distance_to_destination +
                         centrality_penalty)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
