def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    # Dynamic global weight based on remaining nodes and path length
    global_weight = 0.5 * (remaining_nodes / (remaining_nodes + path_length)) if remaining_nodes > 2 else 0.2

    # Calculate node centrality (average distance to all other unvisited nodes)
    centrality_scores = {}
    for node in unvisited_nodes:
        centrality_scores[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = centrality_scores[node]

        # Dynamic proximity penalty based on current path efficiency
        proximity_penalty = 1.0 if distance_to_current < 0.1 * path_length else 0.0

        # Novel scoring mechanism combining local and global factors with adaptive weights
        combined_score = (1 - global_weight) * (distance_to_current + distance_to_destination) + global_weight * avg_distance_to_remaining + proximity_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
