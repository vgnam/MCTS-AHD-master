def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        priority_shift = 1.0 - visited_ratio ** 2
        weight_current = priority_shift
        weight_destination = 1.0 - priority_shift

        centrality_factor = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1e-9) / len(unvisited_nodes)
        centrality_penalty = centrality_factor * (1.0 - visited_ratio)

        normalized_score = (weight_current * (1.0 / (1.0 + distance_to_current))) + \
                          (weight_destination * (1.0 / (1.0 + distance_to_destination))) - \
                          (0.3 * centrality_penalty)

        if normalized_score > best_score:
            best_score = normalized_score
            next_node = node

    return next_node
