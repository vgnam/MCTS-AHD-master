def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    weights = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            combined_score = distance_to_current + distance_to_destination
        else:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance_to_remaining = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

            density_factor = len(remaining_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
            normalized_density = 1 - density_factor if density_factor != 0 else 0

            proximity_weight = 1 / (1 + distance_to_current)
            combined_score = (distance_to_current + distance_to_destination) + 0.5 * avg_distance_to_remaining + 0.5 * normalized_density

        scores.append(combined_score)
        weights.append(proximity_weight)

    normalized_weights = [w / sum(weights) for w in weights]
    selected_index = np.random.choice(len(unvisited_nodes), p=normalized_weights)
    next_node = unvisited_nodes[selected_index]

    return next_node
