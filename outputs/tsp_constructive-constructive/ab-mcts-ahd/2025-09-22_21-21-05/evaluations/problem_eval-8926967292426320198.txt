importance" metric to prioritize critical nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    node_density = len(distance_matrix) / (num_unvisited + 1)  # Node density metric
    weight_factor = 0.5 * (1 + math.exp(-num_unvisited / 5))  # Sigmoid-based weight adjustment

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Node importance metric: balances proximity and remaining distances
        node_importance = (1 / (1 + distance_to_current)) * (1 / (1 + avg_distance_to_remaining))

        # Dynamic penalty based on proximity and density
        proximity_penalty = 1.0 if distance_to_current < (0.2 * node_density * sum(distance_matrix[current_node])) else 1.0
        density_penalty = 1.0 + (0.1 * (num_unvisited / len(distance_matrix)))

        # Multi-layered scoring
        score = (node_importance * weight_factor) + \
               (distance_to_destination / max(1, sum(distance_matrix[node]))) * (1 - weight_factor)
        combined_score = score / (proximity_penalty * density_penalty)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
