def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        destination_distance = distance_matrix[current_node][destination_node]
        exploration_phase = len(unvisited_nodes) / (len(unvisited_nodes) + len(unvisited_nodes) - len(unvisited_nodes))
        dynamic_threshold = 1 / (1 + math.exp(-10 * (exploration_phase - 0.5)))
        bias = 1 - (destination_distance / (avg_distance + 1e-10))
        local_connectivity = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        adjusted_bias = bias * (1 + math.log(1 + local_connectivity / (avg_distance + 1e-10)))
        if adjusted_bias > dynamic_threshold:
            return destination_node

    novelty_scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance)
        novelty_scores[node] = (1 - distance / (avg_distance + 1e-10)) * (1 / (1 + local_density))

    if novelty_scores:
        next_node = max(novelty_scores.items(), key=lambda x: x[1])[0]
    else:
        next_node = unvisited_nodes[0]

    return next_node
