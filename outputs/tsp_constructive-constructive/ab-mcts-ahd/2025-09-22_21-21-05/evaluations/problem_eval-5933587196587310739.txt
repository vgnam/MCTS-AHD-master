def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node

    for node in unvisited_nodes:
        # Dynamic weight adjustment based on remaining nodes density
        density_weight = 0.4 + 0.6 * (1 - len(unvisited_nodes) / total_nodes)
        connectivity_weight = 1 - density_weight

        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Cluster outlier penalty: penalize nodes far from the current cluster centroid
        centroid = sum(unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else current_node
        outlier_penalty = abs(node - centroid) * 0.1  # Simplified for demonstration

        combined_score = (density_weight * (distance_to_current + distance_to_destination) / 2) + \
                         (connectivity_weight * outlier_penalty)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
