def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function for smooth transition
        remaining_ratio = len(unvisited_nodes) / total_nodes
        sigmoid_weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))

        weight_current = sigmoid_weight
        weight_destination = 1 - sigmoid_weight

        # Penalty term based on node centrality (average distance to all other nodes)
        centrality_penalty = sum(distance_matrix[node]) / (len(distance_matrix[node]) - 1)

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (0.1 * centrality_penalty)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
