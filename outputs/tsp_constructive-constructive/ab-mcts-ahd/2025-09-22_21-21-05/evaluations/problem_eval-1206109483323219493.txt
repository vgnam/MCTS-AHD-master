def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight using sigmoid function
        sigmoid_input = (total_unvisited - 1) / (total_unvisited + 1)
        weight = 1 / (1 + math.exp(-10 * (sigmoid_input - 0.5)))

        # Centrality factor (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        combined_score = distance_to_current + weight * distance_to_destination + 0.2 * centrality

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
