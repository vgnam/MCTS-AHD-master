def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return destination_node

    # Dynamic weight based on distance ratio
    distance_to_destination = distance_matrix[current_node][destination_node]
    distance_ratio = distance_matrix[current_node][destination_node] / (sum(distance_matrix[current_node][node] for node in unvisited_nodes) + 1e-6)

    # Sigmoid adjustment for smooth transition
    sigmoid = 1 / (1 + math.exp(-10 * (distance_ratio - 0.5)))
    weight = sigmoid

    # Probabilistic selection to avoid local optima
    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        score = weight * distance_to_current + (1 - weight) * distance_to_dest
        candidates.append((node, score))

    # Select based on inverse score probability
    scores = [score for _, score in candidates]
    min_score = min(scores)
    adjusted_scores = [min_score / (score + 1e-6) for score in scores]
    total = sum(adjusted_scores)
    probs = [s / total for s in adjusted_scores]

    next_node = random.choices([node for node, _ in candidates], weights=probs, k=1)[0]
    return next_node
