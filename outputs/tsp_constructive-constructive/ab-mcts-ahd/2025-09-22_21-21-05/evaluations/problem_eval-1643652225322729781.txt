def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality as inverse of average distance to remaining nodes
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_unvisited if remaining_unvisited > 0 else 0
        centrality = 1 / (avg_distance_to_remaining + 1e-6)

        # Dynamic destination bias
        destination_bias = (total_nodes - remaining_unvisited) / total_nodes
        if node == destination_node:
            distance_to_current *= (1 - destination_bias)

        # Path efficiency penalty
        path_efficiency_penalty = max(0, distance_to_current - 1.5 * distance_matrix[current_node][destination_node])

        # Dynamic weight combining progress and centrality
        progress_weight = (remaining_unvisited - 1) / remaining_unvisited if remaining_unvisited > 0 else 0
        centrality_weight = 1 - progress_weight

        combined_score = distance_to_current + distance_to_destination + centrality_weight * centrality + path_efficiency_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
