def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)
    temperature = (remaining_count / total_nodes) * 0.5  # Controls randomness

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Local density penalty (inverse of average distance to unvisited nodes)
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_count
        local_density = 1 / (avg_distance + 1e-6)

        # Dynamic exploration factor (scales with remaining progress and distance)
        exploration_factor = (remaining_count / total_nodes) * distance_to_current

        # Global contribution (normalized by remaining nodes and squared)
        global_contribution = (sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_count) ** 2

        # Novel scoring equation with temperature scaling
        score = (distance_to_destination + exploration_factor) / (local_density + 1) + temperature * (global_contribution / (distance_to_current + 1e-6))

        scores.append((node, score))

    # Probabilistic selection based on softmax of scores
    exp_scores = [math.exp(s) for (n, s) in scores]
    sum_exp = sum(exp_scores)
    probs = [e / sum_exp for e in exp_scores]

    next_node = random.choices([n for (n, s) in scores], weights=probs, k=1)[0]

    return next_node
