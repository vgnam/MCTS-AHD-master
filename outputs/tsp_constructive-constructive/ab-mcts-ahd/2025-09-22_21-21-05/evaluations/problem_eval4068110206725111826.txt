def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_remaining = len(unvisited_nodes) + 1  # +1 for the destination

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Novel dynamic weight adjustment
        proximity_weight = 0.6 * (1 - (total_remaining / (total_remaining + 2)))
        efficiency_weight = 0.3 * (1 - proximity_weight)
        outlier_weight = 0.1 * (avg_distance_to_remaining / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 1))

        # Novel scoring equation
        combined_score = (distance_to_current * proximity_weight) + \
                         (distance_to_destination * efficiency_weight) - \
                         (avg_distance_to_remaining * outlier_weight * 1.2)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
