def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    exploration_weight = 0.5 * (1 - (remaining_count / (remaining_count + 1)))  # Adapts exploration vs. exploitation

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality based on inverse distance to all unvisited nodes
        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes)

        # Density penalty: penalizes nodes with many close neighbors
        neighbor_density = sum(1 for neighbor in unvisited_nodes
                             if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.1)
        density_penalty = 0.2 * neighbor_density

        # Proximity bias: favors nodes aligned with the current path direction
        if current_node != destination_node:
            current_direction = distance_matrix[current_node][destination_node]
            alignment_score = 1 / (1 + abs(distance_to_current - current_direction))
        else:
            alignment_score = 1.0

        # Combined score with adaptive weights
        combined_score = (
            (distance_to_current + distance_to_destination) * (1 - exploration_weight) +
            centrality_score * exploration_weight * 0.7 +
            alignment_score * exploration_weight * 0.3 -
            density_penalty
        )

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
