def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        dynamic_threshold = 1.0 + (0.5 * (total_unvisited / len(distance_matrix)))  # Adjust threshold based on remaining nodes
        if destination_distance < min_distance * dynamic_threshold:
            next_node = destination_node
        elif destination_distance == min_distance and total_unvisited > 1:
            next_node = destination_node if random.random() > 0.7 else next_node  # Probabilistic choice when equally close

    return next_node
