def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Dynamic weighting based on tour progress
    progress = 1 - (remaining_nodes / total_nodes)
    weight_current = 0.5 + 0.3 * (1 - progress)
    weight_destination = 0.3 + 0.2 * progress

    # Calculate detour risk: how much a node detours from current->destination path
    detour_risks = []
    for node in unvisited_nodes:
        direct_path = distance_matrix[current_node][destination_node]
        via_node_path = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        detour_risk = max(0, via_node_path - direct_path) / (direct_path + 1e-6)  # Normalized
        detour_risks.append(detour_risk)

    # Calculate normalized scores
    scores = []
    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        combined_score = (weight_current * distance_to_current +
                         weight_destination * distance_to_destination +
                         0.2 * detour_risks[i] * distance_to_current)

        scores.append(combined_score)

    # Probabilistic selection based on inverse scores (lower score = higher probability)
    min_score = min(scores)
    adjusted_scores = [min_score / (s + 1e-6) for s in scores]
    total = sum(adjusted_scores)
    probabilities = [s / total for s in adjusted_scores]

    next_node = unvisited_nodes[np.random.choice(len(unvisited_nodes), p=probabilities)]
    return next_node
