import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    heuristic_factor = 0.2 + 0.6 * (1 / (1 + total_unvisited))  # Dynamic heuristic factor

    scores = []
    nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Novel scoring equation: balances proximity and exploration
        score = (distance_to_current * (1 + heuristic_factor)) + \
                (distance_to_destination * (1 - heuristic_factor)) + \
                (0.1 * (total_unvisited - len(unvisited_nodes)))  # Memory penalty

        scores.append(score)
        nodes.append(node)

    # Probabilistic selection based on inverse score
    min_score = min(scores)
    normalized_scores = [min_score / (s + 1e-10) for s in scores]
    total_weight = sum(normalized_scores)
    probabilities = [s / total_weight for s in normalized_scores]

    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
