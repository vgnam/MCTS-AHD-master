import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(1.0, remaining_nodes / (remaining_nodes + 1))  # Dynamic temperature

    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = 1.0 if node == current_node else 0.0  # Penalty for revisiting

        score = (0.6 * distance_to_current) + (0.3 * distance_to_destination) + (0.1 * penalty)
        candidates.append((node, score))

    # Probabilistic selection with temperature
    probabilities = [math.exp(-score / temperature) for _, score in candidates]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    selected_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]

    # Ensure destination is prioritized when few nodes remain
    if remaining_nodes <= 2 and destination_node in unvisited_nodes:
        selected_node = destination_node

    return next_node
