def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    ratio = remaining_nodes / total_nodes if total_nodes > 0 else 0
    weight_to_destination = 0.7 * (1 - ratio)

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        centrality_bonus = 0.3 * centrality if remaining_nodes > 2 else 0

        combined_score = -distance_to_current - weight_to_destination * distance_to_destination + centrality_bonus

        if distance_matrix[node][current_node] > 0:
            combined_score -= 0.15 * distance_matrix[node][current_node] * (1 + 0.5 * ratio)

        if remaining_nodes <= 2:
            combined_score += 0.2 * distance_to_destination

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
