def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    if remaining_count == 0:
        return destination_node

    # Dynamic weight: prioritize global exploration early, then local efficiency
    weight = 0.6 if remaining_count > len(distance_matrix) / 2 else 0.3

    # Calculate centrality for each node
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_count if remaining_count > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        # Penalty for nodes too close to current or destination
        penalty = 0
        if distance_to_current < 0.2 * (sum(distance_matrix[current_node]) / len(distance_matrix[current_node])):
            penalty += 0.1 * distance_to_current
        if distance_to_destination < 0.2 * (sum(distance_matrix[destination_node]) / len(distance_matrix[destination_node])):
            penalty += 0.1 * distance_to_destination

        combined_score = (1 - weight) * distance_to_current + weight * distance_to_destination + 0.3 * centrality_factor + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
