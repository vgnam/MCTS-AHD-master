def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    scaling_factor = (remaining_nodes / (remaining_nodes + 2)) ** 1.5  # Non-linear scaling
    base_weight = 0.7 + 0.3 * scaling_factor  # Dynamic weight adjustment
    penalty_weight = 2.0 - 1.5 * scaling_factor  # Dynamic penalty adjustment
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic penalty based on remaining nodes and detour
        detour_penalty = max(0, distance_to_destination - 1.5 * distance_matrix[current_node][destination_node])
        combined_score = (distance_to_current ** 0.8) + base_weight * (distance_to_destination ** 0.9) + penalty_weight * (detour_penalty ** 1.2)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
