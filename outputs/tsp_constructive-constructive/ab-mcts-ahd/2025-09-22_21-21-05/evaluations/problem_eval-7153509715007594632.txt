important as nodes are visited

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality score: average distance to all other unvisited nodes
        centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)

        # Combined score with dynamic weights
        combined_score = (1 - centrality_weight) * distance_to_current + \
                         centrality_weight * centrality_score + \
                         decay_factor * distance_to_destination

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
