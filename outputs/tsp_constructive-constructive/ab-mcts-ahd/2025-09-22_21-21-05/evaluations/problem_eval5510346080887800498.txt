import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on logarithmic scaling
        log_factor = math.log(total_unvisited + 1) if total_unvisited > 0 else 1
        weight = 0.5 ** (1 / (log_factor + 1))

        # Penalty for revisiting nodes (simplified)
        penalty = 1.0 if node in unvisited_nodes else 1.5

        # Normalized score using harmonic mean
        combined_distance = distance_to_current + weight * distance_to_destination
        normalization_factor = (distance_to_current * distance_to_destination) ** 0.5
        score = (combined_distance * penalty) / (normalization_factor + 1e-6)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
