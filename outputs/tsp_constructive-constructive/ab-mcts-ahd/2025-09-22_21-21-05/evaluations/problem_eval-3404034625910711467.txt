def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Dynamic weight based on remaining nodes and centrality
        weight_current = 0.5 * (1.0 - (total_unvisited - 1) / total_unvisited)
        weight_destination = 1.0 - weight_current
        weight_centrality = 0.2 * (1.0 - (total_unvisited - 1) / total_unvisited)

        weighted_score = (weight_current * distance_to_current +
                          weight_destination * distance_to_destination +
                          weight_centrality * centrality)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
