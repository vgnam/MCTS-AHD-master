importance" metric that considers both proximity to the current node and its potential to reduce future travel costs.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_factor = min(1.0, 0.3 + 0.7 * (remaining_nodes / (remaining_nodes + 5)))
    node_importance_weight = 1.5 if remaining_nodes > 3 else 0.8

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        node_importance = (1 / (distance_to_current + 1e-6)) * (1 / (avg_distance_to_remaining + 1e-6))
        proximity_penalty = 0.5 * distance_to_current if distance_to_current < 0.1 * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) else 0.0

        combined_score = (distance_to_current + distance_to_destination) + exploration_factor * avg_distance_to_remaining - node_importance_weight * node_importance + proximity_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
