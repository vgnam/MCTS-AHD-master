def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, memory=None):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    if memory is None:
        memory = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight = 0.5 * (remaining_nodes / (remaining_nodes + 1))

        # Memory factor to penalize revisited nodes
        memory_factor = 1 + 0.1 * memory.get(node, 0)

        combined_score = (distance_to_current + weight * distance_to_destination) * memory_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    # Update memory for the selected node
    memory[next_node] = memory.get(next_node, 0) + 1

    return next_node
