def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality factor (sum of distances to all nodes)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / (total_nodes - 1)

        # Density factor (average distance to remaining unvisited nodes)
        density = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Dynamic weight: balances exploration and optimization
        exploration_weight = 0.4 * (remaining_count / total_nodes)
        optimization_weight = 0.6 * (1 - remaining_count / total_nodes)

        # Global connectivity penalty (penalizes nodes far from remaining unvisited nodes)
        global_penalty = 0.2 * (sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_count)

        # Combined score: balances local, global, and exploration factors
        combined_score = (
            (1 - exploration_weight - optimization_weight) * (distance_to_current + distance_to_destination) +
            exploration_weight * (centrality + density) +
            optimization_weight * global_penalty
        )

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
