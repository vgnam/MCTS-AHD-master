def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    curiosity_factor = 0.9 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    reward_decay = 0.8 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    visit_history = {node: 0 for node in unvisited_nodes}

    best_score = float('-inf')
    candidates = []

    for node in unvisited_nodes:
        immediate_reward = -distance_matrix[current_node][node]
        long_term_reward = -distance_matrix[node][destination_node] * reward_decay
        exploration_bonus = curiosity_factor * (1.0 / (1 + visit_history[node]))
        combined_score = immediate_reward + long_term_reward + exploration_bonus

        if combined_score > best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        visit_history[next_node] += 1
        return next_node
    else:
        return next_node
