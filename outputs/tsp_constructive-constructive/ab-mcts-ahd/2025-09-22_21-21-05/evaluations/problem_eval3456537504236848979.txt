import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + remaining_nodes)
    sigmoid_weight = 1.0 / (1.0 + math.exp(-temperature * (remaining_nodes - len(distance_matrix)/2)))

    weighted_sums = []
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        weighted_sum = (1 - sigmoid_weight) * current_to_node + sigmoid_weight * node_to_destination
        weighted_sums.append(weighted_sum)

    # Normalize to probabilities using softmax with temperature
    max_weighted_sum = max(weighted_sums)
    exp_weights = [math.exp((max_weighted_sum - ws) / temperature) for ws in weighted_sums]
    total_exp = sum(exp_weights)
    probabilities = [ew / total_exp for ew in exp_weights]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
