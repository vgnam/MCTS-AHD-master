defaulting to the nearest neighbor. The destination_bias dynamically adjusts based on how many nodes remain unvisited, making the destination more appealing as the tour nears completion but less aggressively than the original algorithm.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    total_nodes = unvisited_count + 1  # +1 for current_node
    destination_bias = (total_nodes - unvisited_count) / (total_nodes * 2)  # scales from 0 to 0.5

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            distance *= (1 - destination_bias)  # reduce distance penalty for destination as bias increases
        if distance < min_distance:
            min_distance = distance
            next_node = node

    # Ensure destination is chosen if it's closer than the adjusted nearest node
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node] * (1 - destination_bias)
        if destination_distance < min_distance:
            next_node = destination_node

    return next_node
