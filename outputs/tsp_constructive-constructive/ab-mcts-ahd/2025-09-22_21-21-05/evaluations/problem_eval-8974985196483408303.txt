def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate centrality of current node (average distance to all nodes)
    avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
    centrality = 1.0 / avg_distance if avg_distance > 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for destination based on unvisited nodes
        destination_weight = 0.3 * (1 / (1 + 0.2 * total_unvisited))

        # Exploration bonus based on centrality and total unvisited
        exploration_bonus = 0.5 * centrality * (1 / (1 + 0.1 * total_unvisited))

        combined_score = 1.8 * distance_to_current + destination_weight * distance_to_destination + exploration_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
