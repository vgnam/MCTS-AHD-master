import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)
    temperature = 1.0 - (remaining_count / total_nodes)  # Cools as nodes are visited

    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Adaptive weights based on temperature
        weight = 0.3 + 0.5 * temperature
        penalty = 0.2 * temperature * (total_nodes - remaining_count)
        exploration_factor = 0.1 * (1 - temperature) * (total_nodes - remaining_count)

        # Novel scoring with exponential decay for long distances
        score = (distance_to_current + distance_to_destination) * math.exp(-0.01 * avg_distance_to_remaining)
        score += weight * avg_distance_to_remaining + penalty - exploration_factor
        candidates.append((node, score))

    # Probabilistic selection with Boltzmann distribution
    scores = [score for _, score in candidates]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score + 1e-6) / (max_score - min_score + 1e-6) for score in scores]  # Invert to prefer lower scores

    probabilities = [math.exp(-s / (temperature + 1e-6)) for s in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    return next_node
