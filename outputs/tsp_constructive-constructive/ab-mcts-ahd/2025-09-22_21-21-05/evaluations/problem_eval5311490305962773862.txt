def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    time_decay = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes remain
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_distance = distance_to_current / avg_distance if avg_distance > 0 else 1.0

        weighted_score = (1 - time_decay) * normalized_distance + time_decay * (distance_to_destination / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 1.0)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
