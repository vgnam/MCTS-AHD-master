def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 - (0.5 / (1.0 + remaining_nodes))

    min_weighted_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality penalty (average distance to all unvisited nodes)
        centrality = sum(distance_matrix[node][neighbor] for neighbor in unvisited_nodes) / remaining_nodes
        penalty = centrality * 0.1

        # Reinforcement term: reward nodes closer to current when many nodes remain
        reinforcement = 0.0
        if remaining_nodes > 5:
            reinforcement = -distance_to_current * 0.05

        weighted_score = (distance_to_current * (1 - weight)) + (distance_to_destination * weight) + penalty + reinforcement

        if weighted_score < min_weighted_score:
            min_weighted_score = weighted_score
            next_node = node

    return next_node
