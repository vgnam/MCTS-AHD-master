def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    time_decay = 0.9 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    visit_history = {node: 0 for node in unvisited_nodes}
    dynamic_weight = 1.0 / (1.0 + np.exp(-5.0 * (time_decay - 0.5)))

    best_score = float('inf')
    candidates = []
    neighborhood_size = min(3, len(unvisited_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        visit_penalty = 1.0 + (0.7 * visit_history[node] / remaining_nodes)
        proximity_bonus = np.mean([distance_matrix[node][neighbor] for neighbor in np.random.choice(unvisited_nodes, size=min(neighborhood_size, len(unvisited_nodes)), replace=False)])
        combined_score = (distance_to_current + dynamic_weight * distance_to_destination) * visit_penalty - 0.3 * proximity_bonus

        if combined_score < best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        visit_history[next_node] += 1
        return next_node
    else:
        return next_node
