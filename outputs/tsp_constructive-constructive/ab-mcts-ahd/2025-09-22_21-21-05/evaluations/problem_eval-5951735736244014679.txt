def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    min_weighted_sum = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    current_to_destination = distance_matrix[current_node][destination_node]

    # Dynamic weight using sigmoid function based on remaining nodes and current distance
    sigmoid_input = (remaining_nodes - current_to_destination / max(distance_matrix[current_node].values())) / (remaining_nodes + 1)
    weight = 1 / (1 + math.exp(-sigmoid_input))

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        weighted_sum = (1 - weight) * current_to_node + weight * node_to_destination

        # Penalize nodes that are too close to the destination to avoid early convergence
        if node_to_destination < 0.5 * current_to_destination:
            weighted_sum *= 1.5

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
