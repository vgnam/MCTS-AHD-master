def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        # Local connectivity: average distance to nearby unvisited nodes
        nearby_nodes = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.2 * sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)]
        local_connectivity = len(nearby_nodes) / (1 + sum(distance_matrix[node][n] for n in nearby_nodes) / len(nearby_nodes)) if nearby_nodes else 0

        # Global connectivity: centrality in remaining subgraph
        global_connectivity = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weighting based on progress and connectivity
        progress_factor = (total_unvisited - 1) / total_unvisited
        connectivity_weight = 1 - progress_factor**2
        combined_connectivity = connectivity_weight * global_connectivity + (1 - connectivity_weight) * local_connectivity

        # Path efficiency: balance current path and detour avoidance
        path_efficiency = -abs(distance_matrix[current_node][node] - 0.8 * distance_matrix[current_node][destination_node])**1.5

        # Bottleneck penalty: nodes that are too close to others
        bottleneck_penalty = -0.5 * sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.7 * sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes))

        # Combined score
        combined_score = (combined_connectivity + path_efficiency + bottleneck_penalty) / (1 + distance_matrix[node][destination_node])

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
