def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1.0 - (remaining_nodes / (remaining_nodes + 1))  # Normalized progress

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on progress
        weight_current = progress_factor * (1.0 / remaining_nodes)
        weight_destination = 1.0 - weight_current

        # Connectivity penalty: penalize nodes with many close neighbors
        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] <= 1.2 * distance_to_current)

        # Novelty factor: reward nodes that are neither too close nor too far
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        novelty = 1.0 / (1.0 + abs(distance_to_current - avg_distance))

        # Combined score with adaptive weighting
        weighted_score = (weight_current * distance_to_current) - (weight_destination * distance_to_destination) + (0.3 * connectivity) - (0.2 * novelty)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
