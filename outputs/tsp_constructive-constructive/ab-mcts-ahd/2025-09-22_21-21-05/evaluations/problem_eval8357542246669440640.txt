def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_nodes_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for average distance based on remaining nodes
        avg_distance_weight = 0.7 if remaining_nodes_count > 5 else 0.3

        # Novelty score: count unique connections to unvisited nodes
        novelty_score = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0)

        # Combined score with novelty factor
        combined_score = (distance_to_current + distance_to_destination) + avg_distance_weight * novelty_score

        scores.append((node, combined_score))

    # Temperature-based stochastic selection
    temperature = max(1.0, remaining_nodes_count / 2)
    probabilities = [math.exp(-score / temperature) for (_, score) in scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for (node, _) in scores], weights=probabilities, k=1)[0]

    return next_node
