def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    temperature = max(1.0, remaining_nodes / len(distance_matrix))

    # Calculate proximity diversity for each node
    proximity_diversity = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        min_dist = min(distance_matrix[node][other] for other in unvisited_nodes)
        diversity = (avg_dist - min_dist) / (avg_dist + 1e-6)
        proximity_diversity.append(diversity)

    # Calculate dynamic centrality bias
    centrality_bias = []
    for i, node in enumerate(unvisited_nodes):
        dist_to_dest = distance_matrix[node][destination_node]
        centrality = (1.0 - (proximity_diversity[i] * dist_to_dest)) ** (1.0 / temperature)
        centrality_bias.append(centrality)

    # Calculate final scores
    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_penalty = distance_to_current * (1.0 + (remaining_nodes / len(distance_matrix)))
        combined_score = distance_penalty - centrality_bias[i]

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
