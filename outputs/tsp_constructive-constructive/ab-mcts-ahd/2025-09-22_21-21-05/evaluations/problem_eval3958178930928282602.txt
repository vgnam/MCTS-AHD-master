importance, using adaptive weights and no penalties for proximity to current/destination nodes, creating a more aggressive local-first strategy with gradual exploration emphasis.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Adaptive weighting: higher local focus early, then gradual global increase
        if remaining_count > len(unvisited_nodes) / 2:
            weight = 0.1  # Early: local focus
        else:
            weight = 0.7  # Later: global emphasis

        combined_score = distance_to_current + weight * (distance_to_destination + avg_distance_to_remaining)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
