def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate current path length
    current_path_length = sum(distance_matrix[current_node][destination_node] for _ in range(total_unvisited))

    # Dynamic exploration factor based on path length and node density
    exploration_factor = 1 / (1 + math.exp(-0.1 * current_path_length / (total_unvisited + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for destination based on unvisited nodes and exploration
        destination_weight = 0.5 * (1 / (1 + 0.1 * total_unvisited)) * (1 + exploration_factor)

        # Exploration bonus with sigmoid-based adjustment
        exploration_bonus = 0.2 * exploration_factor * (1 / (1 + math.exp(-0.5 * total_unvisited)))

        # Penalty for revisiting nodes in current path (simplified for example)
        revisit_penalty = 0.3 * (1 if node in unvisited_nodes else 0)

        combined_score = distance_to_current + destination_weight * distance_to_destination + exploration_bonus - revisit_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
