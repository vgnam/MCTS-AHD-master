def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = 0.5 * (1 - (remaining_nodes / total_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        novelty_factor = 1.0 / (1 + 0.1 * node)  # Simulated novelty (replace with actual history in practice)

        weighted_score = (
            (0.4 * distance_to_current) +
            (0.5 * distance_to_destination) +
            (exploration_weight * novelty_factor)
        )

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
