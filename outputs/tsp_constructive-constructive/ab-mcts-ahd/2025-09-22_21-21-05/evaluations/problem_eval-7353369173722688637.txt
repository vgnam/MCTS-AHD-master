def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1.0 - (visited_ratio ** 2)
    weight_destination = visited_ratio ** 2

    best_score = float('inf')
    next_node = None

    remaining_unvisited = len(unvisited_nodes)
    destination_bias = (total_nodes - remaining_unvisited) / total_nodes
    time_decay_factor = 0.7

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_unvisited if remaining_unvisited > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        penalty = max(0, distance_to_current - avg_distances[i])

        if node == destination_node:
            distance_to_current *= (1 - destination_bias)

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (time_decay_factor * centrality_factor) - (0.5 * penalty)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
