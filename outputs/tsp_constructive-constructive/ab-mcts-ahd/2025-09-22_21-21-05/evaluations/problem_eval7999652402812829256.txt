def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    distance_to_destination = distance_matrix[current_node][destination_node]
    weight_factor = 1.0 / (1.0 + math.exp(-(remaining_nodes - 5)))  # Sigmoid-based dynamic weighting

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        detour_penalty = max(0, (distance_to_current + distance_to_dest) - 1.5 * distance_to_destination)

        combined_score = distance_to_current + weight_factor * distance_to_dest + detour_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
