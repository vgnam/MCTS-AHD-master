def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1.0 - (remaining_nodes / len(distance_matrix))
    centrality_weight = 0.7 * (1.0 - progress_factor) + 0.3
    locality_weight = 1.0 - centrality_weight
    visit_penalty = {node: 1.0 + (0.3 * (i / remaining_nodes)) for i, node in enumerate(unvisited_nodes)}

    centrality_scores = []
    for node in unvisited_nodes:
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        centrality_scores.append(centrality)

    avg_centrality = sum(centrality_scores) / remaining_nodes if remaining_nodes > 0 else 0

    best_score = float('inf')
    candidates = []

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_centrality = centrality_scores[i] / (avg_centrality + 1e-6)
        combined_score = (locality_weight * distance_to_current + centrality_weight * normalized_centrality) * visit_penalty[node]

        if combined_score < best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        return next_node
    else:
        return next_node
