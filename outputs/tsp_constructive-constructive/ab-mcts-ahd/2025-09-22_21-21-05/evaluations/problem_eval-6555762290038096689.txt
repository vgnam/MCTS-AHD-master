def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        progress_factor = (total_nodes - remaining_nodes) / total_nodes
        weight_current = 0.5 * (1.0 - progress_factor)
        weight_destination = 0.5 * (1.0 + progress_factor)

        connectivity_penalty = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / (remaining_nodes - 1) if remaining_nodes > 1 else 1
        penalty = 1.0 / (1.0 + connectivity_penalty)

        weighted_score = (weight_current * distance_to_current + weight_destination * distance_to_destination) * penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < best_score:
            next_node = destination_node

    return next_node
