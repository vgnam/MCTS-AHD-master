def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Static weight with exploitation-exploration trade-off
        weight = 0.3
        combined_score = distance_to_current + weight * avg_distance_to_remaining + 0.7 * (total_unvisited / len(unvisited_nodes))

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
