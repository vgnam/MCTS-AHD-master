def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    temperature = 1.0 - (remaining_count / len(unvisited_nodes))  # Decreases as path progresses

    # Calculate node centrality (average connectivity to remaining nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_count - 1) if remaining_count > 1 else 0

    # Normalize centrality
    max_centrality = max(centrality.values()) if centrality else 1
    normalized_centrality = {n: c/max_centrality for n, c in centrality.items()}

    # Calculate selection probabilities
    probabilities = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Early: favor central nodes; Late: favor local efficiency
        if temperature < 0.5:
            score = (1 - temperature) * distance_to_current + temperature * distance_to_destination + normalized_centrality[node]
        else:
            score = temperature * distance_to_current + (1 - temperature) * distance_to_destination + normalized_centrality[node]

        # Apply temperature-based exploration
        probabilities.append((node, math.exp(-score / temperature)))

    # Select node based on probabilities
    nodes, probs = zip(*probabilities)
    next_node = random.choices(nodes, weights=probs, k=1)[0]

    return next_node
