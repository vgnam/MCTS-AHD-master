def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    phase_factor = 1.0 - visited_ratio

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1e-9)
        adaptive_centrality_penalty = centrality * (1.0 + phase_factor)

        phase_weight = 0.3 + 0.7 * phase_factor
        weighted_score = (0.5 * distance_to_current) + (phase_weight * distance_to_destination) - (0.4 * adaptive_centrality_penalty)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    if next_node is None:
        next_node = min(unvisited_nodes, key=lambda n: distance_matrix[current_node][n])

    return next_node
