def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    node_visits = {}

    # Adaptive weights based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_current = 0.5 + (0.4 * (remaining_nodes / (remaining_nodes + 1)))
    weight_destination = 0.3 + (0.2 * (1 / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        revisit_penalty = node_visits.get(node, 0) * 0.5

        weighted_score = (distance_to_current * weight_current) + (distance_to_destination * weight_destination) + revisit_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

        node_visits[node] = node_visits.get(node, 0) + 1

    return next_node
