def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    next_node = unvisited_nodes[distances.index(min_distance)]

    if destination_node in unvisited_nodes:
        remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
        prob_destination = 1 - (0.5 * remaining_ratio)
        destination_distance = distance_matrix[current_node][destination_node]

        if destination_distance <= min_distance:
            next_node = destination_node
        else:
            decay_factor = 2 ** (-destination_distance / min_distance)
            adjusted_prob = prob_destination * decay_factor
            if random.random() < adjusted_prob:
                next_node = destination_node

    return next_node
