def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Exploration factor: centrality of the node (sum of distances to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        # Density factor: average distance to remaining unvisited nodes
        density = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Dynamic balance weight: prioritizes exploration early, optimization late
        balance_weight = 0.3 + 0.4 * (1 - remaining_count / len(distance_matrix))

        # Penalty for revisiting nodes that were skipped in the path
        penalty = 0.15 * (len(distance_matrix) - remaining_count)

        # Combined score: prioritizes proximity, centrality, and destination distance with dynamic balance
        combined_score = (1 - balance_weight) * (distance_to_current + distance_to_destination) + balance_weight * (centrality + density) + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
