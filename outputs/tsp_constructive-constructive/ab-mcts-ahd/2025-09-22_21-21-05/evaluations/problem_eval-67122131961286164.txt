def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** 3  # More aggressive decay
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        direct_distance = distance_matrix[current_node][destination_node]

        # Novel detour risk factor
        detour_risk = (distance_to_current + distance_to_destination - direct_distance) / (direct_distance + 1e-6)
        detour_penalty = (detour_risk * weight_factor) ** 2

        combined_score = distance_to_current + (1 - weight_factor) * distance_to_destination + detour_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
