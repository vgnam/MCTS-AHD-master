def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_avg = 0.3 * (num_unvisited / (num_unvisited + 1))
    penalty_threshold = 0.1 * sum(distance_matrix[0]) / len(distance_matrix)
    adaptive_penalty_factor = 1.0 + (0.1 * (len(unvisited_nodes) / len(distance_matrix)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            ratio = 0
        else:
            ratio = distance_to_current / distance_to_destination

        weight_current = 1.0 / (num_unvisited + 1)
        weight_destination = 1.0 - weight_current

        weighted_score = (weight_current * distance_to_current) + (weight_destination * ratio)

        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        penalty = 1.0 if distance_to_current < penalty_threshold else 1.0
        penalty *= adaptive_penalty_factor

        combined_score = (weighted_score + weight_avg * avg_distance_to_remaining) * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
