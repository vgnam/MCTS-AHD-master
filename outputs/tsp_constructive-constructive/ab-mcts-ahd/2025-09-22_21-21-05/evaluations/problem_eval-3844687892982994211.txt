def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on path length and node density
        weight_proximity = 0.5 * (1.0 - (distance_to_current / max(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)))
        weight_destination = 0.5 * (1.0 - (distance_to_destination / (1.5 * avg_distance_to_dest)))

        # Penalize nodes that disrupt the path efficiency
        path_efficiency_penalty = 0
        if distance_to_destination > 1.5 * avg_distance_to_dest:
            path_efficiency_penalty = (distance_to_destination - avg_distance_to_dest) ** 2

        # Historical visit pattern (simplified as reciprocal of visit frequency)
        visit_frequency = 1.0 / (1.0 + sum(1 for n in unvisited_nodes if distance_matrix[current_node][n] < distance_to_current))

        score = (weight_proximity * distance_to_current +
                 weight_destination * distance_to_destination +
                 path_efficiency_penalty -
                 visit_frequency)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
