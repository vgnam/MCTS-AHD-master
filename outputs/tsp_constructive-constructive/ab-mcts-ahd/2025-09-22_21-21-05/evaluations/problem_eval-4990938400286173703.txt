def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_nodes = len(unvisited_nodes)
    progress = 1 - (remaining_nodes / total_nodes)
    destination_bias = 1 - (1 / (1 + math.exp(-5 * progress)))  # Sigmoid-based decay

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            score = distance * (1 - destination_bias)  # Reduce distance impact as bias increases
        else:
            proximity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
            score = distance + 0.3 * proximity_score  # Combine distance and proximity

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
