def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = math.exp(-len(unvisited_nodes) / len(unvisited_nodes))
    temperature = 1.0 - exploration_factor

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if destination_distance <= avg_distance * temperature:
            return destination_node

    novelty_bonus = {}
    for node in unvisited_nodes:
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][node])
        novelty_bonus[node] = temperature * (local_connectivity / (1 + local_connectivity))

    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weighted_score = distance * (1 - novelty_bonus[node])
        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
