import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    path_length = sum(distance_matrix[current_node][destination_node] for _ in range(remaining_nodes))

    weight_factor = max(0.1, 0.5 * (math.log(remaining_nodes + 1) / math.log(total_nodes + 1)) + 0.2 * (path_length / total_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        combined_score = 0.3 * distance_to_current + weight_factor * avg_distance_to_remaining

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
