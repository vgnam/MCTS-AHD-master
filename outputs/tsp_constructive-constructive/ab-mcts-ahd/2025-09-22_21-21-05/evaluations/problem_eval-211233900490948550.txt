import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (total_unvisited / len(distance_matrix)) ** 1.5)
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Weighted score with dynamic temperature
        weight = temperature * (1.0 - (distance_to_destination / max(1, sum(distance_matrix[node]))))
        score = (1 - weight) * distance_to_current + weight * distance_to_destination
        scores.append((node, score))

    # Probabilistic selection based on softmax of scores
    max_score = max(score[1] for score in scores)
    exp_scores = [score[1] - max_score for score in scores]
    exp_scores = [math.exp(s / temperature) for s in exp_scores]
    sum_exp = sum(exp_scores)
    probs = [e / sum_exp for e in exp_scores]

    next_node = random.choices([score[0] for score in scores], weights=probs, k=1)[0]
    return next_node
