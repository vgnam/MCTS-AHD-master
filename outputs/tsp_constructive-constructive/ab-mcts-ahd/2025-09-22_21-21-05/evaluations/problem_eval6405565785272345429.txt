def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Sigmoid function to smooth weight transition
    weight = 1 / (1 + math.exp(-10 * (visited_ratio - 0.5)))
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalize revisits (encourage exploration)
        penalty = 0.1 if node in visited_nodes else 0
        score = (distance_to_current + weight * distance_to_destination) / (1 + weight + penalty)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
