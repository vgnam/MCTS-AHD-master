def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    max_distance = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
        if distance > max_distance:
            max_distance = distance
        if distance < distance_matrix[current_node][next_node] if next_node is not None else True:
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        weighted_avg = (min_distance + max_distance) / 2
        if destination_distance < weighted_avg * 0.7:  # More aggressive prioritization
            next_node = destination_node

    return next_node
