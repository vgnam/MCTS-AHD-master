import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (1.0 - num_unvisited / len(distance_matrix)) ** 2)

    # Calculate centrality of current node
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on unvisited nodes and centrality
        weight = 0.3 * (1 / (1 + 0.05 * num_unvisited)) + 0.2 * centrality

        # Exploration bonus
        exploration_bonus = 1.0 / (1 + sum(distance_matrix[node]))

        # Combined score with temperature perturbation
        combined_score = -distance_to_current + weight * distance_to_destination + 0.1 * exploration_bonus
        combined_score *= (1.0 + temperature * random.uniform(-0.1, 0.1))

        scores.append((node, combined_score))

    # Select node with probability proportional to temperature
    if random.random() < temperature:
        next_node, _ = random.choice(scores)
    else:
        next_node, _ = max(scores, key=lambda x: x[1])

    return next_node
