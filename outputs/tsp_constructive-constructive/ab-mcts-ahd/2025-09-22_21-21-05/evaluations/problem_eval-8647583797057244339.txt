def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return destination_node

    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited
    avg_distance_to_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    remaining_nodes_factor = total_unvisited / (total_unvisited + 1)
    weight = remaining_nodes_factor * (1.0 / (1.0 + (avg_distance_to_dest / avg_distance_to_current) * (total_unvisited / len(distance_matrix))))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        normalized_distance_to_current = distance_to_current / avg_distance_to_current if avg_distance_to_current > 0 else 0
        normalized_distance_to_destination = distance_to_destination / avg_distance_to_dest if avg_distance_to_dest > 0 else 0

        score = (1 - weight) * normalized_distance_to_current + weight * normalized_distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
