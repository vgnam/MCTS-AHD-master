def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate local density penalty with higher threshold
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.5 * (sum(distance_matrix[node]) / total_nodes))

        # Dynamic exploration factor with squared remaining count
        exploration_factor = (remaining_count / total_nodes) ** 1.5

        # Global distance contribution with squared normalization
        global_contribution = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_count ** 1.2)

        # Modified scoring equation with squared distance penalties
        score = (distance_to_destination - exploration_factor * global_contribution) / (1 + local_density ** 1.5)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
