def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2  # Non-linear decay from No.1
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Penalty for nodes too far from destination
        penalty = max(0, distance_to_destination - 2 * distance_matrix[current_node][destination_node]) ** 2
        combined_score = distance_to_current + weight_factor * distance_to_destination + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
