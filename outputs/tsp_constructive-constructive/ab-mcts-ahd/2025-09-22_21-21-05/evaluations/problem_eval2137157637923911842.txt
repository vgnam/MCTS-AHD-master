def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality as average distance to other unvisited nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Dynamic exploration factor based on remaining path length
        remaining_path_length = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        exploration_factor = (distance_to_current * distance_to_destination) / (remaining_path_length + 1e-6)

        # Non-linear weight adjustment
        progress_weight = 0.2 + 0.3 * (1 - (total_unvisited ** 2) / ((total_unvisited + 1) ** 2))

        # Hybrid scoring
        combined_score = (distance_to_current + distance_to_destination) + progress_weight * (centrality + exploration_factor)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
