def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

        # Exponential weight decay with centrality emphasis
        weight = 0.5 * (1 / (1 + 0.1 * total_unvisited)) + 0.5 * (1 - math.exp(-0.1 * total_unvisited))

        combined_score = distance_to_current + weight * (distance_to_destination + 0.3 * centrality)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
