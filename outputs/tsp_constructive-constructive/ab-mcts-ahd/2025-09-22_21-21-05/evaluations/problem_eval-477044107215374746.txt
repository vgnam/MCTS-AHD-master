def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        destination_distance = distance_matrix[current_node][destination_node]
        exploration_phase = len(unvisited_nodes) / (len(unvisited_nodes) + len(unvisited_nodes) - len(unvisited_nodes))
        decay_factor = 0.8 ** exploration_phase
        bias = 1 - (destination_distance / (avg_distance + 1e-10))
        if bias * decay_factor > 0.6:
            return destination_node

    min_distance = float('inf')
    next_node = None
    novelty_scores = {}

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        novelty_scores[node] = 1 / (1 + sum(1 / (distance_matrix[node][n] + 1e-10) for n in unvisited_nodes if n != node))
        weighted_score = distance * (1 - novelty_scores[node])
        if weighted_score < min_distance or (weighted_score == min_distance and novelty_scores[node] > novelty_scores.get(next_node, 0)):
            min_distance = weighted_score
            next_node = node

    return next_node
