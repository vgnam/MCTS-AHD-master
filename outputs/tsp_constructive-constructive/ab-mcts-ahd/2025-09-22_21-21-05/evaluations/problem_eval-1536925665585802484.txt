def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    proximity_weight = 0.5 / (1.0 + remaining_nodes)  # Decreases as more nodes remain
    destination_weight = 1.0 - proximity_weight
    centrality_weight = 0.2 * (1.0 - (remaining_nodes / len(distance_matrix)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)

        weighted_score = (proximity_weight * distance_to_current +
                          destination_weight * distance_to_destination +
                          centrality_weight * centrality)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
