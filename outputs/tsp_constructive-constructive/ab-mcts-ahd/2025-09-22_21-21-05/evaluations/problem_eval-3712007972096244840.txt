def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # Including current node
    progress_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_factor = 1.0 - (0.9 * (progress_ratio ** 2))  # Non-linear decay

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + weight_factor * (distance_to_destination ** 1.2)  # Exponential emphasis on destination

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
