def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(unvisited_nodes) - len(unvisited_nodes))
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        bias_weight = (1 - exploration_factor) * (1 - (destination_distance / (avg_distance + 1e-10)))
        if bias_weight > 0.7 * (1 - exploration_factor):
            return destination_node

    scores = {}
    for node in unvisited_nodes:
        distance_score = 1 / (1 + distance_matrix[current_node][node] / avg_distance)
        novelty_score = 1 / (1 + sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][node]))
        exploration_weight = exploration_factor * (1 - exploration_factor)
        scores[node] = distance_score + exploration_weight * novelty_score

    return next_node
