def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1.0 - visited_ratio
    weight_destination = visited_ratio

    min_distance = float('inf')
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.5:
                penalty += 0.1

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + penalty

        if weighted_score < min_distance or (weighted_score == min_distance and distance_to_current < avg_distance):
            min_distance = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_distance or (destination_distance == min_distance and destination_distance < avg_distance):
            next_node = destination_node

    return next_node
