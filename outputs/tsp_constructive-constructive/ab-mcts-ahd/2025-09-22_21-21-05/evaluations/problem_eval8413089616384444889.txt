def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining nodes
        dynamic_weight = 2 + (remaining_nodes / len(distance_matrix)) * 2

        # Penalize nodes too close to current node to avoid backtracking
        if distance_to_current < 0.1 * sum(distance_matrix[current_node]) / len(distance_matrix):
            penalty = 1.5
        else:
            penalty = 1.0

        combined_score = distance_to_current + dynamic_weight * distance_to_destination * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
