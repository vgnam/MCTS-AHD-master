def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return destination_node

    remaining_nodes_factor = 1.0 / (total_unvisited ** 3)

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1)

        weight_local = remaining_nodes_factor
        weight_global = 1 - remaining_nodes_factor
        weight_centrality = 0.5 * remaining_nodes_factor

        score = (weight_local * distance_to_current +
                 weight_global * distance_to_destination +
                 weight_centrality * centrality)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
