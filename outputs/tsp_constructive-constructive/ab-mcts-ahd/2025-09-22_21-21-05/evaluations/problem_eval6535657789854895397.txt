def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    remaining_distance = distance_matrix[current_node][destination_node]
    weight_factor = min(1.0, remaining_distance / sum(distance_matrix[current_node][n] for n in unvisited_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Lookahead: Evaluate the next step's potential contribution
        if unvisited_nodes - {node}:
            next_possible_nodes = unvisited_nodes - {node}
            lookahead_score = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in next_possible_nodes)
        else:
            lookahead_score = distance_matrix[node][destination_node]

        combined_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination + 0.3 * lookahead_score

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
