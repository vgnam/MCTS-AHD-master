def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)

        # Dynamic weight combining distance, destination, and centrality
        weight_distance = (total_unvisited / (total_unvisited + 1)) ** 1.5
        weight_destination = 1 - weight_distance
        weight_centrality = 0.3 * (1 - (total_unvisited / len(distance_matrix)) ** 0.5)

        score = (distance_to_current * weight_distance +
                distance_to_destination * weight_destination +
                centrality * weight_centrality)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
