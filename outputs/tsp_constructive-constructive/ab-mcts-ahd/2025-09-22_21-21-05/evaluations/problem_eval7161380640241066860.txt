def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        weight_global = remaining_nodes / (remaining_nodes + 3)
        weight_local = 1.0 - weight_global
        weighted_score = (weight_local * min_distance) + (weight_global * (destination_distance + sum(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node)))

        if destination_node in unvisited_nodes:
            destination_score = (weight_local * destination_distance) + (weight_global * sum(distance_matrix[destination_node][n] for n in unvisited_nodes if n != destination_node))
            if destination_score < weighted_score:
                next_node = destination_node

    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] < min_distance:
        next_node = destination_node

    return next_node
