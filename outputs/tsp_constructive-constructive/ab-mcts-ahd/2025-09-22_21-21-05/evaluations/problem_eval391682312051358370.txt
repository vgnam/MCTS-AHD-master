def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to remaining unvisited nodes
        avg_remaining_distance = 0
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

        # Weighted sum: prioritize immediate distance and long-term potential
        combined_score = 0.4 * distance_to_current + 0.3 * distance_to_destination + 0.3 * avg_remaining_distance

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
