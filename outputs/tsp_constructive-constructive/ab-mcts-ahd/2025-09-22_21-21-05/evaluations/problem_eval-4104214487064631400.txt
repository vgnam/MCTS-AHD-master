def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_unvisited = len(unvisited_nodes)
    destination_bias = (total_nodes - remaining_unvisited) / total_nodes
    weight_factor = 0.3

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= 1.5 * min_distance:
            next_node = destination_node

    if next_node == destination_node:
        return next_node

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_unvisited if remaining_unvisited > 0 else 0

    best_score = float('inf')

    for i, node in enumerate(unvisited_nodes):
        if node == next_node:
            distance_to_current = distance_matrix[current_node][node]
            centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
            combined_score = distance_to_current + weight_factor * centrality_factor

            if combined_score < best_score:
                best_score = combined_score
                next_node = node

    return next_node
