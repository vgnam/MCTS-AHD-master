def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        path_angle = distance_matrix[current_node][destination_node]

        if path_angle == 0:
            weight = 1.0
        else:
            weight = 1.0 + (distance_to_current / path_angle)

        avg_distances = []
        for other in unvisited_nodes:
            avg_dist = sum(distance_matrix[other][n] for n in unvisited_nodes) / len(unvisited_nodes)
            avg_distances.append(avg_dist)
        avg_avg_distance = sum(avg_distances) / len(unvisited_nodes) if unvisited_nodes else 0

        centrality_factor = 1.0 - (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) / (avg_avg_distance + 1e-6))

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.2:
                penalty += 0.2

        combined_score = distance_to_current + weight * distance_to_destination + centrality_factor + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
