def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Node centrality measure (inverse of average distance to remaining nodes)
        centrality = 1 / (avg_distance_to_remaining + 1e-6)

        # Dynamic weight based on centrality and progress
        progress = (total_nodes - remaining_count) / total_nodes
        weight = 0.3 + 0.5 * (centrality * (1 - progress))

        # Logarithmic exploration factor to encourage early diversity
        exploration_factor = 0.2 * math.log(remaining_count + 1) / math.log(total_nodes)

        # Penalty for nodes that are too close to the destination early
        early_penalty = 0.2 * (1 - progress) * (distance_to_destination / max(distance_matrix[node]))

        # Novel scoring function combining all factors
        combined_score = (distance_to_current + distance_to_destination) * (1 - weight) + \
                        weight * avg_distance_to_remaining + \
                        exploration_factor - early_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
