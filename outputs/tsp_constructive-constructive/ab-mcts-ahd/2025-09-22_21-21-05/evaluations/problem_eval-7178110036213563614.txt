def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    decay_factor = 0.5
    weight_current = (1.0 - visited_ratio) ** decay_factor
    weight_destination = visited_ratio ** (1.0 / decay_factor)
    weight_global = 0.3 * (1.0 - visited_ratio)

    node_scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 0.7:
                penalty += 0.2

        entropy = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node:
                prob = 1.0 / (distance_matrix[node][neighbor] + 1e-6)
                entropy -= prob * math.log(prob)

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (weight_global * avg_distance_to_remaining) - penalty + (0.1 * entropy)

        node_scores.append((node, combined_score))

    if not node_scores:
        return destination_node

    min_score = min(score for _, score in node_scores)
    max_score = max(score for _, score in node_scores)
    normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in node_scores]

    if random.random() < 0.3:
        selected_node, _ = random.choice(normalized_scores)
    else:
        selected_node, _ = min(normalized_scores, key=lambda x: x[1])

    return next_node
