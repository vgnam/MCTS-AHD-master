def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    min_weighted_sum = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    time_decay = 1.0 / (1.0 + remaining_nodes)  # Dynamic time decay factor
    novelty_weight = 0.3  # Weight for novelty factor

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        novelty_factor = 1.0 / (1.0 + current_to_node * node_to_destination)  # Reward less visited nodes

        weighted_sum = (1 - time_decay) * current_to_node + time_decay * node_to_destination + novelty_weight * novelty_factor

        if weighted_sum < min_weighted_sum:
            min_weighted_sum = weighted_sum
            next_node = node

    return next_node
