def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visit_history=None, alpha=0.3, beta=0.7):
    if not unvisited_nodes:
        return destination_node

    if visit_history is None:
        visit_history = {}

    best_score = -float('inf')
    next_node = None
    remaining_progress = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    dynamic_weight = 2 * (1 - remaining_progress)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Novelty factor: penalize nodes visited more frequently
        novelty_factor = 1 / (1 + visit_history.get(node, 0))

        # Penalize revisits to recently visited nodes
        revisit_penalty = 1 if node in visit_history else 0

        combined_score = (alpha * (1 / distance_to_current) +
                          beta * (dynamic_weight * (1 / distance_to_destination)) +
                          (1 - alpha - beta) * novelty_factor) - revisit_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
