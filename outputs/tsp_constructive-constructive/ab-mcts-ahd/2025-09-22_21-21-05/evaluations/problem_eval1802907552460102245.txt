def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (1.0 - num_unvisited / len(distance_matrix)) ** 2)
    exploration_weight = 0.5 * (1.0 - math.exp(-num_unvisited / len(distance_matrix)))

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_destination == 0:
            ratio = 0
        else:
            ratio = distance_to_current / distance_to_destination

        combined_score = distance_to_current + ratio

        # Adaptive weighting based on remaining nodes
        weight = 0.7 * (1.0 - num_unvisited / len(distance_matrix)) + 0.3
        combined_score *= weight

        # Temperature-driven randomness
        combined_score *= (1.0 + temperature * random.uniform(-0.1, 0.1))

        scores.append((node, combined_score))

    if random.random() < temperature:
        next_node, _ = random.choice(scores)
    else:
        next_node, _ = min(scores, key=lambda x: x[1])

    return next_node
