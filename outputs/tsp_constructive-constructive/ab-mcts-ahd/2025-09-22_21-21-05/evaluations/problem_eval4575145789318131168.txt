def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        remaining_nodes = len(unvisited_nodes)
        weight = 0.5 if remaining_nodes > 1 else 0.8  # Prioritize proximity as fewer nodes remain

        # Normalized score to balance immediate and long-term distance
        normalized_score = (distance_to_current / max(1, sum(distance_matrix[current_node]))) * weight + \
                          (distance_to_destination / max(1, sum(distance_matrix[node]))) * (1 - weight)

        if normalized_score < best_score:
            best_score = normalized_score
            next_node = node

    return next_node
