def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.4
    temperature = 1.0 / (remaining_nodes + 1)  # Decreases as nodes are visited

    # Calculate node degrees (connections to unvisited nodes)
    node_degrees = []
    for node in unvisited_nodes:
        degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] > 0)
        node_degrees.append(degree)

    # Calculate dynamic centrality (weighted by degree)
    avg_degree = sum(node_degrees) / remaining_nodes if remaining_nodes > 0 else 0
    centrality_scores = [1.0 - (degree / (avg_degree + 1e-6)) for degree in node_degrees]

    # Calculate distance penalties
    distance_penalties = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = (distance_to_current + distance_to_destination) * (1.0 + (remaining_nodes / len(distance_matrix)))
        distance_penalties.append(penalty)

    # Combine scores with temperature-based probabilistic selection
    combined_scores = []
    for i in range(remaining_nodes):
        score = distance_penalties[i] + weight_factor * centrality_scores[i]
        combined_scores.append(score)

    # Convert scores to probabilities using softmax with temperature
    exp_scores = [math.exp(-score / temperature) for score in combined_scores]
    sum_exp = sum(exp_scores)
    probabilities = [exp / sum_exp for exp in exp_scores]

    # Select node based on probabilities
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
