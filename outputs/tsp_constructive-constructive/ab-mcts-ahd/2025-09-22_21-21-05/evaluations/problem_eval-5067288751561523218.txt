def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    base_weight = 0.6
    centrality_weight = 0.4
    exploration_factor = 0.3

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (lower average distance = more central)
        centrality = 1 / (1 + sum(distance_matrix[node][n] for n in distance_matrix) / len(distance_matrix))

        # Dynamic weight combining immediate and centrality factors
        dynamic_weight = base_weight + centrality_weight * centrality

        # Exploration bonus based on historical traversal frequency (simulated here)
        exploration_bonus = exploration_factor * (1 - (node / len(distance_matrix)))

        # Combined score with dynamic weighting
        combined_score = (distance_to_current + distance_to_destination) * dynamic_weight - exploration_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
