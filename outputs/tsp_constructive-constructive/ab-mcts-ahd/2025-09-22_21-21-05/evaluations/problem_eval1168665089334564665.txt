def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    weight_factor = max(0.1, 0.6 * (remaining_nodes / total_nodes))
    hubness_factor = min(0.4, 0.2 + 0.2 * (1 - remaining_nodes / total_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        hubness_score = sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] < 1.2 * sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes)
        combined_score = -distance_to_current + weight_factor * (-distance_to_destination) + hubness_factor * hubness_score

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
