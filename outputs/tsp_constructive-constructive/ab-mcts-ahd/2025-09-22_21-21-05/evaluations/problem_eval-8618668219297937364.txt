def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)
    exploration_bias = (remaining_count / total_nodes) ** 1.5

    candidates = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Local density penalty
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.4 * (sum(distance_matrix[node]) / total_nodes))

        # Global connectivity factor
        global_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.6 * (sum(distance_matrix[node]) / total_nodes))

        # Path bridging factor
        path_bridge = (distance_to_current + distance_to_destination) / (sum(distance_matrix[node]) / total_nodes)

        # Novel weighted score
        score = (distance_to_destination * exploration_bias) / (1 + local_density * 2 - global_connectivity * 0.5 + path_bridge)

        candidates.append((node, score))

    if candidates:
        # Select node with highest score
        next_node, _ = max(candidates, key=lambda x: x[1])
    else:
        next_node = destination_node

    return next_node
