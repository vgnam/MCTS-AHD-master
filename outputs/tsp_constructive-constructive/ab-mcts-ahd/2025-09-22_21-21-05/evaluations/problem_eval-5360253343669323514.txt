def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate centrality and potential metrics
    centrality = []
    potential = []

    for node in unvisited_nodes:
        # Centrality: average distance to other unvisited nodes
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        centrality.append(avg_dist)

        # Potential: combination of distance to current and destination
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]
        potential.append((dist_current + dist_dest) / 2)

    # Dynamic exploration factor (sigmoid-based)
    exploration_factor = 1.0 / (1.0 + math.exp(-(total_unvisited / 10.0 - 3.0)))

    for i, node in enumerate(unvisited_nodes):
        # Weighted combination of potential and centrality
        weighted_potential = (1 - exploration_factor) * potential[i]
        weighted_centrality = exploration_factor * (centrality[i] / (sum(centrality) / total_unvisited + 1e-6))

        # Decay factor based on remaining nodes
        decay = 0.7 ** (total_unvisited / len(distance_matrix))

        # Combined score with decay
        combined_score = (weighted_potential + weighted_centrality) * decay

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
