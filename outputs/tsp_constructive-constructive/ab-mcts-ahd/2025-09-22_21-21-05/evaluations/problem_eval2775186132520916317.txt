def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    destination_bias = 0.3 + 0.7 * exploration_factor

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if destination_distance <= avg_distance * (1 - destination_bias):
            return destination_node

    connectivity_bonus = {}
    for node in unvisited_nodes:
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < distance_matrix[current_node][node])
        connectivity_bonus[node] = (1 - exploration_factor) * local_connectivity

    min_score = float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weighted_score = distance * (1 - connectivity_bonus[node]) + (1 - destination_bias) * distance_matrix[node][destination_node]
        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
