def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Time-varying weight: prioritize long-term efficiency as unvisited nodes decrease
        time_factor = 1.0 - (0.8 * (total_unvisited / (total_unvisited + 1)))
        weighted_distance = time_factor * distance_to_destination + (1 - time_factor) * distance_to_current

        # Penalty for revisiting nodes (if applicable)
        if node == current_node:
            weighted_distance *= 1.5

        if weighted_distance < best_score:
            best_score = weighted_distance
            next_node = node

    return next_node
