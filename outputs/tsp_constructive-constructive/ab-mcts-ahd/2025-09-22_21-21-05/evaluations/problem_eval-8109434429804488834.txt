def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    candidates = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        normalized_avg = avg_distance_to_remaining / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) + 1e-6)
        density_factor = len([n for n in unvisited_nodes if distance_matrix[node][n] <= 1.5 * avg_distance_to_remaining]) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality = len([n for n in unvisited_nodes if distance_matrix[node][n] <= 2 * avg_distance_to_remaining]) / len(unvisited_nodes) if unvisited_nodes else 0

        path_score = (distance_to_current + distance_to_destination) * (1 - 0.4 * normalized_avg)
        exploration_score = 0.3 * density_factor + 0.7 * centrality
        combined_score = path_score + exploration_score

        scores.append(combined_score)
        candidates.append(node)

    if not scores:
        return random.choice(unvisited_nodes)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]

    next_node = random.choices(candidates, weights=normalized_scores, k=1)[0]
    return next_node
