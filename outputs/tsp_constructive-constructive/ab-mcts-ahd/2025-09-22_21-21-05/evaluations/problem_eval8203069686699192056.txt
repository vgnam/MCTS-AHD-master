def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    fixed_weight = 0.6  # Fixed weight for immediate vs long-term
    penalty_threshold = 0.2 * sum(distance_matrix[0]) / len(distance_matrix)  # Higher threshold
    adaptive_penalty_factor = 1.0 + (0.2 * (len(unvisited_nodes) / len(distance_matrix)))  # Stronger penalty

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Fixed weight for immediate vs long-term
        normalized_score = (distance_to_current / max(1, sum(distance_matrix[current_node]))) * fixed_weight + \
                          (distance_to_destination / max(1, sum(distance_matrix[node]))) * (1 - fixed_weight)

        # Stronger penalty for nodes too close
        penalty = 1.0 if distance_to_current < penalty_threshold else 1.5
        penalty *= adaptive_penalty_factor

        combined_score = (normalized_score + 0.2 * avg_distance_to_remaining) * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
