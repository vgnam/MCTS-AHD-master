def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_remaining = len(unvisited_nodes) + 1  # +1 for the destination

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Hub potential: nodes with high connectivity to remaining nodes
        hub_score = sum(1 / distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weight adjustment
        proximity_weight = 0.6 * (total_remaining / (total_remaining + 1)) ** 2
        hub_weight = 0.3 * (1 - (total_remaining / (total_remaining + 1)))
        destination_attractor = 0.4 * (1 - (total_remaining / (total_remaining + 1))) ** 2

        # Penalty for nodes with high average distance to remaining nodes
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        outlier_penalty = 0.5 * (avg_distance / sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) if unvisited_nodes else 0

        combined_score = (distance_to_current * proximity_weight) + (hub_score * hub_weight) - (distance_to_destination * destination_attractor) - outlier_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
