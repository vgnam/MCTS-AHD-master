def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weight and temperature
        weight = 0.5 * (total_unvisited - 1) / total_unvisited
        temperature = 1.0 - (total_unvisited / len(unvisited_nodes)) ** 2  # Decreases as unvisited nodes decrease
        combined_score = distance_to_current + weight * (distance_to_destination + avg_distance_to_remaining)

        # Apply temperature to score (higher temperature favors exploration)
        adjusted_score = combined_score * (1.0 + temperature * (1.0 - (combined_score / (combined_score + 1e-6))))

        scores.append((node, adjusted_score))

    # Select node with the lowest adjusted score
    next_node, _ = min(scores, key=lambda x: x[1])
    return next_node
