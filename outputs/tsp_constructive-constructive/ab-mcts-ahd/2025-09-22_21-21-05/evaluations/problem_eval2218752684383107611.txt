def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_score = 0.0
    temperature = 1.0 / (1.0 + len(unvisited_nodes))  # Decreasing temperature as nodes are visited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        sum_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        avg_distance_to_remaining = sum_distance_to_remaining / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Novel scoring mechanism: proximity, potential savings, and centrality penalty
        proximity_score = 1.0 / (1.0 + distance_to_current)
        savings_score = (distance_to_current + distance_to_destination) / (1.0 + avg_distance_to_remaining)
        centrality_penalty = avg_distance_to_remaining / (1.0 + distance_to_destination)

        combined_score = (proximity_score * savings_score) / (1.0 + centrality_penalty)
        scores.append(combined_score)
        total_score += combined_score

    # Probabilistic selection with temperature-based adjustment
    if total_score > 0:
        probabilities = [score / total_score for score in scores]
        probabilities = [p ** (1.0 / temperature) for p in probabilities]  # Adjust with temperature
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
    else:
        probabilities = [1.0 / len(scores)] * len(scores)

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
