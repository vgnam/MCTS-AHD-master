def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    centrality_weight = min(0.8, 0.3 + 0.5 * (remaining_nodes / len(distance_matrix)))

    # Calculate node degrees (connectivity)
    degrees = []
    for node in unvisited_nodes:
        degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < float('inf'))
        degrees.append(degree)

    max_degree = max(degrees) if degrees else 1

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        normalized_degree = degrees[i] / max_degree if max_degree > 0 else 0
        attraction_factor = (distance_to_current + distance_to_destination) / (distance_to_destination + 1e-6)

        combined_score = (1 - centrality_weight) * distance_to_current + \
                         centrality_weight * (1 - normalized_degree) + \
                         0.2 * attraction_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
