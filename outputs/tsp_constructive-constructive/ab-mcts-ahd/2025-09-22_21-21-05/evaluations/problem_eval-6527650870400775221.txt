def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    dynamic_weight = 1.0 + (1.0 / (num_unvisited + 1))  # Weight increases as unvisited nodes decrease

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic penalty for nodes too far from current node
        penalty = 0.0 if distance_to_current <= 1.5 * distance_matrix[current_node][destination_node] else 0.2 * (distance_to_current ** 1.5) / (num_unvisited + 1)

        # Centrality heuristic: nodes with high connectivity (fewer unvisited neighbors) are preferred
        unvisited_neighbors = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0]
        centrality_score = len(unvisited_neighbors) if unvisited_neighbors else 1.0

        # Combined score: prioritize nodes that are close to current and destination, with centrality and dynamic penalty
        combined_score = (0.3 * distance_to_current + dynamic_weight * distance_to_destination) / centrality_score - penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
