def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_factor = 1.0 - (total_unvisited / (total_unvisited + len(unvisited_nodes) - 1))

        # Novel potential improvement metric
        potential_improvement = (distance_to_current + distance_to_destination) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))

        # Combined score with dynamic weighting
        combined_score = (distance_to_current + distance_to_destination) * (1 - weight_factor) + potential_improvement * weight_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
