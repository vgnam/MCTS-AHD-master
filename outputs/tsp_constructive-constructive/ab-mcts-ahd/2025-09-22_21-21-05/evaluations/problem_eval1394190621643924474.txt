def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = min(1.0, 0.7 + (0.3 * (total_unvisited / (total_unvisited + 5))))

    # Novelty factor: prioritize nodes less frequently visited in the past (simulated here as a random penalty)
    novelty_penalty = {node: 0.1 * (1 - (node % 3) / 3) for node in unvisited_nodes}  # Simplified for demonstration

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = weight_factor * distance_to_current + (1 - weight_factor) * distance_to_destination
        combined_score += novelty_penalty[node]  # Apply novelty penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
