def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    decay_factor = 0.8 ** (remaining_nodes - 1) if remaining_nodes > 0 else 0.5
    visit_history = {node: 0 for node in unvisited_nodes}
    centrality_weight = 0.3

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    best_score = float('inf')
    candidates = []

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        visit_penalty = 1.0 + (0.3 * visit_history[node])
        combined_score = (distance_to_current + centrality_weight * centrality_factor) * visit_penalty

        if combined_score < best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        visit_history[next_node] += 1
        return next_node
    else:
        return next_node
