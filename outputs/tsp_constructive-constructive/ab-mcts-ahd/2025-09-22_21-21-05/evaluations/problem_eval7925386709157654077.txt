def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 - (0.5 / (remaining_nodes + 1))  # Inverse dynamic weighting

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = 0.2 * distance_to_current  # Penalty for long distances
        combined_score = (1 - weight) * distance_to_current + weight * distance_to_destination - penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
