def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, node_visit_counts=None):
    if not unvisited_nodes:
        return destination_node

    if node_visit_counts is None:
        node_visit_counts = {node: 0 for node in unvisited_nodes}

    min_score = float('inf')
    next_node = None
    base_heuristic_factor = 0.3
    dynamic_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(node_visit_counts))

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        visit_penalty = node_visit_counts.get(node, 0) * 0.1

        if node == destination_node:
            weighted_score = distance * (1 + base_heuristic_factor * dynamic_factor) + visit_penalty
        else:
            weighted_score = distance * (1 - base_heuristic_factor * dynamic_factor) - visit_penalty

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    if next_node in node_visit_counts:
        node_visit_counts[next_node] += 1

    return next_node
