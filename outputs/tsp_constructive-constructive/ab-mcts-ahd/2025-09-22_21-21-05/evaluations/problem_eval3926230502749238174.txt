def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)

        # Dynamic weight based on remaining nodes and distance to destination
        weight = 0.5 + 0.5 * (1 - (distance_to_destination / max(distance_matrix[node][n] for n in unvisited_nodes) if unvisited_nodes else 1))
        weight = min(1.0, max(0.5, weight))

        # Lookahead benefit: estimate reduction in total path length
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_gain = sum(min(distance_matrix[node][n] for n in remaining_nodes) for n in remaining_nodes)
        else:
            lookahead_gain = 0

        score = (distance_to_current + weight * distance_to_destination) / (1 + weight) - lookahead_gain

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
