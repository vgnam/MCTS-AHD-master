def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        sum_distances = distance_to_current + distance_to_destination

        if sum_distances == 0:
            continue  # Avoid division by zero or invalid paths

        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 0 else 0
        dynamic_weight = 1.0 / (1.0 + remaining_count)  # Higher weight when few nodes remain

        # Penalize nodes too close to current node to avoid local optima
        proximity_penalty = 1.0 if distance_to_current < 0.1 * sum_distances else 0.0

        combined_score = (sum_distances / avg_distance_to_remaining) * dynamic_weight + (sum_distances * (1 - proximity_penalty))

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
