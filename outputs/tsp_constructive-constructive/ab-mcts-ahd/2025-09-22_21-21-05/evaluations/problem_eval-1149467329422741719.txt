def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))
    weight = 0.3 * (1 / (1 + 0.05 * remaining_nodes)) + 0.2 * centrality
    global_weight = 0.5 if remaining_nodes > 2 else 0.2

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        exploration_bonus = 1.0 / (1 + sum(distance_matrix[node]))
        proximity_penalty = 1.0 if distance_to_current < 0.1 * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes) else 0.0

        combined_score = (distance_to_current + distance_to_destination) + weight * distance_to_destination + global_weight * avg_distance_to_remaining + 0.1 * exploration_bonus + proximity_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
