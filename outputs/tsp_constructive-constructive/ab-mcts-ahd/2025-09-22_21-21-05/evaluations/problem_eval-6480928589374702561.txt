def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    total_nodes = unvisited_count + 1
    progress = (total_nodes - unvisited_count) / total_nodes
    sigmoid_bias = 1 / (1 + math.exp(-10 * (progress - 0.5)))

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        base_distance = distance_matrix[current_node][node]
        if node == destination_node:
            adjusted_distance = base_distance * (1 - sigmoid_bias)
        else:
            lookahead_distance = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            adjusted_distance = base_distance + 0.3 * lookahead_distance

        score = adjusted_distance * (1 + 0.2 * (1 - progress))
        if score < min_score:
            min_score = score
            next_node = node

    return next_node
