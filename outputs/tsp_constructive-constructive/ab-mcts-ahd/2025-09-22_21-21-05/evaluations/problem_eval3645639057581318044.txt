def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance == 0:
            continue

        # Calculate node centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Dynamic weighting factor (prioritizes closer nodes but considers centrality)
        weight = 0.7 if distance < (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) else 0.3

        # Normalized score combining distance and centrality
        score = (weight * (1 / distance)) + ((1 - weight) * (1 / (centrality + 1e-6)))

        if score > best_score:
            best_score = score
            next_node = node

    # Always consider destination if it's unvisited
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        dest_centrality = 0  # Destination's centrality is 0 (it's the target)
        dest_score = (0.7 * (1 / dest_distance)) + (0.3 * (1 / (dest_centrality + 1e-6)))

        if dest_score > best_score:
            next_node = destination_node

    return next_node
