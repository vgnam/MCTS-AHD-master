defaulting to the nearest unvisited node, introducing statistical variance awareness into the decision-making process.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    mean_distance = sum(distances) / len(distances)
    std_dev = (sum((d - mean_distance) ** 2 for d in distances) / len(distances)) ** 0.5

    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= mean_distance - std_dev:
            next_node = destination_node

    return next_node
