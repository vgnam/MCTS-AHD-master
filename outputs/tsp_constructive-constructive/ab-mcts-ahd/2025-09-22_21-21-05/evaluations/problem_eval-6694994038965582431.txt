def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_weight = max(0.1, 1.0 - (0.8 * (remaining_nodes / (remaining_nodes + len(distance_matrix)))))
    novelty_bonus = {node: 1.0 / (1.0 + np.log(1 + visit_count)) for node, visit_count in zip(unvisited_nodes, [0] * len(unvisited_nodes))}

    best_score = float('-inf')
    candidates = []

    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        future_potential = distance_matrix[node][destination_node] if remaining_nodes > 1 else 0
        novelty = novelty_bonus[node]

        combined_score = (exploration_weight * immediate_cost) + ((1 - exploration_weight) * future_potential) + (0.5 * novelty)

        if combined_score > best_score:
            best_score = combined_score
            candidates = [node]
        elif combined_score == best_score:
            candidates.append(node)

    if candidates:
        next_node = np.random.choice(candidates) if len(candidates) > 1 else candidates[0]
        novelty_bonus[next_node] = 1.0 / (1.0 + np.log(1 + 1))  # Update novelty for next call
        return next_node
    else:
        return next_node
