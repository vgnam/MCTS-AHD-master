def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        # Dynamic weighting: balance proximity and potential efficiency
        proximity_weight = 0.7  # Higher weight for proximity
        efficiency_weight = 0.3  # Lower weight for efficiency
        score = (proximity_weight * current_distance) + (efficiency_weight * remaining_distance)

        # Penalize nodes that have been visited more frequently in the past (simulated)
        visit_penalty = 1.0 + (0.1 * (unvisited_nodes.count(node) / len(unvisited_nodes)))  # Simplified penalty
        score *= visit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
