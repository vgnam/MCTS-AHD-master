import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_length = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = 1 - (remaining_length / total_nodes)
    exploration_factor = math.exp(-progress_ratio * 2)

    best_node = None
    best_score = float('inf')
    candidate_nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality with inverse weighting
        centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in range(total_nodes)) / (total_nodes - 1)

        # Dynamic weight adjustment based on progress
        weight_local = 0.5 + 0.3 * (1 - progress_ratio)
        weight_global = 0.5 - 0.3 * (1 - progress_ratio)

        # Novel scoring function combining distance and centrality
        distance_score = (distance_to_current + distance_to_destination) * (1 + 0.5 * progress_ratio)
        combined_score = weight_local * distance_score + weight_global * (1 / (centrality + 1e-6))

        if combined_score < best_score:
            best_score = combined_score
            best_node = node

    # Add probabilistic selection for exploration
    if random.random() < exploration_factor:
        candidate_nodes = [n for n in unvisited_nodes if distance_matrix[current_node][n] < 1.5 * best_score]
        if candidate_nodes:
            best_node = random.choice(candidate_nodes)

    return next_node
