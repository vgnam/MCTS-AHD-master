importance score, using a non-linear weighting scheme and adaptive centrality penalties to balance exploration and exploitation, while incorporating a memory-based revisit penalty to avoid cycles.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weighting with non-linear scaling
        alpha = 1.0 - (visited_ratio ** 2)
        weight_current = alpha / (alpha + 1)
        weight_destination = 1 - weight_current

        # Node importance score (inverse of centrality)
        node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1e-9)
        importance_score = 1 / (1 + node_degree)

        # Memory-based revisit penalty
        revisit_penalty = 0.3 if node in unvisited_nodes and distance_to_current < 1e-9 else 0

        # Combined score with adaptive terms
        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (2 * importance_score) - revisit_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
