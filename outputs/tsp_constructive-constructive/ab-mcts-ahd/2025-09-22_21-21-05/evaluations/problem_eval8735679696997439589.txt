def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 0.5 * (1.0 / (remaining_nodes + 1)) if remaining_nodes > 0 else 0.5

    best_score = float('inf')
    next_node = None

    max_distance = max(max(row) for row in distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        normalized_current = distance_to_current / max_distance
        normalized_destination = distance_to_destination / max_distance

        combined_score = (normalized_current + dynamic_weight * normalized_destination) * (1.0 + 0.1 * (1.0 - dynamic_weight))

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
