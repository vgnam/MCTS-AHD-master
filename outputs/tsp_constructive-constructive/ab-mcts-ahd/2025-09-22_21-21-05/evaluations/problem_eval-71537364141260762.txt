def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate centrality and average distances
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = avg_distances[i]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        density_factor = len([n for n in unvisited_nodes if distance_matrix[node][n] <= 1.5 * avg_distance_to_remaining]) / remaining_nodes if remaining_nodes > 0 else 0

        # Weighted components
        weight_current = 1.0 / remaining_nodes
        weight_destination = 1.0 - weight_current
        weight_centrality = 0.5
        weight_density = 0.3

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (weight_centrality * centrality_factor) + (0.2 * avg_distance_to_remaining) - (weight_density * density_factor)

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
