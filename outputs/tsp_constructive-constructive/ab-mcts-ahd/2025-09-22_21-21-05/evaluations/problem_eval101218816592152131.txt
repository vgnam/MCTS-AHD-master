def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = []
    nodes = []
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        distances.append(distance)
        nodes.append(node)

    max_distance = max(distances)
    normalized_distances = [d / max_distance for d in distances]

    if destination_node in unvisited_nodes:
        destination_index = nodes.index(destination_node)
        destination_prob = (1 - (remaining_nodes / (remaining_nodes + 1))) ** 2
        normalized_distances[destination_index] *= (1 + destination_prob)

    next_node = random.choices(nodes, weights=normalized_distances, k=1)[0]
    return next_node
