def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_length = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)

        # Dynamic weighting based on remaining path length
        weight_max = 0.6 + 0.2 * (1 - min(remaining_length, 10) / 10)
        weight_avg = 1 - weight_max

        # Calculate centrality (average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / (len(distance_matrix) - 1)

        # Balance max distance and centrality
        combined_score = weight_max * max_distance + weight_avg * centrality

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
