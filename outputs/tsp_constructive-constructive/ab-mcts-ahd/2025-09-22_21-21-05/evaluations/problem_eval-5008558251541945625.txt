def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_distance = float('inf')
    total_distance = 0
    count = 0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node
        total_distance += distance
        count += 1

    if destination_node in unvisited_nodes:
        avg_distance = total_distance / count
        destination_distance = distance_matrix[current_node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        weight_factor = 1 - (remaining_nodes / (remaining_nodes + 1))  # Dynamic weight based on remaining nodes
        centrality_factor = avg_distance * (0.6 + 0.2 * weight_factor)  # Adjust threshold dynamically

        if destination_distance < centrality_factor:
            next_node = destination_node

    return next_node
