def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None

    num_unvisited = len(unvisited_nodes)
    exploration_factor = 1.0 / (1.0 + 0.1 * num_unvisited)  # Non-linear decay

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality penalty: sum of distances to all remaining nodes
        centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) if num_unvisited > 1 else 0

        # Normalized heuristic score
        heuristic_score = (distance_to_current * distance_to_destination) / (1 + centrality_penalty)
        combined_score = (1 - exploration_factor) * distance_to_current + exploration_factor * heuristic_score

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
