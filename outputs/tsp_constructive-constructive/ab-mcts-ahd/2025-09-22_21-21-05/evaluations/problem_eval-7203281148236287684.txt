def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes remain

    if remaining_nodes > 1:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    else:
        avg_distance = distance_matrix[current_node][unvisited_nodes[0]]

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        detour_penalty = (distance_to_current + distance_to_destination - distance_matrix[current_node][destination_node]) * (avg_distance / distance_matrix[current_node][destination_node])
        weighted_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination + detour_penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
