def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1.0 / (1.0 + math.exp(-0.5 * (remaining_nodes - len(distance_matrix) / 2)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        local_score = - (distance_to_current + distance_to_destination)

        connectivity_score = 0.0
        for n in unvisited_nodes:
            if n != node:
                direct_conn = 1.0 / (1.0 + distance_matrix[node][n])
                indirect_conn = sum(1.0 / (1.0 + distance_matrix[n][m]) for m in unvisited_nodes if m != n and m != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0
                connectivity_score += direct_conn + 0.3 * indirect_conn

        connectivity_score /= len(unvisited_nodes) if unvisited_nodes else 1.0
        penalty = 1.0 + (0.1 * (len(unvisited_nodes) - remaining_nodes) / len(distance_matrix))
        combined_score = (1 - exploration_weight) * local_score + exploration_weight * (connectivity_score * penalty)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
