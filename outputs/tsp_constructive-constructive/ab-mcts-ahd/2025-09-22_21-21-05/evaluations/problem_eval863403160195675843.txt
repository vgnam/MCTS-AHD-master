def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes + 1)
    avg_unvisited_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distance_penalty = max(0, distance_to_current - 1.5 * avg_unvisited_distance)  # Penalize nodes too far from current path

        combined_score = distance_to_current + weight_factor * distance_to_destination + distance_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
