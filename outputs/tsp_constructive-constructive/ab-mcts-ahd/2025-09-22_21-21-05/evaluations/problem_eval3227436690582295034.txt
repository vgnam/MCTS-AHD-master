import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    path_length = sum(distance_matrix[current_node][destination_node] for _ in range(remaining_nodes))

    # Dynamic weight factor with logarithmic scaling and path length consideration
    weight_factor = max(0.1, 0.5 * (math.log(remaining_nodes + 1) / math.log(total_nodes + 1)) + 0.2 * (path_length / total_nodes))

    # Calculate centrality of current node (inverse of average distance to all nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / total_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Exploration bonus: encourage less traversed paths
        exploration_bonus = 1.0 / (1 + sum(distance_matrix[node]))

        combined_score = -distance_to_current + weight_factor * distance_to_destination + 0.1 * exploration_bonus + 0.1 * centrality

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
