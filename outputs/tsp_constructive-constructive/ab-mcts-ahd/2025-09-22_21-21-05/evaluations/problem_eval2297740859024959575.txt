def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    threshold = (remaining_nodes / total_nodes) ** 2
    exploration_factor = 1 - (remaining_nodes / total_nodes)
    best_score = float('-inf')
    next_node = None
    memory_penalty = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = (1 - threshold) * distance_to_current - threshold * distance_to_destination
        score += exploration_factor * random.random() * max(distance_matrix[node])

        if remaining_nodes > total_nodes // 2 and distance_matrix[node][destination_node] < (0.3 * sum(distance_matrix[destination_node]) / total_nodes):
            score -= 1000
            memory_penalty[node] = 1

        if score > best_score or (score == best_score and random.random() < 0.5):
            best_score = score
            next_node = node

    if memory_penalty.get(next_node, 0) == 1:
        candidates = [n for n in unvisited_nodes if memory_penalty.get(n, 0) == 0]
        if candidates:
            next_node = random.choice(candidates)

    return next_node
