def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 0.3 + 0.7 * (1.0 / (remaining_nodes + 1e-9))  # Dynamic exploration focus

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Local density penalty to avoid clustering
        local_density = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        density_penalty = 0.2 * local_density

        # Detour penalty for long paths
        detour_penalty = 0.4 * max(0, (distance_to_current + distance_to_destination) - distance_matrix[current_node][destination_node])

        combined_score = (1 - exploration_weight) * distance_to_current + exploration_weight * distance_to_destination - density_penalty - detour_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
