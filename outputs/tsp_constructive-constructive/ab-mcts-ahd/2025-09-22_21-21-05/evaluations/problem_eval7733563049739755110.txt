def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None
    frequency_penalty = {}

    # Calculate node centrality (average distance to all other nodes)
    node_centrality = {}
    for node in unvisited_nodes:
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / (total_unvisited - 1)
        node_centrality[node] = centrality

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on centrality and remaining steps
        weight = 0.5 * (0.5 ** (1 / (total_unvisited + 1))) * (1 + node_centrality[node] / sum(node_centrality.values()))

        # Adaptive novelty factor with reinforcement learning effect
        novelty = 1 / (1 + (frequency_penalty.get(node, 0) ** 1.5))

        combined_score = (distance_to_current + weight * distance_to_destination) / novelty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    # Update frequency with reinforcement learning effect
    if next_node in frequency_penalty:
        frequency_penalty[next_node] += 1
    else:
        frequency_penalty[next_node] = 1

    return next_node
