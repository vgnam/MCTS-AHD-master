def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = 1 / (1 + math.exp(-0.1 * (remaining_nodes - len(distance_matrix)/2)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        local_score = - (distance_to_current + distance_to_destination)

        distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        median_distance = sorted(distances_to_unvisited)[len(distances_to_unvisited)//2] if distances_to_unvisited else 0
        exploration_score = -median_distance if distances_to_unvisited else 0

        combined_score = (1 - exploration_weight) * local_score + exploration_weight * exploration_score

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
