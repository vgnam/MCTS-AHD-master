def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            centrality_penalty = 0
        else:
            centrality_penalty = len(unvisited_nodes) / (sum(distance_matrix[node][n] for n in unvisited_nodes) + 1e-6)

        weighted_distance = 0.6 * distance_to_current + 0.4 * distance_to_destination
        weighted_penalty = 0.3 * centrality_penalty

        combined_score = weighted_distance + weighted_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
