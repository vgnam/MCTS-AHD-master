def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (0.8 ** (total_nodes - remaining_nodes)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        combined_score = distance_to_current + weight_factor * distance_to_destination + 0.3 * centrality

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
