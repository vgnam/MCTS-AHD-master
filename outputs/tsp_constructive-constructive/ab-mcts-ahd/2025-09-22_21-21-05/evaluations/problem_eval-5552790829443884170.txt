def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate average distance to remaining nodes
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_nodes if remaining_nodes else 0

        # Calculate density factor (normalized)
        density_factor = len([n for n in unvisited_nodes if distance_matrix[node][n] <= avg_distance_to_remaining]) / remaining_nodes if remaining_nodes else 0

        # Calculate centrality (average distance to all nodes)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes

        # Dynamic weights based on progress
        progress_factor = (total_nodes - remaining_nodes) / total_nodes
        weight_current = 0.5 + 0.5 * progress_factor
        weight_destination = 0.5 - 0.4 * progress_factor

        # Novel scoring equation
        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) - (0.3 * avg_distance_to_remaining) + (0.2 * density_factor) - (0.1 * centrality)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
