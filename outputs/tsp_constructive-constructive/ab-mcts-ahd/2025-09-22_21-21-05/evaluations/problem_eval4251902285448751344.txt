def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_progress = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        dynamic_weight = 2 * (1 - remaining_progress)
        exploration_bonus = 1.0 / (1 + sum(distance_matrix[node]))
        combined_score = distance_to_current + dynamic_weight * distance_to_destination - 0.1 * exploration_bonus + 0.3 * centrality

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
