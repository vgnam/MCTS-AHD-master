def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    weight_proximity = 0.7 - 0.2 * (num_unvisited / len(distance_matrix))  # Favor proximity more as nodes remain
    penalty_factor = 1.0 + 0.2 * (num_unvisited / len(distance_matrix))  # Increase penalty as more nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Weighted score favoring immediate proximity
        weighted_score = (distance_to_current * weight_proximity) + (distance_to_destination * (1 - weight_proximity))

        # Penalty for high long-term distances
        penalty = 1.0 + 0.5 * (avg_distance_to_remaining / max(1, sum(distance_matrix[node])))
        penalty *= penalty_factor  # Apply adaptive penalty

        combined_score = weighted_score * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
