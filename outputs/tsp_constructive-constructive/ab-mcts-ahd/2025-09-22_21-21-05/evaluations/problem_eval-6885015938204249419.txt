def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    dynamic_weight = 0.5 + 0.4 * remaining_ratio

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        path_penalty = 0
        if len(unvisited_nodes) > 1:
            for other_node in unvisited_nodes:
                if other_node != node:
                    path_penalty += distance_matrix[node][other_node] * 0.1

        combined_score = distance_to_current + dynamic_weight * distance_to_destination + path_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
