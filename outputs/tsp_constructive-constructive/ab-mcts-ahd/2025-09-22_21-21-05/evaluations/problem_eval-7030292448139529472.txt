def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    remaining_nodes_factor = total_unvisited / (total_unvisited + 1)  # Linear adjustment

    best_score = float('inf')
    next_node = None

    # Calculate centrality measure
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / total_unvisited if total_unvisited > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        weight = remaining_nodes_factor

        score = weight * distance_to_current + (1 - weight) * centrality_factor

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
