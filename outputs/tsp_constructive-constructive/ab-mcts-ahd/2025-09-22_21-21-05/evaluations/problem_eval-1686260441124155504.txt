defaulting to the nearest node while dynamically adjusting the bias strength based on the remaining nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    unvisited_count = len(unvisited_nodes)
    total_nodes = unvisited_count + 1
    progress = (total_nodes - unvisited_count) / total_nodes
    destination_bias = progress ** 2  # Non-linear scaling

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if node == destination_node:
            distance *= (1 - destination_bias * 2)  # Stronger bias reduction
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node] * (1 - destination_bias * 2)
        if destination_distance < min_distance * 1.2:  # More lenient threshold
            next_node = destination_node

    return next_node
