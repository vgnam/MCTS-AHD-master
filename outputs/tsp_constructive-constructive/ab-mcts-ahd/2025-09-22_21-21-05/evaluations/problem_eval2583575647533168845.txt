def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = (remaining_nodes ** 2) / (remaining_nodes ** 2 + 1)  # Non-linear weight adjustment

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        predictive_factor = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, remaining_nodes - 1)

        weighted_score = (1 - dynamic_weight) * distance_to_current + dynamic_weight * (distance_to_destination - predictive_factor)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
