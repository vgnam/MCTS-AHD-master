import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (1.0 - num_unvisited / len(distance_matrix)) ** 3)  # Faster cooling schedule
    exploration_weight = 0.3 * (1.0 - math.exp(-num_unvisited / len(distance_matrix)))  # Reduced exploration weight

    scores = []
    for node in unvisited_nodes:
        # Local distance with adaptive bias toward extremes
        distance_to_current = distance_matrix[current_node][node]
        local_bias = 1.0 + 0.3 * (1.0 - 2 * abs(0.5 - (distance_to_current / max(distance_matrix[current_node]))))

        # Global potential considering node similarity
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        # Node similarity based on shared neighbors (simplified)
        similarity_score = 1.0 - (sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < 1.5 * distance_to_current) / num_unvisited) if num_unvisited else 0

        # Combined score with temperature-dependent randomness
        combined_score = (0.5 * local_bias * distance_to_current +
                         0.3 * distance_to_destination +
                         0.2 * exploration_weight * avg_distance_to_remaining -
                         0.2 * similarity_score) * (1.0 + temperature * random.uniform(-0.2, 0.2))

        scores.append((node, combined_score))

    # Select node with lowest score with probability proportional to temperature
    if random.random() < temperature:
        next_node, _ = random.choice(scores)
    else:
        next_node, _ = min(scores, key=lambda x: x[1])

    return next_node
