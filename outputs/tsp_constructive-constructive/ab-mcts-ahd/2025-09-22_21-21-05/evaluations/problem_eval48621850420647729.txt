def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes) if unvisited_nodes else 0
    avg_total_distance = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m) / (len(unvisited_nodes) ** 2) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - avg_total_distance) ** 2 for d in distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0
        dynamic_weight = 0.5 + 0.4 * (current_path_length / (avg_total_distance * len(unvisited_nodes))) if avg_total_distance > 0 else 0.5
        combined_score = dynamic_weight * max_distance + (1 - dynamic_weight) * variance

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
