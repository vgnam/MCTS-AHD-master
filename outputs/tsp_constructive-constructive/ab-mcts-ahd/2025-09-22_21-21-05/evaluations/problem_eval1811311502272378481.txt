def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate average distance of unvisited nodes to destination
    avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on ratio of current distance to average
        ratio = distance_to_destination / avg_distance if avg_distance > 0 else 1.0
        weight = 0.5 + 0.5 * (1 - ratio)  # Higher weight if closer to average

        # Lookahead: average distance to remaining nodes
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            lookahead_avg = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            lookahead_avg = 0

        # Composite score: weighted combination of distances and lookahead
        score = (distance_to_current + weight * distance_to_destination + 0.3 * lookahead_avg) / (1 + weight + 0.3)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
