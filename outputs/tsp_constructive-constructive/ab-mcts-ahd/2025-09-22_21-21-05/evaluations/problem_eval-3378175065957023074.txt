def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / len(distance_matrix)
    destination_bias = 0.5 + 0.5 * exploration_factor

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / len(unvisited_nodes) if unvisited_nodes else 0

    min_score = float('inf')
    next_node = None

    for i, node in enumerate(unvisited_nodes):
        distance = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))

        if node == destination_node:
            distance *= (1 - destination_bias)

        weighted_score = distance + 0.3 * centrality_factor

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
