def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1.0 - visited_ratio
    exploitation_weight = visited_ratio

    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        novelty_bonus = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 0.7:
                novelty_bonus += 0.2

        congestion_penalty = 0.0
        for other in unvisited_nodes:
            if other != node and distance_matrix[node][other] < 0.3 * max(distance_matrix[node]):
                congestion_penalty -= 0.1

        combined_score = (exploration_weight * (1.0 / distance_to_current) +
                         exploitation_weight * (1.0 / distance_to_destination) +
                         0.5 * (1.0 / avg_distance_to_remaining) +
                         novelty_bonus +
                         congestion_penalty)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
