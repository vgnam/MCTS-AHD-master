def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / remaining_count if remaining_count > 1 else 0

        # Dynamic weight based on remaining nodes
        weight = 0.2 + 0.6 * (1 - remaining_count / total_nodes)

        # Penalty for revisiting nodes that were skipped in the path
        penalty = 0.15 * (total_nodes - remaining_count)

        # Dynamic exploration factor
        exploration_factor = 0.1 * (total_nodes - remaining_count) / total_nodes

        combined_score = distance_to_current + distance_to_destination + weight * avg_distance_to_remaining + penalty - exploration_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
