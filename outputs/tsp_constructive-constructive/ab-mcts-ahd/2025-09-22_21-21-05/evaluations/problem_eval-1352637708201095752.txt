def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = (remaining_count / total_nodes) ** 1.5

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Adaptive distance scaling
        avg_distance = sum(distance_matrix[node]) / total_nodes
        distance_scaling = (distance_to_current + distance_to_destination) / (avg_distance + 1e-6)

        # Global distance contribution with adaptive weighting
        global_contribution = sum(distance_matrix[node][n] for n in unvisited_nodes) / (remaining_count ** 0.75)

        # Local connectivity penalty
        local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 0.5 * avg_distance)

        # Combined score with temperature scaling
        score = (distance_to_destination - temperature * global_contribution) / (1 + 0.5 * local_connectivity)
        scores.append((node, score))

    # Probabilistic selection based on scores
    if scores:
        max_score = max(score for _, score in scores)
        min_score = min(score for _, score in scores)
        normalized_scores = [(node, (score - min_score) / (max_score - min_score + 1e-6)) for node, score in scores]

        # Exponential selection with temperature
        exp_scores = [math.exp(score / temperature) for _, score in normalized_scores]
        total = sum(exp_scores)
        probabilities = [s / total for s in exp_scores]

        next_node = random.choices([node for node, _ in normalized_scores], weights=probabilities, k=1)[0]
        return next_node

    return next_node
