def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Dynamic weight adaptation using sigmoid function
    exploration_weight = 1 / (1 + math.exp(3 * (visited_ratio - 0.5)))
    exploitation_weight = 1 - exploration_weight

    # Node potential calculation
    node_potentials = {}
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Connectivity metric: average distance to remaining unvisited nodes
        connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Centrality metric: normalized centrality score
        centrality = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Node potential equation
        node_potentials[node] = (exploration_weight * distance_to_current +
                                exploitation_weight * distance_to_destination +
                                0.4 * connectivity -
                                0.3 * centrality)

    # Select node with minimum potential
    next_node = min(node_potentials, key=node_potentials.get)
    return next_node
