def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_factor = 1.0 + (remaining_nodes / len(distance_matrix)) * 2
        combined_score = distance_to_current + weight_factor * distance_to_destination

        # Penalty for nodes that are too far from the destination
        if distance_to_destination > 1.5 * distance_matrix[current_node][destination_node]:
            combined_score += 1000

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
