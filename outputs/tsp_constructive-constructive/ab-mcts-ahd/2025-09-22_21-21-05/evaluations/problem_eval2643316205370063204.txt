def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 - (0.5 * (remaining_nodes / (remaining_nodes + 1)))
    selection_frequency = {node: 0 for node in unvisited_nodes}

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = 0.2 * distance_to_current * (1.0 - (distance_to_current / max_distance)) if node in unvisited_nodes else 0
        combined_score = distance_to_current + weight_factor * distance_to_destination + penalty * selection_frequency[node]

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    if next_node is not None:
        selection_frequency[next_node] += 1

    return next_node
