def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate node centrality (average distance to other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Sigmoid-based dynamic weight
        weight = 1 / (1 + math.exp(-(total_unvisited - len(distance_matrix) / 2)))

        # Weighted score combining distance, destination proximity, and centrality
        score = (distance_to_current * (1 - weight) * 0.5 +
                 distance_to_destination * weight * 0.3 +
                 centrality * 0.2)

        if score < best_score:  # Minimize the score (shorter distances are better)
            best_score = score
            next_node = node

    return next_node
