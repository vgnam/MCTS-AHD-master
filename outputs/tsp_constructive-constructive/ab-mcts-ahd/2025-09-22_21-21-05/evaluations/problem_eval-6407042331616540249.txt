def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    total_unvisited = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            combined_score = distance_to_current + distance_to_destination
        else:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance_to_remaining = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

            # Adaptive priority weight based on remaining path length
            path_progress = (total_unvisited - len(remaining_nodes)) / total_unvisited if total_unvisited > 0 else 0
            priority_weight = 0.3 + 0.7 * (1 - path_progress)

            # Normalized distance metric for global efficiency
            max_distance = max(distance_matrix[node]) if distance_matrix[node] else 1
            normalized_distance = avg_distance_to_remaining / max_distance if max_distance > 0 else 0

            # Adaptive penalty for poorly connected nodes
            connectivity_penalty = 1 - (len(remaining_nodes) / total_unvisited) if total_unvisited > 0 else 0

            combined_score = (distance_to_current + distance_to_destination) * priority_weight + \
                            0.5 * normalized_distance + \
                            0.5 * connectivity_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
