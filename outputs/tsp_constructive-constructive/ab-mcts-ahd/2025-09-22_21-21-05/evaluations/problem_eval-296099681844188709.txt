def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate local centrality (proximity to nearby nodes)
    nearby_nodes = sorted(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])[:3]
    local_centrality = sum(distance_matrix[current_node][node] for node in nearby_nodes) / len(nearby_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight for destination with stronger initial focus
        destination_weight = 0.7 * (1 / (1 + 0.2 * total_unvisited))

        # Progressive exploration bonus that increases more sharply
        exploration_bonus = 0.5 * local_centrality * (1 / (1 + 0.3 * total_unvisited))

        # Balanced score with adjusted weights
        combined_score = 0.6 * distance_to_current + destination_weight * distance_to_destination + exploration_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
