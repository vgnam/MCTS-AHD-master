def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    avg_distances = []
    connectivity_penalties = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        avg_distances.append(avg_dist)

        # Calculate connectivity penalty: higher if node is isolated
        connectivity_penalty = sum(1 for other in unvisited_nodes if distance_matrix[node][other] > 1.5 * avg_dist) / total_unvisited
        connectivity_penalties.append(connectivity_penalty)

    avg_avg_distance = sum(avg_distances) / total_unvisited if total_unvisited > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights: centrality_weight increases as tour progresses
        centrality_weight = 0.2 + 0.8 * (1 - total_unvisited / (total_unvisited + 2))
        distance_weight = 0.8 - 0.4 * (1 - total_unvisited / (total_unvisited + 2))

        # Centrality score: penalize nodes with high connectivity penalty
        centrality_score = (avg_distances[i] / (avg_avg_distance + 1e-6)) * (1 + connectivity_penalties[i])

        # Combined score: balance distance and centrality with connectivity penalty
        combined_score = (distance_weight * distance_to_current + centrality_weight * centrality_score * distance_to_destination)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
