def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_unvisited = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (remaining_unvisited / total_nodes))

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_unvisited if remaining_unvisited > 0 else 0

    next_node = None
    min_score = float('inf')

    for i, node in enumerate(unvisited_nodes):
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        ratio = current_distance / (remaining_distance + 1e-10)

        combined_score = ratio + weight_factor * centrality_factor

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
