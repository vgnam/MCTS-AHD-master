def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    node_visits = {}

    # Adaptive weights based on remaining distance to destination
    remaining_distance = distance_matrix[current_node][destination_node]
    weight_local = 0.5 + 0.4 * (1 - min(1, remaining_distance / max(distance_matrix[current_node][node] for node in unvisited_nodes)))
    weight_global = 1 - weight_local

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        revisit_penalty = node_visits.get(node, 0) ** 2 * 0.6  # Exponential penalty for revisits

        # Novel scoring mechanism combining adaptive weights and dynamic penalty
        weighted_score = (distance_to_current * weight_local) - (distance_to_destination * weight_global) - revisit_penalty

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

        node_visits[node] = node_visits.get(node, 0) + 1

    return next_node
