def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 1.0 - 0.5 * visited_ratio
    weight_destination = 0.5 * visited_ratio

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Lookahead: Evaluate potential next steps from the current node
        lookahead_score = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_score = min(distance_matrix[node][n] + distance_matrix[n][destination_node] for n in remaining_nodes) if remaining_nodes else 0

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + 0.25 * avg_distance_to_remaining + 0.1 * lookahead_score

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
