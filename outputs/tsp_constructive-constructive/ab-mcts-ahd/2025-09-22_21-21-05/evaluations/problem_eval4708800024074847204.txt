def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    weight_current = 2.0 - progress_ratio
    weight_remaining = 1.0 + progress_ratio

    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        remaining_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        remaining_distance += distance_matrix[node][destination_node]

        normalized_score = (distance_to_current / sum(distance_matrix[current_node])) - (remaining_distance / sum(distance_matrix[node]))

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_matrix[current_node][node] * 1.2:
                penalty -= 0.2

        weighted_score = (weight_current * distance_to_current) - (weight_remaining * remaining_distance) + penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
