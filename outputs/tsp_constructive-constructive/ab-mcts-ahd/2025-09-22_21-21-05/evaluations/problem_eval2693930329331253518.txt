def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    proximity_factor = distance_matrix[current_node][destination_node] / max(distance_matrix[destination_node].values()) if unvisited_nodes else 0
    weight_factor = max(0.2, 0.5 * (1 - math.log(remaining_nodes + 1) / math.log(10)))  # Logarithmic scaling with minimum weight
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + weight_factor * distance_to_destination * (1 + proximity_factor)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
