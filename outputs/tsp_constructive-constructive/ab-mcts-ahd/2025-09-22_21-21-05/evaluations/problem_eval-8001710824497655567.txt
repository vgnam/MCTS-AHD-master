def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1 / (1 + math.exp(-0.1 * (remaining_nodes - 5)))  # Sigmoid adjustment
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Hub potential: average distance to other unvisited nodes
        hub_potential = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)

        # Combined score with dynamic weights
        combined_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination + 0.2 * hub_potential

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
