def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    # Calculate average distance to destination for all unvisited nodes
    avg_distance_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weights based on remaining nodes and exploration factor
        weight_current = 0.5 * (1.0 - (0.8 ** remaining_nodes))
        weight_destination = 0.5 * (1.0 - weight_current)
        exploration_factor = 0.3 * (1.0 - (0.9 ** (remaining_nodes / 2)))

        # Normalized lookahead factor
        lookahead_factor = (distance_to_destination / avg_distance_to_destination) if avg_distance_to_destination != 0 else 1.0

        weighted_score = (weight_current * distance_to_current) + (weight_destination * (distance_to_destination * lookahead_factor)) + (exploration_factor * (1.0 / distance_to_destination))

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
