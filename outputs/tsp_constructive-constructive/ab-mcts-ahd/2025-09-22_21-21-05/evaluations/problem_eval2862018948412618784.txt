def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 0.2 if remaining_nodes > 2 else 0.8  # Increased weight for final steps

    for node in unvisited_nodes:
        # Base distances
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality measure: average distance to all other nodes
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1 if len(unvisited_nodes) > 1 else 1)

        # Lookahead: evaluate best next step after current node
        lookahead_score = float('inf')
        for next_node_candidate in unvisited_nodes:
            if next_node_candidate != node:
                lookahead_dist = distance_matrix[node][next_node_candidate] + distance_matrix[next_node_candidate][destination_node]
                if lookahead_dist < lookahead_score:
                    lookahead_score = lookahead_dist

        # Combined score with dynamic weighting
        combined_score = (1 - weight) * distance_to_current + weight * (0.7 * distance_to_destination + 0.3 * centrality) + 0.2 * lookahead_score
        max_distance = max(distance_to_current, combined_score)

        if max_distance < best_score:
            best_score = max_distance
            next_node = node

    return next_node
