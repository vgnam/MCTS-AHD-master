def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes_count = len(unvisited_nodes)
    temperature = max(0.1, 1.0 / (1.0 + remaining_nodes_count))  # Cooling schedule

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Global exploration: centrality measure (avg distance to remaining nodes)
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Local efficiency: direct distance to/from current/destination
        local_score = distance_to_current + distance_to_destination

        # Dynamic weight based on temperature
        combined_score = (1 - temperature) * local_score + temperature * avg_distance_to_remaining

        # Penalty for revisiting nodes (if applicable)
        penalty = 1.0 if node in unvisited_nodes else 1.5
        combined_score *= penalty

        # Diversity: favor nodes with higher centrality in remaining graph
        if remaining_nodes_count > 1:
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            combined_score -= 0.1 * centrality

        scores.append((combined_score, node))

    # Probabilistic selection based on scores (lower score is better)
    if scores:
        min_score = min(score for score, _ in scores)
        probabilities = [math.exp(-(score - min_score) / temperature) for score, _ in scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for _, node in scores], weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
