def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    exploration_weight = 0.7 * (remaining_count / (remaining_count + 5))  # Higher exploration early
    centrality_weight = 0.3 * (1 - (remaining_count / (remaining_count + 10)))  # Gradual centrality focus

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Centrality based on average inverse distance to unvisited nodes
        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes) / len(unvisited_nodes)

        # Connectivity penalty: penalize nodes with many nearby neighbors
        connectivity_penalty = sum(1 for neighbor in unvisited_nodes
                                 if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.1) * 0.05

        # Exploration bonus: reward nodes that are not too close to recently visited nodes
        exploration_bonus = 0
        if len(unvisited_nodes) > 1:
            avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            exploration_bonus = min(0.2, (avg_distance - distance_to_current) * 0.02)

        # Hybrid score combining all components
        combined_score = (distance_to_current + distance_to_destination) * (1 - exploration_weight - centrality_weight) + \
                         centrality_score * centrality_weight + \
                         exploration_bonus - connectivity_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
