def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    threshold = (remaining_nodes / total_nodes) ** 2  # Dynamic threshold based on progress
    best_score = float('-inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        score = (1 - threshold) * distance_to_current - threshold * distance_to_destination

        # Add probabilistic element to escape local optima
        if score > best_score or (score == best_score and random.random() < 0.5):
            best_score = score
            next_node = node

    # Penalize nodes that are too close to the destination early
    if remaining_nodes > total_nodes // 2:
        for node in unvisited_nodes:
            if distance_matrix[node][destination_node] < (0.5 * sum(distance_matrix[destination_node]) / total_nodes):
                if node == next_node:
                    # Find alternative node if current best is penalized
                    candidates = [n for n in unvisited_nodes if distance_matrix[n][destination_node] >= (0.5 * sum(distance_matrix[destination_node]) / total_nodes)]
                    if candidates:
                        next_node = candidates[0]

    return next_node
