def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    weight_factor = max(0.1, 0.5 * (remaining_nodes / total_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality score (inverse of average distance to other unvisited nodes)
        if remaining_nodes > 1:
            centrality_score = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
            centrality_score = 1 / centrality_score if centrality_score != 0 else 0
        else:
            centrality_score = 0

        combined_score = (distance_to_current + weight_factor * distance_to_destination) * (1 + 0.2 * centrality_score)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
