def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)
    dynamic_weight = 0.3 * (num_unvisited / (num_unvisited + 1))
    penalty_threshold = 0.1 * sum(distance_matrix[0]) / len(distance_matrix)

    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / num_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / num_unvisited if num_unvisited > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        penalty = 1.0 if distance_to_current < penalty_threshold else 1.0

        combined_score = (distance_to_current + distance_to_destination + dynamic_weight * centrality_factor) * penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
