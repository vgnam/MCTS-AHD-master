def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    # Calculate node centrality (average distance to all other unvisited nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic progress factor (increases as more nodes are visited)
        progress_factor = 1.0 - (total_unvisited / len(unvisited_nodes)) if total_unvisited > 1 else 0.5

        # Attraction-repulsion term: favor nodes that are neither too close nor too far
        attraction_repulsion = (distance_to_current / (centrality[node] + 1e-6)) * progress_factor

        # Detour penalty: stricter as progress increases
        detour_threshold = 1.2 + 0.3 * (1 - progress_factor)
        detour_penalty = max(0, distance_to_current - detour_threshold * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / total_unvisited)

        # Composite score combining all factors
        combined_score = (distance_to_current + distance_to_destination) + attraction_repulsion + detour_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
