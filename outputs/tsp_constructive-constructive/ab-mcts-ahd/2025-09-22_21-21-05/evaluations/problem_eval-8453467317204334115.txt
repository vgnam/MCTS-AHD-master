def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate centrality as inverse of average distance to remaining nodes
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality = 1 / (avg_distance_to_remaining + 1e-6)  # Avoid division by zero

        # Fixed centrality weight that decreases with progress
        centrality_weight = 0.7 * (total_unvisited / (total_unvisited + 2))
        weighted_centrality = centrality_weight * centrality

        # Stronger path efficiency penalty: nodes that deviate significantly from the current path get higher penalty
        path_efficiency_penalty = max(0, distance_to_current - 1.2 * distance_matrix[current_node][destination_node])

        # Stronger emphasis on distance to current node and centrality
        combined_score = 1.5 * distance_to_current + 0.5 * distance_to_destination + weighted_centrality + path_efficiency_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
