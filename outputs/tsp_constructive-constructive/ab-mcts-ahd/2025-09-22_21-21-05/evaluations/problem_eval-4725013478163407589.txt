def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_count = len(unvisited_nodes)
    temperature = 1.0 / (remaining_count + 1)  # Decreases as tour progresses

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes)  # Inverse distance sum

        # Combine scores with dynamic weights
        combined_score = (distance_to_current + distance_to_destination) * 0.5 + centrality_score * 0.5
        scores.append(combined_score)

    # Normalize scores using softmax with temperature
    exp_scores = [math.exp(score / temperature) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]

    # Probabilistic selection
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
