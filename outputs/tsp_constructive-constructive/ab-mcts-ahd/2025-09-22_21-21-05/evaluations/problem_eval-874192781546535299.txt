def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    penalties = {}

    # Precompute penalties based on centrality (average distance to all nodes)
    for node in unvisited_nodes:
        avg_distance = sum(distance_matrix[node][n] for n in range(len(distance_matrix))) / len(distance_matrix)
        penalties[node] = avg_distance

    max_penalty = max(penalties.values()) if penalties else 1.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            combined_score = distance_to_current + distance_to_destination
        else:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_distance_to_remaining = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0

            # Dynamic penalty factor (higher for more central nodes)
            penalty_factor = (penalties[node] / max_penalty) if max_penalty != 0 else 0

            # Probabilistic adjustment based on connectivity
            connectivity_score = len(remaining_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

            combined_score = (distance_to_current + distance_to_destination) * (1 + 0.5 * penalty_factor) + 0.3 * avg_distance_to_remaining - 0.2 * connectivity_score

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
