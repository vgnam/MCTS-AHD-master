import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = max(0.1, math.exp(-0.5 * (1.0 - num_unvisited / total_nodes)))  # Exponential cooling
    exploration_weight = 2.0 * (1.0 - num_unvisited / total_nodes) ** 2  # Squared exploration weight

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        global_score = distance_to_destination + exploration_weight * avg_distance_to_remaining
        local_score = distance_to_current * (1.0 + 0.3 * (1.0 - num_unvisited / total_nodes))

        combined_score = 0.5 * local_score + 0.5 * global_score + temperature * random.gauss(0, 0.1)  # Gaussian noise

        scores.append((node, combined_score))

    if random.random() < temperature:
        next_node, _ = random.choice(scores)
    else:
        next_node, _ = min(scores, key=lambda x: x[1])

    return next_node
