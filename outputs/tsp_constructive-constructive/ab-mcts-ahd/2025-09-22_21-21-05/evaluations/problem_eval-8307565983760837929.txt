def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    visit_history = {node: 0 for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        visit_penalty = 1.0 + (0.3 * visit_history[node])

        combined_score = (0.5 * distance_to_current + 0.3 * distance_to_destination + 0.2 * centrality_factor) * visit_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    visit_history[next_node] += 1
    return next_node
