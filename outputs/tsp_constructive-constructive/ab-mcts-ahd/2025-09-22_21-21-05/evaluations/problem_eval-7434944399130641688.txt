def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_progress = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    dynamic_weight = 2 * (1 - remaining_progress) * (1 + distance_matrix[current_node][destination_node] / sum(distance_matrix[current_node]))

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        backtrack_penalty = 1 if node == current_node else 0
        combined_score = distance_to_current + dynamic_weight * distance_to_destination + backtrack_penalty
        scores.append((node, combined_score))

    if not scores:
        return destination_node

    scores.sort(key=lambda x: x[1])
    selected_node = scores[0][0]
    return next_node
