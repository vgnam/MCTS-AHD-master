def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 to include current_node
    visited_ratio = 1 - (len(unvisited_nodes) / total_nodes)
    weight_factor = 0.5 + 0.4 * visited_ratio  # Higher weight for alignment as more nodes are visited

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        global_path_factor = (distance_to_current + distance_to_destination) / 2  # Average of local and global distances
        combined_score = weight_factor * distance_to_current + (1 - weight_factor) * global_path_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
