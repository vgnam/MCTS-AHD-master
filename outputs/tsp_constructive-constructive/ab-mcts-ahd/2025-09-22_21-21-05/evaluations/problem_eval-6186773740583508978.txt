def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_weight = 0.7
    weight_factor = base_weight + (1 - base_weight) * (1 - remaining_nodes / (remaining_nodes + 1))

    best_score = float('inf')
    next_node = None
    candidate_nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        penalty = 0.3 * distance_to_current if node in unvisited_nodes else 0
        combined_score = distance_to_current + weight_factor * distance_to_destination + penalty

        candidate_nodes.append((node, combined_score))

    if candidate_nodes:
        candidate_nodes.sort(key=lambda x: x[1])
        top_candidates = candidate_nodes[:min(3, len(candidate_nodes))]
        probabilities = [1.0 / (i + 1) for i in range(len(top_candidates))]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = random.choices([c[0] for c in top_candidates], weights=probabilities, k=1)[0]

    return next_node
