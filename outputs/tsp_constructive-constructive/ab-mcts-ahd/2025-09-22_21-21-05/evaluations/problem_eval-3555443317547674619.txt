def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    dynamic_weight = 0.4 + 0.2 * (1 - total_unvisited / len(distance_matrix))  # Adjusts weight based on remaining nodes

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Normalize distances by max possible distance
        max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
        normalized_current = distance_to_current / max_distance if max_distance != 0 else 0
        normalized_destination = distance_to_destination / max_distance if max_distance != 0 else 0

        combined_score = dynamic_weight * normalized_current + (1 - dynamic_weight) * normalized_destination
        combined_score += 0.05 * (0.5 - random.random())  # Add small random perturbation

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
