default but dynamically adjusts the threshold based on the remaining nodes with a different scaling factor and threshold adjustment formula, favoring the destination more conservatively when fewer nodes remain.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance < min_distance:
            min_distance = distance
            next_node = node

    if destination_node in unvisited_nodes:
        remaining = len(unvisited_nodes) / len(distance_matrix)
        dynamic_threshold = 2.0 * (1 - remaining) ** 0.5
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance <= min_distance * dynamic_threshold:
            next_node = destination_node

    return next_node
