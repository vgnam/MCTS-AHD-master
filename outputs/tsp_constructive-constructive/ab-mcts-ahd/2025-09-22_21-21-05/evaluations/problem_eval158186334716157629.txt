def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)
    mean_distance = sum(distances) / len(distances)
    variance = sum((d - mean_distance) ** 2 for d in distances) / len(distances)
    std_dev = variance ** 0.5
    threshold = mean_distance - std_dev

    next_node = None
    max_score = -float('inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_attractiveness = 1.0 / (distance_matrix[node][destination_node] + 1e-6)
        weight_factor = 0.5 + 0.5 * (distance / (max_distance + 1e-6))
        score = (distance * weight_factor) - (destination_attractiveness * (1 - weight_factor))

        if score > max_score:
            next_node = node
            max_score = score

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < threshold:
            next_node = destination_node

    return next_node
