def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        sum_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        avg_distance_to_remaining = sum_distance_to_remaining / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        dynamic_weight = 1.0 / (1.0 + len(unvisited_nodes))
        combined_score = (distance_to_current ** 0.5 * distance_to_destination ** 0.5) - (dynamic_weight * avg_distance_to_remaining)
        scores.append((node, combined_score))

    if not scores:
        return destination_node

    max_score = max(score for _, score in scores)
    min_score = min(score for _, score in scores)
    temperature = (len(unvisited_nodes) / (len(unvisited_nodes) + 1)) * (max_score - min_score) if (max_score != min_score) else 1.0

    if temperature == 0:
        return max(scores, key=lambda x: x[1])[0]

    probabilities = []
    for node, score in scores:
        prob = math.exp((score - min_score) / temperature)
        probabilities.append((node, prob))

    total_prob = sum(prob for _, prob in probabilities)
    normalized_probs = [(node, prob / total_prob) for node, prob in probabilities]

    rand_val = random.random()
    cumulative_prob = 0.0
    for node, prob in normalized_probs:
        cumulative_prob += prob
        if rand_val <= cumulative_prob:
            return node

    return next_node
