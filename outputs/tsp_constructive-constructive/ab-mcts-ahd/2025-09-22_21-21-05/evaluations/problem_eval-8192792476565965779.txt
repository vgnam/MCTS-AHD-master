def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    n = len(distance_matrix)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining nodes
        weight_current = (remaining_nodes / n) ** 2
        weight_destination = 1.0 - weight_current

        # Penalty for revisiting nodes (if applicable)
        revisit_penalty = 0.0 if node not in unvisited_nodes else 0.1

        # Connectivity heuristic: prioritize nodes with many nearby neighbors when few nodes remain
        if remaining_nodes <= n // 3:
            avg_distance = sum(distance_matrix[node]) / n
            connectivity_bonus = 1.0 / avg_distance
        else:
            connectivity_bonus = 0.0

        weighted_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) - revisit_penalty + connectivity_bonus

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
