def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    selection_history = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic penalty based on proximity to destination and selection history
        proximity_factor = 1.0 + (0.5 / (1.0 + distance_to_destination))
        selection_penalty = selection_history.get(node, 0) * 0.5

        # Local search heuristic: favor nodes that are locally optimal but not too close to destination
        weighted_score = (1.0 / distance_to_current) * (proximity_factor - selection_penalty)

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

        selection_history[node] = selection_history.get(node, 0) + 1

    return next_node
