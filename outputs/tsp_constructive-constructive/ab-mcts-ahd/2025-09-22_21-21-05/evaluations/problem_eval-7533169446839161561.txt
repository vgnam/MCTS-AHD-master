def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_combined_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    weight_factor = max(0.1, 0.5 * (remaining_nodes / total_nodes))

    # Calculate average distance to remaining nodes
    avg_future_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    # Adjust weight factor based on average future distance
    adjusted_weight = weight_factor * (1 + 0.2 * (avg_future_distance / distance_matrix[current_node][destination_node]))

    # Add probabilistic exploration
    exploration_prob = 0.1 * (remaining_nodes / total_nodes)
    if np.random.random() < exploration_prob:
        return np.random.choice(list(unvisited_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + adjusted_weight * distance_to_destination

        if combined_score < min_combined_score:
            min_combined_score = combined_score
            next_node = node

    return next_node
