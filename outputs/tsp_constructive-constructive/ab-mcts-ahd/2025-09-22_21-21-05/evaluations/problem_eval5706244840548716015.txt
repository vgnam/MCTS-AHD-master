def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None
    frequency_penalty = {}
    recency_penalty = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Linear decay weight for destination influence
        weight = 0.8 - 0.3 * (total_unvisited / len(distance_matrix))

        # Novelty factor combining frequency and recency
        freq = frequency_penalty.get(node, 0)
        rec = recency_penalty.get(node, 0)
        novelty = 1 / (1 + freq + 0.5 * rec)

        combined_score = (distance_to_current + weight * distance_to_destination) / novelty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    # Update penalties for the selected node
    if next_node in frequency_penalty:
        frequency_penalty[next_node] += 1
    else:
        frequency_penalty[next_node] = 1

    if next_node in recency_penalty:
        recency_penalty[next_node] += 1
    else:
        recency_penalty[next_node] = 1

    return next_node
