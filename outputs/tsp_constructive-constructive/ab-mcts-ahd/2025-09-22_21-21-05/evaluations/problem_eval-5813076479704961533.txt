def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_nodes = len(unvisited_nodes)
    progress_ratio = (total_nodes - remaining_nodes) / total_nodes

    # Dynamic weight factor with non-linear adjustment
    weight_factor = 1.0 - (0.9 * (progress_ratio ** 2))

    # Adaptive lookahead: consider 2-step paths for better long-term planning
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Evaluate potential 2-step paths
        if remaining_nodes > 1:
            lookahead_score = 0
            for next_next_node in unvisited_nodes:
                if next_next_node != node:
                    lookahead_score += distance_matrix[node][next_next_node] + distance_matrix[next_next_node][destination_node]
            lookahead_score /= (remaining_nodes - 1)  # average lookahead
        else:
            lookahead_score = 0

        combined_score = distance_to_current + weight_factor * (distance_to_destination + 0.3 * lookahead_score)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
