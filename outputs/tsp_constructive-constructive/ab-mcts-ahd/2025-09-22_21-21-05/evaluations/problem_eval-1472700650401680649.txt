def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('-inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (remaining_nodes / total_nodes) ** 2
    path_length_factor = 1.0 / (1.0 + distance_matrix[current_node][destination_node])

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        local_score = - (distance_to_current + distance_to_destination)

        exploration_score = 0
        if remaining_nodes > 1:
            exploration_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            exploration_score = 0

        cycle_penalty = 0
        if node in unvisited_nodes and distance_matrix[current_node][node] > 0:
            cycle_penalty = - (1.0 / distance_matrix[current_node][node])

        combined_score = (1 - exploration_factor) * local_score + exploration_factor * exploration_score + path_length_factor * cycle_penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
