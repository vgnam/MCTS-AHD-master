def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    remaining_nodes = len(unvisited_nodes)
    exploration_bias = 2 ** (-remaining_nodes)  # Exponential decay of exploration bias
    exploitation_bias = 1 - exploration_bias

    candidates = []
    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        path_quality = (current_to_node + node_to_destination) / distance_matrix[current_node][destination_node]

        score = (exploitation_bias * node_to_destination + exploration_bias * current_to_node) / path_quality
        candidates.append((node, score))

    candidates.sort(key=lambda x: x[1])
    selected_node = candidates[0][0]

    return next_node
