def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)))
    memory_bias = 0.2 * (1 - remaining_nodes / len(distance_matrix))

    # Calculate centrality measure
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    # Compute attractiveness scores
    scores = []
    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        attractiveness = (distance_to_current + distance_to_destination) * (1 - weight_factor * centrality_factor)
        scores.append(attractiveness)

    # Normalize scores and apply memory bias
    if scores:
        min_score, max_score = min(scores), max(scores)
        normalized_scores = [(score - min_score) / (max_score - min_score + 1e-6) for score in scores]
        biased_scores = [(1 - memory_bias) * norm_score + memory_bias * (1 - norm_score) for norm_score in normalized_scores]
    else:
        biased_scores = [0] * len(unvisited_nodes)

    # Select next node probabilistically
    if biased_scores:
        total = sum(biased_scores)
        rand_val = random.random() * total
        cumulative = 0
        for i, score in enumerate(biased_scores):
            cumulative += score
            if rand_val <= cumulative:
                return unvisited_nodes[i]

    return next_node
