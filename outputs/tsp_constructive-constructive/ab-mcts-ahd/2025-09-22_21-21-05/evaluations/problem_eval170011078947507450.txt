def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None
    frequency_penalty = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Linear weight for destination influence
        weight = 0.3 * (total_unvisited / (total_unvisited + 1))

        # Quadratic penalty for frequency
        penalty = (frequency_penalty.get(node, 0) + 1) ** 2

        # Multiplicative combination
        combined_score = (1 / (distance_to_current + 1)) * (weight * (1 / (distance_to_destination + 1))) / penalty

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    # Update frequency for the selected node
    if next_node in frequency_penalty:
        frequency_penalty[next_node] += 1
    else:
        frequency_penalty[next_node] = 1

    return next_node
