def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes

        proximity_weight = 0.6
        centrality_weight = 0.2
        penalty_weight = 0.4

        proximity_score = proximity_weight * distance_to_current
        centrality_score = centrality_weight * (1.0 / (avg_distance + 1e-6))
        penalty_score = penalty_weight * avg_distance

        combined_score = proximity_score - centrality_score + penalty_score

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
