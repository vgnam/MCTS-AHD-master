def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    decay_factor = 0.5
    weight_current = (1.0 - visited_ratio) ** decay_factor
    weight_destination = visited_ratio ** (1.0 / decay_factor)
    weight_global = max(0.1, 0.5 * (total_nodes / len(distance_matrix)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        bonus = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] > distance_to_current * 1.5:
                bonus -= 0.1

        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination) + (weight_global * avg_distance_to_remaining) + bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
