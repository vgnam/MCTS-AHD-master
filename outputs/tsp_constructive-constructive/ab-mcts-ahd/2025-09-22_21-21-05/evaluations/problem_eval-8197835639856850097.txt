def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        # Dynamic weighting based on proximity to current node
        proximity_factor = 1 - (distance_to_current / max(distance_matrix[current_node][n] for n in unvisited_nodes if distance_matrix[current_node][n] != 0))
        weight_current = 0.6 + 0.2 * proximity_factor
        weight_destination = 0.4 - 0.2 * proximity_factor

        # Penalty for nodes too far from current node
        penalty = max(0, distance_to_current - 2 * avg_distance_to_unvisited)

        combined_score = (weight_current * distance_to_current +
                          weight_destination * distance_to_destination +
                          0.2 * avg_distance_to_unvisited +
                          0.1 * penalty)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
