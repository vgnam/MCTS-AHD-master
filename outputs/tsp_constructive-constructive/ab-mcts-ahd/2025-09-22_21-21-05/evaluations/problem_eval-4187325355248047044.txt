def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 + (0.5 / (remaining_nodes + 1))
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.2:
                penalty += 0.15

        combined_score = distance_to_current + weight_factor * distance_to_destination + 0.3 * centrality + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
