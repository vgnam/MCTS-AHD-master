def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.3  # Fixed weight for centrality

    # Calculate centrality measure
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        distance_penalty = distance_to_current * (1.0 + (remaining_nodes / len(distance_matrix)))  # Dynamic penalty
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        variance = sum((d - (sum(distances_to_remaining) / len(distances_to_remaining))) ** 2 for d in distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0

        dynamic_weight = 1.0 / (1.0 + remaining_nodes)
        combined_score = (distance_penalty * dynamic_weight) + (centrality_factor * (1 - dynamic_weight)) - (variance * 0.1)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
