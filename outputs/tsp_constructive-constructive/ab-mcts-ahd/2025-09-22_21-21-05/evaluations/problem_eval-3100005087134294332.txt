importance of centrality as the tour progresses.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    # Calculate average distances to remaining nodes
    avg_distances = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited
        avg_distances.append(avg_dist)

    avg_avg_distance = sum(avg_distances) / total_unvisited if total_unvisited > 0 else 0

    # Dynamic weight adjustment
    progress_weight = 0.2 + 0.3 * (1 - total_unvisited / (total_unvisited + len(unvisited_nodes)))

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        combined_score = distance_to_current + progress_weight * centrality_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
