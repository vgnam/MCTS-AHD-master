def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Harmonic mean of distances to remaining nodes for centrality
        harmonic_mean = total_unvisited / sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes if n != node) if unvisited_nodes else 0
        centrality = harmonic_mean

        # Dynamic weight combining progress and centrality with adaptive scaling
        progress_factor = (total_unvisited - 1) / (total_unvisited + 1)
        centrality_weight = 1 - progress_factor
        weighted_centrality = centrality_weight * centrality

        # Path balance heuristic: favors nodes that create balanced remaining distances
        remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        if remaining_distances:
            distance_std = (sum((d - sum(remaining_distances)/len(remaining_distances))**2 for d in remaining_distances) / len(remaining_distances))**0.5
        else:
            distance_std = 0
        balance_score = -distance_std  # Lower std is better

        combined_score = (distance_to_current + distance_to_destination) + weighted_centrality + balance_score

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
