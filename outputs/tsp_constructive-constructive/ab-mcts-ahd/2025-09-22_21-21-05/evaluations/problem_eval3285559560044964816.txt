import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    num_total = len(distance_matrix)
    temperature = max(0.1, 1.0 - (1.0 - num_unvisited / num_total) ** 2)
    exploration_weight = 0.5 * (1.0 - math.exp(-num_unvisited / num_total))
    weight_avg = 0.3 * (num_unvisited / (num_unvisited + 1))
    penalty_threshold = 0.1 * sum(distance_matrix[0]) / num_total
    adaptive_penalty_factor = 1.0 + (0.1 * (num_unvisited / num_total))

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / num_unvisited if num_unvisited else 0

        global_score = (distance_to_destination + exploration_weight * avg_distance_to_remaining)
        local_score = distance_to_current * (1.0 + 0.2 * (1.0 - num_unvisited / num_total))
        penalty = adaptive_penalty_factor if distance_to_current < penalty_threshold else 1.0

        combined_score = (0.6 * local_score + 0.4 * global_score) * (1.0 + temperature * random.uniform(-0.1, 0.1)) * penalty

        scores.append((node, combined_score))

    if random.random() < temperature:
        next_node, _ = random.choice(scores)
    else:
        next_node, _ = min(scores, key=lambda x: x[1])

    return next_node
