def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Global optimization weight increases as remaining nodes decrease
        weight = 0.3 + 0.6 * (1 - remaining_count / len(distance_matrix))

        # Aggressive revisit penalty
        penalty = 0.2 * (len(distance_matrix) - remaining_count)

        combined_score = distance_to_current + weight * distance_to_destination + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
