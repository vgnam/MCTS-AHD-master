def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    decay_factor = 1.0 / (1.0 + 0.1 * total_unvisited)
    proximity_weight = 0.5 + 0.2 * decay_factor
    destination_weight = 1.0 - proximity_weight

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        connectivity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)
        combined_score = (destination_weight * distance_to_destination +
                         proximity_weight * distance_to_current +
                         0.2 * connectivity_score)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
