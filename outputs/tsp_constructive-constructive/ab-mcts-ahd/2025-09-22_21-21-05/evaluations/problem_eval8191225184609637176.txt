def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return destination_node

    # Calculate average distance to destination and centrality for unvisited nodes
    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / total_unvisited
    centrality_scores = {node: sum(distance_matrix[node][other] for other in unvisited_nodes) / total_unvisited for node in unvisited_nodes}

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining path length and node density
        weight = 1.0 / (1.0 + (distance_to_destination / avg_distance_to_dest) * (total_unvisited / len(distance_matrix)))

        # Penalty for nodes too close to current node to avoid backtracking
        penalty = max(0, (avg_distance_to_dest - distance_to_current) / avg_distance_to_dest) if distance_to_current < avg_distance_to_dest * 0.3 else 0

        # Hybrid score combining distance, centrality, and penalty
        score = (1 - weight) * distance_to_current + weight * distance_to_destination - penalty * centrality_scores[node]

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
