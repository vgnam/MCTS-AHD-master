def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    exploration_factor = 0.7  # Decaying exploration factor
    connectivity_potential = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            centrality_penalty = 0
        else:
            centrality_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        # Calculate connectivity potential (novel metric)
        connectivity_potential[node] = (distance_to_destination + centrality_penalty) / (distance_to_current + 1e-6)

        # Adaptive weighting based on exploration factor
        weighted_score = (exploration_factor * distance_to_current) + \
                         ((1 - exploration_factor) * connectivity_potential[node])

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
