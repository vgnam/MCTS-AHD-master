def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (remaining_nodes / len(distance_matrix)))

    # Calculate centrality and connectivity measures
    avg_distances = []
    connectivity_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        avg_distances.append(avg_dist)

        # Connectivity factor: sum of distances to all unvisited nodes, normalized
        connectivity = sum(distance_matrix[node][other] for other in unvisited_nodes) / (remaining_nodes ** 2)
        connectivity_scores.append(connectivity)

    avg_avg_distance = sum(avg_distances) / remaining_nodes if remaining_nodes > 0 else 0
    avg_connectivity = sum(connectivity_scores) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = 1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6))
        connectivity_factor = 1.0 - (connectivity_scores[i] / (avg_connectivity + 1e-6))

        # Dynamic weight adjustment based on remaining nodes
        dynamic_weight = weight_factor * (0.7 + 0.3 * (remaining_nodes / len(distance_matrix)))

        combined_score = (
            distance_to_current +
            distance_to_destination +
            dynamic_weight * (0.6 * centrality_factor + 0.4 * connectivity_factor)
        )

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
