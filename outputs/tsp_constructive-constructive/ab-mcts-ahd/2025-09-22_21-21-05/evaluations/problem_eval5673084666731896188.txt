def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    base_weight = 1.0 / (1.0 + remaining_nodes)
    avg_distance_to_current = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    avg_distance_to_destination = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes

    dynamic_weight = base_weight * (avg_distance_to_destination / (avg_distance_to_current + avg_distance_to_destination))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        detour_factor = (distance_to_current + distance_to_destination) / (distance_matrix[current_node][destination_node] + 1e-6)
        penalty = (detour_factor - 1) ** 2  # Stronger penalty for severe detours

        weighted_score = (1 - dynamic_weight) * distance_to_current + dynamic_weight * distance_to_destination + penalty * distance_to_current

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
