def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        ratio_distances = distance_to_current / (distance_to_destination + 1e-6)

        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        min_distance_to_remaining = min(distances_to_remaining) if distances_to_remaining else 0
        variance = sum((d - min_distance_to_remaining) ** 2 for d in distances_to_remaining) / len(unvisited_nodes) if unvisited_nodes else 0

        dynamic_weight = num_unvisited / (1.0 + num_unvisited)
        combined_score = (ratio_distances * dynamic_weight) + (min_distance_to_remaining * (1 - dynamic_weight)) + (variance * 0.2)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
