def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    proximity_weight = max(0.8 - (0.1 * (total_nodes - remaining_nodes) / total_nodes), 0.2)
    connectivity_weight = 1 - proximity_weight

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_unvisited = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if remaining_nodes > 1 else 0

        combined_score = (proximity_weight * distance_to_current) + (connectivity_weight * distance_to_destination) + (0.2 + 0.2 * (remaining_nodes / total_nodes)) * avg_distance_to_unvisited

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
