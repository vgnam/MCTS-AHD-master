def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    remaining_count = len(unvisited_nodes)
    dynamic_weight = 0.5 * (1 - (remaining_count / (remaining_count + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes)

        combined_score = (distance_to_current + distance_to_destination) * (1 - dynamic_weight) + centrality_score * dynamic_weight
        scores.append(combined_score)

    total_score = sum(scores)
    if total_score <= 0:
        return unvisited_nodes[0]

    probabilities = [score / total_score for score in scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)

    return next_node
