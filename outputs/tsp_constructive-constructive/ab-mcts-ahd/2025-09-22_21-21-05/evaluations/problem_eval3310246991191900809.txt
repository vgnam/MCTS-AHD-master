def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    weight_factor = max(0.1, 0.5 * (1 - num_unvisited / len(distance_matrix)))

    best_score = float('inf')
    next_node = None
    candidates = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + weight_factor * distance_to_destination

        if combined_score < best_score:
            best_score = combined_score
            next_node = node
            candidates = [(node, combined_score)]
        elif combined_score == best_score:
            candidates.append((node, combined_score))

    if destination_node in unvisited_nodes:
        destination_score = distance_matrix[current_node][destination_node] + weight_factor * 0
        if destination_score < best_score:
            next_node = destination_node
        elif destination_score == best_score:
            candidates.append((destination_node, destination_score))

    if len(candidates) > 1:
        next_node = random.choice([c[0] for c in candidates])

    return next_node
