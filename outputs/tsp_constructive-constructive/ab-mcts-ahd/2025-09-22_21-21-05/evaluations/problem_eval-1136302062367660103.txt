def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, exploration_prob=0.3):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if all(distance_matrix[current_node][node] >= destination_distance for node in unvisited_nodes if node != destination_node):
            return destination_node

    if np.random.random() < exploration_prob:
        closest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        return closest_node

    min_sum = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_to_node = distance_matrix[current_node][node]
        node_to_destination = distance_matrix[node][destination_node]
        total_distance = current_to_node + node_to_destination

        if total_distance < min_sum:
            min_sum = total_distance
            next_node = node

    return next_node
