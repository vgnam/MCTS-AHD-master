def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)

    centrality_scores = []
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_nodes
        centrality_scores.append(avg_dist)

    avg_centrality = sum(centrality_scores) / remaining_nodes if remaining_nodes > 0 else 0

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        weight_current = remaining_nodes / (remaining_nodes + 1)
        weight_centrality = 1.0 - weight_current
        weighted_score = (weight_current * distance_to_current) + (weight_centrality * centrality_scores[i] / (avg_centrality + 1e-6))

        if destination_node in unvisited_nodes and node == destination_node:
            weighted_score = min(weighted_score, distance_to_current)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    return next_node
