def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (remaining_nodes + 1)  # Decreases as unvisited nodes shrink
    scores = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + 0.5 * distance_to_destination
        scores.append((node, combined_score))

    # Apply softmax with temperature to get probabilities
    max_score = max(score for _, score in scores)
    exp_scores = [(node, np.exp((max_score - score) / temperature)) for node, score in scores]
    total = sum(exp for _, exp in exp_scores)
    probabilities = [(node, exp / total) for node, exp in exp_scores]

    # Select node based on probabilities
    r = np.random.random()
    cumulative_prob = 0.0
    for node, prob in probabilities:
        cumulative_prob += prob
        if r <= cumulative_prob:
            return node
    return next_node
