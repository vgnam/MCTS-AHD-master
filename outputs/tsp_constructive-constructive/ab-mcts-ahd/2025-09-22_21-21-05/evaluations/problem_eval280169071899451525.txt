def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    threshold = 0.7  # Weight for balancing distance and destination proximity

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_proximity = distance_matrix[node][destination_node]
        weighted_score = threshold * distance + (1 - threshold) * destination_proximity

        if weighted_score < min_distance or (weighted_score == min_distance and distance < distance_matrix[current_node][next_node]):
            min_distance = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_distance * 0.8:  # Stronger preference for destination
            next_node = destination_node

    return next_node
