def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distances_to_remaining = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_distance_to_remaining = sum(distances_to_remaining) / len(distances_to_remaining) if distances_to_remaining else 0

        # Dynamic weight adjustment based on remaining tour length
        weight_short_term = 0.4 + 0.2 * (1 - total_unvisited / (total_unvisited + 1))
        weight_long_term = 1 - weight_short_term

        # Penalty for outliers (nodes with extreme distances to remaining nodes)
        std_dev = (sum((d - avg_distance_to_remaining) ** 2 for d in distances_to_remaining) / len(distances_to_remaining)) ** 0.5 if distances_to_remaining else 0
        penalty = 0.1 * (max(distances_to_remaining) - min(distances_to_remaining)) / std_dev if std_dev > 0 else 0

        combined_score = weight_long_term * avg_distance_to_remaining + weight_short_term * distance_to_current + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
