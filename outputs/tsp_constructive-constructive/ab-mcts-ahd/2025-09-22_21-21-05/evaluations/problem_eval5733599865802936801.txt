def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        product_distance_to_remaining = 1
        for n in unvisited_nodes:
            if n != node:
                product_distance_to_remaining *= distance_matrix[node][n]

        avg_distance = sum(distance_matrix[node]) / len(distance_matrix[node])
        distance_penalty = max(0, distance_to_current - avg_distance)

        dynamic_weight = 0.5 if num_unvisited <= 2 else 0.2 / num_unvisited
        combined_score = (distance_to_current + distance_to_destination) - (dynamic_weight * product_distance_to_remaining) - (0.1 * distance_penalty)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
