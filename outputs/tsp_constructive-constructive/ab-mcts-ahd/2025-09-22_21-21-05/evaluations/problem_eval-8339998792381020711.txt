def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    dynamic_weight = 0.4 * (1 - (remaining_count / (remaining_count + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        centrality_score = sum(1 / (distance_matrix[node][n] + 1e-6) for n in unvisited_nodes)

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.2:
                penalty += 0.1

        combined_score = (distance_to_current + distance_to_destination) * (1 - dynamic_weight) + 0.3 * avg_distance_to_remaining + centrality_score * dynamic_weight - penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
