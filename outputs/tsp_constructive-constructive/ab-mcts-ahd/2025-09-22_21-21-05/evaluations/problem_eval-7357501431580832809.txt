def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 0.5 + (0.5 * (remaining_nodes / (remaining_nodes + 1)))

    for node in unvisited_nodes:
        if node == destination_node:
            next_node = node
            break

        distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / max(1, len(unvisited_nodes) - 1)

        weighted_score = (weight_factor * distance) + ((1 - weight_factor) * dest_distance) + (0.3 * centrality)

        if weighted_score < min_score:
            min_score = weighted_score
            next_node = node

    if destination_node in unvisited_nodes and distance_matrix[current_node][destination_node] < min_score:
        next_node = destination_node

    return next_node
