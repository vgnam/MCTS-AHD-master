def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 - (0.7 * (remaining_nodes / (remaining_nodes + 1)))
    penalty_factor = 0.3 * (1.0 - (remaining_nodes / (remaining_nodes + 1)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        distance_to_origin = distance_matrix[node][0]  # Assuming origin is node 0
        penalty = penalty_factor * distance_to_current if node in unvisited_nodes else 0
        combined_score = distance_to_current + weight_factor * distance_to_destination + penalty + 0.1 * distance_to_origin

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
