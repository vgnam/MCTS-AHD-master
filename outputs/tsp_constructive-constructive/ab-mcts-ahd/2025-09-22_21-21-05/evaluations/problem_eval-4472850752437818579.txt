def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    ratio = remaining_nodes / total_nodes if total_nodes > 0 else 0
    exploration_bias = 0.3 * (1 - ratio) ** 2

    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        centrality_bonus = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        revisit_penalty = 0.1 if distance_matrix[node][current_node] > 0 else 0

        combined_score = (1 - exploration_bias) * distance_to_current + exploration_bias * distance_to_destination
        combined_score += revisit_penalty * distance_to_current
        combined_score -= 0.05 * centrality_bonus

        scores.append((node, combined_score))

    if not scores:
        return destination_node

    min_score = min(score for _, score in scores)
    max_score = max(score for _, score in scores)
    normalized_scores = [(node, (max_score - score) / (max_score - min_score + 1e-10)) for node, score in scores]

    total_weight = sum(weight for _, weight in normalized_scores)
    if total_weight == 0:
        return normalized_scores[0][0]

    weights = [weight / total_weight for _, weight in normalized_scores]
    next_node = np.random.choice([node for node, _ in normalized_scores], p=weights)

    return next_node
