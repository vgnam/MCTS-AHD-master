def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_weighted_cost = float('inf')
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        remaining_distance = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        if unvisited_count > (len(distance_matrix) / 2):
            weight = 0.6  # Early stage: prioritize exploration
        else:
            weight = 0.4  # Late stage: prioritize exploitation

        weighted_cost = (weight * current_distance) + ((1 - weight) * remaining_distance)

        if weighted_cost < min_weighted_cost:
            min_weighted_cost = weighted_cost
            next_node = node

    return next_node
