def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    density_factor = remaining_nodes / total_nodes if total_nodes > 0 else 1.0

    weight_factor = 1.0 / (1.0 + remaining_nodes * density_factor)

    current_path_distance = distance_matrix[current_node][destination_node]
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        path_deviation = distance_to_current + distance_to_destination - current_path_distance
        penalty = path_deviation * (1.0 - weight_factor)

        weighted_score = (1 - weight_factor) * (1.0 / (1.0 + distance_to_current)) + \
                         weight_factor * distance_to_destination + \
                         penalty

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
