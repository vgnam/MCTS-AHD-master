def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    log_factor = math.log(remaining_nodes + 1)  # Logarithmic scaling
    hop_penalty = (remaining_nodes / (remaining_nodes + 1)) ** 3  # Stronger decay for hop count
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Detour penalty based on remaining nodes and hop count
        detour_penalty = (distance_to_current + distance_to_destination - distance_matrix[current_node][destination_node]) ** 2
        combined_score = distance_to_current + log_factor * distance_to_destination + hop_penalty * detour_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
