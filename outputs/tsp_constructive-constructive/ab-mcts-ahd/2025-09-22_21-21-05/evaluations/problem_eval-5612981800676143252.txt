def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    decay_factor = 0.6
    exploration_weight = 0.4

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        penalty = max(0, (distance_to_current + distance_to_destination) - 1.5 * avg_distance_to_remaining)
        exploration_bonus = exploration_weight * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)) * avg_distance_to_remaining

        combined_score = (distance_to_current + distance_to_destination) + 0.25 * avg_distance_to_remaining - penalty + decay_factor * exploration_bonus

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
