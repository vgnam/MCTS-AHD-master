def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1  # +1 for the current node
    remaining_ratio = len(unvisited_nodes) / total_nodes
    weight_factor = remaining_ratio ** 2  # Squared to emphasize early-stage prioritization

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        max_distance = max(distance_to_current, distance_to_destination)
        penalty = (max_distance - distance_to_current) * (1 + remaining_ratio)  # Scaled penalty
        weighted_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_destination + penalty
        weighted_score = weighted_score * (1 + math.log(1 + remaining_ratio))  # Logarithmic smoothing

        if weighted_score < best_score:
            best_score = weighted_score
            next_node = node

    return next_node
