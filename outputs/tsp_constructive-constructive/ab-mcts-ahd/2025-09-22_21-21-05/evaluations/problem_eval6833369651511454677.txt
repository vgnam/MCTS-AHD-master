def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0
        closeness_penalty = (distance_to_destination ** 2) / (total_unvisited ** 2)

        dynamic_weight = 1 - (total_unvisited / (total_unvisited + 5))
        combined_score = dynamic_weight * ((distance_to_current ** 2) + avg_distance_to_remaining) + (1 - dynamic_weight) * closeness_penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
