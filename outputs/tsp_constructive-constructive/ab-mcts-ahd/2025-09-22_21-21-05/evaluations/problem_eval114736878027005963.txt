def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    scores = []
    nodes = []

    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / total_unvisited

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        weight_local = 0.5 + 0.5 * (0.9 ** (total_unvisited - 1))
        weight_global = 1 - weight_local

        normalized_distance = distance_to_current / avg_distance

        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if remaining_nodes:
            avg_distance_to_remaining = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            connectivity_factor = len([n for n in remaining_nodes if distance_matrix[node][n] < 1.2 * avg_distance]) / len(remaining_nodes)
        else:
            avg_distance_to_remaining = 0
            connectivity_factor = 0

        destination_alignment = 1 / (1 + distance_to_destination)

        score = (weight_local * normalized_distance + weight_global * avg_distance_to_remaining) * (1 + 0.5 * connectivity_factor + 0.3 * destination_alignment)
        scores.append(score)
        nodes.append(node)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score) for s in scores]

    if sum(normalized_scores) > 0:
        normalized_scores = [s / sum(normalized_scores) for s in normalized_scores]
    else:
        normalized_scores = [1 / len(normalized_scores)] * len(normalized_scores)

    next_node = random.choices(nodes, weights=normalized_scores, k=1)[0]
    return next_node
