def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate harmonic centrality (inverse of harmonic mean of distances to unvisited nodes)
    harmonic_sum = sum(1.0 / distance_matrix[current_node][node] for node in unvisited_nodes)
    harmonic_centrality = len(unvisited_nodes) / harmonic_sum if harmonic_sum != 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic exploration factor based on remaining path length and local connectivity
        exploration_factor = 0.4 * harmonic_centrality * (total_unvisited / (1 + 0.2 * total_unvisited))

        # Dynamic destination weight that decays with remaining nodes
        destination_weight = 0.6 * (1 / (1 + 0.3 * total_unvisited))

        # Combined score with adaptive weights
        combined_score = distance_to_current + destination_weight * distance_to_destination + exploration_factor

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
