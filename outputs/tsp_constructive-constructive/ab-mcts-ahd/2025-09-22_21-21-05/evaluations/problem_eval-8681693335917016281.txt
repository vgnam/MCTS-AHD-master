def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('-inf')
    next_node = None

    # Calculate centrality of current node (inverse of average distance to all nodes)
    centrality = 1.0 / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on unvisited nodes and centrality
        weight = 0.3 * (1 / (1 + 0.05 * total_unvisited)) + 0.2 * centrality

        # Exploration bonus: encourage less traversed paths
        exploration_bonus = 1.0 / (1 + sum(distance_matrix[node]))

        combined_score = -distance_to_current + weight * distance_to_destination + 0.1 * exploration_bonus

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
