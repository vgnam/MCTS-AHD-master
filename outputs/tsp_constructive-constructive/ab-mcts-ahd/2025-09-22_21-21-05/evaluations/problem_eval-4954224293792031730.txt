def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_current = max(0.3, 0.7 - 0.02 * (total_unvisited - 1))
    weight_destination = 1 - weight_current

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        normalized_distance_current = distance_to_current / max(distance_matrix[current_node])
        normalized_distance_destination = distance_to_destination / max(distance_matrix[destination_node])

        combined_score = weight_current * normalized_distance_current + weight_destination * normalized_distance_destination

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
