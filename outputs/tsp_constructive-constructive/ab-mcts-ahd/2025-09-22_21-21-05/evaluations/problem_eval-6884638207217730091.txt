importance to the current path, using a non-linear scaling factor to prioritize either local or global optimization, while also incorporating a penalty for revisiting nodes to avoid cycles.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 0:
        return destination_node

    # Non-linear adjustment for weight
    remaining_nodes_factor = (total_unvisited / (total_unvisited + 1)) ** 2

    # Penalty for revisiting nodes (avoids cycles)
    revisit_penalty = 0.1 * (1 / (1 + len(unvisited_nodes)))

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight = remaining_nodes_factor

        # Incorporate revisit penalty
        score = weight * distance_to_current + (1 - weight) * distance_to_destination + revisit_penalty

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
