def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_temp = max(0.1, 1.0 - visited_ratio)

    remaining_unvisited = len(unvisited_nodes)
    connectivity_scores = []
    avg_distances = []

    for node in unvisited_nodes:
        connectivity = sum(1 for other in unvisited_nodes if distance_matrix[node][other] < 1.5 * min(distance_matrix[node]))
        connectivity_scores.append(connectivity)
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes) / remaining_unvisited
        avg_distances.append(avg_dist)

    max_connectivity = max(connectivity_scores) if connectivity_scores else 1
    avg_avg_distance = sum(avg_distances) / remaining_unvisited if remaining_unvisited > 0 else 0

    scores = []
    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        centrality_factor = (connectivity_scores[i] / max_connectivity) * (1.0 - (avg_distances[i] / (avg_avg_distance + 1e-6)))

        path_bias = 0.5 if visited_ratio < 0.5 else 0.3
        local_weight = (1.0 - path_bias) * (1.0 - visited_ratio)
        global_weight = path_bias * visited_ratio

        score = (local_weight * distance_to_current) + (global_weight * distance_to_destination) + (0.4 * centrality_factor)
        scores.append(score)

    probabilities = [math.exp(-s / exploration_temp) for s in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
