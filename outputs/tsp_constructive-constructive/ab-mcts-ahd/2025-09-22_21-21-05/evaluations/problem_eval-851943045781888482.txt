def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate node degrees for each unvisited node
    node_degrees = []
    for node in unvisited_nodes:
        degree = sum(1 for other in unvisited_nodes if distance_matrix[node][other] > 0)
        node_degrees.append(degree)

    max_degree = max(node_degrees) if node_degrees else 1

    for i, node in enumerate(unvisited_nodes):
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on node degree
        degree_factor = node_degrees[i] / max_degree
        weight = 0.5 * (total_unvisited / (total_unvisited + 1))  # Inverse relationship with unvisited nodes
        combined_weight = weight * 0.5 + degree_factor * 0.5

        score = distance_to_current * 0.5 + combined_weight * distance_to_destination * 0.5

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
