def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 0.7 if remaining_nodes > 2 else 1.0  # Higher dynamic weighting

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        combined_score = distance_to_current + weight * distance_to_destination
        penalty = 0.2 * (1.0 / (distance_to_current + 1e-9))  # Increased penalty
        adjusted_score = max(distance_to_current, combined_score - penalty)

        if adjusted_score < best_score:
            best_score = adjusted_score
            next_node = node

    return next_node
