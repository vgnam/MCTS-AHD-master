def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    best_score = float('inf')
    next_node = None

    # Calculate node degrees (number of connections)
    node_degrees = [sum(1 for d in row if d > 0) for row in distance_matrix]

    # Adaptive weights based on node degrees and path history
    degree_factor = sum(node_degrees) / len(node_degrees) if node_degrees else 1
    distance_weight = 1.0 / (1 + 0.2 * degree_factor)
    destination_weight = 0.5 * (1 + 0.1 * total_unvisited) / (1 + degree_factor)
    exploration_weight = 0.2 * (1 - 0.1 * (total_unvisited / len(distance_matrix)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Reinforcement learning-inspired adjustment
        degree_adjustment = node_degrees[node] / max(node_degrees) if max(node_degrees) > 0 else 1

        combined_score = (distance_weight * distance_to_current +
                          destination_weight * distance_to_destination +
                          exploration_weight * degree_adjustment)

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
