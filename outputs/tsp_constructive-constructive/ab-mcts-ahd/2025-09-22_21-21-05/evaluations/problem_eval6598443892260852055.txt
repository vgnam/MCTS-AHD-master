def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_destination = 1.0 / remaining_nodes
    candidates = []

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        penalty = 1.0 if node != destination_node else weight_destination
        candidates.append((node, distance * penalty))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1])
    best_node, best_score = candidates[0]

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        dest_score = dest_distance * weight_destination
        if dest_score < best_score or (remaining_nodes <= 2 and dest_distance < best_score * 1.5):
            best_node = destination_node

    return next_node
