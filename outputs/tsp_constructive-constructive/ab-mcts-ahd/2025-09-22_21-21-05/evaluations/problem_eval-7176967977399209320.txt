def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0

        progress_weight = 0.2 + 0.3 * (1 - total_unvisited / (total_unvisited + len(unvisited_nodes)))
        centrality_factor = 1.0 - (avg_distance_to_remaining / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 1))

        penalty = 0.0
        for neighbor in unvisited_nodes:
            if neighbor != node and distance_matrix[node][neighbor] < distance_to_current * 1.2:
                penalty += 0.2

        combined_score = distance_to_current + distance_to_destination + progress_weight * avg_distance_to_remaining + centrality_factor + penalty

        if combined_score < best_score:
            best_score = combined_score
            next_node = node

    return next_node
