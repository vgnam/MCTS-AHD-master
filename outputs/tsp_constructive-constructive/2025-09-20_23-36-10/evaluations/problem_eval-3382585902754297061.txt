def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Original ratio heuristic
        ratio = destination_distance / distance if distance != 0 else 0

        # Additional hub potential heuristic: sum of distances to other unvisited nodes
        hub_potential = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Combined score with dynamic weighting
        weight = 0.7 if len(unvisited_nodes) > 3 else 0.3
        score = (weight * ratio) + ((1 - weight) * hub_potential)

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
