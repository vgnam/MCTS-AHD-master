def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    num_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality: average distance to other nodes
        centrality = sum(distance_matrix[node]) / (num_nodes - 1)

        # Weighted score: balance progress toward destination and exploration of less central nodes
        ratio = destination_distance / distance
        exploration_weight = 1 / (centrality + 1e-6)  # Avoid division by zero
        score = ratio + 0.3 * exploration_weight

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
