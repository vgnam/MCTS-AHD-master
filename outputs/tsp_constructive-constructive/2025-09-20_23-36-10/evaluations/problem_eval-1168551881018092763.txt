importance in the network.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    n = len(distance_matrix)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Calculate centrality as average distance to all other nodes
        centrality = sum(distance_matrix[node]) / (n - 1)

        # Combine ratio and centrality with dynamic weights
        ratio_weight = 0.7
        centrality_weight = 0.3
        score = (ratio_weight * (destination_distance / distance)) + (centrality_weight * (1 / centrality))

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
