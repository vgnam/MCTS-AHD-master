def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == current_node:
            continue
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate dynamic weighting factor based on remaining unvisited nodes
        remaining_nodes = unvisited_nodes - {current_node, node}
        hub_factor = 0
        if remaining_nodes:
            hub_factor = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

        # Score combines destination proximity and hub potential
        score = (0.6 * (destination_distance / distance)) + (0.4 * (1 / (1 + hub_factor)))
        if score > max_score:
            max_score = score
            next_node = node
    return next_node
