def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    best_node = None
    max_score = -float('inf')
    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            continue

        # Dynamic weight based on node's proximity to destination and current distance
        proximity_weight = distance_to_dest / distance_to_node
        detour_penalty = (distance_to_node / distance_matrix[current_node][destination_node]) ** 2
        score = proximity_weight - detour_penalty

        if score > max_score:
            max_score = score
            best_node = node

    return next_node
