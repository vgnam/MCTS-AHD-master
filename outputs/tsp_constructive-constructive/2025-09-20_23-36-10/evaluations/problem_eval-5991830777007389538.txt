def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes) - 1

    for node in unvisited_nodes:
        if node == destination_node:
            continue

        distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        ratio = dest_distance / distance
        proximity_weight = (current_to_dest - dest_distance) / max(current_to_dest, 1)
        dynamic_weight = 1 + (remaining_nodes / (remaining_nodes + 1)) ** 2

        score = ratio * proximity_weight * dynamic_weight

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
