def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Dynamic weighting: penalize nodes that increase the path length
        weight = (destination_distance / distance) * (1 - (distance / total_distance))
        if weight > max_score:
            max_score = weight
            next_node = node

    return next_node
