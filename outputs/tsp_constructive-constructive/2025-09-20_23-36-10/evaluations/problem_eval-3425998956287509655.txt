def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + 0.1 * (total_unvisited - 1))  # Dynamic weight based on remaining nodes

    max_score = -float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Centrality measure: average distance to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality /= (total_unvisited - 1) if total_unvisited > 1 else 1

        # Score combines destination proximity and centrality, weighted dynamically
        score = (destination_distance / distance) * weight_factor + (1 - weight_factor) * (1 / (1 + centrality))

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
