def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    n = len(distance_matrix)

    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Calculate degree centrality (number of connections)
        degree = sum(1 for d in distance_matrix[node] if d > 0 and d != float('inf'))

        # Normalize factors
        normalized_destination = destination_distance / max(distance_matrix[node])
        normalized_distance = distance / max(distance_matrix[current_node])

        # Weighted score: balance destination proximity and current distance, adjusted by centrality
        weight_factor = 0.6 if degree > 1 else 0.9  # Higher weight for isolated nodes
        score = (0.5 * normalized_destination - 0.3 * normalized_distance) * weight_factor

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
