def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    decay_factor = 0.9  # Factor to penalize nodes that are further from the current node
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality score (inverse of average distance to other unvisited nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) + 1e-6)

        # Combine ratio, centrality, and decay factor
        score = (destination_distance / distance) * centrality * (decay_factor ** (distance / sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1)))

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
