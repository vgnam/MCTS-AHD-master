def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality as the average distance to all other nodes
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])

        # Dynamic weighting factor based on remaining unvisited nodes
        weight = len(unvisited_nodes) / len(distance_matrix)

        # Score combines normalized ratio and centrality
        ratio = destination_distance / distance
        normalized_ratio = ratio / (max(ratio, 1e-6))  # Avoid division by zero
        score = (1 - weight) * normalized_ratio + weight * (1 / centrality)

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
