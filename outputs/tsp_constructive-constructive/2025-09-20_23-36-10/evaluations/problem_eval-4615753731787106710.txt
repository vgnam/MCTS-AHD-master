def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {current_node, destination_node}
    total_remaining = len(remaining_nodes)

    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Dynamic weight factor based on remaining nodes
        weight = 1.0 / (1.0 + (total_remaining / (total_remaining + 1)))
        score = (destination_distance / distance) * weight

        # Add centrality factor (number of remaining nodes connected to this node)
        centrality = sum(1 for n in remaining_nodes if distance_matrix[node][n] > 0)
        score += centrality * 0.1  # Small weight for centrality

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
