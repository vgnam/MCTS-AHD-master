def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting factor based on remaining unvisited nodes
        weight = 1.0 + (len(unvisited_nodes) / (len(distance_matrix) + 1))

        # Penalty for revisiting nodes (if applicable)
        penalty = 1.0 if node in unvisited_nodes else 1.2

        score = (destination_distance / distance) * weight / penalty
        if score > max_score:
            max_score = score
            next_node = node
    return next_node
