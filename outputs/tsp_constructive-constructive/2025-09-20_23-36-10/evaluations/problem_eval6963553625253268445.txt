def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    if total_unvisited == 1:
        return unvisited_nodes.pop()

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting factor based on remaining path length and unvisited nodes
        remaining_path_factor = (total_unvisited - 1) / len(unvisited_nodes)
        weighted_ratio = (destination_distance ** 2) / (distance * (1 + remaining_path_factor))

        if weighted_ratio > max_score:
            max_score = weighted_ratio
            next_node = node
    return next_node
