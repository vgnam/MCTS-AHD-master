def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == current_node:
            continue
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            continue

        # Normalize distances to avoid bias from scale
        norm_distance_to_node = distance_to_node / max(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)
        norm_distance_from_node = distance_from_node / max(distance_matrix[n][destination_node] for n in unvisited_nodes if n != destination_node)

        # Score combines normalized distances with a weight favoring closer nodes
        score = (0.7 * (1 - norm_distance_to_node)) + (0.3 * (1 - norm_distance_from_node))

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
