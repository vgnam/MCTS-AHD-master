def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == current_node:
            continue
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting factor based on remaining distance and node's distance to destination
        remaining_distance = distance_matrix[current_node][destination_node]
        weighting_factor = (remaining_distance / (remaining_distance + destination_distance)) ** 0.5

        # Score combines the ratio and potential path reduction
        score = (destination_distance / distance) * (1 + weighting_factor)

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
