def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality score: sum of distances to all other unvisited nodes
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)

        # Combine ratio and centrality with dynamic weighting
        if centrality == 0:
            score = float('inf')
        else:
            ratio = destination_distance / distance
            centrality_weight = 0.3  # Adjustable weight for centrality
            score = ratio + centrality_weight * (1 / centrality)

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
