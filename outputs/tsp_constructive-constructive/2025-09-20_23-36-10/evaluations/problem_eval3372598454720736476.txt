def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1  # Exclude destination if already visited

    for node in unvisited_nodes:
        if node == destination_node:
            continue  # Skip destination if already visited (handled above)

        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue  # Avoid division by zero

        # Weighted ratio: prioritize nodes closer to destination, penalize nodes too close to current
        proximity_weight = 1.0 / (1.0 + distance)  # Higher weight for closer nodes
        progress_weight = destination_distance / distance  # Original ratio
        remaining_weight = 1.0 / (1.0 + remaining_nodes)  # Adjust for remaining nodes

        score = (progress_weight * 0.6) + (proximity_weight * 0.3) + (remaining_weight * 0.1)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
