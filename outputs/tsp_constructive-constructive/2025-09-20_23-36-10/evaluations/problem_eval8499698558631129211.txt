def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        progress_ratio = destination_distance / distance
        future_progress_potential = sum(
            distance_matrix[node][other] / distance_matrix[other][destination_node]
            for other in unvisited_nodes if other != node
        ) / len(unvisited_nodes) if unvisited_nodes else 0

        cycle_penalty = 0.1 if node in unvisited_nodes and node != destination_node else 0
        score = progress_ratio * (1 + 0.5 * future_progress_potential) - cycle_penalty

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
