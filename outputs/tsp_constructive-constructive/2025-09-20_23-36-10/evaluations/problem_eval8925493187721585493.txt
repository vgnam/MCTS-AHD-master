def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    penalty_factor = 1.0 / (remaining_nodes + 1)  # Adjusts bias based on remaining nodes

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue
        score = (destination_distance / distance) * (1 - penalty_factor * (distance / max(distance_matrix[current_node][n] for n in unvisited_nodes if n != node)))
        if score > max_score:
            max_score = score
            next_node = node
    return next_node
