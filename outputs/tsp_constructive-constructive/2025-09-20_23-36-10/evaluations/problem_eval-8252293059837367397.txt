def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate the ratio of destination distance to current distance
        ratio = destination_distance / distance

        # Calculate the average distance to remaining unvisited nodes (excluding current and destination)
        remaining_nodes = [n for n in unvisited_nodes if n != node and n != destination_node]
        if remaining_nodes:
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_distance = 0

        # Combine ratio and average distance heuristic with weights
        score = 0.7 * ratio + 0.3 * (1 / (1 + avg_distance))  # Weighted combination

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
