def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    best_node = None
    best_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 / (remaining_nodes + 1)  # Dynamic weight based on remaining nodes

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Weighted score combining destination proximity and detour penalty
        score = (1 - weight) * (destination_distance / distance) + weight * (1 / (distance + 1e-6))
        if score > best_score:
            best_score = score
            best_node = node

    return next_node
