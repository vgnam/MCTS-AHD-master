def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weight based on distance to destination and detour penalty
        detour_penalty = (distance - avg_distance) / (avg_distance + 1e-10)
        score = (destination_distance / (distance + 1e-10)) - detour_penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
