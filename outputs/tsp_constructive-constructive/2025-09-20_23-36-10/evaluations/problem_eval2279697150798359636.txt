def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    current_dest_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Original ratio term
        ratio = dest_distance / distance

        # New progress factor: prioritizes nodes that reduce the distance to the destination more significantly
        progress_factor = (current_dest_distance - dest_distance) / distance

        # Combined score: balances ratio and progress factor with a weighting factor
        score = 0.6 * ratio + 0.4 * progress_factor

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
