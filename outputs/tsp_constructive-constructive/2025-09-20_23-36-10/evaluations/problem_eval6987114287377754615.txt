def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_nodes = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Dynamic adjustment factor based on remaining nodes
        adjustment = 1.0 / (1.0 + remaining_nodes)

        # Weighted score combining destination progress and detour minimization
        score = (destination_distance * (1 - adjustment)) - (distance * adjustment)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
