def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    num_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Normalize progress and cost
        progress = destination_distance / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] != 0 else 0
        cost = distance / max(distance_matrix[current_node][node] for node in unvisited_nodes if node != current_node) if unvisited_nodes else 0

        # Dynamic weight based on the number of unvisited nodes
        weight = 1 / (1 + num_unvisited)
        score = (1 - weight) * progress + weight * (1 - cost)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
