def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting with penalty for revisiting
        alpha = 0.7  # Weight for destination proximity
        beta = 0.3   # Weight for distance from current node
        penalty = 1.0 / (1 + len(unvisited_nodes))  # Penalty for revisiting
        score = (alpha * (1 / destination_distance) + beta * (1 / distance)) * penalty

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
