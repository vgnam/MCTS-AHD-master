def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting factor based on distance to destination and current distance
        weight = 1.0 / (1.0 + distance)
        score = (destination_distance ** 2) * weight

        # Penalize nodes that have been visited more frequently (simulated here)
        # In practice, this could use a visit count dictionary
        if node in unvisited_nodes and len(unvisited_nodes) > 1:
            score *= 0.9  # Small penalty to encourage exploration

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
