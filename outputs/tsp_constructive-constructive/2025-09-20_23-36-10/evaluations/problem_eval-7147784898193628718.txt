importance in the network. It prioritizes the destination if unvisited, otherwise selects the node maximizing a weighted sum of the distance ratio and inverse centrality, favoring nodes that are both closer to the destination and less central in the network.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    n = len(distance_matrix)

    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        ratio = destination_distance / distance

        centrality = sum(distance_matrix[node]) / (n - 1)

        score = 0.7 * ratio - 0.3 * centrality

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
