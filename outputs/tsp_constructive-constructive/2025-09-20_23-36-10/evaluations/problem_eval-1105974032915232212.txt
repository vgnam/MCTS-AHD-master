def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality score (average distance to other unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0

        # Normalized ratio with centrality consideration
        score = (destination_distance / distance) * (1 + 0.5 * (1 - centrality / max(distance_matrix[node][other] for other in unvisited_nodes if other != node) if unvisited_nodes else 0))

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
