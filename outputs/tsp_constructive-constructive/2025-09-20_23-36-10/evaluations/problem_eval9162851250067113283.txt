def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    current_dest_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            continue

        # Dynamic weighting: prioritize nodes that are closer to the current node but still make progress toward the destination
        proximity_weight = 1 / distance_to_node
        progress_weight = (current_dest_distance - distance_to_dest) / current_dest_distance if current_dest_distance != 0 else 0
        score = proximity_weight * progress_weight

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
