def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) - 1
    weight_dest = 0.7 if remaining_nodes > 1 else 0.9
    weight_dist = 1 - weight_dest

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        normalized_dest = dest_distance / max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        normalized_dist = distance / max(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)

        score = (weight_dest * normalized_dest) - (weight_dist * normalized_dist)
        if score > max_score:
            max_score = score
            next_node = node
    return next_node
