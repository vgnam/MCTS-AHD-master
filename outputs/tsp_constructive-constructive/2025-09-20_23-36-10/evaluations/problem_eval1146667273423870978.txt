def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting based on proximity and destination distance
        weight = (destination_distance / distance) * (1 + (1 / (1 + distance)))

        # Penalty for recently visited nodes (simulated by higher distance)
        penalty = 1 - (1 / (1 + distance))
        score = weight * penalty

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
