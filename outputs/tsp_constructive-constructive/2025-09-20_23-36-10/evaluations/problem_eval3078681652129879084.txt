def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]
    remaining_nodes = len(unvisited_nodes) - 1

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting factor based on remaining nodes and proximity to destination
        weight = (remaining_nodes / (remaining_nodes + 1)) * (current_to_dest / (current_to_dest + 1))
        score = (dest_distance / distance) * weight + (current_to_dest - dest_distance) / (distance + 1)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
