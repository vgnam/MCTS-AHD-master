def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue
        # Dynamic weighting factor based on remaining unvisited nodes
        weight = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        # Penalize revisits with a logarithmic term
        revisit_penalty = 1 + (1 / (1 + math.exp(-(len(unvisited_nodes) - 1))))
        ratio = (destination_distance / distance) * weight / revisit_penalty
        if ratio > max_score:
            max_score = ratio
            next_node = node
    return next_node
