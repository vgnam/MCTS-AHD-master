def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None

    # Calculate centroid of unvisited nodes
    centroid = sum(unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Centrality score (closer to centroid is better)
        centrality = 1 / (abs(node - centroid) + 1e-6)

        # Original ratio (higher is better)
        ratio = destination_distance / distance

        # Combined score (weighted sum)
        score = 0.6 * ratio + 0.4 * centrality

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
