def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    current_destination_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]
        if distance_to_node == 0:
            continue

        # Calculate detour penalty: difference between direct distance and path through node
        detour_penalty = (distance_to_node + distance_to_destination) - current_destination_distance

        # Dynamic adjustment factor: higher penalty for nodes far from destination relative to their distance
        adjustment_factor = (distance_to_destination / distance_to_node) ** 2

        # Combined score: prioritize nodes that reduce detour while being closer to destination
        score = (distance_to_destination / distance_to_node) - (detour_penalty * adjustment_factor)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
