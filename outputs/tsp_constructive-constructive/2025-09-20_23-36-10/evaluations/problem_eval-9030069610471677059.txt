def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    remaining_nodes = unvisited_nodes - {current_node}
    total_remaining = len(remaining_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality as the average distance to other remaining nodes
        centrality = sum(distance_matrix[node][other] for other in remaining_nodes) / total_remaining if total_remaining > 0 else 0

        # Dynamic weighting factor based on remaining nodes
        weight = 1 / (1 + centrality) if centrality > 0 else 1

        # Score combines ratio and centrality
        score = (destination_distance / distance) * weight

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
