def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    decay_factor = 0.5  # Adjusts the influence of distance from current node

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            continue

        # Normalize distances to avoid bias from scale
        normalized_distance = distance_to_node / max(distance_matrix[current_node])
        normalized_destination = distance_to_destination / max(distance_matrix[node])

        # Score combines progress toward destination and proximity to current node
        score = (normalized_destination ** 2) - (decay_factor * normalized_distance)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
