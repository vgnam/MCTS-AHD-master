def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate centrality (average distance to all unvisited nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

        # Combine ratio and centrality with weights (0.7 for ratio, 0.3 for centrality)
        score = (0.7 * (destination_distance / distance)) + (0.3 * (1 / centrality))
        if score > max_score:
            max_score = score
            next_node = node
    return next_node
