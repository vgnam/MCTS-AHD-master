def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic weighting factor based on proximity to destination and detour potential
        weighting_factor = (destination_distance / (distance + 1e-10)) * (1 / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)))
        if weighting_factor > max_score:
            max_score = weighting_factor
            next_node = node
    return next_node
