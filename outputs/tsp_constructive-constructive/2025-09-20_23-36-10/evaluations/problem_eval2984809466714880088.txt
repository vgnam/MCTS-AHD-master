def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        ratio = destination_distance / distance
        penalty = distance / distance_matrix[current_node][destination_node] if distance_matrix[current_node][destination_node] > 0 else 0
        score = ratio - 0.5 * penalty  # Balance between progress and detour minimization

        # Introduce probabilistic exploration (10% chance to choose randomly)
        if random.random() < 0.1:
            next_node = random.choice(list(unvisited_nodes))
            break

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
