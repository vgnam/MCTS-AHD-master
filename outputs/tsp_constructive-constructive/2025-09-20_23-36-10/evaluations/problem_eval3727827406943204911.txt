def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    min_total_cost = float('inf')
    next_node = None
    remaining_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_from_node_to_dest = distance_matrix[node][destination_node]

        if distance_to_node == 0:
            continue

        # Weighted cost: balance between progress and detour, adjusted by remaining distance
        weight = 1.0 if remaining_distance > 0 else 0.0
        cost = (1 - weight) * distance_to_node + weight * distance_from_node_to_dest

        if cost < min_total_cost:
            min_total_cost = cost
            next_node = node

    return next_node
