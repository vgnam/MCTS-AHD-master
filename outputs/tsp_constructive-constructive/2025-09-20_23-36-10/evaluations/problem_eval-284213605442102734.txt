def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue
        ratio = destination_distance / distance
        proximity_factor = 1 / distance  # Prefer nodes closer to current node
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        else:
            avg_remaining_distance = 0
        score = ratio * proximity_factor * (1 / (1 + avg_remaining_distance))  # Penalize nodes with long remaining paths
        if score > max_score:
            max_score = score
            next_node = node
    return next_node
