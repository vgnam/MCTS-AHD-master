def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        if node == current_node:
            continue

        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Dynamic weighting: prioritize nodes that are closer to the destination relative to their distance from current
        # Also consider the node's potential to act as an intermediate hub (lower variance in distances)
        distance_variance = sum(
            abs(distance_matrix[node][other] - distance_matrix[node][other + 1 if other + 1 < len(distance_matrix) else 0])
            for other in range(len(distance_matrix))
        ) / len(distance_matrix)

        score = (destination_distance / distance) * (1 / (1 + distance_variance))
        if score > max_score:
            max_score = score
            next_node = node

    return next_node
