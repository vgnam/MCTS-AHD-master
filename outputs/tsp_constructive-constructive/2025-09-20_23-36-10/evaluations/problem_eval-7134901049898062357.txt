def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        if distance == 0:
            continue

        # Calculate hub potential: count of unvisited neighbors
        hub_potential = sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] > 0)

        # Dynamic weighting: balance progress toward destination and hub potential
        ratio = destination_distance / distance
        score = ratio * (1 + hub_potential * 0.1)  # Hub potential scaled by 0.1

        if score > max_score:
            max_score = score
            next_node = node
    return next_node
