def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    max_score = -float('inf')
    next_node = None
    hub_weight = 0.3  # Parameter to balance hub vs. ratio contribution

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Calculate hub factor: number of connections to unvisited nodes
        hub_factor = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)

        # Combine ratio and hub factor with dynamic weighting
        ratio = destination_distance / distance
        score = (1 - hub_weight) * ratio + hub_weight * hub_factor

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
