def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    remaining_nodes = len(unvisited_nodes) - 1
    for node in unvisited_nodes:
        if node == destination_node:
            continue
        distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        if distance == 0:
            continue

        # Dynamic priority factor based on remaining nodes
        priority_factor = (remaining_nodes / (remaining_nodes + 1)) if remaining_nodes > 0 else 1.0

        # Weighted combination of destination distance and current distance
        score = (priority_factor * destination_distance) - (0.5 * distance)
        if score > max_score:
            max_score = score
            next_node = node

    return next_node
