[
     {
          "algorithm": "The algorithm selects the next node by prioritizing the highest ratio of distance from the current node to the destination over the distance from the current node to the candidate node, balancing proximity and progress toward the destination. If ratios are equal, it chooses the node closer to the destination. The code efficiently handles edge cases (like zero distance) and ensures progress toward the goal while minimizing detours.",
          "thought": "The new algorithm prioritizes selecting the next node by considering not only the closest unvisited node to the current node but also the node that maximizes the ratio of distance to the destination over the distance from the current node, balancing proximity and progress toward the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_ratio = -float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_dest = distance_matrix[node][destination_node]\n        if distance_to_current == 0:\n            ratio = float('inf')  # Avoid division by zero (current node is the same)\n        else:\n            ratio = distance_to_dest / distance_to_current\n\n        if ratio > best_ratio:\n            best_ratio = ratio\n            next_node = node\n        elif ratio == best_ratio:\n            # If ratios are equal, choose the node closer to the destination\n            if distance_to_dest < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 6.66389,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing those with the smallest ratio of distance from the current node to the node, divided by the distance from the node to the destination. This ensures the path balances proximity to the current location while progressively aligning toward the destination, avoiding division by zero for the destination node.",
          "thought": "The new algorithm prioritizes nodes with the smallest ratio of distance to the current node divided by distance to the destination, ensuring a balance between proximity to the current node and alignment towards the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_ratio = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        if distance_matrix[node][destination_node] == 0:\n            continue  # Avoid division by zero if node is the destination\n\n        ratio = distance_matrix[current_node][node] / distance_matrix[node][destination_node]\n        if ratio < min_ratio:\n            min_ratio = ratio\n            next_node = node\n\n    return next_node",
          "objective": 6.89499,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines a greedy proximity heuristic with a penalty mechanism to balance local and global path considerations. It prioritizes selecting the nearest unvisited node unless it is too close to the destination (penalized by a factor of 1.3), ensuring a compromise between short-term optimality and avoiding premature convergence to the destination. The `penalty` parameter (default 1.3) adjusts the trade-off between local and global objectives.",
          "thought": "The new algorithm combines the greedy proximity selection of No.2 with a penalty mechanism from No.1 to avoid nodes that are too close to the destination prematurely, balancing local and global path considerations.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, penalty=1.3):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        score = distance\n        if distance_to_destination < distance_matrix[current_node][destination_node]:\n            score *= penalty\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 6.90842,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing the unvisited node closest to the current node from the distance matrix, and among nodes with equal minimal distance, it chooses the one closer to the destination. The function takes the current node, destination, unvisited nodes, and distance matrix as inputs, iterates through unvisited nodes to find the closest one, and handles ties by comparing distances to the destination. The code efficiently balances proximity to the current node and the destination, ensuring a heuristic path selection.",
          "thought": "The algorithm selects the next node by choosing the unvisited node closest to the current node from the distance matrix, prioritizing nodes that are closer to the destination if multiple nodes have the same minimal distance.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_distance = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        if distance < min_distance:\n            min_distance = distance\n            next_node = node\n        elif distance == min_distance:\n            # If distances are equal, choose the node closer to the destination\n            if distance_matrix[node][destination_node] < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing proximity to the current node and distance to the destination, with weights dynamically adjusted based on the number of remaining unvisited nodes. Early in the tour, it prioritizes nodes close to the current node, while later stages favor nodes closer to the destination. The selection criterion combines these distances with weights that decrease and increase, respectively, as more nodes are visited, ensuring a flexible trade-off between local and global optimization.",
          "thought": "The new algorithm modifies the selection criterion by incorporating a weighted combination of distance to the current node and distance to the destination, where the weight is dynamically adjusted based on the proportion of unvisited nodes remaining. This balances proximity to the current node and the destination more flexibly, favoring nodes that are closer to the current node early on and closer to the destination as more nodes are visited.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    weight_current = total_unvisited / (total_unvisited + 1)  # Decreases as more nodes are visited\n    weight_destination = 1 - weight_current\n\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n        combined_score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination)\n\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n        elif combined_score == min_score:\n            if distance_to_destination < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 7.15156,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node in TSP by dynamically balancing local (distance from current node) and global (distance to destination) considerations, using a weight that adjusts based on the remaining path length. It prioritizes nodes closer to the current node when the destination is far, and vice versa. The weight is computed as \\( 0.5 \\times (1 + \\frac{dest\\_dist}{current\\_dist + dest\\_dist + \\epsilon}) \\), ensuring a smooth transition between local and global optimization.",
          "thought": "The new algorithm modifies the selection criterion by incorporating a weighted combination of the distance to the current node and the distance to the destination, where weights are dynamically adjusted based on the remaining path length, promoting a balance between local and global optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    next_node = None\n    best_score = float('inf')\n\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n        weight = 0.5 * (1 + (dest_dist / (current_dist + dest_dist + 1e-6)))  # Dynamic weight\n        score = weight * current_dist + (1 - weight) * dest_dist\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n\n    return next_node",
          "objective": 7.17274,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing the distance to the current node (prioritized with weight `alpha`) and the distance to the destination node (prioritized with weight `1-alpha`). It penalizes nodes that are closer to the destination than the current node to avoid cycles, using a tunable `penalty` factor. The function returns the node with the lowest combined score, ensuring a trade-off between proximity to the current path and progress toward the destination.",
          "thought": "This new algorithm modifies the original by incorporating a weighted combination of distances to the current node and the destination node, using a tunable parameter to balance exploration and exploitation, and introduces a penalty for revisiting nodes to avoid cycles.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, alpha=0.7, penalty=1.5):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n\n        # Weighted score combining distance to current and destination\n        score = alpha * distance_to_current + (1 - alpha) * distance_to_destination\n\n        # Apply penalty if node was recently visited (simulated by higher penalty for nodes closer to destination)\n        if node in unvisited_nodes and distance_to_destination < distance_matrix[current_node][destination_node]:\n            score *= penalty\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 7.42574,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes selecting the next node by balancing the distance to the current node (weighted at 70%) and the distance to the destination (weighted at 30%), ensuring a trade-off between proximity and progress toward the goal. The function iterates through unvisited nodes, calculates a combined score, and selects the node with the lowest score, effectively guiding the path toward the destination while avoiding unnecessary detours.",
          "thought": "The new algorithm prioritizes selecting the next node by considering both the distance to the current node and a weighted combination of the distance to the current node and the distance to the destination, allowing for a more balanced path selection.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n    weight = 0.7  # Weight for distance to current node (higher weight = more emphasis on proximity)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n        combined_score = weight * distance_to_current + (1 - weight) * distance_to_destination\n\n        if combined_score < min_score:\n            min_score = combined_score\n            next_node = node\n\n    return next_node",
          "objective": 7.43323,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node in TSP by balancing proximity to the current node and distance to the destination, with a penalty factor (0.5) prioritizing closer destination nodes. It iteratively evaluates unvisited nodes using a weighted sum of their distance to the current node and a penalized distance to the destination, ensuring a trade-off between immediate and long-term path optimality. The structure efficiently handles node selection with a clear scoring mechanism, where the penalty factor adjusts the bias toward destination proximity.",
          "thought": "The new algorithm introduces a dynamic weighting mechanism that adjusts the selection criterion based on the proximity to the current node and the destination, incorporating a penalty factor for nodes far from the destination to balance exploration and exploitation, while the original algorithm only uses a simple tie-breaker.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    min_score = float('inf')\n    next_node = None\n    penalty_factor = 0.5  # Adjusts the influence of destination distance\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_destination = distance_matrix[node][destination_node]\n        score = distance_to_current + penalty_factor * distance_to_destination\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
          "objective": 7.45266,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node to visit by balancing proximity to the current node (higher weight early on) and progress toward the destination (higher weight later), using a dynamic weight adjustment that prioritizes distance to the current node when few nodes remain unvisited. The combined score is a weighted sum of these distances, with ties broken by preferring nodes closer to the destination.",
          "thought": "The new algorithm modifies the selection criterion by incorporating a weighted combination of the distance to the current node and the distance to the destination, using a tunable parameter to balance these factors, and dynamically adjusts the weights based on the remaining unvisited nodes to prioritize either proximity or progress toward the destination.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    best_score = float('inf')\n    next_node = None\n    remaining_nodes = len(unvisited_nodes)\n\n    for node in unvisited_nodes:\n        distance_to_current = distance_matrix[current_node][node]\n        distance_to_dest = distance_matrix[node][destination_node]\n\n        # Dynamic weight adjustment: prioritize distance to current node early, then balance\n        weight_current = 0.7 if remaining_nodes > 2 else 0.5\n        weight_dest = 1.0 - weight_current\n\n        # Combined score: weighted sum of distances\n        score = (weight_current * distance_to_current) + (weight_dest * distance_to_dest)\n\n        if score < best_score:\n            best_score = score\n            next_node = node\n        elif score == best_score:\n            # Tie-breaker: prefer node with lower distance to destination\n            if distance_to_dest < distance_matrix[next_node][destination_node]:\n                next_node = node\n\n    return next_node",
          "objective": 7.45881,
          "other_inf": null
     }
]