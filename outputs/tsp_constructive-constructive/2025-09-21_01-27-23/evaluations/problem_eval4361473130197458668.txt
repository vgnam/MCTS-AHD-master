def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = -float('inf')
    next_node = None

    # Calculate normalization factor based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    norm_factor = 1.0 / (remaining_nodes + 1) if remaining_nodes > 0 else 1.0

    for node in unvisited_nodes:
        # Weighted score: prioritize proximity to current node but consider destination distance
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        weighted_score = (1 - norm_factor) * distance_to_current - norm_factor * distance_to_dest

        if weighted_score > best_score:
            best_score = weighted_score
            next_node = node

    return next_node
