def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    # Calculate the progress ratio (0 to 1) based on remaining nodes
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_ratio = 1 - (remaining_nodes / total_nodes)

    # Dynamic weights: prioritize current distance early, balance later
    weight_current = 1 - progress_ratio
    weight_destination = progress_ratio

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Composite score combining weighted distances
        score = (weight_current * distance_to_current) + (weight_destination * distance_to_destination)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
