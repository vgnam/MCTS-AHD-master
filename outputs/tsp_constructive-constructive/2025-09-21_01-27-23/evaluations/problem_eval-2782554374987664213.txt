def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes) + 1  # +1 for the destination

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamically adjust weights: prioritize distance_to_current early, balance later
        weight_current = max(0.5, 1.0 - (remaining_nodes / 20))  # Decreases as remaining_nodes decreases
        weight_dest = 1.0 - weight_current

        score = (weight_current * distance_to_current) + (weight_dest * distance_to_dest)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
