def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Dynamic weight based on remaining unvisited nodes
        remaining_nodes = len(unvisited_nodes)
        weight = 0.5 + (0.5 * remaining_nodes / (remaining_nodes + 1))  # Adjusts between 0.5 and 1

        # Weighted score combining proximity and destination alignment
        score = (1 - weight) * distance_to_current + weight * distance_to_destination

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
