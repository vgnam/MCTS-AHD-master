def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    # Calculate adaptive weights based on the number of remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 / (1.0 + remaining_nodes)  # Prioritize current distance early
    weight_destination = 1.0 - weight_current       # Prioritize destination distance later

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Composite score: weighted sum of current distance and destination distance
        score = (weight_current * current_dist) + (weight_destination * dest_dist)

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
