def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    alpha = 0.7  # Weight for proximity to current node (higher = more greedy)

    for node in unvisited_nodes:
        # Weighted score: alpha * distance to current node + (1-alpha) * distance to destination
        score = alpha * distance_matrix[current_node][node] + (1 - alpha) * distance_matrix[node][destination_node]

        # Penalize nodes that are too close to the destination to encourage exploration
        if distance_matrix[node][destination_node] < 0.5 * distance_matrix[current_node][destination_node]:
            score *= 1.5

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
