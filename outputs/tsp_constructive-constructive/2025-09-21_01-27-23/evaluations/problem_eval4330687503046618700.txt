def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]

        # Dynamic weighting mechanism: balance current and destination distances
        weight = 0.7 if len(unvisited_nodes) > 3 else 0.3  # Higher weight for current distance in early stages
        score = weight * current_distance + (1 - weight) * destination_distance

        if score < best_score:
            best_score = score
            next_node = node
        elif score == best_score:
            # Tiebreaker: prefer node with higher total distance (encourages exploration)
            if (current_distance + destination_distance) > (distance_matrix[current_node][next_node] + distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
