def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.6  # Weight for current node distance (higher alpha prioritizes proximity)
    beta = 0.4   # Weight for destination distance (higher beta prioritizes destination proximity)

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        # Calculate weighted score combining current and destination distances
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        score = alpha * current_dist + beta * dest_dist

        # Adjust score by considering average distance to neighboring nodes
        neighbors = [n for n in unvisited_nodes if n != node]
        if neighbors:
            avg_neighbor_dist = sum(distance_matrix[node][n] for n in neighbors) / len(neighbors)
            score += 0.1 * avg_neighbor_dist  # Small weight for neighbor connectivity

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
