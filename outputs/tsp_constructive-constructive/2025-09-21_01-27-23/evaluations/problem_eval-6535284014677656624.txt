def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight adjustment: prioritize distance to current node
        weight_current = 0.7
        weight_dest = 0.3

        # Combined score: weighted sum of distances
        score = (weight_current * distance_to_current) + (weight_dest * distance_to_dest)

        if score < best_score:
            best_score = score
            next_node = node
        elif score == best_score:
            # Tie-breaker: prefer node with lower combined score
            if (weight_current * distance_to_current) + (weight_dest * distance_to_dest) < (weight_current * distance_matrix[current_node][next_node]) + (weight_dest * distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
