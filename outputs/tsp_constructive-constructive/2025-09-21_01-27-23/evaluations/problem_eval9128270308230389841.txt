def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.7  # Weight for current node distance (0-1)
    beta = 0.3   # Weight for destination distance (0-1)

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Calculate weighted score
        score = alpha * current_dist + beta * dest_dist

        # Secondary criterion: average distance of neighbors
        neighbor_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_neighbor_dist = sum(neighbor_distances) / len(neighbor_distances) if neighbor_distances else 0
        score += 0.1 * avg_neighbor_dist  # Small weight for neighbor diversity

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
