def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_score = float('inf')
    next_node = None
    current_to_dest = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Normalize distances to avoid bias from scale
        normalized_to_node = distance_to_node / (current_to_dest + 1e-9)
        normalized_to_dest = distance_to_dest / (current_to_dest + 1e-9)

        # Heuristic score: prioritize nodes closer to current and destination, with adjustment
        heuristic_adjustment = 0.3 * (1 / (normalized_to_node + 1e-9)) + 0.7 * (1 / (normalized_to_dest + 1e-9))
        score = normalized_to_node + normalized_to_dest - heuristic_adjustment

        if score < best_score:
            best_score = score
            next_node = node

    return next_node
