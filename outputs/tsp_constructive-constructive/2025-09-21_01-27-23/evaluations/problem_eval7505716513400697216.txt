def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    decay_factor = 0.7  # Weight for early-stage proximity (closer to 1 prioritizes proximity)
    alpha = 1.0 / (1 + decay_factor * len(unvisited_nodes))  # Dynamic weight for current node distance
    beta = 1.0 - alpha  # Dynamic weight for destination distance

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        destination_distance = distance_matrix[node][destination_node]
        combined_score = alpha * current_distance + beta * destination_distance

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
