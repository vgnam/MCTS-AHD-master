def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        # Adaptive weight: prioritize current distance more as the tour progresses
        weight = 0.5 + (0.5 * (total_unvisited / (total_unvisited + 1)))
        score = (weight * current_distance) + ((1 - weight) * dest_distance)

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            # If scores are equal, choose the node closer to the destination
            if dest_distance < distance_matrix[next_node][destination_node]:
                next_node = node

    return next_node
