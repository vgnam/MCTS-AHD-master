def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    alpha = 0.7  # Weighting factor for immediate distance (closer to 1 prioritizes immediate distance)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        score = alpha * immediate_distance + (1 - alpha) * future_distance

        if score < min_score:
            min_score = score
            next_node = node
        elif score == min_score:
            # If scores are equal, choose the node with better balance
            if (immediate_distance / future_distance) < (distance_matrix[current_node][next_node] / distance_matrix[next_node][destination_node]):
                next_node = node

    return next_node
