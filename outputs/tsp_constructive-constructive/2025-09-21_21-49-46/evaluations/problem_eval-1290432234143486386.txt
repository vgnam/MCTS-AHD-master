def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        weighted_angular = angular_progress * (1 + visited_ratio)
        score = weighted_angular - dist_current * (1 - visited_ratio)

        if node in [current_node, destination_node]:
            score *= 0.7

        if score > max_score:
            max_score = score
            next_node = node

    # Ensure destination is prioritized if it's unvisited and closer than the selected node
    if destination_node in unvisited_nodes:
        dest_dist_current = distance_matrix[current_node][destination_node]
        dest_dist_dest = distance_matrix[destination_node][destination_node]
        dest_angular_progress = 1.0 if dest_dist_current == 0 else dest_dist_dest / dest_dist_current
        dest_weighted_angular = dest_angular_progress * (1 + visited_ratio)
        dest_score = dest_weighted_angular - dest_dist_current * (1 - visited_ratio)
        dest_score *= 0.7 if destination_node in [current_node, destination_node] else 1.0

        if dest_score > max_score:
            next_node = destination_node

    return next_node
