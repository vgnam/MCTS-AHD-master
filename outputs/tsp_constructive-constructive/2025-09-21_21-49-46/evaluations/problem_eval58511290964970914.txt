def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)
    exploration_weight = 0.5 * (1 - (total_unvisited - len(unvisited_nodes)) / total_unvisited)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        normalized_distance = dist_current / max(distance_matrix[current_node])
        novelty_penalty = 1 - (len(unvisited_nodes) / total_unvisited)

        score = (0.6 * angular_progress - 0.4 * normalized_distance) * (1 + exploration_weight) * (1 - novelty_penalty)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
