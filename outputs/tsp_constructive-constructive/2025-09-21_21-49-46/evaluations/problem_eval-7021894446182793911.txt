def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_factor = 1.0 - (visited_ratio ** 2)

    candidates = []
    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        weighted_angular = angular_progress * exploration_factor
        novelty_score = (dist_current + dist_dest) / (1 + sum(distance_matrix[node]))
        score = (0.6 * weighted_angular) + (0.3 * novelty_score) - (0.1 * dist_current)

        if node in [current_node, destination_node]:
            score *= 0.5

        candidates.append((node, score))

    if not candidates:
        return destination_node

    candidates.sort(key=lambda x: x[1], reverse=True)
    top_candidates = [c for c in candidates if c[1] >= candidates[0][1] * 0.9]
    selected = random.choice(top_candidates) if top_candidates else candidates[0]
    return next_node
