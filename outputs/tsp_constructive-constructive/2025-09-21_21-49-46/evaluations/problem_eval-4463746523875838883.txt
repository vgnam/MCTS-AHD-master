def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    local_weight = 0.7 * (0.9 ** (remaining_nodes - 1))  # Exponential decay
    dest_weight = 0.3 * (1 - (0.9 ** (remaining_nodes - 1)))

    min_combined_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Penalty for nodes that were previously considered but not selected
        penalty = 0.1 if node in unvisited_nodes and node != next_node else 0
        combined_score = (local_weight * distance_to_current + dest_weight * distance_to_dest) * (1 + penalty)

        if combined_score < min_combined_score:
            min_combined_score = combined_score
            next_node = node

    return next_node
