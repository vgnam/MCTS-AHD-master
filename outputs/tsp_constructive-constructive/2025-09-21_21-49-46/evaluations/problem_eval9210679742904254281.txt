def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        if len(unvisited_nodes) > 1:
            avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        else:
            avg_dist = 0

        # Adaptive weighting based on remaining nodes
        weight_angular = 1.0 / (1.0 + len(unvisited_nodes))
        weight_avg = 0.5 * (1.0 + 1.0 / len(unvisited_nodes))

        score = angular_progress * weight_angular + weight_avg * avg_dist - 2 * dist_current

        # Local search: evaluate 2-opt swap potential
        if len(unvisited_nodes) > 2:
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    dist_swap = distance_matrix[current_node][neighbor] + distance_matrix[neighbor][node] + distance_matrix[node][destination_node]
                    dist_original = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
                    if dist_swap < dist_original:
                        score += 0.3 * (dist_original - dist_swap)  # Bonus for potential improvement

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
