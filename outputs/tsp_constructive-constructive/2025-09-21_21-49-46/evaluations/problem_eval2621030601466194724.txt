import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Dynamic weighting based on remaining nodes
        remaining_ratio = len(unvisited_nodes) / total_unvisited
        weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))  # Sigmoid transition

        # Penalty for revisiting nodes (if applicable)
        visit_penalty = 1.0 if node == current_node else 1.0

        score = (1 - weight) * dist_current + weight * (1 / angular_progress ** 2) * visit_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
