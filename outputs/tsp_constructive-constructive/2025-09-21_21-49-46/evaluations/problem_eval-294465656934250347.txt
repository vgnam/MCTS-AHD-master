default but dynamically checks if the destination node is sufficiently close (within 1.5 times the average distance to unvisited nodes) to potentially override the farthest neighbor selection, balancing distance and destination prioritization. The dynamic threshold (1.5 Ã— average distance) ensures flexibility, while the farthest neighbor rule provides global optimality. The algorithm efficiently handles edge cases (empty unvisited nodes) and leverages the distance matrix for real-time distance calculations.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    max_distance = -float('inf')
    next_node = None
    total_distance = 0
    count = 0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        total_distance += distance
        count += 1
        if distance > max_distance:
            max_distance = distance
            next_node = node

    average_distance = total_distance / count if count > 0 else float('inf')

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < average_distance * 1.5:  # Dynamic threshold
            next_node = destination_node

    return next_node
