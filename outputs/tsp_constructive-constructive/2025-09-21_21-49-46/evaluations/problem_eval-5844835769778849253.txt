def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Calculate dynamic weight factor based on remaining nodes and path length
    remaining_nodes = len(unvisited_nodes)
    path_length_so_far = sum(distance_matrix[current_node][destination_node] for _ in range(remaining_nodes))  # Approximation
    weight_factor = 0.5 + 0.4 * (remaining_nodes / (remaining_nodes + 1)) * (1 - min(1, path_length_so_far / sum(sum(row) for row in distance_matrix)))

    # Calculate node centrality (average distance to all other nodes)
    node_centrality = {}
    for node in unvisited_nodes:
        node_centrality[node] = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Novel component: centrality-based bonus (higher for central nodes)
        centrality_bonus = -0.2 * node_centrality[node]

        # Adaptive penalty based on both centrality and remaining nodes
        penalty = 0.3 * (node_centrality[node] * (1 - 0.1 * remaining_nodes))

        combined_score = distance_to_current + weight_factor * distance_to_dest + centrality_bonus + penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
