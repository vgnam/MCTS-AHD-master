importance when few nodes remain, while also adding a penalty for nodes that are too close to the current node to avoid tight loops.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
            weight = 0.3 * (1 + math.log(len(unvisited_nodes)))
            penalty = 0.5 if dist_current < min(distance_matrix[current_node][n] for n in unvisited_nodes if n != node) else 0
        else:
            avg_dist = 0
            weight = 1.0
            penalty = 0

        score = dist_current + dist_dest + weight * avg_dist + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
