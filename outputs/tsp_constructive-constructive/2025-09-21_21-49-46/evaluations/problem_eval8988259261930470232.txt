def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_angular = 1.0 - (0.2 * (total_unvisited / (total_unvisited + 3)))
    weight_distance = 0.2 + (0.3 * (total_unvisited / (total_unvisited + 3)))

    current_dest_dist = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        proximity_penalty = 1.0 / (1.0 + dist_current / current_dest_dist) if current_dest_dist > 0 else 0.0

        score = (weight_angular * angular_progress) - (weight_distance * dist_current) - (1.0 * proximity_penalty)

        if node in [current_node, destination_node]:
            score -= 10.0

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
