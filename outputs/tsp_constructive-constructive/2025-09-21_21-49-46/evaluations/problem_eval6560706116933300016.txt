def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    dist_total = distance_matrix[current_node][destination_node]
    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            progress_ratio = 1.0
        else:
            progress_ratio = dist_dest / dist_current

        # Dynamic weighting based on current progress
        progress_weight = 1 / (1 + math.exp(-(dist_total - dist_dest - dist_current) / 10))

        # Exponential penalty for long detours
        detour_penalty = math.exp((dist_current + dist_dest - dist_total) / 10)

        score = (1 - progress_weight) * dist_current + progress_weight * (dist_dest * detour_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
