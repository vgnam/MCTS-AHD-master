def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    progress_weight = 1.0 - (remaining_nodes / (remaining_nodes + 1))  # Decaying weight for centrality

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Calculate node centrality (inverse of average distance to all other nodes)
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality = 1.0 / centrality if centrality != 0 else float('inf')

        # Combined score: distance to current, distance to destination, and centrality
        score = (distance_to_current + distance_to_dest) + (centrality * progress_weight)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
