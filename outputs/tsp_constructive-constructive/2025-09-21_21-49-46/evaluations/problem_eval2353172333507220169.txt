def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_cost = float('inf')

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if node == destination_node:
            potential_cost = immediate_distance
        else:
            # Estimate remaining path cost: average distance to all unvisited nodes plus return to destination
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            if remaining_nodes:
                avg_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
                potential_cost = immediate_distance + avg_remaining_distance + distance_matrix[node][destination_node]
            else:
                potential_cost = immediate_distance + distance_matrix[node][destination_node]

        # Weighted cost: balance between immediate distance and potential path cost
        weighted_cost = 0.7 * immediate_distance + 0.3 * potential_cost

        if weighted_cost < min_cost:
            min_cost = weighted_cost
            next_node = node

    return next_node
