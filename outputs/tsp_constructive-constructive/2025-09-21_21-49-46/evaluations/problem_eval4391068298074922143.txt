def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    # Calculate average distance to destination for unvisited nodes
    avg_dest_dist = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Dynamic weight for angular progress based on remaining nodes
        weight = 0.3 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))

        # Penalty for nodes that are too far from the current node relative to average destination distance
        penalty = max(0, (dist_current - avg_dest_dist) / avg_dest_dist)

        score = dist_current + weight * (1 / angular_progress) + 0.5 * penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
