def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Dynamic weight adjustment using sigmoid function
        weight_angular = 0.5 + 0.2 / (1 + math.exp(-0.1 * (total_unvisited - len(unvisited_nodes))))

        # Penalty for revisiting nodes with high angular progress but low distance
        if dist_current < 0.1 * distance_matrix[current_node][destination_node]:
            angular_progress *= 0.8

        score = weight_angular * angular_progress - (1 - weight_angular) * dist_current

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
