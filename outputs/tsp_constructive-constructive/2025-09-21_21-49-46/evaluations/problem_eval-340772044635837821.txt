def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_momentum = 1.0
        else:
            angular_momentum = dist_dest / dist_current

        normalized_distance = dist_current / max(distance_matrix[current_node])
        proximity_bonus = 1 / (1 + normalized_distance)
        angular_progress = angular_momentum * proximity_bonus

        exploration_factor = 0.5 * (total_unvisited / (total_unvisited + 1))
        cycle_penalty = 0.1 if node in unvisited_nodes else 0.0

        score = (0.6 * angular_progress + 0.4 * proximity_bonus) * (1 + exploration_factor) - cycle_penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
