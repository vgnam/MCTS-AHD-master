import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    temperature = math.exp(-5 * visited_ratio)  # Dynamic temperature
    destination_urgency = 1.0 + 0.5 * (1.0 - visited_ratio)  # Urgency increases as progress is made

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        novelty_bonus = (1.0 / (1.0 + dist_current)) * temperature
        distance_penalty = dist_current * (0.1 + 0.1 * (1.0 - temperature))

        # Sigmoid-based balance between novelty and distance
        sigmoid = 1.0 / (1.0 + math.exp(-5 * (temperature - 0.5)))
        balanced_score = (1.0 - sigmoid) * novelty_bonus + sigmoid * (-distance_penalty)

        score = angular_progress + balanced_score

        if node == destination_node:
            score *= destination_urgency

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
