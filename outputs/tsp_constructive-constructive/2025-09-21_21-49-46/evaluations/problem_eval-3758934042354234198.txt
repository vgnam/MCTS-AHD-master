def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for the current node
    exploration_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    # Simulated historical visit counts (placeholder for actual data)
    visit_counts = {node: 1 for node in unvisited_nodes}
    if current_node in visit_counts:
        visit_counts[current_node] += 1

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Novelty factor: inverse of visit count
        novelty = 1 / visit_counts[node]

        # Dynamic weights
        weighted_angular = angular_progress * exploration_ratio
        weighted_novelty = novelty * (1 - exploration_ratio)

        # Score combines angular progress, distance, and novelty
        score = (weighted_angular + weighted_novelty) - dist_current

        # Penalty for revisits
        if node in [current_node, destination_node]:
            score *= 0.6

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
