def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    remaining_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Dynamic angular progress factor based on remaining path length
        dynamic_factor = (1 - visited_ratio) * (remaining_path_length / total_nodes)
        weighted_angular = angular_progress * dynamic_factor

        # Novelty score based on node centrality (inverse of average distance to unvisited nodes)
        centrality = 1 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)) if unvisited_nodes else 1

        # Historical visit frequency (simulated as 1 - visited_ratio for simplicity)
        visit_frequency = 1 - visited_ratio

        # Combine novelty and distance cost
        novelty_score = centrality * visit_frequency
        score = weighted_angular + novelty_score - dist_current * (0.5 + visited_ratio)

        # Penalty for revisiting nodes
        if node in [current_node, destination_node]:
            score *= 0.6

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
