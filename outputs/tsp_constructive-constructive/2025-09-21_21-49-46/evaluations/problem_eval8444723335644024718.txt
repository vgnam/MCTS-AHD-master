def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate probabilities for each unvisited node
    distances = []
    total_weight = 0.0
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weight = 1.0 / (distance + 1e-10)  # Avoid division by zero
        distances.append((node, distance, weight))
        total_weight += weight

    # Select a node based on weighted probability
    if total_weight > 0:
        rand_val = random.random() * total_weight
        cumulative = 0.0
        for node, distance, weight in distances:
            cumulative += weight
            if rand_val <= cumulative:
                next_node = node
                break
    else:
        next_node = unvisited_nodes[0]  # Fallback if weights are zero

    # Prioritize destination_node if it's unvisited and closer than the nearest node
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min(distance_matrix[current_node][node] for node in unvisited_nodes):
            next_node = destination_node

    return next_node
