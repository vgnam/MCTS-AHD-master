def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_unvisited = len(unvisited_nodes)
    exploration_decay = 0.1 * (1 - (total_unvisited - len(unvisited_nodes)) / total_unvisited)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_momentum = 1.0
        else:
            angular_momentum = (dist_dest / dist_current) ** 2

        temperature = 1.0 / (1.0 + exploration_decay)
        score = (0.5 * dist_current + 0.5 * dist_dest) * (1 - 0.3 * angular_momentum) * temperature
        scores.append((score, node))

    if not scores:
        return random.choice(unvisited_nodes)

    min_score = min(score for score, _ in scores)
    normalized_scores = [(min_score / (score + 1e-10), node) for score, node in scores]
    total = sum(normalized for normalized, _ in normalized_scores)
    probabilities = [(normalized / total, node) for normalized, node in normalized_scores]

    rand_val = random.random()
    cumulative = 0.0
    for prob, node in probabilities:
        cumulative += prob
        if rand_val <= cumulative:
            return node

    return next_node
