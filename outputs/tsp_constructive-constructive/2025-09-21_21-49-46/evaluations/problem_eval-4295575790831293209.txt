def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]
        angular_momentum = dist_dest / dist_current if dist_current != 0 else 1.0

        # Dynamic weighting factor based on node density and angular momentum
        weight = (1.0 - (total_unvisited / (total_unvisited + 1))) * angular_momentum
        score = dist_current * (1.0 + weight * (dist_dest / (dist_current + 1e-6)))

        if score < min_score:
            min_score = score
            next_node = node

    # Priority to destination if it's unvisited and significantly closer
    if destination_node in unvisited_nodes:
        dest_dist = distance_matrix[current_node][destination_node]
        if dest_dist < min_score * 0.7:  # Threshold for destination priority
            next_node = destination_node

    return next_node
