def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        dynamic_weight = 0.3 + 0.7 * (remaining_distance / max([distance_matrix[current_node][n] for n in unvisited_nodes] + [1e-6]))

        penalty = 0.0
        if 'previously_considered' in locals() and node in previously_considered:
            penalty = 0.2 * (1.0 - (dist_current / sum(distance_matrix[current_node][n] for n in unvisited_nodes)))

        score = dist_current + dist_dest - dynamic_weight * angular_progress + penalty

        if score < min_score:
            min_score = score
            next_node = node

    previously_considered = unvisited_nodes.copy()
    return next_node
