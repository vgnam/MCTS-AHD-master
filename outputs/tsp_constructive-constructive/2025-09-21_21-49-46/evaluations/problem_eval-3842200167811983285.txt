import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Visibility factor: angular progress normalized by distance
        visibility = angular_progress / (1 + dist_current)

        # Power-law weighting to emphasize high-visibility nodes
        weight = math.pow(visibility, 2)  # Squared to amplify differences
        score = (angular_progress * weight) - (dist_current * (1 - weight))

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
