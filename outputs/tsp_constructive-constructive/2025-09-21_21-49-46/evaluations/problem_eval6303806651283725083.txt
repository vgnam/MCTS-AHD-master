def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate centrality for each node (average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Weighted score: distance (70%) + centrality (30%)
    scores = {}
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        scores[node] = 0.7 * distance + 0.3 * centrality[node]

    # Find the node with the minimum weighted score
    next_node = min(unvisited_nodes, key=lambda node: scores[node])

    # Prioritize destination if it's unvisited and closer than the nearest node
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < distance_matrix[current_node][next_node]:
            next_node = destination_node

    return next_node
