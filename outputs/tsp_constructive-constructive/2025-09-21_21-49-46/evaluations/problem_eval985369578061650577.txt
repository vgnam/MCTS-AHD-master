def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    progress_weight = 1.0 + (remaining_nodes / (remaining_nodes + 1))  # Adjusts between 1.0 and 2.0

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        avg_distance_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / max(1, len(unvisited_nodes) - 1)
        penalty = 0.25 * avg_distance_to_remaining

        score = (dist_current + (1.0 - angular_progress) * dist_dest) * progress_weight + penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
