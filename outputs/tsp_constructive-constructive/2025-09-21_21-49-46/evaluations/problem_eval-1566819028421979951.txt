def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        if total_unvisited > 1:
            avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (total_unvisited - 1)
        else:
            avg_dist = 0

        # Dynamic weight adjustment
        weight_factor = 1.0 / (1.0 + 0.1 * total_unvisited)
        normalized_avg_dist = avg_dist / (1.0 + 0.5 * dist_current)

        score = (angular_progress * 1.5) - (dist_current * weight_factor) - (normalized_avg_dist * 0.3)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
