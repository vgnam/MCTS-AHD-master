def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)
    weight_angular = 0.5 * (1 - (total_unvisited / (total_unvisited + 2)))
    weight_distance = 0.8 - (0.4 * (total_unvisited / (total_unvisited + 1)))
    weight_avg = 0.3 * (1 - (total_unvisited / (total_unvisited + 1)))

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        if len(unvisited_nodes) > 1:
            avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
        else:
            avg_dist = 0

        score = weight_angular * angular_progress + weight_avg * avg_dist - weight_distance * dist_current

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
