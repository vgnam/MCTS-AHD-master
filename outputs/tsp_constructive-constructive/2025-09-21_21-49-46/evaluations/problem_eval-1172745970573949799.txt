def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1.0 - visited_ratio

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Novelty bonus: rewards less frequently visited nodes and high local connectivity
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < dist_current * 1.2)
        novelty_bonus = (1.0 / (1.0 + dist_current)) * exploration_weight * (1.0 + local_density * 0.1)

        # Dynamic score combining angular progress, distance, and novelty
        score = (angular_progress * 0.5) - (dist_current * 0.3) + novelty_bonus

        # Stronger penalty for revisiting nodes
        if node in [current_node, destination_node]:
            score *= 0.5

        # Local search: consider 2-hop neighbors for better connectivity
        if len(unvisited_nodes) > 2:
            for neighbor in unvisited_nodes:
                if neighbor != node and distance_matrix[node][neighbor] < dist_current * 1.5:
                    score += 0.1 * (angular_progress * 0.5 - distance_matrix[node][neighbor] * 0.3)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
