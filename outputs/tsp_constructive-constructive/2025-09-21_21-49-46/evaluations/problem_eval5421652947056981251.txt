def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Dynamic weighting based on path efficiency
        weight_angular = 0.8 if total_unvisited > len(unvisited_nodes) / 2 else 0.6
        weight_distance = 1 - weight_angular

        # Penalty for revisiting nodes (not in original)
        revisit_penalty = 0.1 if node in unvisited_nodes and len(unvisited_nodes) < total_unvisited else 0

        # Aggressive detour penalty
        detour_penalty = 0.5 if dist_current > 1.5 * distance_matrix[current_node][destination_node] else 0

        score = (weight_angular * angular_progress) - (weight_distance * dist_current) - revisit_penalty - detour_penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
