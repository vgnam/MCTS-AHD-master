def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = float('-inf')
    exploration_factor = min(1.0, 0.3 + 0.7 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            visit_probability = exploration_factor * (1 / (1 + distance_to_current)) + (1 - exploration_factor) * (1 / (1 + distance_to_dest))
            combined_score = visit_probability - 0.4 * (min_remaining_dist / max(distance_matrix[node]))
        else:
            combined_score = 1 / (1 + distance_to_current + distance_to_dest)

        if combined_score > best_score:
            best_score = combined_score
            next_node = node

    return next_node
