def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    # Calculate current progress toward destination
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    if total_distance == 0:
        progress_ratio = 1.0
    else:
        progress_ratio = distance_matrix[current_node][destination_node] / total_distance

    # Dynamic weight adjustment using sigmoid function
    weight_angular = 1 / (1 + math.exp(-10 * (progress_ratio - 0.5)))
    weight_distance = 1 - weight_angular

    # Precompute node centrality (average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Exploration bonus: prefer less central nodes
        exploration_bonus = 1 / (1 + centrality[node])

        score = (weight_angular * angular_progress * exploration_bonus) - (weight_distance * dist_current)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
