def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    exploration_factor = 0.3  # Fixed exploration factor

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Fixed weight for angular progress
        weighted_angular = angular_progress * 0.5
        score = weighted_angular - (dist_current * 0.7)

        # Dynamic penalty for revisits
        if node in [current_node, destination_node]:
            score *= (1 - exploration_factor)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
