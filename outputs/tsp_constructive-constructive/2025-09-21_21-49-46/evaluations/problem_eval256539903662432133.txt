def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    # Sigmoid-based weight adjustment
    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    weight_factor = sigmoid(10 * (remaining_ratio - 0.5))

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Penalize nodes that are too far from the current path
        detour_penalty = distance_to_current + distance_to_dest - distance_matrix[current_node][destination_node]
        detour_penalty = max(0, detour_penalty)  # Ensure non-negative

        combined_score = (1 - weight_factor) * distance_to_current + weight_factor * distance_to_dest + detour_penalty

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    return next_node
