def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        normalized_distance = dist_current / max(distance_matrix[current_node])
        centrality = sum(distance_matrix[node]) / len(distance_matrix[node])
        exploration_urgency = 1 - (total_unvisited / (total_unvisited + 1))

        score = (0.6 * angular_progress - 0.4 * normalized_distance) * (1 + 0.5 * centrality) * (1 + exploration_urgency)
        scores.append((node, score))

    if not scores:
        return random.choice(unvisited_nodes)

    max_score = max(score for _, score in scores)
    candidates = [node for node, score in scores if score >= 0.9 * max_score]
    return next_node
