def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    visit_history = {node: 0 for node in unvisited_nodes}
    decay_factor = 0.7

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weighted_score = distance * (1 + decay_factor * visit_history[node])
        if weighted_score < min_distance:
            min_distance = weighted_score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_distance:
            next_node = destination_node

    visit_history[next_node] = visit_history.get(next_node, 0) + 1
    return next_node
