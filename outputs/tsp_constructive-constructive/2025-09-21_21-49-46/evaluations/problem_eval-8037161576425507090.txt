def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    nodes = list(unvisited_nodes)
    exploration_factor = max(0.1, 1.0 - 0.9 * (len(unvisited_nodes) / len(unvisited_nodes + {current_node})))

    for node in nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            detour_risk = (distance_to_current + distance_to_dest) / sum(distance_matrix[current_node][n] for n in unvisited_nodes)
            dynamic_weight = 0.5 + 0.5 * (len(remaining_nodes) / len(unvisited_nodes))
            combined_score = distance_to_current + dynamic_weight * distance_to_dest + 0.4 * avg_remaining_dist + exploration_factor * detour_risk
        else:
            combined_score = distance_to_current + distance_to_dest

        scores.append(combined_score)

    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]
    probabilities = [s / sum(normalized_scores) for s in normalized_scores]
    next_node = np.random.choice(nodes, p=probabilities)

    return next_node
