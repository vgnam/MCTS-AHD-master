def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    progress_penalty = 1.0 + (remaining_nodes / (remaining_nodes + 1))  # Dynamic penalty based on remaining nodes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        if distance_to_current == 0:
            score = float('inf')
        else:
            # Combine proximity, destination alignment, and progress penalty
            score = (distance_to_current + distance_to_dest) * progress_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
