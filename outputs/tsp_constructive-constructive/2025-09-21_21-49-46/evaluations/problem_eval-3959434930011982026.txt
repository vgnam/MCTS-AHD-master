def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    node_density = len(unvisited_nodes) / (total_nodes ** 2)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]
        dist_total = dist_current + dist_dest

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = (dist_dest / dist_current) * (1 - node_density)

        weighted_angular = angular_progress * (visited_ratio ** 3)
        density_penalty = 1 - (node_density * 0.7)
        score = weighted_angular * density_penalty - (dist_current * 1.2)

        if node in [current_node, destination_node]:
            score *= 0.3
        elif node in unvisited_nodes and distance_matrix[node][node] > 0:
            score *= 0.8

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
