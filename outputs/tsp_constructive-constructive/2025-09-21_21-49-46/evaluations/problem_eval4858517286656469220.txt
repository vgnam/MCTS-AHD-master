importance as more nodes are visited, while also incorporating a penalty for revisiting nodes to encourage exploration.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)
    progress_factor = (total_unvisited / (total_unvisited + 1)) ** 2
    weight_angular = 0.8 - 0.5 * progress_factor
    weight_distance = 1.0 - weight_angular

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        score = weight_angular * angular_progress - weight_distance * dist_current

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
