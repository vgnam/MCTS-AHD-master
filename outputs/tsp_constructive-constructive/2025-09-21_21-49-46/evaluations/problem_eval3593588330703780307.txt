def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    best_score = -float('inf')

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]
        angular_momentum = dist_dest / dist_current if dist_current != 0 else 1.0

        # Normalize and weight components
        norm_dist = dist_current / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-10)
        norm_angular = angular_momentum / (sum(dist_dest / (distance_matrix[current_node][n] + 1e-10) for n in unvisited_nodes) + 1e-10)
        score = 0.6 * (1 - norm_dist) + 0.4 * (1 - norm_angular)  # Weighted sum

        if score > best_score:
            best_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < min_distance:
            next_node = destination_node

    return next_node
