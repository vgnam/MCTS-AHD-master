import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        visibility = angular_progress / (1 + dist_current)
        weight = math.pow(visibility, 2)
        score = (dist_current * (1 - weight)) + (angular_progress * weight)

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        dest_dist = distance_matrix[current_node][destination_node]
        dest_angular = 1.0 if dest_dist == 0 else 1.0 / dest_dist
        dest_visibility = dest_angular / (1 + dest_dist)
        dest_weight = math.pow(dest_visibility, 2)
        dest_score = (dest_dist * (1 - dest_weight)) + (dest_angular * dest_weight)

        if dest_score < min_score:
            next_node = destination_node

    return next_node
