def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_distance = float('inf')
    next_node = None
    total_distance = 0
    count = 0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        total_distance += distance
        count += 1
        if distance < min_distance:
            min_distance = distance
            next_node = node

    average_distance = total_distance / count if count > 0 else float('inf')

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        if destination_distance < average_distance * 1.2:
            next_node = destination_node

    if next_node is not None:
        dist_current = distance_matrix[current_node][next_node]
        dist_dest = distance_matrix[next_node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        normalized_distance = dist_current / max(distance_matrix[current_node])
        exploration_weight = 0.6 * (1 - (len(unvisited_nodes) - 1) / len(unvisited_nodes))
        balance_factor = 0.5 + 0.5 * (1 - exploration_weight)
        score = (0.6 * angular_progress - 0.4 * normalized_distance) * (1 + exploration_weight) * balance_factor

        if score > 0:
            next_node = next_node
        else:
            next_node = next_node

    return next_node
