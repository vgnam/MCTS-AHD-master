def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    exploration_weight = 1.0 - visited_ratio

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        novelty_bonus = (1.0 / (1.0 + dist_current)) * exploration_weight
        score = (0.5 * dist_current + 0.3 * dist_dest) + (0.2 * angular_progress) + novelty_bonus

        if node in [current_node, destination_node]:
            score *= 1.5

        if score < min_score:
            min_score = score
            next_node = node

    if destination_node in unvisited_nodes:
        destination_score = (0.5 * distance_matrix[current_node][destination_node] + 0.3 * 0) + (0.2 * 1.0) + (1.0 / (1.0 + distance_matrix[current_node][destination_node]) * exploration_weight)
        if destination_score < min_score:
            next_node = destination_node

    return next_node
