def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Calculate node centrality penalty (average distance to all other nodes)
        node_distances = [distance_matrix[node][other] for other in range(len(distance_matrix)) if other != node]
        centrality_penalty = sum(node_distances) / len(node_distances) if node_distances else 0

        # Calculate tour contribution (difference in total tour distance if node is chosen)
        tour_contribution = dist_current + dist_dest - distance_matrix[current_node][destination_node]

        # Score combines angular progress, tour contribution, and centrality penalty
        score = (angular_progress * 0.7) - (tour_contribution * 0.2) - (centrality_penalty * 0.1)

        if node in [current_node, destination_node]:
            score -= 10.0

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
