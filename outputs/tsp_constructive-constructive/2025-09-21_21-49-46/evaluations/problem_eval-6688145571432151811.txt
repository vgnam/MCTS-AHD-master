def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        normalized_distance = dist_current / max(distance_matrix[current_node])

        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (total_unvisited - 1) if total_unvisited > 1 else 0
        normalized_centrality = centrality / max(distance_matrix[node]) if max(distance_matrix[node]) > 0 else 0

        exploration_factor = 0.7 * (1 - (total_unvisited - len(unvisited_nodes)) / total_unvisited)
        exploitation_factor = 0.4 * normalized_centrality

        progress_weight = 0.6 + 0.4 * (1 - exploration_factor)
        distance_weight = 0.4 - 0.2 * (1 - exploration_factor)

        score = (progress_weight * (angular_progress ** 2) - distance_weight * (normalized_distance ** 1.5)) * (1 + exploration_factor) * (1 + exploitation_factor)

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
