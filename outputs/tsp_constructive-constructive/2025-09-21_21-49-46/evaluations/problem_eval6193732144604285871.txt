def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1  # +1 for current_node
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        # Dynamic weighting: favor angular progress when few nodes left, distance when many
        weight_angular = 0.7 if remaining_ratio < 0.3 else 0.5
        weight_dist = 1 - weight_angular

        # Penalize revisiting nodes with high angular progress
        penalty = 0.2 * angular_progress if dist_current < 0.5 * distance_matrix[current_node][destination_node] else 0

        score = (weight_angular * angular_progress) - (weight_dist * dist_current) - penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
