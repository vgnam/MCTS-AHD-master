def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    best_score = -float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        avg_dist_to_others = sum(distance_matrix[node]) / (total_nodes - 1)
        node_potential = 1 / (1 + avg_dist_to_others)

        weighted_angular = angular_progress * (0.7 - 0.3 * visited_ratio)
        weighted_distance = dist_current * (0.3 + 0.3 * visited_ratio)
        weighted_potential = node_potential * (0.2 + 0.6 * visited_ratio)

        score = (weighted_angular + weighted_potential) - weighted_distance

        if node in [current_node, destination_node]:
            score *= (0.5 - 0.4 * visited_ratio)

        if score > best_score:
            best_score = score
            next_node = node

    return next_node
