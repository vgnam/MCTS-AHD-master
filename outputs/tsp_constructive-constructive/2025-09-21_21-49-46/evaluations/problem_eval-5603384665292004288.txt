def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    best_node = None
    best_score = float('-inf')

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        value = 1 / (distance_matrix[node][destination_node] + 1e-10)  # Avoid division by zero
        score = -distance + 0.5 * value  # Weighted combination of distance and value

        if score > best_score:
            best_score = score
            best_node = node

    # Prioritize destination_node if it's unvisited and closer than the nearest node
    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        destination_value = 1 / (distance_matrix[destination_node][destination_node] + 1e-10)
        destination_score = -destination_distance + 0.5 * destination_value

        if destination_score > best_score:
            best_node = destination_node

    return next_node
