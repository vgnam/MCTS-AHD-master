def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    max_score = -float('inf')
    total_nodes = len(distance_matrix)
    remaining_unvisited = len(unvisited_nodes)

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        centrality = sum(distance_matrix[node][other] for other in range(total_nodes)) / total_nodes

        dynamic_angular_weight = 1.0 + (remaining_unvisited / total_nodes)

        penalty = 0.5 if node in unvisited_nodes and distance_matrix[current_node][node] > sum(distance_matrix[current_node][other] for other in unvisited_nodes) / len(unvisited_nodes) else 0

        score = dynamic_angular_weight * angular_progress - dist_current - 0.3 * centrality + penalty

        if score > max_score:
            max_score = score
            next_node = node

    return next_node
