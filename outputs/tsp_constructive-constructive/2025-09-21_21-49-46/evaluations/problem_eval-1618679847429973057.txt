def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes

    selection_frequency = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        if node in selection_frequency:
            selection_frequency[node] += 1

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        exploration_weight = 0.3 * (1 - (total_nodes - len(unvisited_nodes)) / total_nodes)
        non_linear_weight = (1 + visited_ratio) ** 2
        penalty = 1 - (0.1 * selection_frequency.get(node, 0))

        score = (0.6 * dist_current + 0.4 * dist_dest) * (1 + exploration_weight) * non_linear_weight * penalty - 0.2 * angular_progress

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
