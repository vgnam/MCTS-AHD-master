def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    total_unvisited = len(unvisited_nodes)
    remaining_ratio = len(unvisited_nodes) / total_unvisited

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        exploration_weight = 1 / (1 + math.exp(-10 * (remaining_ratio - 0.5)))
        angular_momentum = angular_progress * (1 + 0.5 * (1 - remaining_ratio))

        turn_penalty = 1 / (1 + math.exp(-5 * (angular_progress - 1)))
        score = (0.5 * dist_current + 0.5 * dist_dest) * (1 + 2 * exploration_weight) - 0.3 * angular_momentum + 0.1 * turn_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
