def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    dest_weight = 1.0 + (1.0 / (remaining_nodes + 1))

    for node in unvisited_nodes:
        dist_current = distance_matrix[current_node][node]
        dist_dest = distance_matrix[node][destination_node]

        if dist_current == 0:
            angular_progress = 1.0
        else:
            angular_progress = dist_dest / dist_current

        combined_score = dist_current + dest_weight * (1.0 - angular_progress)

        if combined_score < min_score:
            min_score = combined_score
            next_node = node

    # Prioritize destination_node if it's unvisited and closer than the nearest node
    if destination_node in unvisited_nodes:
        dist_dest = distance_matrix[current_node][destination_node]
        if dist_dest == 0:
            angular_progress = 1.0
        else:
            angular_progress = distance_matrix[next_node][destination_node] / dist_dest

        combined_score = dist_dest + dest_weight * (1.0 - angular_progress)

        if combined_score < min_score:
            next_node = destination_node

    return next_node
