import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    distance_to_destination = distance_matrix[current_node][destination_node]

    # Dynamic probability based on distance to destination
    if distance_to_destination < 5:  # Threshold for proximity
        prob_proximity = 0.95
    else:
        prob_proximity = 0.7

    if random.random() < prob_proximity:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    elif random.random() < 0.2:  # 20% chance to pick a random node
        next_node = random.choice(nearest_neighbors)
    else:
        # Select a node with a higher chance of being closer to destination
        weighted_nodes = []
        for node in unvisited_nodes:
            weight = math.exp(-distance_matrix[node][destination_node] / 10)  # Higher weight for closer nodes
            weighted_nodes.extend([node] * int(weight * 100))
        if weighted_nodes:
            next_node = random.choice(weighted_nodes)
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
