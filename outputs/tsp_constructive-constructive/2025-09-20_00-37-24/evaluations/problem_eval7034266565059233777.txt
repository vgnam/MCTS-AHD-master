import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate a dynamic probability based on current path quality
    if nearest_neighbors:
        avg_neighbor_distance = sum(distance_matrix[current_node][node] for node in nearest_neighbors[:3]) / min(3, len(nearest_neighbors))
        current_path_length = sum(distance_matrix[current_node][node] for node in nearest_neighbors[:1]) if nearest_neighbors else 0
        exploration_prob = 1 / (1 + math.exp(-(current_path_length - avg_neighbor_distance)))

        if random.random() < exploration_prob:
            candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
            next_node = random.choice(candidates)
        else:
            next_node = random.choice(nearest_neighbors)
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
