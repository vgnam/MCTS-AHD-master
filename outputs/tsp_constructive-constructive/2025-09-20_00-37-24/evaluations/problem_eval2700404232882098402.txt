def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if len(nearest_neighbors) >= 2:
        nearest_dist = distance_matrix[current_node][nearest_neighbors[0]]
        second_nearest_dist = distance_matrix[current_node][nearest_neighbors[1]]
        dist_ratio = second_nearest_dist / nearest_dist if nearest_dist != 0 else 1.0

        # Adjust probability based on distance ratio
        if dist_ratio < 1.5:  # If nearest and second-nearest are very close
            prob = 0.6  # Higher chance to pick randomly
        else:
            prob = 0.9  # Default probability

        if random.random() < prob:
            candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
            next_node = random.choice(candidates)
        else:
            next_node = random.choice(nearest_neighbors)
    else:
        next_node = nearest_neighbors[0]

    return next_node
