import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive selection pressure: higher probability to pick from top k neighbors as unvisited nodes decrease
    remaining_nodes = len(unvisited_nodes)
    max_k = min(5, len(nearest_neighbors))
    k = max(1, max_k - int(remaining_nodes * 0.2))  # Reduce k as tour progresses

    # Dynamic exploration: introduce higher randomness when tour is partially complete
    exploration_prob = 0.2 + (0.8 * (1 - (remaining_nodes / len(distance_matrix))))

    if random.random() < (1 - exploration_prob):  # Higher chance to pick from top k
        candidates = nearest_neighbors[:k]
        next_node = random.choice(candidates)
    else:  # Explore more distant nodes with probability
        distant_nodes = nearest_neighbors[k:]
        if distant_nodes:
            next_node = random.choice(distant_nodes)
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
