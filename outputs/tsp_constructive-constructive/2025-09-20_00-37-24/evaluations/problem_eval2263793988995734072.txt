def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    temperature = len(unvisited_nodes) / (len(distance_matrix) + 1)  # Decreases as more nodes are visited
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate selection probabilities based on distance and destination connectivity
    probabilities = []
    for node in nearest_neighbors:
        distance_factor = 1 / (1 + distance_matrix[current_node][node])
        destination_factor = 1 / (1 + distance_matrix[node][destination_node]) if destination_node in unvisited_nodes else 1
        probabilities.append(distance_factor * destination_factor * temperature)

    # Normalize probabilities
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    # Select node based on probabilities
    next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    return next_node
