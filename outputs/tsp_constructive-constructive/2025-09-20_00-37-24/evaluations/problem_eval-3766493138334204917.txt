import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Dynamic bias towards destination as more nodes are visited
        bias = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
        if random.random() < bias:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive selection: bias towards nearest neighbors but allow occasional exploration
    if random.random() < 0.8:  # 80% chance to pick from top 2 nearest
        candidates = nearest_neighbors[:min(2, len(nearest_neighbors))]
    else:  # 20% chance to pick from a broader range
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]

    next_node = random.choice(candidates)
    return next_node
