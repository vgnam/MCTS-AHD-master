import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_threshold = max(0.1, 0.5 * (remaining_nodes / total_nodes))

    # Weighted selection: prioritize near nodes but allow exploration
    weights = [1.0 / (1.0 + i) for i in range(len(nearest_neighbors))]
    normalized_weights = [w / sum(weights) for w in weights]

    if random.random() < exploration_threshold:
        next_node = random.choices(nearest_neighbors, weights=normalized_weights, k=1)[0]
    else:
        next_node = random.choice(nearest_neighbors[:min(3, len(nearest_neighbors))])

    return next_node
