import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Dynamic exploration probability based on remaining nodes
    exploration_prob = 0.1 + 0.9 * (len(unvisited_nodes) / len(distance_matrix))

    # Temperature-based selection: closer nodes have exponentially higher probabilities
    def selection_probability(node):
        distance = distance_matrix[current_node][node]
        temperature = len(unvisited_nodes) / len(distance_matrix)
        return math.exp(-distance / temperature)

    # Assign probabilities and select
    probabilities = [selection_probability(node) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    if random.random() < (1 - exploration_prob):
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:
        # Explore broader neighborhood
        k = min(5, len(unvisited_nodes))
        candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:k]
        next_node = random.choice(candidates)

    return next_node
