def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = {node: distance_matrix[current_node][node] for node in unvisited_nodes}
    nearest_neighbors = sorted(distances.keys(), key=lambda node: distances[node])

    if random.random() < 0.7:  # 70% chance to pick from top 3 nearest
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # 30% chance to pick based on inverse distance probability
        weights = [1 / (1 + distances[node]) for node in unvisited_nodes]
        next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]

    return next_node
