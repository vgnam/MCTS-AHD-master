import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Calculate adaptive exploration probability based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    exploration_prob = min(0.9, 0.1 + (0.8 * (remaining_nodes / (remaining_nodes + 1))))

    # Dynamic bias towards destination node
    if destination_node in unvisited_nodes:
        if random.random() < 0.7:  # 70% chance to prioritize destination
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate node selection weights (inverse of distance)
    weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]

    # Apply stochastic selection with adaptive neighborhood size
    neighborhood_size = min(3, max(1, int(len(nearest_neighbors) * 0.5)))
    if random.random() < exploration_prob:
        candidates = nearest_neighbors[:neighborhood_size]
        selected_index = random.choices(range(len(candidates)), weights=weights[:neighborhood_size])[0]
        next_node = candidates[selected_index]
    else:
        next_node = random.choices(nearest_neighbors, weights=weights)[0]

    return next_node
