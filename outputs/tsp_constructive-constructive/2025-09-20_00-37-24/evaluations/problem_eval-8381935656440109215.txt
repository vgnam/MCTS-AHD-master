import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate dynamic weights based on distance and unvisited count
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        unvisited_count = len(unvisited_nodes)
        # Weight combines inverse distance and normalized unvisited count
        weight = (1 / (distance + 1e-6)) * (1 + (unvisited_count / len(distance_matrix)))
        weights.append(weight)

    # Temperature-based stochastic selection
    temperature = max(1.0, len(unvisited_nodes) / len(distance_matrix))
    adjusted_weights = [w ** (1/temperature) for w in weights]

    # Normalize weights
    total_weight = sum(adjusted_weights)
    probabilities = [w / total_weight for w in adjusted_weights]

    # Select node based on weighted probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
