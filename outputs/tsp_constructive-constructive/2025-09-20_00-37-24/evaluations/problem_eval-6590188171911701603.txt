import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Normalize distances to create a probability distribution
    if min_dist == max_dist:
        weights = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        # Inverse distance weighting (closer nodes have higher probability)
        weights = [(max_dist - dist + 1e-6) / (max_dist - min_dist + 1e-6) for dist in distances]
        weights = np.array(weights) / np.sum(weights)

    # 80% chance to pick based on weights, 20% chance to pick uniformly random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
