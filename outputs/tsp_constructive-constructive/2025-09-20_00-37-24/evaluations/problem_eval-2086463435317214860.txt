import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilities inversely proportional to distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    max_dist = max(distances)
    if max_dist == 0:
        return random.choice(unvisited_nodes)

    probabilities = [1 / (dist + 1e-6) for dist in distances]  # Avoid division by zero
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    # Introduce stochasticity: sometimes pick a node with lower probability (farther)
    if random.random() < 0.8:  # 80% chance to pick based on inverse distance
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:  # 20% chance to pick a random node (more exploration)
        next_node = random.choice(unvisited_nodes)

    return next_node
