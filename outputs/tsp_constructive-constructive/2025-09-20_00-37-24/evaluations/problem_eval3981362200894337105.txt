def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate adaptive selection pressure based on remaining problem size
    remaining_nodes = len(unvisited_nodes)
    exploration_threshold = max(0.1, 0.9 - (remaining_nodes / 100))  # Decreases as problem size shrinks

    # Sort by distance to current node
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Memory-based component: bias toward recently visited nodes (simplified example)
    if len(nearest_neighbors) > 1 and random.random() < 0.3:  # 30% chance to consider memory
        memory_bias = nearest_neighbors[-1]  # Simplified: use last in list as "recently visited"
        if random.random() < 0.5:  # 50% chance to swap with nearest
            nearest_neighbors[0], nearest_neighbors[-1] = nearest_neighbors[-1], nearest_neighbors[0]

    # Apply adaptive selection
    if random.random() < exploration_threshold:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
