import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Dynamic probability based on inverse distance (normalized)
    if max_dist == min_dist:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        normalized_distances = [(max_dist - d) / (max_dist - min_dist) for d in distances]
        probabilities = [d / sum(normalized_distances) for d in normalized_distances]

    # Biased random walk: occasionally select a node with lower probability
    if random.random() < 0.8:  # 80% chance to follow probability distribution
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:  # 20% chance to select a node with lower probability
        inverse_probabilities = [1.0 - p for p in probabilities]
        next_node = random.choices(unvisited_nodes, weights=inverse_probabilities, k=1)[0]

    return next_node
