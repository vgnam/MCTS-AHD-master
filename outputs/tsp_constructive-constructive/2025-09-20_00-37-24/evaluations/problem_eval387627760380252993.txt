import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Dynamic probability of selecting destination based on remaining nodes and distance
        remaining_nodes = len(unvisited_nodes)
        distance_to_dest = distance_matrix[current_node][destination_node]
        max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
        prob_dest = 0.7 + 0.3 * (1 - distance_to_dest / max_distance) * (remaining_nodes / (remaining_nodes + 5))

        if random.random() < prob_dest:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochastic selection
    temperature = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 5))  # Decreases as nodes are visited
    if random.random() < (1 - temperature):
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Weighted random selection based on inverse distance
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        total_weight = sum(weights)
        probs = [w / total_weight for w in weights]
        next_node = random.choices(nearest_neighbors, weights=probs, k=1)[0]

    return next_node
