import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, iteration=0, max_iterations=100):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based probability calculation
    temperature = max(0.1, 1.0 - (iteration / max_iterations))  # Cooling schedule
    exploitation_prob = 0.9 * temperature  # Higher temperature favors exploitation

    if random.random() < exploitation_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Use a Boltzmann-like probability for exploration
        weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
