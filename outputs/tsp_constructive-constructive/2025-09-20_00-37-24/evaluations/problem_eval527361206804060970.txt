def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        # Probability of selecting destination increases as unvisited nodes decrease
        prob_destination = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
        if random.random() < prob_destination:
            return destination_node

    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochasticity: decreases over time
    temperature = len(unvisited_nodes) / len(distance_matrix)
    if random.random() < temperature:
        # Favor closer nodes with higher temperature
        weights = [1.0 / (1 + distance_matrix[current_node][node]) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # Greedy selection at lower temperature
        next_node = nearest_neighbors[0]

    return next_node
