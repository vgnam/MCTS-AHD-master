import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate probabilities based on inverse distance and temperature
    distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
    min_dist = min(distances) if distances else 1.0
    inv_distances = [min_dist / (d + 1e-10) for d in distances]
    total = sum(inv_distances)
    probabilities = [(d / total) ** (1 / temperature) for d in inv_distances]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    # Introduce stochasticity: weighted selection with occasional randomness
    if random.random() < 0.9:  # 90% chance to pick based on probabilities
        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    else:  # 10% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
