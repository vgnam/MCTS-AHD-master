import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate bias factor based on current path length vs. heuristic estimate
    current_path_length = distance_matrix[current_node][nearest_neighbors[0]] if nearest_neighbors else 0
    heuristic_estimate = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    bias_factor = min(1.0, max(0.1, current_path_length / heuristic_estimate))  # Clamp between 0.1 and 1.0

    # Adjust exploration probability based on bias factor
    exploration_prob = 0.9 * (1 - bias_factor) + 0.1

    if random.random() < exploration_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
