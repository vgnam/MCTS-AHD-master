import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate node degrees (number of connections)
    node_degrees = {node: np.sum(distance_matrix[node] > 0) for node in unvisited_nodes}

    # Calculate combined scores: inverse distance weighted by node degree
    scores = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degrees[node]
        score = (1 / (distance + 1e-6)) * (degree ** 0.5)  # Avoid division by zero
        scores.append(score)

    # Normalize scores to get probabilities
    total_score = sum(scores)
    probabilities = [score / total_score for score in scores]

    # Select with dynamic stochasticity: higher probability for better nodes, but still some randomness
    if random.random() < 0.7:  # 70% chance to follow the probability distribution
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:  # 30% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
