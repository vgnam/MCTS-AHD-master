def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        if random.random() < 0.7:  # 70% chance to prioritize destination
            return destination_node

    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic selection based on remaining unvisited nodes
    if len(unvisited_nodes) > len(nearest_neighbors) / 2:
        # More nodes left: favor exploration
        if random.random() < 0.6:  # 60% chance to pick from top 4 nearest
            candidates = nearest_neighbors[:min(4, len(nearest_neighbors))]
        else:  # 40% chance to pick a random node
            candidates = nearest_neighbors
    else:
        # Fewer nodes left: favor exploitation
        if random.random() < 0.8:  # 80% chance to pick from top 2 nearest
            candidates = nearest_neighbors[:min(2, len(nearest_neighbors))]
        else:  # 20% chance to pick a random node
            candidates = nearest_neighbors

    next_node = random.choice(candidates)
    return next_node
