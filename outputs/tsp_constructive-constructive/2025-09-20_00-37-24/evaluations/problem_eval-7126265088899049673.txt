import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Introduce stochasticity with bias towards nodes closer to destination
    if random.random() < 0.8:  # 80% chance to pick from top 3 nearest
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        # Further bias towards nodes that are closer to the destination
        weighted_candidates = []
        for node in candidates:
            distance_to_node = distance_matrix[current_node][node]
            distance_to_dest = distance_matrix[node][destination_node]
            # Higher weight for nodes that are closer to both current and destination
            weight = 1 / (distance_to_node + distance_to_dest + 1e-6)
            weighted_candidates.extend([node] * int(weight * 100))
        if weighted_candidates:
            next_node = random.choice(weighted_candidates)
        else:
            next_node = random.choice(candidates)
    else:  # 20% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
