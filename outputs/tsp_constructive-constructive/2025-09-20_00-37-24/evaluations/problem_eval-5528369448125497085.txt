import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilities based on inverse distance (closer nodes have higher probability)
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    inv_distances = [1.0 / (d + 1e-6) for d in distances]  # Avoid division by zero
    total_weight = sum(inv_distances)
    probabilities = [w / total_weight for w in inv_distances]

    # Introduce stochasticity: 80% chance to pick based on inverse distance, 20% chance to pick randomly
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
