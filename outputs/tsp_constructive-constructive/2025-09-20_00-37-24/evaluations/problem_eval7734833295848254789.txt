import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic k based on remaining unvisited nodes (more exploration when few nodes left)
    k = max(1, min(5, len(unvisited_nodes)))
    exploration_prob = 0.7 * (1 - math.log(len(unvisited_nodes) + 1) / math.log(len(distance_matrix) + 1))

    if random.random() < exploration_prob:
        candidates = nearest_neighbors[:k]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
