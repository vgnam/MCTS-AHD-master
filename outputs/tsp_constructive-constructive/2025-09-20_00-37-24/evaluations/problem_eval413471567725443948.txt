import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic exploration-exploitation trade-off
    exploration_prob = 0.9 * (len(unvisited_nodes) / len(distance_matrix)) ** 2
    if random.random() < exploration_prob:
        # Adaptive candidate selection: more candidates when more nodes are unvisited
        num_candidates = min(3 + int(math.log(len(unvisited_nodes) + 1)), len(nearest_neighbors))
        candidates = nearest_neighbors[:num_candidates]
        next_node = random.choice(candidates)
    else:
        # Bias towards nodes with higher potential (inverse of distance)
        weights = [1 / (distance_matrix[current_node][node] + 1e-10) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
