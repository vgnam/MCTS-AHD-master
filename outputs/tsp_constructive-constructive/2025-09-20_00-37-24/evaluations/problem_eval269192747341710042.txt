import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    total_nodes = len(distance_matrix)
    remaining_unvisited = len(unvisited_nodes)
    unvisited_ratio = remaining_unvisited / total_nodes

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability based on remaining unvisited nodes
    bias_prob = 0.8 * (1 - unvisited_ratio) + 0.1  # Higher bias when fewer nodes remain
    stochastic_prob = 0.1 + 0.8 * unvisited_ratio  # More randomness when more nodes remain

    if random.random() < bias_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    # Additional stochasticity: sometimes pick a node with a higher distance but lower frequency of selection
    if random.random() < stochastic_prob:
        farthest_neighbors = sorted(unvisited_nodes, key=lambda node: -distance_matrix[current_node][node])
        next_node = random.choice(farthest_neighbors[:min(2, len(farthest_neighbors))])

    return next_node
