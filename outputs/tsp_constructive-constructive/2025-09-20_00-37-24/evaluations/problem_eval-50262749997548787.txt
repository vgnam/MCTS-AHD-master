import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Dynamic bias towards destination based on remaining distance
        remaining_distance = distance_matrix[current_node][destination_node]
        bias_probability = 1 / (1 + remaining_distance)  # Higher distance decreases bias
        if random.random() < bias_probability:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive stochastic selection: probability of picking nearest decreases with remaining distance
    adaptive_prob = 0.5 + 0.4 * (1 / (1 + distance_matrix[current_node][destination_node]))
    if random.random() < adaptive_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
