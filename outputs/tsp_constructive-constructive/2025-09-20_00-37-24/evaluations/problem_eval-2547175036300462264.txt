import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]

    def desirability(node):
        alpha = 1.0
        beta = 2.0
        pheromone_level = 1.0  # Simplified pheromone level (can be updated later)
        return (pheromone_level**alpha) / (distance_matrix[current_node][node]**beta)

    desirabilities = {node: desirability(node) for node in candidates}
    total_desirability = sum(desirabilities.values())

    if total_desirability > 0:
        probabilities = {node: desirabilities[node] / total_desirability for node in candidates}
        cumulative_probability = 0.0
        r = random.random()

        for node, probability in probabilities.items():
            cumulative_probability += probability
            if r <= cumulative_probability:
                return node
    
    # If desirability is zero for all candidates, or with small probability
    return next_node
