def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Probability of choosing destination increases as unvisited nodes decrease
        destination_prob = 0.3 + 0.7 * (1 - len(unvisited_nodes) / len(distance_matrix))
        if random.random() < destination_prob:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive temperature: higher chance to pick from nearest neighbors when few nodes remain
    temperature = len(unvisited_nodes) / len(distance_matrix)
    if random.random() < temperature:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
    else:
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]

    # Weighted selection: closer nodes have higher probability
    weights = [1 / (1 + distance_matrix[current_node][node]) for node in candidates]
    next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
