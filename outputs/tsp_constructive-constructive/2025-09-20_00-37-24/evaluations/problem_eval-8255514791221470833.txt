import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate selection probabilities based on inverse distance to destination
    probabilities = []
    total_weight = 0.0
    for node in nearest_neighbors:
        if node == destination_node:
            weight = 1.0  # Highest priority if destination is available
        else:
            weight = 1.0 / (distance_matrix[current_node][node] + 1e-6)  # Avoid division by zero
        probabilities.append(weight)
        total_weight += weight

    # Normalize probabilities
    probabilities = [p / total_weight for p in probabilities]

    # Select node based on weighted probability
    next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]

    # Introduce occasional randomness to avoid local optima
    if random.random() < 0.1:  # 10% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
