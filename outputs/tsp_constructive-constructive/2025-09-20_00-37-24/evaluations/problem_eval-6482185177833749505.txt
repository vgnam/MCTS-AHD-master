import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate temperatures based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)))  # Higher temp when few nodes left

    # Get nearest neighbors
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Probabilistic selection with temperature
    if random.random() < temperature:  # Higher temp = more randomness
        # Select with Boltzmann distribution
        weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # Select from top 3 nearest with higher probability
        top_candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        other_candidates = nearest_neighbors[min(3, len(nearest_neighbors)):]
        if other_candidates and random.random() < 0.3:  # 30% chance to pick non-top candidate
            next_node = random.choice(other_candidates)
        else:
            next_node = random.choice(top_candidates)

    return next_node
