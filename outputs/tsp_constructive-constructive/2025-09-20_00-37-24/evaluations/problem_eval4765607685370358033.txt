import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    # Calculate temperature based on progress (fraction of nodes remaining)
    temperature = len(unvisited_nodes) / len(distance_matrix)

    # Get nearest neighbors
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability based on temperature and distance to destination
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
        dest_prob = 0.5 * (1 - temperature) + 0.5 * (dest_distance / max_distance)
    else:
        dest_prob = 0.0

    # Selection mechanism
    if random.random() < dest_prob:
        return destination_node
    elif random.random() < temperature:
        # Higher temperature = more randomness
        next_node = random.choice(unvisited_nodes)
    else:
        # Lower temperature = more nearest neighbor focus
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
