def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if random.random() < 0.8:  # 80% chance to pick from top 3 nearest
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
    else:  # 20% chance to pick a node based on both proximity and average distance
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        candidates = sorted(candidates, key=lambda node: distance_matrix[current_node][node] + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0)
        candidates = candidates[:min(2, len(candidates))]

    next_node = random.choice(candidates)
    return next_node
