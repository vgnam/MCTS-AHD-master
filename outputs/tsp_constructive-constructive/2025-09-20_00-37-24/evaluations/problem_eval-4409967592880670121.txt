import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, visit_counts=None):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    if visit_counts is None:
        visit_counts = {node: 1 for node in unvisited_nodes}

    # Calculate weights based on inverse distance and visit frequency
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        frequency = visit_counts[node]
        weight = (1.0 / (distance + 1e-6)) * math.exp(-frequency / temperature)
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    if total_weight > 0:
        probabilities = [w / total_weight for w in weights]
    else:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)

    # Select node based on weighted probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
