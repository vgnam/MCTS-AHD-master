import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, decay_rate=0.95):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochastic selection
    exploration_prob = math.exp(-decay_rate * temperature)
    if random.random() < exploration_prob:
        # Explore: select from a wider range of neighbors
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Exploit: select from the nearest neighbors
        candidates = nearest_neighbors[:min(2, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
