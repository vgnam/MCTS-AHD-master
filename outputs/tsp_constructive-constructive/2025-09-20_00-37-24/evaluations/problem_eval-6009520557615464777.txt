import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, history=None, decay_factor=0.9):
    if not unvisited_nodes:
        return None

    if history is None:
        history = {}

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate weights based on distance and historical selection frequency
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        historical_weight = history.get(node, 0)
        # Penalize recently visited nodes to avoid cycles
        penalty = decay_factor ** historical_weight if historical_weight > 0 else 1.0
        weight = (1.0 / (distance + 1e-6)) * (penalty ** temperature)
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select node based on the probability distribution
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    # Update history
    history[next_node] = history.get(next_node, 0) + 1

    return next_node
