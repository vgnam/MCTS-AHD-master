import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate centrality score for each node (inverse of average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = np.mean([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        centrality[node] = 1.0 / (avg_distance + 1e-6)  # Avoid division by zero

    # Get nearest neighbors sorted by distance
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Combine distance and centrality to score nodes
    scored_nodes = []
    for node in nearest_neighbors:
        distance_score = 1.0 / (distance_matrix[current_node][node] + 1e-6)
        total_score = 0.7 * distance_score + 0.3 * centrality[node]
        scored_nodes.append((node, total_score))

    # Sort by combined score
    scored_nodes.sort(key=lambda x: x[1], reverse=True)

    # Adaptive stochasticity: higher probability for top nodes, but still some randomness
    if random.random() < 0.9:  # 90% chance to pick from top 3 nodes
        candidates = [node for node, _ in scored_nodes[:min(3, len(scored_nodes))]]
        next_node = random.choice(candidates)
    else:  # 10% chance to pick from top 5 nodes
        candidates = [node for node, _ in scored_nodes[:min(5, len(scored_nodes))]]
        next_node = random.choice(candidates)

    return next_node
