import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Adaptive selection pressure based on distance to destination
        distance_to_dest = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        selection_prob = min(1.0, 0.7 + 0.3 * (avg_distance / (distance_to_dest + 1e-6)))

        if random.random() < selection_prob:
            return destination_node

    # Temperature-based stochasticity
    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (0.9 * (remaining_nodes / (remaining_nodes + len(distance_matrix)))))

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Probabilistic selection with temperature
    weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in nearest_neighbors]
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    return next_node
