import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    progress_ratio = visited_nodes / total_nodes

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold (decreases as progress increases)
    threshold = 0.9 - 0.8 * progress_ratio

    if random.random() < threshold:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # More aggressive exploration as progress increases
        exploration_factor = 1 + 2 * progress_ratio
        max_candidates = min(int(exploration_factor), len(nearest_neighbors))
        candidates = nearest_neighbors[:max_candidates]
        next_node = random.choice(candidates)

    return next_node
