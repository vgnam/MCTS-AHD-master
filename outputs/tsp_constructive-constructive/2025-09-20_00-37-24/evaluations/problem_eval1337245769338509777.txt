import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Normalize distances to [0, 1] and compute inverse squared weights
    normalized = [(max_dist - d) / (max_dist - min_dist) if max_dist != min_dist else 1.0 for d in distances]
    weights = [n**2 for n in normalized]  # Prefer closer nodes

    # 80% chance to pick based on weights, 20% random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]
    else:
        # Bias towards closer nodes in random selection
        probs = np.array(weights) / sum(weights)
        next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
