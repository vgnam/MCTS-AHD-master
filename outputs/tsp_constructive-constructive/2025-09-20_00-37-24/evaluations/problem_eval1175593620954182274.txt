import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Weighted random selection based on inverse distance
    if random.random() < 0.8:  # 80% chance to use weighted selection
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:  # 20% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
