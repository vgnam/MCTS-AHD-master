import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate a score for each candidate based on distance and randomness
    def calculate_score(node):
        distance = distance_matrix[current_node][node]
        random_factor = random.random()
        return distance * (1 - random_factor * 0.5)  # Distance weighted by randomness

    # Get top 5 nearest neighbors and calculate scores
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
    scored_candidates = [(node, calculate_score(node)) for node in candidates]

    # Select node with the lowest score (favoring closer nodes but with randomness)
    next_node = min(scored_candidates, key=lambda x: x[1])[0]

    # 20% chance to pick a random node from remaining unvisited (exploration)
    if random.random() < 0.2:
        next_node = random.choice(unvisited_nodes)

    return next_node
