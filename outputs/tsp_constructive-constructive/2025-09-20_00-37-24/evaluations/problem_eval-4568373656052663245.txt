def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    exploitation_prob = 0.9 * remaining_ratio  # Decreases as nodes are visited

    # Weighted selection: prioritize nearest neighbors but allow randomness
    if random.random() < exploitation_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        weights = [1/(i+1) for i in range(len(candidates))]  # Prefer closer nodes
        next_node = random.choices(candidates, weights=weights)[0]
    else:
        # Random selection with distance-based weighting
        weights = [1/distance_matrix[current_node][node] for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights)[0]

    return next_node
