import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    dynamic_prob = 0.8 * remaining_ratio + 0.1  # Adjusts between 10% and 90% based on remaining nodes

    if random.random() < dynamic_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Weighted random selection to favor closer nodes
        weights = [math.exp(-distance_matrix[current_node][node]) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
