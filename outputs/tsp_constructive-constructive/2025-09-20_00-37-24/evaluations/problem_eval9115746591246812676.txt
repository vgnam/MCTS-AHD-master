import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Calculate dynamic bias towards destination based on remaining distance
    total_remaining = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    if total_remaining == 0:
        bias_factor = 0
    else:
        bias_factor = min(1.0, 0.5 * (distance_matrix[current_node][destination_node] / total_remaining))

    # Combine distance and destination bias
    def node_score(node):
        base_distance = distance_matrix[current_node][node]
        if node == destination_node:
            return base_distance * (1 - bias_factor)
        return base_distance * (1 + bias_factor * random.uniform(0.1, 0.3))

    # Sort by combined score
    scored_nodes = sorted(unvisited_nodes, key=lambda node: node_score(node))

    # Selection mechanism with adaptive stochasticity
    if random.random() < 0.8:  # 80% chance to pick from top 4 with probability proportional to rank
        top_nodes = scored_nodes[:min(4, len(scored_nodes))]
        weights = [1.0 / (i + 1) for i in range(len(top_nodes))]
        next_node = random.choices(top_nodes, weights=weights, k=1)[0]
    else:  # 20% chance to pick a random node with higher penalty for recently visited
        penalties = [1.0 if node in unvisited_nodes else 1.5 for node in distance_matrix[current_node]]
        weighted_nodes = [node for node in unvisited_nodes for _ in range(int(1/penalties[node]))]
        next_node = random.choice(weighted_nodes) if weighted_nodes else random.choice(unvisited_nodes)

    return next_node
