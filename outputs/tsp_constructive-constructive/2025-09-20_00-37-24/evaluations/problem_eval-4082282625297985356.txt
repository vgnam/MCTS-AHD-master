def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    best_node = None
    best_score = float('inf')

    for node in unvisited_nodes:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node]

        # Calculate a score that balances proximity and destination-oriented bias.
        score = distance_to_node + 0.5 * distance_to_destination  # Adjust 0.5 to tune the bias

        if score < best_score:
            best_score = score
            best_node = node

    return next_node
