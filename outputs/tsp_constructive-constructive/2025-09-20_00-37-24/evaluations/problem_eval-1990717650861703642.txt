import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Adaptive temperature for stochasticity (starts high, decreases over time)
    temperature = max(0.1, 1.0 - (1.0 / len(unvisited_nodes)))

    if destination_node in unvisited_nodes:
        # Higher probability to pick destination as nodes are visited
        if random.random() < (1.0 - temperature):
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic candidate selection: more candidates at higher temperature
    num_candidates = min(3, len(nearest_neighbors))
    if temperature > 0.5:
        num_candidates = min(5, len(nearest_neighbors))

    candidates = nearest_neighbors[:num_candidates]

    # Temperature-based selection: favor nearest at low temp, random at high temp
    if random.random() < (1.0 - temperature):
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
