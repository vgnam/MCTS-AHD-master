import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate potential increase in path length for each unvisited node
    potential_increases = []
    for node in unvisited_nodes:
        if current_node == node:
            increase = 0
        else:
            increase = distance_matrix[current_node][node] - distance_matrix[current_node][destination_node]
        potential_increases.append((node, increase))

    # Sort by potential increase (smaller increases first)
    potential_increases.sort(key=lambda x: x[1])

    # Select based on a probability distribution favoring smaller increases
    nodes, increases = zip(*potential_increases)
    probabilities = [math.exp(-inc) for inc in increases]  # Exponential decay based on increase
    probabilities = [p / sum(probabilities) for p in probabilities]  # Normalize

    # 90% chance to pick from top 3 candidates, 10% chance to pick randomly
    if random.random() < 0.9:
        candidates = nodes[:min(3, len(nodes))]
        next_node = random.choices(candidates, weights=probabilities[:len(candidates)])[0]
    else:
        next_node = random.choices(nodes, weights=probabilities)[0]

    return next_node
