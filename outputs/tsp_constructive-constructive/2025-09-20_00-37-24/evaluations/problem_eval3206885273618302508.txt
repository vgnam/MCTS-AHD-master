import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate node centrality (inverse of mean distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
        centrality[node] = 1.0 / (np.mean(distances) + 1e-6)  # Avoid division by zero

    # Utility function: weighted combination of distance and centrality
    def utility(node):
        distance = distance_matrix[current_node][node]
        return -distance + 0.5 * centrality[node]

    # Sort by utility
    sorted_nodes = sorted(unvisited_nodes, key=lambda node: utility(node), reverse=True)

    # Probabilistic selection: higher utility nodes have higher chance
    probabilities = np.exp([utility(node) for node in sorted_nodes])
    probabilities /= probabilities.sum()
    next_node = np.random.choice(sorted_nodes, p=probabilities)

    return next_node
