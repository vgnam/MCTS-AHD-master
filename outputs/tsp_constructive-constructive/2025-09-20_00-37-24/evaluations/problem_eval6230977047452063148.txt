import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate centrality scores (inverse of average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = np.mean([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        centrality[node] = 1 / (avg_distance + 1e-6)  # Avoid division by zero

    # Combine distance and centrality into a selection probability
    probabilities = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        prob = (centrality[node] / distance) ** 2  # Squared to emphasize better nodes
        probabilities.append(prob)

    # Normalize probabilities
    total = sum(probabilities)
    if total == 0:
        return random.choice(unvisited_nodes)
    normalized_probs = [p / total for p in probabilities]

    # Introduce stochasticity: 80% chance to pick based on probabilities, 20% random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
