import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate temperature based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1.0 - (remaining_nodes / total_nodes)  # Higher as more nodes are visited

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-dependent stochastic selection
    if random.random() < (1.0 - temperature * 0.5):  # Higher temperature increases randomness
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Apply a softmax-like selection with temperature
        weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
