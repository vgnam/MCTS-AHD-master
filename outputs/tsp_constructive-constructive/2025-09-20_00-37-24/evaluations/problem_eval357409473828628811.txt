import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate potential score for each unvisited node
    def calculate_potential(node):
        dist_to_current = distance_matrix[current_node][node]
        remaining_nodes = [n for n in unvisited_nodes if n != node]
        if not remaining_nodes:
            return dist_to_current
        avg_remaining_dist = np.mean([distance_matrix[node][n] for n in remaining_nodes])
        return dist_to_current * avg_remaining_dist

    # Sort nodes by potential score (lower is better)
    sorted_nodes = sorted(unvisited_nodes, key=calculate_potential)

    # Introduce stochasticity with adaptive probability
    if len(unvisited_nodes) > 5:
        # For many unvisited nodes, bias toward lower potential nodes
        selection_prob = 0.7
    else:
        # For few unvisited nodes, increase randomness
        selection_prob = 0.3

    if random.random() < selection_prob:
        # Select from top 3 lowest potential nodes
        candidates = sorted_nodes[:min(3, len(sorted_nodes))]
        next_node = random.choice(candidates)
    else:
        # Select from top 5 potential nodes with inverse probability
        candidates = sorted_nodes[:min(5, len(sorted_nodes))]
        weights = [1.0 / (rank + 1) for rank in range(len(candidates))]
        next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
