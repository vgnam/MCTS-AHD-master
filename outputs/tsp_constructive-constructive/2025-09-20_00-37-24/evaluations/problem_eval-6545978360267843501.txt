import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate dynamic probabilities based on inverse distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Normalize distances to [0, 1] range
    normalized_distances = [(max_dist - d) / (max_dist - min_dist) if max_dist != min_dist else 1.0 for d in distances]

    # Apply softmax with temperature to get probabilities
    temperature = max(0.1, 2.0 / (1.0 + math.exp(len(unvisited_nodes) / 20)))  # Decreases as unvisited_nodes decreases
    exp_distances = [math.exp(d / temperature) for d in normalized_distances]
    total = sum(exp_distances)
    probabilities = [e / total for e in exp_distances]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
