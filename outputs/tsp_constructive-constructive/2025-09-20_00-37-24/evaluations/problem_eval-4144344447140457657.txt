import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on inverse distance (higher weight for closer nodes)
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    max_distance = max(distances) if distances else 1
    weights = [1 / (distance + 0.1) for distance in distances]  # Avoid division by zero

    # Normalize weights
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # 70% chance to select among top 3 nearest, 30% chance to use weighted random selection
    if random.random() < 0.7:
        nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
