import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]

    if random.random() < 0.9:
        beta = 2.0
        probabilities = {node: 1.0 / (distance_matrix[current_node][node]**beta) for node in candidates}
        total_probability = sum(probabilities.values())
        normalized_probabilities = {node: probabilities[node] / total_probability for node in candidates}
        next_node = random.choices(list(normalized_probabilities.keys()), weights=list(normalized_probabilities.values()))[0]
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
