def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate potential next nodes and their weighted scores
    potential_nodes = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Weighted score: inverse distance (closer nodes have higher weight) plus a connectivity bonus
        connectivity_bonus = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node)
        score = (1 / (distance + 1e-6)) + 0.3 * connectivity_bonus  # 0.3 is a tuning parameter
        potential_nodes.append((node, score))

    # Select node based on weighted random choice
    nodes, scores = zip(*potential_nodes)
    next_node = random.choices(nodes, weights=scores, k=1)[0]

    return next_node
