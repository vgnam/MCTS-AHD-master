def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate adaptive neighborhood size based on progress
    progress = (len(unvisited_nodes) / len(distance_matrix)) if distance_matrix else 0.5
    neighborhood_size = max(1, int(3 * (1 - progress) + 1))

    # Temperature-based stochasticity (decreases over time)
    temperature = len(unvisited_nodes) / (len(distance_matrix) if distance_matrix else 1)
    stochastic_threshold = 0.9 * (1 - temperature)

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if random.random() < stochastic_threshold:  # Adaptive stochasticity
        candidates = nearest_neighbors[:min(neighborhood_size, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # More random selection as temperature decreases
        next_node = random.choice(nearest_neighbors)

    return next_node
