import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic exploration probability based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    exploration_prob = min(0.9, 0.5 + (0.4 * remaining_nodes / len(distance_matrix)))

    # Weighted selection: prioritize nearest neighbors but allow exploration
    if random.random() < exploration_prob:
        # Exponential decay for exploration candidates
        weights = [math.exp(-i / 2) for i in range(len(nearest_neighbors))]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # Default to nearest neighbor with some randomness
        candidate_count = min(3, len(nearest_neighbors))
        next_node = random.choice(nearest_neighbors[:candidate_count])

    return next_node
