import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on distance and visit frequency (simulated here)
    visit_counts = {node: random.randint(1, 10) for node in unvisited_nodes}  # Placeholder for actual visit counts
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        frequency = visit_counts[node]
        weight = (1 / (distance + 1e-6)) * (1 / (frequency + 1))  # Inverse distance and frequency
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # Introduce stochasticity: 80% chance to pick from top 3 by weight, 20% random
    if random.random() < 0.8:
        weighted_indices = sorted(range(len(normalized_weights)), key=lambda i: -normalized_weights[i])
        candidates = [unvisited_nodes[i] for i in weighted_indices[:min(3, len(weighted_indices))]]
        next_node = random.choices(candidates, weights=normalized_weights[:min(3, len(weighted_indices))])[0]
    else:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights)[0]

    return next_node
