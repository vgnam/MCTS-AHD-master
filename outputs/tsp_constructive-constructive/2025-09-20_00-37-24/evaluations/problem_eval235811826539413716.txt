import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate average distances to all unvisited nodes for each candidate
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]

    # Compute weighted probabilities based on inverse distance and average distance
    weights = []
    for node in candidates:
        inv_distance = 1.0 / (distance_matrix[current_node][node] + 1e-6)  # Avoid division by zero
        avg_distance = np.mean([distance_matrix[node][n] for n in unvisited_nodes if n != node])
        weight = inv_distance * (1.0 / (avg_distance + 1e-6))  # Combine both factors
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Introduce stochasticity: 80% chance to pick based on weighted probabilities, 20% random
    if random.random() < 0.8:
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
