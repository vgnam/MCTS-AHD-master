def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate potential for each node: average distance to remaining unvisited nodes
    potential = {}
    for node in unvisited_nodes:
        total = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        potential[node] = total / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

    # Weighted score: 0.7 proximity, 0.3 potential
    scores = {}
    for node in unvisited_nodes:
        proximity = distance_matrix[current_node][node]
        scores[node] = 0.7 * proximity + 0.3 * potential[node]

    # Select node with highest score, but with 10% random chance to pick a random node
    if random.random() < 0.9:
        next_node = min(unvisited_nodes, key=lambda node: scores[node])
    else:
        next_node = random.choice(list(unvisited_nodes))

    return next_node
