import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    
    if random.random() < 0.95: # 95% chance to pick from top 5 nearest, weighted by distance
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        weights = [(1.0 / distance_matrix[current_node][node]**2) for node in candidates]
        total_weight = sum(weights)
        probabilities = [w / total_weight for w in weights]
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else: # 5% chance to pick a random node
        next_node = random.choice(nearest_neighbors)
    
    return next_node
