import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Dynamic bias towards destination based on remaining nodes
        bias_prob = 0.5 + (len(unvisited_nodes) / (len(distance_matrix) - 1)) * 0.5
        if random.random() < bias_prob:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive stochasticity: higher probability of randomness when current path is longer than average
    current_path_length = sum(distance_matrix[current_node][n] for n in nearest_neighbors[:3])
    avg_distance = np.mean([distance_matrix[current_node][n] for n in unvisited_nodes])
    if current_path_length > avg_distance:
        stochastic_prob = 0.3  # Higher chance to pick randomly
    else:
        stochastic_prob = 0.1  # Default chance

    if random.random() < (1 - stochastic_prob):
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
