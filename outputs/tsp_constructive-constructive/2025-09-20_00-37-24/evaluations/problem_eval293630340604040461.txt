import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate temperature based on remaining nodes and current path length
    remaining_nodes = len(unvisited_nodes)
    current_path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
    temperature = max(0.1, min(1.0, remaining_nodes / 100 + current_path_length / 1000))

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic stochasticity based on temperature
    if random.random() < (1 - temperature):
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Exponential decay probability for more distant nodes
        weights = [math.exp(-i * temperature) for i in range(len(nearest_neighbors))]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
