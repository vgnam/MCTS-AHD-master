import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic exploration factor: increases as fewer nodes remain
    exploration_factor = 1.0 - (len(unvisited_nodes) / len(distance_matrix))
    exploration_threshold = 0.7 * (1 - exploration_factor) + 0.3

    if random.random() < exploration_threshold:
        # Favor nodes closer to the current node but with some randomness
        num_candidates = max(1, min(3, len(nearest_neighbors) // 2))
        candidates = nearest_neighbors[:num_candidates]
        weights = [1.0 / (1 + distance_matrix[current_node][node]) for node in candidates]
        next_node = random.choices(candidates, weights=weights, k=1)[0]
    else:
        # Randomly select from a broader set of candidates
        num_candidates = min(5, len(nearest_neighbors))
        candidates = nearest_neighbors[:num_candidates]
        next_node = random.choice(candidates)

    return next_node
