import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate distances and probabilities
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)
    normalized_distances = [(max_dist - dist + 1e-6) / (max_dist - min_dist + 1e-6) for dist in distances]  # Avoid division by zero

    # Introduce stochasticity: 80% chance to pick based on inverse distance, 20% random
    if random.random() < 0.8:
        # Weighted selection based on inverse distance
        next_node = random.choices(unvisited_nodes, weights=normalized_distances, k=1)[0]
    else:
        # 20% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
