import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate temperature based on progress (fraction of nodes remaining)
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = max(0.1, 1.0 - (remaining_nodes / total_nodes))

    # Get nearest neighbors sorted by distance
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate selection probabilities based on inverse distance and temperature
    distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
    min_dist = min(distances) if distances else 1.0
    max_dist = max(distances) if distances else 1.0
    normalized_distances = [(max_dist - d + 0.01) / (max_dist - min_dist + 0.01) for d in distances]

    # Adjust probabilities with temperature
    probabilities = [math.exp(p / temperature) for p in normalized_distances]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    # Select node based on probabilities
    next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    return next_node
