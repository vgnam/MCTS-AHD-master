import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilities based on inverse distance and node degree
    probabilities = []
    total_weight = 0.0

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Node degree (number of remaining connections to unvisited nodes)
        degree = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] > 0)
        # Weight: inverse distance * (1 + degree) to favor closer and less connected nodes
        weight = (1.0 / distance) * (1.0 + degree)
        probabilities.append(weight)
        total_weight += weight

    # Normalize probabilities
    normalized_probs = [w / total_weight for w in probabilities]

    # 90% chance to select from the weighted distribution, 10% random
    if random.random() < 0.9:
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
