import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate dynamic probabilities based on inverse distance and exploration factor
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances) if distances else 1.0
    max_dist = max(distances) if distances else 1.0
    normalized_distances = [(max_dist - d + 0.1) / (max_dist - min_dist + 0.1) for d in distances]

    # Temperature parameter that decays over time (simplified)
    temperature = max(0.1, 1.0 - (len(unvisited_nodes) / 100.0))

    # Apply temperature to probabilities
    probs = [math.exp(norm_dist / temperature) for norm_dist in normalized_distances]
    total_prob = sum(probs)
    probs = [p / total_prob for p in probs]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
