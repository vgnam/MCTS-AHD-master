import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate temperature based on remaining unvisited nodes (lower when few nodes left)
    temperature = 1.0 - (1.0 / (1.0 + len(unvisited_nodes)))

    # Sort unvisited nodes by distance from current node
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate selection probabilities using softmax with temperature
    distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
    min_dist = min(distances) if distances else 0
    max_dist = max(distances) if distances else 1
    normalized_distances = [(d - min_dist) / (max_dist - min_dist + 1e-9) for d in distances]

    probabilities = [math.exp(-d / temperature) for d in normalized_distances]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    # Select node based on probabilities
    next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]

    return next_node
