import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate adaptive exploration factor (increases as more nodes remain unvisited)
    exploration_factor = 1.0 - math.exp(-len(unvisited_nodes) / 10)

    # Calculate probability weights for each unvisited node
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Weight is inversely proportional to distance, with some exploration component
        weight = (1 - exploration_factor) / (distance + 1e-6) + exploration_factor * random.random()
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select next node based on weighted probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
