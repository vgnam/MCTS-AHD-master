import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate exploration factor (increases as more nodes remain unvisited)
    exploration_factor = 1.0 / math.sqrt(len(unvisited_nodes) + 1)

    # Compute weighted probabilities for each unvisited node
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Weight is inversely proportional to distance, with some exploration factor
        weight = (1.0 / (distance + 1e-6)) * (1.0 - exploration_factor)
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select next node based on the probability distribution
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
