import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Temperature-based stochasticity: higher temperature early, lower later
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)) if unvisited_nodes else 0
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if destination_node in unvisited_nodes:
        # Higher probability to choose destination early, lower later
        destination_prob = 0.9 * (1 - temperature)
        if random.random() < destination_prob:
            return destination_node

    # Dynamic candidate pool: larger pool early, smaller later
    candidate_size = max(1, int(3 * (1 - temperature)))
    candidates = nearest_neighbors[:min(candidate_size, len(nearest_neighbors))]

    # Adaptive selection: higher chance to pick nearest early, more random later
    selection_prob = 0.7 * (1 - temperature)
    if random.random() < selection_prob:
        next_node = nearest_neighbors[0]  # Always pick nearest if high probability
    else:
        next_node = random.choice(candidates)

    return next_node
