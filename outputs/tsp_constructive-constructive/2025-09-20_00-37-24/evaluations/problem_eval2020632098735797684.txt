import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on inverse distance (closer nodes have higher probability)
    weights = []
    total_weight = 0.0
    for node in unvisited_nodes:
        dist = distance_matrix[current_node][node]
        weight = 1.0 / (dist + 1e-6)  # Avoid division by zero
        weights.append(weight)
        total_weight += weight

    # Normalize weights to probabilities
    probabilities = [w / total_weight for w in weights]

    # Introduce stochasticity: 80% chance to pick based on inverse distance, 20% chance to pick randomly
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
