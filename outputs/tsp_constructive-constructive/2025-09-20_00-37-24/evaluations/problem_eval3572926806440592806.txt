import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if not nearest_neighbors:
        return None

    # Temperature-based stochasticity: decreases as search progresses
    temperature = len(unvisited_nodes) / (len(distance_matrix) - 1)  # Normalized temperature
    nearest_dist = distance_matrix[current_node][nearest_neighbors[0]]

    # Dynamic probability to pick from nearest neighbors
    if nearest_dist == 0:
        prob_nearest = 1.0  # Avoid division by zero if current node is the nearest
    else:
        prob_nearest = min(1.0, (1.0 / nearest_dist) * temperature)

    if random.random() < prob_nearest:
        # Select from top 3 nearest with higher probability for closer nodes
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        weights = [math.exp(-distance_matrix[current_node][node] / nearest_dist) for node in candidates]
        next_node = random.choices(candidates, weights=weights, k=1)[0]
    else:
        # Random selection with bias towards nodes with shorter distances
        weights = [math.exp(-distance_matrix[current_node][node] / nearest_dist) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
