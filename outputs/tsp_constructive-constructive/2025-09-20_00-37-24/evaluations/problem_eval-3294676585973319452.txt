import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate adaptive exploration probability using sigmoid function
    exploration_prob = 1 / (1 + math.exp(-(len(unvisited_nodes) - 5)))  # Higher probability when few unvisited nodes remain

    # Introduce stochasticity with adaptive probability
    if random.random() < (0.9 * (1 - exploration_prob)):  # Reduce exploitation probability with exploration
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Weight nodes by inverse distance (prefer closer nodes) but with exploration bias
        weights = [1 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        total_weight = sum(weights)
        normalized_weights = [w / total_weight for w in weights]
        next_node = random.choices(nearest_neighbors, weights=normalized_weights, k=1)[0]

    return next_node
