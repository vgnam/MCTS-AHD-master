import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate dynamic probability distribution based on distance and temperature
    temperature = max(0.1, 1.0 / (1.0 + len(unvisited_nodes)))  # Decreases as more nodes are visited
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist, max_dist = min(distances), max(distances)

    # Normalize distances and apply temperature scaling
    if max_dist != min_dist:
        probs = [(max_dist - dist) / (max_dist - min_dist) for dist in distances]  # Inverse distance weighting
        probs = [p ** (1.0 / temperature) for p in probs]  # Temperature adjustment
    else:
        probs = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)  # Uniform if all distances equal

    # Normalize probabilities
    total = sum(probs)
    probs = [p / total for p in probs]

    # Introduce a small penalty for revisiting nodes (to avoid cycles)
    penalty_factor = 0.95
    if len(unvisited_nodes) < len(distance_matrix) // 2:  # Penalty becomes stronger as more nodes are visited
        probs = [p * penalty_factor for p in probs]

    # Select node based on probability distribution
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
