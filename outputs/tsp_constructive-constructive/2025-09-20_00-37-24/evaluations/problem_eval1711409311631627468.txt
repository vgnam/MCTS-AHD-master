import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability: higher chance to pick nearest as fewer nodes remain
    p_nearest = 1.0 / (1.0 + math.exp(-len(unvisited_nodes) / 5.0))  # Sigmoid function

    if random.random() < p_nearest:
        next_node = nearest_neighbors[0]
    else:
        # Weighted random selection: nodes farther away have lower probability
        weights = [1.0 / (1.0 + distance_matrix[current_node][node]) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
