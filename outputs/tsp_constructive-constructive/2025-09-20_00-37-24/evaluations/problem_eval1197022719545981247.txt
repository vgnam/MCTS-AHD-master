import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate exploration factor based on remaining unvisited nodes
    exploration_factor = 1.0 / (1.0 + math.exp(-0.1 * len(unvisited_nodes)))

    # Get nearest neighbors sorted by distance
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Probabilistic selection: balance between nearest and exploration
    if random.random() < exploration_factor:
        # Explore: pick a node further away but with higher potential
        if len(nearest_neighbors) > 3:
            candidates = nearest_neighbors[3:min(6, len(nearest_neighbors))]
            if candidates:
                next_node = random.choice(candidates)
                return next_node

    # Default to nearest neighbor with some stochasticity
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
    next_node = random.choice(candidates)

    return next_node
