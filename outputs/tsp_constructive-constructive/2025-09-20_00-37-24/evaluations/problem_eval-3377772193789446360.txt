import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Probability of selecting destination increases as few nodes remain
        prob_destination = 0.7 + 0.3 * (1 - len(unvisited_nodes) / len(distance_matrix))
        if random.random() < prob_destination:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic stochasticity: bias towards nearest neighbors but allow exploration
    if random.random() < 0.8:  # 80% chance to pick from top 4 nearest
        candidates = nearest_neighbors[:min(4, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # 20% chance to pick from a wider range of nearest neighbors
        candidates = nearest_neighbors[:min(7, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
