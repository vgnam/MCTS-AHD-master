import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Dynamic bias towards destination if it's nearby
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        if dest_distance <= avg_distance * 0.7:  # Destination is significantly closer
            return destination_node

    # Calculate selection probabilities based on inverse distance and recency
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist, max_dist = min(distances), max(distances)

    # Normalize distances to [0,1] and invert (closer nodes have higher probability)
    normalized_dist = [(max_dist - dist) / (max_dist - min_dist + 1e-10) for dist in distances]

    # Add recency bias: nodes visited more recently have lower probability
    recency = {node: i for i, node in enumerate(unvisited_nodes)}
    recency_bias = [1 - (recency[node] / len(unvisited_nodes)) for node in unvisited_nodes]

    # Combine distance and recency factors
    combined_weights = [dist * recency for dist, recency in zip(normalized_dist, recency_bias)]

    # 80% chance to pick based on weights, 20% chance to pick random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=combined_weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
