import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability: increases with remaining unvisited nodes
    exploration_prob = min(0.9, 0.1 + 0.8 * (len(unvisited_nodes) / len(distance_matrix)))

    if random.random() < exploration_prob:
        # Weighted selection: closer nodes have higher probability
        weights = [1 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # 10% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
