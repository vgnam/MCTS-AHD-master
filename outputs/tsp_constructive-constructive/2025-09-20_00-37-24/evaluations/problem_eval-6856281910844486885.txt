import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilities inversely proportional to distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    # Avoid division by zero and normalize
    if min_distance == max_distance:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        normalized_distances = [(max_distance - d) / (max_distance - min_distance) for d in distances]
        total = sum(normalized_distances)
        probabilities = [d / total for d in normalized_distances]

    # Introduce stochasticity: 80% chance to pick based on probabilities, 20% random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
