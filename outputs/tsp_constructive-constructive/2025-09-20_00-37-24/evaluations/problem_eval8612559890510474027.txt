def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    min_score = float('inf')
    best_node = None
    candidates = []

    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]

        # Find the nearest unvisited node from this candidate
        nearest_unvisited = min(unvisited_nodes, key=lambda n: distance_matrix[node][n] if n != node else float('inf'))
        nearest_distance = distance_matrix[node][nearest_unvisited] if nearest_unvisited != node else 0

        # Average distance to all other unvisited nodes
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0

        # Combine metrics for a balanced score
        score = current_distance + nearest_distance + avg_distance
        if score < min_score:
            min_score = score
            best_node = node

    # Get top 3 candidates based on scores
    candidate_scores = []
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        nearest_unvisited = min(unvisited_nodes, key=lambda n: distance_matrix[node][n] if n != node else float('inf'))
        nearest_distance = distance_matrix[node][nearest_unvisited] if nearest_unvisited != node else 0
        avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        score = current_distance + nearest_distance + avg_distance
        candidate_scores.append((node, score))

    candidate_scores.sort(key=lambda x: x[1])
    top_candidates = [node for node, score in candidate_scores[:min(3, len(candidate_scores))]]

    # 90% chance to pick the best-scoring candidate, 10% chance to pick randomly
    if random.random() < 0.9:
        next_node = top_candidates[0] if top_candidates else None
    else:
        next_node = random.choice(top_candidates) if top_candidates else None

    return next_node
