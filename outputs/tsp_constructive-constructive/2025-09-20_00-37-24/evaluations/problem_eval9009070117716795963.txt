import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights: inverse distance (for proximity) and inverse visit frequency (for exploration)
    visit_frequency = {node: 1.0 for node in unvisited_nodes}  # Placeholder - in practice, track actual visit frequencies
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        frequency = visit_frequency[node]
        weight = (1.0 / (distance + 1e-6)) * (1.0 / (frequency + 1e-6))  # Small epsilon to avoid division by zero
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # Select node with weighted random choice
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
