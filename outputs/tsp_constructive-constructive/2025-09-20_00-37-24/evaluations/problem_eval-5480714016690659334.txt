import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability based on historical performance (simulated here as inverse distance)
    if not hasattr(select_next_node, 'node_performance'):
        select_next_node.node_performance = {node: 1.0 for node in unvisited_nodes}

    # Update performance scores (simplified: favor nodes with shorter distances)
    for node in nearest_neighbors:
        select_next_node.node_performance[node] = 1.0 / distance_matrix[current_node][node]

    # Normalize performance scores to probabilities
    total_performance = sum(select_next_node.node_performance[node] for node in nearest_neighbors)
    probabilities = [select_next_node.node_performance[node] / total_performance for node in nearest_neighbors]

    # Introduce stochasticity: 80% chance to pick based on performance, 20% random
    if random.random() < 0.8:
        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
