import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate dynamic probability threshold based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    threshold = max(0.1, 0.9 - (0.8 * (remaining_nodes / (remaining_nodes + 1))))

    # Get nearest neighbors with weights inversely proportional to distance
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]

    # Normalize weights
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # Select node based on dynamic threshold
    if random.random() < threshold:
        # Weighted random selection from top 3 nearest
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        candidate_weights = normalized_weights[:min(3, len(normalized_weights))]
        next_node = random.choices(candidates, weights=candidate_weights, k=1)[0]
    else:
        # Random selection with probability proportional to normalized weights
        next_node = random.choices(nearest_neighbors, weights=normalized_weights, k=1)[0]

    return next_node
