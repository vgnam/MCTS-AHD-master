import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Probability of selecting destination increases as unvisited nodes decrease
        p_dest = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
        if random.random() < p_dest:
            return destination_node

    # Temperature-based selection: favors closer nodes at higher temperatures
    temperature = len(unvisited_nodes) / len(distance_matrix)
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate selection probabilities using a softmax-like approach
    distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
    min_dist = min(distances) if distances else 0
    max_dist = max(distances) if distances else 1
    normalized_distances = [(max_dist - d + 1e-10) / (max_dist - min_dist + 1e-10) for d in distances]

    # Weighted selection based on temperature and distance
    weights = [math.exp((d / temperature) if temperature > 0 else 0) for d in normalized_distances]
    total_weight = sum(weights)
    weights = [w / total_weight for w in weights]

    next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    return next_node
