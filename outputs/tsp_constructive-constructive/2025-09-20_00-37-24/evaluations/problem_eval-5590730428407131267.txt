import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate a score for each unvisited node: distance + inverse of visitation count (simulated)
    visitation_counts = {node: random.randint(1, 10) for node in unvisited_nodes}  # Simulated visitation counts
    scores = [
        (node, distance_matrix[current_node][node] / (1 + math.log(visitation_counts[node])))
        for node in unvisited_nodes
    ]

    # Sort by score (lower is better)
    scores.sort(key=lambda x: x[1])
    top_nodes = [node for node, _ in scores[:min(5, len(scores))]]

    # 80% chance to pick from top 5, 20% chance to pick a random node
    if random.random() < 0.8:
        next_node = random.choice(top_nodes)
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
