import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate temperature based on remaining nodes (higher temperature for more exploration)
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    # Dynamic probability based on distance ratios
    if nearest_neighbors:
        min_dist = distance_matrix[current_node][nearest_neighbors[0]]
        max_dist = distance_matrix[current_node][nearest_neighbors[-1]]
        dist_range = max_dist - min_dist if max_dist != min_dist else 1

        # Normalized distance scores for stochastic selection
        scores = [math.exp(-(distance_matrix[current_node][node] - min_dist) / (dist_range * temperature))
                  for node in nearest_neighbors]
        total_score = sum(scores)
        probabilities = [score / total_score for score in scores]

        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
