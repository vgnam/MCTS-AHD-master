import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate dynamic probabilities based on distance ratios
    if len(nearest_neighbors) > 1:
        distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
        min_dist = min(distances)
        temp = 1.0 / (1.0 + min_dist)  # Temperature parameter based on minimum distance

        # Softmax-like probability distribution
        probs = [math.exp(-d / temp) for d in distances]
        probs = [p / sum(probs) for p in probs]

        next_node = random.choices(nearest_neighbors, weights=probs, k=1)[0]
    else:
        next_node = nearest_neighbors[0]

    return next_node
