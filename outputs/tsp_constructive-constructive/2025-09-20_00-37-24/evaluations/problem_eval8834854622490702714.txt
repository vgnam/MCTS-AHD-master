import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        # Higher probability of selecting destination if it's nearby
        distance_to_dest = distance_matrix[current_node][destination_node]
        max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
        selection_prob = 0.5 + 0.5 * (1 - distance_to_dest / max_distance) if max_distance > 0 else 0.5
        if random.random() < selection_prob:
            return destination_node

    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic exploration probability based on remaining nodes
    exploration_prob = 0.1 * (1 - math.exp(-0.1 * len(unvisited_nodes)))

    if random.random() < (1 - exploration_prob):
        # Prefer top 3 nearest with decreasing probability
        top_k = min(3, len(nearest_neighbors))
        weights = [math.exp(-0.5 * i) for i in range(top_k)]
        next_node = random.choices(nearest_neighbors[:top_k], weights=weights, k=1)[0]
    else:
        # Explore with probability inversely proportional to distance
        distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
        if max(distances) > 0:
            weights = [1/d for d in distances]
            next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
