import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if not nearest_neighbors:
        return None

    # Calculate novelty scores (inverse of distance to encourage exploration)
    novelty_scores = [1.0 / (distance_matrix[current_node][node] + 1e-9) for node in nearest_neighbors]

    # Dynamic probability: blend of distance and novelty
    total_weight = sum(novelty_scores)
    probabilities = [score / total_weight for score in novelty_scores]

    # 80% chance to pick based on weighted novelty, 20% random
    if random.random() < 0.8:
        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
