import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate centrality for each node (simplified as average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        centrality[node] = total_distance / max(1, len(unvisited_nodes) - 1)

    # Calculate selection probabilities: inverse of distance and centrality
    probabilities = []
    total_weight = 0.0
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        inv_dist = 1.0 / (distance + 1e-6)  # Avoid division by zero
        inv_centrality = 1.0 / (centrality[node] + 1e-6)
        weight = inv_dist * inv_centrality
        probabilities.append(weight)
        total_weight += weight

    # Normalize probabilities
    probabilities = [w / total_weight for w in probabilities]

    # Introduce stochasticity: 90% chance to pick based on probabilities, 10% random
    if random.random() < 0.9:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
