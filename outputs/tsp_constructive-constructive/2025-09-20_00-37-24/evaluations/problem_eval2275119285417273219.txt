import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate temperature based on remaining unvisited nodes (decreases as progress is made)
    temperature = len(unvisited_nodes) / (len(distance_matrix) - 1) if len(distance_matrix) > 1 else 1.0

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Probability of selecting the nearest neighbor increases with lower temperature
    selection_prob = 1.0 - math.exp(-temperature)

    if random.random() < selection_prob:
        # Exploit: select from top 3 nearest neighbors
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Explore: select a random node with probability proportional to inverse distance
        inverse_distances = [1.0 / (distance_matrix[current_node][node] + 1e-10) for node in nearest_neighbors]
        total = sum(inverse_distances)
        probabilities = [d / total for d in inverse_distances]
        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]

    return next_node
