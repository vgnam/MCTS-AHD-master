import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Probability of selecting destination increases as more nodes remain
        remaining_nodes = len(unvisited_nodes)
        total_nodes = len(distance_matrix)
        destination_prob = 0.5 + (remaining_nodes / total_nodes) * 0.5

        if random.random() < destination_prob:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Weighted selection based on inverse distance
    weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select based on weighted probabilities
    next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]

    return next_node
