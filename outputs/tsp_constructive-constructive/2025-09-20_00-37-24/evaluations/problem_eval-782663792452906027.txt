def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [(node, distance_matrix[current_node][node]) for node in unvisited_nodes]
    distances.sort(key=lambda x: x[1])

    # Dynamic probability threshold based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    threshold = 0.7 + 0.2 * (remaining_nodes / len(distance_matrix))  # Higher when more nodes remain

    if random.random() < threshold:
        # Weighted selection: closer nodes have higher probability
        weights = [1.0 / (1.0 + dist) for (_, dist) in distances[:5]]  # Consider top 5 nodes
        weights = [w / sum(weights) for w in weights]  # Normalize
        next_node = random.choices([node for (node, _) in distances[:5]], weights=weights)[0]
    else:
        # Random selection from all unvisited nodes
        next_node = random.choice(unvisited_nodes)

    return next_node
