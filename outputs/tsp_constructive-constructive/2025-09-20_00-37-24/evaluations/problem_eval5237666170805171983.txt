import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate inverse distance weights
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    inv_distances = [1.0 / (d + 1e-6) for d in distances]  # Avoid division by zero

    # Normalize to get probabilities
    total = sum(inv_distances)
    probs = [d / total for d in inv_distances]

    # Adjust probabilities based on historical visit frequency (simulated here)
    visit_counts = {node: random.randint(1, 5) for node in unvisited_nodes}  # Placeholder for actual counts
    max_count = max(visit_counts.values()) if visit_counts else 1
    adjusted_probs = [p * (1 - visit_counts[node]/max_count) for node, p in zip(unvisited_nodes, probs)]

    # Normalize adjusted probabilities
    total_adjusted = sum(adjusted_probs)
    if total_adjusted > 0:
        adjusted_probs = [p / total_adjusted for p in adjusted_probs]
    else:
        adjusted_probs = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)

    # Select node based on adjusted probabilities
    next_node = random.choices(unvisited_nodes, weights=adjusted_probs, k=1)[0]
    return next_node
