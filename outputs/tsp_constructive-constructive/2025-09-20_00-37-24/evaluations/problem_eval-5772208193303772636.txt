import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    # Calculate remaining distance to destination
    remaining_nodes = len(unvisited_nodes)
    if destination_node in unvisited_nodes:
        remaining_nodes -= 1

    # Dynamic probability: higher when fewer nodes remain
    dynamic_prob = 0.7 + 0.3 * (1 - remaining_nodes / (remaining_nodes + len(unvisited_nodes)))

    # Select next node based on dynamic probability
    if random.random() < dynamic_prob:
        # Bias towards nodes that are closer to destination
        weighted_nodes = []
        for node in unvisited_nodes:
            if node == destination_node:
                weighted_nodes.append((node, 0))  # Highest priority
            else:
                # Weight based on distance to destination and current distance
                distance_to_dest = distance_matrix[node][destination_node]
                current_distance = distance_matrix[current_node][node]
                weight = current_distance + 0.5 * distance_to_dest
                weighted_nodes.append((node, weight))

        # Select node with lowest weight
        weighted_nodes.sort(key=lambda x: x[1])
        candidates = [node for node, _ in weighted_nodes[:min(3, len(weighted_nodes))]]
        next_node = random.choice(candidates)
    else:
        # Stochastic nearest neighbor selection
        nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
