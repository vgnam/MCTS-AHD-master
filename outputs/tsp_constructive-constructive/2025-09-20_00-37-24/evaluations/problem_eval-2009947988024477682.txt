import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability based on remaining unvisited nodes
    exploration_prob = max(0.1, 0.5 * (len(unvisited_nodes) / len(distance_matrix)))
    if random.random() < exploration_prob:
        # Favor nodes that are not too far but not the absolute nearest
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        # Apply a softmax-like selection to bias towards closer nodes
        weights = [math.exp(-0.5 * distance_matrix[current_node][node]) for node in candidates]
        next_node = random.choices(candidates, weights=weights, k=1)[0]
    else:
        # Random selection with higher bias towards the nearest
        weights = [1 / (i + 1) for i in range(min(5, len(nearest_neighbors)))]
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
