import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    pheromone_levels = {node: 1.0 for node in unvisited_nodes}

    def desirability(node):
        alpha = 1.0
        beta = 2.0
        return (pheromone_levels[node]**alpha) / (distance_matrix[current_node][node]**beta)

    desirabilities = {node: desirability(node) for node in unvisited_nodes}
    total_desirability = sum(desirabilities.values())
    probabilities = {node: desirabilities[node] / total_desirability for node in unvisited_nodes}

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if random.random() < 0.9:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        desirability_sum = sum(probabilities[node] for node in candidates)
        if desirability_sum > 0:
            next_node = random.choices(candidates, weights=[probabilities[node] for node in candidates], k=1)[0]
        else:
            next_node = random.choice(candidates)
    else:
        next_node = random.choices(list(unvisited_nodes), weights=[probabilities[node] for node in unvisited_nodes], k=1)[0]

    return next_node
