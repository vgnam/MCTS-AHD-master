import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate average distance to all unvisited nodes for each candidate
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]

    # Novel mechanism: probabilistic selection based on inverse of average distance
    if len(candidates) > 1:
        avg_distances = []
        for node in candidates:
            avg_dist = np.mean([distance_matrix[node][n] for n in unvisited_nodes if n != node])
            avg_distances.append(avg_dist)

        # Normalize to get selection probabilities
        min_avg = min(avg_distances)
        max_avg = max(avg_distances)
        if max_avg != min_avg:
            probabilities = [(max_avg - d) / (max_avg - min_avg) for d in avg_distances]
        else:
            probabilities = [1.0 / len(candidates)] * len(candidates)

        # Add small randomness to avoid deterministic behavior
        probabilities = [p + 0.01 for p in probabilities]
        probabilities = [p / sum(probabilities) for p in probabilities]

        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
