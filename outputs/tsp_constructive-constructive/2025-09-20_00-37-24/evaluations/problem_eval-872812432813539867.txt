import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate temperature based on remaining nodes (lower temperature as fewer nodes remain)
    temperature = len(unvisited_nodes) / len(distance_matrix)

    # Adaptive stochasticity: higher temperature increases randomness
    if random.random() < math.exp(-temperature):  # Probability decreases with temperature
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
