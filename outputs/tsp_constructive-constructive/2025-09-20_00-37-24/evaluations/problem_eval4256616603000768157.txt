import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Increase probability of selecting destination when it's close
        proximity_factor = 1 / (1 + distance_matrix[current_node][destination_node])
        if random.random() < proximity_factor:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochasticity: higher when destination is far
    temperature = 1.0 / (1 + 0.5 * distance_matrix[current_node][destination_node])
    if random.random() < temperature:
        next_node = random.choice(nearest_neighbors[:min(3, len(nearest_neighbors))])
    else:
        # Use a weighted random selection based on inverse distance
        weights = [1 / (1 + distance_matrix[current_node][node]) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
