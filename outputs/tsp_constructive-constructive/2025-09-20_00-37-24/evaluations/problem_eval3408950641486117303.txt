def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        distance_to_destination = distance_matrix[current_node][destination_node]
        bias_probability = max(0.1, min(0.9, 0.5 + (10 / (distance_to_destination + 1))))
        if random.random() < bias_probability:
            return destination_node

    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if random.random() < 0.8:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        if len(nearest_neighbors) > 3:
            candidates = nearest_neighbors[3:]
            next_node = random.choice(candidates)
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
