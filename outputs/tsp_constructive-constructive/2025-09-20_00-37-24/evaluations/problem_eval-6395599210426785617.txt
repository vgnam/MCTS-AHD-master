import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    stochasticity_threshold = 0.7 * remaining_ratio + 0.2  # Decreases as tour progresses

    # Bonus for nodes that are close and have been visited recently (simulated here)
    # In practice, you'd track visited nodes and their timestamps
    if random.random() < stochasticity_threshold:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Introduce a bonus for nodes that are close and have been visited recently
        # This is a simplified simulation - in practice, you'd use actual visit history
        if len(nearest_neighbors) > 1:
            bonus_candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
            next_node = random.choices(bonus_candidates, weights=[1.5, 1.3, 1.1, 1.0, 1.0])[0]
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
