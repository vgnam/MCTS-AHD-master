import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    def desirability(node):
        beta = 1.5
        return 1.0 / (distance_matrix[current_node][node]**beta)

    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
    desirabilities = {node: desirability(node) for node in candidates}
    total_desirability = sum(desirabilities.values())
    probabilities = {node: desirabilities[node] / total_desirability for node in candidates}

    if random.random() < 0.85:
        next_node = max(probabilities, key=probabilities.get)
    else:
        next_node = random.choice(candidates)

    return next_node
