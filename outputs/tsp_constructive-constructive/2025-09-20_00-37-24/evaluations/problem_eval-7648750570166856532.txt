import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate adaptive bias: distance to destination and historical frequency
    bias_factors = []
    for node in unvisited_nodes:
        dist_to_dest = distance_matrix[node][destination_node]
        dist_to_current = distance_matrix[current_node][node]
        # Bias: inverse of distance to destination, weighted by current distance
        bias = (1 / (dist_to_dest + 1e-6)) * (1 / (dist_to_current + 1e-6))
        bias_factors.append(bias)

    # Normalize bias factors to probabilities
    total_bias = sum(bias_factors)
    probabilities = [b / total_bias for b in bias_factors]

    # Introduce stochasticity: sometimes pick a node that's not the absolute nearest
    if random.random() < 0.8:  # 80% chance to pick based on bias
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:  # 20% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
