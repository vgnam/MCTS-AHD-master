import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate nearest neighbors
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive selection: weight by inverse distance and selection frequency
    if len(nearest_neighbors) > 0:
        # Simulate historical selection frequency (higher for more recently selected)
        selection_weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        total_weight = sum(selection_weights)
        normalized_weights = [w / total_weight for w in selection_weights]

        # 80% chance to pick from top 3 weighted, 20% chance to pick randomly weighted
        if random.random() < 0.8:
            candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
            candidate_weights = normalized_weights[:min(3, len(normalized_weights))]
            next_node = random.choices(candidates, weights=candidate_weights, k=1)[0]
        else:
            next_node = random.choices(nearest_neighbors, weights=normalized_weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
