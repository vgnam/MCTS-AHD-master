import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None
    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate node degrees (number of connections)
    node_degrees = {node: sum(1 for d in distance_matrix[node] if d > 0) for node in unvisited_nodes}

    # Calculate dynamic weights: inverse distance * inverse degree
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degrees[node]
        weight = (1 / distance) * (1 / (degree + 1))  # +1 to avoid division by zero
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    if total_weight == 0:
        total_weight = 1  # avoid division by zero
    normalized_weights = [w / total_weight for w in weights]

    # Introduce stochasticity: 90% chance to pick based on weights, 10% random
    if random.random() < 0.9:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
