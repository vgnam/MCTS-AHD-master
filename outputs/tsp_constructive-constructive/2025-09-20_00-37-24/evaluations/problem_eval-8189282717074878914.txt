import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, iteration=0):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochasticity: higher temperature increases randomness
    temperature_factor = max(0.1, 1.0 - (0.1 * iteration))  # Decrease temperature over iterations
    prob_threshold = 0.9 * math.exp(-temperature_factor * 0.5)  # Exponential decay

    if random.random() < prob_threshold:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
