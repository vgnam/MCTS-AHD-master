import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate node degrees (number of connections to unvisited nodes)
    node_degrees = {}
    for node in unvisited_nodes:
        degree = sum(1 for neighbor in unvisited_nodes if distance_matrix[node][neighbor] > 0)
        node_degrees[node] = degree

    # Temperature for Boltzmann selection (decreases as exploration progresses)
    temperature = max(1.0, 0.5 * len(unvisited_nodes) / (len(distance_matrix) - 1))

    # Calculate selection probabilities using inverse distance and node degree
    probabilities = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degrees[node]
        # Combine inverse distance and degree with temperature
        score = (1.0 / (distance + 1e-6)) * (degree ** 0.5)  # Avoid division by zero
        probabilities.append(score ** (1.0 / temperature))

    # Normalize probabilities
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    # Select node using Boltzmann selection
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
