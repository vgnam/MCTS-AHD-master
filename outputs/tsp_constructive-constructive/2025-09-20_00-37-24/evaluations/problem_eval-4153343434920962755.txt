import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    total_unvisited = len(unvisited_nodes)
    exploration_depth = (len(unvisited_nodes) - total_unvisited) / total_unvisited if total_unvisited > 0 else 0

    # Adaptive selection pressure
    pressure = 0.7 + 0.3 * (1 - exploration_depth)  # Higher pressure early in exploration

    # Temperature cooling schedule
    temperature = max(0.1, 1.0 - exploration_depth * 0.5)

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic candidate selection
    num_candidates = max(1, int(pressure * len(nearest_neighbors)))
    candidates = nearest_neighbors[:num_candidates]

    # Stochastic selection with temperature
    weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in candidates]
    next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
