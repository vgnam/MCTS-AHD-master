import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilities based on inverse distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    if min_dist == max_dist:
        probabilities = [1.0 / len(unvisited_nodes)] * len(unvisited_nodes)
    else:
        probabilities = [(max_dist - d + 1e-6) / (max_dist - min_dist) for d in distances]
        total = sum(probabilities)
        probabilities = [p / total for p in probabilities]

    # 90% chance to pick based on probability, 10% random
    if random.random() < 0.9:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
