def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        # Increase probability of selecting destination as unvisited nodes decrease
        destination_prob = max(0.1, 0.5 * (len(unvisited_nodes) / len(distance_matrix)))
        if random.random() < destination_prob:
            return destination_node

    if not unvisited_nodes:
        return None

    # Temperature-based stochasticity: decreases as fewer nodes remain
    temperature = len(unvisited_nodes) / len(distance_matrix)
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic candidate selection based on temperature
    num_candidates = max(1, int(3 * (1 - temperature)))
    candidates = nearest_neighbors[:min(num_candidates, len(nearest_neighbors))]

    # Probabilistic selection with temperature-based bias
    selection_prob = [max(0.1, 0.9 ** (i / len(candidates))) for i in range(len(candidates))]
    selection_prob = [p / sum(selection_prob) for p in selection_prob]
    next_node = random.choices(candidates, weights=selection_prob, k=1)[0]

    return next_node
