import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate attractiveness scores for each candidate
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
    scores = []
    for node in candidates:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else float('inf')
        # Score combines proximity to current node and potential to reach destination
        score = (1 / (distance_to_node + 1e-6)) + 0.5 * (1 / (distance_to_dest + 1e-6))
        scores.append(score)

    # Normalize scores to probabilities
    total_score = sum(scores)
    probabilities = [score / total_score for score in scores]

    # Select node based on probabilities
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]

    return next_node
