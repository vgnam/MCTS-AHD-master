import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temperature=1.0, total_nodes=None):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic candidate pool size based on remaining nodes
    if total_nodes is not None:
        remaining_ratio = len(unvisited_nodes) / total_nodes
        candidate_size = max(1, int(3 * remaining_ratio))
    else:
        candidate_size = min(3, len(nearest_neighbors))

    # Temperature-based stochasticity
    if random.random() < math.exp(-temperature):  # Probability decreases with temperature
        next_node = random.choice(nearest_neighbors)
    else:
        candidates = nearest_neighbors[:min(candidate_size, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
