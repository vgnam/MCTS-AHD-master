import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on distance and inverse visit frequency (simulated)
    visit_counts = {node: random.randint(1, 10) for node in unvisited_nodes}  # Simulate historical data
    weights = [
        (1 / distance_matrix[current_node][node]) * (1 / (visit_counts[node] + 1))
        for node in unvisited_nodes
    ]
    weights = np.array(weights)
    weights = weights / weights.sum()  # Normalize

    # 80% chance to pick from weighted distribution, 20% chance to pick random
    if random.random() < 0.8:
        next_node = np.random.choice(unvisited_nodes, p=weights)
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
