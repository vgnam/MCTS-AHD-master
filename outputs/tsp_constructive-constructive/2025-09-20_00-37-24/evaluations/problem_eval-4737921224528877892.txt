import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic stochasticity: higher chance of exploitation early, more exploration later
    exploration_prob = 0.1 + (0.9 * (len(unvisited_nodes) / len(distance_matrix))) ** 2

    if random.random() < exploration_prob:
        # Weighted random selection: closer nodes have higher probability
        weights = [math.exp(-distance_matrix[current_node][node] / max(1, len(unvisited_nodes)))
                  for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # Select from top k nearest, where k decreases as unvisited nodes decrease
        k = max(1, min(3, len(nearest_neighbors), len(unvisited_nodes)))
        candidates = nearest_neighbors[:k]
        next_node = random.choice(candidates)

    return next_node
