import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on inverse distance (closer nodes have higher weight)
    weights = []
    for node in unvisited_nodes:
        dist = distance_matrix[current_node][node]
        if dist == 0:  # avoid division by zero for same node
            weights.append(float('inf'))
        else:
            weights.append(1.0 / dist)

    # Normalize weights to create a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Temperature-based stochasticity: higher temperature early on, lower later
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # decreases as nodes are visited
    if random.random() < temperature:  # higher chance to pick random with higher temperature
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        # Pick from top 3 nearest with some bias
        nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        candidate_weights = [probabilities[unvisited_nodes.index(node)] for node in candidates]
        next_node = random.choices(candidates, weights=candidate_weights, k=1)[0]

    return next_node
