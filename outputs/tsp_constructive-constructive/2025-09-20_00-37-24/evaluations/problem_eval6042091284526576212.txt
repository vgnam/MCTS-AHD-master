import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, temp=1.0, exploration_factor=0.5):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochasticity: higher temp increases randomness
    temp_adjusted_prob = 0.9 * (1 - temp) + 0.1
    if random.random() < temp_adjusted_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Exploration factor: higher factor increases chance of picking farther nodes
        exploration_prob = exploration_factor * (1 - temp)
        if random.random() < exploration_prob:
            # Pick a node farther than the nearest neighbors
            if len(nearest_neighbors) > 3:
                candidates = nearest_neighbors[3:]
                next_node = random.choice(candidates)
            else:
                next_node = random.choice(nearest_neighbors)
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
