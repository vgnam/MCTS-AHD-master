import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Dynamic stochasticity factor based on remaining nodes and temperature
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    temperature = 1.0 - math.exp(-remaining_ratio)  # Decreases as nodes are visited
    exploration_prob = 0.5 * temperature  # Higher early, lower later

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if random.random() < (1 - exploration_prob):  # Higher chance to pick from top 3
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        weights = [1.0 / (i + 1) for i in range(len(candidates))]  # Prefer closer nodes
        next_node = random.choices(candidates, weights=weights, k=1)[0]
    else:  # Exploration phase
        # Weight nodes by inverse distance to encourage diversity
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
