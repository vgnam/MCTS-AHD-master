import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive stochasticity: probability increases as fewer nodes remain
    exploration_prob = 0.1 + 0.8 * (1 - len(unvisited_nodes) / len(distance_matrix))

    if random.random() < exploration_prob:
        # Weighted random selection based on inverse distance (closer nodes more likely)
        weights = [1 / (distance_matrix[current_node][node] + 1e-6) for node in unvisited_nodes]
        next_node = random.choices(unvisited_nodes, weights=weights, k=1)[0]
    else:
        # Select from top k nearest, where k decreases as problem progresses
        k = max(1, int(3 * len(unvisited_nodes) / len(distance_matrix)))
        candidates = nearest_neighbors[:min(k, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
