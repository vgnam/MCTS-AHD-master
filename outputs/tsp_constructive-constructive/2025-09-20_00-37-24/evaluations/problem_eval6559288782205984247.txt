import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate inverse distance weights
    total_weight = 0.0
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance == 0:
            weight = float('inf')
        else:
            weight = 1.0 / distance
        weights.append(weight)
        total_weight += weight

    # Normalize weights
    normalized_weights = [w / total_weight for w in weights]

    # Periodic exploration: every 5 steps, increase chance to pick distant nodes
    exploration_phase = len(unvisited_nodes) % 5 == 0
    if exploration_phase:
        # Invert weights for exploration
        inverted_weights = [1.0 - w for w in normalized_weights]
        total_inverted = sum(inverted_weights)
        normalized_weights = [w / total_inverted for w in inverted_weights]

    # Select based on weights
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    return next_node
