import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    threshold = 0.9 - (0.5 * (remaining_nodes / len(distance_matrix)))  # Decreases as fewer nodes remain

    # Hybrid selection: nearest neighbor with weighted randomness
    if random.random() < threshold:
        # Weighted selection: higher probability for closer nodes
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # Random selection with bias towards middle-distance nodes
        mid_index = len(nearest_neighbors) // 2
        candidates = nearest_neighbors[mid_index-1:mid_index+2] if len(nearest_neighbors) > 2 else nearest_neighbors
        next_node = random.choice(candidates)

    return next_node
