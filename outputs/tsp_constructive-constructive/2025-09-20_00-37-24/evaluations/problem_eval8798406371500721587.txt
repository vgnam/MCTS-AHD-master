def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Dynamic exploration-exploitation trade-off
    if len(unvisited_nodes) > 3:
        # Favor closer nodes with higher probability
        weights = [(max_dist - d + 1e-6) for d in distances]  # Add small value to avoid division by zero
    else:
        # When few nodes remain, allow longer jumps
        weights = [(1.0 / (d + 1e-6)) for d in distances]

    # Add small random perturbation to avoid deterministic behavior
    weights = [w + random.uniform(0, 0.1) for w in weights]

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probs = [w / total_weight for w in weights]

    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    return next_node
