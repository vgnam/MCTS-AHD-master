def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Dynamic probability threshold based on remaining nodes
    remaining = len(unvisited_nodes)
    threshold = max(0.1, 0.9 - 0.05 * (10 - remaining))  # Decreases as nodes are visited

    if destination_node in unvisited_nodes:
        # Higher chance to pick destination when few nodes remain
        if random.random() < threshold or remaining <= 3:
            return destination_node

    # Temperature-based stochastic selection
    temperature = max(0.1, 1.0 - 0.1 * (10 - remaining))  # Decreases as nodes are visited
    if random.random() < temperature:
        # Exploitation: pick from nearest neighbors
        nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Exploration: pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
