import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate centrality scores (inverse of average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_dist = np.mean([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        centrality[node] = 1 / avg_dist if avg_dist != 0 else float('inf')

    # Calculate weights: combine inverse distance and centrality
    weights = []
    for node in unvisited_nodes:
        inv_dist = 1 / distance_matrix[current_node][node] if distance_matrix[current_node][node] != 0 else float('inf')
        weight = inv_dist * centrality[node]
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probs = [w / total_weight for w in weights]

    # Select node based on weighted random choice
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    # Introduce occasional randomness (10% chance to pick any node)
    if random.random() < 0.1:
        next_node = random.choice(unvisited_nodes)

    return next_node
