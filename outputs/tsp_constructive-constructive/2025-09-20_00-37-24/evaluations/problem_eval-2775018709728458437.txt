import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate dynamic exploration probability
    if destination_node is not None and unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        dest_distance = distance_matrix[current_node][destination_node]
        exploration_prob = min(0.5, max(0.1, 0.2 * (dest_distance / avg_distance)))
    else:
        exploration_prob = 0.2

    # Introduce dynamic stochasticity
    if random.random() < (1 - exploration_prob):
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Bias toward nodes with higher potential (inverse distance)
        weights = [1 / (1 + distance_matrix[current_node][node]) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
