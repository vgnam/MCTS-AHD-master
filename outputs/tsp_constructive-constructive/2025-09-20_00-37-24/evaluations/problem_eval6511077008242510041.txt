import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        # Probabilistically bias toward destination if unvisited
        if random.random() < 0.7:  # 70% chance to prioritize destination
            return destination_node

    if not unvisited_nodes:
        return None

    # Calculate exploration temperature (decreases as nodes are visited)
    exploration_temp = 1.0 - (1.0 / (len(unvisited_nodes) + 1))

    # Get nearest neighbors
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic selection based on exploration temperature
    if random.random() < exploration_temp:  # Higher temp = more exploration
        # Weighted random selection with inverse distance
        weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        total_weight = sum(weights)
        normalized_weights = [w / total_weight for w in weights]
        next_node = random.choices(nearest_neighbors, weights=normalized_weights, k=1)[0]
    else:  # Exploitation phase
        # Bias toward top 2 nearest neighbors with slight randomness
        candidates = nearest_neighbors[:min(2, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
