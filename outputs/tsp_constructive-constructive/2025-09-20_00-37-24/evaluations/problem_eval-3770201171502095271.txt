def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold based on remaining nodes and destination proximity
    remaining_nodes = len(unvisited_nodes)
    dest_distance = distance_matrix[current_node][destination_node] if destination_node in unvisited_nodes else float('inf')

    # Probability to pick from top 3 decreases as nodes are visited, and increases if destination is nearby
    probability_threshold = max(0.1, 0.9 * (remaining_nodes / (remaining_nodes + 10)) + 0.1 * (1 / (1 + dest_distance)))

    if random.random() < probability_threshold:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Greedy with decay: more likely to pick nearest as search progresses
        decay_factor = 1 - (remaining_nodes / (remaining_nodes + 10))
        if random.random() < decay_factor:
            next_node = nearest_neighbors[0]
        else:
            next_node = random.choice(nearest_neighbors)

    return next_node
