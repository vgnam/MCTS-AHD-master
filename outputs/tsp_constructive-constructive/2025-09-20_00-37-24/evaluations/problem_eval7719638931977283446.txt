import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, iteration=0, max_iterations=100):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochasticity: higher iterations lead to more randomness
    temperature = 1.0 - (iteration / max_iterations)
    exploitation_prob = 0.9 * temperature  # Decreases over iterations

    if random.random() < exploitation_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
