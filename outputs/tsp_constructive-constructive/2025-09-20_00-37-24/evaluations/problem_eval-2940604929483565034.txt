import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Calculate bias towards destination based on remaining unvisited nodes
        remaining_nodes = len(unvisited_nodes)
        bias_probability = 1 - (remaining_nodes / (remaining_nodes + 1)) ** 0.5  # Higher bias when fewer nodes remain

        if random.random() < bias_probability:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic selection: weight nodes by inverse distance and proximity to destination
    weights = []
    for node in nearest_neighbors:
        distance_to_node = distance_matrix[current_node][node]
        distance_to_destination = distance_matrix[node][destination_node] if destination_node in unvisited_nodes else 0
        weight = (1 / (distance_to_node + 1)) * (1 / (distance_to_destination + 1))
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # Stochastic selection with weighted probabilities
    if random.random() < 0.8:  # 80% chance to pick from weighted selection
        next_node = random.choices(nearest_neighbors, weights=normalized_weights, k=1)[0]
    else:  # 20% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
