import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability: higher chance to pick closer nodes when fewer unvisited nodes remain
    remaining_nodes = len(unvisited_nodes)
    selection_prob = 1.0 / (1.0 + math.exp(-0.1 * (remaining_nodes - 5)))

    if random.random() < selection_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Weighted random selection: farther nodes have lower probability
        weights = [1.0 / (1.0 + i) for i in range(len(nearest_neighbors))]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
