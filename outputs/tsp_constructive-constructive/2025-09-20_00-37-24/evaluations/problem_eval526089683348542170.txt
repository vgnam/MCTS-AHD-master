import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visit_history=None, temperature=1.0):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    if visit_history is None:
        visit_history = {node: 0 for node in unvisited_nodes}

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate weights based on distance and visit history
    weights = []
    for node in nearest_neighbors:
        distance_weight = 1.0 / (distance_matrix[current_node][node] + 1e-6)
        frequency_weight = 1.0 / (visit_history.get(node, 0) + 1)
        total_weight = distance_weight * frequency_weight
        weights.append(total_weight)

    # Normalize weights and apply temperature
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]
    adjusted_weights = [w ** (1.0 / temperature) for w in normalized_weights]

    # Select node based on adjusted weights
    next_node = random.choices(nearest_neighbors, weights=adjusted_weights, k=1)[0]

    return next_node
