def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic temperature based on remaining unvisited nodes
    remaining = len(unvisited_nodes)
    temperature = 1 / (1 + math.exp(-0.1 * (remaining - 10)))  # Sigmoid function

    # Use temperature to adjust exploration probability
    if random.random() < temperature:
        # Explore: pick from top 5 nearest with probability proportional to rank
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        weights = [1/(i+1) for i in range(len(candidates))]
        next_node = random.choices(candidates, weights=weights, k=1)[0]
    else:
        # Exploit: pick from top 3 nearest
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
