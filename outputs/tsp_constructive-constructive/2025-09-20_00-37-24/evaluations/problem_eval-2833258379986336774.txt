import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilistic weights based on inverse distance
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        if distance == 0:
            weights.append(0.0)
        else:
            weights.append(1.0 / distance)

    # Normalize weights
    total_weight = sum(weights)
    if total_weight == 0:
        return random.choice(unvisited_nodes)
    normalized_weights = [w / total_weight for w in weights]

    # Introduce stochasticity: 70% chance to pick based on weights, 30% chance to pick randomly
    if random.random() < 0.7:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
