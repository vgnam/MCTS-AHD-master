import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]

    pheromone_levels = {node: 1.0 for node in candidates}

    def desirability(node):
        alpha = 1.0
        beta = 2.0
        return (pheromone_levels[node]**alpha) / (distance_matrix[current_node][node]**beta)

    desirabilities = {node: desirability(node) for node in candidates}
    total_desirability = sum(desirabilities.values())
    probabilities = {node: desirabilities[node] / total_desirability for node in candidates}

    q = random.random()
    q0 = 0.9

    if q < q0:
        next_node = max(probabilities, key=probabilities.get)
    else:
        if random.random() < 0.1:
            next_node = random.choice(nearest_neighbors)
        else:
            cumulative_probability = 0.0
            r = random.random()
            for node, probability in probabilities.items():
                cumulative_probability += probability
                if r <= cumulative_probability:
                    next_node = node
                    break
            else:
                next_node = random.choice(candidates)

    return next_node
