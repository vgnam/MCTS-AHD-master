import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    if random.random() < 0.9: # 90% chance to pick from top 3 nearest with balance
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        min_score = float('inf')
        next_node = None
        for node in candidates:
            current_distance = distance_matrix[current_node][node]
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
            score = current_distance + avg_distance
            if score < min_score:
                min_score = score
                next_node = node
    else: # 10% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
