import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on inverse distance and potential path improvement
    weights = []
    for node in unvisited_nodes:
        dist = distance_matrix[current_node][node]
        # Weight is inverse distance plus a small random factor to encourage exploration
        weight = (1.0 / dist) + (0.1 * random.random())
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Dynamic exploration rate: higher when more unvisited nodes remain
    exploration_rate = 0.5 + (0.5 * (len(unvisited_nodes) / len(distance_matrix)))

    if random.random() < exploration_rate:
        # Select based on weighted probabilities
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        # Fallback to nearest neighbor for exploitation
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
