import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Temperature-based stochasticity: exploration decreases over time
    temperature = len(unvisited_nodes) / (len(distance_matrix) if distance_matrix else 1)
    exploration_prob = 0.5 * (1 + math.tanh(5 * (temperature - 0.5)))

    # Dynamic candidate selection: prioritize nodes closer to current or destination
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    dest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[node][destination_node])

    # Combine candidates with weighted randomness
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
    candidates += dest_neighbors[:min(2, len(dest_neighbors))]
    candidates = list(set(candidates))  # Remove duplicates

    if not candidates:
        candidates = unvisited_nodes

    # Temperature-controlled selection
    if random.random() < exploration_prob:
        next_node = random.choice(candidates)
    else:
        # Weighted selection: closer nodes have higher chance
        weights = [1 / (distance_matrix[current_node][node] + 1e-6) for node in candidates]
        next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
