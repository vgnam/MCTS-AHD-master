import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, initial_temp=100.0, cooling_rate=0.99):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Temperature-based cooling schedule
    temp = initial_temp * (cooling_rate ** (len(unvisited_nodes) / len(distance_matrix)))

    # Calculate selection probabilities using temperature and inverse distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    inv_distances = [1.0 / (d + 1e-10) for d in distances]  # Avoid division by zero
    weighted_probs = [math.exp(inv_dist / temp) for inv_dist in inv_distances]
    total_weight = sum(weighted_probs)
    normalized_probs = [w / total_weight for w in weighted_probs]

    # Select node based on probabilities
    if random.random() < 0.9:  # 90% chance to use temperature-based selection
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:  # 10% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
