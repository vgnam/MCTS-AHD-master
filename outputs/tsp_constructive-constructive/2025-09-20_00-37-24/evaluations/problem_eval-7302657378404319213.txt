import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Dynamic temperature based on remaining unvisited nodes
    temperature = max(0.1, 1.0 - (len(unvisited_nodes) / (len(distance_matrix) - 1)))

    # Calculate probabilities using inverse distance and temperature
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)

    # Avoid division by zero and normalize distances
    normalized_distances = [(max_dist - d + 0.01) / (max_dist - min_dist + 0.01) for d in distances]

    # Apply temperature to probabilities
    probabilities = [math.exp(n_dist / temperature) for n_dist in normalized_distances]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    # Select next node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
