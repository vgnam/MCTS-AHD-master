import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate inverse distance weights and centrality (average distance to other nodes)
    weights = []
    centrality = []
    for node in unvisited_nodes:
        inv_dist = 1.0 / (distance_matrix[current_node][node] + 1e-6)  # Avoid division by zero
        avg_dist = np.mean([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        centrality_score = 1.0 / (avg_dist + 1e-6) if avg_dist > 0 else 0.0
        weights.append(inv_dist * centrality_score)
        centrality.append(centrality_score)

    # Normalize weights
    total_weight = sum(weights)
    if total_weight == 0:
        return random.choice(unvisited_nodes)

    probs = [w / total_weight for w in weights]

    # Introduce stochasticity: 80% chance to pick based on weighted probability, 20% chance to pick random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
