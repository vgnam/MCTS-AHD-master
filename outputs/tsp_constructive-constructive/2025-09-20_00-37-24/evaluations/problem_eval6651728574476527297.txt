import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on distance and potential cycle closure
    weights = []
    total_weight = 0.0
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Heuristic: favor nodes that can form shorter cycles with the destination
        cycle_penalty = 1.0
        if destination_node in unvisited_nodes:
            cycle_penalty = 1.0 / (1.0 + distance_matrix[node][destination_node])
        weight = (1.0 / (1.0 + distance)) * cycle_penalty
        weights.append(weight)
        total_weight += weight

    # Normalize weights to form a probability distribution
    probabilities = [w / total_weight for w in weights]

    # Select a node based on the weighted probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
