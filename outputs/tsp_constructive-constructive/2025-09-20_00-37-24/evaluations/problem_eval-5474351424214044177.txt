import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic exploration: adjust probability based on remaining unvisited nodes
    exploration_factor = 0.1 + 0.8 * (len(unvisited_nodes) / len(distance_matrix))
    if random.random() < exploration_factor:  # Higher chance to explore when more nodes remain
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # Lower chance to pick a random node when close to completion
        next_node = random.choice(nearest_neighbors)

    return next_node
