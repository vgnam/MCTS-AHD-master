import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold: higher when fewer unvisited nodes remain
    exploration_prob = 0.1 + (0.9 * (1.0 - len(unvisited_nodes) / len(distance_matrix)))

    if random.random() < exploration_prob:
        next_node = random.choice(nearest_neighbors)
    else:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
