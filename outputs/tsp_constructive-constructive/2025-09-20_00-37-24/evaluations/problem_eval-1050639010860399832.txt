def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance == 0:
            return destination_node
        bias_probability = 1 / (1 + dest_distance)
        if random.random() < bias_probability:
            return destination_node

    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    if not nearest_neighbors:
        return None

    selection_probabilities = [1 / (1 + distance_matrix[current_node][node]) for node in nearest_neighbors]
    total_prob = sum(selection_probabilities)
    normalized_probs = [p / total_prob for p in selection_probabilities]

    if random.random() < 0.8:
        next_node = random.choices(nearest_neighbors, weights=normalized_probs, k=1)[0]
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
