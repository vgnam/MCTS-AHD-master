def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on distance and novelty (inverse of visit frequency)
    weights = []
    for node in unvisited_nodes:
        distance_weight = 1.0 / distance_matrix[current_node][node]  # Prefer closer nodes
        novelty_weight = 1.0 / (1 + unvisited_nodes.count(node))    # Prefer less visited nodes
        weights.append(distance_weight * novelty_weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select node based on the probability distribution
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
