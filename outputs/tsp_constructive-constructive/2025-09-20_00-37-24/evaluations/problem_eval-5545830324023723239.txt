import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Calculate dynamic destination bias
    total_nodes = len(unvisited_nodes) + 1  # +1 for current node
    destination_bias = 1.0 - (len(unvisited_nodes) / total_nodes)  # Increases as unvisited_nodes decreases

    # Temperature for exploration (decreases over time)
    temperature = len(unvisited_nodes) / total_nodes

    # Check if destination is unvisited and apply bias
    if destination_node in unvisited_nodes:
        if random.random() < destination_bias:
            return destination_node

    # Get nearest neighbors
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Stochastic selection with temperature-based exploration
    if random.random() < (0.9 * temperature):  # Higher chance to pick from top 3 as temperature increases
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Temperature-based random selection
        weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
