import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Introduce stochasticity: higher chance to pick from top 2 nearest, lower for others
    rand_val = random.random()
    if rand_val < 0.7:  # 70% chance to pick from top 2 nearest
        candidates = nearest_neighbors[:min(2, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    elif rand_val < 0.95:  # 25% chance to pick from next 3 (if available)
        candidates = nearest_neighbors[min(2, len(nearest_neighbors)):min(5, len(nearest_neighbors))]
        next_node = random.choice(candidates) if candidates else random.choice(nearest_neighbors)
    else:  # 5% chance to pick a random node
        next_node = random.choice(nearest_neighbors)

    return next_node
