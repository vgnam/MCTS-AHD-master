import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]

    # Calculate probabilities based on inverse distance
    distances = [distance_matrix[current_node][node] for node in candidates]
    inverse_distances = [1.0 / (d + 1e-9) for d in distances]  # Add a small value to avoid division by zero
    total_inverse_distance = sum(inverse_distances)
    probabilities = [inv_dist / total_inverse_distance for inv_dist in inverse_distances]

    # Stochastic selection based on probabilities
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    
    return next_node
