import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        destination_distance = distance_matrix[current_node][destination_node]
        total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
        bias_probability = min(1.0, 0.7 * (1 - destination_distance / total_distance))

        if random.random() < bias_probability:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive candidate range based on current path progress
    progress_ratio = 1 - (len(unvisited_nodes) / len(distance_matrix))
    candidate_range = max(1, min(5, int(3 + 2 * progress_ratio)))

    if random.random() < 0.85:  # 85% chance to pick from adaptive range
        candidates = nearest_neighbors[:min(candidate_range, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # 15% chance to pick a node with inverse distance weighting
        weights = [1 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
