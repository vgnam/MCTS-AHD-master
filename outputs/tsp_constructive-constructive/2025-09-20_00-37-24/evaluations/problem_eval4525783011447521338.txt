import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights inversely proportional to distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances)
    max_dist = max(distances)
    if min_dist == max_dist:
        weights = [1.0 for _ in unvisited_nodes]
    else:
        weights = [(max_dist - d + min_dist) / (max_dist - min_dist) for d in distances]
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # Introduce stochasticity: 95% chance to pick based on weights, 5% chance to pick randomly
    if random.random() < 0.95:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
