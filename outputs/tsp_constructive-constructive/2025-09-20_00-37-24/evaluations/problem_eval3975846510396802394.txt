import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate probabilities based on inverse distance and node degree
    probabilities = []
    total_weight = 0.0
    node_degree = {node: sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) for node in unvisited_nodes}

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degree[node]
        weight = (1 / (distance + 1e-6)) * (1 / (degree + 1))  # Avoid division by zero
        probabilities.append(weight)
        total_weight += weight

    # Normalize probabilities
    probabilities = [p / total_weight for p in probabilities]

    # 90% chance to select based on probabilities, 10% chance to pick randomly
    if random.random() < 0.9:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
