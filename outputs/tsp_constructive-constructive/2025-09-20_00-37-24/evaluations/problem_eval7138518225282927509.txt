import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic threshold based on remaining nodes
    threshold = len(unvisited_nodes) ** 0.5
    candidates = [node for node in nearest_neighbors if distance_matrix[current_node][node] <= threshold]

    if candidates:
        # Higher stochasticity when fewer nodes remain
        stochasticity = min(0.9, 1.0 / len(unvisited_nodes))
        if random.random() < stochasticity:
            next_node = random.choice(candidates)
        else:
            next_node = candidates[0]
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
