import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        return destination_node

    # Calculate weights for each unvisited node
    weights = []
    for node in unvisited_nodes:
        dist = distance_matrix[current_node][node]
        # Inverse distance weight (higher for closer nodes)
        inv_dist_weight = 1.0 / (dist + 1e-6)  # Avoid division by zero
        # Node degree weight (higher for nodes with fewer connections)
        degree = sum(1 for d in distance_matrix[node] if d > 0)  # Assuming 0 means no connection
        degree_weight = 1.0 / (degree + 1)  # Avoid division by zero
        # Combined weight
        weight = inv_dist_weight * degree_weight
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    prob_dist = [w / total_weight for w in weights]

    # Select node based on weighted probability with occasional randomness
    if random.random() < 0.8:  # 80% chance to pick based on weights
        next_node = random.choices(unvisited_nodes, weights=prob_dist, k=1)[0]
    else:  # 20% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
