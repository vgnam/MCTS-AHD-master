import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances) if distances else 1.0
    weights = [max(1.0 / (dist + 0.1 * min_dist), 0.01) for dist in distances]  # Avoid division by zero

    # Normalize weights
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Introduce stochasticity: 10% chance to pick a random node
    if random.random() < 0.1:
        next_node = random.choice(unvisited_nodes)
    else:
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
