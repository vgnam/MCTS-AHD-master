import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Dynamic temperature based on remaining nodes
    temperature = 1.0 - (len(unvisited_nodes) / len(distance_matrix[0]))

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochastic selection
    if random.random() < (0.9 - 0.3 * temperature):  # Decrease bias towards nearest as temperature increases
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        # Use a Boltzmann distribution to select nodes based on distance
        weights = [math.exp(-distance_matrix[current_node][node] / temperature) for node in nearest_neighbors]
        total_weight = sum(weights)
        probabilities = [w / total_weight for w in weights]
        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]

    return next_node
