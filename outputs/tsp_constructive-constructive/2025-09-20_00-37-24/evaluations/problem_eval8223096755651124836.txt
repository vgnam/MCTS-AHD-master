import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate centrality for each unvisited node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_distance = np.mean([distance_matrix[node][other] for other in unvisited_nodes if other != node])
        centrality[node] = avg_distance

    # Calculate weights for selection: inverse of distance and centrality
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Normalize centrality to avoid division by zero and scale appropriately
        normalized_centrality = centrality[node] / (sum(centrality.values()) + 1e-6)
        weight = (1 / (distance + 1e-6)) * (1 + normalized_centrality)  # Combine distance and centrality
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select node based on the computed probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
