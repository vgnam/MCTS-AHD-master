import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate adaptive temperature based on remaining steps
    remaining_steps = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (1.0 / (remaining_steps + 1)))

    # Get nearest neighbors sorted by distance
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Create probability distribution favoring closer nodes
    distances = [distance_matrix[current_node][node] for node in nearest_neighbors]
    min_dist = min(distances) if distances else 1.0
    probabilities = [math.exp(-(d - min_dist) / temperature) for d in distances]

    # Normalize probabilities
    total = sum(probabilities)
    normalized_probs = [p / total for p in probabilities]

    # Select node based on probability distribution
    next_node = random.choices(nearest_neighbors, weights=normalized_probs, k=1)[0]

    return next_node
