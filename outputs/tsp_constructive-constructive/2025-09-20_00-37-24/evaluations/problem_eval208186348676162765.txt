def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Adaptive selection pressure: reduce probability of picking near neighbors over time
    remaining_nodes = len(unvisited_nodes)
    max_nodes = len(distance_matrix)
    temperature = (remaining_nodes / max_nodes) ** 2  # Square to emphasize early vs late stages

    # Dynamic exploration-exploitation balance
    if random.random() < (0.9 * temperature):  # Decreasing chance to pick from near neighbors
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # Increasing chance to pick from all neighbors
        # Introduce temperature-based exploration: farther nodes have higher selection probability
        weights = [1 / (1 + distance_matrix[current_node][node]) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]

    return next_node
