import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Dynamic probability threshold based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    threshold = 0.9 * (1 - remaining_ratio)  # Higher threshold when fewer nodes remain

    # Calculate inverse distance weights for probabilistic selection
    weights = [1.0 / (distance_matrix[current_node][node] + 1e-6) for node in nearest_neighbors]
    total_weight = sum(weights)

    # Normalize weights
    normalized_weights = [w / total_weight for w in weights]

    # Apply dynamic threshold
    if random.random() < threshold:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choices(candidates, weights=normalized_weights[:len(candidates)])[0]
    else:
        next_node = random.choices(nearest_neighbors, weights=normalized_weights)[0]

    return next_node
