import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    q = random.random()
    if q < 0.9:  # 90% chance to pick from top 3 nearest
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # 10% chance to use probabilistic selection
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]  # Wider selection pool
        pheromone_levels = {node: 1.0 for node in candidates}
        alpha = 1.0
        beta = 2.0

        def desirability(node):
            return (pheromone_levels[node]**alpha) / (distance_matrix[current_node][node]**beta)

        desirabilities = {node: desirability(node) for node in candidates}
        total_desirability = sum(desirabilities.values())
        probabilities = {node: desirabilities[node] / total_desirability for node in candidates}

        r = random.random()
        cumulative_probability = 0.0
        for node, probability in probabilities.items():
            cumulative_probability += probability
            if r <= cumulative_probability:
                next_node = node
                break
        else:
            next_node = random.choice(candidates)

    return next_node
