import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate proximity scores (inverse distance)
    proximity_scores = {node: 1.0 / (distance_matrix[current_node][node] + 1e-10) for node in unvisited_nodes}

    # Calculate visit frequency scores (simulated as inverse of historical visits)
    visit_frequencies = {node: random.random() for node in unvisited_nodes}  # Simulated for demonstration

    # Combine scores with dynamic weights
    alpha = 0.7  # Proximity weight
    beta = 0.3   # Frequency weight (can be adjusted dynamically)
    combined_scores = {node: alpha * proximity_scores[node] + beta * visit_frequencies[node] for node in unvisited_nodes}

    # Select top candidates based on combined scores
    sorted_nodes = sorted(unvisited_nodes, key=lambda node: -combined_scores[node])
    top_candidates = sorted_nodes[:min(3, len(sorted_nodes))]

    # Probabilistic selection with bias toward top candidates
    if random.random() < 0.85:  # Higher chance to pick from top candidates
        next_node = random.choices(top_candidates, weights=[0.4, 0.3, 0.3] if len(top_candidates) >= 3 else None, k=1)[0]
    else:  # Explore less likely candidates
        next_node = random.choice(sorted_nodes)

    return next_node
