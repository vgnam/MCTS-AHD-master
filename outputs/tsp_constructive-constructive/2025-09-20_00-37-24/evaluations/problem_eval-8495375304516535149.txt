import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate inverse distance weights for unvisited nodes
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    weights = [1.0 / (d + 1e-10) for d in distances]  # Avoid division by zero

    # Normalize weights to probabilities
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Introduce controlled randomness: 80% chance to pick from top 50% of weighted nodes
    if random.random() < 0.8:
        # Sort nodes by probability and select from top 50%
        sorted_nodes = sorted(unvisited_nodes, key=lambda node: -probabilities[unvisited_nodes.index(node)])
        candidates = sorted_nodes[:max(1, len(sorted_nodes) // 2)]
        next_node = random.choices(candidates, weights=[probabilities[unvisited_nodes.index(node)] for node in candidates], k=1)[0]
    else:
        # 20% chance to pick uniformly at random
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
