import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate distances to all unvisited nodes
    distances = [(node, distance_matrix[current_node][node]) for node in unvisited_nodes]
    distances.sort(key=lambda x: x[1])

    # Temperature parameter decreases as unvisited nodes decrease (more exploitation)
    temperature = max(1.0, len(unvisited_nodes) / 10)

    # Probability distribution based on inverse distance and temperature
    probabilities = []
    for node, dist in distances:
        # Inverse distance with temperature adjustment
        prob = math.exp(-dist / temperature)
        probabilities.append(prob)

    # Normalize probabilities
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    # Select node based on probability distribution
    next_node = random.choices([node for node, _ in distances], weights=probabilities, k=1)[0]

    return next_node
