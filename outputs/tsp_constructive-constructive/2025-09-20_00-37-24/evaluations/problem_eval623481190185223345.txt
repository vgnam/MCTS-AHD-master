import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate centrality scores for each node
    centrality = {}
    for node in unvisited_nodes:
        centrality[node] = sum(1 / (distance_matrix[node][other] + 1e-6) for other in unvisited_nodes if other != node)

    # Calculate selection probabilities based on distance and centrality
    total_weight = 0.0
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Probability decreases exponentially with distance and increases with centrality
        weight = math.exp(-distance) * (1 + centrality[node])
        weights.append(weight)
        total_weight += weight

    # Normalize weights
    normalized_weights = [w / total_weight for w in weights]

    # Select node based on calculated probabilities
    next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    return next_node
