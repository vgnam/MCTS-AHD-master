def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    if destination_node in unvisited_nodes:
        # Dynamic probability based on remaining distance
        distance_to_dest = distance_matrix[current_node][destination_node]
        total_remaining = sum(distance_matrix[current_node][node] for node in unvisited_nodes)
        bias_prob = 0.5 + 0.5 * (distance_to_dest / total_remaining)  # Higher bias when destination is close

        # Temperature decreases over time to reduce randomness
        temperature = max(0.1, 0.9 ** (len(unvisited_nodes) / len(distance_matrix)))  # Decreases as nodes are visited

        if random.random() < bias_prob * temperature:
            return destination_node

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]

    if random.random() < 0.8:  # 80% chance to pick from top 3 nearest
        next_node = random.choice(candidates)
    else:  # 20% chance to pick a random node with weighted probability
        weights = [1/(1 + i) for i in range(len(nearest_neighbors))]  # Prefer closer nodes
        next_node = random.choices(nearest_neighbors, weights=weights)[0]

    return next_node
