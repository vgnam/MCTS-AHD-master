import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visit_counts=None):
    if visit_counts is None:
        visit_counts = {node: 1 for node in unvisited_nodes}

    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    # Calculate weights based on distance and visit frequency
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        frequency = visit_counts[node]
        weight = (1 / (distance + 1e-6)) * (1 / (frequency + 1e-6))  # Avoid division by zero
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Introduce stochasticity: sometimes pick a node based on probability, sometimes random
    if random.random() < 0.85:  # 85% chance to pick based on probability
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:  # 15% chance to pick a random node
        next_node = random.choice(unvisited_nodes)

    return next_node
