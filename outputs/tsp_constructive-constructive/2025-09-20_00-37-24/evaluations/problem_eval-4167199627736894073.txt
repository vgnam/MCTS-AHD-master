import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Deterministic selection with a bias toward slightly farther nodes
    if random.random() < 0.8:  # 80% chance to pick from top 2-4 nearest
        candidates = nearest_neighbors[1:min(4, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:  # 20% chance to pick from the farthest 1/3 of unvisited nodes
        farthest = len(nearest_neighbors) // 3
        candidates = nearest_neighbors[-farthest:] if farthest > 0 else nearest_neighbors
        next_node = random.choice(candidates)

    return next_node
