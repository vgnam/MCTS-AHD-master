import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate exploration factor based on remaining unvisited nodes
    exploration_factor = 1.0 - (len(unvisited_nodes) / (len(distance_matrix) - 1))

    # Calculate weighted probabilities for each candidate
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]

    # Assign weights: closer nodes have higher probability, but exploration factor reduces bias
    weights = []
    for node in candidates:
        distance = distance_matrix[current_node][node]
        weight = (1 / (distance + 1e-6)) ** (1 + exploration_factor * 2)
        weights.append(weight)

    # Normalize weights to form a probability distribution
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select a node based on the weighted probabilities
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
