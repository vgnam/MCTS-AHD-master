import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate probabilities based on inverse exponential distance
    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_dist = min(distances) if distances else 1.0
    max_dist = max(distances) if distances else 1.0

    # Temperature parameter (higher = more exploration, lower = more exploitation)
    temperature = 0.5

    probabilities = []
    for dist in distances:
        # Normalize distance to [0,1] and apply exponential decay
        normalized_dist = (dist - min_dist) / (max_dist - min_dist + 1e-10)
        prob = math.exp(-normalized_dist / temperature)
        probabilities.append(prob)

    # Normalize probabilities
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    # Select node based on probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
