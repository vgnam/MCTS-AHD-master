import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on inverse distance and visit frequency (simulated here)
    visit_counts = {node: 1 for node in unvisited_nodes}  # Placeholder for actual visit counts
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        weight = (1 / distance) / (visit_counts[node] + 1)  # Prefer less visited, closer nodes
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    normalized_weights = [w / total_weight for w in weights]

    # Introduce stochasticity: 80% chance to pick from weighted distribution, 20% random
    if random.random() < 0.8:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
