import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, visited_counts=None):
    if visited_counts is None:
        visited_counts = {}

    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on distance and visit frequency
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        visit_count = visited_counts.get(node, 0)
        # Higher weight for closer nodes and less visited nodes
        weight = (1 / (distance + 1e-6)) * (1 / (visit_count + 1))
        weights.append(weight)

    # Normalize weights to probabilities
    total_weight = sum(weights)
    probabilities = [w / total_weight for w in weights]

    # Select node based on weighted probabilities
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    # Update visit count for the selected node
    visited_counts[next_node] = visited_counts.get(next_node, 0) + 1

    return next_node
