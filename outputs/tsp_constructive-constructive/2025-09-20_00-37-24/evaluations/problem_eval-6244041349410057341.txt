import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node

    if not unvisited_nodes:
        return None

    # Calculate centrality of each unvisited node (average distance to all other nodes)
    centrality = {}
    for node in unvisited_nodes:
        total_distance = sum(distance_matrix[node][other] for other in unvisited_nodes)
        centrality[node] = total_distance / max(1, len(unvisited_nodes) - 1)

    # Sort by distance to current node and centrality
    nearest_neighbors = sorted(unvisited_nodes,
                              key=lambda node: (distance_matrix[current_node][node], centrality[node]))

    # Adaptive exploration probability: increases as unvisited nodes decrease
    exploration_prob = 0.1 + (0.9 * (1.0 - len(unvisited_nodes) / len(distance_matrix)))

    if random.random() < exploration_prob:
        # Select based on centrality (more central nodes are more likely)
        weights = [1 / (centrality[node] + 1e-6) for node in nearest_neighbors]
        next_node = random.choices(nearest_neighbors, weights=weights, k=1)[0]
    else:
        # Select from top 3 nearest nodes
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)

    return next_node
