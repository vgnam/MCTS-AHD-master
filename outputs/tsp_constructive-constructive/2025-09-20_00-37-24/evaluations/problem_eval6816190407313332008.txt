import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Temperature-based stochasticity
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Cooling temperature
    stochastic_prob = 0.9 * (1 - temperature)  # Higher temperature reduces stochasticity

    if random.random() < stochastic_prob:
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else:
        next_node = random.choice(nearest_neighbors)

    return next_node
