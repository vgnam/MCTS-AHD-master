import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    distances = [distance_matrix[current_node][node] for node in unvisited_nodes]
    min_distance = min(distances)
    max_distance = max(distances)

    # Calculate dynamic probabilities based on distance (closer nodes have higher probability)
    probabilities = [(max_distance - d + 1) / (max_distance - min_distance + 1) for d in distances]
    normalized_probs = np.array(probabilities) / np.sum(probabilities)

    # 90% chance to pick based on dynamic probabilities, 10% chance to pick random
    if random.random() < 0.9:
        next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    else:
        next_node = random.choice(unvisited_nodes)

    return next_node
