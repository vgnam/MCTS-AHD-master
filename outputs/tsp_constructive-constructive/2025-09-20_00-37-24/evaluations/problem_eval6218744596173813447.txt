import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    # Calculate weights based on both distance and potential path improvement
    weights = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        # Weight is inversely proportional to distance and proportional to potential path improvement
        # Potential improvement is approximated by the ratio of the distance to the average distance
        avg_distance = sum(distance_matrix[current_node]) / len(distance_matrix[current_node])
        weight = (1 / distance) * (avg_distance / distance) if distance != 0 else 0
        weights.append(weight)

    # Normalize weights
    total_weight = sum(weights)
    if total_weight == 0:
        return random.choice(unvisited_nodes)
    normalized_weights = [w / total_weight for w in weights]

    # Introduce stochasticity: 80% chance to pick from top 3 weighted nodes, 20% chance to pick randomly
    if random.random() < 0.8:
        top_indices = sorted(range(len(normalized_weights)), key=lambda i: normalized_weights[i], reverse=True)[:min(3, len(unvisited_nodes))]
        top_weights = [normalized_weights[i] for i in top_indices]
        top_nodes = [unvisited_nodes[i] for i in top_indices]
        next_node = random.choices(top_nodes, weights=top_weights, k=1)[0]
    else:
        next_node = random.choices(unvisited_nodes, weights=normalized_weights, k=1)[0]

    return next_node
