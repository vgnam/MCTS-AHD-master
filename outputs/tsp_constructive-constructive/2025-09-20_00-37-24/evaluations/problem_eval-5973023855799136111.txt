import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return None

    # Dynamic bias towards destination as unvisited nodes decrease
    dest_prob = 0.3 + 0.7 * (1 - len(unvisited_nodes) / len(distance_matrix))

    if destination_node in unvisited_nodes and random.random() < dest_prob:
        return destination_node

    # Temperature-based stochastic selection
    temperature = max(0.1, 1.0 - (len(unvisited_nodes) / len(distance_matrix)))
    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Probability distribution based on rank and temperature
    if len(nearest_neighbors) > 1:
        weights = [math.exp(-i / temperature) for i in range(len(nearest_neighbors))]
        total = sum(weights)
        probs = [w / total for w in weights]
        next_node = random.choices(nearest_neighbors, weights=probs, k=1)[0]
    else:
        next_node = nearest_neighbors[0]

    return next_node
