import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    
    # Introduce stochasticity:  sometimes pick a node that's not the absolute nearest
    if random.random() < 0.7: # 70% chance to pick from top 5 nearest
        candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
        next_node = random.choice(candidates)
    else: # 30% chance to pick a random node with weighted probability based on distance
        weights = [1.0 / distance_matrix[current_node][node] for node in nearest_neighbors]
        total_weight = sum(weights)
        probabilities = [w / total_weight for w in weights]
        next_node = random.choices(nearest_neighbors, weights=probabilities, k=1)[0]
    
    return next_node
