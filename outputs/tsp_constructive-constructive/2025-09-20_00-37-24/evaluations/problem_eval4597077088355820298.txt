import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    #Stochastic choice based on distance: closer nodes have higher probability
    probabilities = [1 / (distance_matrix[current_node][node] + 0.0001) for node in nearest_neighbors]  # Add a small value to avoid division by zero
    total_probability = sum(probabilities)
    normalized_probabilities = [p / total_probability for p in probabilities]
    
    # Cap the candidates to top 5 neighbors for computational efficiency and focused selection
    candidates = nearest_neighbors[:min(5, len(nearest_neighbors))]
    candidate_probabilities = normalized_probabilities[:min(5, len(normalized_probabilities))]

    next_node = random.choices(candidates, weights=candidate_probabilities, k=1)[0]

    return next_node
