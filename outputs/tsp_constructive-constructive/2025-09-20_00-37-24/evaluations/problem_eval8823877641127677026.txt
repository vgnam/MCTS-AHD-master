import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Calculate adaptive probability for nearest node selection
    exploration_factor = len(unvisited_nodes) / len(distance_matrix)
    distance_ratio = distance_matrix[current_node][nearest_neighbors[0]] / max(distance_matrix[current_node][node] for node in unvisited_nodes)
    prob_nearest = 0.5 * (1 - math.exp(-exploration_factor)) * (1 - distance_ratio)

    # Select node based on adaptive probability
    if random.random() < prob_nearest:
        next_node = nearest_neighbors[0]
    elif random.random() < 0.1:  # 10% chance for random selection
        next_node = random.choice(nearest_neighbors)
    else:  # Select from top 3 with adjusted probability
        candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]
        weights = [math.exp(-i * 0.5) for i in range(len(candidates))]
        next_node = random.choices(candidates, weights=weights, k=1)[0]

    return next_node
