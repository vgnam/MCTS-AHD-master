import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        return destination_node
    if not unvisited_nodes:
        return None

    nearest_neighbors = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidates = nearest_neighbors[:min(3, len(nearest_neighbors))]

    def desirability(node):
        beta = 2.0
        return 1.0 / (distance_matrix[current_node][node]**beta)

    q = random.random()
    q0 = 0.9

    if q < q0:
        next_node = max(candidates, key=lambda node: desirability(node))
    else:
        next_node = random.choice(candidates)

    return next_node
