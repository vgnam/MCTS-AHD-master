def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute adaptive centroid and remaining path length
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        avg_remaining_dist = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0
        avg_remaining_dist = 0

    # Dynamic weight adjustment based on remaining nodes' proximity
    weight_factor = 0.5 + 0.5 * (avg_remaining_dist / (distance_matrix[current_node][destination_node] + 1e-6))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Detour penalty: penalize nodes that create long detours
        detour_penalty = max(0, distance_to_current - distance_matrix[current_node][destination_node])

        # Adaptive weighted score
        score = (distance_to_current +
                 (0.5 + 0.2 * weight_factor) * distance_to_dest +
                 0.3 * centroid_penalty +
                 0.4 * detour_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
