def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining nodes
    remaining = len(unvisited_nodes)
    weight_current = 1.0 - 0.5 * (1 / (1 + math.exp(-(remaining - 5))))  # Higher weight when few nodes left
    weight_dest = 0.5 + 0.3 * (1 / (1 + math.exp(-(remaining - 5))))     # Lower weight when few nodes left
    weight_centroid = 0.3 * (1 / (1 + math.exp(-(remaining - 5))))       # Lower weight when few nodes left

    # Path momentum: favor nodes in the same direction as previous steps
    prev_node = current_node  # Simplified; in practice, track history
    momentum = 0.0
    if len(unvisited_nodes) > 1:
        direction = distance_matrix[current_node][destination_node] - distance_matrix[prev_node][current_node]
        momentum = 0.2 * abs(direction)  # Penalize direction changes

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty +
                 momentum)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
