def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 1.0
    weight_centroid = 0.3 + 0.2 * (1.0 / (remaining_nodes + 1))  # Higher weight as nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Novel heuristic: penalize nodes that are too far from centroid more aggressively
        adjusted_centroid_penalty = centroid_penalty ** 1.5  # Exponential penalty

        # Dynamic score calculation
        score = (weight_proximity * distance_to_current +
                 0.5 * distance_to_dest +
                 weight_centroid * adjusted_centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
