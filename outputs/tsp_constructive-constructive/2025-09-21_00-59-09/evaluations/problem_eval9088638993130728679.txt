def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic centroid: weighted by remaining distances to destination
    if unvisited_nodes:
        total_weight = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
        if total_weight > 0:
            centroid = sum(distance_matrix[node][destination_node] * distance_matrix[node][destination_node] for node in unvisited_nodes) / total_weight
        else:
            centroid = 0
    else:
        centroid = 0

    remaining_path_length = len(unvisited_nodes) + 1  # +1 for return to destination

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_alignment = abs(distance_matrix[node][destination_node] - centroid)

        # Adaptive weights: centroid influence decreases as path length decreases
        centroid_weight = 0.3 * (remaining_path_length / (remaining_path_length + 1))
        score = (distance_to_current + 0.5 * distance_to_dest) * (1 + centroid_weight * centroid_alignment)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
