def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and standard deviation of unvisited nodes
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        centroid = sum(distances_to_dest) / len(distances_to_dest)
        std_dev = (sum((x - centroid) ** 2 for x in distances_to_dest) / len(distances_to_dest)) ** 0.5
    else:
        centroid = 0
        std_dev = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_to_dest - centroid)

        # Dynamic weight adjustment based on standard deviation
        weight_current = 1.0
        weight_dest = 0.5 + 0.2 * (std_dev / max(distances_to_dest)) if std_dev > 0 else 0.5
        weight_centroid = 0.3 * (1 - (centroid_penalty / (std_dev + 1e-6))) if std_dev > 0 else 0.3

        # Weighted score with dynamic adjustments
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
