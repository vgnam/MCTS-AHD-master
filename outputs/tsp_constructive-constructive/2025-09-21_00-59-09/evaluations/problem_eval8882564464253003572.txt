def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid = 0

    # Dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 + (0.2 * remaining_nodes)  # Higher weight for current proximity as nodes remain
    weight_dest = 0.5 + (0.1 * remaining_nodes)     # Moderate weight for destination proximity
    weight_centroid = 0.3 - (0.05 * remaining_nodes) # Lower weight for centroid alignment as nodes decrease

    # Calculate scores and probabilities
    scores = []
    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid)

        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)
        scores.append((node, score))

    # Select node with lowest score (greedy) or with a small probability switch to a random node
    if scores:
        sorted_scores = sorted(scores, key=lambda x: x[1])
        best_node, best_score = sorted_scores[0]

        # Introduce probabilistic exploration
        if len(sorted_scores) > 1 and random.random() < 0.1:  # 10% chance to explore
            next_node = random.choice([node for node, score in sorted_scores[1:]])
        else:
            next_node = best_node
    else:
        next_node = destination_node

    return next_node
