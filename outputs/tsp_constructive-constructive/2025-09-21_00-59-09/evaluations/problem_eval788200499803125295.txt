def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes) + 1  # +1 for destination
    weight_current = 1.0 - (0.5 / remaining_nodes)
    weight_dest = 0.5 + (0.3 / remaining_nodes)
    weight_centroid = 0.3 * (1.0 - (0.2 / remaining_nodes))

    # Compute distance-weighted centroid of unvisited nodes
    total_weight = sum(distance_matrix[destination_node][node] for node in unvisited_nodes)
    centroid_x = sum(distance_matrix[destination_node][node] * distance_matrix[destination_node][node] for node in unvisited_nodes) / total_weight if total_weight else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Adjust centroid penalty based on remaining path length
        adjusted_penalty = centroid_penalty * (1.0 + (0.5 / remaining_nodes))

        # Dynamic weighted score
        score = (weight_current * distance_to_current) + (weight_dest * distance_to_dest) + (weight_centroid * adjusted_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
