def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and variance of unvisited nodes relative to destination
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[destination_node][node] for node in unvisited_nodes]
        centroid = sum(distances_to_dest) / len(unvisited_nodes)
        variance = sum((d - centroid) ** 2 for d in distances_to_dest) / len(unvisited_nodes)
        centrality_score = variance  # Higher variance penalizes nodes far from the centroid
    else:
        centroid = 0
        centrality_score = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        deviation_from_centroid = abs(distance_matrix[node][destination_node] - centroid)

        # Dynamic weight adjustment: prioritize closer nodes and penalize high deviation
        weight_current = 1.0
        weight_dest = 0.5 * (1.0 - deviation_from_centroid / (centroid + 1e-6))  # Normalize by centroid
        weight_centrality = 0.3 * centrality_score

        # Score combines dynamic weights and deviation penalty
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centrality * deviation_from_centroid)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
