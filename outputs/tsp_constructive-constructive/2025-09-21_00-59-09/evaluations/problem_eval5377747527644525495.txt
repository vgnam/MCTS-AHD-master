def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute average distance to unvisited nodes for dynamic weighting
    if unvisited_nodes:
        avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        avg_distance = 0
        centroid_x = 0

    # Dynamic weights based on remaining nodes
    weight_current = 1.0 / (1.0 + avg_distance)
    weight_dest = 0.5 * (1.0 - weight_current)
    weight_centroid = 0.3 * (1.0 - weight_current)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Local search: evaluate potential paths by considering next steps
        local_search_bonus = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            if remaining_nodes:
                local_search_bonus = min(distance_matrix[node][n] for n in remaining_nodes)

        # Weighted score with dynamic adjustments
        score = (weight_current * distance_to_current +
                weight_dest * distance_to_dest +
                weight_centroid * centroid_penalty -
                0.2 * local_search_bonus)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
