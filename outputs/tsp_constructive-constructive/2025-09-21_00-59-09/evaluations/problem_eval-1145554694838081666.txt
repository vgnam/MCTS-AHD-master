def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic centroid penalty weight based on remaining unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        density_weight = 0.3 * (1 - len(unvisited_nodes) / len(distance_matrix))
    else:
        centroid_x = 0
        density_weight = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Lookahead: estimate impact on next step
        remaining_nodes = unvisited_nodes - {node}
        if remaining_nodes:
            next_candidates = [n for n in remaining_nodes if n != node]
            if next_candidates:
                next_distance = min(distance_matrix[node][n] for n in next_candidates)
            else:
                next_distance = distance_matrix[node][destination_node]
        else:
            next_distance = distance_matrix[node][destination_node]

        # Weighted score with dynamic adjustments
        score = (distance_to_current +
                 0.5 * distance_to_dest +
                 density_weight * centroid_penalty +
                 0.2 * next_distance)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
