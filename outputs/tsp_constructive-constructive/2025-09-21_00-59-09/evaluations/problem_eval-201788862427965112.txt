def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute robust centroid of unvisited nodes (median of distances)
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[destination_node][node] for node in unvisited_nodes]
        distances_to_dest_sorted = sorted(distances_to_dest)
        median_idx = len(distances_to_dest_sorted) // 2
        centroid_x = distances_to_dest_sorted[median_idx]
    else:
        centroid_x = 0

    # Dynamic weight based on remaining path length
    remaining_length = len(unvisited_nodes)
    weight_dynamic = 1.0 / (1.0 + remaining_length)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Harmonic mean of distances to other unvisited nodes
        if len(unvisited_nodes) > 1:
            other_nodes = [n for n in unvisited_nodes if n != node]
            harmonic_mean = len(other_nodes) / sum(1.0 / (1.0 + distance_matrix[node][n]) for n in other_nodes)
        else:
            harmonic_mean = 0

        # Weighted score with dynamic adjustment
        score = (1.0 - weight_dynamic) * distance_to_current + \
                0.5 * weight_dynamic * distance_to_dest + \
                0.3 * centroid_penalty - \
                0.2 * harmonic_mean

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
