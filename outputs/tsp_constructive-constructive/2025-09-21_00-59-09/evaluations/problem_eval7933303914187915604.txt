def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 1.0 + (0.1 * remaining_nodes)
    weight_dest = 0.5 + (0.05 * remaining_nodes)
    weight_centroid = 0.3 - (0.01 * remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Angle heuristic: favor nodes that align better with the current path
        angle_score = 0
        if current_node != destination_node:
            vec_current = (distance_matrix[current_node][destination_node] - distance_matrix[current_node][node], 0)
            vec_dest = (distance_matrix[node][destination_node], 0)
            dot_product = vec_current[0] * vec_dest[0]
            mag_current = (vec_current[0]**2 + vec_current[1]**2)**0.5
            mag_dest = (vec_dest[0]**2 + vec_dest[1]**2)**0.5
            if mag_current * mag_dest > 0:
                angle_score = (dot_product / (mag_current * mag_dest)) * 0.2  # Scale by 0.2

        # Weighted score with dynamic weights
        score = (weight_proximity * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty -
                 angle_score)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
