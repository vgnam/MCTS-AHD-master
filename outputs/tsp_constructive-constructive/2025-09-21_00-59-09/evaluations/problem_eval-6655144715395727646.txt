def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic weights based on remaining path length and node density
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight_current = 1.0 + (0.2 * remaining_nodes / (remaining_nodes + 1))
    dynamic_weight_dest = 0.5 + (0.1 * remaining_nodes / (remaining_nodes + 1))
    dynamic_weight_centroid = 0.3 * (remaining_nodes / (remaining_nodes + 2))

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Normalize centroid penalty by the number of unvisited nodes
        normalized_centroid = centroid_penalty / (remaining_nodes + 1)

        # Dynamic weighted score
        score = (dynamic_weight_current * distance_to_current +
                 dynamic_weight_dest * distance_to_dest +
                 dynamic_weight_centroid * normalized_centroid)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
