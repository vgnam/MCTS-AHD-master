def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid bias based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    centroid_bias = 1.0 if remaining_nodes > 1 else 0.0  # Reduce bias when few nodes remain

    # Compute normalized distance to destination
    max_dest_distance = max(distance_matrix[node][destination_node] for node in unvisited_nodes) if unvisited_nodes else 1.0
    normalized_dest = {node: distance_matrix[node][destination_node] / max_dest_distance for node in unvisited_nodes}

    # Compute path direction vector (simplified)
    path_direction = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        normalized_dest_dist = normalized_dest[node]

        # Penalize nodes that deviate from the current path direction
        direction_penalty = abs(distance_matrix[current_node][node] - path_direction)

        # Weighted score with dynamic centroid bias
        score = distance_to_current + 0.5 * normalized_dest_dist + centroid_bias * 0.3 * direction_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
