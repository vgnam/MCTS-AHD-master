def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_nodes = total_nodes - len(unvisited_nodes)
    progress_ratio = visited_nodes / total_nodes

    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weights: prioritize centroid early, then local proximity
        weight_current = 1.0 - 0.5 * progress_ratio
        weight_dest = 0.5 + 0.25 * progress_ratio
        weight_centroid = 0.3 * progress_ratio

        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
