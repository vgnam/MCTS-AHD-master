def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = min(1.0, 1.5 / (remaining_nodes + 1))  # Decreases as nodes are visited

    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Adaptive weighted score: dynamic_weight adjusts emphasis on proximity vs. centrality
        score = (1 - dynamic_weight) * distance_to_current + \
                dynamic_weight * 0.5 * distance_to_dest + \
                0.3 * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
