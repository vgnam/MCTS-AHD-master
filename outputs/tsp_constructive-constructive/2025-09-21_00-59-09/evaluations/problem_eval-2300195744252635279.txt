def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and remaining path length
    if unvisited_nodes:
        centroid_distances = [distance_matrix[destination_node][node] for node in unvisited_nodes]
        centroid_x = sum(centroid_distances) / len(unvisited_nodes)
        remaining_path_length = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    else:
        centroid_x = 0
        remaining_path_length = 0

    # Dynamic weights based on remaining path length
    progress_factor = 1.0 - (remaining_path_length / sum(sum(row) for row in distance_matrix) if distance_matrix else 1.0)
    weight_current = 1.0 + 0.5 * progress_factor
    weight_dest = 0.5 + 0.3 * progress_factor
    weight_centroid = 0.3 - 0.2 * progress_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Adaptive weighted score
        score = (weight_current * distance_to_current +
                weight_dest * distance_to_dest +
                weight_centroid * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
