def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 1.0 + (0.5 / (remaining_nodes + 1))  # Higher weight when fewer nodes left
    weight_dest = 0.5 + (0.3 / (remaining_nodes + 1))  # Slightly higher weight when fewer nodes left
    weight_centroid = 0.3 - (0.1 / (remaining_nodes + 1))  # Slightly lower weight when fewer nodes left

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Proximity bonus: reward nodes closer to destination than current node
        proximity_bonus = max(0, distance_matrix[current_node][destination_node] - distance_to_dest)

        # Weighted score with dynamic weights and proximity bonus
        score = (weight_proximity * distance_to_current) + (weight_dest * distance_to_dest) + (weight_centroid * centroid_penalty) - (0.2 * proximity_bonus)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
