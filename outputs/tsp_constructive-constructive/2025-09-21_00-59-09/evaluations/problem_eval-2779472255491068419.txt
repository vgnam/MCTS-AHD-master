def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic weight adjustment based on remaining unvisited nodes
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes > 5:
        weight_dest = 0.5
        weight_centroid = 0.3
    else:
        weight_dest = 0.3
        weight_centroid = 0.5

    # Compute centroid of unvisited nodes
    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Adjusted weighted score with dynamic weights
        score = distance_to_current + weight_dest * distance_to_dest + weight_centroid * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
