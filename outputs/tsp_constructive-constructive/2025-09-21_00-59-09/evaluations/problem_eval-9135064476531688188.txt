def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Novel scoring: prioritize angular alignment and dynamic penalty
        angular_factor = (distance_to_current + distance_to_dest) / (1 + centroid_penalty)
        dynamic_penalty = (centroid_penalty ** 2) / (1 + distance_to_dest)
        score = (1.2 * distance_to_current) + (0.6 * distance_to_dest) + (0.5 * dynamic_penalty) - (0.3 * angular_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
