def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid as median of distances to destination
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        centroid_x = sorted(distances_to_dest)[len(distances_to_dest) // 2]
    else:
        centroid_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Weighted score: prioritize destination proximity, penalize centroid deviation, balance immediate progress
        score = 0.1 * distance_to_current + 0.7 * distance_to_dest + 0.2 * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
