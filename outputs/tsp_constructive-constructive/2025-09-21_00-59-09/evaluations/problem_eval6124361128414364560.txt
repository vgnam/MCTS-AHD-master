import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Compute node density factor (inverse of average distance to unvisited nodes)
    density_factor = 1.0
    if unvisited_nodes:
        avg_distance = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        density_factor = 1.0 / (avg_distance + 1e-6)  # Avoid division by zero

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Angular deviation from centroid (using dot product approximation)
        vec_to_node = (distance_matrix[destination_node][node] - centroid_x, distance_matrix[current_node][node])
        vec_to_dest = (0, distance_matrix[current_node][destination_node])
        dot_product = vec_to_node[0] * vec_to_dest[0] + vec_to_node[1] * vec_to_dest[1]
        magnitude = math.sqrt(vec_to_node[0]**2 + vec_to_node[1]**2) * math.sqrt(vec_to_dest[0]**2 + vec_to_dest[1]**2)
        angular_penalty = 1.0 - (dot_product / (magnitude + 1e-6))  # Normalized to [0,1]

        # Dynamic weights based on density and progress
        progress_weight = 0.8 if len(unvisited_nodes) > len(distance_matrix) / 2 else 1.2
        density_weight = 1.5 if density_factor > 0.5 else 0.8

        # Hybrid score: Euclidean distance, angular penalty, and centroid deviation
        score = (progress_weight * distance_to_current +
                 0.4 * distance_to_dest +
                 0.3 * centroid_penalty +
                 0.2 * angular_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
