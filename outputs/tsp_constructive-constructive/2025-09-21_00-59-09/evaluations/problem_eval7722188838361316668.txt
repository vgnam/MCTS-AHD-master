def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_dynamic = 1.0 / (1.0 + 0.1 * remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Outlier penalty: penalize nodes far from the centroid more heavily
        outlier_penalty = (distance_matrix[node][destination_node] - centroid_x) ** 2

        # Line heuristic: favor nodes closer to the line between current and destination
        line_distance = abs(
            (distance_matrix[destination_node][current_node] - distance_matrix[destination_node][node]) -
            (distance_matrix[current_node][destination_node] - distance_matrix[node][destination_node])
        )

        # Weighted score with dynamic adjustments
        score = (
            distance_to_current +
            0.5 * distance_to_dest +
            0.3 * centroid_penalty +
            weight_dynamic * outlier_penalty +
            0.2 * line_distance
        )

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
