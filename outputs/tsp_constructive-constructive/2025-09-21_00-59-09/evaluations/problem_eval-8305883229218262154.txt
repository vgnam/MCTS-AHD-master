def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic weight adjustment based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = max(0.1, 0.5 / (remaining_nodes + 1))

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Compute centrality metric for each node
    centrality_scores = {}
    for node in unvisited_nodes:
        centrality = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
        centrality_scores[node] = centrality

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic centroid penalty weight
        centroid_weight = 0.3 * (1 + dynamic_weight)

        # Score combines distance, centrality, and adjusted centroid penalty
        score = (distance_to_current +
                 0.5 * distance_to_dest +
                 centroid_weight * centroid_penalty +
                 dynamic_weight * centrality_scores[node])

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
