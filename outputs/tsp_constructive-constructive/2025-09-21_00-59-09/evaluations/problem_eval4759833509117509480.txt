def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 + (1.0 / (remaining_nodes + 1))  # Decreases as path progresses
    weight_centroid = 0.3 * (remaining_nodes / (remaining_nodes + 5))  # Decreases as path progresses

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Additional penalty for nodes too close to current node if recently visited
        if distance_to_current < 0.1 * centroid_x and remaining_nodes < len(unvisited_nodes) / 2:
            centroid_penalty *= 2.0

        # Weighted score with dynamic adjustments
        score = weight_current * distance_to_current + 0.5 * distance_to_dest + weight_centroid * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
