def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and standard deviation of unvisited nodes
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        centroid_x = sum(distances_to_dest) / len(unvisited_nodes)
        std_dev = (sum((d - centroid_x) ** 2 for d in distances_to_dest) / len(unvisited_nodes)) ** 0.5
    else:
        centroid_x = 0
        std_dev = 0

    # Dynamic weights based on remaining nodes and path progress
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (remaining_nodes / (remaining_nodes + 1)) ** 0.5
    centroid_weight = progress_factor * 0.5
    outlier_weight = (1 - progress_factor) * 0.7

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)
        outlier_penalty = max(0, (distance_to_current - distance_to_dest) ** 2 - std_dev ** 2)

        # Weighted score with dynamic adjustments
        score = (distance_to_current +
                 0.5 * distance_to_dest +
                 centroid_weight * centroid_penalty +
                 outlier_weight * outlier_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
