def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute adaptive weights based on remaining unvisited nodes
    remaining_distances = [distance_matrix[node][destination_node] for node in unvisited_nodes]
    avg_remaining_distance = sum(remaining_distances) / len(remaining_distances) if unvisited_nodes else 0
    weight_dest = 0.5 + 0.3 * (avg_remaining_distance / (distance_matrix[current_node][destination_node] + 1e-6))

    # Compute refined centroid penalty
    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    centroid_penalty = sum(abs(distance_matrix[node][destination_node] - centroid_x) for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Adaptive weighted score
        score = distance_to_current + weight_dest * distance_to_dest + 0.3 * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
