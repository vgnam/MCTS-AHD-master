def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute median distance to destination for centroid-like reference
    if unvisited_nodes:
        sorted_distances = sorted(distance_matrix[destination_node][node] for node in unvisited_nodes)
        median_x = sorted_distances[len(sorted_distances) // 2]
    else:
        median_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        median_penalty = abs(distance_matrix[node][destination_node] - median_x)

        # Weighted score: prioritize proximity to current node, then destination, then median deviation
        score = distance_to_current + 0.7 * distance_to_dest + 0.2 * median_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
