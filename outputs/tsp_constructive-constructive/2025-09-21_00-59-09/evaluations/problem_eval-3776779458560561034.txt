def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and direction vector
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_length = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = remaining_length = 0

    # Dynamic weights based on remaining path length and node density
    proximity_weight = 1.0 + (0.2 * (len(unvisited_nodes) / (len(distance_matrix) - 1)))
    alignment_weight = 0.5 + (0.3 * (remaining_length / distance_matrix[current_node][destination_node]))
    direction_penalty = 0.3 + (0.1 * (len(unvisited_nodes) / (len(distance_matrix) - 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic score with direction-aware penalty
        direction_penalty_factor = 1.0 + (0.1 * (distance_to_current / (distance_matrix[current_node][destination_node] + 1e-6)))
        score = (proximity_weight * distance_to_current) + \
                (alignment_weight * distance_to_dest) + \
                (direction_penalty * centroid_penalty * direction_penalty_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
