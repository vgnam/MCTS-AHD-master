def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid of unvisited nodes, weighted by inverse distance to destination
    if unvisited_nodes:
        total_weight = sum(1 / (distance_matrix[destination_node][node] + 1e-6) for node in unvisited_nodes)
        centroid_x = sum((1 / (distance_matrix[destination_node][node] + 1e-6)) * distance_matrix[destination_node][node] for node in unvisited_nodes) / total_weight
    else:
        centroid_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighting: prioritize proximity to current node, penalize deviation from centroid, and adjust for path direction
        direction_factor = 1 + 0.2 * (distance_matrix[current_node][destination_node] - distance_to_dest) / (distance_matrix[current_node][destination_node] + 1e-6)
        score = distance_to_current + 0.4 * distance_to_dest + 0.3 * centroid_penalty * direction_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
