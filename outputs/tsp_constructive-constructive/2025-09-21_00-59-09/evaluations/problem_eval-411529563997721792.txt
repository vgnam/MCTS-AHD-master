def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute average distance of unvisited nodes to destination
    if unvisited_nodes:
        avg_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        avg_distance = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        deviation_penalty = abs(distance_matrix[node][destination_node] - avg_distance)

        # Weighted score: prioritize proximity to current node and destination, penalize deviation from average distance
        score = distance_to_current + 0.7 * distance_to_dest + 0.5 * deviation_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
