def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and average distance to destination for unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        avg_dist_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0
        avg_dist_to_dest = 0

    # Dynamic weights based on remaining nodes
    remaining_nodes_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1) if unvisited_nodes else 1.0
    weight_current = 1.0 + remaining_nodes_ratio * 0.5
    weight_dest = 0.5 + remaining_nodes_ratio * 0.3
    weight_centroid = 0.3 * (1.0 - remaining_nodes_ratio)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic score with adjusted weights
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)

        # Exploration-exploitation balance: penalize nodes too far from average distance
        exploration_penalty = abs(distance_to_dest - avg_dist_to_dest) * 0.2
        score += exploration_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
