def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Compute angle between current->node and node->destination
        a = distance_matrix[current_node][node]
        b = distance_matrix[node][destination_node]
        c = distance_matrix[current_node][destination_node]
        cos_angle = (a**2 + b**2 - c**2) / (2 * a * b) if (a * b * c) != 0 else 0
        angle_penalty = 1 - abs(cos_angle)  # Penalize sharp angles

        # Weighted score: prioritize proximity to current and destination, penalize sharp angles
        score = distance_to_current + 0.6 * distance_to_dest + 0.4 * angle_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
