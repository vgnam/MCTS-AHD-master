importance of proximity, destination closeness, and centroid alignment based on the remaining path length, ensuring a balance between immediate progress and long-term efficiency. It also incorporates a local search component to refine the selection by evaluating small detours that may lead to better overall paths.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 1.0
    weight_destination = 0.5 + 0.3 * (remaining_nodes / (remaining_nodes + 1))
    weight_centroid = 0.3 * (remaining_nodes / (remaining_nodes + 2))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Weighted score with dynamic weights
        score = (weight_proximity * distance_to_current +
                 weight_destination * distance_to_dest +
                 weight_centroid * centroid_penalty)

        # Local search: evaluate small detours
        if len(unvisited_nodes) > 3:
            detour_score = 0
            for neighbor in unvisited_nodes:
                if neighbor != node:
                    detour_score += distance_matrix[node][neighbor]
            score += 0.2 * detour_score

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
