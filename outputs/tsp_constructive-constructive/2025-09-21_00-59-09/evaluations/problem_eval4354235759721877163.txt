def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None
    remaining_length = len(unvisited_nodes)

    # Dynamic weight adjustment based on remaining path length
    weight_current = 1.0 / (1.0 + 0.1 * remaining_length)
    weight_dest = 0.5 * (1.0 + 0.05 * remaining_length)
    weight_centroid = 0.3 * (1.0 - 0.02 * remaining_length)

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
