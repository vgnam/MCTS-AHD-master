def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 - 0.2 * (remaining_nodes / len(distance_matrix))  # Decrease weight as more nodes are visited
    weight_dest = 0.5 + 0.3 * (remaining_nodes / len(distance_matrix))    # Increase weight as more nodes are visited
    weight_centroid = 0.3 + 0.1 * (remaining_nodes / len(distance_matrix)) # Moderate adjustment

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    scores = []
    nodes = []

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)
        scores.append(score)
        nodes.append(node)

    # Normalize scores and select probabilistically
    if scores:
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - score) / (max_score - min_score + 1e-9) for score in scores]  # Avoid division by zero
        total = sum(normalized_scores)
        probabilities = [s / total for s in normalized_scores]
        next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    else:
        next_node = destination_node

    return next_node
