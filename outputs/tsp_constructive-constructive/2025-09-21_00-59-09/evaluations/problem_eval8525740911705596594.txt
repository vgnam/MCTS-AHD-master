import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    # Compute dynamic centroid with path length consideration
    if unvisited_nodes:
        remaining_path_length = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
        centroid_x = sum(distance_matrix[destination_node][node] * math.exp(-distance_matrix[current_node][node] / remaining_path_length)
                         for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining nodes
    proximity_weight = 1.0 + 0.2 * (len(unvisited_nodes) / (len(distance_matrix) - 1))
    destination_weight = 0.5 * (1.0 + 0.1 * math.log(len(unvisited_nodes) + 1))
    centroid_weight = 0.3 * (1.0 - 0.05 * len(unvisited_nodes))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Probabilistic selection with dynamic weights
        score = (proximity_weight * distance_to_current +
                 destination_weight * distance_to_dest +
                 centroid_weight * centroid_penalty)

        # Add small randomness for exploration
        score *= (1.0 + 0.05 * random.uniform(-1, 1))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
