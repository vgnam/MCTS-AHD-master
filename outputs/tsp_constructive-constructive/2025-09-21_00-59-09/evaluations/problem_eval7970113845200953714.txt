def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic centroid based on remaining unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalize to [0,1]
    else:
        centroid_x = 0
        remaining_ratio = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Novel proximity bias: scales with remaining nodes to encourage early convergence
        proximity_bias = distance_to_dest * (1 - remaining_ratio)

        # Weighted score with dynamic terms
        score = (0.6 * distance_to_current +
                 0.4 * distance_to_dest +
                 0.2 * centroid_penalty +
                 0.1 * proximity_bias)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
