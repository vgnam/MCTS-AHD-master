def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining path length
    remaining_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    total_distance = distance_matrix[current_node][destination_node]
    progress_ratio = remaining_distance / total_distance if total_distance > 0 else 0.5

    weight_proximity = 1.0 - 0.3 * progress_ratio
    weight_dest = 0.5 + 0.3 * progress_ratio
    weight_centroid = 0.3 + 0.2 * (1 - progress_ratio)

    # Diversity penalty: penalize nodes with high similarity to recently visited nodes
    diversity_penalty = 0
    if len(unvisited_nodes) > 1:
        diversity_penalty = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = (weight_proximity * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty +
                 0.2 * diversity_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
