def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and angular spread of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        # Angular spread: average deviation from centroid
        angular_spread = sum(abs(distance_matrix[node][destination_node] - centroid_x) for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0
        angular_spread = 0

    # Dynamic weights based on remaining nodes and angular spread
    remaining_nodes_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))
    weight_proximity = 1.0 - 0.3 * remaining_nodes_ratio
    weight_dest = 0.5 + 0.3 * remaining_nodes_ratio
    weight_centroid = 0.3 + 0.2 * (angular_spread / (centroid_x + 1e-6))  # Avoid division by zero

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Harmonic mean for balanced scoring
        score = (weight_proximity * distance_to_current + weight_dest * distance_to_dest + weight_centroid * centroid_penalty) / \
                (weight_proximity + weight_dest + weight_centroid)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
