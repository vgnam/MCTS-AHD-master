def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic weights based on remaining nodes
    remaining_nodes_count = len(unvisited_nodes)
    weight_current = 1.0 + (0.2 * (remaining_nodes_count / len(unvisited_nodes))) if remaining_nodes_count > 0 else 1.0
    weight_dest = 0.5 * (remaining_nodes_count / len(unvisited_nodes)) if remaining_nodes_count > 0 else 0.5

    # Compute mean distance to destination for unvisited nodes
    if unvisited_nodes:
        mean_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        mean_distance = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        deviation_penalty = abs(distance_to_dest - mean_distance)

        # Dynamic score calculation
        score = (weight_current * distance_to_current) + (weight_dest * distance_to_dest) + (0.4 * deviation_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
