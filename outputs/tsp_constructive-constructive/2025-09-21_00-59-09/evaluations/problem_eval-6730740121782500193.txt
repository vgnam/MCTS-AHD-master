def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 - (0.5 / (remaining_nodes + 1))  # Decreases as remaining nodes decrease
    weight_dest = 0.5 + (0.3 / (remaining_nodes + 1))      # Increases as remaining nodes decrease
    weight_visibility = 0.3 * (1.0 / (remaining_nodes + 1)) # Decreases as remaining nodes decrease

    # Precompute visibility scores (average distance to other unvisited nodes)
    visibility_scores = {}
    for node in unvisited_nodes:
        if unvisited_nodes:
            avg_distance = sum(distance_matrix[node][other] for other in unvisited_nodes) / len(unvisited_nodes)
            visibility_scores[node] = avg_distance
        else:
            visibility_scores[node] = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        visibility_score = visibility_scores[node]

        # Dynamic score with adjusted weights
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_visibility * visibility_score)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
