def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and variance of distances to unvisited nodes
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[destination_node][node] for node in unvisited_nodes]
        centroid = sum(distances_to_dest) / len(unvisited_nodes)
        variance = sum((d - centroid) ** 2 for d in distances_to_dest) / len(unvisited_nodes)
    else:
        centroid = 0
        variance = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        smoothness_penalty = variance if variance > 0 else 0  # Penalize high variance in distances

        # Compute connectivity score: prioritize nodes with many unvisited neighbors
        connectivity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < float('inf'))

        # Weighted score: prioritize proximity, connectivity, and penalize variance
        score = (distance_to_current +
                 0.4 * distance_to_dest +
                 0.2 * smoothness_penalty -
                 0.3 * connectivity)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
