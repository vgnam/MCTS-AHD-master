def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight for centroid penalty based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    centroid_weight = 0.3 + 0.2 * (1 / (1 + remaining_nodes))  # Decreases as more nodes remain

    # Local search within a limited neighborhood
    neighborhood_size = min(3, len(unvisited_nodes))
    neighborhood = sorted(unvisited_nodes, key=lambda x: distance_matrix[current_node][x])[:neighborhood_size]

    for node in neighborhood:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Weighted score with dynamic centroid weight
        score = distance_to_current + 0.5 * distance_to_dest + centroid_weight * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
