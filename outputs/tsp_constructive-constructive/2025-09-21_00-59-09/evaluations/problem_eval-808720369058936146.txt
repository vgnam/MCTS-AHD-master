def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and outliers of unvisited nodes
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        centroid = sum(distances_to_dest) / len(unvisited_nodes)
        outliers = [node for node in unvisited_nodes if abs(distance_matrix[node][destination_node] - centroid) > 2 * centroid]
        outlier_penalty = len(outliers) * 0.2  # Penalize paths with many outliers
    else:
        centroid = 0
        outlier_penalty = 0

    remaining_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid)

        # Dynamic weight adjustment: prioritize destination proximity as remaining distance decreases
        weight_dest = 0.5 + (0.5 * (remaining_distance / (distance_matrix[current_node][destination_node] + 1e-6)))

        # Weighted score with dynamic adjustments
        score = distance_to_current + weight_dest * distance_to_dest + 0.3 * centroid_penalty + outlier_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
