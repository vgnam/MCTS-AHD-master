def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    remaining_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weight adjustment for centroid penalty
        if remaining_distance > 0:
            dynamic_weight = 0.3 * (1 + (distance_to_dest / remaining_distance))
        else:
            dynamic_weight = 0.3

        # Lookahead: evaluate potential detours
        lookahead_penalty = 0
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            if remaining_nodes:
                next_lookahead = min(remaining_nodes, key=lambda n: distance_matrix[node][n] + distance_matrix[n][destination_node])
                lookahead_penalty = distance_matrix[node][next_lookahead] - distance_matrix[node][destination_node]

        # Weighted score with dynamic adjustments
        score = distance_to_current + 0.5 * distance_to_dest + dynamic_weight * centroid_penalty + 0.2 * lookahead_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
