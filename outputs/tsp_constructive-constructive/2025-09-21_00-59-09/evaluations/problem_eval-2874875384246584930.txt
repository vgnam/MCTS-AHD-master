def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    remaining_distance = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_deviation = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weights based on remaining distance and centroid deviation
        current_weight = 1.0 + 0.2 * (remaining_distance / max(distance_to_dest, 1))
        dest_weight = 0.5 + 0.1 * (centroid_deviation / max(centroid_x, 1))
        centroid_weight = 0.3 + 0.1 * (distance_to_dest / max(remaining_distance, 1))

        # Quadratic penalty for centroid deviation
        centroid_penalty = centroid_deviation ** 2

        # Weighted score with dynamic adjustments
        score = (current_weight * distance_to_current +
                 dest_weight * distance_to_dest +
                 centroid_weight * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
