def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on path progress
    progress_ratio = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Normalized progress
    dynamic_weight = 0.5 + 0.5 * progress_ratio  # Weight increases as progress increases

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Novel detour penalty: increases with path length
        detour_penalty = distance_to_current * (1.0 + 0.1 * (len(unvisited_nodes) + 1))

        # Adaptive weighted score
        score = (distance_to_current * dynamic_weight +
                0.5 * distance_to_dest +
                0.3 * centroid_penalty +
                0.2 * detour_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
