def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and exploration factor
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_path = len(unvisited_nodes)
        exploration_factor = 1.0 / (1.0 + remaining_path)  # Decreases as path progresses
    else:
        centroid_x = 0
        exploration_factor = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weights: prioritize proximity early, balance with exploration as path progresses
        weight_current = 1.0 - 0.5 * exploration_factor
        weight_dest = 0.5 + 0.3 * exploration_factor
        weight_centroid = 0.3 * (1.0 - exploration_factor)

        # Novel heuristic: penalize high-visited nodes more as path progresses
        visit_penalty = 0.2 * (1.0 - exploration_factor) * (1.0 / (1.0 + distance_to_current))

        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty -
                 visit_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
