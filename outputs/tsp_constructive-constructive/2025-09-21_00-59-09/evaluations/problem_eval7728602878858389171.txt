def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0
    weight_dest = 0.5 + 0.2 * (10 / (remaining_nodes + 1))  # Decrease weight as path progresses
    weight_centroid = 0.3 + 0.1 * (remaining_nodes / 10)     # Increase weight as path progresses

    # Compute adaptive centroid
    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Heuristic to avoid revisiting nodes in a small neighborhood
        if distance_to_current < 0.1 * centroid_x and remaining_nodes > 5:
            centroid_penalty *= 1.5

        # New scoring equation with dynamic weights
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
