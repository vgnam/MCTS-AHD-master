def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weighting based on remaining nodes and current path length
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight = 1.0 / (1.0 + 0.1 * remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Lookahead: evaluate potential paths by considering the next best node
        if remaining_nodes > 1:
            next_unvisited = [n for n in unvisited_nodes if n != node]
            if next_unvisited:
                next_node_candidate = select_next_node(node, destination_node, next_unvisited, distance_matrix)
                lookahead_penalty = distance_matrix[node][next_node_candidate]
            else:
                lookahead_penalty = 0
        else:
            lookahead_penalty = 0

        # Weighted score with dynamic adjustments
        score = (1.0 - dynamic_weight) * distance_to_current + \
                (0.5 + dynamic_weight * 0.3) * distance_to_dest + \
                (0.3 - dynamic_weight * 0.2) * centroid_penalty + \
                0.2 * lookahead_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
