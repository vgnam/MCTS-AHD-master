def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_proximity = 1.0 + (0.2 * (remaining_nodes / (remaining_nodes + 1)))
    weight_dest = 0.5 * (1.0 - (remaining_nodes / (remaining_nodes + 5)))
    weight_centroid = 0.3 * (1.0 + (remaining_nodes / (remaining_nodes + 2)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Angle heuristic: penalize nodes that deviate from the current path direction
        if current_node != destination_node:
            vec_current = (distance_matrix[current_node][destination_node], 0)
            vec_node = (distance_matrix[current_node][node], distance_matrix[node][destination_node])
            angle = np.arccos(np.dot(vec_current, vec_node) / (np.linalg.norm(vec_current) * np.linalg.norm(vec_node))) if (np.linalg.norm(vec_current) * np.linalg.norm(vec_node)) > 0 else 0
            angle_penalty = angle / np.pi  # Normalize angle penalty
        else:
            angle_penalty = 0

        # Weighted score with dynamic weights and angle penalty
        score = (weight_proximity * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty +
                 0.2 * angle_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
