def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic weight for centroid penalty
    centroid_weight = 0.3 * (len(unvisited_nodes) / (len(unvisited_nodes) + 1))

    # Local search: evaluate immediate neighbors of current node
    local_neighbors = [node for node in unvisited_nodes if distance_matrix[current_node][node] <= 1.5 * min(distance_matrix[current_node][n] for n in unvisited_nodes)]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Centroid calculation based on local neighbors
        if local_neighbors:
            centroid_x = sum(distance_matrix[destination_node][n] for n in local_neighbors) / len(local_neighbors)
        else:
            centroid_x = distance_matrix[destination_node][node]

        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = distance_to_current + 0.5 * distance_to_dest + centroid_weight * centroid_penalty

        # Additional local optimization: prefer nodes that reduce detours
        if node in local_neighbors:
            score *= 0.9  # slight preference for local nodes

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
