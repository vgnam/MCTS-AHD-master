def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic centroid calculation based on remaining distances
    if unvisited_nodes:
        total_weight = sum(distance_matrix[destination_node][node] for node in unvisited_nodes)
        weighted_centroid = sum(distance_matrix[destination_node][node] * distance_matrix[destination_node][node] / total_weight for node in unvisited_nodes)
    else:
        weighted_centroid = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_deviation = abs(distance_matrix[node][destination_node] - weighted_centroid)

        # Novel scoring: proximity to current, destination alignment, and centrality novelty
        novelty_factor = 1.0 / (1.0 + centroid_deviation) if centroid_deviation > 0 else 1.0
        score = distance_to_current + 0.5 * distance_to_dest + 0.3 * (1.0 - novelty_factor)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
