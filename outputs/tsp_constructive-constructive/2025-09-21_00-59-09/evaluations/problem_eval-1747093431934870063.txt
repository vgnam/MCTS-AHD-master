def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    # Dynamic weight adjustment based on path progress
    progress_ratio = (len(unvisited_nodes) / len(distance_matrix)) if distance_matrix else 0.5
    proximity_weight = 1.0 + 0.5 * (1 - progress_ratio)
    dest_weight = 0.5 + 0.3 * progress_ratio
    centroid_weight = 0.3 + 0.2 * (1 - progress_ratio)

    # Track last two nodes to compute path smoothness
    last_two_nodes = [current_node]
    if len(unvisited_nodes) < len(distance_matrix) - 1:
        last_two_nodes.append(unvisited_nodes[-1] if unvisited_nodes else current_node)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Path smoothness penalty: penalize nodes that would cause sharp turns
        if len(last_two_nodes) == 2:
            prev_node, prev_prev_node = last_two_nodes[-1], last_two_nodes[-2]
            direction_prev = (distance_matrix[prev_node][prev_prev_node], distance_matrix[prev_prev_node][prev_node])
            direction_new = (distance_matrix[node][prev_node], distance_matrix[prev_node][node])
            smoothness_penalty = abs(direction_new[0] - direction_prev[0]) + abs(direction_new[1] - direction_prev[1])
        else:
            smoothness_penalty = 0

        # Weighted score with dynamic weights and smoothness penalty
        score = (proximity_weight * distance_to_current +
                 dest_weight * distance_to_dest +
                 centroid_weight * centroid_penalty +
                 0.2 * smoothness_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
