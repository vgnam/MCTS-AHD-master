def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic centroid adjustment based on remaining unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_nodes_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Avoid division by zero
    else:
        centroid_x = 0
        remaining_nodes_ratio = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_deviation = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weight adjustment based on remaining nodes
        weight_adjustment = 1.0 + (0.5 * remaining_nodes_ratio)
        score = (distance_to_current + 0.5 * distance_to_dest) * weight_adjustment + 0.4 * centroid_deviation

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
