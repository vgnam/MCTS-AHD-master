def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and popularity metrics
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        popularity = {node: sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) for node in unvisited_nodes}
    else:
        centroid_x = 0
        popularity = {}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)
        popularity_penalty = popularity[node] if node in popularity else 0

        # Dynamic weighted score with progress-based adjustments
        progress_factor = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))  # Decreases as more nodes are visited
        score = (1 - progress_factor) * distance_to_current + \
                (0.5 + 0.5 * progress_factor) * distance_to_dest + \
                (0.3 + 0.2 * progress_factor) * centroid_penalty + \
                0.1 * popularity_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
