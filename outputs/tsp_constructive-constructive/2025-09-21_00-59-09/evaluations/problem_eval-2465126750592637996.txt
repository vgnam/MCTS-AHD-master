def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 - (0.5 / (remaining_nodes + 1))  # Decrease emphasis on current proximity as path progresses
    weight_dest = 0.5 + (0.3 / (remaining_nodes + 1))     # Increase emphasis on destination as path progresses
    weight_centroid = 0.3 + (0.2 / (remaining_nodes + 1))  # Gradually increase centroid influence

    # Novelty factor: penalize nodes that are too close to recently visited nodes
    recently_visited = set()
    if len(unvisited_nodes) < len(distance_matrix) - 1:
        recently_visited = set(range(len(distance_matrix))) - set(unvisited_nodes) - {current_node, destination_node}

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Novelty penalty: discourage revisiting nearby regions
        novelty_penalty = 0
        if recently_visited:
            novelty_penalty = min(distance_matrix[node][n] for n in recently_visited) * 0.2

        # Weighted score with dynamic weights and novelty factor
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty +
                 novelty_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
