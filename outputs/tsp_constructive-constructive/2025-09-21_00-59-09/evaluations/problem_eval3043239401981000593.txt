def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid based on unvisited nodes and current progress
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        progress_factor = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Adjusts based on remaining nodes
    else:
        centroid_x = 0
        progress_factor = 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weights: prioritize centroid alignment early, then shift to proximity
        weight_centroid = 0.5 + 0.3 * progress_factor
        weight_proximity = 1.0 - 0.2 * progress_factor

        # Score combines weighted terms and a direction penalty
        direction_penalty = distance_to_dest - distance_matrix[current_node][destination_node]
        score = weight_proximity * distance_to_current + weight_centroid * centroid_penalty + 0.1 * max(0, direction_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
