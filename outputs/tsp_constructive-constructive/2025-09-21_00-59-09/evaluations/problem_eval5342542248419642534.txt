def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and variance of unvisited nodes
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        centroid = sum(distances_to_dest) / len(unvisited_nodes)
        variance = sum((d - centroid) ** 2 for d in distances_to_dest) / len(unvisited_nodes)
    else:
        centroid = 0
        variance = 0

    # Dynamic weight adjustment based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 / (1 + 0.1 * remaining_nodes)
    weight_dest = 1.0 / (1 + 0.05 * remaining_nodes)
    weight_centroid = 0.5 * (1 - weight_current - weight_dest)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid)
        variance_penalty = abs(distance_matrix[node][destination_node] - centroid) / (1 + variance)

        # Weighted score with dynamic adjustments
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * (centroid_penalty + variance_penalty))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
