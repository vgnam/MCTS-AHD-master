def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Compute remaining path length estimate
    remaining_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) + distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weight adjustment based on remaining path length
        weight_factor = 1.0 / (1.0 + remaining_length / 1000)  # Normalize based on typical path lengths

        # Angle deviation heuristic: favor nodes that align with global direction
        angle_deviation = abs(distance_matrix[current_node][destination_node] - (distance_matrix[current_node][node] + distance_matrix[node][destination_node]))

        # Weighted score with dynamic adjustments
        score = (1.0 + weight_factor) * distance_to_current + \
                0.5 * (1.0 - weight_factor) * distance_to_dest + \
                0.3 * centroid_penalty + \
                0.2 * angle_deviation

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
