def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and remaining path length
    remaining_nodes = unvisited_nodes.copy()
    remaining_nodes.add(destination_node)
    centroid_x = sum(distance_matrix[destination_node][node] for node in remaining_nodes) / len(remaining_nodes)
    remaining_length = sum(distance_matrix[destination_node][node] for node in remaining_nodes)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)
        progress_ratio = distance_to_dest / remaining_length if remaining_length > 0 else 0

        # Dynamic weights: prioritize destination proximity early, adjust based on progress
        weight_dest = 1.0 - 0.5 * progress_ratio
        weight_centroid = 0.3 * (1 - progress_ratio)

        # Look-ahead: consider potential detours by checking future nodes
        if len(unvisited_nodes) > 1:
            future_nodes = unvisited_nodes.copy()
            future_nodes.remove(node)
            future_centroid = sum(distance_matrix[destination_node][n] for n in future_nodes) / len(future_nodes)
            lookahead_penalty = abs(distance_matrix[node][destination_node] - future_centroid)
        else:
            lookahead_penalty = 0

        # Weighted score with dynamic adjustments
        score = distance_to_current + weight_dest * distance_to_dest + weight_centroid * centroid_penalty + 0.2 * lookahead_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
