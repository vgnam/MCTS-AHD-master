def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute straight-line distance from current to destination
    straight_line_distance = distance_matrix[current_node][destination_node]

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Dynamic weight adjustment based on remaining path length
        remaining_length = len(unvisited_nodes)
        weight_to_current = 1.0 + (0.2 * remaining_length)
        weight_to_dest = 0.5 + (0.1 * remaining_length)

        # Penalize nodes that deviate from the straight-line path
        deviation_penalty = abs(distance_to_current + distance_to_dest - straight_line_distance)

        # Score includes dynamic weights and deviation penalty
        score = (weight_to_current * distance_to_current) + (weight_to_dest * distance_to_dest) + (0.4 * deviation_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
