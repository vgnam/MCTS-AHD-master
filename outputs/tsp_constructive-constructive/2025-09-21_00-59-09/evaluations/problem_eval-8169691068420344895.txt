def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 / (1 + 0.1 * remaining_nodes)  # Decrease current node priority as fewer nodes remain
    weight_dest = 0.5 + 0.3 * (1 - 1 / (1 + remaining_nodes))  # Increase destination priority as nodes deplete
    weight_centroid = 0.3 * (1 + 0.2 * remaining_nodes)  # Increase centroid penalty as fewer nodes remain

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]

        # Gaussian penalty for centroid deviation
        centroid_penalty = np.exp(-0.5 * ((distance_matrix[node][destination_node] - centroid_x) / centroid_x) ** 2) if centroid_x != 0 else 0

        # Historical path bias (simplified: prefer nodes closer to the current path direction)
        path_direction = distance_matrix[current_node][destination_node]
        direction_bias = abs(distance_matrix[current_node][node] - path_direction)

        # Weighted score with dynamic adjustments
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * (1 - centroid_penalty) +
                 0.2 * direction_bias)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
