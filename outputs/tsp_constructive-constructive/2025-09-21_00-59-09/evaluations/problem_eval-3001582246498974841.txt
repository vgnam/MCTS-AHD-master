def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weights based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    dynamic_weight_current = 1.0 if remaining_nodes > 1 else 0.3
    dynamic_weight_dest = 0.5 if remaining_nodes > 1 else 1.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Heuristic for detour risk: minimize the maximum distance to any other unvisited node
        detour_risk = max(distance_matrix[node][other] for other in unvisited_nodes) if unvisited_nodes else 0

        # Weighted score with dynamic weights and detour risk
        score = (dynamic_weight_current * distance_to_current +
                 dynamic_weight_dest * distance_to_dest +
                 0.3 * centroid_penalty +
                 0.2 * detour_risk)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
