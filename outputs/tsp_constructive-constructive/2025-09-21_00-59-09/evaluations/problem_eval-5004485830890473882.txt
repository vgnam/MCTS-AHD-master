def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and path direction
    if unvisited_nodes:
        total_distance = sum(distance_matrix[destination_node][node] for node in unvisited_nodes)
        centroid_x = sum(distance_matrix[destination_node][node] * (1 - distance_matrix[destination_node][node] / total_distance) for node in unvisited_nodes) / len(unvisited_nodes)
        direction_penalty = sum(abs(distance_matrix[current_node][node] - distance_matrix[node][destination_node]) for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0
        direction_penalty = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)
        direction_term = abs(distance_to_current - distance_to_dest)

        # Weighted score with dynamic terms
        score = (0.4 * distance_to_current + 0.3 * distance_to_dest + 0.2 * centroid_penalty + 0.1 * direction_term) * (1 + 0.05 * direction_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
