def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute adaptive weights based on remaining path length
    remaining_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    base_weight = min(1.0, 0.5 + 0.5 * (remaining_length / distance_matrix[current_node][destination_node]))

    # Dynamic centroid recalibration
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        centroid_penalty_factor = 0.3 * (1 - min(1.0, len(unvisited_nodes) / 10))
    else:
        centroid_x = 0
        centroid_penalty_factor = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Adaptive weighted score with dynamic centroid influence
        score = (base_weight * distance_to_current +
                 0.5 * distance_to_dest +
                 centroid_penalty_factor * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
