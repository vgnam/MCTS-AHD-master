def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0

    # Dynamic weights based on remaining path length and node density
    remaining_path = len(unvisited_nodes)
    density_factor = 1 / (1 + remaining_path) if remaining_path > 0 else 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Novelty factor: penalize nodes that have been visited more frequently (simulated here as a placeholder)
        novelty_factor = 1 / (1 + (distance_matrix[node][node] if distance_matrix[node][node] != 0 else 1))

        # Dynamic weighted score using harmonic mean
        weighted_sum = (distance_to_current + 0.5 * distance_to_dest + 0.3 * centroid_penalty) * (1 - density_factor)
        weighted_sum += novelty_factor * density_factor
        score = 1 / (1 / weighted_sum + 1)  # Harmonic mean for balance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
