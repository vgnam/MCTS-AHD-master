def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and frontier score
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        frontier_score = max(distance_matrix[destination_node][node] for node in unvisited_nodes)
    else:
        centroid_x = 0
        frontier_score = 0

    # Dynamic weight adjustment based on remaining nodes
    density_weight = 0.3 if len(unvisited_nodes) > 3 else 0.5

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        frontier_penalty = abs(distance_matrix[node][destination_node] - frontier_score)

        # Weighted score with dynamic adjustments
        score = distance_to_current + 0.5 * distance_to_dest + density_weight * frontier_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
