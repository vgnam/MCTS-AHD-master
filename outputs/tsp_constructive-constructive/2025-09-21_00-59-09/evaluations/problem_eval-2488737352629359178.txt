def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Dynamic weights based on remaining distance and node density
    remaining_distance = distance_matrix[current_node][destination_node]
    node_density = len(unvisited_nodes) / sum(distance_matrix[destination_node][node] for node in unvisited_nodes) if unvisited_nodes else 0

    # Compute dynamic weights
    w1 = 1.0 + 0.2 * (remaining_distance / (sum(distance_matrix[current_node][node] for node in unvisited_nodes) + 1e-6))
    w2 = 0.5 + 0.3 * (node_density / (node_density + 1e-6))
    w3 = 0.3 * (1.0 / (1.0 + node_density))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        density_penalty = (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)) if len(unvisited_nodes) > 1 else 0

        # Dynamic weighted score
        score = w1 * distance_to_current + w2 * distance_to_dest + w3 * density_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
