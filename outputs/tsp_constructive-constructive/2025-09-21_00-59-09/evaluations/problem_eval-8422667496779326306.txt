import random
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')
    remaining_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes)

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weight adjustment based on remaining path length
        weight_factor = 1.0 + 0.2 * (remaining_length / distance_matrix[current_node][destination_node])
        score = (distance_to_current + 0.5 * distance_to_dest + 0.3 * centroid_penalty) * weight_factor

        if score < min_score:
            min_score = score
            next_node = node

    # Introduce probabilistic selection to escape local optima
    if random.random() < 0.1 and len(unvisited_nodes) > 1:
        candidates = [node for node in unvisited_nodes if node != next_node]
        next_node = random.choice(candidates)

    return next_node
