def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and density
    if unvisited_nodes:
        centroid = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        density = len(unvisited_nodes) / sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    else:
        centroid = 0
        density = 0

    # Dynamic weights based on remaining nodes
    proximity_weight = 1.0 + 0.2 * (1 / (1 + len(unvisited_nodes)))
    centroid_weight = 0.3 + 0.5 * density
    urgency_weight = 0.5 * (1 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1)))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid)

        # Hybrid score with dynamic weights
        score = (proximity_weight * distance_to_current +
                 urgency_weight * distance_to_dest +
                 centroid_weight * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
