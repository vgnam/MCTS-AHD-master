def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and remaining path length
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_path_length = len(unvisited_nodes) + 1  # +1 for destination
    else:
        centroid_x = 0
        remaining_path_length = 1

    # Adaptive weights: increase centroid influence as unvisited nodes decrease
    centroid_weight = 0.3 + 0.2 * (1 - len(unvisited_nodes) / remaining_path_length)

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_deviation = abs(distance_matrix[node][destination_node] - centroid_x)

        # Attraction-repulsion score: push toward destination and away from centroid edge
        attraction = distance_to_current + 0.5 * distance_to_dest
        repulsion = centroid_weight * (centroid_deviation ** 1.5)  # Exponential penalty
        score = attraction - repulsion

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
