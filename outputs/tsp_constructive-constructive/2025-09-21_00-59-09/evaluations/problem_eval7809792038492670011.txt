def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid based on current node's proximity
    if unvisited_nodes:
        centroid = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        current_centroid_dist = abs(distance_matrix[current_node][destination_node] - centroid)
    else:
        centroid = 0
        current_centroid_dist = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = (abs(distance_matrix[node][destination_node] - centroid) ** 1.5) * (1 + current_centroid_dist / 100)

        # Path smoothness factor: penalize sharp turns
        if len(unvisited_nodes) > 1:
            smoothness = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (len(unvisited_nodes) - 1)
            smoothness_factor = 0.2 * (smoothness / distance_to_current)
        else:
            smoothness_factor = 0

        # Weighted score with dynamic adjustments
        score = (distance_to_current * 0.8 + 0.4 * distance_to_dest) + (0.6 * centroid_penalty) + smoothness_factor

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
