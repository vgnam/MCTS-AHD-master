def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and average remaining distance
    if unvisited_nodes:
        centroid = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        avg_remaining_dist = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid = 0
        avg_remaining_dist = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid)

        # Dynamic weights based on remaining distance
        base_weight = 1.0
        if avg_remaining_dist > 0:
            dist_ratio = distance_to_dest / avg_remaining_dist
            base_weight = 0.7 + 0.3 * (1 - min(1, dist_ratio))  # Higher weight for closer nodes

        # Connectivity heuristic: prefer nodes with more neighbors (smoother path)
        connectivity = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < float('inf'))

        # Weighted score with dynamic adjustments
        score = (
            base_weight * distance_to_current +
            0.5 * distance_to_dest +
            0.3 * centroid_penalty -
            0.2 * connectivity  # Penalize low-connectivity nodes
        )

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
