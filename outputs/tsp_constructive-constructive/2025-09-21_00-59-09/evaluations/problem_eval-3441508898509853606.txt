def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamically weighted centroid
    if unvisited_nodes:
        centroid_weights = [
            1.0 / (1.0 + distance_matrix[current_node][node] + distance_matrix[node][destination_node])
            for node in unvisited_nodes
        ]
        centroid_x = sum(
            centroid_weights[i] * distance_matrix[destination_node][unvisited_nodes[i]]
            for i in range(len(unvisited_nodes))
        ) / sum(centroid_weights)
    else:
        centroid_x = 0

    # Dynamic penalty factor based on path progress
    progress_factor = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + 1))

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Weighted score with dynamic adjustments
        score = (
            distance_to_current +
            0.5 * distance_to_dest +
            0.3 * (1.0 + progress_factor) * centroid_penalty
        )

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
