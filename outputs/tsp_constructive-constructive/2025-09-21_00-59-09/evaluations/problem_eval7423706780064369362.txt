def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid and outlier penalty
    if unvisited_nodes:
        distances_to_dest = [distance_matrix[node][destination_node] for node in unvisited_nodes]
        centroid_x = sum(distances_to_dest) / len(unvisited_nodes)
        outlier_penalty = max(distances_to_dest) - min(distances_to_dest) if len(unvisited_nodes) > 1 else 0
        remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1)  # Normalize for dynamic scaling
    else:
        centroid_x = 0
        outlier_penalty = 0
        remaining_ratio = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_deviation = abs(distance_to_dest - centroid_x)

        # Dynamic weighted score with scaled centroid influence
        score = (distance_to_current +
                 0.5 * distance_to_dest +
                 0.3 * centroid_deviation * remaining_ratio +
                 0.2 * outlier_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
