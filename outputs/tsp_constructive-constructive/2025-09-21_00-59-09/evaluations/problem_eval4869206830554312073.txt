def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_nodes = len(unvisited_nodes)
        # Dynamic weight adjustment based on remaining nodes
        proximity_weight = 1.0 + (0.5 / remaining_nodes)
        centroid_weight = 0.3 * (1.0 + (0.2 / remaining_nodes))
    else:
        centroid_x = 0
        proximity_weight = 1.0
        centroid_weight = 0.3

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = (proximity_weight * distance_to_current) + (0.5 * distance_to_dest) + (centroid_weight * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
