def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on remaining nodes
    remaining_nodes_ratio = len(unvisited_nodes) / len(distance_matrix)
    proximity_weight = 1.0 + (1.0 - remaining_nodes_ratio) * 0.5
    centroid_weight = 0.3 + remaining_nodes_ratio * 0.2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic weighted score
        score = (proximity_weight * distance_to_current) + (0.5 * distance_to_dest) + (centroid_weight * centroid_penalty)

        # Greedy heuristic: favor nodes that reduce the remaining distance to destination
        remaining_distance = distance_to_dest + sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
        score += 0.2 * remaining_distance

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
