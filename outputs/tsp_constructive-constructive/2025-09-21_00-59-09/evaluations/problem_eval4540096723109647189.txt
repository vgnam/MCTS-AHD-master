def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute adaptive centroid and directionality
    if unvisited_nodes:
        centroid = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        directionality = sum((distance_matrix[node][destination_node] - centroid) ** 2 for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid = 0
        directionality = 0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid)
        direction_penalty = (distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]) ** 2

        # Dynamic weights based on path progress
        progress = 1 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        weight_current = 1.0 + progress * 0.5
        weight_dest = 0.5 + progress * 0.3
        weight_centroid = 0.3 - progress * 0.2
        weight_direction = 0.2 + progress * 0.3

        # Weighted score with adaptive penalties
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty +
                 weight_direction * direction_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
