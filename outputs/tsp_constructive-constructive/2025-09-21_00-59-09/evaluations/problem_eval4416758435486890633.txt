def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Precompute path linearity factor
    current_dest_dist = distance_matrix[current_node][destination_node]
    linearity_factor = 0.0

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Exploration bonus: reward nodes closer to centroid, penalize those that disrupt linearity
        linearity_factor = 1.0 - (abs(distance_to_current + distance_to_dest - current_dest_dist) / (distance_to_current + distance_to_dest + current_dest_dist))
        exploration_bonus = (1.0 - (centroid_penalty / (centroid_x + 1e-6))) * linearity_factor

        # Weighted score with adaptive weights
        score = 1.2 * distance_to_current + 0.8 * distance_to_dest - 0.5 * exploration_bonus

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
