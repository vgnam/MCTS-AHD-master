def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute dynamic centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_path_length = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    else:
        centroid_x = 0
        remaining_path_length = 0

    # Dynamic weight scaling based on remaining path length
    weight_scale = 1.0 + (remaining_path_length / (len(unvisited_nodes) + 1)) * 0.2

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x) * weight_scale

        # Dynamic weighted score
        score = distance_to_current + 0.5 * distance_to_dest + 0.3 * centroid_penalty

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
