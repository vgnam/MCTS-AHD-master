def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on proximity to destination
    proximity_factor = distance_matrix[current_node][destination_node] / max(distance_matrix[current_node].values()) if distance_matrix[current_node] else 0
    weight_current = 1.0 + 0.5 * (1 - proximity_factor)
    weight_dest = 0.5 + 0.3 * proximity_factor
    weight_centroid = 0.3 + 0.2 * (1 - proximity_factor)

    # Node popularity metric (higher if node is frequently visited in the path)
    node_popularity = {node: 0 for node in unvisited_nodes}
    for node in unvisited_nodes:
        for other_node in unvisited_nodes:
            if node != other_node and distance_matrix[node][other_node] < distance_matrix[node][destination_node]:
                node_popularity[node] += 1

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Weighted score with dynamic adjustments and popularity penalty
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty +
                 0.2 * node_popularity[node])

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
