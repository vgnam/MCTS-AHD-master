def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid of unvisited nodes (weighted by remaining distance to destination)
    if unvisited_nodes:
        total_weight = sum(distance_matrix[destination_node][node] for node in unvisited_nodes)
        centroid_x = sum(distance_matrix[destination_node][node] * distance_matrix[destination_node][node] for node in unvisited_nodes) / total_weight if total_weight else 0
    else:
        centroid_x = 0

    # Dynamic weights based on path progress
    remaining_nodes = len(unvisited_nodes)
    progress_factor = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes are visited
    proximity_weight = 1.0 - 0.3 * progress_factor
    alignment_weight = 0.5 + 0.3 * progress_factor
    centroid_weight = 0.3 + 0.2 * progress_factor

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_deviation = abs(distance_matrix[node][destination_node] - centroid_x)

        # Harmonic mean of components
        score = 1.0 / (proximity_weight / distance_to_current +
                      alignment_weight / distance_to_dest +
                      centroid_weight / (centroid_deviation + 1e-6))

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
