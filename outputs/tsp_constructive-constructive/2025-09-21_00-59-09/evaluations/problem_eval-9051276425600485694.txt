def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    min_score = float('inf')
    next_node = None

    # Compute centroid and remaining path length
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
        remaining_path_length = sum(distance_matrix[node][destination_node] for node in unvisited_nodes)
    else:
        centroid_x = 0
        remaining_path_length = 0

    # Dynamic weight adjustment based on remaining path length
    weight_proximity = 0.8 if remaining_path_length > 100 else 1.2
    weight_dest = 0.3 if remaining_path_length > 100 else 0.7
    weight_centroid = 0.1 if remaining_path_length > 100 else 0.5

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Local density penalty (higher penalty for nodes with many close neighbors)
        local_density = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 10) / len(unvisited_nodes)
        density_penalty = local_density * 0.2

        # Destination alignment heuristic (balance proximity and detour risk)
        alignment_score = (distance_to_dest + distance_matrix[current_node][destination_node]) / 2

        # Weighted score with dynamic weights and new penalties
        score = (weight_proximity * distance_to_current +
                weight_dest * distance_to_dest +
                weight_centroid * centroid_penalty +
                density_penalty +
                0.2 * alignment_score)

        if score < min_score:
            min_score = score
            next_node = node

    return next_node
