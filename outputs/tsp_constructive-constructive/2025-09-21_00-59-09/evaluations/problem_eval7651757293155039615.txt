import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    next_node = None
    min_score = float('inf')

    # Compute centroid of unvisited nodes
    if unvisited_nodes:
        centroid_x = sum(distance_matrix[destination_node][node] for node in unvisited_nodes) / len(unvisited_nodes)
    else:
        centroid_x = 0

    # Dynamic weight adjustment based on remaining path length
    remaining_nodes = len(unvisited_nodes)
    weight_current = 1.0 - (0.2 * (remaining_nodes / 10))  # Reduce weight as path progresses
    weight_dest = 0.5 + (0.1 * (remaining_nodes / 10))     # Increase weight as path progresses
    weight_centroid = 0.3 + (0.1 * (remaining_nodes / 10)) # Moderate increase

    for node in unvisited_nodes:
        distance_to_current = distance_matrix[current_node][node]
        distance_to_dest = distance_matrix[node][destination_node]
        centroid_penalty = abs(distance_matrix[node][destination_node] - centroid_x)

        # Dynamic score calculation
        score = (weight_current * distance_to_current +
                 weight_dest * distance_to_dest +
                 weight_centroid * centroid_penalty)

        if score < min_score:
            min_score = score
            next_node = node

    # Probabilistic selection to escape local optima
    if random.random() < 0.1 and len(unvisited_nodes) > 2:  # 10% chance to explore
        next_node = random.choice(unvisited_nodes)

    return next_node
