def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (remaining_nodes + 1)  # Dynamic weight based on remaining nodes
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        if remaining_nodes == 1:
            future_score = distance_matrix[node][destination_node]
        else:
            future_sum = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node)
            future_score = weight_factor * future_sum  # Weighted future contribution
        total_score = current_distance + future_score  # Linear combination instead of product
        if total_score < min_score:
            min_score = total_score
            next_node = node
    return next_node
