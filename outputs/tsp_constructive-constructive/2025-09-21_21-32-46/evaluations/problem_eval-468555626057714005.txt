def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_count = len(unvisited_nodes)
    weight_current = 0.4 + 0.1 * (remaining_count / len(distance_matrix))
    weight_future = 0.3 + 0.2 * (remaining_count / len(distance_matrix))
    weight_variance = 0.3 - 0.1 * (remaining_count / len(distance_matrix))
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        future_distance = distance_matrix[node][destination_node]
        if remaining_count == 1:
            future_average = 0
            variance_penalty = 0
        else:
            future_distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
            future_average = sum(future_distances) / (remaining_count - 1)
            variance = sum((d - future_average) ** 2 for d in future_distances) / (remaining_count - 1)
            variance_penalty = variance ** 0.5
        total_score = (weight_current * current_distance) + (weight_future * (future_distance + future_average)) + (weight_variance * variance_penalty)
        if total_score < min_score:
            min_score = total_score
            next_node = node
    return next_node
