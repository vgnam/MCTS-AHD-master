def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    min_score = float('inf')
    next_node = None
    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight based on remaining nodes
    for node in unvisited_nodes:
        current_distance = distance_matrix[current_node][node]
        if remaining_nodes == 1:
            future_metric = distance_matrix[node][destination_node]
        else:
            future_distances = [distance_matrix[node][other] for other in unvisited_nodes if other != node]
            future_mean = sum(future_distances) / len(future_distances)
            future_std = (sum((d - future_mean) ** 2 for d in future_distances) / len(future_distances)) ** 0.5
            future_metric = future_mean + 0.5 * future_std  # Mean + penalty for variability
        total_score = (1 - weight) * current_distance + weight * future_metric
        if total_score < min_score:
            min_score = total_score
            next_node = node
    return next_node
