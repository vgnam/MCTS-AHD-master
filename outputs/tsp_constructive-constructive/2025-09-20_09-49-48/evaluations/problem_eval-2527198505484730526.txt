def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        next_node = destination_node
    else:
        max_current_dist = max(distance_matrix[current_node][node] for node in unvisited_nodes)
        max_dest_dist = max(distance_matrix[node][destination_node] for node in unvisited_nodes)

        def weighted_score(node):
            current_dist = distance_matrix[current_node][node]
            dest_dist = distance_matrix[node][destination_node]
            normalized_current = current_dist / max_current_dist if max_current_dist > 0 else 0
            normalized_dest = dest_dist / max_dest_dist if max_dest_dist > 0 else 0
            return 0.6 * normalized_current + 0.4 * normalized_dest

        next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
