def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if destination_node in unvisited_nodes:
        next_node = destination_node
    else:
        remaining_nodes = len(unvisited_nodes)
        balance_factor = 1.0 / (1.0 + remaining_nodes)  # Adapts based on remaining nodes
        next_node = min(unvisited_nodes, key=lambda node: (
            balance_factor * distance_matrix[current_node][node] +
            (1 - balance_factor) * distance_matrix[node][destination_node]
        ))
    return next_node
