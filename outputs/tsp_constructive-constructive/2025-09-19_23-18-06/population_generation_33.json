[
     {
          "algorithm": "The algorithm enhances the greedy approach by dynamically weighting node selection based on **distance**, **degree** (connectivity), and **locality** (inverse of average distance to unvisited nodes). It prioritizes nodes that balance proximity, connectivity, and regional centrality, with degree and locality given lower priority than distance. The `adjusted_score` combines these factors multiplicatively, favoring nodes with lower distances, higher degrees, and better regional centrality.",
          "thought": "The new algorithm enhances the greedy approach by incorporating a dynamic weighting mechanism that combines distance, node degree, and a locality factor (inverse of the average distance to unvisited nodes), creating a more adaptive selection criterion that favors nodes balancing proximity, connectivity, and regional centrality.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def adjusted_score(node):\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        if not unvisited_nodes:\n            locality = 1.0\n        else:\n            locality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-6)\n        return distance * (1.0 + 0.5 * (1.0 / (degree + 1e-6))) * locality\n\n    next_node = min(unvisited_nodes, key=adjusted_score)\n    return next_node",
          "objective": 6.60833,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm selects the next node in a TSP path by balancing immediate distance, node connectivity (degree), and locality (average distance to remaining unvisited nodes), using a weighted product of these factors. It prioritizes lower distances and higher connectivity/locality, while the 0.3 * avg_distance term slightly balances the score toward shorter future paths. The code avoids local optima by always evaluating all unvisited candidates.",
          "thought": "This new algorithm combines the hybrid distance-averaging approach with multiplicative scoring, incorporating both immediate distance and future potential through a weighted product of distance, degree (connectivity), and locality (average distance to remaining nodes), while avoiding local optima by considering probabilistic elements in the selection process.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    candidates = []\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)\n            locality = 1.0 / (avg_distance + 1e-6)\n        else:\n            avg_distance = 0.0\n            locality = 1.0\n        score = distance * (1.0 + 0.5 * (degree + 1e-6) * locality) + 0.3 * avg_distance\n        candidates.append((node, score))\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 6.61206,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node to visit by balancing distance, node degree (connectivity), and locality (average distance to remaining unvisited nodes), prioritizing nodes with shorter distances, higher connectivity, and closer proximity to unvisited nodes. The score combines these factors multiplicatively, where distance is weighted by a term that includes degree and locality, with small constants (1e-6) to avoid division by zero. The node with the minimum score is chosen.",
          "thought": "The new algorithm combines No.1's balanced weighting of distance, degree, and locality with No.2's structured candidate evaluation. It evaluates nodes by multiplying distance with a weighted sum of degree and locality terms, then selects the node with the minimum combined score.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    candidates = []\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) + 1e-6)\n        else:\n            locality = 1.0\n        score = distance * (1.0 + 0.5 * (degree + 1e-6) * locality)\n        candidates.append((node, score))\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 6.62239,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node in TSP by balancing distance, degree, locality, and progress, where distance and locality are prioritized early in the tour (low progress_factor), while degree and a balanced combination of factors dominate later (high progress_factor). The combined_score normalizes these metrics to ensure fair comparison, with progress_factor adjusting the weighting dynamically. The code efficiently handles edge cases (e.g., no unvisited nodes) and avoids division by zero with small constants.",
          "thought": "The new algorithm modifies the original by incorporating a dynamic weighting scheme that adjusts node selection based on the current state of the tour (e.g., remaining nodes and tour progress), using a normalized score that combines distance, degree, locality, and a novel \"progress\" factor to prioritize nodes that accelerate tour completion while maintaining balance.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_nodes = len(distance_matrix)\n    remaining_nodes = len(unvisited_nodes)\n    progress_factor = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0\n\n    candidates = []\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n\n        if len(unvisited_nodes) > 1:\n            remaining_unvisited = unvisited_nodes - {node}\n            locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited) + 1e-6)\n        else:\n            locality = 1.0\n\n        normalized_distance = distance / (max(distance_matrix[current_node]) + 1e-6)\n        normalized_degree = degree / (max(sum(1 for d in row if d > 0) for row in distance_matrix) + 1e-6)\n        combined_score = (1 - progress_factor) * (normalized_distance * (1 + normalized_degree * locality)) + progress_factor * (normalized_distance / (1 + normalized_degree * locality))\n\n        candidates.append((node, combined_score))\n\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 6.81576,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node in the TSP tour by balancing **distance, degree (connectivity), and locality (centrality of unvisited nodes)**, with weights adjusted based on remaining tour length. Distance is prioritized early (higher weight) and less so later, while degree and locality gain importance as the tour progresses. The score is computed as a weighted product of these factors, favoring nodes that are close, well-connected, and regionally central, with weights adapting to the remaining path length.",
          "thought": "The new algorithm modifies the original by incorporating a **dynamic weighted combination of distance, degree, and locality**, where weights are adjusted based on the remaining tour length and node centrality, favoring nodes that balance proximity, connectivity, and regional centrality with adaptive prioritization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    def adjusted_score(node):\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        if not unvisited_nodes:\n            locality = 1.0\n        else:\n            locality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-6)\n\n        remaining_nodes = len(unvisited_nodes)\n        tour_length_factor = 1.0 / (remaining_nodes + 1e-6)\n        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1 + 1e-6)\n\n        weight_distance = 0.7 - 0.3 * tour_length_factor\n        weight_degree = 0.2 + 0.1 * tour_length_factor\n        weight_locality = 0.1 + 0.2 * tour_length_factor\n\n        return (distance ** weight_distance) * (degree ** weight_degree) * (locality ** weight_locality)\n\n    next_node = min(unvisited_nodes, key=adjusted_score)\n    return next_node",
          "objective": 6.92587,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines a greedy nearest-neighbor approach with additional heuristics to balance distance, connectivity (degree), and locality. It prioritizes minimal distance while adjusting the selection based on node connectivity (lower degree preferred) and proximity to remaining unvisited nodes (higher locality score preferred). The score is computed as `distance + (1/(degree+\u03b5)) * locality`, where locality is inversely proportional to the average distance to unvisited nodes. This ensures the algorithm considers both immediate proximity and global path efficiency.",
          "thought": "The new algorithm combines the greedy approach of always choosing the closest node with the No.2 algorithm's consideration of node degree and locality, creating a balanced score that prioritizes minimal distance while also accounting for connectivity and proximity to unvisited nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    candidates = []\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) + 1e-6)\n        else:\n            locality = 1.0\n        score = distance + (1.0 / (degree + 1e-6)) * locality\n        candidates.append((node, score))\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 6.95173,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by prioritizing shorter distances while balancing connectivity (degree) and locality (average distance to remaining unvisited nodes). Nodes with lower distance, higher degree, and better locality receive higher scores, making them more likely to be chosen. The score is computed as distance divided by a weighted sum of degree and locality, with locality calculated dynamically for remaining nodes.",
          "thought": "The new algorithm prioritizes nodes with shorter distances, higher connectivity, and closer proximity to unvisited nodes, but uses a different scoring mechanism where distance is divided by a weighted sum of degree and locality, with locality calculated as the average distance to remaining unvisited nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    candidates = []\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            locality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)\n        else:\n            locality = 1.0\n        score = distance / (1.0 + 0.5 * (degree + 1e-6) + locality)\n        candidates.append((node, score))\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 7.00421,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm uses a greedy approach to select the next node by always choosing the closest unvisited node to the current node, prioritizing minimal incremental distance to minimize the total path length. If no unvisited nodes remain, it returns to the destination node. The function prioritizes `current_node` and `distance_matrix` for decision-making, while `destination_node` is only used as a fallback when all nodes are visited. The structure efficiently leverages Python's `min` and `lambda` for concise implementation.",
          "thought": "The algorithm design idea is to select the next node as the one closest to the current node from the unvisited nodes, ensuring a greedy approach to minimize the total path length.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])\n    return next_node",
          "objective": 7.00437,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes immediate distance (weighted 1.5) over future potential (weighted 0.2), making it more greedy by heavily favoring short-term gains while still considering limited future implications. The `select_next_node` function evaluates each unvisited node by combining its direct distance from the current node with an average of its remaining distances to other unvisited nodes, then selects the node with the lowest weighted sum.",
          "thought": "The new algorithm modifies the given approach by emphasizing immediate distance (weight 1.5) while reducing the influence of future potential (weight 0.2), creating a more greedy selection strategy that prioritizes short-term gains while still considering limited future implications.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    candidates = []\n    for node in unvisited_nodes:\n        next_distance = distance_matrix[current_node][node]\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)\n            total_distance = 1.5 * next_distance + 0.2 * avg_distance\n        else:\n            total_distance = next_distance\n        candidates.append((node, total_distance))\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 7.3366,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing immediate distance and future potential, prioritizing short-term proximity (given weight 1.0) while also considering the average distance to remaining nodes (given weight 0.3). This hybrid approach avoids local optima by incorporating probabilistic elements while still optimizing for the shortest path. The code structure clearly separates candidate evaluation and selection, with the weighted sum determining the optimal choice.",
          "thought": "This algorithm combines nearest-neighbor selection with a probabilistic approach, where nodes are selected based on a weighted combination of immediate distance and the average distance to remaining nodes, introducing stochasticity to escape local optima while maintaining path optimization.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n    candidates = []\n    for node in unvisited_nodes:\n        next_distance = distance_matrix[current_node][node]\n        if len(unvisited_nodes) > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)\n            total_distance = next_distance + 0.3 * avg_distance\n        else:\n            total_distance = next_distance\n        candidates.append((node, total_distance))\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
          "objective": 7.44662,
          "other_inf": null
     }
]