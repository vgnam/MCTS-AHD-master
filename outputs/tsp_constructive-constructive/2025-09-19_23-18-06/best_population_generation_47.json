{
     "algorithm": "The algorithm dynamically selects the next node in the TSP tour by balancing distance, connectivity (degree), locality (average distance to remaining nodes), and a progress-driven \"proximity pressure\" term. It prioritizes shorter distances and nodes with higher connectivity while adapting weights based on remaining nodes. The score combines these factors with higher emphasis on distance and connectivity early in the tour, while proximity pressure increases later to encourage closer connections.",
     "thought": "This new algorithm modifies the selection criteria by incorporating a dynamic weighting factor that adapts based on the remaining unvisited nodes, combining distance, connectivity, locality, and a novel \"proximity pressure\" term that intensifies as the tour progresses to encourage closer connections.",
     "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    total_unvisited = len(unvisited_nodes)\n    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))\n\n    candidates = []\n    for node in unvisited_nodes:\n        distance = distance_matrix[current_node][node]\n        degree = sum(1 for d in distance_matrix[node] if d > 0)\n\n        if total_unvisited > 1:\n            remaining_nodes = unvisited_nodes - {node}\n            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)\n            locality = 1.0 / (avg_distance + 1e-6)\n        else:\n            avg_distance = 0.0\n            locality = 1.0\n\n        proximity_pressure = (1.0 - progress_ratio) ** 2\n        dynamic_weight = 0.7 + 0.3 * progress_ratio\n\n        score = (distance * (1.0 + 0.5 * (degree + 1e-6) * locality) +\n                0.3 * avg_distance * dynamic_weight +\n                0.2 * proximity_pressure * distance)\n\n        candidates.append((node, score))\n\n    next_node, _ = min(candidates, key=lambda x: x[1])\n    return next_node",
     "objective": 6.60702,
     "other_inf": null
}