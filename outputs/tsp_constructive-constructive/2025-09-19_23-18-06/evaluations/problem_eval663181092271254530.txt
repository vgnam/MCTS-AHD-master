def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_centrality(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        avg_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        return 1.0 / (1.0 + avg_dist)

    def detour_penalty(node, current, unvisited):
        if len(unvisited) <= 2:
            return 0.0
        remaining = unvisited - {node}
        min_path = min(distance_matrix[current][n] + distance_matrix[n][destination_node] for n in remaining)
        direct_path = distance_matrix[current][destination_node]
        if direct_path == 0:
            return 0.0
        return (min_path - direct_path) / direct_path

    remaining_ratio = len(unvisited_nodes) / len(distance_matrix)
    exploration_factor = 1.0 - (0.9 ** (10 - len(unvisited_nodes)))
    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        centrality = node_centrality(node, unvisited_nodes)
        penalty = detour_penalty(node, current_node, unvisited_nodes)
        weight_dist = 0.5 * (1 - remaining_ratio) + 0.3 * exploration_factor
        weight_cent = 0.3 * (1 - remaining_ratio) + 0.2 * exploration_factor
        weight_pen = 0.2 * remaining_ratio + 0.5 * (1 - exploration_factor)
        score = (weight_dist * immediate_dist +
                 weight_cent * centrality +
                 weight_pen * penalty)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
