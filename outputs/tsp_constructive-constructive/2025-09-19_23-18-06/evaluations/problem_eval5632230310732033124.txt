def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_degree(node):
        return sum(1 for d in distance_matrix[node] if d > 0)

    def exploration_bonus(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        avg_dist = sum(distance_matrix[current][n] for n in unvisited) / len(unvisited)
        return (distance_matrix[current][node] - avg_dist) / avg_dist if avg_dist > 0 else 0.0

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degree(node)
        bonus = exploration_bonus(node, unvisited_nodes, current_node)
        dynamic_weight = 1.0 / (1.0 + 1.5 * (len(unvisited_nodes) - 1) / len(unvisited_nodes))
        penalty = 0.4 * degree / max(node_degree(n) for n in unvisited_nodes) if unvisited_nodes else 0.0
        score = (0.4 * distance + 0.3 * (1.0 / (degree + 1e-6)) * dynamic_weight - 0.3 * penalty) * (1.0 + 0.2 * bonus)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
