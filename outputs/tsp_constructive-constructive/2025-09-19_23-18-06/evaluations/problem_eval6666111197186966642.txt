def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.3 + 0.01 * len(unvisited_nodes)
    max_distance = max(distance_matrix[current_node][node] for node in unvisited_nodes)
    penalty_factor = 0.1

    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        penalty = penalty_factor * (immediate_distance / max_distance) if max_distance > 0 else 0

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            future_distances = [min(distance_matrix[node][n] for n in remaining_nodes if n != node) for n in remaining_nodes]
            avg_future_distance = sum(future_distances) / len(future_distances)
            total_score = (1 - alpha) * immediate_distance + alpha * avg_future_distance + penalty
        else:
            total_score = immediate_distance + penalty

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
