def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    candidates = []
    n = len(unvisited_nodes)
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if n > 1:
            remaining_nodes = unvisited_nodes - {node}
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            # Dynamic scaling factor based on remaining nodes
            scaling_factor = 1 / (math.log(n + 1))
            # Penalize dead-ends (nodes with no remaining connections)
            if max_distance == float('inf'):
                penalty = 1000  # Large penalty for dead-ends
            else:
                penalty = 0
            total_distance = next_distance + scaling_factor * max_distance + penalty
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))
    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
