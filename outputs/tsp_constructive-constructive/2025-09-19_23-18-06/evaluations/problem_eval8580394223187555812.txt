def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_connectivity(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        min_dist = min(distance_matrix[node][n] for n in remaining)
        max_dist = max(distance_matrix[node][n] for n in remaining)
        if max_dist == 0:
            return 0.0
        return min_dist / max_dist

    def tour_gap_penalty(node, current, unvisited):
        if len(unvisited) <= 2:
            return 0.0
        remaining = unvisited - {node}
        avg_dist = sum(distance_matrix[current][n] for n in remaining) / len(remaining)
        return (distance_matrix[current][node] - avg_dist) / avg_dist

    def node_centrality(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        total_dist = sum(distance_matrix[node][n] for n in remaining)
        avg_dist = total_dist / len(remaining)
        return 1 / (1 + avg_dist)

    exploration_factor = 0.9 ** (10 - len(unvisited_nodes))
    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        connectivity = node_connectivity(node, unvisited_nodes)
        gap_penalty = tour_gap_penalty(node, current_node, unvisited_nodes)
        centrality = node_centrality(node, unvisited_nodes)

        weight_dist = 0.4 + 0.4 * exploration_factor
        weight_conn = 0.3 * (1 - exploration_factor)
        weight_gap = 0.2 * exploration_factor
        weight_centrality = 0.1 + 0.2 * (1 - exploration_factor)

        score = (weight_dist * immediate_dist +
                 weight_conn * connectivity +
                 weight_gap * gap_penalty +
                 weight_centrality * centrality)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
