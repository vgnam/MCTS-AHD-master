def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if len(unvisited_nodes) > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            weight = (1 - progress_factor) * (1.0 / (next_distance + 1e-6)) + progress_factor * (degree / (avg_distance + 1e-6))
        else:
            weight = 1.0 / (next_distance + 1e-6)
        candidates.append((node, weight))

    next_node = max(candidates, key=lambda x: x[1])[0]
    return next_node
