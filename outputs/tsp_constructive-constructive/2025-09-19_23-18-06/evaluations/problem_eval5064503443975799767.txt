def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_locality(node, unvisited):
        if len(unvisited) == 1:
            return 0.0
        remaining_nodes = unvisited - {node}
        distances = [distance_matrix[node][n] for n in remaining_nodes]
        return 1.0 / (sum(distances) / len(distances) + 1e-6)

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        locality = node_locality(node, unvisited_nodes)
        weight_dist = 0.4
        weight_locality = 0.6
        score = weight_dist * distance + weight_locality * locality
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
