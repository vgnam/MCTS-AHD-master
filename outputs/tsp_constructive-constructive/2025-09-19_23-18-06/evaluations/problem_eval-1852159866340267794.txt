def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_degree(node):
        return sum(1 for d in distance_matrix[node] if d > 0)

    def node_locality(node, unvisited):
        if len(unvisited) <= 1:
            return 0.0
        remaining = unvisited - {node}
        return 1.0 / (sum(distance_matrix[node][n] for n in remaining) / len(remaining) + 1e-6)

    progress_ratio = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
    exploration_factor = 0.7 ** (10 - len(unvisited_nodes))
    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        degree = node_degree(node)
        locality = node_locality(node, unvisited_nodes)
        proximity_pressure = (1.0 - progress_ratio) ** 2
        weight_dist = 0.5 + 0.3 * exploration_factor
        weight_degree = 0.3 * (1 - exploration_factor)
        weight_locality = 0.2 * exploration_factor
        weight_proximity = 0.1 * proximity_pressure
        score = (weight_dist * immediate_dist +
                 weight_degree * degree +
                 weight_locality * locality +
                 weight_proximity * immediate_dist)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
