def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.5 + 0.5 * (1 - len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
    candidates = []

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) + 1e-6)
            penalty = max(0, next_distance - 2 * sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes))
            total_distance = next_distance + alpha * locality - 0.1 * penalty
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
