def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic temperature based on progress
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    temperature = 0.3 * (remaining_nodes / total_nodes) + 0.1

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if unvisited_nodes:
            # Hub potential metric (degree + closeness + betweenness)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] < float('inf'))
            closeness = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes + 1e-6)

            # Approximate betweenness (simplified)
            betweenness = sum(1 for i in range(total_nodes) for j in range(total_nodes)
                            if i != j and distance_matrix[i][node] + distance_matrix[node][j] == distance_matrix[i][j])

            hub_potential = node_degree + closeness + betweenness * 0.1

            # Sigmoid-weighted exploration term
            exploration_term = temperature * hub_potential / (1 + abs(hub_potential))
        else:
            exploration_term = 0.0

        # Adaptive weighting
        weighted_score = (1.0 - temperature) * immediate_dist + exploration_term
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
