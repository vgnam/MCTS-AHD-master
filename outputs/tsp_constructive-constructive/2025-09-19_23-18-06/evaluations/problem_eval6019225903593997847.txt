def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def adjusted_score(node):
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if not unvisited_nodes:
            locality = 1.0
        else:
            locality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes) + 1e-6)

        remaining_nodes = len(unvisited_nodes)
        tour_length_factor = 1.0 / (remaining_nodes + 1e-6)
        centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1 + 1e-6)

        weight_distance = 0.7 - 0.3 * tour_length_factor
        weight_degree = 0.2 + 0.1 * tour_length_factor
        weight_locality = 0.1 + 0.2 * tour_length_factor

        return (distance ** weight_distance) * (degree ** weight_degree) * (locality ** weight_locality)

    next_node = min(unvisited_nodes, key=adjusted_score)
    return next_node
