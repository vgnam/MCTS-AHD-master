def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def angular_centrality(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        distances = [distance_matrix[current][n] for n in unvisited]
        median_dist = sorted(distances)[len(distances)//2]
        if median_dist == 0:
            return 0.0
        deviations = [abs(distance_matrix[current][node] - d) for d in distances]
        return sum(deviations) / len(deviations) / median_dist

    def exploration_bonus(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        distances = [distance_matrix[current][n] for n in unvisited]
        median_dist = sorted(distances)[len(distances)//2]
        if median_dist == 0:
            return 0.0
        return (distance_matrix[current][node] - median_dist) / median_dist

    weight_dist, weight_cent, weight_bonus = 0.4, 0.3, 0.3

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = angular_centrality(node, unvisited_nodes, current_node)
        bonus = exploration_bonus(node, unvisited_nodes, current_node)
        score = weight_dist * distance + weight_cent * centrality + weight_bonus * bonus
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
