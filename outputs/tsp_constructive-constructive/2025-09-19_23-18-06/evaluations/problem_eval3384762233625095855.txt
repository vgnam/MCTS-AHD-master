def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 0.5
    total_nodes = len(distance_matrix)

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if unvisited_nodes:
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] < float('inf'))
            closeness_centrality = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes + 1e-6)

            # Dynamic exploration term: adjust weight based on remaining nodes
            remaining_nodes = len(unvisited_nodes)
            dynamic_weight = 1.0 / (1.0 + remaining_nodes)  # Decreases as more nodes are visited
            exploration_term = temperature * (node_degree + closeness_centrality) * dynamic_weight
        else:
            exploration_term = 0.0

        weighted_score = (1.0 - temperature) * immediate_dist + exploration_term
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
