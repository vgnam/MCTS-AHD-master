def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def min_spanning_tree_cost(node, nodes):
        if len(nodes) <= 1:
            return 0.0
        remaining = nodes - {node}
        edges = []
        for u in remaining:
            for v in remaining:
                if u < v:
                    edges.append((u, v, distance_matrix[u][v]))
        edges.sort(key=lambda x: x[2])
        parent = {n: n for n in remaining}
        def find(u):
            while parent[u] != u:
                parent[u] = parent[parent[u]]
                u = parent[u]
            return u
        mst_cost = 0.0
        for u, v, w in edges:
            root_u = find(u)
            root_v = find(v)
            if root_u != root_v:
                parent[root_v] = root_u
                mst_cost += w
        return mst_cost

    def connectivity_factor(node, nodes):
        if len(nodes) <= 1:
            return 0.0
        remaining = nodes - {node}
        avg_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        return avg_dist

    def exploration_bonus(node, nodes, visited_ratio):
        if len(nodes) <= 1:
            return 0.0
        remaining = nodes - {node}
        avg_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        return (1.0 - visited_ratio) * avg_dist

    total_nodes = len(unvisited_nodes) + 1
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes if total_nodes > 0 else 0.0
    weight_direct = 0.5 - 0.2 * visited_ratio
    weight_mst = 0.3 + 0.15 * visited_ratio
    weight_connectivity = 0.2 - 0.05 * visited_ratio
    weight_degree = 0.15 + 0.1 * visited_ratio

    candidates = []
    for node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if len(unvisited_nodes) > 1:
            remaining = unvisited_nodes - {node}
            mst_cost = min_spanning_tree_cost(node, remaining)
            conn_factor = connectivity_factor(node, remaining)
            avg_distance = conn_factor
            penalty = 0.4 * avg_distance / max(distance_matrix[current_node]) if max(distance_matrix[current_node]) > 0 else 0
            bonus = exploration_bonus(node, remaining, visited_ratio)
            score = (weight_direct * direct_dist +
                     weight_mst * mst_cost +
                     weight_connectivity * conn_factor +
                     weight_degree * (1.0 / (degree + 1e-6)) +
                     bonus - penalty)
        else:
            score = direct_dist
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
