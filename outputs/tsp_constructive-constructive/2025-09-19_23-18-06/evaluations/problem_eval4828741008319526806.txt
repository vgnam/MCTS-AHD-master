def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = min(0.5, max(0.1, 0.5 * (remaining_nodes / (remaining_nodes + 1))))

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            max_possible_dist = max(distance_matrix[node][n] for n in remaining_unvisited)
            normalized_future_dist = avg_future_dist / (max_possible_dist + 1e-6)
            exploration_term = temperature * (1.0 - normalized_future_dist)
        else:
            exploration_term = 0.0

        weighted_score = (1.0 - temperature) * immediate_dist + exploration_term
        candidates.append((node, weighted_score))

    if remaining_nodes > 1:
        probabilities = [1.0 / (score + 1e-6) for _, score in candidates]
        total_prob = sum(probabilities)
        normalized_probs = [p / total_prob for p in probabilities]
        next_node = random.choices([node for node, _ in candidates], weights=normalized_probs, k=1)[0]
    else:
        next_node, _ = min(candidates, key=lambda x: x[1])

    return next_node
