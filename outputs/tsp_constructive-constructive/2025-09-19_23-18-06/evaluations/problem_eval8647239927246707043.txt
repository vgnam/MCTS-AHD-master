def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_connectivity(node, unvisited):
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if len(unvisited) <= 1:
            return 1.0
        remaining = unvisited - {node}
        locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining) / len(remaining) + 1e-6)
        return (degree + 1e-6) * locality

    exploration_factor = 0.9 ** (10 - len(unvisited_nodes))
    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        connectivity = node_connectivity(node, unvisited_nodes)
        weight_dist = 0.7 - 0.2 * exploration_factor
        weight_conn = 0.3 + 0.2 * exploration_factor
        score = weight_dist * immediate_dist + weight_conn * connectivity
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
