def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    connectivity_weight = (progress_ratio ** 0.5) * 0.7

    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_future_distance = sum(min(distance_matrix[node][n] for n in remaining_nodes if n != node) for n in remaining_nodes) / len(remaining_nodes)
            node_degree = sum(1 for n in remaining_nodes if distance_matrix[node][n] < 1.5 * avg_future_distance)
            degree_weight = node_degree / len(remaining_nodes)
            total_score = immediate_distance * (1.0 + 0.5 * connectivity_weight * degree_weight) + 0.6 * avg_future_distance
        else:
            total_score = immediate_distance
        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
