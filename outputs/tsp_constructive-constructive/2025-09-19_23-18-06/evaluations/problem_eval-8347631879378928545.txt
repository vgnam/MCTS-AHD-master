def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    temperature = 0.5 * (num_unvisited / (num_unvisited + 1))  # Adaptive temperature scaling

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if num_unvisited > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            max_possible_dist = max(distance_matrix[node][n] for n in remaining_unvisited)
            normalized_future_dist = avg_future_dist / (max_possible_dist + 1e-6)
            exploration_term = temperature * (1.0 - normalized_future_dist)
        else:
            exploration_term = 0.0

        weighted_score = (1.0 - temperature) * immediate_dist + exploration_term
        candidates.append((node, weighted_score))

    # Probabilistic selection using Boltzmann distribution
    scores = [score for _, score in candidates]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in scores]  # Invert for minimization
    probabilities = [math.exp(score / (temperature + 1e-6)) for score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    return next_node
