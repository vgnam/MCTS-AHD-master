def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if len(unvisited_nodes) > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            locality = 1.0 / (avg_distance + 1e-6)

            # Novel adaptive weight function
            connectivity_weight = (degree / total_nodes) ** 0.5
            distance_weight = 1.0 / (distance + 1e-6)
            locality_weight = locality ** 2

            # Memory component to avoid revisiting recent nodes
            memory_penalty = 0.1 if node in unvisited_nodes and len(unvisited_nodes) > 2 else 0.0

            weighted_score = (1 - progress_factor) * (distance_weight * (connectivity_weight + locality_weight)) + \
                            progress_factor * (distance + 0.4 * avg_distance) + memory_penalty
        else:
            weighted_score = distance

        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
