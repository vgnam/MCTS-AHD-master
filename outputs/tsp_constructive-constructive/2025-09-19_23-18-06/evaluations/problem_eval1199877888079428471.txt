def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    proximity_pressure = (1.0 - progress_ratio) ** 2

    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_future_distance = sum(min(distance_matrix[node][n] for n in remaining_nodes if n != node) for n in remaining_nodes) / len(remaining_nodes)
            avg_locality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality_weight = 1.0 / (avg_locality + 1e-6)
            total_score = immediate_distance * (1.0 + 0.4 * proximity_pressure * locality_weight) + 0.3 * avg_future_distance
        else:
            total_score = immediate_distance
        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
