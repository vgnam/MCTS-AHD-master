def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 0.3

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        immediate_score = 1.0 / (immediate_dist ** 2)

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            node_centrality = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-6)

            exploration_term = exploration_factor * (1.0 / (avg_future_dist + 1e-6)) * (1.0 + (node_centrality * (remaining_nodes / total_nodes)))
        else:
            exploration_term = 0.0

        weighted_score = (1.0 - exploration_factor) * immediate_score + exploration_term
        candidates.append((node, weighted_score))

    next_node, _ = max(candidates, key=lambda x: x[1])
    return next_node
