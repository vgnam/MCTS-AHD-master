def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    candidates = []
    remaining_nodes_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if remaining_nodes_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality_score = 1.0 / (avg_distance + 1e-6)
            temperature = 1.0 - (remaining_nodes_count / len(unvisited_nodes))
            penalty = (degree ** 2) * (1.0 / (avg_distance + 1e-6))
            total_score = next_distance + temperature * locality_score - penalty
        else:
            total_score = next_distance
        candidates.append((node, total_score))
    probabilities = [math.exp(-score) for _, score in candidates]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]
    next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    return next_node
