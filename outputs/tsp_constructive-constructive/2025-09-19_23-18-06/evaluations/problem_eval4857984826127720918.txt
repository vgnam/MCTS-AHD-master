def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    for node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            degree = sum(1 for d in distance_matrix[node] if d > 0)
            penalty = 0.3 * direct_dist / (sum(distance_matrix[current_node]) / len(distance_matrix[current_node]))
            dynamic_weight = 1.0 / (1.0 + 0.5 * (len(remaining_nodes) / len(unvisited_nodes)))
            score = 0.7 * direct_dist + 0.3 * degree * dynamic_weight - penalty
        else:
            score = direct_dist
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
