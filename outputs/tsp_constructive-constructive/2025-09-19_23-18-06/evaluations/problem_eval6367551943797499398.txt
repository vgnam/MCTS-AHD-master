importance in the graph structure.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_nodes = len(unvisited_nodes) + 1
    candidates = []

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            clustering_coeff = sum(1 for n in remaining_nodes if distance_matrix[node][n] > 0 and any(distance_matrix[m][n] > 0 for m in remaining_nodes if m != node)) / (degree * (degree - 1)) if degree > 1 else 0

            adaptive_weight_connectivity = 0.5 * (1 - len(unvisited_nodes) / num_nodes)
            adaptive_weight_centrality = 0.3 * (len(unvisited_nodes) / num_nodes)

            total_score = next_distance + adaptive_weight_connectivity * (1.0 / (degree + 1e-6)) + adaptive_weight_centrality * clustering_coeff
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
