def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    global_weight = 1.0 - (remaining_count / total_nodes) ** 2

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        centrality = degree / (total_nodes - 1)

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_distance = min(distance_matrix[node][n] for n in remaining_nodes)
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality = 1.0 / (avg_distance + 1e-6)
            detour_cost = (max_distance - min_distance) * (remaining_count / (remaining_count + 1))

            path_potential = (degree * locality) / (distance + 1e-6)
            score = (distance * (1.0 + 0.6 * centrality * locality) +
                    0.4 * avg_distance +
                    0.3 * detour_cost +
                    global_weight * 0.5 * path_potential)
        else:
            score = distance

        candidates.append((node, score))

    if remaining_count > 2:
        scores = [score for _, score in candidates]
        min_score, max_score = min(scores), max(scores)
        normalized_scores = [(max_score - score + 1e-6) / (max_score - min_score + 1e-6) for _, score in candidates]
        next_node = random.choices([node for node, _ in candidates], weights=normalized_scores, k=1)[0]
    else:
        next_node, _ = min(candidates, key=lambda x: x[1])

    return next_node
