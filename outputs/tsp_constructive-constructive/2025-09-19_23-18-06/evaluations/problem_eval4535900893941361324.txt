def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def potential_reduction(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) <= 1:
            return immediate_dist

        remaining = unvisited_nodes - {node}
        if not remaining:
            return immediate_dist

        closest_remaining = min(remaining, key=lambda n: distance_matrix[node][n])
        future_dist = distance_matrix[node][closest_remaining]
        return immediate_dist + 0.9 * future_dist

    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node)
        candidates.append((node, reduction))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
