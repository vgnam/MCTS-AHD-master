def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    n = len(distance_matrix)
    remaining_nodes = unvisited_nodes - {current_node}

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) <= 1:
            total_distance = immediate_dist
        else:
            degree = sum(1 for d in distance_matrix[node] if d > 0)
            centrality = degree / (n - 1)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality = 1.0 / (avg_distance + 1e-6)
            dynamic_weight = 1.0 / (1.0 + 2.0 * (len(remaining_nodes) / len(unvisited_nodes)))

            closest_remaining = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            future_dist = distance_matrix[node][closest_remaining]

            penalty = 0.5 * (immediate_dist / (avg_distance + 1e-6)) * (1.0 / (centrality + 1e-6))
            total_distance = immediate_dist + 0.4 * centrality + 0.3 * locality * dynamic_weight - penalty + 0.3 * future_dist

        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
