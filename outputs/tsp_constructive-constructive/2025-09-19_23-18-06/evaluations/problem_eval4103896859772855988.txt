def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_future_distance = sum(min(distance_matrix[node][n] for n in remaining_nodes if n != node) for n in remaining_nodes) / len(remaining_nodes)
            lookahead_weight = 0.5 * (1 / len(remaining_nodes))
            total_score = immediate_distance + lookahead_weight * avg_future_distance
        else:
            total_score = immediate_distance
        candidates.append((node, total_score))

    # Apply softmax to convert scores into probabilities
    scores = [score for _, score in candidates]
    exp_scores = [math.exp(-score) for score in scores]
    sum_exp_scores = sum(exp_scores)
    probabilities = [exp_score / sum_exp_scores for exp_score in exp_scores]

    # Select node based on probabilities
    next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    return next_node
