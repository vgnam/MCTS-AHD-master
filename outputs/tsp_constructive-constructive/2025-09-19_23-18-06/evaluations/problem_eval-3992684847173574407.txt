def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = len(unvisited_nodes) / 10
    candidates = []
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            centrality = 1 / (1 + avg_distance)
            flexibility = sum(distance_matrix[n][m] for n in remaining_nodes for m in remaining_nodes if n != m) / (remaining_count - 1)**2

            weight_dist = 0.3 + 0.7 * temperature
            weight_centrality = 0.5 * temperature
            weight_flexibility = 0.2 * temperature

            total_score = (weight_dist * next_distance +
                          weight_centrality * (1 - centrality) +
                          weight_flexibility * flexibility)
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    if temperature > 0.2:
        probabilities = [1 / (score + 1e-6) for _, score in candidates]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([node for node, _ in candidates], weights=probabilities, k=1)[0]
    else:
        next_node, _ = min(candidates, key=lambda x: x[1])

    return next_node
