def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)))

    def node_degree(node):
        return sum(1 for d in distance_matrix[node] if d > 0)

    def node_locality(node, unvisited):
        if len(unvisited) <= 1:
            return 0.0
        remaining = unvisited - {node}
        return 1.0 / (sum(distance_matrix[node][n] for n in remaining) / len(remaining) + 1e-6)

    def node_connectivity(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        min_dist = min(distance_matrix[node][n] for n in remaining)
        max_dist = max(distance_matrix[node][n] for n in remaining)
        if max_dist == 0:
            return 0.0
        return min_dist / max_dist

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        degree = node_degree(node)
        locality = node_locality(node, unvisited_nodes)
        connectivity = node_connectivity(node, unvisited_nodes)

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            exploration_term = temperature * (1.0 / (avg_future_dist + 1e-6))
        else:
            exploration_term = 0.0

        weight_dist = 0.4 * (1.0 - temperature)
        weight_degree = 0.2 * temperature
        weight_locality = 0.2 * (1.0 - temperature)
        weight_conn = 0.2 * temperature

        weighted_score = (weight_dist * immediate_dist +
                         weight_degree * degree +
                         weight_locality * locality +
                         weight_conn * connectivity +
                         exploration_term)
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
