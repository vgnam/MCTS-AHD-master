def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_count = len(unvisited_nodes)
    global_weight = 0.4 + 0.6 * (1 - remaining_count / (remaining_count + 3))
    detour_penalty_factor = 0.1 * (1 - global_weight)

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        if remaining_count == 1:
            total_score = immediate_dist
        else:
            remaining_nodes = unvisited_nodes - {node}
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            variance_penalty = sum((distance_matrix[node][n] - avg_remaining_dist) ** 2 for n in remaining_nodes) / (remaining_count - 1)
            path_entropy = (max_remaining_dist - min_remaining_dist) * 0.7
            detour_penalty = (distance_matrix[node][destination_node] - immediate_dist) * detour_penalty_factor
            total_score = (1 - global_weight) * immediate_dist + global_weight * (avg_remaining_dist + variance_penalty - path_entropy) + detour_penalty
        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
