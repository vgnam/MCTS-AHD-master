def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            lookahead_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_distance = distance_matrix[node][lookahead_node]
            total_distance = next_distance + 0.5 * lookahead_distance
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))
    probabilities = [1 / (total_distance + 1e-6) for _, total_distance in candidates]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]
    next_node = random.choices([node for node, _ in candidates], weights=normalized_probs, k=1)[0]
    return next_node
