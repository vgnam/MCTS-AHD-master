def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)))
    total_nodes = len(distance_matrix)

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}

            # Calculate opportunity cost: sum of distances from node to remaining unvisited nodes
            opportunity_cost = sum(distance_matrix[node][n] for n in remaining_unvisited)

            # Calculate path diversity: inverse of sum of distances to all nodes (higher for less connected nodes)
            path_diversity = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-6)

            # Dynamic selection term combining opportunity cost and path diversity
            selection_term = temperature * (1.0 / (opportunity_cost + 1e-6)) * (1.0 + path_diversity)
        else:
            selection_term = 0.0

        # Adaptive weighting based on remaining path length and temperature
        remaining_path_factor = (remaining_nodes / total_nodes) ** 2
        weighted_score = (1.0 - temperature) * immediate_dist + selection_term * remaining_path_factor

        # Add randomness to selection based on temperature
        weighted_score *= (1.0 + temperature * np.random.uniform(-0.1, 0.1))

        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
