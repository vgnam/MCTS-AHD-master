def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 0.5

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}

            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            locality = 1.0 / (avg_future_dist + 1e-6)

            node_centrality = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-6)

            exploration_term = temperature * (locality + node_centrality)

            detour_penalty = max(distance_matrix[node][n] for n in remaining_unvisited) * 0.5
        else:
            exploration_term = 0.0
            detour_penalty = 0.0

        weighted_score = immediate_dist + exploration_term + detour_penalty
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
