importance as the problem becomes more constrained.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_degree(node):
        return sum(1 for d in distance_matrix[node] if d > 0)

    def locality_score(node, unvisited):
        if len(unvisited) <= 1:
            return 0.0
        remaining_nodes = unvisited - {node}
        avg_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
        return 1.0 / (avg_dist + 1e-6)

    def dynamic_weight(unvisited_count):
        if unvisited_count > 6:
            return 0.6, 0.2, 0.2
        elif unvisited_count > 3:
            return 0.5, 0.3, 0.2
        else:
            return 0.4, 0.4, 0.2

    candidates = []
    unvisited_count = len(unvisited_nodes)
    weight_dist, weight_degree, weight_local = dynamic_weight(unvisited_count)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degree(node)
        local = locality_score(node, unvisited_nodes)
        score = weight_dist * distance + weight_degree * degree + weight_local * local
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
