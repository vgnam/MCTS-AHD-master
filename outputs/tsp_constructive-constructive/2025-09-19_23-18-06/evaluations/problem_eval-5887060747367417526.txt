importance of locality as the tour progresses.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_degree(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        return sum(1 for d in distance_matrix[node] if d > 0)

    def node_locality(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        total_dist = sum(distance_matrix[node][n] for n in remaining)
        avg_dist = total_dist / len(remaining)
        return 1 / (1 + avg_dist)

    exploration_factor = 0.9 ** (10 - len(unvisited_nodes))
    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        degree = node_degree(node, unvisited_nodes)
        locality = node_locality(node, unvisited_nodes)

        weight_dist = 0.5 + 0.3 * exploration_factor
        weight_degree = 0.2 * (1 - exploration_factor)
        weight_locality = 0.3 * exploration_factor

        score = (weight_dist * immediate_dist +
                 weight_degree * degree +
                 weight_locality * locality)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
