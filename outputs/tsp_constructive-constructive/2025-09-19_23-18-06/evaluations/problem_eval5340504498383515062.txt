def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    n = len(distance_matrix)
    remaining_count = len(unvisited_nodes)

    # Calculate current path centroid (approximation)
    if remaining_count < n - 1:
        visited_nodes = set(range(n)) - unvisited_nodes - {current_node}
        centroid_x = sum(node for node in visited_nodes) / len(visited_nodes)
        centroid_y = centroid_x  # Simplified for demonstration
    else:
        centroid_x, centroid_y = 0, 0

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        # Calculate proximity pressure (penalty for being far from current path)
        node_x, node_y = node, node  # Simplified coordinates
        proximity_pressure = max(0, (abs(node_x - centroid_x) + abs(node_y - centroid_y)) - 2.0)

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            # Dynamic weight based on remaining nodes and current node's centrality
            dynamic_weight = 1.0 / (1.0 + 2.0 * (remaining_count / n) * (1.0 / (degree + 1e-6)))

            # Locality term with proximity pressure
            locality = (1.0 / (avg_distance + 1e-6)) * (1.0 - 0.3 * proximity_pressure)

            # Combined score
            total_score = next_distance + dynamic_weight * locality - 0.2 * proximity_pressure
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
