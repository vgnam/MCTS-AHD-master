importance" metric combining degree centrality and betweenness centrality, and uses a dynamic penalty system that considers both distance and connectivity, while preserving the original's core structure of combining multiple heuristics.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def betweenness_centrality(node, nodes):
        if len(nodes) <= 2:
            return 0.0
        centrality = 0.0
        for u in nodes:
            if u == node:
                continue
            for v in nodes:
                if v == node or v == u:
                    continue
                if distance_matrix[u][v] > 0:
                    shortest_path = distance_matrix[u][v]
                    paths_through_node = distance_matrix[u][node] + distance_matrix[node][v]
                    if paths_through_node > 0:
                        centrality += min(1.0, shortest_path / paths_through_node)
        return centrality / (len(nodes) * (len(nodes) - 1))

    def local_density(node, nodes, k=3):
        if len(nodes) <= k:
            return 1.0
        distances = sorted(distance_matrix[node][n] for n in nodes if n != node)
        return sum(distances[:k]) / (k * max(distances[:k]) + 1e-6)

    total_nodes = len(unvisited_nodes) + 1
    progress_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes if total_nodes > 0 else 0.0
    weight_direct = 0.5 - 0.2 * progress_ratio
    weight_density = 0.3 + 0.15 * progress_ratio
    weight_importance = 0.3 - 0.1 * progress_ratio

    candidates = []
    for node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        betweenness = betweenness_centrality(node, unvisited_nodes)
        density = local_density(node, unvisited_nodes)

        importance_score = (degree * 0.6 + betweenness * 0.4) / (len(unvisited_nodes) + 1e-6)
        avg_distance = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0
        penalty = 0.25 * avg_distance / (max(distance_matrix[current_node]) + 1e-6) if max(distance_matrix[current_node]) > 0 else 0

        score = (weight_direct * direct_dist +
                 weight_density * (1.0 / (density + 1e-6)) +
                 weight_importance * importance_score -
                 penalty)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
