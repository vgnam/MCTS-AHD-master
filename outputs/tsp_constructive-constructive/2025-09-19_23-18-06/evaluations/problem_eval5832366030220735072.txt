def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def graph_centrality(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        local_degree = sum(1 for n in unvisited if distance_matrix[current][n] > 0) / len(unvisited)
        global_degree = sum(1 for n in unvisited if distance_matrix[node][n] > 0) / len(unvisited)
        return (local_degree + global_degree) / 2

    def temperature(unvisited_count):
        return max(0.1, 1.0 - (10.0 / (unvisited_count + 1.0)))

    candidates = []
    unvisited_count = len(unvisited_nodes)
    temp = temperature(unvisited_count)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = graph_centrality(node, unvisited_nodes, current_node)
        score = distance + (temp * centrality)
        candidates.append((node, score))

    if temp < 0.5:
        next_node, _ = min(candidates, key=lambda x: x[1])
    else:
        scores = [1.0 / (1.0 + x[1]) for x in candidates]
        total = sum(scores)
        probs = [s / total for s in scores]
        next_node = random.choices([x[0] for x in candidates], weights=probs, k=1)[0]

    return next_node
