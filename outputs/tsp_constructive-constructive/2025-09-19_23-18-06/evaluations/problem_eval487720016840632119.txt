def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def tour_density(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        avg_dist = sum(distance_matrix[n][m] for n in remaining for m in remaining if n != m) / (len(remaining) * (len(remaining) - 1))
        if avg_dist == 0:
            return 0.0
        return distance_matrix[current_node][node] / avg_dist

    def connectivity_score(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        return sum(distance_matrix[node][n] for n in remaining) / len(remaining)

    progress_factor = 1 - (len(unvisited_nodes) / len(distance_matrix))
    exploration_bias = 0.8 ** (10 - len(unvisited_nodes))
    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        density = tour_density(node, unvisited_nodes)
        conn_score = connectivity_score(node, unvisited_nodes)
        weight_dist = 0.5 + 0.2 * exploration_bias
        weight_density = 0.3 * (1 - exploration_bias)
        weight_conn = 0.2 * progress_factor
        score = (weight_dist * immediate_dist +
                 weight_density * density +
                 weight_conn * conn_score)
        candidates.append((node, score))

    if len(unvisited_nodes) > 3 and np.random.rand() < 0.3:
        next_node = np.random.choice([c[0] for c in candidates])
    else:
        next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
