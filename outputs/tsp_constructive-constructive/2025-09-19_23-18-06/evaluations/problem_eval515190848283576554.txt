def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            edge_weight = 1.0 / (next_distance + 1e-6)
            proximity_penalty = sum(1.0 / (distance_matrix[node][n] + 1e-6) for n in remaining_nodes) / len(remaining_nodes)
            total_distance = 0.3 * next_distance + 0.4 * edge_weight + 0.3 * proximity_penalty
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
