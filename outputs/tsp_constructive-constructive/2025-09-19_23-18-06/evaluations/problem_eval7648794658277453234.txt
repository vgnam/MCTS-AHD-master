def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    num_unvisited = len(unvisited_nodes)
    future_weight = 0.7 - 0.3 * (1.0 / (num_unvisited + 1))  # Prioritize future early
    immediate_weight = 0.3 + 0.7 * (1.0 / (num_unvisited + 1))  # Shift to immediate later

    def potential_reduction(node):
        immediate_dist = distance_matrix[current_node][node]
        if num_unvisited <= 1:
            return immediate_dist

        remaining = unvisited_nodes - {node}
        if not remaining:
            return immediate_dist

        farthest_remaining = max(remaining, key=lambda n: distance_matrix[node][n])
        future_dist = distance_matrix[node][farthest_remaining]
        return immediate_weight * immediate_dist + future_weight * future_dist

    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node)
        candidates.append((node, reduction))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
