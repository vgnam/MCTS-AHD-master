def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    candidates = []
    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node]) / (total_nodes - 1) + 1e-6)
            connectivity = degree / total_nodes
            score = 0.5 * direct_dist + 0.3 * locality + 0.2 * centrality + 0.1 * connectivity * remaining_count
        else:
            score = direct_dist
        candidates.append((node, score))
    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
