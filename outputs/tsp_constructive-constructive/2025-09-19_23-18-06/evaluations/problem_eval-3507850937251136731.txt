def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def min_spanning_tree_cost(node, nodes):
        if len(nodes) <= 1:
            return 0.0
        remaining = nodes - {node}
        edges = []
        for u in remaining:
            for v in remaining:
                if u < v:
                    edges.append((u, v, distance_matrix[u][v]))
        edges.sort(key=lambda x: x[2])
        parent = {n: n for n in remaining}
        def find(u):
            while parent[u] != u:
                parent[u] = parent[parent[u]]
                u = parent[u]
            return u
        mst_cost = 0.0
        for u, v, w in edges:
            root_u = find(u)
            root_v = find(v)
            if root_u != root_v:
                parent[root_v] = root_u
                mst_cost += w
        return mst_cost

    candidates = []
    total_nodes = len(distance_matrix)
    for node in unvisited_nodes:
        direct_dist = distance_matrix[current_node][node]
        centrality = 1.0 / (sum(distance_matrix[node]) / (total_nodes - 1) + 1e-6)
        if len(unvisited_nodes) > 1:
            remaining = unvisited_nodes - {node}
            mst_cost = min_spanning_tree_cost(node, remaining)
            score = 0.5 * direct_dist + 0.3 * centrality + 0.2 * mst_cost
        else:
            score = direct_dist
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
