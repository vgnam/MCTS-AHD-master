def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def exploration_score(node, unvisited):
        if len(unvisited) == 1:
            return 0.0
        avg_dist = sum(distance_matrix[node][n] for n in unvisited if n != node) / (len(unvisited) - 1)
        return avg_dist

    def exploitation_score(node, unvisited):
        if len(unvisited) <= 2:
            return 0.0
        node_degree = sum(1 for n in unvisited if distance_matrix[node][n] > 0)
        return 1.0 / (node_degree + 1)

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        explore = exploration_score(node, unvisited_nodes)
        exploit = exploitation_score(node, unvisited_nodes)
        weight_dist = 0.4
        weight_explore = 0.3
        weight_exploit = 0.3
        if len(unvisited_nodes) > len(distance_matrix) // 2:
            weight_explore = 0.4
            weight_exploit = 0.2
        score = weight_dist * distance + weight_explore * explore - weight_exploit * exploit
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
