def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    proximity_pressure = (1.0 - progress_ratio) ** 2
    dynamic_penalty = 0.5 * progress_ratio

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality = 1.0 / (avg_distance + 1e-6)

            centrality = 1.0 / (sum(distance_matrix[node]) / (len(distance_matrix) - 1) + 1e-6)
            detour_penalty = max(distance_matrix[node][n] for n in remaining_nodes) / (total_unvisited ** 0.5) * dynamic_penalty

            score = distance * (1.0 + 0.4 * degree * locality * centrality) + 0.3 * avg_distance + 0.5 * proximity_pressure * distance + 0.2 * detour_penalty
        else:
            score = distance

        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
