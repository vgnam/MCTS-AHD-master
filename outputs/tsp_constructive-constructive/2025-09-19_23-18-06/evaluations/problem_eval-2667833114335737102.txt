def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def potential_reduction(node, stage):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) <= 1:
            return immediate_dist

        remaining = unvisited_nodes - {node}
        future_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        connectivity = 1.0 / (sum(1 for d in distance_matrix[node] if d > 0) + 1e-6)

        # Dynamic weight adjustment based on remaining nodes
        weight_future = 0.4 if len(unvisited_nodes) > 3 else 0.6
        weight_connectivity = 0.2 if len(unvisited_nodes) > 3 else 0.4

        # Penalize high immediate distances more in later stages
        stage_factor = 1.0 + (0.1 * (len(unvisited_nodes) - len(remaining)))

        return (immediate_dist * stage_factor) + weight_future * future_dist + weight_connectivity * connectivity

    stage = len(unvisited_nodes)
    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node, stage)
        candidates.append((node, reduction))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
