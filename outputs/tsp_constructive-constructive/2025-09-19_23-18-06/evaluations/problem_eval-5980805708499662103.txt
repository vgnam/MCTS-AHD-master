def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    n_remaining = len(unvisited_nodes)
    dynamic_scale = 0.5 / n_remaining if n_remaining > 0 else 0

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if n_remaining > 1:
            remaining_nodes = unvisited_nodes - {node}
            remaining_distances = [distance_matrix[node][n] for n in remaining_nodes]
            avg_remaining = sum(remaining_distances) / len(remaining_distances)
            centrality = sum(1 for n in remaining_nodes if distance_matrix[node][n] <= avg_remaining * 0.7) / len(remaining_nodes)
            total_distance = next_distance + dynamic_scale * avg_remaining + 0.2 * centrality
        else:
            total_distance = next_distance

        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
