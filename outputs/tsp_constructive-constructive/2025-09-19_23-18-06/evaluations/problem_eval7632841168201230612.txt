def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    total_nodes = len(distance_matrix)
    remaining_count = len(unvisited_nodes)
    visited_ratio = (total_nodes - remaining_count) / total_nodes

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}

            # Calculate potential detour costs
            max_outgoing = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_outgoing = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)

            # Node centrality metric (normalized by remaining nodes)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)

            # Dynamic weight adjustment
            local_weight = 0.7 - 0.4 * visited_ratio
            global_weight = 0.3 + 0.4 * visited_ratio

            # Combined score
            total_score = (local_weight * next_distance) + \
                         (global_weight * (0.6 * max_outgoing + 0.4 * avg_outgoing)) + \
                         (0.2 * (1 - visited_ratio) * centrality)
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
