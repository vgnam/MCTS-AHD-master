def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    global_weight = 0.1 + 0.9 * (1 - (remaining_count / (remaining_count + 3)) ** 2)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        if remaining_count == 1:
            total_score = immediate_dist
        else:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            locality = 1.0 / (avg_distance + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node]) / (total_nodes - 1) + 1e-6)
            detour_penalty = max(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count ** 0.5)

            total_score = (1 - global_weight) * immediate_dist + global_weight * (0.4 * centrality + 0.5 * locality + 0.3 * detour_penalty)
        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
