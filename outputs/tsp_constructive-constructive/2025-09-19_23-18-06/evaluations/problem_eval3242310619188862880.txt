def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def adaptive_centrality(node, unvisited, current):
        if len(unvisited) == 1:
            return 0.0
        local_distances = [distance_matrix[node][n] for n in unvisited if n != node]
        global_distances = [distance_matrix[current][n] for n in unvisited]
        local_centrality = sum(local_distances) / len(local_distances)
        global_centrality = sum(global_distances) / len(global_distances)
        return 0.55 * local_centrality + 0.45 * global_centrality

    def proximity_bias(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        avg_dist = sum(distance_matrix[current][n] for n in unvisited) / len(unvisited)
        if avg_dist == 0:
            return 0.0
        ratio = distance_matrix[current][node] / avg_dist
        return (1 - ratio) * (len(unvisited) ** 0.5)

    candidates = []
    remaining = len(unvisited_nodes)
    weight_dist = 0.8 / (1 + (remaining ** 0.5))
    weight_cent = 0.6 / (1 + (remaining ** 0.5))
    weight_bias = 0.4 * (remaining ** 0.5) / 10

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = adaptive_centrality(node, unvisited_nodes, current_node)
        bias = proximity_bias(node, unvisited_nodes, current_node)
        score = weight_dist * distance + weight_cent * centrality + weight_bias * bias
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
