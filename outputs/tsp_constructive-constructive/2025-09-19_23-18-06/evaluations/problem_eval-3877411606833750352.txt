def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        remaining_nodes = unvisited_nodes - {node}

        if remaining_nodes:
            min_remaining = min(distance_matrix[node][n] for n in remaining_nodes)
            max_remaining = max(distance_matrix[node][n] for n in remaining_nodes)
            detour_potential = (max_remaining - min_remaining) / (len(remaining_nodes) + 1)

            connectivity = sum(1 for n in remaining_nodes if distance_matrix[node][n] <= 1.5 * min_remaining)
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            weight_distance = 0.5 + 0.5 * (remaining_count / 10)
            weight_detour = 0.3 * (10 / remaining_count)
            weight_connect = 0.2 * (remaining_count / 10)

            total_score = (weight_distance * immediate_distance +
                          weight_detour * detour_potential -
                          weight_connect * connectivity / centrality)
        else:
            total_score = immediate_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
