def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    dynamic_weight = 0.2 * progress_ratio

    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            centrality = 1.0 / (sum(distance_matrix[node]) / (len(distance_matrix) - 1) + 1e-6)
            locality = 1.0 / (avg_distance + 1e-6)
            variability = sum(abs(distance_matrix[node][n] - avg_distance) for n in remaining_nodes) / len(remaining_nodes)
            locality_awareness = 0.5 + 0.5 * (1.0 - variability / (avg_distance + 1e-6))
            total_distance = next_distance + 0.3 * avg_distance + dynamic_weight * centrality * locality * locality_awareness
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
