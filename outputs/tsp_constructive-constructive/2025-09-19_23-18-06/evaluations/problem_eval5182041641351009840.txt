def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    global_weight = 0.2 + 0.8 * (1 - remaining_count / (remaining_count + 1))

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        if remaining_count == 1:
            total_score = immediate_dist
        else:
            remaining_nodes = unvisited_nodes - {node}
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            balance_penalty = (max_remaining_dist - avg_remaining_dist) * 0.5
            total_score = (1 - global_weight) * immediate_dist + global_weight * (max_remaining_dist + balance_penalty)
        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
