def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def score(node):
        distance = distance_matrix[current_node][node]
        local_degree = sum(1 for d in distance_matrix[node] if d > 0)
        global_degree = sum(1 for n in unvisited_nodes for d in distance_matrix[n] if d > 0)
        normalized_degree = local_degree / (global_degree + 1e-6)
        adaptive_weight = 0.7 if len(unvisited_nodes) > len(distance_matrix) // 2 else 0.3
        return distance * (1.0 + adaptive_weight * (1.0 - normalized_degree))

    next_node = min(unvisited_nodes, key=score)
    return next_node
