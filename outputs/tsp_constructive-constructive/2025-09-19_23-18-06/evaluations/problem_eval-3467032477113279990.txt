def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            distances_to_remaining = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(distances_to_remaining) / (remaining_count - 1)
            std_dev = (sum((d - avg_distance) ** 2 for d in distances_to_remaining) / (remaining_count - 1)) ** 0.5

            connectivity_entropy = 1.0 / (1 + std_dev) if std_dev > 0 else 1.0
            path_stability = 1.0 / (1 + 0.5 * (max(distances_to_remaining) - avg_distance))

            dynamic_weight = 0.6 * (remaining_count / (remaining_count + 2)) + 0.4 * connectivity_entropy
            locality = 1.0 / (avg_distance + 1e-6)

            total_distance = next_distance * (1.0 + 0.3 * (1.0 / (degree + 1e-6))) * locality * dynamic_weight * path_stability
        else:
            total_distance = next_distance

        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
