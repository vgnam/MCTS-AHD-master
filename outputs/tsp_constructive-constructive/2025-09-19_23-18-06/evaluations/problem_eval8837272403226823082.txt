def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    proximity_factor = (1.0 - progress) ** 3
    entropy_weight = 1.0 / (1.0 + total_unvisited)

    candidates = []
    for node in unvisited_nodes:
        immediate_cost = distance_matrix[current_node][node]
        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            future_connectivity = sum(min(distance_matrix[node][n] for n in remaining_nodes if n != node) for n in remaining_nodes) / len(remaining_nodes)
            global_potential = sum(distance_matrix[n][destination_node] for n in remaining_nodes) / len(remaining_nodes)
            locality_penalty = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            score = (immediate_cost * (1.0 + 0.5 * proximity_factor) +
                    0.4 * future_connectivity +
                    0.3 * global_potential * (1.0 - entropy_weight) -
                    0.2 * locality_penalty * progress)
        else:
            score = immediate_cost + distance_matrix[node][destination_node]

        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
