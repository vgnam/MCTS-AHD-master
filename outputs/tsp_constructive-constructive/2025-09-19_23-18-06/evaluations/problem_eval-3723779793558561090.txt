def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / 10
    candidates = []
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            distances_to_remaining = [distance_matrix[node][n] for n in remaining_nodes]
            avg_distance = sum(distances_to_remaining) / len(distances_to_remaining)
            var_distance = sum((d - avg_distance) ** 2 for d in distances_to_remaining) / len(distances_to_remaining)
            connectivity_score = (avg_distance + var_distance) * (1 / remaining_count)

            weight_dist = 0.3 + 0.7 * exploration_factor
            weight_conn = 0.7 - 0.7 * exploration_factor
            total_score = weight_dist * next_distance + weight_conn * connectivity_score
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
