def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 0.3
    total_nodes = len(distance_matrix)

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if unvisited_nodes:
            # Calculate node degree (number of connections)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] < float('inf'))

            # Calculate closeness centrality (average distance to all nodes)
            closeness_centrality = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes + 1e-6)

            # Static exploration term combining degree and closeness centrality
            exploration_term = temperature * (node_degree + closeness_centrality)
        else:
            exploration_term = 0.0

        # Fixed weighting between immediate distance and exploration term
        weighted_score = (1.0 - temperature) * immediate_dist + exploration_term
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
