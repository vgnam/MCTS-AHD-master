def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def potential_reduction(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) <= 1:
            return immediate_dist

        remaining = unvisited_nodes - {node}
        future_dists = [distance_matrix[node][n] for n in remaining]
        entropy = -sum((d / sum(future_dists)) * math.log(d / sum(future_dists) + 1e-6) for d in future_dists)
        connectivity_reward = 1.0 / (sum(1 for d in distance_matrix[node] if d > 0) + 1e-6)

        dynamic_weight = 1.0 - (len(remaining) / len(unvisited_nodes))
        proximity_penalty = distance_matrix[node][destination_node] / sum(distance_matrix[node])

        return immediate_dist + dynamic_weight * entropy + 0.5 * connectivity_reward - 0.3 * proximity_penalty

    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node)
        candidates.append((node, reduction))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
