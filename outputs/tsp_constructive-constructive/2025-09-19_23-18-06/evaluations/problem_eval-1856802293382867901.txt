def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def dynamic_weight(unvisited_count):
        if unvisited_count > 6:
            return 0.6, 0.3, 0.1
        elif unvisited_count > 3:
            return 0.5, 0.3, 0.2
        else:
            return 0.4, 0.4, 0.2

    candidates = []
    unvisited_count = len(unvisited_nodes)
    weight_dist, weight_avg, weight_penalty = dynamic_weight(unvisited_count)

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = 0.5 * avg_distance / max(distance_matrix[current_node]) if max(distance_matrix[current_node]) > 0 else 0
            score = weight_dist * next_distance + weight_avg * avg_distance - weight_penalty * penalty
        else:
            score = next_distance
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
