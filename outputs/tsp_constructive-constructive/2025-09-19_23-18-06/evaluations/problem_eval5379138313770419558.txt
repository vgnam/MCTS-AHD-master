def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 / (1.0 + remaining_nodes)  # Dynamic weight decreases as nodes are visited

    def adjusted_distance(node):
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        distance = distance_matrix[current_node][node]
        return (1 - weight) * distance + weight * (distance / (degree + 1e-6))

    next_node = min(unvisited_nodes, key=adjusted_distance)
    return next_node
