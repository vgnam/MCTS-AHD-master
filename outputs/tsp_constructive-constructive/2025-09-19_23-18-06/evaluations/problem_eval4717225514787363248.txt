def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_degree(node):
        return sum(1 for d in distance_matrix[node] if d > 0)

    def node_locality(node, unvisited):
        if len(unvisited) == 1:
            return 0.0
        remaining_nodes = unvisited - {node}
        distances = [distance_matrix[node][n] for n in remaining_nodes]
        return sum(distances) / len(distances)

    def cluster_penalty(node, unvisited):
        if len(unvisited) <= 2:
            return 0.0
        cluster_size = len(unvisited)
        return (1.0 / cluster_size) * (0.5 + 0.5 * (len(unvisited_nodes) / (len(unvisited_nodes) + len(unvisited) - 1)))

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degree(node)
        locality = node_locality(node, unvisited_nodes)
        penalty = cluster_penalty(node, unvisited_nodes)
        weight_dist = 0.5
        weight_degree = 0.3
        weight_locality = 0.2
        weight_penalty = 0.2
        score = weight_dist * distance + weight_degree * degree + weight_locality * locality - weight_penalty * penalty
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
