def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    base_temperature = max(0.1, 1.0 - (remaining_nodes / total_nodes))
    temperature = base_temperature * (1.0 - (remaining_nodes / total_nodes) ** 0.5)

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}

            # Calculate node significance: combination of local distance, centrality, and path diversity
            node_centrality = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-6)
            path_diversity = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            node_significance = (1.0 / (immediate_dist + 1e-6)) * node_centrality * (1.0 / (path_diversity + 1e-6))

            # Dynamic exploration term with adaptive weighting
            exploration_weight = temperature * (remaining_nodes / total_nodes) ** 1.5
            exploration_term = exploration_weight * node_significance
        else:
            exploration_term = 0.0

        # Probabilistic selection with adaptive temperature
        selection_probability = (1.0 - temperature) * (1.0 / (immediate_dist + 1e-6)) + exploration_term
        candidates.append((node, selection_probability))

    # Normalize probabilities and select node
    total_prob = sum(prob for _, prob in candidates)
    normalized_probs = [(node, prob / total_prob) for node, prob in candidates]
    next_node = random.choices([node for node, _ in normalized_probs],
                              weights=[prob for _, prob in normalized_probs])[0]
    return next_node
