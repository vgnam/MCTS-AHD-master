def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + math.exp(-0.1 * (remaining_count - 5)))  # Dynamic weight adjustment

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_locality = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality = 1.0 / (avg_locality + 1e-6)

            # Penalty for nodes that are already close to the current path
            penalty = 0.0
            for n in remaining_nodes:
                if distance_matrix[current_node][n] < 1.5 * distance_matrix[current_node][node]:
                    penalty += 0.1

            total_score = (1 - weight_factor) * next_distance + weight_factor * locality - penalty
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
