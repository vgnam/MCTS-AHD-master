import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    temperature = 1.0 - (remaining_count / (remaining_count + 1))  # Exploration factor

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            # Minimum spanning tree heuristic for future connectivity
            mst_heuristic = min(distance_matrix[node][n] for n in remaining_nodes)
            # Risk-averse detour penalty
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            detour_penalty = max(0, (max_distance - avg_distance) * 0.5)
            # Combined score with temperature adjustment
            total_score = (next_distance + mst_heuristic + detour_penalty) * (1.0 + temperature * random.uniform(-0.2, 0.2))
        else:
            total_score = next_distance

        candidates.append((node, total_score))

    # Probabilistic selection based on scores
    scores = [1.0 / (1.0 + s) for _, s in candidates]  # Inverse scoring for probability
    total = sum(scores)
    probs = [s / total for s in scores]
    next_node = random.choices([n for n, _ in candidates], weights=probs, k=1)[0]

    return next_node
