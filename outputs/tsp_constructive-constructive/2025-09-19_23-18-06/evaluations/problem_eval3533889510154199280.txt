def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            locality = 1.0 / (avg_distance + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node]) / (total_nodes - 1) + 1e-6)
            dynamic_weight = 0.5 + 0.4 * (remaining_count / (remaining_count + 1))
            detour_penalty = (max_distance - avg_distance) * 0.3

            score = distance * (1.0 + 0.3 * (degree * locality * centrality)) + 0.4 * max_distance + dynamic_weight * detour_penalty
        else:
            score = distance

        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
