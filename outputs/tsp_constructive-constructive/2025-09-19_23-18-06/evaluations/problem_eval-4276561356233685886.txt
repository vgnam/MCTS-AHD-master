def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_distance = min(distance_matrix[node][n] for n in remaining_nodes)
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            detour_cost = ((min_distance + max_distance) / 2) * (remaining_count ** 2)
            total_distance = next_distance + detour_cost
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
