def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    temperature = max(0.1, 0.5 * (1.0 - progress_ratio))

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if total_unvisited > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            max_possible_dist = max(distance_matrix[node][n] for n in remaining_unvisited)
            normalized_future_dist = avg_future_dist / (max_possible_dist + 1e-6)
            exploration_term = temperature * (1.0 - normalized_future_dist)

            detour_penalty = max(distance_matrix[node][n] for n in remaining_unvisited) / (total_unvisited ** 0.5)
            weighted_score = (1.0 - temperature) * immediate_dist + exploration_term + 0.3 * detour_penalty
        else:
            weighted_score = immediate_dist

        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
