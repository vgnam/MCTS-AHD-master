def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    exploration_factor = len(unvisited_nodes) / 10
    candidates = []
    remaining_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_distance = min(distance_matrix[node][n] for n in remaining_nodes)
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            detour_cost = (max_distance - min_distance) * (1 / remaining_count)

            degree = sum(1 for d in distance_matrix[node] if d > 0)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality = 1.0 / (avg_distance + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node]) / (len(distance_matrix) - 1) + 1e-6)

            weight_dist = 0.3 + 0.7 * exploration_factor
            weight_detour = 0.7 - 0.7 * exploration_factor
            weight_locality = 0.4 * exploration_factor
            total_distance = (weight_dist * next_distance +
                            weight_detour * detour_cost +
                            weight_locality * (degree * locality * centrality))
        else:
            total_distance = next_distance

        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
