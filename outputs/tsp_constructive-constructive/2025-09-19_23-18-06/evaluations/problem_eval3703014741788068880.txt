def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_connectivity(node, unvisited):
        if len(unvisited) <= 2:
            return 1.0
        remaining = unvisited - {node}
        min_dist = min(distance_matrix[node][n] for n in remaining)
        max_dist = max(distance_matrix[node][n] for n in remaining)
        if max_dist == 0:
            return 0.0
        return min_dist / max_dist

    candidates = []

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            dynamic_weight = 1.0 / (1.0 + 1.5 * (len(remaining_nodes) / len(unvisited_nodes)))
            connectivity = node_connectivity(node, unvisited_nodes)
            penalty = 0.5 * avg_distance / max(distance_matrix[current_node]) if max(distance_matrix[current_node]) > 0 else 0

            weight_dist = 0.5
            weight_avg = 0.3 * dynamic_weight
            weight_conn = 0.2
            weight_penalty = -0.1

            score = (weight_dist * immediate_dist +
                    weight_avg * avg_distance +
                    weight_conn * connectivity +
                    weight_penalty * penalty)
        else:
            score = immediate_dist
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
