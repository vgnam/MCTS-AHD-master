def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            locality = 1.0 / (avg_distance + 1e-6)

            centrality = 1.0 / (sum(distance_matrix[node]) / (total_nodes - 1) + 1e-6)
            detour_penalty = max(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count ** 0.5)

            future_distances = [distance_matrix[node][n] for n in remaining_nodes if n != node]
            future_distances_sorted = sorted(future_distances)
            avg_future_distance = sum(future_distances_sorted[:3]) / 3 if len(future_distances_sorted) >= 3 else sum(future_distances_sorted) / len(future_distances_sorted)

            total_score = 0.6 * immediate_distance + 0.4 * avg_future_distance
            total_score += 0.4 * degree * locality * centrality + 0.3 * detour_penalty
        else:
            total_score = immediate_distance

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
