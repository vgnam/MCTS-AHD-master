def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    decay_factor = (len(unvisited_nodes) / total_nodes) ** 2

    def calculate_centroid():
        if not unvisited_nodes:
            return current_node
        x_coords = [n for n in unvisited_nodes]
        y_coords = [n for n in unvisited_nodes]
        centroid_x = sum(x_coords) / len(x_coords)
        centroid_y = sum(y_coords) / len(y_coords)
        return (centroid_x, centroid_y)

    centroid = calculate_centroid()

    def potential_reduction(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) <= 1:
            return immediate_dist

        remaining = unvisited_nodes - {node}
        if not remaining:
            return immediate_dist

        avg_future_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        future_weight = 0.3 * decay_factor

        centroid_dist = abs(node - centroid[0]) + abs(node - centroid[1])
        distance_penalty = 0.2 * centroid_dist

        potential_dist = immediate_dist + future_weight * avg_future_dist + distance_penalty

        if potential_dist > 1.3 * immediate_dist:
            potential_dist += 0.3 * immediate_dist

        return potential_dist

    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node)
        candidates.append((node, reduction))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
