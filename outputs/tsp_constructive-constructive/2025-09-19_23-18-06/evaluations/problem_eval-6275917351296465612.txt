import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = max(0.1, 1.0 - (remaining_nodes / len(distance_matrix)))
    total_nodes = len(distance_matrix)

    def potential_reduction(node):
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            node_connectivity = len([n for n in remaining_unvisited if distance_matrix[node][n] < avg_future_dist * 1.5])
            path_diversity = sum(distance_matrix[node][n] for n in range(total_nodes) if n in unvisited_nodes) / total_nodes

            exploration_term = temperature * (node_connectivity * path_diversity)
        else:
            exploration_term = 0.0

        return (1.0 - temperature) * immediate_dist + exploration_term

    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node)
        candidates.append((node, reduction))

    if random.random() < 0.3:  # 30% chance to explore
        next_node, _ = random.choice(candidates)
    else:  # 70% chance to exploit best option
        next_node, _ = min(candidates, key=lambda x: x[1])

    return next_node
