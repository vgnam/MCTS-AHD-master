def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_degree(node):
        return sum(1 for d in distance_matrix[node] if d > 0)

    def locality(node, unvisited):
        if len(unvisited) == 1:
            return 1.0
        remaining_nodes = unvisited - {node}
        return 1.0 / (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) + 1e-6)

    def exploration_penalty(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        avg_dist = sum(distance_matrix[current][n] for n in unvisited) / len(unvisited)
        return (avg_dist - distance_matrix[current][node]) / avg_dist if avg_dist > 0 else 0.0

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = node_degree(node)
        local = locality(node, unvisited_nodes)
        penalty = exploration_penalty(node, unvisited_nodes, current_node)
        weight_dist = 0.4 if len(unvisited_nodes) > 4 else 0.2
        weight_degree = 0.2 if len(unvisited_nodes) > 4 else 0.3
        weight_local = 0.3 if len(unvisited_nodes) > 4 else 0.5
        score = (weight_dist * (1.0 / (distance + 1e-6)) + weight_degree * degree + weight_local * local) * (1.0 - 0.1 * penalty)
        candidates.append((node, score))

    next_node, _ = max(candidates, key=lambda x: x[1])
    return next_node
