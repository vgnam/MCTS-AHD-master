def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def cluster_centrality(node, unvisited):
        if len(unvisited) == 1:
            return 0.0
        distances = [distance_matrix[node][n] for n in unvisited if n != node]
        return sorted(distances)[len(distances)//2]  # Median instead of average

    def exploration_bonus(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        avg_dist = sum(distance_matrix[current][n] for n in unvisited) / len(unvisited)
        bonus = (distance_matrix[current][node] - avg_dist) / avg_dist if avg_dist > 0 else 0.0
        return bonus * (1.0 / len(unvisited))  # Scale by inverse of remaining nodes

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = cluster_centrality(node, unvisited_nodes)
        bonus = exploration_bonus(node, unvisited_nodes, current_node)
        weight_dist = 0.4  # Reduced distance weight
        weight_cent = 0.3  # Same centrality weight
        weight_bonus = 0.3  # Increased exploration bonus weight
        score = weight_dist * distance + weight_cent * centrality + weight_bonus * bonus
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
