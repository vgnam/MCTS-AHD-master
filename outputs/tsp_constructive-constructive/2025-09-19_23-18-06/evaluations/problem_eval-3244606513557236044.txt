def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1 / (1 + math.exp(-5 * (remaining_nodes / total_nodes - 0.5)))

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            locality = 1.0 / (avg_future_dist + 1e-6)

            global_penalty = sum(distance_matrix[n][m] for n in remaining_unvisited for m in remaining_unvisited if n != m) / (len(remaining_unvisited) ** 2) if len(remaining_unvisited) > 1 else 0
            normalized_degree = degree / (total_nodes - 1)

            weighted_score = (1.0 - temperature) * immediate_dist + temperature * (locality * (1.0 - normalized_degree) - 0.3 * global_penalty)
        else:
            weighted_score = immediate_dist

        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
