def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    global_weight = 0.3 + 0.7 * (1 - remaining_count / (remaining_count + 5))
    total_nodes = len(distance_matrix)

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if remaining_count == 1:
            total_score = immediate_dist
        else:
            remaining_nodes = unvisited_nodes - {node}
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            locality = 1.0 / (avg_remaining_dist + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node]) / (total_nodes - 1) + 1e-6)

            detour_cost = (max_remaining_dist - min_remaining_dist) * (remaining_count / (remaining_count + 1))
            adaptive_weight = (degree / total_nodes) * (remaining_count / (remaining_count + 1))

            weight_immediate = 0.7 - 0.1 * (1 - remaining_count / (remaining_count + 5))
            weight_avg = 0.3 + 0.1 * (1 - remaining_count / (remaining_count + 5))

            total_score = (weight_immediate * immediate_dist +
                          weight_avg * (avg_remaining_dist + 0.2 * detour_cost) +
                          0.3 * (degree * locality * centrality) * adaptive_weight)

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
