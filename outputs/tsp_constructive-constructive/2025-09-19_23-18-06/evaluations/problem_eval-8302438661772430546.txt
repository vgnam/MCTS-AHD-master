def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    candidates = []
    for node in unvisited_nodes:
        immediate_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = unvisited_nodes - {node}
            lookahead_node = min(remaining_nodes, key=lambda n: distance_matrix[node][n])
            lookahead_distance = distance_matrix[node][lookahead_node]
            weighted_score = immediate_distance + 0.5 * lookahead_distance
            random_factor = 0.3 * (distance_matrix[current_node][node] / max(distance_matrix[current_node].values()))
            total_score = weighted_score * (1 - random_factor)
        else:
            total_score = immediate_distance
        candidates.append((node, total_score))
    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
