importance metric that combines immediate distance with a long-term path potential score, using a sigmoid-based temperature scaling to transition from exploration to exploitation, while incorporating a node centrality measure to prioritize well-connected nodes in the remaining graph.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    temperature = 1.0 / (1.0 + math.exp(remaining_nodes - len(distance_matrix)/2))

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}
            centrality = sum(1.0 / (distance_matrix[node][n] + 1e-6) for n in remaining_unvisited)
            path_potential = centrality * math.sqrt(len(remaining_unvisited))
            exploration_term = temperature * path_potential
        else:
            exploration_term = 0.0

        weighted_score = (1.0 - temperature) * immediate_dist + exploration_term
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
