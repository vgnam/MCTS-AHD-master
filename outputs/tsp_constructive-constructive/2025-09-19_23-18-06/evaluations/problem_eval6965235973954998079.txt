def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    progress_ratio = 1.0 - (remaining_count / (remaining_count + len(distance_matrix)))
    global_weight = 0.3 + 0.7 * (1 - progress_ratio)
    proximity_pressure = (1.0 - progress_ratio) ** 2

    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        if remaining_count == 1:
            total_score = immediate_dist
        else:
            remaining_nodes = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count - 1)
            locality = 1.0 / (avg_distance + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node]) / (len(distance_matrix) - 1) + 1e-6)
            detour_penalty = max(distance_matrix[node][n] for n in remaining_nodes) / (remaining_count ** 0.5) * (1.0 - progress_ratio)

            total_score = (1 - global_weight) * immediate_dist + global_weight * (avg_distance + 0.3 * locality * centrality + 0.2 * detour_penalty)
            total_score += 0.5 * proximity_pressure * immediate_dist

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
