def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_centrality(node, unvisited):
        if len(unvisited) == 1:
            return 0.0
        degrees = [sum(1 for n in unvisited if distance_matrix[node][n] < distance_matrix[node][current_node]) for node in unvisited]
        return sum(degrees) / len(unvisited) if degrees else 0.0

    def adaptive_weight(progress):
        base = 0.6 - 0.4 * progress
        return max(0.3, min(0.8, base))

    def probabilistic_selection(candidates):
        scores = [1.0 / (1.0 + s) for _, s in candidates]
        total = sum(scores)
        probs = [s / total for s in scores]
        return np.random.choice([n for n, _ in candidates], p=probs)

    progress = 1.0 - len(unvisited_nodes) / (len(unvisited_nodes) + 1)
    weight_dist = adaptive_weight(progress)
    weight_centrality = 0.3
    weight_penalty = 0.4 - 0.2 * progress

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = node_centrality(node, unvisited_nodes)
        penalty = len(unvisited_nodes) / (len(unvisited_nodes) + 1)
        score = weight_dist * distance + weight_centrality * centrality - weight_penalty * penalty
        candidates.append((node, score))

    if progress < 0.5:
        next_node = probabilistic_selection(candidates)
    else:
        next_node, _ = min(candidates, key=lambda x: x[1])

    return next_node
