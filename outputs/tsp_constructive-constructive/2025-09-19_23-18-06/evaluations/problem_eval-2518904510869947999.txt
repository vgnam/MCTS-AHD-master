def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        locality = 1.0 / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) + 1e-6) if remaining_count > 1 else 0

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_distance = min(distance_matrix[node][n] for n in remaining_nodes)
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            detour_cost = (max_distance - min_distance) * (remaining_count - 1) / remaining_count
            score = 0.3 * distance + 0.7 * degree + 0.5 * locality + 0.4 * detour_cost
        else:
            score = 0.6 * distance + 0.4 * degree
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
