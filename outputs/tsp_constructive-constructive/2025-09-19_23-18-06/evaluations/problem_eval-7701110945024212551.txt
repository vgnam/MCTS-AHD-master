def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            degree = sum(1 for d in distance_matrix[node] if d > 0)
            dynamic_weight = 1.0 / (1.0 + 1.5 * (len(remaining_nodes) / total_unvisited))
            proximity_pressure = (1.0 - progress_ratio) ** 2
            centrality = 1.0 / (sum(distance_matrix[node]) / (len(distance_matrix) - 1) + 1e-6)
            detour_cost = (max_distance - min(distance_matrix[node][n] for n in remaining_nodes)) * (total_unvisited / (total_unvisited + 1))
            total_distance = next_distance + 0.3 * max_distance + 0.2 * proximity_pressure * avg_distance + dynamic_weight * (centrality + (1.0 / (degree + 1e-6))) - 0.1 * detour_cost
        else:
            total_distance = next_distance
        candidates.append((node, total_distance))
    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
