def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    decay_factor = 1.0 - (remaining_count / (remaining_count + 1.0)) ** 0.5

    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            locality = 1.0 / (sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) + 1e-6)
            weighted_locality = decay_factor * locality
            total_score = next_distance + 0.2 * weighted_locality
        else:
            total_score = next_distance

        # Add small random perturbation to avoid local optima
        if remaining_count > 2 and random.random() < 0.1:
            total_score *= 1.0 + 0.05 * (random.random() - 0.5)

        candidates.append((node, total_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
