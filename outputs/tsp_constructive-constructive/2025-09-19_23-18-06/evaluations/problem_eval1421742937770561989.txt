def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_unvisited = len(unvisited_nodes)
    progress_ratio = 1.0 - (total_unvisited / (total_unvisited + len(distance_matrix)))
    exploration_factor = progress_ratio ** 1.5

    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]

        if total_unvisited > 1:
            remaining_nodes = unvisited_nodes - {node}
            max_distance = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_distance = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            normalized_max = max_distance / max(max(distance_matrix[node][n] for n in distance_matrix[node] if n != node), 1)
            normalized_avg = avg_distance / max(sum(distance_matrix[node][n] for n in distance_matrix[node] if n != node) / (len(distance_matrix[node]) - 1), 1)

            total_distance = next_distance + 0.3 * normalized_max + 0.4 * normalized_avg
            exploration_weight = 0.2 * exploration_factor * (1 - normalized_max)
            total_distance += exploration_weight
        else:
            total_distance = next_distance

        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
