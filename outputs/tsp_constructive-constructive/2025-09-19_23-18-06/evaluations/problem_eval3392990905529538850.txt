def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    exploration_factor = 1.0 - (remaining_count / len(distance_matrix)) ** 2

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]

        # Connectivity metric: normalized degree of node
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        normalized_degree = degree / (len(distance_matrix) - 1)

        # Global reachability: min/max distances to other nodes
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            max_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            # Node significance combines multiple factors
            reachability_score = (max_dist - min_dist) / (avg_dist + 1e-6)
            detour_penalty = (max_dist - distance) * (1.0 - exploration_factor)
            significance = (0.6 * normalized_degree + 0.4 * reachability_score) * (1.0 - 0.2 * detour_penalty)

            # Dynamic weight adjustment
            distance_weight = 0.5 + 0.5 * exploration_factor
            significance_weight = 0.5 - 0.5 * exploration_factor

            score = (distance_weight * distance) + (significance_weight * significance)
        else:
            score = distance

        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
