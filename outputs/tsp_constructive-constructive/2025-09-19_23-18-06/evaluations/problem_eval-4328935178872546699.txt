def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    def node_connectivity(node):
        if not unvisited_nodes:
            return 0.0
        remaining = unvisited_nodes - {node}
        if not remaining:
            return 0.0
        avg_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        return len(remaining) / (avg_dist + 1e-6)

    def exploration_bonus(node, remaining):
        if len(remaining) <= 2:
            return 0.0
        avg_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        return (len(remaining) / avg_dist) if avg_dist > 0 else 0.0

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        connectivity = node_connectivity(node)
        remaining = unvisited_nodes - {node}
        bonus = exploration_bonus(node, remaining)

        weight_distance = 0.6 if progress < 0.5 else 0.3
        weight_connectivity = 0.3 if progress < 0.5 else 0.6
        weight_bonus = 0.1

        score = (weight_distance * distance +
                 weight_connectivity * connectivity +
                 weight_bonus * bonus)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
