def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = 1.0 - (remaining_nodes / (remaining_nodes + total_nodes))
    current_to_dest_dist = distance_matrix[current_node][destination_node]

    # Adaptive temperature scaling
    temperature = max(0.1, 1.0 - progress_ratio * (1.0 - 0.5 * (current_to_dest_dist / max(max(row) for row in distance_matrix))))

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}

            # Non-linear exploration potential
            exploration_potential = sum(1.0 / (distance_matrix[node][n] + 1e-6) for n in remaining_unvisited) ** 2

            # Centrality with distance weighting
            centrality_score = sum(1.0 / (distance_matrix[node][n] + 1e-6) for n in range(total_nodes)) ** 0.5

            # Detour resistance factor
            detour_resistance = min(distance_matrix[node][n] for n in remaining_unvisited) / (max(distance_matrix[node][n] for n in remaining_unvisited) + 1e-6)

            # Combined score with adaptive weighting
            exploration_weight = temperature * (1.0 - progress_ratio)
            score = (1.0 - exploration_weight) * immediate_dist + \
                    exploration_weight * (0.7 * exploration_potential + 0.3 * centrality_score) + \
                    0.2 * (1.0 - detour_resistance)
        else:
            score = immediate_dist

        candidates.append((node, score))

    # Probabilistic selection based on scores
    scores = [s for _, s in candidates]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-6) for s in scores]

    # Apply temperature to selection probabilities
    adjusted_scores = [s ** (1.0 / temperature) for s in normalized_scores]
    total = sum(adjusted_scores)
    probabilities = [s / total for s in adjusted_scores]

    next_node = random.choices([n for n, _ in candidates], weights=probabilities, k=1)[0]
    return next_node
