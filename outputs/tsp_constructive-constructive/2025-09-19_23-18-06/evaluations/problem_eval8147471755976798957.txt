def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes if total_nodes > 0 else 0.0

    candidates = []
    for node in unvisited_nodes:
        next_distance = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_unvisited = unvisited_nodes - {node}
            avg_distance = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)

            # Lookahead: Evaluate next step from the candidate node
            if len(remaining_unvisited) > 1:
                next_candidates = []
                for next_node in remaining_unvisited:
                    next_next_distance = distance_matrix[node][next_node]
                    next_remaining = remaining_unvisited - {next_node}
                    next_avg_distance = sum(distance_matrix[next_node][n] for n in next_remaining) / len(next_remaining) if next_remaining else 0
                    next_total_distance = next_next_distance + 0.2 * next_avg_distance
                    next_candidates.append((next_node, next_total_distance))
                best_next_distance = min(next_candidates, key=lambda x: x[1])[1]
                total_distance = (1 - progress_factor) * next_distance + progress_factor * (next_distance + 0.3 * avg_distance + 0.1 * best_next_distance)
            else:
                total_distance = next_distance + 0.3 * avg_distance
        else:
            total_distance = next_distance

        # Penalize revisiting nodes to avoid cycles
        if node in unvisited_nodes and node != current_node:
            total_distance *= 1.1

        candidates.append((node, total_distance))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
