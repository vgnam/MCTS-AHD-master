def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_centrality(node, unvisited):
        if len(unvisited) == 1:
            return 0.0
        connections = [distance_matrix[node][n] for n in unvisited if n != node]
        if not connections:
            return 0.0
        return len([c for c in connections if c < sum(connections)/len(connections)]) / len(connections)

    def dynamic_weight(remaining_nodes):
        progress = 1.0 - (len(remaining_nodes) / len(unvisited_nodes + [current_node]))
        return 0.3 + 0.7 * progress

    def cluster_penalty(node, unvisited):
        if len(unvisited) <= 2:
            return 0.0
        return (1.0 / len(unvisited)) * (0.5 + 0.5 * (len(unvisited) / (len(unvisited) + 1)))

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = node_centrality(node, unvisited_nodes)
        penalty = cluster_penalty(node, unvisited_nodes)
        weight_dist = dynamic_weight(unvisited_nodes)
        weight_centrality = 0.3 - 0.2 * dynamic_weight(unvisited_nodes)
        weight_penalty = 0.2 * dynamic_weight(unvisited_nodes)
        score = (weight_dist * distance) + (weight_centrality * centrality) - (weight_penalty * penalty)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
