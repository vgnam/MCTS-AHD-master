def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def adaptive_weight_dist(unvisited):
        remaining = len(unvisited_nodes)
        return 0.5 + 0.5 * (1.0 / (remaining + 1))

    def adaptive_weight_cohesion(unvisited):
        remaining = len(unvisited_nodes)
        return 0.3 * (1.0 - (1.0 / (remaining + 1)))

    def adaptive_weight_penalty(unvisited):
        remaining = len(unvisited_nodes)
        return 0.2 * (1.0 / (remaining + 1))

    def novel_cluster_cohesion(node, unvisited):
        if len(unvisited) <= 1:
            return 0.0
        intra_distances = [distance_matrix[node][n] for n in unvisited if n != node]
        if not intra_distances:
            return 0.0
        avg_intra = sum(intra_distances) / len(intra_distances)
        centrality = sum(distance_matrix[node][n] for n in unvisited) / len(unvisited)
        return 0.7 * avg_intra + 0.3 * centrality

    def novel_cluster_penalty(node, unvisited):
        if len(unvisited) <= 2:
            return 0.0
        cluster_size = len(unvisited)
        revisit_factor = (len(unvisited_nodes) + 1) / (cluster_size + 1)
        return (1.0 / cluster_size) * (0.6 + 0.4 * revisit_factor)

    candidates = []
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        cohesion = novel_cluster_cohesion(node, unvisited_nodes)
        penalty = novel_cluster_penalty(node, unvisited_nodes)
        weight_dist = adaptive_weight_dist(unvisited_nodes)
        weight_cohesion = adaptive_weight_cohesion(unvisited_nodes)
        weight_penalty = adaptive_weight_penalty(unvisited_nodes)
        score = weight_dist * distance + weight_cohesion * cohesion - weight_penalty * penalty
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
