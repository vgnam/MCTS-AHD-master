def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_centrality(node, unvisited, current):
        if len(unvisited) <= 2:
            return 0.0
        avg_dist = sum(distance_matrix[current][n] for n in unvisited) / len(unvisited)
        if avg_dist == 0:
            return 0.0
        deviations = [abs(distance_matrix[current][node] - distance_matrix[current][n]) for n in unvisited if n != node]
        return sum(deviations) / len(deviations) / avg_dist

    temperature = max(1.0, len(unvisited_nodes) / 5.0)
    candidates = []
    unvisited_count = len(unvisited_nodes)

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        centrality = node_centrality(node, unvisited_nodes, current_node)
        score = (distance / (1 + centrality)) ** (1 / temperature)
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
