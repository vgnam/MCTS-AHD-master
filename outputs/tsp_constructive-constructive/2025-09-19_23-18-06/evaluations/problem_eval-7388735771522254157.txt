def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)
        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            total_remaining_distance = sum(distance_matrix[node][n] for n in remaining_nodes)
            betweenness = sum(1 for n in remaining_nodes if distance_matrix[node][n] < total_remaining_distance / len(remaining_nodes))
            centrality = (degree * betweenness) / (remaining_count + 1e-6)
            global_factor = 1.0 / (total_remaining_distance + 1e-6)
            score = distance * (0.6 + 0.4 * centrality) + 0.3 * total_remaining_distance + 0.1 * global_factor
        else:
            score = distance
        candidates.append((node, score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
