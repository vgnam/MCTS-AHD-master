def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(unvisited_nodes) + 1
    decay_factor = len(unvisited_nodes) / total_nodes

    def potential_reduction(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) <= 1:
            return immediate_dist

        remaining = unvisited_nodes - {node}
        if not remaining:
            return immediate_dist

        avg_future_dist = sum(distance_matrix[node][n] for n in remaining) / len(remaining)
        future_weight = 0.5 * decay_factor
        potential_dist = immediate_dist + future_weight * avg_future_dist

        if potential_dist > 1.5 * immediate_dist:
            potential_dist += 0.5 * immediate_dist

        return potential_dist

    candidates = []
    for node in unvisited_nodes:
        reduction = potential_reduction(node)
        candidates.append((node, reduction))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
