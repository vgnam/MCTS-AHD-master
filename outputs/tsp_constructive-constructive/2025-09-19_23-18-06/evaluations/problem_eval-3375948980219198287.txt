def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    candidates = []
    remaining_count = len(unvisited_nodes)
    exploration_factor = min(1.0, 2.0 / (remaining_count + 1))  # Decaying exploration factor

    for node in unvisited_nodes:
        distance = distance_matrix[current_node][node]
        degree = sum(1 for d in distance_matrix[node] if d > 0)

        if remaining_count > 1:
            remaining_nodes = unvisited_nodes - {node}
            min_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            max_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            avg_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            locality = 1.0 / (avg_dist + 1e-6)
            connectivity = degree / (remaining_count + 1)
            detour_cost = (max_dist - min_dist) * (1.0 - exploration_factor)

            # Dynamic weight adjustment
            locality_weight = 0.6 + 0.4 * (1.0 - exploration_factor)
            connectivity_weight = 0.4 + 0.6 * (1.0 - exploration_factor)

            score = (distance * (1.0 + connectivity_weight * connectivity * locality) +
                     locality_weight * avg_dist +
                     0.3 * detour_cost)
        else:
            score = distance

        candidates.append((node, score))

    # Probabilistic selection for exploration
    if exploration_factor > 0.3:
        total_score = sum(score for _, score in candidates)
        weights = [score / total_score for _, score in candidates]
        next_node = random.choices([node for node, _ in candidates], weights=weights, k=1)[0]
    else:
        next_node, _ = min(candidates, key=lambda x: x[1])

    return next_node
