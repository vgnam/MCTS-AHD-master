def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_ratio = 1.0 - (remaining_nodes / (remaining_nodes + total_nodes))
    momentum = 0.7 * progress_ratio + 0.3 * (1.0 - progress_ratio)
    temperature = max(0.1, 1.0 - momentum)

    candidates = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            remaining_unvisited = unvisited_nodes - {node}

            # Calculate significance score combining locality and centrality
            avg_future_dist = sum(distance_matrix[node][n] for n in remaining_unvisited) / len(remaining_unvisited)
            locality = 1.0 / (avg_future_dist + 1e-6)
            centrality = 1.0 / (sum(distance_matrix[node][n] for n in range(total_nodes)) + 1e-6)
            significance = (0.6 * locality + 0.4 * centrality) ** (1.0 + 0.5 * progress_ratio)

            # Dynamic exploration term with momentum
            exploration_term = temperature * significance * (1.0 + 0.3 * (1.0 - progress_ratio))

            # Progress-aware detour penalty
            max_detour = max(distance_matrix[node][n] for n in remaining_unvisited)
            detour_penalty = max_detour * (progress_ratio ** 2) * (1.0 + 0.5 * (1.0 - momentum))
        else:
            exploration_term = 0.0
            detour_penalty = 0.0

        # Hybrid scoring with adaptive weighting
        distance_weight = 1.0 - 0.5 * momentum
        exploration_weight = 0.5 + 0.3 * momentum
        penalty_weight = 0.2 * (1.0 - momentum)

        weighted_score = (distance_weight * immediate_dist +
                         exploration_weight * exploration_term +
                         penalty_weight * detour_penalty)
        candidates.append((node, weighted_score))

    next_node, _ = min(candidates, key=lambda x: x[1])
    return next_node
