[
     {
          "algorithm": "The algorithm combines local distance, connectivity, and destination proximity with dynamic weights, prioritizing local distance (0.5), connectivity (0.3), and destination proximity (-0.2, adjusted by exploration factor), while penalizing flow disruption (-0.2) and detours via a penalty factor. It dynamically balances these factors based on remaining nodes and current context.",
          "thought": "The new algorithm combines the dynamic weight adjustment of No.1 (prioritizing local distance, connectivity, and destination proximity with exploration factor) with the balanced scoring approach of No.2 (using weights of 0.5 for local distance, 0.3 for connectivity, and -0.2 for flow disruption). It introduces a penalty factor to discourage detours and dynamically adjusts destination proximity weight based on remaining nodes.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist\n        else:\n            connectivity_score = 0\n            flow_disruption = 0\n\n        weight_local = 0.5\n        weight_connectivity = 0.3\n        weight_dest = -0.2 * (1 - exploration_factor)\n        weight_flow = -0.2 * flow_disruption if flow_disruption > 0 else 0\n        penalty_factor = 1.0 + dest_dist / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_flow * flow_disruption) * penalty_factor\n\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.2894,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm prioritizes local distance (40% weight) and connectivity (30% weight) early in the search, while destination proximity (up to -30% weight) only becomes significant in the final stages (when fewer than 30% of nodes remain unvisited). It also includes a penalty mechanism to discourage detours without scaling, using a connectivity score based on inverse distances to nearby nodes and a flow disruption term to balance path smoothness. The weights and exploration factor dynamically adjust the focus between local optimization and global path planning.",
          "thought": "The new algorithm prioritizes local distance and connectivity with fixed weights, emphasizes destination proximity only in the final stages, and uses a linear penalty mechanism to discourage detours without scaling.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist\n        else:\n            connectivity_score = 0\n            flow_disruption = 0\n\n        weight_local = 0.4\n        weight_connectivity = 0.3\n        weight_dest = -0.3 * (1 - exploration_factor) if exploration_factor < 0.3 else 0\n        weight_flow = -0.1 * flow_disruption if flow_disruption > 0 else 0\n        penalty_factor = 1.0 + dest_dist / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_flow * flow_disruption) * penalty_factor\n\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.32111,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm combines nearest-neighbor selection with adaptive weighting of local proximity, connectivity, and destination proximity, dynamically adjusting these weights based on exploration progress (prioritizing local choices early and global structure later). Weights are set such that local distance (`weight_local`) dominates early (higher priority), while connectivity (`weight_connectivity`) and destination distance (`weight_dest`) gain importance later, with destination distance becoming negative (lower priority) when few nodes remain. The score for each candidate node is computed as a weighted sum of these factors, and the node with the minimum score is selected.",
          "thought": "The new algorithm combines nearest-neighbor selection with adaptive balancing of local proximity, connectivity, and destination proximity, where weights dynamically adjust based on exploration progress, prioritizing local choices early and global structure later, while occasionally considering destination distance when few nodes remain.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)\n        else:\n            connectivity_score = 0\n\n        weight_local = 0.5 - 0.3 * exploration_factor\n        weight_connectivity = 0.3 + 0.2 * exploration_factor\n        weight_dest = -0.1 if exploration_factor < 0.3 else 0\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)\n\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.33305,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node in TSP by balancing immediate distance (high priority early), connectivity (increasing priority as exploration progresses), and destination proximity (low priority unless near completion), with adaptive weights adjusting based on remaining nodes. The score for each candidate node combines these factors, favoring closer nodes initially but gradually emphasizing connectivity, while occasionally considering destination distance when few nodes remain.",
          "thought": "This new algorithm dynamically balances local distance, global connectivity, and destination proximity with adaptive weights, where early exploration emphasizes immediate distance (high weight_local) and late stages prioritize connectivity (high weight_connectivity) while occasionally considering destination proximity (weight_dest) based on a probabilistic threshold to escape local optima.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)\n        else:\n            connectivity_score = 0\n\n        weight_local = 0.5 - 0.2 * exploration_factor\n        weight_connectivity = 0.3 + 0.2 * exploration_factor\n        weight_dest = -0.2 if exploration_factor < 0.3 else 0\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)\n\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.34966,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node in TSP by balancing local proximity, connectivity, destination distance, and centrality, with weights dynamically adjusted based on exploration progress and path length. It prioritizes local distance and connectivity early, shifting toward destination proximity and centrality as the tour progresses, using adaptive thresholds to ensure global optimization. The hybrid scoring mechanism integrates node degree and variance in remaining distances to guide decisions, with weights (e.g., `weight_local=0.4`, `weight_dest=-0.3`) reflecting their relative importance.",
          "thought": "The new algorithm enhances the original by incorporating adaptive weight adjustments based on node centrality and dynamic connectivity thresholds, prioritizing both immediate proximity and long-term path optimization through a hybrid scoring mechanism that balances local and global factors.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)\n    avg_path_length = current_path_length / (remaining_nodes - 1) if remaining_nodes > 1 else 0\n    normalized_path_length = avg_path_length / total_nodes\n\n    def weighted_score(node):\n        local_distance = distance_matrix[current_node][node]\n        dest_distance = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]\n            avg_remaining_dist = sum(distances_to_unvisited) / (remaining_nodes - 1)\n            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)\n            connectivity_score = 1.0 / (1.0 + avg_remaining_dist) * (1.0 + (variance_remaining_dist ** 0.5))\n\n            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)\n            centrality_score = node_degree / (total_nodes - 1)\n\n            dynamic_threshold = 0.7 * exploration_factor + 0.3 * (1 - normalized_path_length)\n        else:\n            connectivity_score = 0\n            centrality_score = 0\n            dynamic_threshold = 0\n\n        weight_local = 0.4 + 0.2 * exploration_factor - 0.1 * normalized_path_length\n        weight_connectivity = 0.3 + 0.1 * exploration_factor + 0.1 * normalized_path_length\n        weight_dest = -0.3 + 0.2 * (1 - exploration_factor)\n        weight_centrality = 0.2 * dynamic_threshold\n\n        return (weight_local * local_distance) + (weight_connectivity * connectivity_score) + (weight_dest * dest_distance) + (weight_centrality * centrality_score)\n\n    next_node = min(unvisited_nodes, key=weighted_score)\n    return next_node",
          "objective": 6.35766,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm combines dynamic weighting with multi-criteria evaluation to select the next node in TSP. It prioritizes local proximity (60%-40% weight) while balancing connectivity (30%-40% weight) and destination awareness (negative weight), with weights adjusted by the exploration factor (remaining nodes/total nodes). The exploration factor dynamically shifts emphasis between local and global considerations, favoring local proximity early and connectivity/destination awareness later.",
          "thought": "The new algorithm combines the balanced weighting approach of No.1 (dynamic exploration factor) with the multi-criteria evaluation of No.2 (local proximity, connectivity, and destination penalty), but adjusts weights to prioritize local proximity more while maintaining connectivity and destination awareness.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    def evaluate_node(node):\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)\n        else:\n            connectivity_score = 0\n\n        weight_local = 0.6 - 0.2 * exploration_factor\n        weight_connectivity = 0.3 + 0.1 * exploration_factor\n        weight_dest = -0.1\n        return (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)\n\n    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))\n    return next_node",
          "objective": 6.35835,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically adjusts node selection by balancing local distance (prioritized with higher weights early in the process), connectivity (considering distance variance to unvisited nodes), and destination proximity (deprioritized early on). Weights are adaptively adjusted based on remaining nodes and path length, with local distance given more importance initially and connectivity gaining prominence as the tour progresses. The connectivity score, derived from average and variance of remaining distances, ensures exploration of well-connected nodes while avoiding isolated ones.",
          "thought": "The new algorithm modifies the provided approach by incorporating adaptive weights that are dynamically adjusted based on both the remaining nodes and the current path length, while also introducing a novel connectivity metric that considers the variance of distances to unvisited nodes to better balance exploration and exploitation.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)\n    avg_path_length = current_path_length / (remaining_nodes - 1) if remaining_nodes > 1 else 0\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]\n            avg_remaining_dist = sum(distances_to_unvisited) / (remaining_nodes - 1)\n            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)\n            connectivity_score = 1.0 / (1.0 + avg_remaining_dist) * (1.0 + (variance_remaining_dist ** 0.5))\n        else:\n            connectivity_score = 0\n\n        weight_local = 0.4 + 0.1 * (1 - exploration_factor) - 0.05 * (avg_path_length / total_nodes)\n        weight_connectivity = 0.3 + 0.2 * exploration_factor + 0.05 * (avg_path_length / total_nodes)\n        weight_dest = -0.2 + 0.1 * (1 - exploration_factor)\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.36611,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically balances local distance, connectivity, destination proximity, and flow disruption while adjusting weights based on exploration progress. It prioritizes local distance and connectivity early in the search (higher weights) and shifts to destination proximity later (lower weights). A reinforced penalty mechanism discourages detours, and connectivity scores are normalized to maintain balance between global and local considerations. The exploration factor guides weight adjustments, ensuring adaptability to different stages of the search.",
          "thought": "This new algorithm combines the weighted scoring approach from all three algorithms, dynamically adjusting weights for local distance, connectivity, destination proximity, and flow disruption based on exploration progress, while incorporating a reinforced penalty mechanism for detours and a connectivity score normalization to better balance global and local considerations.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist\n            connectivity_score = connectivity_score * (1 + 0.1 * exploration_factor)\n        else:\n            connectivity_score = 0\n            flow_disruption = 0\n\n        weight_local = 0.3 + 0.2 * (1 - exploration_factor)\n        weight_connectivity = 0.4 + 0.3 * exploration_factor\n        weight_dest = -0.25 * (1 - exploration_factor)\n        weight_flow = -0.2 * flow_disruption if flow_disruption > 0 else 0\n        penalty_factor = 1.0 + (dest_dist / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)) * (1 + 0.5 * (1 - exploration_factor))\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_flow * flow_disruption) * penalty_factor\n\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.37923,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm dynamically selects the next node by balancing local distance, connectivity, and destination proximity, with adaptive weights that prioritize connectivity and bottleneck detection as nodes remain. Local distance has moderate priority (weighted by `weight_local`), while connectivity (weighted by `weight_connectivity`) and destination proximity (weighted by `weight_dest`) are adjusted based on exploration pressure and bottleneck factors. The weights shift toward connectivity and bottlenecks as the search progresses, ensuring efficient path selection.",
          "thought": "The new algorithm dynamically selects the next node by combining local distance, connectivity, and destination proximity with adaptive weights, incorporating a novel \"exploration pressure\" term that increases with remaining nodes and a \"bottleneck detection\" mechanism to prioritize nodes with high centrality when few options remain.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n    exploration_pressure = exploration_factor ** 2\n\n    scores = []\n    for node in unvisited_nodes:\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            bottleneck_factor = max(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node)\n        else:\n            connectivity_score = 0\n            bottleneck_factor = 0\n\n        weight_local = 0.4 - 0.3 * exploration_factor\n        weight_connectivity = 0.3 + 0.2 * exploration_factor + 0.1 * bottleneck_factor\n        weight_dest = -0.2 if exploration_factor < 0.3 else 0.1 * exploration_pressure\n\n        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)\n\n        scores.append((node, score))\n\n    next_node = min(scores, key=lambda x: x[1])[0]\n    return next_node",
          "objective": 6.39635,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm selects the next node by balancing local distance (increased later) and connectivity (prioritized early), while slightly penalizing destination proximity. It uses a dynamic weighting scheme where local distance gets 30-70% weight and connectivity 70-30% weight as exploration progresses, with destination proximity fixed at -5% weight. The connectivity score is calculated using inverse average and variance of remaining distances to ensure balanced choices, while local distances are normalized by total nodes to penalize long routes more aggressively.",
          "thought": "The new algorithm adapts node selection by emphasizing connectivity (70-30% weight) early and local distance (30-70% weight) later, while destination proximity remains static (-5% weight), using inverse variance to prioritize balanced connectivity and penalizing long local distances more aggressively.",
          "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)\n    avg_path_length = current_path_length / (remaining_nodes - 1) if remaining_nodes > 1 else 0\n    normalized_path_length = avg_path_length / total_nodes\n\n    def weighted_score(node):\n        local_distance = distance_matrix[current_node][node]\n        dest_distance = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]\n            avg_remaining_dist = sum(distances_to_unvisited) / (remaining_nodes - 1)\n            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)\n            connectivity_score = (1.0 / (1.0 + avg_remaining_dist)) * (1.0 / (1.0 + variance_remaining_dist))\n        else:\n            connectivity_score = 0\n\n        weight_local = 0.3 + 0.4 * (1 - exploration_factor)\n        weight_connectivity = 0.7 - 0.4 * exploration_factor\n        weight_dest = -0.05\n\n        return (weight_local * local_distance) + (weight_connectivity * connectivity_score) + (weight_dest * dest_distance)\n\n    next_node = min(unvisited_nodes, key=weighted_score)\n    return next_node",
          "objective": 6.39662,
          "other_inf": null
     }
]