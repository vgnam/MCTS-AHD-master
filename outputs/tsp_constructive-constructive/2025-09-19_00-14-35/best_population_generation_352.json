{
     "algorithm": "This algorithm combines dynamic weighting with multi-criteria evaluation to select the next node in TSP. It prioritizes local proximity (60%-40% weight) while balancing connectivity (30%-40% weight) and destination awareness (negative weight), with weights adjusted by the exploration factor (remaining nodes/total nodes). The exploration factor dynamically shifts emphasis between local and global considerations, favoring local proximity early and connectivity/destination awareness later.",
     "thought": "The new algorithm combines the balanced weighting approach of No.1 (dynamic exploration factor) with the multi-criteria evaluation of No.2 (local proximity, connectivity, and destination penalty), but adjusts weights to prioritize local proximity more while maintaining connectivity and destination awareness.",
     "code": "def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if not unvisited_nodes:\n        return destination_node\n\n    remaining_nodes = len(unvisited_nodes)\n    total_nodes = len(distance_matrix)\n    exploration_factor = remaining_nodes / total_nodes\n\n    def evaluate_node(node):\n        current_dist = distance_matrix[current_node][node]\n        dest_dist = distance_matrix[node][destination_node]\n\n        if remaining_nodes > 1:\n            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)\n            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)\n        else:\n            connectivity_score = 0\n\n        weight_local = 0.6 - 0.2 * exploration_factor\n        weight_connectivity = 0.3 + 0.1 * exploration_factor\n        weight_dest = -0.1\n        return (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)\n\n    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))\n    return next_node",
     "objective": 6.35835,
     "other_inf": null
}