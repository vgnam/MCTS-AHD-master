def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            distances_to_remaining = [distance_matrix[node][n] for n in remaining_nodes_list]

            # Novel connectivity metric: harmonic mean
            harmonic_mean = len(distances_to_remaining) / sum(1.0 / (1.0 + d) for d in distances_to_remaining)

            # Path diversity term: variance of distances to remaining nodes
            mean_dist = sum(distances_to_remaining) / len(distances_to_remaining)
            variance = sum((d - mean_dist) ** 2 for d in distances_to_remaining) / len(distances_to_remaining)
            diversity_score = variance ** 0.5

            # Potential gain adjusted for path diversity
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
            adjusted_gain = potential_gain * (1 + diversity_score)
        else:
            harmonic_mean = 0
            adjusted_gain = 0

        # Dynamic weight adjustments
        weight_local = 0.4 * (1 + 0.5 * (1 - exploration_factor))
        weight_connectivity = 0.3 * (1 + 0.3 * (1 - exploration_factor))
        weight_dest = -0.2 * (1 - exploration_factor)
        weight_gain = 0.1 * (1 - exploration_factor)

        score = (weight_local * immediate_dist) + (weight_connectivity * harmonic_mean) + \
                (weight_dest * dest_dist) + (weight_gain * adjusted_gain)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
