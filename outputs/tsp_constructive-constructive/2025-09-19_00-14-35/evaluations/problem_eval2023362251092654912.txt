import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic temperature based on progress
    temperature = math.exp(-0.5 * (1 - exploration_factor))

    # Energy function combining multiple factors
    def calculate_energy(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            max_flow = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality = node_degree / (total_nodes - 1)
        else:
            connectivity = 0
            max_flow = 0
            centrality = 0

        # Adaptive weights based on exploration factor
        w_dist = 0.5 * (1 - exploration_factor)
        w_conn = 0.3 * exploration_factor
        w_flow = -0.2 * (max_flow - current_dist) if max_flow > current_dist else 0
        w_dest = 0.2 * (1 - exploration_factor)
        w_cent = 0.2 * exploration_factor

        energy = (w_dist * current_dist) + (w_conn * connectivity) + \
                 (w_flow * max_flow) + (w_dest * dest_dist) + (w_cent * centrality)

        return energy

    # Calculate Boltzmann probabilities
    energies = [calculate_energy(node) for node in unvisited_nodes]
    min_energy = min(energies)
    max_energy = max(energies)

    if min_energy == max_energy:
        probabilities = [1.0 / remaining_nodes] * remaining_nodes
    else:
        normalized = [(e - min_energy) / (max_energy - min_energy) for e in energies]
        probabilities = [math.exp(-n / temperature) for n in normalized]
        sum_prob = sum(probabilities)
        probabilities = [p / sum_prob for p in probabilities]

    # Stochastic selection
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
