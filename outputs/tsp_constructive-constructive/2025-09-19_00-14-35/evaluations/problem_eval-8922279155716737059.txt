def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Novel: Node centrality as measure of connectivity
        if remaining_nodes > 1:
            centrality = sum(1 / (1 + d) for d in distance_matrix[node]) / (total_nodes - 1)
        else:
            centrality = 0

        # Novel: Path tension metric balances immediate and long-term gains
        path_tension = (immediate_dist + dest_dist) / distance_matrix[current_node][destination_node]

        # Novel: Probabilistic element to escape local optima
        random_factor = 0.1 * exploration_factor * (random.random() - 0.5)

        weight_local = 0.5 - 0.3 * exploration_factor
        weight_centrality = 0.3 + 0.2 * exploration_factor
        weight_tension = -0.2 * (1 - exploration_factor)
        weight_random = 0.1 * exploration_factor

        score = (weight_local * immediate_dist) + (weight_centrality * centrality) + \
                (weight_tension * path_tension) + (weight_random * random_factor)
        return score

    # Novel: Top-k selection for probabilistic choice
    k = min(3, len(unvisited_nodes))
    candidates = sorted(unvisited_nodes, key=lambda node: evaluate_node(node))[:k]
    weights = [1.0 / (1 + i) for i in range(k)]
    weights = [w / sum(weights) for w in weights]
    next_node = random.choices(candidates, weights=weights, k=1)[0]
    return next_node
