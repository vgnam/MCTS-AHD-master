import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_count = total_nodes - len(unvisited_nodes)
    temperature = 0.9 ** visited_count  # Exponentially decaying temperature

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            # Calculate node centrality (average distance to all other unvisited nodes)
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0

            # Dynamic weight balancing with temperature
            immediate_weight = 1.0 - temperature * 0.5
            centrality_weight = temperature * 0.4
            destination_weight = temperature * 0.1

            # Add penalty for recently visited nodes
            penalty = 0.2 if node in visited_nodes[-2:] else 0

            score = (immediate_weight * current_dist +
                    centrality_weight * avg_remaining +
                    destination_weight * dest_dist +
                    penalty)
            return score
        else:
            return current_dist + dest_dist

    # Calculate probabilities using softmax with temperature
    scores = [evaluate_node(node) for node in unvisited_nodes]
    exp_scores = np.exp(-np.array(scores) / temperature)
    probs = exp_scores / np.sum(exp_scores)

    # Select node based on probabilities
    next_node = np.random.choice(unvisited_nodes, p=probs)
    return next_node
