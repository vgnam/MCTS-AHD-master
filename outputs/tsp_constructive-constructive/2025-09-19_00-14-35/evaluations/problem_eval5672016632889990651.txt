def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            connectivity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            flow_disruption = current_dist - avg_dist
        else:
            connectivity_score = 0
            flow_disruption = 0

        weight_local = 0.3
        weight_connectivity = 0.4
        weight_flow = -0.3 * flow_disruption if flow_disruption > 0 else 0

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + weight_flow

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
