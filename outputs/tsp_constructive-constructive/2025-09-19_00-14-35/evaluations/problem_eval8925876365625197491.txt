def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if unvisited_nodes:
            unvisited_neighbors = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
            neighbor_penalty = 1 / (1 + unvisited_neighbors)
        else:
            neighbor_penalty = 1

        proximity_factor = 1 / (1 + immediate_dist)
        global_factor = 1 / (1 + dest_dist)
        score = (0.7 * proximity_factor + 0.3 * global_factor) * neighbor_penalty
        return score

    next_node = max(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
