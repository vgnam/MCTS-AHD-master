def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Stage 1: Filter candidates based on immediate distance and connectivity
    candidates = sorted(unvisited_nodes, key=lambda node: (
        distance_matrix[current_node][node] +
        sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1 if remaining_nodes > 1 else 1)
    ))
    candidate_size = max(1, min(4, len(candidates)))
    top_candidates = candidates[:candidate_size]

    # Stage 2: Evaluate candidates with novel mechanisms
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Global path potential (sum of distances to all unvisited nodes)
        global_potential = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes

        # Node centrality (normalized average distance to all other nodes)
        centrality = sum(distance_matrix[node][n] for n in range(total_nodes)) / (total_nodes - 1)

        # Dynamic weights with novelty factor
        weight_dist = 0.3 + 0.3 * exploration_factor
        weight_global = 0.4 - 0.2 * exploration_factor
        weight_centrality = 0.2 * (1 - exploration_factor)
        weight_penalty = 0.2 * (1 - exploration_factor)

        # Novelty: Penalize nodes that were recently visited
        novelty_penalty = 0.1 if node in unvisited_nodes[-2:] else 0

        return (weight_dist * current_dist +
                weight_global * global_potential -
                weight_centrality * centrality +
                weight_penalty * dest_dist +
                novelty_penalty)

    next_node = min(top_candidates, key=lambda node: evaluate_node(node))
    return next_node
