def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress_factor = (total_nodes - remaining_nodes) / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            global_score = 1.0 / (1.0 + avg_remaining_dist)
            local_score = current_dist
        else:
            global_score = 0
            local_score = 0

        weight_global = 0.6 - 0.5 * progress_factor
        weight_local = 0.4 + 0.3 * progress_factor
        weight_dest = 0.3

        score = (weight_global * global_score) + (weight_local * local_score) + (weight_dest * dest_dist)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
