def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_count = total_nodes - len(unvisited_nodes)
    learning_rate = 0.9 ** visited_count

    def evaluate_node(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]

        immediate_weight = 0.5
        destination_weight = 0.5

        return (immediate_weight * local_dist +
                destination_weight * global_dist)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
