def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Calculate current path length variance for adaptive weighting
    if remaining_nodes < total_nodes:
        path_lengths = [distance_matrix[current_node][n] for n in unvisited_nodes]
        path_variance = sum((l - sum(path_lengths)/len(path_lengths))**2 for l in path_lengths) / len(path_lengths)
    else:
        path_variance = 1.0

    # Temperature for softmax selection (decreases as exploration progresses)
    temperature = 1.0 - (1.0 - exploration_factor) * 0.7

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)

            # Novelty bonus: favor less frequently visited nodes
            visit_frequency = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / total_nodes
            novelty_bonus = 1.0 / (1.0 + visit_frequency)
        else:
            connectivity_score = 0
            potential_gain = 0
            novelty_bonus = 0

        # Adaptive weights based on path variance and exploration progress
        weight_local = 0.5 - 0.3 * exploration_factor * (1 + path_variance)
        weight_connectivity = 0.3 + 0.2 * exploration_factor * (1 + path_variance)
        weight_dest = -0.2 * (1 - exploration_factor) * (1 + path_variance)
        weight_gain = 0.1 * (1 - exploration_factor) * (1 + path_variance)
        weight_novelty = 0.1 * (1 - exploration_factor)

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_dest * dest_dist) + (weight_gain * potential_gain) + (weight_novelty * novelty_bonus)
        return score

    # Softmax selection with temperature
    scores = [evaluate_node(node) for node in unvisited_nodes]
    exp_scores = [math.exp(score / temperature) for score in scores]
    probs = [exp_score / sum(exp_scores) for exp_score in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probs, k=1)[0]

    return next_node
