def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        lookahead_weight = 0.3 if len(unvisited_nodes) > 2 else 0.1
        return current_dist + lookahead_weight * remaining_dist

    candidates = sorted(unvisited_nodes, key=lambda node: evaluate_node(node))
    if len(candidates) > 1:
        next_node = candidates[0] if random.random() < 0.8 else candidates[1]
    else:
        next_node = candidates[0]
    return next_node
