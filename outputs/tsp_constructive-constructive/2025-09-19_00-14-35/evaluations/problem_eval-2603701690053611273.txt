def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        nearest_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)

        # Dynamic priority with temperature and penalty
        temperature = 0.5  # Controls exploration (higher = more random)
        penalty = 1.2  # Penalty for revisiting nodes (adjustable)
        priority = (nearest_distance / dest_distance) ** temperature

        if priority > penalty:
            return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
        else:
            if np.random.rand() < priority:
                return destination_node
            else:
                return min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    else:
        return next_node
