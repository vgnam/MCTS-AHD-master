import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            lookahead_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_distances = [distance_matrix[node][n] for n in lookahead_nodes]

            centrality = sum(distance_matrix[node]) / total_nodes
            historical_cost = sum(distance_matrix[current_node]) / total_nodes

            weight_immediate = 0.4 + 0.3 * exploration_factor
            weight_centrality = 0.3 - 0.1 * exploration_factor
            weight_historical = 0.2 + 0.2 * (1 - exploration_factor)

            score = (weight_immediate * immediate_dist +
                    weight_centrality * centrality +
                    weight_historical * historical_cost +
                    0.1 * (sum(lookahead_distances) / len(lookahead_distances)) +
                    0.05 * dest_dist)

            # Add probabilistic component to escape local optima
            if random.random() < 0.1 * exploration_factor:
                score *= 0.8
        else:
            score = immediate_dist + dest_dist

        return score

    candidates = unvisited_nodes.copy()
    if len(candidates) > 3:
        candidates = random.sample(candidates, min(3, len(candidates)))

    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
