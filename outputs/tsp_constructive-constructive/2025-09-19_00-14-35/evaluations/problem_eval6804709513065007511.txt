def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (remaining_nodes / total_nodes) ** 2

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            node_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0)
            normalized_degree = node_degree / (total_nodes - 1)
            connectivity_score = 1.0 / (1.0 + normalized_degree)

            local_search_score = 0
            for n1 in unvisited_nodes:
                if n1 == node:
                    continue
                for n2 in unvisited_nodes:
                    if n2 == node or n2 == n1:
                        continue
                    local_search_score += (distance_matrix[node][n1] + distance_matrix[n1][n2] + distance_matrix[n2][node]) / 3
            local_search_score /= (remaining_nodes - 1) ** 2

        else:
            connectivity_score = 0
            local_search_score = 0

        weight_local = 0.5 * (1 - exploration_factor)
        weight_connectivity = 0.3 + 0.2 * exploration_factor
        weight_dest = -0.4 * (1 - exploration_factor)
        weight_search = 0.2 * exploration_factor

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_search * local_search_score)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
