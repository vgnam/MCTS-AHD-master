import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = max(0.1, (remaining_nodes / total_nodes) ** 1.5)

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    exploration_weight = sigmoid(5 * (exploration_factor - 0.5))
    exploitation_weight = 1 - exploration_weight

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_list) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes_list) - immediate_dist
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = node_degree / (total_nodes - 1)
            novelty_bonus = 1.0 / (1.0 + sum(1 for n in unvisited_nodes if distance_matrix[node][n] < immediate_dist))
        else:
            connectivity_score = 0
            flow_disruption = 0
            centrality_score = 0
            novelty_bonus = 0

        weight_local = 0.4 * exploitation_weight + 0.2 * exploration_weight
        weight_connectivity = 0.3 * exploitation_weight + 0.1 * exploration_weight
        weight_dest = -0.2 * exploitation_weight + 0.1 * exploration_weight
        weight_flow = -0.1 * flow_disruption if flow_disruption > 0 else 0
        weight_centrality = 0.2 * exploitation_weight + 0.1 * exploration_weight
        weight_novelty = 0.3 * exploration_weight

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_flow * flow_disruption) + (weight_dest * dest_dist) + \
                (weight_centrality * centrality_score) + (weight_novelty * novelty_bonus)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
