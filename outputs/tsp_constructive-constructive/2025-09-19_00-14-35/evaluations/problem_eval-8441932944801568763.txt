def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 - (1 - exploration_factor) ** 2

    neighborhood_size = max(1, int(3 + 2 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            mean_dist = sum(remaining_dists) / (remaining_nodes - 1)
            variance = sum((d - mean_dist) ** 2 for d in remaining_dists) / (remaining_nodes - 1)
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            variance = 0
            centrality = 0

        weight_dist = 0.5 - 0.3 * exploration_factor
        weight_connectivity = 0.4 + 0.4 * exploration_factor
        weight_penalty = 0.2 + 0.3 * (1 - exploration_factor)

        score = (weight_dist * current_dist +
                 weight_connectivity * (variance * 0.6 + centrality * 0.4) -
                 weight_penalty * (dest_dist ** (1 + 0.3 * exploration_factor)))

        return score / temperature

    if temperature > 0.5:
        weights = [1 / (1 + evaluate_node(node)) for node in candidates]
        total_weight = sum(weights)
        probabilities = [w / total_weight for w in weights]
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = min(candidates, key=lambda node: evaluate_node(node))

    return next_node
