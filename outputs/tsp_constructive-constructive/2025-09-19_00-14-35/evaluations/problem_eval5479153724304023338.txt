importance later (lower weight), with connectivity potential measured by node centrality and average remaining distances.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    # Calculate scores for each candidate node
    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity potential: combines average distance and node centrality
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            node_centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_remaining_dist) / (remaining_nodes - 1)
            connectivity_potential = (1.0 / (1.0 + avg_remaining_dist)) * (1.0 + node_centrality)
        else:
            connectivity_potential = 0

        # Fixed weighting (60% local distance, 40% connectivity)
        weight_local = 0.6
        weight_connectivity = 0.4
        score = (weight_local * current_dist) + (weight_connectivity * (1.0 - connectivity_potential))

        scores.append((node, score))

    # Select node with the lowest score (inverse probability)
    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
