def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, path_history=None):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_progress = 1 - (remaining_nodes / total_nodes)

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        node_centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)

        sigmoid_progress = 1 / (1 + math.exp(-10 * (exploration_progress - 0.5)))
        weight_local = 0.6 * (1 - sigmoid_progress)
        weight_connectivity = 0.4 * sigmoid_progress
        weight_dest = 0.2 * (1 - sigmoid_progress) if exploration_progress > 0.7 else 0

        if path_history and node in path_history:
            history_penalty = 0.3 * (1 - (path_history.count(node) / len(path_history)))
        else:
            history_penalty = 0

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) - history_penalty + (0.1 * node_centrality)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
