def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    progress_factor = 1 - exploration_factor
    temperature = 1.0 - (progress_factor ** 2)

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_except_self = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_except_self) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            node_potential = connectivity_score * (1.0 / (1.0 + immediate_dist))
        else:
            avg_remaining_dist = 0
            connectivity_score = 0
            node_potential = 0

        weight_local = 0.4 * (1 + temperature)
        weight_connectivity = 0.3 * (1 - temperature)
        weight_dest = 0.2 * (1 - temperature)
        weight_potential = 0.1 * (1 + temperature)

        score = (weight_local * immediate_dist +
                 weight_connectivity * connectivity_score +
                 weight_dest * dest_dist +
                 weight_potential * node_potential)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
