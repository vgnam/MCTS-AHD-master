def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            centrality = 1.0 / (1.0 + sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes)
            path_continuity = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
        else:
            connectivity_score = 0
            centrality = 0
            path_continuity = 0

        weight_local = 0.6 * (1 - exploration_factor) + 0.2 * exploration_factor
        weight_connectivity = 0.3 * (1 - exploration_factor) + 0.5 * exploration_factor
        weight_centrality = 0.1 * (1 - exploration_factor) + 0.3 * exploration_factor
        weight_path = 0.2 * (1 - exploration_factor) + 0.4 * exploration_factor

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_centrality * centrality) + (weight_path * path_continuity)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
