import random
import numpy as np

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)

            # Calculate node centrality (inverse of average distance to all other nodes)
            centrality = 1.0 / (1.0 + np.mean(distance_matrix[node]))

            # Path potential: combination of immediate distance and long-term connectivity
            path_potential = (immediate_dist + avg_remaining_dist) * (1 - centrality)

            # Potential gain adjusted by centrality
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
            potential_gain *= (1 + 0.5 * centrality)
        else:
            connectivity_score = 0
            centrality = 0
            path_potential = immediate_dist
            potential_gain = 0

        # Dynamic weight adjustment
        weight_local = 0.3 + 0.2 * (1 - exploration_factor)
        weight_connectivity = 0.25 + 0.15 * (1 - exploration_factor)
        weight_dest = -0.3 * (1 - exploration_factor)
        weight_centrality = 0.2 * exploration_factor
        weight_potential = 0.15 * (1 - exploration_factor)
        weight_gain = 0.05 * (1 - exploration_factor)

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_dest * dest_dist) + (weight_centrality * centrality) + \
                (weight_potential * path_potential) + (weight_gain * potential_gain)
        return score

    # Probabilistic selection to escape local optima early
    if exploration_factor > 0.7:
        scores = [evaluate_node(node) for node in unvisited_nodes]
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - s) / (max_score - min_score + 1e-8) for s in scores]
        probabilities = [s / sum(normalized_scores) for s in normalized_scores]
        next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))

    return next_node
