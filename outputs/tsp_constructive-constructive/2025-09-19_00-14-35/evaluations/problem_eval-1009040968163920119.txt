def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic temperature parameter
    temperature = 1.5 * (exploration_factor ** 1.5)

    # Stage 1: Probabilistic neighborhood selection
    neighborhood_size = max(2, int(4 * exploration_factor))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Stage 2: Enhanced path potential evaluation
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Novel connectivity score using harmonic mean
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            if any(d == 0 for d in remaining_dists):
                harmonic_mean = 0
            else:
                harmonic_mean = (remaining_nodes - 1) / sum(1/d for d in remaining_dists)
        else:
            harmonic_mean = 0

        # Dynamic weights with new scaling functions
        weight_dist = 0.4 - 0.2 * (1 - exploration_factor ** 1.2)
        weight_connectivity = 0.3 + 0.2 * (1 - exploration_factor ** 0.8)
        weight_dest = 0.3 + 0.4 * (1 - exploration_factor ** 1.5)

        score = (weight_dist * current_dist +
                 weight_connectivity * harmonic_mean -
                 weight_dest * dest_dist)

        # Apply temperature-based stochastic selection
        if temperature > 0:
            return score * (1 + np.random.normal(0, temperature))
        return score

    # Select node with minimum score (adjusted by temperature)
    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
