def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]

        if not unvisited_nodes:
            return local_distance + global_distance

        connectivity_factor = sum(1 / distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
        decay_factor = len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix))

        return (local_distance + global_distance) * (1 + connectivity_factor) * decay_factor

    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
