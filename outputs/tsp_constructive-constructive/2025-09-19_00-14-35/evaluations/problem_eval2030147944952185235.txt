def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_ratio = (total_nodes - len(unvisited_nodes)) / total_nodes
    decay_factor = 1.0 - visited_ratio**2

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0

            cluster_score = 0
            for n in unvisited_nodes:
                if n != node:
                    cluster_score += 1 / (1 + distance_matrix[node][n])

            novelty_score = 1 / (1 + len([n for n in unvisited_nodes if distance_matrix[current_node][n] < current_dist]))

            return (current_dist +
                    decay_factor * (0.5 * dest_dist + 0.3 * avg_remaining + 0.2 * cluster_score) +
                    0.1 * novelty_score)
        else:
            return current_dist + dest_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
