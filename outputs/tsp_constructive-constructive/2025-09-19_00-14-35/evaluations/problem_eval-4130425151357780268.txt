def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Phase transition factor (0 for early, 1 for late)
    phase_factor = 1 - exploration_factor

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Adaptive connectivity calculation
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            min_remaining = min(remaining_dists)
            max_remaining = max(remaining_dists)
            normalized_dists = [(d - min_remaining) / (max_remaining - min_remaining + 1e-6) for d in remaining_dists]
            connectivity_score = 1 - sum(normalized_dists) / (remaining_nodes - 1)
        else:
            connectivity_score = 0

        # Phase-dependent potential gain
        if phase_factor > 0.5:
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
        else:
            potential_gain = (distance_matrix[current_node][node] - distance_matrix[node][destination_node]) / (1 + immediate_dist)

        # Phase-dependent weights with normalization
        base_weights = [0.4, 0.3, 0.2, 0.1]
        phase_weights = [w * (1 - phase_factor) for w in base_weights[:2]] + [w * phase_factor for w in base_weights[2:]]

        # Normalize weights to sum to 1
        total_weight = sum(phase_weights)
        normalized_weights = [w / total_weight for w in phase_weights] if total_weight > 0 else phase_weights

        score = (normalized_weights[0] * immediate_dist) + (normalized_weights[1] * connectivity_score) + \
                (normalized_weights[2] * dest_dist) + (normalized_weights[3] * potential_gain)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
