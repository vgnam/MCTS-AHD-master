def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_ratio = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            max_dist = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            flow_penalty = max_dist - current_dist if max_dist > current_dist else 0
        else:
            connectivity_score = 0
            flow_penalty = 0

        weight_local = 0.7 - 0.3 * exploration_ratio
        weight_connectivity = 0.2 + 0.2 * exploration_ratio
        weight_penalty = -0.2 * flow_penalty

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + weight_penalty

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
