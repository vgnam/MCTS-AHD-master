import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = exploration_factor * 10.0  # Higher early, lower later

    # Calculate centrality for each node (inverse of average distance to all nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        centrality[node] = 1.0 / (1.0 + avg_dist)

    # Calculate scores with dynamic distance penalty
    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Global connectivity score (inverse of average distance to remaining nodes)
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        # Dynamic distance penalty based on centrality
        penalty = 1.0 + (centrality[node] * (1.0 - exploration_factor))

        # Weighted score with dynamic penalty
        weight_local = 0.5 + 0.3 * exploration_factor
        weight_connectivity = 0.5 - 0.3 * exploration_factor
        score = (weight_local * current_dist * penalty) + (weight_connectivity * connectivity_score)

        scores.append((node, score))

    # Probabilistic selection with softmax
    exp_scores = [math.exp(-score / temperature) for (node, score) in scores]
    sum_exp = sum(exp_scores)
    probs = [exp_score / sum_exp for exp_score in exp_scores]

    next_node = random.choices([node for (node, score) in scores], weights=probs, k=1)[0]
    return next_node
