def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Stage 1: Dynamic candidate selection
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidate_size = max(1, min(5, len(unvisited_nodes) // 2 + 1))
    top_candidates = candidates[:candidate_size]

    # Stage 2: Evaluate with connectivity-focused weights
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score (average distance to remaining nodes)
        if len(unvisited_nodes) > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        else:
            avg_remaining_dist = 0

        # Dynamic weights
        weight_connectivity = 0.6
        weight_dist = 0.3
        weight_bonus = 0.1

        return (weight_connectivity * avg_remaining_dist +
                weight_dist * current_dist -
                weight_bonus * dest_dist)

    next_node = min(top_candidates, key=lambda node: evaluate_node(node))
    return next_node
