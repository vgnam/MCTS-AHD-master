def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def weighted_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]

        connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 2 * local_distance) / len(unvisited_nodes) if unvisited_nodes else 0
        decay_factor = 1 / (1 + len(unvisited_nodes))
        penalty = (1 - connectivity) * decay_factor

        return local_distance + global_distance * (1 + penalty)

    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
