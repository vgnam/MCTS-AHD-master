def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) == 1:
            return immediate_dist

        remaining_unvisited = [n for n in unvisited_nodes if n != node]
        if len(remaining_unvisited) == 0:
            return immediate_dist

        lookahead_depth = min(3, len(remaining_unvisited))
        lookahead_score = 0

        for depth in range(1, lookahead_depth + 1):
            if depth > len(remaining_unvisited):
                break
            next_nodes = remaining_unvisited[:depth]
            lookahead_dist = sum(distance_matrix[n1][n2] for n1, n2 in zip([node] + next_nodes[:-1], next_nodes))
            lookahead_score += lookahead_dist * (0.5 ** depth)

        total_score = immediate_dist + (lookahead_score / lookahead_depth)
        return total_score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-9) for score in scores]
    total_weight = sum(normalized_scores)
    probabilities = [score / total_weight for score in normalized_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
