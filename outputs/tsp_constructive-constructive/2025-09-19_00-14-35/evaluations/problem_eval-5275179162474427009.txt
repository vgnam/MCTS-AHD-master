def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = (remaining_nodes / total_nodes) ** 2
    temperature = 1.0 / (1.0 + math.sqrt(remaining_nodes))
    memory_factor = 1.0 - (remaining_nodes / total_nodes)
    candidate_scores = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        avg_dist = sum(distance_matrix[node]) / total_nodes
        path_contribution = (local_dist + global_dist) / avg_dist
        memory_score = 1.0 if node == destination_node else 1.0 - (hash(node) % 10) / 10.0
        score = (exploration_weight * path_contribution +
                (1 - exploration_weight) * (local_dist / avg_dist) +
                memory_factor * memory_score) + temperature * (hash(node) % 3)
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
