importance" metric that combines distance to destination, connectivity centrality, and historical visit frequency to guide the tour construction.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Calculate node importance metrics
    importance_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity centrality: sum of inverse distances to all other unvisited nodes
        connectivity = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)

        # Historical visit frequency (simulated as 1/remaining_nodes for this example)
        visit_freq = 1.0 / remaining_nodes

        # Calculate importance score combining multiple factors
        importance = (0.4 * (1/current_dist)) + (0.3 * connectivity) + (0.2 * (1/dest_dist)) + (0.1 * visit_freq)
        importance_scores.append((node, importance))

    # Dynamic weight adjustment based on exploration progress
    weight_local = 0.5 + 0.3 * exploration_factor
    weight_global = 0.5 - 0.2 * exploration_factor

    # Probabilistic selection based on weighted importance
    nodes, scores = zip(*importance_scores)
    weighted_scores = [weight_local * scores[i] + weight_global * (1 - scores[i]) for i in range(len(scores))]

    # Normalize scores to form a probability distribution
    total = sum(weighted_scores)
    probabilities = [score / total for score in weighted_scores]

    # Select next node using weighted random choice
    next_node = random.choices(nodes, weights=probabilities, k=1)[0]
    return next_node
