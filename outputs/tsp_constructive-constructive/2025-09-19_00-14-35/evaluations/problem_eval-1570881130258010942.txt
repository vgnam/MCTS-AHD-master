def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic candidate selection based on immediate distance and path potential
    def path_potential(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Path potential score: distance to unvisited nodes minus penalty for detours
        if len(unvisited_nodes) > 1:
            avg_unvisited_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            detour_penalty = max(0, (avg_unvisited_dist - immediate_dist) / immediate_dist) if immediate_dist > 0 else 0
            return immediate_dist + 0.5 * avg_unvisited_dist - 0.3 * dest_dist - 0.2 * detour_penalty
        else:
            return immediate_dist - 0.3 * dest_dist

    # Adaptive weights based on remaining nodes
    remaining_ratio = len(unvisited_nodes) / (len(unvisited_nodes) + 1) if unvisited_nodes else 0
    weight_dist = 0.6 + 0.2 * remaining_ratio
    weight_potential = 0.4 - 0.2 * remaining_ratio

    # Evaluate all unvisited nodes with dynamic scoring
    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        potential = path_potential(node)
        return weight_dist * immediate_dist + weight_potential * potential

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
