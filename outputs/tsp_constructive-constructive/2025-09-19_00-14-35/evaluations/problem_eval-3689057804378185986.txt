important, while still adapting the weight based on remaining nodes to ensure global convergence.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + 0.1 * remaining_nodes) if remaining_nodes > 0 else 0.0

    # Calculate centrality score (average distance to all other nodes)
    def centrality_score(node):
        total_dist = sum(distance_matrix[node][n] for n in range(len(distance_matrix)))
        return total_dist / len(distance_matrix)

    def score(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        centrality = centrality_score(node)
        return (1 - weight_factor) * local_dist + weight_factor * global_dist + 0.2 * centrality

    next_node = min(unvisited_nodes, key=score)
    return next_node
