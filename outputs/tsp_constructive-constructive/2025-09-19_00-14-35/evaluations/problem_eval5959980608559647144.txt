def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    exploration_pressure = exploration_factor ** 2

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            bottleneck_factor = max(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_list)
            weight_connectivity = 0.5 + 0.2 * exploration_pressure + 0.1 * bottleneck_factor
            return immediate_dist + weight_connectivity * avg_remaining_dist
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
