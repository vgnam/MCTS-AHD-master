importance" metric based on betweenness centrality to guide selection toward critical path nodes.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def calculate_node_importance(node):
        if len(unvisited_nodes) <= 2:
            return 0
        betweenness = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < min(distance_matrix[n][m] for m in unvisited_nodes if m != node and m != n))
        return betweenness / (len(unvisited_nodes) - 1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        exploration_factor = 0.9 ** (1 / (len(unvisited_nodes) + 1))
        importance = calculate_node_importance(node)
        if len(unvisited_nodes) > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0
            return (1 - exploration_factor) * current_dist + exploration_factor * (0.6 * dest_dist + 0.3 * avg_remaining + 0.1 * importance)
        else:
            return current_dist + dest_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
