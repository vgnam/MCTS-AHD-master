def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)

            # Calculate node centrality as average distance to all remaining nodes
            centrality = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes_list) - immediate_dist

            # Exploration pressure: penalize nodes that are too far from current path
            exploration_pressure = (immediate_dist + dest_dist) / distance_matrix[current_node][destination_node]
        else:
            connectivity_score = 0
            potential_gain = 0
            centrality = 0
            flow_disruption = 0
            exploration_pressure = 0

        # Dynamic weight adjustments
        weight_local = 0.5 + 0.1 * (1 - exploration_factor)
        weight_connectivity = 0.2 + 0.2 * exploration_factor
        weight_gain = 0.1 + 0.2 * (1 - exploration_factor)
        weight_flow = -0.2 * (flow_disruption > 0)
        weight_centrality = 0.3 * exploration_factor
        weight_exploration = -0.1 * exploration_pressure

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_gain * potential_gain) + (weight_flow * flow_disruption) + \
                (weight_centrality * centrality) + (weight_exploration * exploration_pressure)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
