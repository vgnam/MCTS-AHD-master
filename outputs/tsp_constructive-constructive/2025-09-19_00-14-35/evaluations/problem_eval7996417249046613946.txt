def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if len(unvisited_nodes) > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0
            lookahead_factor = 0.5 / (len(unvisited_nodes) + 1)
            return current_dist + lookahead_factor * (0.5 * dest_dist + 0.5 * avg_remaining)
        else:
            return current_dist + dest_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
