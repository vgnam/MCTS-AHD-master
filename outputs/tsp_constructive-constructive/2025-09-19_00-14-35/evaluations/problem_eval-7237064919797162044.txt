def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    temperature = 1.0 - exploration_factor
    entropy = sum(sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) for node in unvisited_nodes) / (remaining_nodes * (remaining_nodes - 1)) if remaining_nodes > 1 else 0

    scores = []
    for node in unvisited_nodes:
        local_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            path_potential = (local_distance + dest_distance) / 2
            connectivity_score = sum(1.0 / (distance_matrix[node][n] + 1.0) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - local_distance
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
        else:
            path_potential = local_distance
            connectivity_score = 0
            flow_disruption = 0
            node_degree = 0

        weight_local = 0.4 * (1 - temperature)
        weight_potential = 0.3 + 0.2 * temperature
        weight_connectivity = 0.2 * (1 - temperature)
        weight_flow = -0.3 * flow_disruption if flow_disruption > 0 else 0
        weight_entropy = 0.1 * entropy

        score = (weight_local * local_distance) + (weight_potential * path_potential) + (weight_connectivity * connectivity_score) + (weight_flow * flow_disruption) + (weight_entropy * node_degree)

        scores.append((node, score))

    if temperature > 0.7:
        next_node = max(scores, key=lambda x: x[1])[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
