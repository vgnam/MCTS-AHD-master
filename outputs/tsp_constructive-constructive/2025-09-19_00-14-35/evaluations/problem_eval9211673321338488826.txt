def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0
        max_remaining_dist = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        path_continuity_penalty = max_remaining_dist * (1 - 1 / (len(unvisited_nodes) + 1)) if len(unvisited_nodes) > 1 else 0
        dynamic_avg_weight = 0.6 * (1 / (len(unvisited_nodes) + 1))
        return current_dist + dynamic_avg_weight * avg_remaining_dist + 0.4 * path_continuity_penalty

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
