import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) == 1:
            return immediate_dist

        remaining_unvisited = [n for n in unvisited_nodes if n != node]
        if len(remaining_unvisited) == 0:
            return immediate_dist

        lookahead_depth = min(3, len(remaining_unvisited))
        lookahead_score = 0

        for depth in range(1, lookahead_depth + 1):
            if depth > len(remaining_unvisited):
                break
            next_nodes = remaining_unvisited[:depth]
            lookahead_dist = sum(distance_matrix[n1][n2] for n1, n2 in zip([node] + next_nodes[:-1], next_nodes))
            lookahead_score += lookahead_dist * (0.5 ** depth)

        centrality_weight = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
        total_score = immediate_dist + (lookahead_score / lookahead_depth) * (1 + 0.1 * centrality_weight)

        return total_score

    candidates = unvisited_nodes.copy()
    if len(candidates) > 1 and random.random() < 0.2:
        candidates = random.sample(candidates, min(3, len(candidates)))

    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
