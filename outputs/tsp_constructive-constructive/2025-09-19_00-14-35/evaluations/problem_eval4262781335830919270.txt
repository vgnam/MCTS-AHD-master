def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Global connectivity potential: average of all remaining distances
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            avg_remaining_dist = 0

        # Node significance: combination of centrality and distance to destination
        node_centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_remaining_dist) / (remaining_nodes - 1) if remaining_nodes > 1 else 0
        dest_factor = 1.0 / (1.0 + dest_dist) if dest_dist != 0 else 1.0
        node_significance = (1.0 + node_centrality) * dest_factor

        # Dynamic weighting with temperature and significance
        weight_local = 0.6 * temperature
        weight_connectivity = 0.3 * (1 - temperature) * node_significance
        weight_dest = 0.1 * (1 - temperature)
        score = (weight_local * current_dist) + (weight_connectivity * avg_remaining_dist) + (weight_dest * (1.0 - dest_factor))

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
