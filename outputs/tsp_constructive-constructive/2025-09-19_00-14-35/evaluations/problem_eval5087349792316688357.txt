def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_threshold = 1.2 * (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1))
            connectivity_score = 1.0 / (1.0 + max(0, connectivity_threshold - current_dist))
        else:
            connectivity_score = 0

        dest_influence = (1.0 - exploration_factor) * dest_dist
        weight_local = 0.4
        weight_connectivity = 0.4 * exploration_factor
        weight_dest = -0.2 * (1.0 - exploration_factor)

        return (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_influence)

    candidates = sorted(unvisited_nodes, key=lambda node: evaluate_node(node))
    if remaining_nodes > 2:
        selection_range = min(3, remaining_nodes)
        selected = candidates[:selection_range]
        probabilities = [1.0 - (i * 0.3) for i in range(len(selected))]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = random.choices(selected, weights=probabilities, k=1)[0]
    else:
        next_node = candidates[0]

    return next_node
