def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    lookahead_factor = 0.5 / (remaining_nodes + 1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0
            weight_dist = 0.5
            weight_connectivity = 0.3
            weight_penalty = 0.2
            return (weight_dist * current_dist +
                    weight_connectivity * lookahead_factor * avg_remaining -
                    weight_penalty * lookahead_factor * dest_dist)
        else:
            return current_dist + dest_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
