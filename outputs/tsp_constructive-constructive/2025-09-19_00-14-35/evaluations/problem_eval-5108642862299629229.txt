def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    non_linear_exploration = exploration_factor ** 2  # Non-linear decay

    scores = []
    historical_penalty = {}

    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        # Novelty: Penalize nodes with high historical frequency
        historical_penalty[node] = 1.0 / (1.0 + historical_penalty.get(node, 0))

        weight_local = 0.5 - 0.2 * non_linear_exploration
        weight_connectivity = 0.3 + 0.2 * non_linear_exploration
        weight_dest = -0.2 if exploration_factor < 0.3 else 0.1 * non_linear_exploration

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + historical_penalty[node]

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    historical_penalty[next_node] = historical_penalty.get(next_node, 0) + 1  # Update historical count
    return next_node
