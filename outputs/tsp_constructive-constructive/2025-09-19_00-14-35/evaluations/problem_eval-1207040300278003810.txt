def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    local_weight = max(0.2, 0.6 * (remaining_nodes / total_nodes))
    global_weight = 1 - local_weight

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distances_to_unvisited) / (remaining_nodes - 1)
            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist) * (1.0 + (variance_remaining_dist ** 0.5))
        else:
            connectivity_score = 0

        score = (local_weight * current_dist) + (global_weight * dest_dist) + (0.2 * connectivity_score)
        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
