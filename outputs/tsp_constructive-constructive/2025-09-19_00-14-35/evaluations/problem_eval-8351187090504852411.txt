def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic neighborhood size with probabilistic adjustment
    base_size = max(1, int(2 + 3 * (1 - exploration_factor)))
    neighborhood_size = min(base_size + int(np.random.exponential(1)), len(unvisited_nodes))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Temperature parameter for softmax
    temperature = 1.0 + 2.0 * exploration_factor

    # Evaluate candidates with probabilistic scoring
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score (harmonic mean of distances to remaining nodes)
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            harmonic_mean = (remaining_nodes - 1) / sum(1/d for d in remaining_dists)
        else:
            harmonic_mean = 0

        # Dynamic weights with probabilistic adjustment
        weight_dist = 0.3 + 0.4 * np.random.beta(2, 2)
        weight_connectivity = 0.5 + 0.3 * np.random.beta(2, 2)
        weight_penalty = 0.2 + 0.3 * np.random.beta(2, 2)

        # Probabilistic scoring
        score = (weight_dist * current_dist +
                 weight_connectivity * harmonic_mean -
                 weight_penalty * (dest_dist ** (1 + 0.3 * np.random.beta(1, 1))))

        return np.exp(-score / temperature)

    # Probabilistic selection
    scores = [evaluate_node(node) for node in candidates]
    probabilities = [s / sum(scores) for s in scores]
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
