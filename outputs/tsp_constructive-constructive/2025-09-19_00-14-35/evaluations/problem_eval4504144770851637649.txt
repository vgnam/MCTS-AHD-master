def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            remaining_dists = [distance_matrix[node][n] for n in remaining_nodes]
            avg_remaining_dist = sum(remaining_dists) / len(remaining_dists)

            # Calculate node centrality: number of nearby nodes within a threshold
            threshold = 0.5 * avg_remaining_dist
            centrality = sum(1 for n in remaining_nodes if distance_matrix[node][n] <= threshold)

            # Dynamic weighting based on remaining nodes count
            dynamic_weight = min(0.9, 0.5 + 0.4 * (len(remaining_nodes) / len(unvisited_nodes)))
            score = immediate_dist * (dynamic_weight * avg_remaining_dist + (1 - dynamic_weight) * centrality)
        else:
            score = immediate_dist
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
