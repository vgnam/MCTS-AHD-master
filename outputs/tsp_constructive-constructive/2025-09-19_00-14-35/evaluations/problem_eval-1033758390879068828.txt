def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    def evaluate_node(node):
        progress_dist = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        nearest_neighbor_dist = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if remaining_nodes > 1 else 0
        connectivity_penalty = (remaining_nodes / (remaining_nodes + 1)) * nearest_neighbor_dist
        return progress_dist + connectivity_penalty

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
