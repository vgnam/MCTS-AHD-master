def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def weighted_score(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        weight_factor = 1 / (remaining_nodes + 1) if remaining_nodes else 0
        avg_remaining_distances = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if unvisited_nodes else 0
        penalty = avg_remaining_distances * (1 / (remaining_nodes + 1)) if unvisited_nodes else 0
        return local_distance + (global_distance * weight_factor) + penalty
    next_node = min(unvisited_nodes, key=weighted_score)
    return next_node
