import random
import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            lookahead_nodes = [n for n in unvisited_nodes if n != node]
            lookahead_distances = [distance_matrix[node][n] for n in lookahead_nodes]

            # Calculate lookahead potential metrics
            avg_lookahead = sum(lookahead_distances) / len(lookahead_distances) if lookahead_distances else 0
            max_lookahead = max(lookahead_distances) if lookahead_distances else 0
            min_lookahead = min(lookahead_distances) if lookahead_distances else 0

            # Calculate node centrality
            in_degree = sum(1 for n in unvisited_nodes if distance_matrix[n][node] < immediate_dist * 1.5)
            out_degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_lookahead * 1.5)
            centrality = (in_degree + out_degree) / (2 * remaining_nodes)

            # Dynamic weight calculation
            weight_immediate = 0.4 + 0.4 * exploration_factor + 0.2 * centrality
            weight_lookahead = 0.3 - 0.2 * exploration_factor + 0.2 * (1 - centrality)
            weight_destination = 0.3 + 0.3 * (1 - exploration_factor) + 0.2 * centrality

            # Novel score calculation with additional terms
            score = (weight_immediate * immediate_dist +
                    weight_lookahead * (0.6 * avg_lookahead + 0.3 * max_lookahead + 0.1 * min_lookahead) +
                    weight_destination * dest_dist +
                    0.1 * centrality * distance_matrix[current_node][destination_node])
        else:
            score = immediate_dist + dest_dist

        return score

    # Probabilistic selection based on scores
    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]

    # Add exploration component
    if random.random() < 0.2 * exploration_factor:
        next_node = random.choices(unvisited_nodes, weights=normalized_scores)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))

    return next_node
