def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic neighborhood selection
    neighborhood_size = max(1, int(3 - 2 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Adaptive weights
    alpha = 0.3 + 0.2 * exploration_factor  # Immediate distance weight
    beta = 0.9 - 0.6 * exploration_factor   # Destination bias weight
    gamma = 0.3  # Penalty for revisits

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        return (alpha * immediate_dist) + (beta * dest_dist) - (gamma * (1 if node in unvisited_nodes else 0))

    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
