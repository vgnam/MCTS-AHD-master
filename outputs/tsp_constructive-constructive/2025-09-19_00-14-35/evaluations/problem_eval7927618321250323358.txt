def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            centrality_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            path_potential = sum(distance_matrix[n][destination_node] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            centrality_score = 0
            path_potential = 0

        weight_centrality = 0.4
        weight_dest = 0.3
        weight_potential = 0.3
        detour_penalty = current_dist * (1 + exploration_factor)

        score = (weight_centrality * centrality_score) + (weight_dest * dest_dist) + (weight_potential * path_potential) + detour_penalty

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
