def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    exploration_weight = remaining_nodes / total_nodes
    temperature = 1.0 / (1.0 + remaining_nodes)

    candidate_scores = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]

        # Calculate centrality (number of nearby nodes)
        centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < local_dist * 1.5)

        # Proximity potential combines local and global distances with centrality
        proximity_potential = (local_dist / global_dist) * (1 + centrality / total_nodes)

        # Dynamic weight for proximity potential and centrality
        dynamic_weight = (1 - exploration_weight) * (1 + temperature * (hash(node) % 3))

        score = (exploration_weight * proximity_potential +
                dynamic_weight * centrality) + temperature * (hash(node) % 7)

        candidate_scores.append((node, score))

    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
