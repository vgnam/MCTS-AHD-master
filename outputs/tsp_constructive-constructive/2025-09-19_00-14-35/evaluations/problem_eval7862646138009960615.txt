def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Expanded candidate selection
    candidates = []
    for node in unvisited_nodes:
        # Immediate neighbors
        if distance_matrix[current_node][node] < sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes):
            candidates.append(node)
        # Potential stepping stones (nodes that reduce total path)
        elif any(distance_matrix[current_node][n] + distance_matrix[n][node] < distance_matrix[current_node][node]
                for n in unvisited_nodes if n != node):
            candidates.append(node)

    if not candidates:
        candidates = unvisited_nodes.copy()

    # Dynamic weight adjustment
    remaining_nodes = len(unvisited_nodes)
    if remaining_nodes <= 2:
        weight_dist = 0.3
        weight_connectivity = 0.6
        weight_penalty = 0.1
    elif remaining_nodes <= 5:
        weight_dist = 0.5
        weight_connectivity = 0.4
        weight_penalty = 0.1
    else:
        weight_dist = 0.6
        weight_connectivity = 0.3
        weight_penalty = 0.1

    # Evaluation with lookahead
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score with lookahead
        if len(unvisited_nodes) > 2:
            lookahead_nodes = [n for n in unvisited_nodes if n != node]
            avg_connectivity = sum(distance_matrix[node][n] for n in lookahead_nodes) / len(lookahead_nodes)
            min_connectivity = min(distance_matrix[node][n] for n in lookahead_nodes)
            connectivity_score = 0.7 * avg_connectivity + 0.3 * min_connectivity
        else:
            connectivity_score = 0

        return (weight_dist * current_dist +
                weight_connectivity * connectivity_score -
                weight_penalty * dest_dist)

    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
