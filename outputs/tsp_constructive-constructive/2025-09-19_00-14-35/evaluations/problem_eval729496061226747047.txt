def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    remaining_nodes = len(unvisited_nodes)
    weight = 1.0 / (remaining_nodes + 1)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            avg_remaining_dist = 0
        dynamic_factor = 1 - (remaining_nodes / (remaining_nodes + 1))
        return (0.5 * current_dist + 0.3 * weight * avg_remaining_dist - 0.1 * dest_dist) * (1 + dynamic_factor)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
