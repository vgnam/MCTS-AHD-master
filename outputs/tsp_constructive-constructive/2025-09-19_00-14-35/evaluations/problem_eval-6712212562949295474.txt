def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Stage 1: Filter candidates based on immediate distance and locality
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    candidate_size = max(1, min(3, len(candidates)))
    top_candidates = candidates[:candidate_size]

    # Stage 2: Evaluate candidates using weighted criteria with probabilistic selection
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score (average distance to remaining nodes)
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            avg_remaining_dist = 0

        # Locality score (balance between current and remaining distances)
        locality_score = (current_dist + avg_remaining_dist) / (dest_dist + 1e-6)

        # Adaptive weights based on exploration progress
        weight_dist = 0.3 + 0.2 * exploration_factor
        weight_connectivity = 0.4 - 0.1 * exploration_factor
        weight_penalty = 0.1 + 0.1 * (1 - exploration_factor)
        weight_locality = 0.2

        # Combined score with locality influence
        score = (weight_dist * current_dist +
                 weight_connectivity * avg_remaining_dist -
                 weight_penalty * dest_dist +
                 weight_locality * locality_score)

        # Probabilistic selection: higher scores have higher selection probability
        return score

    # Select node with highest score (or random tie-breaker)
    scores = [evaluate_node(node) for node in top_candidates]
    max_score = max(scores)
    best_nodes = [node for node, score in zip(top_candidates, scores) if score == max_score]
    next_node = random.choice(best_nodes) if len(best_nodes) > 1 else best_nodes[0]

    return next_node
