def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (remaining_nodes / total_nodes) ** 2

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_diversity = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption_index = (max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1))
            coherence_penalty = (current_dist + dest_dist) / (1 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1))
        else:
            connectivity_diversity = 0
            flow_disruption_index = 0
            coherence_penalty = 0

        weight_local = 0.2 + 0.3 * (1 - exploration_factor)
        weight_connectivity = 0.6 * exploration_factor
        weight_flow = -0.4 * flow_disruption_index
        weight_coherence = -0.2 * coherence_penalty

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_diversity) + (weight_flow * flow_disruption_index) + (weight_coherence * coherence_penalty)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
