def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_count = total_nodes - len(unvisited_nodes)
    learning_rate = 0.9 ** visited_count  # Exponentially decaying learning rate

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            # Calculate node centrality (average distance to all other unvisited nodes)
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0

            # Dynamic weight balancing
            immediate_weight = 1.0 - learning_rate
            centrality_weight = learning_rate * 0.7
            destination_weight = learning_rate * 0.3

            return (immediate_weight * current_dist +
                    centrality_weight * avg_remaining +
                    destination_weight * dest_dist)
        else:
            return current_dist + dest_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
