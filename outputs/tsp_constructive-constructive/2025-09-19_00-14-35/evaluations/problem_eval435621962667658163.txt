def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    total_nodes = len(unvisited_nodes) + 1
    remaining_ratio = len(unvisited_nodes) / total_nodes if total_nodes > 0 else 0
    weight_immediate = 1.0 - 0.3 * remaining_ratio
    weight_avg = 0.5 + 0.3 * remaining_ratio
    candidate_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        perturbation = 0.01 * (node % 10)  # Index-based perturbation
        score = weight_immediate * current_dist + weight_avg * avg_dist + perturbation
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
