def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weighting based on destination proximity
    dest_proximity = 1.0 / (1.0 + distance_matrix[current_node][destination_node])
    weight_current = 0.7 - 0.3 * dest_proximity
    weight_dest = 0.3 + 0.3 * dest_proximity

    # Non-linear temperature function
    temperature = (len(unvisited_nodes) ** 0.5) / (len(unvisited_nodes) + 1)

    candidate_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        score = (current_dist * weight_current) + (dest_dist * weight_dest) + (temperature * (hash(node) % 10))
        candidate_scores.append((node, score))

    # Probabilistic selection based on scores
    scores = [score for _, score in candidate_scores]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - score + 1e-6) / (max_score - min_score + 1e-6) for score in scores]
    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]
    next_node = random.choices([node for node, _ in candidate_scores], weights=probabilities, k=1)[0]

    return next_node
