def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic neighborhood selection
    neighborhood_size = max(1, int(2 + 3 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Adaptive weighted evaluation
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        ratio = dest_dist / current_dist

        # Dynamic weights
        weight_ratio = 0.5 + 0.3 * (1 - exploration_factor)
        weight_dest = 0.4 - 0.2 * (1 - exploration_factor)

        return weight_ratio * ratio + weight_dest * dest_dist

    next_node = max(candidates, key=lambda node: evaluate_node(node))
    return next_node
