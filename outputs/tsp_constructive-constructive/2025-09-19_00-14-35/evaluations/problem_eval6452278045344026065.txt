def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = (remaining_nodes / total_nodes) ** 2  # Nonlinear temperature scaling

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Enhanced connectivity potential
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            node_centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < 1.2 * avg_remaining_dist) / (remaining_nodes - 1)
            future_impact = sum(distance_matrix[n][m] for n in unvisited_nodes for m in unvisited_nodes if n != m and distance_matrix[n][m] < 1.5 * avg_remaining_dist) / (remaining_nodes ** 2)
            connectivity_potential = (1.0 / (1.0 + avg_remaining_dist)) * (1.0 + node_centrality) * (1.0 + future_impact)
        else:
            connectivity_potential = 0

        # Dynamic weighting with nonlinear adjustment
        weight_local = 0.5 + 0.4 * temperature  # More balanced early weighting
        weight_connectivity = 0.5 - 0.4 * temperature
        score = (weight_local * current_dist) + (weight_connectivity * (1.0 - connectivity_potential))

        scores.append((node, score))

    # Probabilistic selection with temperature-based bias
    if temperature > 0.5:
        # Early stages: more exploration
        probabilities = [1.0 / (1.0 + score[1]) for score in scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([s[0] for s in scores], weights=probabilities, k=1)[0]
    else:
        # Later stages: greedy selection
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
