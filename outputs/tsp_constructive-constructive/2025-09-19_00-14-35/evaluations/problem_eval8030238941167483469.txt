def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        progress = distance_matrix[current_node][node] + distance_matrix[node][destination_node]
        normalized_progress = progress / (distance_matrix[current_node][destination_node] + distance_matrix[current_node][destination_node])

        if len(unvisited_nodes) > 1:
            connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            normalized_connectivity = connectivity / max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
        else:
            normalized_connectivity = 0

        decay_factor = 0.7 ** len(unvisited_nodes)
        score = (1 - decay_factor) * normalized_progress + decay_factor * (1 - normalized_connectivity)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
