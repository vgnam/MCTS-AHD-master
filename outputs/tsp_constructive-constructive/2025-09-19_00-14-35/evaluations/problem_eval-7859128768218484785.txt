def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = max(0.1, 1.0 - (remaining_nodes / total_nodes))

    def node_score(node):
        direct_distance = distance_matrix[current_node][node]
        return_distance = distance_matrix[node][destination_node]
        avg_unvisited_distance = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0
        return (direct_distance + return_distance) * (1 + temperature * avg_unvisited_distance)

    if remaining_nodes > 1:
        scores = [node_score(node) for node in unvisited_nodes]
        min_score = min(scores)
        max_score = max(scores)
        normalized_scores = [(max_score - s) / (max_score - min_score + 1e-9) for s in scores]
        probabilities = [np.exp(s / temperature) for s in normalized_scores]
        probabilities = [p / sum(probabilities) for p in probabilities]
        next_node = np.random.choice(unvisited_nodes, p=probabilities)
    else:
        next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    return next_node
