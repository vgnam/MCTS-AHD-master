def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    weight_factor = 1.0 / (1.0 + 0.1 * remaining_nodes) if remaining_nodes > 0 else 0.0

    def score(node):
        local_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        weight_local = 0.5 - 0.2 * exploration_factor
        weight_connectivity = 0.3 + 0.2 * exploration_factor
        weight_dest = -0.2 if exploration_factor < 0.3 else 0

        return (1 - weight_factor) * (weight_local * local_dist + weight_connectivity * connectivity_score + weight_dest * dest_dist) + weight_factor * local_dist

    next_node = min(unvisited_nodes, key=score)
    return next_node
