def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_list) / (remaining_nodes - 1)
            novelty_bonus = 1.0 / (1.0 + sum(1 for n in unvisited_nodes if distance_matrix[node][n] < immediate_dist))
        else:
            connectivity_score = 0
            novelty_bonus = 0

        weight_local = 0.5
        weight_connectivity = 0.2
        weight_dest = -0.3
        weight_novelty = 0.1

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_novelty * novelty_bonus)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
