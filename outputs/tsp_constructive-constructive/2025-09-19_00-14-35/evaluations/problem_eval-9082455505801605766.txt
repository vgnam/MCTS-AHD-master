importance" metric that combines proximity, connectivity, and potential path savings, while using a non-linear exploration factor to balance exploration and exploitation more adaptively.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            connectivity_score = sum(1 / (1 + distance_matrix[node][n]) for n in remaining_nodes_list) / len(remaining_nodes_list)
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
            node_importance = (immediate_dist * connectivity_score + potential_gain) / (1 + exploration_factor)
        else:
            connectivity_score = 0
            potential_gain = 0
            node_importance = 0

        weight_proximity = 0.5 - 0.3 * exploration_factor
        weight_connectivity = 0.4 * exploration_factor
        weight_gain = 0.3 * (1 - exploration_factor)
        weight_importance = 0.2 * (1 - exploration_factor)

        score = (weight_proximity * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_gain * potential_gain) + (weight_importance * node_importance)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
