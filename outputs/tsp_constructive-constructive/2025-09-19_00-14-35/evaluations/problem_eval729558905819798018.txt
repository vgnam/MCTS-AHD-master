def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            sum_squared_dist = sum((distance_matrix[node][n]) ** 2 for n in remaining_nodes)
            connectivity_score = 1.0 / (1.0 + sum_squared_dist)
            weight_connectivity = 0.5
            weight_avg = 0.5
            combined_score = weight_avg * avg_remaining_dist + weight_connectivity * connectivity_score
            return immediate_dist * combined_score
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
