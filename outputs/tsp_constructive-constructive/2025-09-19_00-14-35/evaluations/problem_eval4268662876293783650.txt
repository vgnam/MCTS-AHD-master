def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic neighborhood size
    neighborhood_size = max(1, int(3 + 2 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Evaluate candidates
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score (variance of distances to remaining nodes)
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            mean_dist = sum(remaining_dists) / (remaining_nodes - 1)
            variance = sum((d - mean_dist) ** 2 for d in remaining_dists) / (remaining_nodes - 1)
        else:
            variance = 0

        # Alignment score (how well the node aligns with the destination)
        alignment_score = 1 / (1 + dest_dist)

        # Dynamic weights
        weight_dist = 0.3 - 0.1 * exploration_factor
        weight_connectivity = 0.5 + 0.2 * exploration_factor
        weight_alignment = 0.2 + 0.1 * (1 - exploration_factor)

        return (weight_dist * current_dist +
                weight_connectivity * variance +
                weight_alignment * alignment_score)

    # Calculate scores and normalize
    scores = [evaluate_node(node) for node in candidates]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(s - min_score) / (max_score - min_score + 1e-10) for s in scores]

    # Temperature-based probabilistic selection
    temperature = 1.0 - 0.8 * (1 - exploration_factor)
    probabilities = [np.exp(score / temperature) for score in normalized_scores]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = np.random.choice(candidates, p=probabilities)
    return next_node
