def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 / (1.0 + exploration_factor)

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            diversity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            connectivity_score = 0
            flow_disruption = 0
            diversity_score = 0

        weight_local = 0.7 - 0.1 * exploration_factor
        weight_connectivity = 0.15 + 0.1 * exploration_factor
        weight_flow = -0.15 * flow_disruption if flow_disruption > 0 else 0
        weight_diversity = 0.05 * diversity_score

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_flow * flow_disruption) + (weight_diversity * diversity_score)

        scores.append((node, score))

    if temperature < 0.1:
        next_node = min(scores, key=lambda x: x[1])[0]
    else:
        exp_scores = [math.exp(-score / temperature) for _, score in scores]
        total_exp = sum(exp_scores)
        probs = [exp / total_exp for exp in exp_scores]
        next_node = random.choices([node for node, _ in scores], weights=probs, k=1)[0]

    return next_node
