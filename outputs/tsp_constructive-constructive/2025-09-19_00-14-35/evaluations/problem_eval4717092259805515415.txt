def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        else:
            avg_remaining_dist = 0

        # Stronger dynamic weight and higher penalty
        weight = (1.0 / (len(unvisited_nodes) + 1)) ** 3
        penalty = 0.2 * (1.0 / len(unvisited_nodes)) if node in unvisited_nodes else 0.0

        # Stronger local priority with gradual balance
        heuristic = (0.8 * current_dist) + (0.2 * avg_remaining_dist) + penalty
        return heuristic

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
