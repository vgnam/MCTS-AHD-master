import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, historical_path=None):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    density_factor = remaining_nodes / total_nodes

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    density_weight = sigmoid(3 * (density_factor - 0.5))
    proximity_weight = 1 - density_weight

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            density_score = node_degree / (total_nodes - 1)
        else:
            connectivity_score = 0
            flow_disruption = 0
            density_score = 0

        novelty_bonus = 0
        if historical_path and node in historical_path:
            novelty_bonus = 0.2 * (1 - historical_path.count(node) / len(historical_path))

        weight_proximity = 0.5 * proximity_weight + 0.1 * density_weight
        weight_connectivity = 0.2 * proximity_weight + 0.3 * density_weight
        weight_dest = -0.3 * proximity_weight + 0.2 * density_weight
        weight_flow = -0.2 * flow_disruption if flow_disruption > 0 else 0
        weight_density = 0.1 * proximity_weight + 0.2 * density_weight
        weight_novelty = 0.4 * density_weight

        score = (weight_proximity * current_dist) + (weight_connectivity * connectivity_score) + \
                (weight_flow * flow_disruption) + (weight_dest * dest_dist) + \
                (weight_density * density_score) + (weight_novelty * novelty_bonus)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
