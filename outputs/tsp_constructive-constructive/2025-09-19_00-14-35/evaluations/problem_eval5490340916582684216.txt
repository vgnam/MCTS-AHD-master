def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    phase = (total_nodes - remaining_nodes) / total_nodes
    temperature = 1.0 / (1.0 + phase * remaining_nodes)
    novelty_bias = {node: 1.0 / (1.0 + sum(distance_matrix[node])) for node in unvisited_nodes}
    candidate_scores = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        avg_dist = sum(distance_matrix[node]) / total_nodes
        phase_weight = (1 - phase) * (local_dist / global_dist) + phase * (local_dist / avg_dist)
        score = phase_weight + novelty_bias[node] + temperature * (hash(node) % 10)
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
