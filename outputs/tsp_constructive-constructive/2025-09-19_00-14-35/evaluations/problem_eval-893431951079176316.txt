def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            max_dist = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            flow_disruption = max_dist - current_dist
            path_efficiency = (current_dist + dest_dist) / (sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1))
        else:
            connectivity_score = 0
            flow_disruption = 0
            path_efficiency = 1.0

        weight_local = 0.4
        weight_connectivity = 0.3
        weight_flow = -0.1 * flow_disruption if flow_disruption > 0 else 0
        weight_efficiency = 0.2 * path_efficiency

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + weight_flow + weight_efficiency

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
