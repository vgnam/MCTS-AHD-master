def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    candidate_scores = []
    remaining_nodes = len(unvisited_nodes)
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        avg_dist = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / max(1, len(unvisited_nodes) - 1)
        dynamic_weight = 1.0 / (1.0 + remaining_nodes)  # Decreases as nodes are visited
        penalty = 1.0 if distance_matrix[node][destination_node] < 0.5 * avg_dist else 0.0  # Penalize nodes too close to destination
        score = current_dist + dynamic_weight * avg_dist + penalty + 0.01 * (hash(node) % 10)
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
