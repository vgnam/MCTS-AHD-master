def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    promise_factor = 1.0 / (len(unvisited_nodes) + 1)
    exploration_factor = 1.0 - promise_factor

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(remaining_dists) / (len(unvisited_nodes) - 1)
            min_remaining_dist = min(remaining_dists)
            promise = promise_factor * (0.3 * avg_remaining_dist + 0.7 * min_remaining_dist)
        else:
            promise = 0
        return current_dist + exploration_factor * promise

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
