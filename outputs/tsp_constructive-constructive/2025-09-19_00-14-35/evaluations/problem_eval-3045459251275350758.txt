def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        exploration_factor = 0

        if len(unvisited_nodes) > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            centrality = sum(distance_matrix[node][n] for n in unvisited_nodes) / len(unvisited_nodes)
            exploration_factor = (centrality / avg_remaining_dist) if avg_remaining_dist > 0 else 0

        weight = 1.0 / (len(unvisited_nodes) + 1)
        score = 0.7 * current_dist + 0.2 * exploration_factor * weight - 0.1 * dest_dist
        return score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]
    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
