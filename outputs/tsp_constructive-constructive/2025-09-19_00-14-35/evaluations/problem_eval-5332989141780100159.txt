def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = 1 / (1 + math.exp(-5 * (remaining_nodes / total_nodes - 0.5)))

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = math.exp(-avg_remaining_dist)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = (node_degree / (total_nodes - 1)) ** 2
        else:
            connectivity_score = 0
            flow_disruption = 0
            centrality_score = 0

        weight_local = 0.6 - 0.4 * exploration_factor
        weight_connectivity = 0.3 * exploration_factor
        weight_dest = -0.2 if exploration_factor < 0.4 else 0.1 * (1 - exploration_factor)
        weight_flow = -0.2 * math.tanh(flow_disruption)
        weight_centrality = 0.2 * exploration_factor

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_flow * flow_disruption) + (weight_dest * dest_dist) + (weight_centrality * centrality_score)

        scores.append((node, score))

    if remaining_nodes > 2:
        temperature = 0.1 + 0.9 * exploration_factor
        probabilities = [math.exp(-s / temperature) for _, s in scores]
        total_prob = sum(probabilities)
        probabilities = [p / total_prob for p in probabilities]
        next_node = random.choices([n for n, _ in scores], weights=probabilities, k=1)[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
