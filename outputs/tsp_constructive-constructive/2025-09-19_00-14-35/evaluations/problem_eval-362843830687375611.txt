def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distances_to_unvisited) / (remaining_nodes - 1)
            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)
            connectivity_score = (1.0 + avg_remaining_dist) * (1.0 + (variance_remaining_dist ** 0.5))
        else:
            connectivity_score = 0

        weight_connectivity = 0.5 - 0.1 * (1 - exploration_factor)
        weight_local = 0.2 + 0.1 * (1 - exploration_factor)
        weight_dest = 0.3 - 0.1 * (1 - exploration_factor)

        score = (weight_connectivity * connectivity_score) + (weight_local * current_dist) + (weight_dest * dest_dist)
        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
