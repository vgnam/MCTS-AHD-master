def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            future_dists = [distance_matrix[node][n] for n in remaining_nodes]

            # Multi-criteria evaluation with dynamic weights
            avg_future_dist = sum(future_dists) / len(future_dists)
            min_future_dist = min(future_dists)

            # Dynamic connectivity factor (node degree in remaining graph)
            connectivity = len([n for n in remaining_nodes if distance_matrix[node][n] < 2 * avg_future_dist])

            # Exponentially decreasing weight for future considerations
            progress_factor = 1.0 / (1.0 + len(unvisited_nodes))
            weight = progress_factor ** 2

            score = immediate_dist + weight * (0.4 * avg_future_dist + 0.3 * min_future_dist + 0.3 * connectivity)
        else:
            score = immediate_dist

        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
