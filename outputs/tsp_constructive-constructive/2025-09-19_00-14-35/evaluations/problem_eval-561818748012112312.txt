def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix, memory=None, memory_decay=0.9):
    if not unvisited_nodes:
        return destination_node

    if memory is None:
        memory = {}

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def calculate_entropy(node):
        if remaining_nodes <= 1:
            return 0.0
        distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        if not distances:
            return 0.0
        mean = sum(distances) / len(distances)
        variance = sum((d - mean) ** 2 for d in distances) / len(distances)
        return variance ** 0.5 if variance > 0 else 0.0

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        entropy = calculate_entropy(node)

        memory_penalty = memory.get(node, 0.0)
        updated_memory = memory_penalty * memory_decay

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        weight_local = 0.6 * (1 - exploration_factor) + 0.2 * exploration_factor
        weight_connectivity = 0.3 * (1 - exploration_factor) + 0.4 * exploration_factor
        weight_dest = 0.1 * (1 - exploration_factor) + 0.4 * exploration_factor
        weight_entropy = 0.2 * exploration_factor
        weight_memory = 0.1 * (1 - exploration_factor)

        score = (weight_local * immediate_dist +
                 weight_connectivity * connectivity_score +
                 weight_dest * dest_dist +
                 weight_entropy * entropy -
                 weight_memory * updated_memory)

        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))

    if memory is not None:
        memory[next_node] = memory.get(next_node, 0.0) + 1.0

    return next_node
