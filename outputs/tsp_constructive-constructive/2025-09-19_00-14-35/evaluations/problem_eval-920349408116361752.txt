defaulting to the nearest node if the destination is not optimal.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        min_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)
        dest_distance = distance_matrix[current_node][destination_node]
        remaining_nodes = len(unvisited_nodes)
        bias = 1 / (1 + (remaining_nodes - 1) * 0.1)  # Dynamic bias based on remaining nodes
        if dest_distance <= min_distance:
            return destination_node
        else:
            normalized_score = (min_distance / dest_distance) * bias
            prob = normalized_score / (normalized_score + 1)
            if np.random.rand() < prob:
                return destination_node
    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
