importance based on historical visit patterns, using adaptive weights that emphasize either local optimization or global exploration based on the current tour progress and node centrality.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Calculate node importance based on historical visit patterns
    node_importance = {}
    for node in unvisited_nodes:
        if remaining_nodes > 1:
            node_importance[node] = sum(1.0 / distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            node_importance[node] = 0

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Calculate connectivity score with importance weighting
        connectivity_score = sum(node_importance[n] * (1.0 / (1.0 + distance_matrix[node][n])) for n in unvisited_nodes if n != node) / (remaining_nodes - 1) if remaining_nodes > 1 else 0

        # Calculate flow disruption with importance consideration
        if remaining_nodes > 1:
            max_dist = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            flow_disruption = max_dist - current_dist
            flow_disruption *= node_importance[node]  # Weight by importance
        else:
            flow_disruption = 0

        # Adaptive weights based on exploration factor and node importance
        weight_local = 0.6 - 0.3 * exploration_factor
        weight_connectivity = 0.2 + 0.1 * exploration_factor
        weight_importance = 0.2 * node_importance[node]
        weight_flow = -0.15 * flow_disruption if flow_disruption > 0 else 0

        # Combine all factors into a single score
        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_importance) + (weight_flow * flow_disruption)

        scores.append((node, score))

    # Select node with minimum score (lower is better)
    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
