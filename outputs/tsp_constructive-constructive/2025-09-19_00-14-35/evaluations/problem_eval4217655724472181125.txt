def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Fixed neighborhood size
    neighborhood_size = 3
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Simplified evaluation metric
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Linear weight adjustment
        weight_dist = 0.5 + 0.2 * exploration_factor
        weight_dest = 0.5 - 0.2 * exploration_factor

        return (weight_dist * current_dist + weight_dest * dest_dist)

    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
