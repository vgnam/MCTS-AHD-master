def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        else:
            avg_remaining_dist = 0
        weight = 1.0 / (len(unvisited_nodes) + 1)
        dest_dist = distance_matrix[node][destination_node]
        score = 0.4 * current_dist + 0.5 * weight * avg_remaining_dist - 0.1 * dest_dist
        return score

    scores = {node: evaluate_node(node) for node in unvisited_nodes}
    min_score = min(scores.values())
    max_score = max(scores.values())
    temperature = len(unvisited_nodes) / (len(unvisited_nodes) + 1)

    if max_score == min_score:
        return random.choice(list(unvisited_nodes))

    normalized_scores = {node: (max_score - score) / (max_score - min_score) for node, score in scores.items()}
    probabilities = {node: math.exp(normalized_scores[node] / temperature) for node in unvisited_nodes}
    total_prob = sum(probabilities.values())
    probabilities = {node: prob / total_prob for node, prob in probabilities.items()}

    next_node = random.choices(list(unvisited_nodes), weights=list(probabilities.values()), k=1)[0]
    return next_node
