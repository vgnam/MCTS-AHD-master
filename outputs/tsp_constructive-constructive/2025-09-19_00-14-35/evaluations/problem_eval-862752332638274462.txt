importance factor for remaining distances and incorporates a probabilistic selection based on normalized scores to introduce stochasticity while maintaining efficient path planning.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0
            decay_factor = 1.0 / (1.0 + 0.1 * len(unvisited_nodes))
            priority_score = current_dist + decay_factor * (0.7 * dest_dist + 0.3 * avg_remaining)
            normalized_score = priority_score / (current_dist + dest_dist + avg_remaining + 1e-10)
            return normalized_score
        else:
            return current_dist + dest_dist

    candidates = unvisited_nodes[:]
    scores = [evaluate_node(node) for node in candidates]
    total_score = sum(scores)

    if total_score > 0:
        probabilities = [score / total_score for score in scores]
        import random
        next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    else:
        next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))

    return next_node
