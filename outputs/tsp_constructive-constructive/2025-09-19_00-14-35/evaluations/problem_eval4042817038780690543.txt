def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = total_nodes / remaining_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        weight_local = 0.2 * (1.0 - exploration_factor)
        weight_connectivity = 0.8 * exploration_factor
        penalty_factor = 1.0 + (current_dist / (avg_remaining_dist + 1e-6))
        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score * penalty_factor)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
