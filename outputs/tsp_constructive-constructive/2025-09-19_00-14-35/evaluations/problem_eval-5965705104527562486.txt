def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1.0 - (remaining_nodes / total_nodes)

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_degree = sum(1 for n in unvisited_nodes if n != node and distance_matrix[node][n] < current_dist)
            avg_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            novelty_factor = 1.0 / (1.0 + connectivity_degree)
        else:
            avg_connectivity = 0
            novelty_factor = 0

        weight_local = 0.6 + 0.2 * progress
        weight_connectivity = 0.4 - 0.2 * progress
        weight_novelty = 0.2 * (1.0 - progress)

        harmonic_mean = 3 / (1/weight_local + 1/weight_connectivity + 1/weight_novelty)
        score = (harmonic_mean * current_dist) + (weight_connectivity * (1.0 / (1.0 + avg_connectivity))) + (weight_novelty * novelty_factor)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
