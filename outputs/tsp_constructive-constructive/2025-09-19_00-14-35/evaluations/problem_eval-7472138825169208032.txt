def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic weights using sigmoid function for smooth transitions
    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    exploration_phase = 1 - sigmoid(10 * (exploration_factor - 0.5))
    weight_local = 0.4 + 0.4 * exploration_phase
    weight_connectivity = 0.3 + 0.2 * (1 - exploration_phase)
    weight_dest = 0.3 * (1 - exploration_phase)
    weight_recent = -0.2 * exploration_phase

    recent_nodes = list(unvisited_nodes)[-3:] if len(unvisited_nodes) >= 3 else []

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
        else:
            connectivity_score = 0

        recent_penalty = 1.0 if node in recent_nodes else 0.0

        score = (weight_local * immediate_dist) + \
                (weight_connectivity * connectivity_score) + \
                (weight_dest * dest_dist) + \
                (weight_recent * recent_penalty)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
