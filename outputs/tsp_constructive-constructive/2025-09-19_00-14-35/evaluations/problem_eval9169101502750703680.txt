def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (remaining_nodes / total_nodes) ** 1.5  # More aggressive scaling

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            # Geometric mean of distances to unvisited nodes (novel connectivity metric)
            product = 1.0
            for n in unvisited_nodes:
                if n != node:
                    product *= distance_matrix[node][n]
            geometric_mean = product ** (1.0 / (remaining_nodes - 1))
            connectivity_score = 1.0 / (1.0 + geometric_mean)
        else:
            connectivity_score = 0

        # Dynamic risk factor (balances exploration/exploitation)
        risk_factor = (remaining_nodes / total_nodes) ** 2
        weight_local = 0.5 - 0.3 * risk_factor
        weight_connectivity = 0.4 + 0.2 * risk_factor
        weight_dest = -0.2 - 0.1 * risk_factor

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
