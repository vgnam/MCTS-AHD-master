def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    exploration_factor_sq = exploration_factor ** 2

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_distances = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(remaining_distances) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)

            # Novel centrality metric: average of nearest neighbors' distances
            nearest_neighbors = sorted(remaining_distances)[:min(3, len(remaining_distances))]
            centrality = sum(nearest_neighbors) / len(nearest_neighbors) if nearest_neighbors else 0
        else:
            connectivity_score = 0
            centrality = 0

        # Adaptive weight calculation with quadratic terms
        weight_local = 0.6 * (1 - exploration_factor_sq)
        weight_connectivity = 0.3 + 0.2 * exploration_factor_sq
        weight_dest = 0.1 * (1 - exploration_factor_sq)
        weight_centrality = 0.1 * exploration_factor_sq

        score = (weight_local * immediate_dist +
                 weight_connectivity * connectivity_score +
                 weight_dest * dest_dist +
                 weight_centrality * centrality)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
