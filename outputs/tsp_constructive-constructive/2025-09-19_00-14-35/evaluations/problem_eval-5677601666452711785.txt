def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_progress = (total_nodes - remaining_nodes) / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            max_dev = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            deviation_penalty = (max_dev - current_dist) if (max_dev - current_dist) > 0 else 0
            hub_bonus = sum(1 for n in range(total_nodes) if distance_matrix[node][n] < current_dist) / total_nodes
        else:
            connectivity_score = 0
            deviation_penalty = 0
            hub_bonus = 0

        weight_local = max(0.1, 0.5 - 0.4 * exploration_progress)
        weight_connectivity = min(0.4, 0.2 + 0.3 * exploration_progress)
        weight_deviation = -0.2 * deviation_penalty
        weight_hub = 0.3 * hub_bonus

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_deviation * deviation_penalty) + (weight_hub * hub_bonus)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
