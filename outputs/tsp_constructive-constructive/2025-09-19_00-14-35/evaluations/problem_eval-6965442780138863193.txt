def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            weighted_score = (0.6 * immediate_dist) + (0.2 * connectivity_score) + (0.2 * (1 - exploration_factor) * dest_dist)
        else:
            weighted_score = immediate_dist

        return weighted_score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
