def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 * exploration_factor  # Decreases as progress increases

    # Dynamic neighborhood selection
    neighborhood_size = max(1, int(1 + 4 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Adaptive weights
    alpha = 0.5 + 0.3 * (1 - exploration_factor)  # Immediate distance weight
    beta = 0.5 - 0.3 * (1 - exploration_factor)   # Destination bias weight
    gamma = 0.3  # Penalty for revisit probability

    def fitness(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        revisit_penalty = gamma * (1 - exploration_factor)
        return (alpha * immediate_dist + beta * dest_dist) * (1 - revisit_penalty)

    # Calculate probabilities using softmax with temperature
    fitness_scores = [fitness(node) for node in candidates]
    exp_scores = [math.exp(score / temperature) for score in fitness_scores]
    probabilities = [exp / sum(exp_scores) for exp in exp_scores]

    # Select node probabilistically
    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
