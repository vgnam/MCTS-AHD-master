def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = remaining_nodes / total_nodes

    candidates = []
    for node in unvisited_nodes:
        dist_to_current = distance_matrix[current_node][node]
        dist_to_dest = distance_matrix[node][destination_node]
        node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0)

        # Calculate probability components
        dist_prob = 1 / (1 + dist_to_current)
        degree_prob = node_degree / (total_nodes - 1)
        dest_prob = 1 / (1 + dist_to_dest)

        # Combine probabilities with exploration factor
        combined_prob = (exploration_factor * dist_prob + (1 - exploration_factor) * degree_prob) * dest_prob
        candidates.append((node, combined_prob))

    # Select node with highest probability
    next_node = max(candidates, key=lambda x: x[1])[0]
    return next_node
