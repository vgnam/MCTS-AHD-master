import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    exploration_weight = sigmoid(5 * (exploration_factor - 0.5))
    exploitation_weight = 1 - exploration_weight

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            distances_to_unvisited = [distance_matrix[node][n] for n in remaining_nodes_list]
            variance_remaining_dist = sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / len(remaining_nodes_list)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist) * (1.0 + (variance_remaining_dist ** 0.5))

            weight_immediate = 0.4 * exploitation_weight + 0.1 * exploration_weight
            weight_avg = 0.3 * exploitation_weight + 0.2 * exploration_weight
            weight_connectivity = 0.2 * exploitation_weight + 0.1 * exploration_weight
            weight_dest = -0.1 * exploitation_weight + 0.1 * exploration_weight

            combined_score = (weight_immediate * immediate_dist) + (weight_avg * avg_remaining_dist) + \
                             (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)
            return combined_score
        else:
            return immediate_dist + dest_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
