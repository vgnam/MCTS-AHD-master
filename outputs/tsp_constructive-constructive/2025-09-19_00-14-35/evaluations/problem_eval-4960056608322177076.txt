def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = remaining_nodes / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0
        path_continuity_penalty = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        local_global_ratio = (distance_matrix[current_node][node] / distance_matrix[node][destination_node]) if distance_matrix[node][destination_node] != 0 else 0
        return (exploration_weight * local_global_ratio) + (1 - exploration_weight) * (current_dist + 0.6 * avg_remaining_dist + 0.4 * path_continuity_penalty)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
