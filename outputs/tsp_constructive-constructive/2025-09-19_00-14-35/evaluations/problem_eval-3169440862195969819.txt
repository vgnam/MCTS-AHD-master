def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    weight_local = 1 / (1 + np.exp(-0.1 * (remaining_nodes - 10)))  # Dynamic weight based on remaining nodes
    weight_global = 1 - weight_local

    def node_score(node):
        local_dist = distance_matrix[current_node][node]
        global_ratio = local_dist / distance_matrix[node][destination_node]
        progress_penalty = 1 if distance_matrix[node][destination_node] < distance_matrix[current_node][destination_node] else 0.8
        return weight_local * local_dist + weight_global * global_ratio * progress_penalty

    next_node = min(unvisited_nodes, key=node_score)
    return next_node
