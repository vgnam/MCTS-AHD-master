def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Stage 1: Find nearest neighbor
    nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])

    # Stage 2: Find node with best average connectivity
    connectivity_scores = {}
    for node in unvisited_nodes:
        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            avg_remaining_dist = 0
        connectivity_scores[node] = avg_remaining_dist

    best_connectivity_node = min(unvisited_nodes, key=lambda node: connectivity_scores[node])

    # Dynamic weighting between nearest neighbor and best connectivity
    weight_nearest = 0.6 * exploration_factor
    weight_connectivity = 0.4 * (1 - exploration_factor)

    # Evaluate candidates
    def evaluate_node(node):
        nearest_dist = distance_matrix[current_node][node]
        connectivity_score = connectivity_scores[node]
        return weight_nearest * nearest_dist + weight_connectivity * connectivity_score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
