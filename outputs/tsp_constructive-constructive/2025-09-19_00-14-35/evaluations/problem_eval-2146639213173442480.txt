def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            path_potential = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node)
            penalty_factor = max(0, (dest_dist - current_dist) / (dest_dist + 1e-6))
        else:
            path_potential = 0
            penalty_factor = 0

        weight_local = 0.4 + 0.1 * exploration_factor
        weight_potential = 0.3 * (1 - exploration_factor)
        weight_penalty = -0.3

        return (weight_local * current_dist) + (weight_potential * path_potential) + (weight_penalty * penalty_factor)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
