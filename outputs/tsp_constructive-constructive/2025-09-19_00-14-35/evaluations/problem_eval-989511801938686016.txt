defaults to the nearest node, introducing more stochasticity in selection when the destination is not optimal.}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if destination_node in unvisited_nodes:
        min_distance = min(distance_matrix[current_node][node] for node in unvisited_nodes if node != destination_node)
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance <= 1.5 * min_distance:
            prob = 0.8
        else:
            prob = 0.5 * (min_distance / dest_distance)
        if np.random.rand() < prob:
            return destination_node
    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    return next_node
