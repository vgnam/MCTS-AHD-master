def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    neighborhood_size = max(1, int(3 + 2 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    weight_factor = 1.0 / (remaining_nodes + 1)
    next_node = max(candidates, key=lambda node: (distance_matrix[node][destination_node] ** 2) / (distance_matrix[current_node][node] * (1 + weight_factor * remaining_nodes)))
    return next_node
