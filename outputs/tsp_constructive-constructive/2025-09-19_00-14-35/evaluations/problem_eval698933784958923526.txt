import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes

    # Sigmoid function to smoothly transition between local and global focus
    sigmoid = 1 / (1 + math.exp(-10 * (progress - 0.5)))
    local_weight = 0.3 + 0.4 * (1 - sigmoid)
    global_weight = 0.7 * sigmoid

    # Penalty for revisiting nodes to prevent cycles
    penalty = 0.1 * (1 - progress)

    next_node = min(unvisited_nodes, key=lambda node:
                   (local_weight * distance_matrix[current_node][node] +
                    global_weight * distance_matrix[node][destination_node] +
                    penalty * (1 if node in unvisited_nodes else 0)))

    return next_node
