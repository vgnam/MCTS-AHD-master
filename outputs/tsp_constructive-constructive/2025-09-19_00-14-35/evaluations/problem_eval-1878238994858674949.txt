def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 - exploration_factor

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            connectivity_score = 0

        node_potential = (current_dist + dest_dist) / (1 + connectivity_score)

        weight_local = 0.5 + 0.2 * temperature
        weight_connectivity = 0.3 + 0.2 * temperature
        weight_dest = 0.2 - 0.1 * temperature
        weight_potential = 0.1 * temperature

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) - (weight_potential * node_potential)

        scores.append((node, score))

    if temperature > 0.5:
        next_node = min(scores, key=lambda x: x[1])[0]
    else:
        weights = [math.exp(-score[1] / temperature) for score in scores]
        total_weight = sum(weights)
        normalized_weights = [w / total_weight for w in weights]
        next_node = random.choices([score[0] for score in scores], weights=normalized_weights, k=1)[0]

    return next_node
