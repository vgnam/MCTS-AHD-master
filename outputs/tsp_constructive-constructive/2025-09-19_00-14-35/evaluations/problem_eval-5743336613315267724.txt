def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            reinforcement_term = (connectivity_score * 0.5) - (dest_dist * 0.3)
        else:
            connectivity_score = 0
            reinforcement_term = 0

        weight_local = 0.4 * (1 - exploration_factor)
        weight_connectivity = 0.3 + 0.4 * exploration_factor
        weight_dest = -0.3 * (1 - exploration_factor) ** 2
        adaptive_penalty = 1.0 + (dest_dist / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)) * (1 - exploration_factor)

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score * adaptive_penalty) + (weight_dest * dest_dist) + reinforcement_term

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
