def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if unvisited_nodes:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            sum_remaining_dist = sum(remaining_dists) if remaining_dists else 1
            centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / len(unvisited_nodes)
            path_potential = sum(remaining_dists) / (len(remaining_dists) + 1) if remaining_dists else 1
        else:
            sum_remaining_dist = 1
            centrality = 0
            path_potential = 1

        local_score = immediate_dist / (1 + sum_remaining_dist)
        global_score = (centrality * 0.7 + path_potential * 0.3) * (1 / (1 + dest_dist))
        hybrid_score = local_score * (1 + global_score)

        return hybrid_score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
