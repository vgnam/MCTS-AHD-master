def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)
    avg_path_length = current_path_length / (remaining_nodes - 1) if remaining_nodes > 1 else 0

    # Calculate node degree centrality
    node_degrees = []
    for node in unvisited_nodes:
        degree = sum(1 for n in unvisited_nodes if distance_matrix[node][n] < avg_path_length * 1.5)
        node_degrees.append((node, degree))

    # Calculate path entropy
    path_entropy = 0
    if remaining_nodes > 1:
        distances = [distance_matrix[current_node][n] for n in unvisited_nodes]
        avg_dist = sum(distances) / len(distances)
        path_entropy = -sum((d/avg_dist) * math.log(d/avg_dist) for d in distances if d > 0)

    # Adaptive weight modulation
    sigmoid = lambda x: 1 / (1 + math.exp(-x))
    weight_local = 0.5 * sigmoid(5 * (1 - exploration_factor))
    weight_connectivity = 0.3 * sigmoid(5 * exploration_factor)
    weight_dest = 0.2 * (1 - exploration_factor)

    scores = []
    for node, degree in node_degrees:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score with degree centrality
        connectivity_score = degree * (1 + path_entropy) if remaining_nodes > 1 else 0

        # Hybrid scoring
        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)
        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
