def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def node_attractiveness(node):
        local_distance = distance_matrix[current_node][node]
        global_distance = distance_matrix[node][destination_node]
        remaining_nodes = len(unvisited_nodes)

        # Dynamic weight factor with exploration decay
        exploration_factor = 1 / (remaining_nodes + 1) if remaining_nodes else 0
        attractiveness = (local_distance + global_distance) * exploration_factor

        # Node-specific optimization potential
        if remaining_nodes > 1:
            # Calculate average distance to other unvisited nodes
            avg_future_distance = sum(distance_matrix[node][other] for other in unvisited_nodes if other != node) / (remaining_nodes - 1)
            attractiveness += (global_distance - avg_future_distance) * (1 - exploration_factor)

        return attractiveness

    next_node = min(unvisited_nodes, key=node_attractiveness)
    return next_node
