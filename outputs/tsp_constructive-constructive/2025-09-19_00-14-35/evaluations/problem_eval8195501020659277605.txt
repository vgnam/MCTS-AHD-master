def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            path_potential = sum((1.0 / distance_matrix[node][n]) ** 2 for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = abs(current_dist - dest_dist) / max(current_dist, dest_dist, 1e-6)
        else:
            path_potential = 0
            flow_disruption = 0

        weight_local = 0.6 + 0.3 * (1 - exploration_factor)
        weight_potential = 0.2 + 0.1 * exploration_factor
        weight_flow = -0.2 * flow_disruption

        score = (weight_local * current_dist) + (weight_potential * path_potential) + (weight_flow * flow_disruption)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
