def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            penalty = max(0, avg_remaining_dist - 2 * sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes))
        else:
            avg_remaining_dist = 0
            penalty = 0
        weight = 1.0 / (len(unvisited_nodes) + 1)
        return current_dist + weight * avg_remaining_dist + penalty

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
