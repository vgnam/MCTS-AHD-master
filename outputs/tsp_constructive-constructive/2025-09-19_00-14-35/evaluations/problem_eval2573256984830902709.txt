def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = node_degree / (total_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes_list) - immediate_dist
        else:
            connectivity_score = 0
            centrality_score = 0
            flow_disruption = 0

        weight_local = 0.4 - 0.3 * exploration_factor
        weight_connectivity = 0.3 + 0.2 * exploration_factor
        weight_centrality = 0.1 + 0.2 * exploration_factor
        weight_flow = -0.1 * flow_disruption if flow_disruption > 0 else 0

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_centrality * centrality_score) + (weight_flow * flow_disruption)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
