def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            centrality = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            entropy = -sum((distance_matrix[node][n] / sum(distance_matrix[node][k] for k in unvisited_nodes if k != node)) * np.log(distance_matrix[node][n] / sum(distance_matrix[node][k] for k in unvisited_nodes if k != node) + 1e-10) for n in unvisited_nodes if n != node)
            path_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
        else:
            centrality = 0
            entropy = 0
            path_disruption = 0

        weight_local = 0.7 * (1 - exploration_factor)
        weight_centrality = 0.3 * exploration_factor
        weight_entropy = -0.4 * entropy if entropy > 0 else 0
        weight_disruption = -0.3 * path_disruption if path_disruption > 0 else 0

        score = (weight_local * current_dist) + (weight_centrality * centrality) + (weight_entropy * entropy) + (weight_disruption * path_disruption)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
