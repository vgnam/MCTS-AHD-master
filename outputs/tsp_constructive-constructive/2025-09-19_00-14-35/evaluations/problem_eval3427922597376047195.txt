def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
        avg_remaining_dist = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0
        std_dev_penalty = (sum((x - avg_remaining_dist) ** 2 for x in remaining_dists) / len(remaining_dists)) ** 0.5 if remaining_dists else 0
        return 0.7 * current_dist + 0.2 * avg_remaining_dist + 0.1 * std_dev_penalty

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
