importance, where weights dynamically adjust based on node centrality (measured by average distances to remaining nodes) and exploration progress, while incorporating a probabilistic selection mechanism that balances immediate distance with long-term path potential using a softmax function with temperature decay.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    exploration_factor = remaining_nodes / total_nodes

    def calculate_node_importance(node):
        if remaining_nodes == 1:
            return 0
        remaining_nodes_list = [n for n in unvisited_nodes if n != node]
        avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
        max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes_list)
        node_importance = (1 / (1 + avg_remaining_dist)) * (max_remaining_dist / avg_remaining_dist)
        return node_importance

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        node_importance = calculate_node_importance(node)

        base_weight = 0.5 - 0.4 * exploration_factor
        importance_weight = 0.3 + 0.2 * exploration_factor * node_importance
        exploration_weight = 0.2 * (1 - exploration_factor)

        score = (base_weight * immediate_dist) + \
                (importance_weight * node_importance) + \
                (exploration_weight * (dest_dist / (1 + immediate_dist)))

        return score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    temperature = 1.0 - 0.7 * (1 - exploration_factor)
    probabilities = [math.exp(score / temperature) for score in scores]
    probabilities = [p / sum(probabilities) for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
