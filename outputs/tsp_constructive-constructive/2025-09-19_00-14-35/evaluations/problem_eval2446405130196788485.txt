def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = (remaining_nodes / total_nodes) * (1 + sum(distance_matrix[current_node][n] for n in unvisited_nodes) / (total_nodes ** 2))

    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes)
    avg_path_length = current_path_length / remaining_nodes if remaining_nodes > 0 else 0

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            harmonic_mean = (remaining_nodes - 1) / sum(1.0 / d for d in distances_to_unvisited) if any(d > 0 for d in distances_to_unvisited) else 0
            connectivity_score = harmonic_mean * (1 + (sum((d - avg_path_length) ** 2 for d in distances_to_unvisited) / (remaining_nodes - 1)) ** 0.5)
        else:
            connectivity_score = 0

        weight_local = 0.5 - 0.15 * (1 - exploration_factor) * (avg_path_length / total_nodes)
        weight_connectivity = 0.3 + 0.25 * exploration_factor * (1 - avg_path_length / total_nodes)
        weight_dest = -0.1 + 0.2 * (1 - exploration_factor) * (1 - avg_path_length / total_nodes)

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist)
        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
