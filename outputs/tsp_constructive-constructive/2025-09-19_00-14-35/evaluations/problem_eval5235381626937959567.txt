def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 - exploration_factor ** 2

    # Dynamic neighborhood with phase-dependent size
    if exploration_factor > 0.6:
        neighborhood_size = max(1, int(4 + 3 * exploration_factor))
    else:
        neighborhood_size = max(1, int(2 + 2 * exploration_factor))

    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Centrality score (average distance to all nodes)
        centrality = sum(distance_matrix[node]) / total_nodes

        # Phase-dependent weights
        if exploration_factor > 0.5:
            weight_dist = 0.4 + 0.3 * exploration_factor
            weight_centrality = 0.2 + 0.2 * exploration_factor
            weight_dest = 0.1 + 0.3 * (1 - exploration_factor)
        else:
            weight_dist = 0.3 + 0.2 * exploration_factor
            weight_centrality = 0.3 + 0.2 * (1 - exploration_factor)
            weight_dest = 0.2 + 0.3 * (1 - exploration_factor)

        # Temperature-adjusted selection
        score = (weight_dist * current_dist +
                 weight_centrality * centrality -
                 weight_dest * dest_dist)

        return score / temperature

    # Probabilistic selection with Boltzmann distribution
    scores = [evaluate_node(node) for node in candidates]
    exp_scores = [math.exp(-s) for s in scores]
    total = sum(exp_scores)
    probs = [s/total for s in exp_scores]
    next_node = random.choices(candidates, weights=probs, k=1)[0]

    return next_node
