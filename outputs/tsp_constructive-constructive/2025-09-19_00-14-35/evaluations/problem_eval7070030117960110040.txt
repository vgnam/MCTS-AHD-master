importance scoring with exponential decay, and a hybrid scoring mechanism that blends greedy proximity with global structural awareness, while using a simulated annealing-inspired acceptance probability to balance exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 - exploration_factor

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(math.exp(-distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            importance_score = (1.0 / (1.0 + current_dist)) * math.exp(-flow_disruption)
        else:
            connectivity_score = 0
            flow_disruption = 0
            importance_score = 1.0

        weight_local = 0.6 * math.exp(-exploration_factor)
        weight_connectivity = 0.3 + 0.2 * exploration_factor
        weight_importance = 0.4 * (1.0 - exploration_factor)

        raw_score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_importance * importance_score)
        acceptance_prob = math.exp(-raw_score / temperature)

        scores.append((node, raw_score, acceptance_prob))

    if random.random() < temperature:
        next_node = max(scores, key=lambda x: x[2])[0]
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    return next_node
