def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = remaining_nodes / total_nodes
    temperature = 1.0 / (1.0 + remaining_nodes)
    candidate_scores = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        ratio = global_dist / local_dist
        proximity_penalty = 0.3 * global_dist
        score = (exploration_weight * (1 / ratio) + (1 - exploration_weight) * proximity_penalty) + temperature * (hash(node) % 5)
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
