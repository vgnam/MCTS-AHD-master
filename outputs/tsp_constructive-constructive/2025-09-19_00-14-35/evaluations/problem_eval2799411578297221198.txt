def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes_list) - immediate_dist
            weight_flow = -0.2 * flow_disruption if flow_disruption > 0 else 0

            weight_local = 0.5 - 0.3 * exploration_factor
            weight_dest = -0.1 if exploration_factor < 0.3 else 0.1

            return (weight_local * immediate_dist) + (0.3 * avg_remaining_dist) + weight_flow + (weight_dest * dest_dist)
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
