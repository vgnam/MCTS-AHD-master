def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / len(unvisited_nodes) if unvisited_nodes else 0
    alpha = 0.6  # Weight for immediate distance
    beta = 0.2   # Weight for path length
    gamma = 0.2  # Penalty for revisits

    candidate_scores = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        score = (alpha * immediate_dist) + (beta * (dest_dist / (path_length + 1e-6))) - (gamma * (1 if node in unvisited_nodes else 0))
        candidate_scores.append((node, score))

    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
