def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            centrality = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            path_consistency = abs(current_dist - dest_dist) / (1.0 + distance_matrix[current_node][destination_node])
            tour_estimate = sum(min(distance_matrix[node][n], distance_matrix[n][destination_node]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            centrality = 0
            path_consistency = 0
            tour_estimate = 0

        weight_local = 0.5 + 0.3 * (1 - exploration_factor)
        weight_centrality = 0.2 + 0.2 * (1 - exploration_factor)
        weight_consistency = -0.3 * path_consistency if path_consistency > 0 else 0
        weight_tour = 0.2 * tour_estimate

        score = (weight_local * current_dist) + (weight_centrality * centrality) + (weight_consistency * path_consistency) + (weight_tour * tour_estimate)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
