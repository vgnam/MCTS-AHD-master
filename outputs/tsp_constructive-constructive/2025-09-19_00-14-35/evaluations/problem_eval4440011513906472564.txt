importance score (weighted by both direct and indirect connections) and an adaptive exploration factor that adjusts based on both remaining nodes and current path length, ensuring balanced exploration and exploitation.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    path_length = sum(distance_matrix[current_node][node] for node in unvisited_nodes if node != current_node)

    exploration_factor = (remaining_nodes / total_nodes) * (1.0 - (path_length / (2 * sum(sum(row) for row in distance_matrix) / total_nodes)))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            direct_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            indirect_connectivity = sum(distance_matrix[n][m] for n in unvisited_nodes if n != node for m in unvisited_nodes if m != node and m != n) / (remaining_nodes * (remaining_nodes - 1))
            connectivity_score = 0.7 * (1.0 / (1.0 + direct_connectivity)) + 0.3 * (1.0 / (1.0 + indirect_connectivity))
        else:
            connectivity_score = 0

        importance_score = (1.0 / (1.0 + current_dist)) * (1.0 / (1.0 + dest_dist))

        weight_local = 0.4
        weight_connectivity = 0.35 * exploration_factor
        weight_importance = 0.25
        weight_dest = -0.1

        return (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_importance * importance_score) + (weight_dest * dest_dist)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
