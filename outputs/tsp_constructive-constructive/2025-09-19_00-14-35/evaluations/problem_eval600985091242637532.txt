importance, while maintaining the original exploration factor's influence on decision-making.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    learning_rate = 0.1 * exploration_factor

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            immediate_connectivity = sum(1 / (1 + distance_matrix[node][n]) for n in remaining_nodes_list) / len(remaining_nodes_list)
            long_term_connectivity = sum(1 / (1 + distance_matrix[n][destination_node]) for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = 0.6 * immediate_connectivity + 0.4 * long_term_connectivity
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
        else:
            connectivity_score = 0
            potential_gain = 0

        weight_local = 0.4 + 0.2 * learning_rate
        weight_connectivity = 0.3 + 0.3 * learning_rate
        weight_dest = 0.2 - 0.1 * learning_rate
        weight_gain = 0.1 + 0.2 * learning_rate

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_dest * dest_dist) + (weight_gain * potential_gain)
        return score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score, max_score = min(scores), max(scores)
    normalized_scores = [(max_score - s) / (max_score - min_score + 1e-10) for s in scores]
    total = sum(normalized_scores)
    probabilities = [s / total for s in normalized_scores]

    next_node = unvisited_nodes[np.random.choice(len(unvisited_nodes), p=probabilities)]
    return next_node
