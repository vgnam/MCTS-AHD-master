def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Calculate centrality scores for each unvisited node
    centrality_scores = {}
    for node in unvisited_nodes:
        product_distances = 1.0
        for other_node in unvisited_nodes:
            if other_node != node:
                product_distances *= distance_matrix[node][other_node]
        centrality_scores[node] = product_distances

    # Normalize centrality scores
    max_score = max(centrality_scores.values()) if centrality_scores else 1.0
    normalized_scores = {node: score / max_score for node, score in centrality_scores.items()}

    # Dynamic probability adjustment based on exploration factor
    probabilities = []
    for node in unvisited_nodes:
        nearest_dist = distance_matrix[current_node][node]
        centrality_prob = normalized_scores[node] ** (1 - exploration_factor)
        prob = (0.7 * (1 / (nearest_dist + 1e-6)) + 0.3 * centrality_prob) * exploration_factor
        probabilities.append((node, prob))

    # Select node based on probabilities
    nodes, probs = zip(*probabilities)
    next_node = random.choices(nodes, weights=probs, k=1)[0]
    return next_node
