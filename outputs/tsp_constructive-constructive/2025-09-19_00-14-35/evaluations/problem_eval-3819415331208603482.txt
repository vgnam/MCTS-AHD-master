def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Calculate dynamic weights based on progress toward destination
    progress = distance_matrix[current_node][destination_node] / max(distance_matrix[current_node][node] for node in unvisited_nodes)

    # Initialize historical costs (simplified for this example)
    historical_costs = {node: 0 for node in unvisited_nodes}

    # Compute weighted sum with dynamic weights and penalty
    next_node = min(unvisited_nodes, key=lambda node: (
        (1 - progress) * distance_matrix[current_node][node] +
        progress * (distance_matrix[current_node][node] / distance_matrix[node][destination_node]) +
        0.1 * historical_costs[node]  # Penalty term
    ))

    return next_node
