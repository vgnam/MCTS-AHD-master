def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    distances = []
    penalties = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        penalty = 1.0 + 0.1 * (dest_dist / (current_dist + 1e-6))  # Penalize nodes far from destination
        distances.append(current_dist)
        penalties.append(penalty)
    weighted_probs = [1.0 / (dist * pen) for dist, pen in zip(distances, penalties)]
    total_prob = sum(weighted_probs)
    normalized_probs = [prob / total_prob for prob in weighted_probs]
    next_node = np.random.choice(unvisited_nodes, p=normalized_probs)
    return next_node
