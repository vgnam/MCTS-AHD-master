def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    entropy_factor = 1.0 / (1.0 + 0.05 * remaining_nodes)  # Higher entropy when more nodes remain

    def score(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        return (1 - entropy_factor) * local_dist + entropy_factor * global_dist

    scores = [score(node) for node in unvisited_nodes]
    min_score = min(scores)
    max_score = max(scores)

    # Normalize scores to probabilities using exponential scaling
    probabilities = [(max_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]
    probabilities = [p ** (1.0 / entropy_factor) for p in probabilities]  # Adjust sharpness based on entropy
    total = sum(probabilities)
    probabilities = [p / total for p in probabilities]

    # Select node based on probabilities
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
