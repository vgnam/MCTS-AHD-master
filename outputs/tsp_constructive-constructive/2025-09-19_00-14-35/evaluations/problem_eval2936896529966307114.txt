def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    visited_count = total_nodes - len(unvisited_nodes)
    temperature = max(0.1, 1.0 - 0.95 ** visited_count)  # Dynamic temperature

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 0

            # Adaptive weights with temperature influence
            immediate_weight = 1.0 - 0.5 * temperature
            centrality_weight = temperature * 0.6
            destination_weight = 0.5 * temperature

            # Boltzmann probability component
            total_weight = immediate_weight + centrality_weight + destination_weight
            normalized_score = (immediate_weight * current_dist +
                              centrality_weight * avg_remaining +
                              destination_weight * dest_dist) / total_weight

            return normalized_score * (1.0 + 0.3 * temperature)
        else:
            return current_dist + dest_dist

    # Select node with Boltzmann probability
    scores = [evaluate_node(node) for node in unvisited_nodes]
    exp_scores = [math.exp(score / temperature) for score in scores]
    probabilities = [exp / sum(exp_scores) for exp in exp_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]

    return next_node
