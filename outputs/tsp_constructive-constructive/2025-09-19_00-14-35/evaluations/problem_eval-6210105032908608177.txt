def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Calculate node centrality: how well connected the node is to remaining nodes
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            sorted_dists = sorted(remaining_dists)
            # Centrality is the ratio of top 30% connections that are below median distance
            median_dist = sorted_dists[len(sorted_dists) // 2]
            centrality = sum(1 for d in sorted_dists[:max(1, len(sorted_dists) // 3)] if d <= median_dist) / (len(sorted_dists) / 3)
        else:
            centrality = 0

        # Non-linear weight adjustment based on exploration progress
        weight_local = 0.5 * (1 - exploration_factor**2) + 0.1
        weight_centrality = 0.4 * exploration_factor**1.5 + 0.1
        weight_dest = 0.3 * (1 - exploration_factor) + 0.2

        return (weight_local * current_dist) + (weight_centrality * (1 - centrality)) + (weight_dest * dest_dist)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
