def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_progress = 1 - (remaining_nodes / total_nodes)

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            min_remaining_dist = min(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            max_remaining_dist = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            normalized_connectivity = (max_remaining_dist - min_remaining_dist) / max_remaining_dist if max_remaining_dist > 0 else 0
        else:
            normalized_connectivity = 0

        weight_local = 0.4 + 0.2 * exploration_progress
        weight_connectivity = 0.3 - 0.1 * exploration_progress
        weight_dest = -0.1 + 0.2 * exploration_progress

        score = (weight_local * current_dist) + (weight_connectivity * normalized_connectivity) + (weight_dest * dest_dist)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
