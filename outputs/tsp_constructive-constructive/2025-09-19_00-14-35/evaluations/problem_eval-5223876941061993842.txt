def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        total_unvisited = len(unvisited_nodes)

        if unvisited_nodes:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(remaining_dists) / len(remaining_dists) if remaining_dists else 1
            connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / total_unvisited
        else:
            avg_remaining_dist = 1
            connectivity = 0

        # Dynamic penalty for nodes too close to destination early
        penalty = 1 + (1 if dest_dist < avg_remaining_dist * 0.7 else 0)

        # Exponential decay for proximity to destination
        proximity_factor = math.exp(-dest_dist / avg_remaining_dist)

        # Connectivity reward with exploration factor
        connectivity_reward = math.pow(connectivity, 2) * (1 + 1 / (1 + len(unvisited_nodes)))

        score = (immediate_dist / (1 + avg_remaining_dist)) * penalty * (1 + proximity_factor) * connectivity_reward
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
