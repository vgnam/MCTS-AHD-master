import math

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    temperature = 1.0 - (remaining_nodes / total_nodes)

    def temperature_scaled_score(x, temp):
        return math.exp(-x / (1 + temp))

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(temperature_scaled_score(distance_matrix[node][n], temperature)
                                   for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = node_degree / (total_nodes - 1)
        else:
            connectivity_score = 0
            centrality_score = 0

        proximity_weight = 0.5 * (1 - temperature) + 0.3 * temperature
        connectivity_weight = 0.3 * (1 - temperature) + 0.4 * temperature
        centrality_weight = 0.2 * (1 - temperature) + 0.3 * temperature

        score = (proximity_weight * current_dist) + \
                (connectivity_weight * connectivity_score) + \
                (centrality_weight * centrality_score)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
