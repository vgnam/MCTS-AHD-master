import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Dynamic weight adjustment based on remaining nodes
    remaining_nodes = len(unvisited_nodes)
    local_weight = 0.7 if remaining_nodes > 5 else 0.6
    global_weight = 0.3 if remaining_nodes > 5 else 0.4

    # Add a small randomness factor (5%) to explore
    next_node = min(unvisited_nodes, key=lambda node:
                   (local_weight * distance_matrix[current_node][node] +
                    global_weight * distance_matrix[node][destination_node]) *
                   (1 + 0.05 * random.random()))
    return next_node
