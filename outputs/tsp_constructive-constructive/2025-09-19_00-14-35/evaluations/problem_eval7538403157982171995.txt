def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    visited_nodes = set(distance_matrix.keys()) - unvisited_nodes - {current_node}
    total_nodes = len(distance_matrix)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1) if len(unvisited_nodes) > 1 else 0
        centrality = 1.0 / (1 + avg_remaining_dist) if avg_remaining_dist != 0 else 0
        recency_penalty = 0.2 if node in visited_nodes else 0.0
        dest_dist = distance_matrix[node][destination_node]
        progress_factor = (total_nodes - len(unvisited_nodes)) / total_nodes
        return (0.5 * current_dist + 0.3 * centrality - 0.1 * dest_dist - 0.1 * recency_penalty) * (1 + progress_factor)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
