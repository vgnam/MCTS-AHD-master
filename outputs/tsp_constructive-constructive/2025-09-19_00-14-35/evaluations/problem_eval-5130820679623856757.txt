defined as the sum of normalized distances to unvisited nodes, emphasizing both proximity and network centrality with adjustable weights (50% for immediate distance and 50% for connectivity).}

```python
def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            connectivity_score = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            weight_immediate = 0.5
            weight_connectivity = 0.5
            combined_score = weight_immediate * immediate_dist + weight_connectivity * connectivity_score
            return combined_score
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
