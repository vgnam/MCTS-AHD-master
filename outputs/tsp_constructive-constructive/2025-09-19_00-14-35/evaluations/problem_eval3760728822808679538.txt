import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) == 1:
            return immediate_dist

        remaining_unvisited = [n for n in unvisited_nodes if n != node]
        if len(remaining_unvisited) == 0:
            return immediate_dist

        lookahead_depth = min(4, len(remaining_unvisited))
        base_lookahead_score = 0

        for depth in range(1, lookahead_depth + 1):
            if depth > len(remaining_unvisited):
                break
            next_nodes = remaining_unvisited[:depth]
            lookahead_dist = sum(distance_matrix[n1][n2] for n1, n2 in zip([node] + next_nodes[:-1], next_nodes))
            base_lookahead_score += lookahead_dist * (0.6 ** depth)

        dynamic_weight = 1.0 - (len(unvisited_nodes) / (len(unvisited_nodes) + len(distance_matrix)))
        total_score = immediate_dist + (base_lookahead_score * dynamic_weight)

        detour_penalty = 0.1 * (distance_matrix[node][destination_node] - immediate_dist)
        total_score += max(0, detour_penalty)

        return total_score

    candidates = unvisited_nodes.copy()
    scores = [evaluate_node(node) for node in candidates]
    min_score = min(scores)
    max_score = max(scores)

    if max_score == min_score:
        return random.choice(candidates)

    normalized_scores = [1.0 - ((score - min_score) / (max_score - min_score)) for score in scores]
    selection_prob = [prob ** 2 for prob in normalized_scores]
    selection_prob = [p / sum(selection_prob) for p in selection_prob]

    next_node = random.choices(candidates, weights=selection_prob, k=1)[0]
    return next_node
