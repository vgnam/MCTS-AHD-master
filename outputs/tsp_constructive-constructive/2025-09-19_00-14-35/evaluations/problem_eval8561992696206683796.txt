def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_except_node = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_except_node) / len(remaining_nodes_except_node)
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_except_node) / len(remaining_nodes_except_node)
            weighted_score = (0.4 * immediate_dist) + (0.3 * avg_remaining_dist) + (0.2 * connectivity_score) + (-0.3 * (1 - exploration_factor) * dest_dist)
            return immediate_dist * weighted_score
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
