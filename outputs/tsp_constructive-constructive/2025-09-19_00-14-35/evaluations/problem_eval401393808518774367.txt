def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_weight = 0.3  # Static weight
    temperature = 0.5 ** remaining_nodes  # Exponential decay
    candidate_scores = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        avg_dist = sum(distance_matrix[node]) / total_nodes
        inv_avg_dist = 1.0 / avg_dist if avg_dist > 0 else 0
        score = (exploration_weight * local_dist * global_dist * inv_avg_dist +
                (1 - exploration_weight) * local_dist) + temperature * (hash(node) % 3)
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
