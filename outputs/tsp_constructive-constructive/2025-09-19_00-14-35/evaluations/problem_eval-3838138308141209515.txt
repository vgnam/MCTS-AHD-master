def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if unvisited_nodes:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
            connectivity_score = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / len(unvisited_nodes)
        else:
            avg_remaining_dist = 0
            connectivity_score = 0

        score = (immediate_dist / (1 + avg_remaining_dist**0.5)) * (1 + connectivity_score**2) * (1 + (1 / (1 + dest_dist)))
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
