import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = 1 - (remaining_nodes / total_nodes)

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = node_degree / (total_nodes - 1)
            density_score = (total_nodes - remaining_nodes) / (1 + avg_remaining_dist)
            tour_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
        else:
            centrality_score = 0
            density_score = 0
            tour_gain = 0

        weight_nearest = 0.5 - 0.3 * progress
        weight_farthest = 0.2 + 0.2 * progress
        weight_centrality = 0.1 * (1 - progress)
        weight_density = 0.1 * progress
        weight_gain = 0.1 * (1 - progress)

        score = (weight_nearest * immediate_dist) + \
                (weight_farthest * (1 / (1 + immediate_dist))) + \
                (weight_centrality * centrality_score) + \
                (weight_density * density_score) + \
                (weight_gain * tour_gain)

        return score

    if progress < 0.5 or random.random() < 0.3 * (1 - progress):
        next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    else:
        next_node = max(unvisited_nodes, key=lambda node: evaluate_node(node))

    return next_node
