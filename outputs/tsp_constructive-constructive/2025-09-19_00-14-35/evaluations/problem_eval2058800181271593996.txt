def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Calculate current path length
    current_path_length = 0
    if len(unvisited_nodes) < total_nodes - 1:
        current_path_length = sum(distance_matrix[current_node][destination_node] for _ in range(total_nodes - len(unvisited_nodes)))

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Dynamic weights based on exploration and path length
        weight_local = 0.4 + 0.1 * exploration_factor
        weight_connectivity = 0.3 + 0.2 * (1 - exploration_factor)
        weight_dest = -0.2 * exploration_factor

        # Connectivity score: favor nodes that connect to many distant nodes
        connectivity_score = 0
        if remaining_nodes > 1:
            distant_nodes = [n for n in unvisited_nodes if n != node and distance_matrix[node][n] > current_dist * 1.2]
            connectivity_score = len(distant_nodes) / (remaining_nodes - 1)

        # Penalize revisiting nodes (if applicable)
        revisit_penalty = 0.1 if node in unvisited_nodes[:total_nodes//2] else 0

        # Normalize score by current path length
        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) - revisit_penalty
        score = score / (1 + current_path_length) if current_path_length > 0 else score

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
