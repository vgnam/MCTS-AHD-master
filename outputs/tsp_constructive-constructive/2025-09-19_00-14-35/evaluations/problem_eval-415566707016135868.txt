def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_decay = 0.7 ** (1 - remaining_nodes / total_nodes)
    progress_factor = 1 - exploration_decay

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_except_self = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_except_self) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist)
            node_centrality = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes) / total_nodes
        else:
            avg_remaining_dist = 0
            connectivity_score = 0
            node_centrality = 0

        weight_local = 0.4 * exploration_decay + 0.3 * progress_factor
        weight_connectivity = 0.3 + 0.2 * exploration_decay - 0.1 * progress_factor
        weight_dest = 0.2 * (1 - exploration_decay) + 0.1 * progress_factor
        weight_centrality = 0.1 * progress_factor

        deviation_penalty = 1.0 + 0.3 * (1 - exploration_decay) * (dest_dist / sum(distance_matrix[node]) if sum(distance_matrix[node]) != 0 else 0)

        score = (weight_local * immediate_dist +
                 weight_connectivity * connectivity_score +
                 weight_dest * dest_dist +
                 weight_centrality * node_centrality) * deviation_penalty
        return score

    node_scores = [evaluate_node(node) for node in unvisited_nodes]
    min_score = min(node_scores)
    max_score = max(node_scores)
    normalized_scores = [(max_score - score) / (max_score - min_score + 1e-6) for score in node_scores]

    if remaining_nodes > 1:
        selection_probabilities = [score ** 2 for score in normalized_scores]
        total_prob = sum(selection_probabilities)
        selection_probabilities = [p / total_prob for p in selection_probabilities]
        next_node = np.random.choice(unvisited_nodes, p=selection_probabilities)
    else:
        next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))

    return next_node
