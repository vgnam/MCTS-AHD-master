def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    avg_distance_to_dest = sum(distance_matrix[node][destination_node] for node in unvisited_nodes) / remaining_nodes if remaining_nodes > 0 else 0.0

    # Dynamic weight based on remaining nodes and current position's centrality
    weight_factor = 1.0 / (1.0 + 0.1 * remaining_nodes + 0.2 * avg_distance_to_dest / (distance_matrix[current_node][destination_node] + 1e-6))

    # Penalty for nodes too close to destination early
    def score(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        penalty = 1.0 if global_dist < avg_distance_to_dest * 0.5 and remaining_nodes > 2 else 1.0
        return (1 - weight_factor) * local_dist + weight_factor * global_dist * penalty

    next_node = min(unvisited_nodes, key=score)
    return next_node
