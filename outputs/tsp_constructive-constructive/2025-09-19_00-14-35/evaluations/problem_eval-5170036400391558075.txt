def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    local_weight = 1.0 - (remaining_nodes / (remaining_nodes + 1))  # Decreases as nodes are visited
    global_weight = 1.0 - local_weight

    next_node = max(unvisited_nodes, key=lambda node: (
        global_weight * (distance_matrix[node][destination_node] / distance_matrix[current_node][node]) +
        local_weight * (distance_matrix[node][destination_node] / distance_matrix[current_node][node]) -
        (1.0 if node in unvisited_nodes else 0.0)  # Penalty for revisiting
    ))
    return next_node
