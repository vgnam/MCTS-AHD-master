importance and exploration pressure that scale with remaining nodes and tour progress.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_progress = 1 - (remaining_nodes / total_nodes)

    scores = []
    for node in unvisited_nodes:
        local_distance = distance_matrix[current_node][node]
        dest_distance = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - local_distance
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = node_degree / (total_nodes - 1)
            node_importance = (connectivity_score + centrality_score) / 2
        else:
            connectivity_score = 0
            flow_disruption = 0
            centrality_score = 0
            node_importance = 0

        weight_local = 0.5 - 0.3 * exploration_progress
        weight_connectivity = 0.2 + 0.2 * exploration_progress
        weight_flow = -0.3 * flow_disruption if flow_disruption > 0 else 0
        weight_centrality = 0.3 * (1 - exploration_progress)
        weight_importance = 0.2 * node_importance

        score = (weight_local * local_distance) + (weight_connectivity * connectivity_score) + (weight_flow * flow_disruption) + (weight_centrality * centrality_score) + (weight_importance * node_importance)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
