importance scoring, combining immediate distance with global connectivity through dynamic neighborhood analysis and probabilistic selection based on relative node potential, while incorporating a memory-based disruption factor to prevent local optima.}

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            connectivity_score = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)

            neighborhood = [n for n in unvisited_nodes if n != node]
            disruption_factor = sum(abs(distance_matrix[n][node] - distance_matrix[n][current_node]) for n in neighborhood) / len(neighborhood)
        else:
            connectivity_score = 0
            potential_gain = 0
            disruption_factor = 0

        weight_local = 0.5 - 0.4 * exploration_factor
        weight_connectivity = 0.3 + 0.3 * exploration_factor
        weight_gain = 0.2 * (1 - exploration_factor)
        weight_disrupt = -0.2 * disruption_factor

        score = (weight_local * immediate_dist) + (weight_connectivity / (1 + connectivity_score)) + \
                (weight_gain * potential_gain) + (weight_disrupt * disruption_factor)
        return score

    probabilities = [math.exp(-evaluate_node(node)) for node in unvisited_nodes]
    total_prob = sum(probabilities)
    probabilities = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
