def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 / (1.0 + exploration_factor)

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_list) / (remaining_nodes - 1)
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
            penalty = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes - set([node])) / remaining_nodes
        else:
            connectivity_score = 0
            potential_gain = 0
            penalty = 0

        weight_local = 0.35 + 0.1 * exploration_factor
        weight_connectivity = 0.25 + 0.15 * exploration_factor
        weight_dest = -0.2 * (1 - exploration_factor)
        weight_gain = 0.2 * (1 - exploration_factor)

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_dest * dest_dist) + (weight_gain * potential_gain) - (0.1 * penalty)

        return score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    probs = [math.exp(-score / temperature) for score in scores]
    prob_sum = sum(probs)
    normalized_probs = [p / prob_sum for p in probs]

    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
