def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def calculate_centrality(node):
        centrality = 0
        for u in unvisited_nodes:
            for v in unvisited_nodes:
                if u != v and u != node and v != node:
                    shortest_path_u_v = distance_matrix[u][v]
                    shortest_path_u_node_v = distance_matrix[u][node] + distance_matrix[node][v]
                    if shortest_path_u_node_v > 0:
                        centrality += (shortest_path_u_node_v - shortest_path_u_v) / shortest_path_u_node_v
        return centrality

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_list) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes_list) - immediate_dist
            centrality_score = calculate_centrality(node)
        else:
            avg_remaining_dist = 0
            connectivity_score = 0
            flow_disruption = 0
            centrality_score = 0

        exploration_weight = sigmoid(5 * (exploration_factor - 0.5))
        weight_local = 0.4 * exploration_weight
        weight_connectivity = 0.3 * exploration_weight
        weight_dest = -0.3 * (1 - exploration_weight) if exploration_factor < 0.3 else 0
        weight_flow = -0.1 * flow_disruption if flow_disruption > 0 else 0
        weight_centrality = 0.2 * exploration_weight

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_flow * flow_disruption) + (weight_centrality * centrality_score)
        return score * avg_remaining_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
