import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            # Dynamic weight using sigmoid function
            weight = 1 / (1 + math.exp(-0.1 * (len(unvisited_nodes) - len(distance_matrix) / 2)))

            # Add small randomness for exploration
            random_factor = random.uniform(0.9, 1.1)

            return immediate_dist + weight * avg_remaining_dist * random_factor
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
