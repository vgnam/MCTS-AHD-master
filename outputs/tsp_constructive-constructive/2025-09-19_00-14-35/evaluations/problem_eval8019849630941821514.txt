def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if unvisited_nodes:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes) if remaining_nodes else 0
            connectivity_score = sum(1 for n in remaining_nodes if distance_matrix[node][n] > 0) / len(remaining_nodes) if remaining_nodes else 0
            path_length_factor = sum(distance_matrix[current_node][n] for n in unvisited_nodes) / (len(unvisited_nodes) + 1)
        else:
            avg_remaining_dist = 0
            connectivity_score = 0
            path_length_factor = 0

        alpha = 0.4 + 0.6 * (1 - len(unvisited_nodes) / len(distance_matrix))
        beta = 0.3 + 0.7 * (len(unvisited_nodes) / len(distance_matrix))
        gamma = 0.2 + 0.8 * (1 - (dest_dist / (sum(distance_matrix[current_node]) / len(distance_matrix))))

        score = (alpha * (immediate_dist / (1 + avg_remaining_dist))) + \
                (beta * connectivity_score) + \
                (gamma * (1 / (1 + dest_dist))) - \
                (0.1 * path_length_factor)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
