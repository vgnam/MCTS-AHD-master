import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 1.0 - (1.0 / (1.0 + len(unvisited_nodes)))  # Dynamic temperature
    exploration_bias = 0.1 * random.random()  # Fixed random exploration

    candidate_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Dynamic weight adjustment
        weight_current = 0.3 + 0.5 * temperature  # Current node priority increases with temperature
        weight_dest = 1 - weight_current

        # Penalty for revisiting (simulated via fixed randomness)
        revisit_penalty = 0.2 * random.random() * temperature

        score = (current_dist * weight_current) + (dest_dist * weight_dest) + exploration_bias + revisit_penalty
        candidate_scores.append((node, score))

    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
