def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Stage 1: Dynamic neighborhood with probabilistic filtering
    neighborhood_size = max(1, int(3 + 2 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Stage 2: Reinforcement-inspired evaluation
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Long-term connectivity potential
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            mean_dist = sum(remaining_dists) / (remaining_nodes - 1)
            std_dev = (sum((d - mean_dist) ** 2 for d in remaining_dists) / (remaining_nodes - 1)) ** 0.5
            connectivity_score = std_dev / (mean_dist + 1e-6)  # Normalized connectivity
        else:
            connectivity_score = 0

        # Adaptive weights with non-linear exploration-exploitation tradeoff
        weight_dist = 0.5 * (1 - exploration_factor ** 3)
        weight_connectivity = 0.3 * (exploration_factor ** 2)
        weight_dest = 0.2 + 0.5 * (1 - exploration_factor)

        # Probabilistic selection bias
        score = (weight_dist * current_dist +
                weight_connectivity * connectivity_score +
                weight_dest * dest_dist)

        # Add stochastic element based on exploration
        random_bias = np.random.normal(0, 0.1 * exploration_factor)
        return score + random_bias

    # Probabilistic selection among candidates
    scores = [evaluate_node(node) for node in candidates]
    probabilities = np.exp(-np.array(scores))  # Convert scores to probabilities
    probabilities /= probabilities.sum()  # Normalize
    next_node = np.random.choice(candidates, p=probabilities)

    return next_node
