def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if immediate_dist == 0:
            return float('inf')

        dest_dist = distance_matrix[node][destination_node]
        if unvisited_nodes:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            if not remaining_nodes:
                avg_remaining_dist = 0
            else:
                avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)

            connectivity_score = sum(1 for n in remaining_nodes if distance_matrix[node][n] > 0) / len(remaining_nodes)
            dynamic_weight = 1 + (len(unvisited_nodes) / (len(distance_matrix) + 1))
        else:
            avg_remaining_dist = 0
            connectivity_score = 0
            dynamic_weight = 1

        score = (immediate_dist * (1 + (1 / (1 + dest_dist)))) / (1 + avg_remaining_dist)
        score *= (connectivity_score ** dynamic_weight)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
