def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def sigmoid(x):
        return 1 / (1 + math.exp(-x))

    exploration_phase = sigmoid((exploration_factor - 0.5) * 10)
    exploration_weight = exploration_phase * 0.8 + 0.2

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            min_remaining_dist = min(remaining_dists)
            avg_remaining_dist = sum(remaining_dists) / (remaining_nodes - 1)
            connectivity_score = 0.6 * (1.0 / (1.0 + avg_remaining_dist)) + 0.4 * (1.0 / (1.0 + min_remaining_dist))
        else:
            connectivity_score = 0

        path_potential = (immediate_dist + 0.7 * dest_dist) / (1 + 0.3 * immediate_dist)
        exploration_bonus = math.exp(-0.5 * immediate_dist) * exploration_weight

        weight_local = 0.6 - 0.4 * exploration_phase
        weight_connectivity = 0.4 + 0.3 * exploration_phase
        weight_potential = 0.2 + 0.5 * (1 - exploration_phase)
        weight_bonus = 0.1 * exploration_weight

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_potential * path_potential) - (weight_bonus * exploration_bonus)
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
