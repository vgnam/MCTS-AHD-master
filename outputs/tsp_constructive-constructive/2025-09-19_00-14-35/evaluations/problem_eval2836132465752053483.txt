import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = max(0.1, math.exp(-0.5 * (1 - exploration_factor)))

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = 1.0 / (1.0 + avg_remaining_dist * exploration_factor)
            potential_gain = (distance_matrix[current_node][destination_node] - immediate_dist - dest_dist) / (1 + immediate_dist)
            node_degree = sum(1 for n in range(total_nodes) if distance_matrix[node][n] > 0 and n != node)
            centrality_score = node_degree / (total_nodes - 1)
            novelty_score = math.log(1 + node_degree) / math.log(total_nodes)
            multiplicative_factor = immediate_dist * avg_remaining_dist * (1 + novelty_score)
        else:
            connectivity_score = 0
            potential_gain = 0
            centrality_score = 0
            novelty_score = 0
            multiplicative_factor = immediate_dist

        weight_local = 0.3 + 0.3 * exploration_factor
        weight_connectivity = 0.2 + 0.3 * exploration_factor
        weight_dest = -0.1 * (1 - exploration_factor)
        weight_gain = 0.2 * (1 - exploration_factor)
        weight_centrality = 0.1 * (1 - exploration_factor)
        weight_novelty = 0.1 * (1 - exploration_factor)
        weight_multiplicative = 0.1 * (1 - exploration_factor)

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + \
                (weight_dest * dest_dist) + (weight_gain * potential_gain) + \
                (weight_centrality * centrality_score) + (weight_novelty * novelty_score) + \
                (weight_multiplicative * multiplicative_factor)

        return score

    scores = [evaluate_node(node) for node in unvisited_nodes]
    probabilities = [math.exp(-score / temperature) for score in scores]
    total_prob = sum(probabilities)
    normalized_probs = [p / total_prob for p in probabilities]

    next_node = random.choices(unvisited_nodes, weights=normalized_probs, k=1)[0]
    return next_node
