def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            global_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            local_penalty = current_dist if current_dist > 2 * (sum(distance_matrix[current_node][n] for n in unvisited_nodes) / len(unvisited_nodes)) else 0
        else:
            global_connectivity = 0
            local_penalty = 0

        weight_global = 0.4
        weight_local = 0.3
        weight_penalty = -0.3 * local_penalty if local_penalty > 0 else 0

        score = (weight_global * global_connectivity) + (weight_local * current_dist) + weight_penalty

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
