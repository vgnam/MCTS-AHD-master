def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            max_remaining_dist = max(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            global_connectivity = 1.0 / (1.0 + max_remaining_dist)
        else:
            global_connectivity = 0

        weight_local = 0.2
        weight_connectivity = 0.6
        weight_dest = -0.3
        return (weight_local * current_dist) + (weight_connectivity * global_connectivity) + (weight_dest * dest_dist)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
