def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    next_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])
    remaining_nodes = len(unvisited_nodes)
    total_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes)

    dynamic_threshold = 0.8 * (1 - (remaining_nodes / (remaining_nodes + 1))) * (total_distance / remaining_nodes)

    if destination_node in unvisited_nodes:
        dest_distance = distance_matrix[current_node][destination_node]
        if dest_distance < dynamic_threshold or dest_distance < 0.6 * distance_matrix[current_node][next_node]:
            return destination_node

    return next_node
