def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes) - immediate_dist
            weight_flow = -0.3 * flow_disruption if flow_disruption > 0 else 0
            score = (immediate_dist * 0.5 + avg_remaining_dist * 0.3) + weight_flow
            return score
        else:
            return immediate_dist

    scores = [evaluate_node(node) for node in unvisited_nodes]
    if min(scores) == max(scores):
        return unvisited_nodes[0]
    normalized_scores = [(max(scores) - s) / (max(scores) - min(scores)) for s in scores]
    probabilities = [s / sum(normalized_scores) for s in normalized_scores]
    next_node = random.choices(unvisited_nodes, weights=probabilities, k=1)[0]
    return next_node
