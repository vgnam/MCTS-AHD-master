def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if unvisited_nodes:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            sum_remaining_dist = sum(remaining_dists) if remaining_dists else 1
            centrality = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / len(unvisited_nodes)
            max_possible_dist = max(distance_matrix[node]) if distance_matrix[node] else 1
            normalized_centrality = centrality * (1 - (dest_dist / max_possible_dist))
        else:
            sum_remaining_dist = 1
            normalized_centrality = 0

        dist_penalty = 1 + (dest_dist / (sum(remaining_dists) + 1)) if remaining_dists else 1
        score = (1 / (1 + immediate_dist)) * normalized_centrality * (1 / dist_penalty)
        return score

    next_node = max(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
