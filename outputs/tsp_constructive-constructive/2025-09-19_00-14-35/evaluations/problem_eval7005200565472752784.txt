def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    progress_factor = 1 - exploration_factor

    def calculate_betweenness_centrality(node):
        centrality = 0
        for u in unvisited_nodes:
            if u == node:
                continue
            for v in unvisited_nodes:
                if v == node or u == v:
                    continue
                shortest_path_u_v = distance_matrix[u][v]
                shortest_path_u_node_v = distance_matrix[u][node] + distance_matrix[node][v]
                if shortest_path_u_node_v > shortest_path_u_v:
                    centrality += 1
        return centrality / (len(unvisited_nodes) ** 2 - len(unvisited_nodes)) if len(unvisited_nodes) > 1 else 0

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        centrality = calculate_betweenness_centrality(node)

        novelty_factor = 1 / (1 + sum(1 for n in unvisited_nodes if n != node and distance_matrix[current_node][n] < distance_matrix[current_node][node]))
        weight_local = 0.4 - 0.2 * exploration_factor + 0.15 * progress_factor
        weight_centrality = 0.3 + 0.1 * exploration_factor - 0.1 * progress_factor
        weight_dest = -0.2 * (1 - exploration_factor) + 0.15 * progress_factor
        weight_novelty = 0.2 * (1 - exploration_factor)

        score = (weight_local * immediate_dist +
                weight_centrality * centrality +
                weight_dest * dest_dist +
                weight_novelty * novelty_factor) * (1 + 0.3 * (1 - progress_factor))
        return score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
