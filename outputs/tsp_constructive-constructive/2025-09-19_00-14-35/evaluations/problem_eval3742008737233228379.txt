def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    if len(unvisited_nodes) == 1:
        return next(iter(unvisited_nodes))

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
            proximity_diversity = avg_remaining_dist * (1.0 - (len(unvisited_nodes) / sum(len(unvisited_nodes) for _ in unvisited_nodes)))
        else:
            avg_remaining_dist = 0
            proximity_diversity = 0
        dest_dist = distance_matrix[node][destination_node]
        path_momentum = distance_matrix[current_node][node] + distance_matrix[node][destination_node] - distance_matrix[current_node][destination_node]
        weight = 1.0 / (len(unvisited_nodes) + 1)
        return 0.5 * current_dist + 0.3 * weight * avg_remaining_dist + 0.2 * proximity_diversity - 0.1 * dest_dist + 0.1 * path_momentum

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
