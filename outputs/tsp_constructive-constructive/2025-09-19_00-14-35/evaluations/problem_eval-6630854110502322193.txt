def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    diversity_factor = 1.0 - exploration_factor

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            direct_connectivity = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            future_connectivity = sum(min(distance_matrix[n][m] for m in unvisited_nodes if m != n) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            connectivity_score = 0.7 * (1.0 / (1.0 + direct_connectivity)) + 0.3 * (1.0 / (1.0 + future_connectivity))
        else:
            connectivity_score = 0

        path_diversity = 1.0 / (1.0 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node and distance_matrix[node][n] < current_dist))

        weight_local = 0.4
        weight_connectivity = 0.3 * exploration_factor
        weight_dest = -0.3 * diversity_factor
        weight_diversity = 0.3 * diversity_factor

        return (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_diversity * path_diversity)

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
