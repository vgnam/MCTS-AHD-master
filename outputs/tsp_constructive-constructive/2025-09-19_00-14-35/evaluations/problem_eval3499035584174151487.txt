def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes) if len(unvisited_nodes) > 1 else 0
        path_continuity_penalty = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        nearest_neighbor_dist = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0

        weight_avg = 0.5 if len(unvisited_nodes) > 2 else 0.7
        weight_penalty = 0.3 if len(unvisited_nodes) > 2 else 0.2

        return current_dist + weight_avg * avg_remaining_dist + weight_penalty * path_continuity_penalty + 0.2 * nearest_neighbor_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
