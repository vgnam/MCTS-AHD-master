def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = max(0.1, (remaining_nodes / total_nodes) ** 1.5)

    # Memory component to track historical performance
    memory = {}
    for node in unvisited_nodes:
        memory[node] = {'success': 0, 'attempts': 0}

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_nodes_list = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes_list) / len(remaining_nodes_list)
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_nodes_list) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in remaining_nodes_list) - immediate_dist
            novelty_bonus = 1.0 / (1.0 + sum(1 for n in unvisited_nodes if distance_matrix[node][n] < immediate_dist))
        else:
            avg_remaining_dist = 0
            connectivity_score = 0
            flow_disruption = 0
            novelty_bonus = 0

        # Adaptive weights based on exploration and memory
        success_rate = memory[node]['success'] / (memory[node]['attempts'] + 1) if memory[node]['attempts'] > 0 else 0.5
        weight_local = 0.3 * exploration_factor * (1 - success_rate)
        weight_connectivity = 0.2 * exploration_factor * (1 + success_rate)
        weight_dest = -0.2 * (1 - exploration_factor) if exploration_factor < 0.5 else -0.1
        weight_flow = -0.2 * (flow_disruption / (immediate_dist + 1e-6))
        weight_novelty = 0.3 * novelty_bonus * (1 - success_rate)

        score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_flow * flow_disruption) + (weight_novelty * novelty_bonus)
        return score * (1 + avg_remaining_dist)

    # Select node with highest score (inverted for minimization)
    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))

    # Update memory for the selected node
    memory[next_node]['attempts'] += 1
    memory[next_node]['success'] += 1  # Assuming selection is successful

    return next_node
