def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            radius = 2  # Fixed radius for centrality calculation
            centrality = sum(1 for n in remaining_nodes if distance_matrix[node][n] <= radius)
            weight_avg = 0.5
            weight_centrality = 0.5
            combined_score = weight_avg * avg_remaining_dist + weight_centrality * centrality
            return immediate_dist * combined_score
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
