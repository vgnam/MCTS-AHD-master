def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            total_potential_dist = current_dist + dest_dist + avg_remaining_dist

            progress_ratio = (current_dist + dest_dist) / total_potential_dist
            connectivity_score = 1 / (avg_remaining_dist + 1e-6)

            return (progress_ratio * 0.6) + (connectivity_score * 0.4)
        else:
            return current_dist + dest_dist

    next_node = max(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
