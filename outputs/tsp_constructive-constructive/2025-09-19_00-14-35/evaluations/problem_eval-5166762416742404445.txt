def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if unvisited_nodes:
            local_connectivity = sum(1 for n in unvisited_nodes if distance_matrix[node][n] > 0) / len(unvisited_nodes)
            global_connectivity = sum(1 for n in unvisited_nodes if any(distance_matrix[m][n] > 0 for m in unvisited_nodes)) / len(unvisited_nodes)
            avg_local_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / len(unvisited_nodes)
            avg_global_dist = sum(distance_matrix[m][n] for m in unvisited_nodes for n in unvisited_nodes if m != n) / (len(unvisited_nodes) * (len(unvisited_nodes) - 1))
        else:
            local_connectivity = 0
            global_connectivity = 0
            avg_local_dist = 0
            avg_global_dist = 0

        proximity_weight = 1 / (1 + immediate_dist)
        connectivity_weight = (local_connectivity + global_connectivity) / 2
        destination_weight = 1 / (1 + dest_dist)
        distance_ratio = immediate_dist / (1 + avg_local_dist) if avg_local_dist > 0 else immediate_dist

        score = (proximity_weight * connectivity_weight * destination_weight) / (1 + distance_ratio)
        return score

    next_node = max(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
