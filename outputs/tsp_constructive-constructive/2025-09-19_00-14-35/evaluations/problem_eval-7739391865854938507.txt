import math
import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = math.exp(-0.5 * (1 - exploration_factor))

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            novelty_score = 1.0 / (1.0 + sum(1 for n in unvisited_nodes if n in visited_history.get(node, set())))
        else:
            connectivity_score = 0
            flow_disruption = 0
            novelty_score = 0

        weight_local = 0.7 - 0.3 * exploration_factor
        weight_connectivity = 0.15 + 0.1 * exploration_factor
        weight_novelty = 0.1 * novelty_score
        weight_flow = -0.05 * flow_disruption if flow_disruption > 0 else 0

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_novelty * novelty_score) + (weight_flow * flow_disruption)

        scores.append((node, score))

    if random.random() < temperature:
        next_node = random.choice(unvisited_nodes)
    else:
        next_node = min(scores, key=lambda x: x[1])[0]

    if 'visited_history' not in globals():
        global visited_history
        visited_history = {}
    if next_node not in visited_history:
        visited_history[next_node] = set()
    visited_history[next_node].add(current_node)

    return next_node
