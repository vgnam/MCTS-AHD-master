def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    current_path_length = sum(distance_matrix[current_node][n] for n in unvisited_nodes if n != current_node)
    avg_path_length = current_path_length / (remaining_nodes - 1) if remaining_nodes > 1 else 0

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            distances_to_all = [distance_matrix[node][n] for n in range(total_nodes) if n != node]
            avg_dist_to_all = sum(distances_to_all) / (total_nodes - 1)
            centrality_score = 1.0 / (1.0 + avg_dist_to_all)

            distances_to_unvisited = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distances_to_unvisited) / (remaining_nodes - 1)
            path_potential = (1.0 / (1.0 + current_dist)) * (1.0 / (1.0 + avg_remaining_dist))
        else:
            centrality_score = 0
            path_potential = 0

        weight_local = 0.3 + 0.2 * (1 - exploration_factor) - 0.05 * (avg_path_length / total_nodes)
        weight_centrality = 0.2 + 0.3 * exploration_factor + 0.1 * (avg_path_length / total_nodes)
        weight_dest = -0.1 + 0.2 * (1 - exploration_factor)

        score = (weight_local * current_dist) + (weight_centrality * centrality_score) + (weight_dest * dest_dist) + (0.3 * path_potential)
        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
