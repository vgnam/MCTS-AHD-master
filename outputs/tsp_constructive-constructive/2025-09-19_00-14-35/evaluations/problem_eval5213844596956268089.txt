def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    progress = (total_nodes - remaining_nodes) / total_nodes
    exploration_weight = 1 / (1 + math.exp(5 * (progress - 0.5)))
    temperature = 0.3 * (1 - progress)**2
    candidate_scores = []
    for node in unvisited_nodes:
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        avg_dist = sum(distance_matrix[node]) / total_nodes
        centrality = sum(distance_matrix[node]) / (total_nodes - 1)
        novelty = 1 / (1 + centrality)
        score = (exploration_weight * (local_dist / global_dist) +
                (1 - exploration_weight) * (local_dist / avg_dist) +
                0.5 * novelty) + temperature * random.uniform(-1, 1)
        candidate_scores.append((node, score))
    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
