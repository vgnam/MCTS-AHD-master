def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        nearest_neighbor_dist = min(distance_matrix[node][n] for n in unvisited_nodes if n != node) if len(unvisited_nodes) > 1 else 0
        progress_ratio = distance_matrix[node][destination_node] / (current_dist + 1e-10)
        remaining_nodes_factor = 1 / (len(unvisited_nodes) + 1)
        return current_dist + nearest_neighbor_dist - (progress_ratio * remaining_nodes_factor)
    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
