def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    # Stage 1: Filter candidates based on ratio of remaining distance to current distance
    candidates = sorted(unvisited_nodes, key=lambda node: (distance_matrix[node][destination_node] / distance_matrix[current_node][node]) - 0.3 * distance_matrix[node][destination_node])
    candidate_size = max(3, min(5, len(candidates)))
    top_candidates = candidates[:candidate_size]

    # Stage 2: Evaluate candidates using weighted criteria
    def evaluate_node(node):
        ratio = distance_matrix[node][destination_node] / distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score (average distance to remaining nodes)
        if len(unvisited_nodes) > 1:
            avg_remaining_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (len(unvisited_nodes) - 1)
        else:
            avg_remaining_dist = 0

        # Fixed weights
        weight_ratio = 0.6
        weight_connectivity = 0.3
        weight_penalty = 0.1

        return (weight_ratio * ratio +
                weight_connectivity * avg_remaining_dist -
                weight_penalty * dest_dist)

    next_node = min(top_candidates, key=lambda node: evaluate_node(node))
    return next_node
