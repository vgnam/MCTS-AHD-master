def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    alpha = 0.6 + (0.2 * (remaining_nodes / len(distance_matrix)))  # Dynamic weight for immediate distance
    beta = 0.4 - (0.1 * (remaining_nodes / len(distance_matrix)))   # Dynamic weight for path length
    gamma = 0.1  # Penalty for revisits
    delta = 0.2  # Attraction factor for less-visited nodes

    candidate_scores = []
    for node in unvisited_nodes:
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        attraction = (1 / (1 + immediate_dist))  # Higher for closer nodes
        score = (alpha * immediate_dist) + (beta * dest_dist) - (gamma * (1 if node in unvisited_nodes else 0)) + (delta * attraction)
        candidate_scores.append((node, score))

    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
