def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Dynamic neighborhood selection with probabilistic scaling
    base_neighborhood = max(1, int(2 + 3 * (1 - exploration_factor)))
    neighborhood_size = min(base_neighborhood + int(exploration_factor * 3), len(unvisited_nodes))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    # Adaptive weights with temperature decay
    temperature = 1.0 - (1.0 - exploration_factor) ** 2
    alpha = 0.6 + 0.2 * (1 - temperature)  # Immediate distance weight
    beta = 0.4 - 0.2 * (1 - temperature)    # Destination bias weight
    gamma = 0.2 * (1 + temperature)         # Revisit penalty scaling

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        penalty = gamma * (1 if node in unvisited_nodes else 0)
        return (alpha * immediate_dist) + (beta * dest_dist) - penalty

    # Probabilistic selection based on Boltzmann distribution
    scores = [evaluate_node(node) for node in candidates]
    min_score = min(scores)
    adjusted_scores = [math.exp((min_score - score) / temperature) for score in scores]
    total = sum(adjusted_scores)
    probabilities = [score / total for score in adjusted_scores]

    next_node = random.choices(candidates, weights=probabilities, k=1)[0]
    return next_node
