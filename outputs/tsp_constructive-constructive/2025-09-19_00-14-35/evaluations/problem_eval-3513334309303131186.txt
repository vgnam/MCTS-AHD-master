def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    node_stats = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            path_coherence = (current_dist + dest_dist) / sum(distance_matrix[node][n] for n in unvisited_nodes if n != node)
            centrality = sum(1.0 / distance_matrix[node][n] for n in range(total_nodes)) / total_nodes
        else:
            connectivity_score = 0
            flow_disruption = 0
            path_coherence = 0
            centrality = 0

        weight_local = 0.6 * (1 - exploration_factor)
        weight_connectivity = 0.2 + 0.2 * exploration_factor
        weight_flow = -0.2 * flow_disruption if flow_disruption > 0 else 0
        weight_coherence = 0.1 * path_coherence
        weight_centrality = 0.1 * centrality

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_flow * flow_disruption) + (weight_coherence * path_coherence) + (weight_centrality * centrality)

        node_stats.append((node, score, current_dist))

    if remaining_nodes > 2:
        scores = [s[1] for s in node_stats]
        min_score, max_score = min(scores), max(scores)
        normalized_scores = [(min_score - s + 1e-6) / (max_score - min_score + 1e-6) for s in scores]
        probabilities = [s / sum(normalized_scores) for s in normalized_scores]
        next_node = random.choices([s[0] for s in node_stats], weights=probabilities, k=1)[0]
    else:
        next_node = min(node_stats, key=lambda x: x[1])[0]

    return next_node
