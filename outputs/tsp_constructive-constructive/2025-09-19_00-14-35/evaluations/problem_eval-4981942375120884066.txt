def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            distances_to_unvisited = [distance_matrix[node][n] for n in remaining_nodes]
            std_dev = (sum((d - avg_remaining_dist) ** 2 for d in distances_to_unvisited) / len(remaining_nodes)) ** 0.5

            # Cluster coherence: balance between proximity and connectivity
            cluster_coherence = (1.0 / (1.0 + avg_remaining_dist)) * (1.0 + (std_dev / (1.0 + avg_remaining_dist)))

            # Dynamic weights based on remaining nodes density
            density = len(remaining_nodes) / len(distance_matrix)
            weight_avg = 0.5 + 0.3 * (1 - density)
            weight_cluster = 0.5 - 0.3 * (1 - density)

            # Temperature-based exploration factor
            temperature = 0.5 * (1.0 - (len(remaining_nodes) / len(distance_matrix)))

            combined_score = (weight_avg * avg_remaining_dist + weight_cluster * cluster_coherence) * (1.0 + temperature)
            return immediate_dist * combined_score
        else:
            return immediate_dist

    # Probabilistic selection based on softmax of scores
    scores = [1.0 / (1.0 + evaluate_node(node)) for node in unvisited_nodes]
    probabilities = [s / sum(scores) for s in scores]
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
