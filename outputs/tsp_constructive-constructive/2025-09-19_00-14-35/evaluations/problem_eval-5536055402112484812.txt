def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    centrality = []
    for node in unvisited_nodes:
        centrality.append(sum(1.0 / distance_matrix[node][n] for n in range(total_nodes) if n != node) / (total_nodes - 1))

    avg_centrality = sum(centrality) / remaining_nodes if remaining_nodes > 0 else 0

    scores = []
    for i, node in enumerate(unvisited_nodes):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            smoothness = (distance_matrix[current_node][node] + distance_matrix[node][destination_node]) / (1 + centrality[i])
        else:
            connectivity_score = 0
            smoothness = current_dist

        weight_local = 0.7 - 0.3 * exploration_factor
        weight_connectivity = 0.2 + 0.1 * exploration_factor
        weight_smoothness = 0.1 * (1 - exploration_factor)

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_smoothness * smoothness)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
