def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    # Calculate node centrality (inverse of average distance to other nodes)
    centrality = {}
    for node in unvisited_nodes:
        avg_dist = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        centrality[node] = 1.0 / (1.0 + avg_dist) if remaining_nodes > 1 else 0

    scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            # Connectivity score based on centrality and remaining distances
            connectivity_score = sum(centrality[n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            flow_disruption = max(distance_matrix[node][n] for n in unvisited_nodes if n != node) - current_dist
            # Diversity factor: penalize nodes in similar neighborhoods
            diversity_factor = 1.0 / (1.0 + sum(distance_matrix[node][n] for n in unvisited_nodes if n != node))
        else:
            connectivity_score = 0
            flow_disruption = 0
            diversity_factor = 0

        weight_local = 0.6 - 0.1 * exploration_factor
        weight_connectivity = 0.2 + 0.1 * exploration_factor
        weight_flow = -0.2 * flow_disruption if flow_disruption > 0 else 0
        weight_diversity = -0.1 * diversity_factor

        score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_flow * flow_disruption) + (weight_diversity * diversity_factor)

        scores.append((node, score))

    next_node = min(scores, key=lambda x: x[1])[0]
    return next_node
