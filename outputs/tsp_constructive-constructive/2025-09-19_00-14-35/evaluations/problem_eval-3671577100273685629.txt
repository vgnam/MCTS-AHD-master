def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        if len(unvisited_nodes) > 1:
            remaining_nodes = [n for n in unvisited_nodes if n != node]
            avg_remaining_dist = sum(distance_matrix[node][n] for n in remaining_nodes) / len(remaining_nodes)
            min_remaining_dist = min(distance_matrix[node][n] for n in remaining_nodes)
            max_remaining_dist = max(distance_matrix[node][n] for n in remaining_nodes)
            cluster_cohesion = min_remaining_dist / max_remaining_dist if max_remaining_dist != 0 else 1.0
            dynamic_weight = 0.5 + 0.5 * (1.0 - (len(remaining_nodes) / len(unvisited_nodes)))
            combined_score = (dynamic_weight * avg_remaining_dist) + ((1 - dynamic_weight) * cluster_cohesion)
            return immediate_dist * combined_score
        else:
            return immediate_dist

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
