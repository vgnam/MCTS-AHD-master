def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    sigmoid_weight = 1.0 / (1.0 + math.exp(-0.2 * (remaining_nodes - 5)))

    def score(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        avg_dist_to_remaining = sum(distance_matrix[node][n] for n in unvisited_nodes) / remaining_nodes
        return (1 - sigmoid_weight) * local_dist + sigmoid_weight * (local_dist / global_dist) + 0.2 * avg_dist_to_remaining

    next_node = min(unvisited_nodes, key=score)
    return next_node
