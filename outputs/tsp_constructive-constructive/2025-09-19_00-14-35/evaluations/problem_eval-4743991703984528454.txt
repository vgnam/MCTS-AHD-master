def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    alpha = 0.5 * (len(unvisited_nodes) / len(distance_matrix))  # Dynamic weight factor
    beta = 1.0 - alpha  # Complementary weight

    def heuristic(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]
        avg_dist = sum(distance_matrix[node]) / len(distance_matrix[node])  # Average distance to other nodes
        penalty = 0.1 * avg_dist  # Penalty for high average distances
        return alpha * current_dist + beta * dest_dist + penalty

    next_node = min(unvisited_nodes, key=heuristic)
    return next_node
