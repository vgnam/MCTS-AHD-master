def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node
    remaining_nodes = len(unvisited_nodes)
    phase_factor = (remaining_nodes / (remaining_nodes + 1)) ** 2
    local_weight = max(0.2, 0.8 * phase_factor)
    global_weight = 0.5 * (1 - phase_factor)
    balance_weight = 0.3 * phase_factor
    avg_distance = sum(distance_matrix[current_node][node] for node in unvisited_nodes) / remaining_nodes
    next_node = min(unvisited_nodes, key=lambda node:
        local_weight * distance_matrix[current_node][node] +
        global_weight * distance_matrix[node][destination_node] +
        balance_weight * abs(distance_matrix[current_node][node] - avg_distance))
    return next_node
