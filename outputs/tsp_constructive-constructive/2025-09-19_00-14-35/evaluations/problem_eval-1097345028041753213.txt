def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    def evaluate_node(node):
        immediate_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if len(unvisited_nodes) == 1:
            return immediate_dist

        remaining_unvisited = [n for n in unvisited_nodes if n != node]
        if not remaining_unvisited:
            return immediate_dist

        lookahead_depth = min(3, len(remaining_unvisited))
        lookahead_score = 0

        for depth in range(1, lookahead_depth + 1):
            if depth > len(remaining_unvisited):
                break
            next_nodes = remaining_unvisited[:depth]
            lookahead_dist = sum(distance_matrix[n1][n2] for n1, n2 in zip([node] + next_nodes[:-1], next_nodes))
            lookahead_score += lookahead_dist * (0.5 ** depth)

        connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in remaining_unvisited) / len(remaining_unvisited)
        flow_disruption = max(distance_matrix[node][n] for n in remaining_unvisited) - immediate_dist if len(remaining_unvisited) > 1 else 0

        weight_local = 0.4
        weight_connectivity = 0.3
        weight_dest = -0.3
        weight_flow = -0.1 * flow_disruption if flow_disruption > 0 else 0
        penalty_factor = 1.0 + dest_dist / (sum(distance_matrix[current_node][n] for n in unvisited_nodes) + 1e-6)

        total_score = (weight_local * immediate_dist) + (weight_connectivity * connectivity_score) + (weight_dest * dest_dist) + (weight_flow * flow_disruption) * penalty_factor
        total_score += (lookahead_score / lookahead_depth)

        return total_score

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
