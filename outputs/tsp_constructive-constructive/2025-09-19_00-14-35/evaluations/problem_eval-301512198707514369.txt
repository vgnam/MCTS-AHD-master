def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes
    temperature = 1.0 / (1.0 + remaining_nodes)

    candidate_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        # Connectivity score (variance of distances to remaining nodes)
        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            mean_dist = sum(remaining_dists) / (remaining_nodes - 1)
            variance = sum((d - mean_dist) ** 2 for d in remaining_dists) / (remaining_nodes - 1)
        else:
            variance = 0

        # Dynamic weight adjustment
        weight_current = 0.4 + 0.3 * (1 - temperature)
        weight_dest = 0.3 + 0.4 * (1 - temperature)
        weight_connectivity = 0.3 * temperature

        # Exploration penalty
        exploration_penalty = (hash(node) % 5) * temperature

        score = (current_dist * weight_current +
                dest_dist * weight_dest +
                variance * weight_connectivity +
                exploration_penalty)
        candidate_scores.append((node, score))

    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
