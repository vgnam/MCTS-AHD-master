def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    neighborhood_size = max(1, int(2 + 3 * (1 - exploration_factor)))
    candidates = sorted(unvisited_nodes, key=lambda node: distance_matrix[current_node][node])[:neighborhood_size]

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            remaining_dists = [distance_matrix[node][n] for n in unvisited_nodes if n != node]
            avg_dist = sum(remaining_dists) / (remaining_nodes - 1)
            connectivity_score = 1.0 / (1.0 + avg_dist)
        else:
            connectivity_score = 0

        weight_local = 0.6 - 0.2 * exploration_factor
        weight_connectivity = 0.4 + 0.2 * exploration_factor
        weight_penalty = 0.2 + 0.2 * (1 - exploration_factor)

        return (weight_local * current_dist +
                weight_connectivity * connectivity_score -
                weight_penalty * (dest_dist ** (1 + 0.3 * exploration_factor)))

    next_node = min(candidates, key=lambda node: evaluate_node(node))
    return next_node
