def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    total_nodes = len(distance_matrix)
    remaining_nodes = len(unvisited_nodes)
    weight_factor = 1.0 / (1.0 + 0.2 * (total_nodes - remaining_nodes)) if remaining_nodes > 0 else 0.0

    visit_frequencies = {node: 1.0 / (1.0 + sum(distance_matrix[node])) for node in unvisited_nodes}

    def score(node):
        local_dist = distance_matrix[current_node][node]
        global_dist = distance_matrix[node][destination_node]
        novelty = 1.0 / (1.0 + visit_frequencies.get(node, 1.0))
        return (1 - weight_factor) * local_dist + weight_factor * (local_dist / global_dist) * novelty

    next_node = min(unvisited_nodes, key=score)
    return next_node
