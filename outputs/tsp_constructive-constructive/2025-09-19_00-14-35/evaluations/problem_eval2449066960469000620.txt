import random

def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    temperature = 0.5  # Fixed temperature
    exploration_bias = random.uniform(0, 0.3)  # Static random exploration

    candidate_scores = []
    for node in unvisited_nodes:
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        weight_current = 0.6  # Fixed exploitation weight
        weight_dest = 0.4

        revisit_penalty = 0.2 * len(unvisited_nodes)  # Linear revisit penalty

        score = (current_dist * weight_current) + (dest_dist * weight_dest) + exploration_bias + revisit_penalty
        candidate_scores.append((node, score))

    next_node = min(candidate_scores, key=lambda x: x[1])[0]
    return next_node
