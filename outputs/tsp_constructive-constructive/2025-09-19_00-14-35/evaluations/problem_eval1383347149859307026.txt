def select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):
    if not unvisited_nodes:
        return destination_node

    remaining_nodes = len(unvisited_nodes)
    total_nodes = len(distance_matrix)
    exploration_factor = remaining_nodes / total_nodes

    def evaluate_node(node):
        current_dist = distance_matrix[current_node][node]
        dest_dist = distance_matrix[node][destination_node]

        if remaining_nodes > 1:
            connectivity_score = sum(1.0 / (1.0 + distance_matrix[node][n]) for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
            global_score = sum(distance_matrix[node][n] for n in unvisited_nodes if n != node) / (remaining_nodes - 1)
        else:
            connectivity_score = 0
            global_score = 0

        weight_local = 0.5 - 0.3 * exploration_factor
        weight_connectivity = 0.3 + 0.2 * exploration_factor
        weight_global = 0.2 + 0.1 * exploration_factor

        threshold = 1.5 * (1 - exploration_factor)
        candidate_score = (weight_local * current_dist) + (weight_connectivity * connectivity_score) + (weight_global * global_score) + dest_dist

        return candidate_score if candidate_score <= threshold else float('inf')

    next_node = min(unvisited_nodes, key=lambda node: evaluate_node(node))
    return next_node
